# 1 "/workspace/acl/lib_acl_cpp/src/stream/ostream.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "/workspace/acl/lib_acl_cpp/src/stream/ostream.cpp"
# 1 "/workspace/acl/lib_acl_cpp/src/acl_stdafx.hpp" 1
# 11 "/workspace/acl/lib_acl_cpp/src/acl_stdafx.hpp"
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/acl_cpp_define.hpp" 1
       
# 33 "/workspace/acl/lib_acl_cpp/include/acl_cpp/acl_cpp_define.hpp"
# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 36 "/usr/include/c++/7/stdlib.h" 3
# 1 "/usr/include/c++/7/cstdlib" 1 3
# 39 "/usr/include/c++/7/cstdlib" 3
       
# 40 "/usr/include/c++/7/cstdlib" 3

# 1 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h" 1 3
# 229 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h" 3

# 229 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 251 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 533 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/7/bits/os_defines.h" 1 3
# 39 "/usr/include/x86_64-linux-gnu/c++/7/bits/os_defines.h" 3
# 1 "/usr/include/features.h" 1 3 4
# 424 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 427 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 428 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 429 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 425 "/usr/include/features.h" 2 3 4
# 448 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 449 "/usr/include/features.h" 2 3 4
# 40 "/usr/include/x86_64-linux-gnu/c++/7/bits/os_defines.h" 2 3
# 534 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h" 2 3


# 1 "/usr/include/x86_64-linux-gnu/c++/7/bits/cpu_defines.h" 1 3
# 537 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h" 2 3
# 42 "/usr/include/c++/7/cstdlib" 2 3
# 75 "/usr/include/c++/7/cstdlib" 3
# 1 "/usr/include/stdlib.h" 1 3 4
# 25 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 26 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 216 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 32 "/usr/include/stdlib.h" 2 3 4

extern "C" {





# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 40 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 55 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 75 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
typedef _Complex float __cfloat128 __attribute__ ((__mode__ (__TC__)));
# 87 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
typedef __float128 _Float128;
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 207 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef float _Float32;
# 244 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float64;
# 261 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float32x;
# 278 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef long double _Float64x;
# 121 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 56 "/usr/include/stdlib.h" 2 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 97 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () __attribute__ ((__warn_unused_result__));



extern double atof (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern int atoi (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern long int atol (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



__extension__ extern long long int atoll (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 140 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float128 strtof128 (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 176 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 232 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf128 (char *__dest, size_t __size, const char * __format,
   _Float128 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 272 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 273 "/usr/include/stdlib.h" 2 3 4

extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 316 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float128 strtof128_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 360 "/usr/include/stdlib.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) atoi (const char *__nptr) throw ()
{
  return (int) strtol (__nptr, (char **) __null, 10);
}
extern __inline __attribute__ ((__gnu_inline__)) long int
__attribute__ ((__leaf__)) atol (const char *__nptr) throw ()
{
  return strtol (__nptr, (char **) __null, 10);
}


__extension__ extern __inline __attribute__ ((__gnu_inline__)) long long int
__attribute__ ((__leaf__)) atoll (const char *__nptr) throw ()
{
  return strtoll (__nptr, (char **) __null, 10);
}
# 385 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () __attribute__ ((__warn_unused_result__));


extern long int a64l (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));




# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {

# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 130 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 131 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 30 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __pid_t pid_t;





typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;




# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 128 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 130 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4






typedef __time_t time_t;
# 131 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 132 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 146 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 157 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 178 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 194 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap-16.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline unsigned int
__bswap_32 (unsigned int __bsx)
{
  return __builtin_bswap32 (__bsx);
}
# 108 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{
  return __builtin_bswap64 (__bsx);
}
# 61 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 62 "/usr/include/endian.h" 2 3 4
# 195 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{
  __time_t tv_sec;
  __suseconds_t tv_usec;
};
# 38 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4
# 9 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
struct timespec
{
  __time_t tv_sec;
  __syscall_slong_t tv_nsec;
};
# 40 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 101 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 113 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);





# 1 "/usr/include/x86_64-linux-gnu/bits/select2.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/select2.h" 3 4
extern long int __fdelt_chk (long int __d);
extern long int __fdelt_warn (long int __d)
  __attribute__((__warning__ ("bit outside of fd_set selected")));
# 124 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


}
# 198 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 1 3 4
# 41 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sysmacros.h" 1 3 4
# 42 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 2 3 4
# 71 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
extern "C" {

extern unsigned int gnu_dev_major (__dev_t __dev) throw () __attribute__ ((__const__));
extern unsigned int gnu_dev_minor (__dev_t __dev) throw () __attribute__ ((__const__));
extern __dev_t gnu_dev_makedev (unsigned int __major, unsigned int __minor) throw () __attribute__ ((__const__));



__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned int __attribute__ ((__leaf__)) gnu_dev_major (__dev_t __dev) throw () { unsigned int __major; __major = ((__dev & (__dev_t) 0x00000000000fff00u) >> 8); __major |= ((__dev & (__dev_t) 0xfffff00000000000u) >> 32); return __major; }
__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned int __attribute__ ((__leaf__)) gnu_dev_minor (__dev_t __dev) throw () { unsigned int __minor; __minor = ((__dev & (__dev_t) 0x00000000000000ffu) >> 0); __minor |= ((__dev & (__dev_t) 0x00000ffffff00000u) >> 12); return __minor; }
__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) __dev_t __attribute__ ((__leaf__)) gnu_dev_makedev (unsigned int __major, unsigned int __minor) throw () { __dev_t __dev; __dev = (((__dev_t) (__major & 0x00000fffu)) << 8); __dev |= (((__dev_t) (__major & 0xfffff000u)) << 32); __dev |= (((__dev_t) (__minor & 0x000000ffu)) << 0); __dev |= (((__dev_t) (__minor & 0xffffff00u)) << 12); return __dev; }



}
# 206 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4






typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 246 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 77 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 99 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
};
# 78 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 118 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
struct __pthread_mutex_s
{
  int __lock ;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;
# 148 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
  int __kind;
 




  short __spins; short __elision;
  __pthread_list_t __list;
# 165 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
 
};




struct __pthread_cond_s
{
  __extension__ union
  {
    __extension__ unsigned long long int __wseq;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __wseq32;
  };
  __extension__ union
  {
    __extension__ unsigned long long int __g1_start;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __g1_start32;
  };
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 255 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


}
# 395 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();



extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));






extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));



extern void free (void *__ptr) throw ();


# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 567 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));




extern void *aligned_alloc (size_t __alignment, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) __attribute__ ((__warn_unused_result__));



extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
# 607 "/usr/include/stdlib.h" 3 4
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) throw () __attribute__ ((__noreturn__));





extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));





extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));




extern char *secure_getenv (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));






extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 672 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
# 685 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 695 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 707 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 717 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 728 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 739 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 749 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 759 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 771 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 781 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) __attribute__ ((__warn_unused_result__));





extern char *canonicalize_file_name (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 797 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) throw () __attribute__ ((__warn_unused_result__));






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) __attribute__ ((__warn_unused_result__));


# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) void *
bsearch (const void *__key, const void *__base, size_t __nmemb, size_t __size,
  __compar_fn_t __compar)
{
  size_t __l, __u, __idx;
  const void *__p;
  int __comparison;

  __l = 0;
  __u = __nmemb;
  while (__l < __u)
    {
      __idx = (__l + __u) / 2;
      __p = (void *) (((const char *) __base) + (__idx * __size));
      __comparison = (*__compar) (__key, __p);
      if (__comparison < 0)
 __u = __idx;
      else if (__comparison > 0)
 __l = __idx + 1;
      else
 return (void *) __p;
    }

  return __null;
}
# 823 "/usr/include/stdlib.h" 2 3 4




extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
extern long int labs (long int __x) throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));


__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));






extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
# 869 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) __attribute__ ((__warn_unused_result__));




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) __attribute__ ((__warn_unused_result__));




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) throw ();


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) throw ();


extern int wctomb (char *__s, wchar_t __wchar) throw ();



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     throw ();







extern int rpmatch (const char *__response) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 954 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) __attribute__ ((__warn_unused_result__));





extern void setkey (const char *__key) throw () __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) __attribute__ ((__warn_unused_result__));







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () __attribute__ ((__warn_unused_result__));






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));
# 1016 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) double
__attribute__ ((__leaf__)) atof (const char *__nptr) throw ()
{
  return strtod (__nptr, (char **) __null);
}
# 1017 "/usr/include/stdlib.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/stdlib.h" 3 4
extern char *__realpath_chk (const char *__restrict __name,
        char *__restrict __resolved,
        size_t __resolvedlen) throw () __attribute__ ((__warn_unused_result__));
extern char *__realpath_alias (const char *__restrict __name, char *__restrict __resolved) throw () __asm__ ("" "realpath")

                                                 __attribute__ ((__warn_unused_result__));
extern char *__realpath_chk_warn (const char *__restrict __name, char *__restrict __resolved, size_t __resolvedlen) throw () __asm__ ("" "__realpath_chk")


                                                __attribute__ ((__warn_unused_result__))
     __attribute__((__warning__ ("second argument of realpath must be either NULL or at " "least PATH_MAX bytes long buffer")))
                                      ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__leaf__)) realpath (const char *__restrict __name, char *__restrict __resolved) throw ()
{
  if (__builtin_object_size (__resolved, 2 > 1) != (size_t) -1)
    {




      return __realpath_chk (__name, __resolved, __builtin_object_size (__resolved, 2 > 1));
    }

  return __realpath_alias (__name, __resolved);
}


extern int __ptsname_r_chk (int __fd, char *__buf, size_t __buflen,
       size_t __nreal) throw () __attribute__ ((__nonnull__ (2)));
extern int __ptsname_r_alias (int __fd, char *__buf, size_t __buflen) throw () __asm__ ("" "ptsname_r")

     __attribute__ ((__nonnull__ (2)));
extern int __ptsname_r_chk_warn (int __fd, char *__buf, size_t __buflen, size_t __nreal) throw () __asm__ ("" "__ptsname_r_chk")


     __attribute__ ((__nonnull__ (2))) __attribute__((__warning__ ("ptsname_r called with buflen bigger than " "size of buf")))
                   ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) ptsname_r (int __fd, char *__buf, size_t __buflen) throw ()
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __ptsname_r_chk (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));
      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __ptsname_r_chk_warn (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __ptsname_r_alias (__fd, __buf, __buflen);
}


extern int __wctomb_chk (char *__s, wchar_t __wchar, size_t __buflen)
  throw () __attribute__ ((__warn_unused_result__));
extern int __wctomb_alias (char *__s, wchar_t __wchar) throw () __asm__ ("" "wctomb")
              __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) int
__attribute__ ((__leaf__)) wctomb (char *__s, wchar_t __wchar) throw ()
{







  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1 && 16 > __builtin_object_size (__s, 2 > 1))
    return __wctomb_chk (__s, __wchar, __builtin_object_size (__s, 2 > 1));
  return __wctomb_alias (__s, __wchar);
}


extern size_t __mbstowcs_chk (wchar_t *__restrict __dst,
         const char *__restrict __src,
         size_t __len, size_t __dstlen) throw ();
extern size_t __mbstowcs_alias (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len) throw () __asm__ ("" "mbstowcs")


                                  ;
extern size_t __mbstowcs_chk_warn (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len, size_t __dstlen) throw () __asm__ ("" "__mbstowcs_chk")



     __attribute__((__warning__ ("mbstowcs called with dst buffer smaller than len " "* sizeof (wchar_t)")))
                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) mbstowcs (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len) throw ()

{
  if (__builtin_object_size (__dst, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __mbstowcs_chk (__dst, __src, __len,
          __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t));

      if (__len > __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t))
 return __mbstowcs_chk_warn (__dst, __src, __len,
         __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t));
    }
  return __mbstowcs_alias (__dst, __src, __len);
}


extern size_t __wcstombs_chk (char *__restrict __dst,
         const wchar_t *__restrict __src,
         size_t __len, size_t __dstlen) throw ();
extern size_t __wcstombs_alias (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len) throw () __asm__ ("" "wcstombs")


                                  ;
extern size_t __wcstombs_chk_warn (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len, size_t __dstlen) throw () __asm__ ("" "__wcstombs_chk")



     __attribute__((__warning__ ("wcstombs called with dst buffer smaller than len")));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) wcstombs (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len) throw ()

{
  if (__builtin_object_size (__dst, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __wcstombs_chk (__dst, __src, __len, __builtin_object_size (__dst, 2 > 1));
      if (__len > __builtin_object_size (__dst, 2 > 1))
 return __wcstombs_chk_warn (__dst, __src, __len, __builtin_object_size (__dst, 2 > 1));
    }
  return __wcstombs_alias (__dst, __src, __len);
}
# 1021 "/usr/include/stdlib.h" 2 3 4





}
# 76 "/usr/include/c++/7/cstdlib" 2 3

# 1 "/usr/include/c++/7/bits/std_abs.h" 1 3
# 33 "/usr/include/c++/7/bits/std_abs.h" 3
       
# 34 "/usr/include/c++/7/bits/std_abs.h" 3
# 46 "/usr/include/c++/7/bits/std_abs.h" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }







  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }



  inline constexpr __int128
  abs(__int128 __x) { return __x >= 0 ? __x : -__x; }
# 100 "/usr/include/c++/7/bits/std_abs.h" 3
  inline constexpr
  __float128
  abs(__float128 __x)
  { return __x < 0 ? -__x : __x; }



}
}
# 78 "/usr/include/c++/7/cstdlib" 2 3
# 121 "/usr/include/c++/7/cstdlib" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;



  using ::atexit;


  using ::at_quick_exit;


  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;


  using ::quick_exit;


  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }




}
# 195 "/usr/include/c++/7/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 227 "/usr/include/c++/7/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}



}
# 37 "/usr/include/c++/7/stdlib.h" 2 3

using std::abort;
using std::atexit;
using std::exit;


  using std::at_quick_exit;


  using std::quick_exit;




using std::div_t;
using std::ldiv_t;

using std::abs;
using std::atof;
using std::atoi;
using std::atol;
using std::bsearch;
using std::calloc;
using std::div;
using std::free;
using std::getenv;
using std::labs;
using std::ldiv;
using std::malloc;

using std::mblen;
using std::mbstowcs;
using std::mbtowc;

using std::qsort;
using std::rand;
using std::realloc;
using std::srand;
using std::strtod;
using std::strtol;
using std::strtoul;
using std::system;

using std::wcstombs;
using std::wctomb;
# 34 "/workspace/acl/lib_acl_cpp/include/acl_cpp/acl_cpp_define.hpp" 2
# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/stdio.h" 2 3 4

extern "C" {



# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 37 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 38 "/usr/include/stdio.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/libio.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/_G_config.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/_G_config.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/_G_config.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 22 "/usr/include/x86_64-linux-gnu/bits/_G_config.h" 2 3 4




typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 36 "/usr/include/x86_64-linux-gnu/bits/libio.h" 2 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 54 "/usr/include/x86_64-linux-gnu/bits/libio.h" 2 3 4
# 149 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;




typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 177 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 245 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 293 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
  __off64_t _offset;







  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;

  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};





struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 337 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);




extern "C" {


extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 433 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) throw ();
extern int _IO_ferror (_IO_FILE *__fp) throw ();

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) throw ();
extern void _IO_funlockfile (_IO_FILE *) throw ();
extern int _IO_ftrylockfile (_IO_FILE *) throw ();
# 462 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) throw ();
# 524 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
}
# 42 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 78 "/usr/include/stdio.h" 3 4
typedef _G_fpos_t fpos_t;




typedef _G_fpos64_t fpos64_t;
# 131 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 132 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;






extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();







extern FILE *tmpfile (void) __attribute__ ((__warn_unused_result__));
# 169 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) __attribute__ ((__warn_unused_result__));



extern char *tmpnam (char *__s) throw () __attribute__ ((__warn_unused_result__));




extern char *tmpnam_r (char *__s) throw () __attribute__ ((__warn_unused_result__));
# 190 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));







extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 213 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 223 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 232 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) __attribute__ ((__warn_unused_result__));




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
# 256 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) __attribute__ ((__warn_unused_result__));
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));




extern FILE *fdopen (int __fd, const char *__modes) throw () __attribute__ ((__warn_unused_result__));





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) throw () __attribute__ ((__warn_unused_result__));




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () __attribute__ ((__warn_unused_result__));




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () __attribute__ ((__warn_unused_result__));





extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) __attribute__ ((__warn_unused_result__));
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__warn_unused_result__));
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__warn_unused_result__));




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) __attribute__ ((__warn_unused_result__));




extern int scanf (const char *__restrict __format, ...) __attribute__ ((__warn_unused_result__));

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();
# 420 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) __attribute__ ((__warn_unused_result__));





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) __attribute__ ((__warn_unused_result__));


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));
# 477 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);
# 495 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 506 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 517 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 537 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     __attribute__ ((__warn_unused_result__));
# 587 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
# 603 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 662 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 673 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) __attribute__ ((__warn_unused_result__));




extern void rewind (FILE *__stream);
# 707 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) __attribute__ ((__warn_unused_result__));
# 731 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 750 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) __attribute__ ((__warn_unused_result__));
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);



extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));

extern int ferror (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));



extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));
extern int ferror_unlocked (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));







extern void perror (const char *__s);





# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 782 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));




extern int fileno_unlocked (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));
# 800 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) __attribute__ ((__warn_unused_result__));





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));


extern void funlockfile (FILE *__stream) throw ();
# 859 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 1 3 4
# 43 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
getchar (void)
{
  return _IO_getc (stdin);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fgetc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}





extern __inline __attribute__ ((__gnu_inline__)) int
getc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}


extern __inline __attribute__ ((__gnu_inline__)) int
getchar_unlocked (void)
{
  return (__builtin_expect (((stdin)->_IO_read_ptr >= (stdin)->_IO_read_end), 0) ? __uflow (stdin) : *(unsigned char *) (stdin)->_IO_read_ptr++);
}




extern __inline __attribute__ ((__gnu_inline__)) int
putchar (int __c)
{
  return _IO_putc (__c, stdout);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fputc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) int
putc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}


extern __inline __attribute__ ((__gnu_inline__)) int
putchar_unlocked (int __c)
{
  return (__builtin_expect (((stdout)->_IO_write_ptr >= (stdout)->_IO_write_end), 0) ? __overflow (stdout, (unsigned char) (__c)) : (unsigned char) (*(stdout)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) __ssize_t
getline (char **__lineptr, size_t *__n, FILE *__stream)
{
  return __getdelim (__lineptr, __n, '\n', __stream);
}





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) feof_unlocked (FILE *__stream) throw ()
{
  return (((__stream)->_flags & 0x10) != 0);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) ferror_unlocked (FILE *__stream) throw ()
{
  return (((__stream)->_flags & 0x20) != 0);
}
# 860 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
     const char *__restrict __format, ...) throw ();
extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
      const char *__restrict __format,
      __gnuc_va_list __ap) throw ();


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) sprintf (char *__restrict __s, const char *__restrict __fmt, ...) throw ()
{
  return __builtin___sprintf_chk (__s, 2 - 1,
      __builtin_object_size (__s, 2 > 1), __fmt, __builtin_va_arg_pack ());
}






extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) vsprintf (char *__restrict __s, const char *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  return __builtin___vsprintf_chk (__s, 2 - 1,
       __builtin_object_size (__s, 2 > 1), __fmt, __ap);
}



extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
      size_t __slen, const char *__restrict __format,
      ...) throw ();
extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
       size_t __slen, const char *__restrict __format,
       __gnuc_va_list __ap) throw ();


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) snprintf (char *__restrict __s, size_t __n, const char *__restrict __fmt, ...) throw ()

{
  return __builtin___snprintf_chk (__s, __n, 2 - 1,
       __builtin_object_size (__s, 2 > 1), __fmt, __builtin_va_arg_pack ());
}






extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) vsnprintf (char *__restrict __s, size_t __n, const char *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  return __builtin___vsnprintf_chk (__s, __n, 2 - 1,
        __builtin_object_size (__s, 2 > 1), __fmt, __ap);
}





extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
     const char *__restrict __format, ...);
extern int __printf_chk (int __flag, const char *__restrict __format, ...);
extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
      const char *__restrict __format, __gnuc_va_list __ap);
extern int __vprintf_chk (int __flag, const char *__restrict __format,
     __gnuc_va_list __ap);


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
{
  return __fprintf_chk (__stream, 2 - 1, __fmt,
   __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (2 - 1, __fmt, __builtin_va_arg_pack ());
}







extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vprintf (const char *__restrict __fmt, __gnuc_va_list __ap)
{

  return __vfprintf_chk (stdout, 2 - 1, __fmt, __ap);



}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vfprintf (FILE *__restrict __stream,
   const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vfprintf_chk (__stream, 2 - 1, __fmt, __ap);
}


extern int __dprintf_chk (int __fd, int __flag, const char *__restrict __fmt,
     ...) __attribute__ ((__format__ (__printf__, 3, 4)));
extern int __vdprintf_chk (int __fd, int __flag,
      const char *__restrict __fmt, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 3, 0)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
dprintf (int __fd, const char *__restrict __fmt, ...)
{
  return __dprintf_chk (__fd, 2 - 1, __fmt,
   __builtin_va_arg_pack ());
}





extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vdprintf (int __fd, const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vdprintf_chk (__fd, 2 - 1, __fmt, __ap);
}




extern int __asprintf_chk (char **__restrict __ptr, int __flag,
      const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4))) __attribute__ ((__warn_unused_result__));
extern int __vasprintf_chk (char **__restrict __ptr, int __flag,
       const char *__restrict __fmt, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0))) __attribute__ ((__warn_unused_result__));
extern int __obstack_printf_chk (struct obstack *__restrict __obstack,
     int __flag, const char *__restrict __format,
     ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));
extern int __obstack_vprintf_chk (struct obstack *__restrict __obstack,
      int __flag,
      const char *__restrict __format,
      __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) asprintf (char **__restrict __ptr, const char *__restrict __fmt, ...) throw ()
{
  return __asprintf_chk (__ptr, 2 - 1, __fmt,
    __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) __asprintf (char **__restrict __ptr, const char *__restrict __fmt, ...) throw ()

{
  return __asprintf_chk (__ptr, 2 - 1, __fmt,
    __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) obstack_printf (struct obstack *__restrict __obstack, const char *__restrict __fmt, ...) throw ()

{
  return __obstack_printf_chk (__obstack, 2 - 1, __fmt,
          __builtin_va_arg_pack ());
}
# 206 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) vasprintf (char **__restrict __ptr, const char *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  return __vasprintf_chk (__ptr, 2 - 1, __fmt, __ap);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) obstack_vprintf (struct obstack *__restrict __obstack, const char *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  return __obstack_vprintf_chk (__obstack, 2 - 1, __fmt,
    __ap);
}
# 240 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern char *__fgets_chk (char *__restrict __s, size_t __size, int __n,
     FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern char *__fgets_alias (char *__restrict __s, int __n, FILE *__restrict __stream) __asm__ ("" "fgets")

                                        __attribute__ ((__warn_unused_result__));
extern char *__fgets_chk_warn (char *__restrict __s, size_t __size, int __n, FILE *__restrict __stream) __asm__ ("" "__fgets_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgets called with bigger size than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n) || __n <= 0)
 return __fgets_chk (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);

      if ((size_t) __n > __builtin_object_size (__s, 2 > 1))
 return __fgets_chk_warn (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);
    }
  return __fgets_alias (__s, __n, __stream);
}

extern size_t __fread_chk (void *__restrict __ptr, size_t __ptrlen,
      size_t __size, size_t __n,
      FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t __fread_alias (void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "fread")


            __attribute__ ((__warn_unused_result__));
extern size_t __fread_chk_warn (void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "__fread_chk")




     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fread called with bigger size * nmemb than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
fread (void *__restrict __ptr, size_t __size, size_t __n,
       FILE *__restrict __stream)
{
  if (__builtin_object_size (__ptr, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size)
   || !__builtin_constant_p (__n)
   || (__size | __n) >= (((size_t) 1) << (8 * sizeof (size_t) / 2)))
 return __fread_chk (__ptr, __builtin_object_size (__ptr, 0), __size, __n, __stream);

      if (__size * __n > __builtin_object_size (__ptr, 0))
 return __fread_chk_warn (__ptr, __builtin_object_size (__ptr, 0), __size, __n, __stream);
    }
  return __fread_alias (__ptr, __size, __n, __stream);
}


extern char *__fgets_unlocked_chk (char *__restrict __s, size_t __size,
       int __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern char *__fgets_unlocked_alias (char *__restrict __s, int __n, FILE *__restrict __stream) __asm__ ("" "fgets_unlocked")

                                                 __attribute__ ((__warn_unused_result__));
extern char *__fgets_unlocked_chk_warn (char *__restrict __s, size_t __size, int __n, FILE *__restrict __stream) __asm__ ("" "__fgets_unlocked_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgets_unlocked called with bigger size than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
fgets_unlocked (char *__restrict __s, int __n, FILE *__restrict __stream)
{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n) || __n <= 0)
 return __fgets_unlocked_chk (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);

      if ((size_t) __n > __builtin_object_size (__s, 2 > 1))
 return __fgets_unlocked_chk_warn (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);
    }
  return __fgets_unlocked_alias (__s, __n, __stream);
}




extern size_t __fread_unlocked_chk (void *__restrict __ptr, size_t __ptrlen,
        size_t __size, size_t __n,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t __fread_unlocked_alias (void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "fread_unlocked")


                     __attribute__ ((__warn_unused_result__));
extern size_t __fread_unlocked_chk_warn (void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "__fread_unlocked_chk")




     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fread_unlocked called with bigger size * nmemb than " "length of destination buffer")))
                                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
fread_unlocked (void *__restrict __ptr, size_t __size, size_t __n,
  FILE *__restrict __stream)
{
  if (__builtin_object_size (__ptr, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size)
   || !__builtin_constant_p (__n)
   || (__size | __n) >= (((size_t) 1) << (8 * sizeof (size_t) / 2)))
 return __fread_unlocked_chk (__ptr, __builtin_object_size (__ptr, 0), __size, __n,
         __stream);

      if (__size * __n > __builtin_object_size (__ptr, 0))
 return __fread_unlocked_chk_warn (__ptr, __builtin_object_size (__ptr, 0), __size, __n,
       __stream);
    }


  if (__builtin_constant_p (__size)
      && __builtin_constant_p (__n)
      && (__size | __n) < (((size_t) 1) << (8 * sizeof (size_t) / 2))
      && __size * __n <= 8)
    {
      size_t __cnt = __size * __n;
      char *__cptr = (char *) __ptr;
      if (__cnt == 0)
 return 0;

      for (; __cnt > 0; --__cnt)
 {
   int __c = (__builtin_expect (((__stream)->_IO_read_ptr >= (__stream)->_IO_read_end), 0) ? __uflow (__stream) : *(unsigned char *) (__stream)->_IO_read_ptr++);
   if (__c == (-1))
     break;
   *__cptr++ = __c;
 }
      return (__cptr - (char *) __ptr) / __size;
    }

  return __fread_unlocked_alias (__ptr, __size, __n, __stream);
}
# 863 "/usr/include/stdio.h" 2 3 4





}
# 35 "/workspace/acl/lib_acl_cpp/include/acl_cpp/acl_cpp_define.hpp" 2
# 1 "/usr/include/errno.h" 1 3 4
# 28 "/usr/include/errno.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/errno.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4




# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 6 "/usr/include/asm-generic/errno.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 2 3 4
# 1 "/usr/include/linux/errno.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/errno.h" 2 3 4
# 29 "/usr/include/errno.h" 2 3 4





extern "C" {


extern int *__errno_location (void) throw () __attribute__ ((__const__));







extern char *program_invocation_name;
extern char *program_invocation_short_name;





typedef int error_t;




}
# 36 "/workspace/acl/lib_acl_cpp/include/acl_cpp/acl_cpp_define.hpp" 2
# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4

extern "C" {




# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 42 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const void *memchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) void *
memchr (void *__s, int __c, size_t __n) throw ()
{
  return __builtin_memchr (__s, __c, __n);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const void *
memchr (const void *__s, int __c, size_t __n) throw ()
{
  return __builtin_memchr (__s, __c, __n);
}

}
# 98 "/usr/include/string.h" 3 4
extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *rawmemchr (const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *memrchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 121 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));






extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 203 "/usr/include/string.h" 3 4
extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strchr (const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strchr (char *__s, int __c) throw ()
{
  return __builtin_strchr (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strchr (const char *__s, int __c) throw ()
{
  return __builtin_strchr (__s, __c);
}

}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strrchr (const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strrchr (char *__s, int __c) throw ()
{
  return __builtin_strrchr (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strrchr (const char *__s, int __c) throw ()
{
  return __builtin_strrchr (__s, __c);
}

}
# 260 "/usr/include/string.h" 3 4
extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const char *strchrnul (const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 272 "/usr/include/string.h" 3 4
extern size_t strcspn (const char *__s, const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strpbrk (const char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strpbrk (char *__s, const char *__accept) throw ()
{
  return __builtin_strpbrk (__s, __accept);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strpbrk (const char *__s, const char *__accept) throw ()
{
  return __builtin_strpbrk (__s, __accept);
}

}






extern "C++"
{
extern char *strstr (char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strstr (const char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strstr (char *__haystack, const char *__needle) throw ()
{
  return __builtin_strstr (__haystack, __needle);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strstr (const char *__haystack, const char *__needle) throw ()
{
  return __builtin_strstr (__haystack, __needle);
}

}







extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" const char *strcasestr (const char *__haystack,
         const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 368 "/usr/include/string.h" 3 4
extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern size_t strlen (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) throw ();
# 420 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));





extern char *strerror_l (int __errnum, locale_t __l) throw ();



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4






extern "C" {



extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *index (const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
index (char *__s, int __c) throw ()
{
  return __builtin_index (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
index (const char *__s, int __c) throw ()
{
  return __builtin_index (__s, __c);
}

}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *rindex (const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
rindex (char *__s, int __c) throw ()
{
  return __builtin_rindex (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
rindex (const char *__s, int __c) throw ()
{
  return __builtin_rindex (__s, __c);
}

}
# 104 "/usr/include/strings.h" 3 4
extern int ffs (int __i) throw () __attribute__ ((__const__));





extern int ffsl (long int __l) throw () __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));


}





# 1 "/usr/include/x86_64-linux-gnu/bits/strings_fortified.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/strings_fortified.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__leaf__)) bcopy (const void *__src, void *__dest, size_t __len) throw ()
{
  (void) __builtin___memmove_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__leaf__)) bzero (void *__dest, size_t __len) throw ()
{
  (void) __builtin___memset_chk (__dest, '\0', __len, __builtin_object_size (__dest, 0));
}
# 145 "/usr/include/strings.h" 2 3 4
# 432 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" const char *basename (const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 494 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) memcpy (void *__restrict __dest, const void *__restrict __src, size_t __len) throw ()

{
  return __builtin___memcpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) memmove (void *__dest, const void *__src, size_t __len) throw ()
{
  return __builtin___memmove_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) mempcpy (void *__restrict __dest, const void *__restrict __src, size_t __len) throw ()

{
  return __builtin___mempcpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}
# 58 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) memset (void *__dest, int __ch, size_t __len) throw ()
{
# 71 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h" 3 4
  return __builtin___memset_chk (__dest, __ch, __len, __builtin_object_size (__dest, 0));
}




void __explicit_bzero_chk (void *__dest, size_t __len, size_t __destlen)
  throw () __attribute__ ((__nonnull__ (1)));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__leaf__)) explicit_bzero (void *__dest, size_t __len) throw ()
{
  __explicit_bzero_chk (__dest, __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strcpy (char *__restrict __dest, const char *__restrict __src) throw ()
{
  return __builtin___strcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) stpcpy (char *__restrict __dest, const char *__restrict __src) throw ()
{
  return __builtin___stpcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}



extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strncpy (char *__restrict __dest, const char *__restrict __src, size_t __len) throw ()

{
  return __builtin___strncpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 2 > 1));
}


extern char *__stpncpy_chk (char *__dest, const char *__src, size_t __n,
       size_t __destlen) throw ();
extern char *__stpncpy_alias (char *__dest, const char *__src, size_t __n) throw () __asm__ ("" "stpncpy")
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) stpncpy (char *__dest, const char *__src, size_t __n) throw ()
{
  if (__builtin_object_size (__dest, 2 > 1) != (size_t) -1
      && (!__builtin_constant_p (__n) || __n > __builtin_object_size (__dest, 2 > 1)))
    return __stpncpy_chk (__dest, __src, __n, __builtin_object_size (__dest, 2 > 1));
  return __stpncpy_alias (__dest, __src, __n);
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strcat (char *__restrict __dest, const char *__restrict __src) throw ()
{
  return __builtin___strcat_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strncat (char *__restrict __dest, const char *__restrict __src, size_t __len) throw ()

{
  return __builtin___strncat_chk (__dest, __src, __len, __builtin_object_size (__dest, 2 > 1));
}
# 495 "/usr/include/string.h" 2 3 4



}
# 37 "/workspace/acl/lib_acl_cpp/include/acl_cpp/acl_cpp_define.hpp" 2
# 12 "/workspace/acl/lib_acl_cpp/src/acl_stdafx.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/lib_acl.h" 1





# 5 "/workspace/acl/lib_acl_cpp/../lib_acl/include/lib_acl.h"
extern "C" {


# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/init/acl_init.h" 1




extern "C" {


# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/init/../stdlib/acl_define.h" 1







# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/init/../stdlib/acl_define_win32.h" 1
# 9 "/workspace/acl/lib_acl_cpp/../lib_acl/include/init/../stdlib/acl_define.h" 2

# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/init/../stdlib/acl_define_unix.h" 1



# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/init/../stdlib/acl_define_linux.h" 1
# 18 "/workspace/acl/lib_acl_cpp/../lib_acl/include/init/../stdlib/acl_define_linux.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 149 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3 4

# 149 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 426 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 437 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3 4
} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 19 "/workspace/acl/lib_acl_cpp/../lib_acl/include/init/../stdlib/acl_define_linux.h" 2
# 66 "/workspace/acl/lib_acl_cpp/../lib_acl/include/init/../stdlib/acl_define_linux.h"
 
# 66 "/workspace/acl/lib_acl_cpp/../lib_acl/include/init/../stdlib/acl_define_linux.h"
typedef int ACL_WAIT_STATUS_T;
# 5 "/workspace/acl/lib_acl_cpp/../lib_acl/include/init/../stdlib/acl_define_unix.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/init/../stdlib/acl_define_sunx86.h" 1
# 6 "/workspace/acl/lib_acl_cpp/../lib_acl/include/init/../stdlib/acl_define_unix.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/init/../stdlib/acl_define_bsd.h" 1
# 7 "/workspace/acl/lib_acl_cpp/../lib_acl/include/init/../stdlib/acl_define_unix.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/init/../stdlib/acl_define_macosx.h" 1
# 8 "/workspace/acl/lib_acl_cpp/../lib_acl/include/init/../stdlib/acl_define_unix.h" 2
# 41 "/workspace/acl/lib_acl_cpp/../lib_acl/include/init/../stdlib/acl_define_unix.h"
# 1 "/usr/include/assert.h" 1 3 4
# 66 "/usr/include/assert.h" 3 4

# 66 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     throw () __attribute__ ((__noreturn__));


}
# 42 "/workspace/acl/lib_acl_cpp/../lib_acl/include/init/../stdlib/acl_define_unix.h" 2

# 1 "/usr/include/net/if.h" 1 3 4
# 26 "/usr/include/net/if.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/socket.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern "C" {

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 2 3 4


struct iovec
  {
    void *iov_base;
    size_t iov_len;
  };
# 27 "/usr/include/x86_64-linux-gnu/sys/socket.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/sys/socket.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/socket.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/socket.h" 2 3 4





typedef __socklen_t socklen_t;




# 1 "/usr/include/x86_64-linux-gnu/bits/socket_type.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/socket_type.h" 3 4
enum __socket_type
{
  SOCK_STREAM = 1,


  SOCK_DGRAM = 2,


  SOCK_RAW = 3,

  SOCK_RDM = 4,

  SOCK_SEQPACKET = 5,


  SOCK_DCCP = 6,

  SOCK_PACKET = 10,







  SOCK_CLOEXEC = 02000000,


  SOCK_NONBLOCK = 00004000


};
# 39 "/usr/include/x86_64-linux-gnu/bits/socket.h" 2 3 4
# 172 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sockaddr.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/sockaddr.h" 3 4
typedef unsigned short int sa_family_t;
# 173 "/usr/include/x86_64-linux-gnu/bits/socket.h" 2 3 4


struct sockaddr
  {
    sa_family_t sa_family;
    char sa_data[14];
  };
# 188 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
struct sockaddr_storage
  {
    sa_family_t ss_family;
    char __ss_padding[(128 - (sizeof (unsigned short int)) - sizeof (unsigned long int))];
    unsigned long int __ss_align;
  };



enum
  {
    MSG_OOB = 0x01,

    MSG_PEEK = 0x02,

    MSG_DONTROUTE = 0x04,



    MSG_TRYHARD = MSG_DONTROUTE,


    MSG_CTRUNC = 0x08,

    MSG_PROXY = 0x10,

    MSG_TRUNC = 0x20,

    MSG_DONTWAIT = 0x40,

    MSG_EOR = 0x80,

    MSG_WAITALL = 0x100,

    MSG_FIN = 0x200,

    MSG_SYN = 0x400,

    MSG_CONFIRM = 0x800,

    MSG_RST = 0x1000,

    MSG_ERRQUEUE = 0x2000,

    MSG_NOSIGNAL = 0x4000,

    MSG_MORE = 0x8000,

    MSG_WAITFORONE = 0x10000,

    MSG_BATCH = 0x40000,

    MSG_ZEROCOPY = 0x4000000,

    MSG_FASTOPEN = 0x20000000,


    MSG_CMSG_CLOEXEC = 0x40000000



  };




struct msghdr
  {
    void *msg_name;
    socklen_t msg_namelen;

    struct iovec *msg_iov;
    size_t msg_iovlen;

    void *msg_control;
    size_t msg_controllen;




    int msg_flags;
  };


struct cmsghdr
  {
    size_t cmsg_len;




    int cmsg_level;
    int cmsg_type;

    __extension__ unsigned char __cmsg_data [];

  };
# 302 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
extern struct cmsghdr *__cmsg_nxthdr (struct msghdr *__mhdr,
          struct cmsghdr *__cmsg) throw ();




extern __inline __attribute__ ((__gnu_inline__)) struct cmsghdr *
__attribute__ ((__leaf__)) __cmsg_nxthdr (struct msghdr *__mhdr, struct cmsghdr *__cmsg) throw ()
{
  if ((size_t) __cmsg->cmsg_len < sizeof (struct cmsghdr))

    return (struct cmsghdr *) 0;

  __cmsg = (struct cmsghdr *) ((unsigned char *) __cmsg
          + (((__cmsg->cmsg_len) + sizeof (size_t) - 1) & (size_t) ~(sizeof (size_t) - 1)));
  if ((unsigned char *) (__cmsg + 1) > ((unsigned char *) __mhdr->msg_control
     + __mhdr->msg_controllen)
      || ((unsigned char *) __cmsg + (((__cmsg->cmsg_len) + sizeof (size_t) - 1) & (size_t) ~(sizeof (size_t) - 1))
   > ((unsigned char *) __mhdr->msg_control + __mhdr->msg_controllen)))

    return (struct cmsghdr *) 0;
  return __cmsg;
}




enum
  {
    SCM_RIGHTS = 0x01


    , SCM_CREDENTIALS = 0x02


  };



struct ucred
{
  pid_t pid;
  uid_t uid;
  gid_t gid;
};
# 390 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/socket.h" 1 3 4
# 1 "/usr/include/asm-generic/socket.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/asm/sockios.h" 1 3 4
# 1 "/usr/include/asm-generic/sockios.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/sockios.h" 2 3 4
# 6 "/usr/include/asm-generic/socket.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/socket.h" 2 3 4
# 391 "/usr/include/x86_64-linux-gnu/bits/socket.h" 2 3 4
# 444 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
struct linger
  {
    int l_onoff;
    int l_linger;
  };
# 34 "/usr/include/x86_64-linux-gnu/sys/socket.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_osockaddr.h" 1 3 4





struct osockaddr
{
  unsigned short int sa_family;
  unsigned char sa_data[14];
};
# 37 "/usr/include/x86_64-linux-gnu/sys/socket.h" 2 3 4




enum
{
  SHUT_RD = 0,

  SHUT_WR,

  SHUT_RDWR

};
# 90 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
struct mmsghdr
  {
    struct msghdr msg_hdr;
    unsigned int msg_len;

  };






extern int socket (int __domain, int __type, int __protocol) throw ();





extern int socketpair (int __domain, int __type, int __protocol,
         int __fds[2]) throw ();


extern int bind (int __fd, const struct sockaddr * __addr, socklen_t __len)
     throw ();


extern int getsockname (int __fd, struct sockaddr *__restrict __addr,
   socklen_t *__restrict __len) throw ();
# 126 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int connect (int __fd, const struct sockaddr * __addr, socklen_t __len);



extern int getpeername (int __fd, struct sockaddr *__restrict __addr,
   socklen_t *__restrict __len) throw ();






extern ssize_t send (int __fd, const void *__buf, size_t __n, int __flags);






extern ssize_t recv (int __fd, void *__buf, size_t __n, int __flags);






extern ssize_t sendto (int __fd, const void *__buf, size_t __n,
         int __flags, const struct sockaddr * __addr,
         socklen_t __addr_len);
# 163 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern ssize_t recvfrom (int __fd, void *__restrict __buf, size_t __n,
    int __flags, struct sockaddr *__restrict __addr,
    socklen_t *__restrict __addr_len);







extern ssize_t sendmsg (int __fd, const struct msghdr *__message,
   int __flags);







extern int sendmmsg (int __fd, struct mmsghdr *__vmessages,
       unsigned int __vlen, int __flags);







extern ssize_t recvmsg (int __fd, struct msghdr *__message, int __flags);







extern int recvmmsg (int __fd, struct mmsghdr *__vmessages,
       unsigned int __vlen, int __flags,
       struct timespec *__tmo);






extern int getsockopt (int __fd, int __level, int __optname,
         void *__restrict __optval,
         socklen_t *__restrict __optlen) throw ();




extern int setsockopt (int __fd, int __level, int __optname,
         const void *__optval, socklen_t __optlen) throw ();





extern int listen (int __fd, int __n) throw ();
# 232 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int accept (int __fd, struct sockaddr *__restrict __addr,
     socklen_t *__restrict __addr_len);






extern int accept4 (int __fd, struct sockaddr *__restrict __addr,
      socklen_t *__restrict __addr_len, int __flags);
# 250 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int shutdown (int __fd, int __how) throw ();




extern int sockatmark (int __fd) throw ();







extern int isfdtype (int __fd, int __fdtype) throw ();





# 1 "/usr/include/x86_64-linux-gnu/bits/socket2.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/socket2.h" 3 4
extern ssize_t __recv_chk (int __fd, void *__buf, size_t __n, size_t __buflen,
      int __flags);
extern ssize_t __recv_alias (int __fd, void *__buf, size_t __n, int __flags) __asm__ ("" "recv")
                          ;
extern ssize_t __recv_chk_warn (int __fd, void *__buf, size_t __n, size_t __buflen, int __flags) __asm__ ("" "__recv_chk")


     __attribute__((__warning__ ("recv called with bigger length than size of destination " "buffer")))
            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) ssize_t
recv (int __fd, void *__buf, size_t __n, int __flags)
{
  if (__builtin_object_size (__buf, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n))
 return __recv_chk (__fd, __buf, __n, __builtin_object_size (__buf, 0), __flags);

      if (__n > __builtin_object_size (__buf, 0))
 return __recv_chk_warn (__fd, __buf, __n, __builtin_object_size (__buf, 0), __flags);
    }
  return __recv_alias (__fd, __buf, __n, __flags);
}

extern ssize_t __recvfrom_chk (int __fd, void *__restrict __buf, size_t __n,
          size_t __buflen, int __flags,
          struct sockaddr *__restrict __addr,
          socklen_t *__restrict __addr_len);
extern ssize_t __recvfrom_alias (int __fd, void *__restrict __buf, size_t __n, int __flags, struct sockaddr *__restrict __addr, socklen_t *__restrict __addr_len) __asm__ ("" "recvfrom")


                                                   ;
extern ssize_t __recvfrom_chk_warn (int __fd, void *__restrict __buf, size_t __n, size_t __buflen, int __flags, struct sockaddr *__restrict __addr, socklen_t *__restrict __addr_len) __asm__ ("" "__recvfrom_chk")




     __attribute__((__warning__ ("recvfrom called with bigger length than size of " "destination buffer")))
                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) ssize_t
recvfrom (int __fd, void *__restrict __buf, size_t __n, int __flags,
   struct sockaddr *__restrict __addr, socklen_t *__restrict __addr_len)
{
  if (__builtin_object_size (__buf, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n))
 return __recvfrom_chk (__fd, __buf, __n, __builtin_object_size (__buf, 0), __flags,
          __addr, __addr_len);
      if (__n > __builtin_object_size (__buf, 0))
 return __recvfrom_chk_warn (__fd, __buf, __n, __builtin_object_size (__buf, 0), __flags,
        __addr, __addr_len);
    }
  return __recvfrom_alias (__fd, __buf, __n, __flags, __addr, __addr_len);
}
# 270 "/usr/include/x86_64-linux-gnu/sys/socket.h" 2 3 4


}
# 27 "/usr/include/net/if.h" 2 3 4






struct if_nameindex
  {
    unsigned int if_index;
    char *if_name;
  };




enum
  {
    IFF_UP = 0x1,

    IFF_BROADCAST = 0x2,

    IFF_DEBUG = 0x4,

    IFF_LOOPBACK = 0x8,

    IFF_POINTOPOINT = 0x10,

    IFF_NOTRAILERS = 0x20,

    IFF_RUNNING = 0x40,

    IFF_NOARP = 0x80,

    IFF_PROMISC = 0x100,



    IFF_ALLMULTI = 0x200,


    IFF_MASTER = 0x400,

    IFF_SLAVE = 0x800,


    IFF_MULTICAST = 0x1000,


    IFF_PORTSEL = 0x2000,

    IFF_AUTOMEDIA = 0x4000,

    IFF_DYNAMIC = 0x8000

  };






struct ifaddr
  {
    struct sockaddr ifa_addr;
    union
      {
 struct sockaddr ifu_broadaddr;
 struct sockaddr ifu_dstaddr;
      } ifa_ifu;
    struct iface *ifa_ifp;
    struct ifaddr *ifa_next;
  };
# 111 "/usr/include/net/if.h" 3 4
struct ifmap
  {
    unsigned long int mem_start;
    unsigned long int mem_end;
    unsigned short int base_addr;
    unsigned char irq;
    unsigned char dma;
    unsigned char port;

  };





struct ifreq
  {


    union
      {
 char ifrn_name[16];
      } ifr_ifrn;

    union
      {
 struct sockaddr ifru_addr;
 struct sockaddr ifru_dstaddr;
 struct sockaddr ifru_broadaddr;
 struct sockaddr ifru_netmask;
 struct sockaddr ifru_hwaddr;
 short int ifru_flags;
 int ifru_ivalue;
 int ifru_mtu;
 struct ifmap ifru_map;
 char ifru_slave[16];
 char ifru_newname[16];
 __caddr_t ifru_data;
      } ifr_ifru;
  };
# 176 "/usr/include/net/if.h" 3 4
struct ifconf
  {
    int ifc_len;
    union
      {
 __caddr_t ifcu_buf;
 struct ifreq *ifcu_req;
      } ifc_ifcu;
  };





extern "C" {


extern unsigned int if_nametoindex (const char *__ifname) throw ();
extern char *if_indextoname (unsigned int __ifindex, char *__ifname) throw ();


extern struct if_nameindex *if_nameindex (void) throw ();


extern void if_freenameindex (struct if_nameindex *__ptr) throw ();

}
# 44 "/workspace/acl/lib_acl_cpp/../lib_acl/include/init/../stdlib/acl_define_unix.h" 2
# 11 "/workspace/acl/lib_acl_cpp/../lib_acl/include/init/../stdlib/acl_define.h" 2


# 12 "/workspace/acl/lib_acl_cpp/../lib_acl/include/init/../stdlib/acl_define.h"
typedef long long int acl_off_t;
typedef struct stat64 acl_stat_t;






# 1 "/usr/include/ctype.h" 1 3 4
# 28 "/usr/include/ctype.h" 3 4

# 28 "/usr/include/ctype.h" 3 4
extern "C" {
# 46 "/usr/include/ctype.h" 3 4
enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     throw () __attribute__ ((__const__));
# 108 "/usr/include/ctype.h" 3 4
extern int isalnum (int) throw ();
extern int isalpha (int) throw ();
extern int iscntrl (int) throw ();
extern int isdigit (int) throw ();
extern int islower (int) throw ();
extern int isgraph (int) throw ();
extern int isprint (int) throw ();
extern int ispunct (int) throw ();
extern int isspace (int) throw ();
extern int isupper (int) throw ();
extern int isxdigit (int) throw ();



extern int tolower (int __c) throw ();


extern int toupper (int __c) throw ();




extern int isblank (int) throw ();




extern int isctype (int __c, int __mask) throw ();






extern int isascii (int __c) throw ();



extern int toascii (int __c) throw ();



extern int _toupper (int) throw ();
extern int _tolower (int) throw ();
# 251 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, locale_t) throw ();
extern int isalpha_l (int, locale_t) throw ();
extern int iscntrl_l (int, locale_t) throw ();
extern int isdigit_l (int, locale_t) throw ();
extern int islower_l (int, locale_t) throw ();
extern int isgraph_l (int, locale_t) throw ();
extern int isprint_l (int, locale_t) throw ();
extern int ispunct_l (int, locale_t) throw ();
extern int isspace_l (int, locale_t) throw ();
extern int isupper_l (int, locale_t) throw ();
extern int isxdigit_l (int, locale_t) throw ();

extern int isblank_l (int, locale_t) throw ();



extern int __tolower_l (int __c, locale_t __l) throw ();
extern int tolower_l (int __c, locale_t __l) throw ();


extern int __toupper_l (int __c, locale_t __l) throw ();
extern int toupper_l (int __c, locale_t __l) throw ();
# 327 "/usr/include/ctype.h" 3 4
}
# 21 "/workspace/acl/lib_acl_cpp/../lib_acl/include/init/../stdlib/acl_define.h" 2

# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 23 "/workspace/acl/lib_acl_cpp/../lib_acl/include/init/../stdlib/acl_define.h" 2
# 9 "/workspace/acl/lib_acl_cpp/../lib_acl/include/init/acl_init.h" 2




 
# 13 "/workspace/acl/lib_acl_cpp/../lib_acl/include/init/acl_init.h"
       void acl_lib_init(void);




 void acl_lib_end(void);





 void acl_poll_prefered(int yesno);





 const char *acl_version(void);





 const char *acl_verbose(void);





 unsigned long acl_main_thread_self(void);


}
# 9 "/workspace/acl/lib_acl_cpp/../lib_acl/include/lib_acl.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 1




extern "C" {


# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_define.h" 1
# 9 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_sys_patch.h" 1




extern "C" {



# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h" 1




extern "C" {



# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 73 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timex.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4

# 26 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4
struct timex
{
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 74 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4

extern "C" {


extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) throw ();

}
# 34 "/usr/include/time.h" 2 3 4





# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4
# 48 "/usr/include/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 68 "/usr/include/time.h" 3 4
extern "C" {



extern clock_t clock (void) throw ();


extern time_t time (time_t *__timer) throw ();


extern double difftime (time_t __time1, time_t __time0)
     throw () __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) throw ();





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) throw ();




extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     throw ();






extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) throw ();



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    locale_t __loc) throw ();





extern struct tm *gmtime (const time_t *__timer) throw ();



extern struct tm *localtime (const time_t *__timer) throw ();




extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) throw ();



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) throw ();




extern char *asctime (const struct tm *__tp) throw ();


extern char *ctime (const time_t *__timer) throw ();






extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) throw ();


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) throw ();




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) throw ();



extern int daylight;
extern long int timezone;





extern int stime (const time_t *__when) throw ();
# 196 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) throw ();


extern time_t timelocal (struct tm *__tp) throw ();


extern int dysize (int __year) throw () __attribute__ ((__const__));
# 211 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     throw ();






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) throw ();


extern int timer_delete (timer_t __timerid) throw ();


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) throw ();


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     throw ();


extern int timer_getoverrun (timer_t __timerid) throw ();





extern int timespec_get (struct timespec *__ts, int __base)
     throw () __attribute__ ((__nonnull__ (1)));
# 280 "/usr/include/time.h" 3 4
extern int getdate_err;
# 289 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 303 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 10 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h" 2



# 1 "/usr/include/x86_64-linux-gnu/sys/time.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern "C" {
# 52 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };

typedef struct timezone *__restrict __timezone_ptr_t;
# 68 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern int gettimeofday (struct timeval *__restrict __tv,
    __timezone_ptr_t __tz) throw () __attribute__ ((__nonnull__ (1)));




extern int settimeofday (const struct timeval *__tv,
    const struct timezone *__tz)
     throw ();





extern int adjtime (const struct timeval *__delta,
      struct timeval *__olddelta) throw ();




enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };






typedef int __itimer_which_t;




extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) throw ();




extern int setitimer (__itimer_which_t __which,
        const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) throw ();




extern int utimes (const char *__file, const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));



extern int lutimes (const char *__file, const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));


extern int futimes (int __fd, const struct timeval __tvp[2]) throw ();






extern int futimesat (int __fd, const char *__file,
        const struct timeval __tvp[2]) throw ();
# 186 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
}
# 14 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h" 2

# 1 "/usr/include/x86_64-linux-gnu/sys/uio.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uio_lim.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/sys/uio.h" 2 3 4






extern "C" {
# 41 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t readv (int __fd, const struct iovec *__iovec, int __count)
  __attribute__ ((__warn_unused_result__));
# 52 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t writev (int __fd, const struct iovec *__iovec, int __count)
  __attribute__ ((__warn_unused_result__));
# 67 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t preadv (int __fd, const struct iovec *__iovec, int __count,
         __off_t __offset) __attribute__ ((__warn_unused_result__));
# 79 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t pwritev (int __fd, const struct iovec *__iovec, int __count,
   __off_t __offset) __attribute__ ((__warn_unused_result__));
# 106 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t preadv64 (int __fd, const struct iovec *__iovec, int __count,
    __off64_t __offset) __attribute__ ((__warn_unused_result__));
# 118 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t pwritev64 (int __fd, const struct iovec *__iovec, int __count,
     __off64_t __offset) __attribute__ ((__warn_unused_result__));







extern ssize_t preadv2 (int __fp, const struct iovec *__iovec, int __count,
   __off_t __offset, int ___flags) __attribute__ ((__warn_unused_result__));


extern ssize_t pwritev2 (int __fd, const struct iovec *__iodev, int __count,
    __off_t __offset, int __flags) __attribute__ ((__warn_unused_result__));
# 152 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t preadv64v2 (int __fp, const struct iovec *__iovec,
      int __count, __off64_t __offset,
      int ___flags) __attribute__ ((__warn_unused_result__));


extern ssize_t pwritev64v2 (int __fd, const struct iovec *__iodev,
       int __count, __off64_t __offset,
       int __flags) __attribute__ ((__warn_unused_result__));



}




# 1 "/usr/include/x86_64-linux-gnu/bits/uio-ext.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/uio-ext.h" 3 4
extern "C" {


extern ssize_t process_vm_readv (pid_t __pid, const struct iovec *__lvec,
     unsigned long int __liovcnt,
     const struct iovec *__rvec,
     unsigned long int __riovcnt,
     unsigned long int __flags)
  throw ();


extern ssize_t process_vm_writev (pid_t __pid, const struct iovec *__lvec,
      unsigned long int __liovcnt,
      const struct iovec *__rvec,
      unsigned long int __riovcnt,
      unsigned long int __flags)
  throw ();
# 51 "/usr/include/x86_64-linux-gnu/bits/uio-ext.h" 3 4
}
# 169 "/usr/include/x86_64-linux-gnu/sys/uio.h" 2 3 4
# 16 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h" 2
# 1 "/usr/include/fcntl.h" 1 3 4
# 28 "/usr/include/fcntl.h" 3 4
extern "C" {






# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 3 4
struct flock
  {
    short int l_type;
    short int l_whence;

    __off_t l_start;
    __off_t l_len;




    __pid_t l_pid;
  };


struct flock64
  {
    short int l_type;
    short int l_whence;
    __off64_t l_start;
    __off64_t l_len;
    __pid_t l_pid;
  };



# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 1 3 4
# 265 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
enum __pid_type
  {
    F_OWNER_TID = 0,
    F_OWNER_PID,
    F_OWNER_PGRP,
    F_OWNER_GID = F_OWNER_PGRP
  };


struct f_owner_ex
  {
    enum __pid_type type;
    __pid_t pid;
  };
# 346 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
# 1 "/usr/include/linux/falloc.h" 1 3 4
# 347 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 2 3 4



struct file_handle
{
  unsigned int handle_bytes;
  int handle_type;

  unsigned char f_handle[0];
};
# 380 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
extern "C" {




extern __ssize_t readahead (int __fd, __off64_t __offset, size_t __count)
    throw ();






extern int sync_file_range (int __fd, __off64_t __offset, __off64_t __count,
       unsigned int __flags);






extern __ssize_t vmsplice (int __fdout, const struct iovec *__iov,
      size_t __count, unsigned int __flags);





extern __ssize_t splice (int __fdin, __off64_t *__offin, int __fdout,
    __off64_t *__offout, size_t __len,
    unsigned int __flags);





extern __ssize_t tee (int __fdin, int __fdout, size_t __len,
        unsigned int __flags);






extern int fallocate (int __fd, int __mode, __off_t __offset, __off_t __len);
# 435 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
extern int fallocate64 (int __fd, int __mode, __off64_t __offset,
   __off64_t __len);




extern int name_to_handle_at (int __dfd, const char *__name,
         struct file_handle *__handle, int *__mnt_id,
         int __flags) throw ();





extern int open_by_handle_at (int __mountdirfd, struct file_handle *__handle,
         int __flags);



}
# 61 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 2 3 4
# 36 "/usr/include/fcntl.h" 2 3 4
# 78 "/usr/include/fcntl.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 46 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
struct stat
  {
    __dev_t st_dev;




    __ino_t st_ino;







    __nlink_t st_nlink;
    __mode_t st_mode;

    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;

    __dev_t st_rdev;




    __off_t st_size;



    __blksize_t st_blksize;

    __blkcnt_t st_blocks;
# 91 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 106 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];
# 115 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
  };



struct stat64
  {
    __dev_t st_dev;

    __ino64_t st_ino;
    __nlink_t st_nlink;
    __mode_t st_mode;






    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;
    __dev_t st_rdev;
    __off_t st_size;





    __blksize_t st_blksize;
    __blkcnt64_t st_blocks;







    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 164 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];



  };
# 79 "/usr/include/fcntl.h" 2 3 4
# 147 "/usr/include/fcntl.h" 3 4
extern int fcntl (int __fd, int __cmd, ...);
# 157 "/usr/include/fcntl.h" 3 4
extern int open (const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 167 "/usr/include/fcntl.h" 3 4
extern int open64 (const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 181 "/usr/include/fcntl.h" 3 4
extern int openat (int __fd, const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 192 "/usr/include/fcntl.h" 3 4
extern int openat64 (int __fd, const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 203 "/usr/include/fcntl.h" 3 4
extern int creat (const char *__file, mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 213 "/usr/include/fcntl.h" 3 4
extern int creat64 (const char *__file, mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 232 "/usr/include/fcntl.h" 3 4
extern int lockf (int __fd, int __cmd, off_t __len);
# 241 "/usr/include/fcntl.h" 3 4
extern int lockf64 (int __fd, int __cmd, off64_t __len);







extern int posix_fadvise (int __fd, off_t __offset, off_t __len,
     int __advise) throw ();
# 261 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise64 (int __fd, off64_t __offset, off64_t __len,
       int __advise) throw ();
# 271 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate (int __fd, off_t __offset, off_t __len);
# 282 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate64 (int __fd, off64_t __offset, off64_t __len);







# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl2.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/fcntl2.h" 3 4
extern int __open_2 (const char *__path, int __oflag) __attribute__ ((__nonnull__ (1)));
extern int __open_alias (const char *__path, int __oflag, ...) __asm__ ("" "open")
               __attribute__ ((__nonnull__ (1)));






extern void __open_too_many_args (void) __attribute__((__error__ ("open can be called either with 2 or 3 arguments, not more")))
                                                                  ;
extern void __open_missing_mode (void) __attribute__((__error__ ("open with O_CREAT or O_TMPFILE in second argument needs 3 arguments")))
                                                                            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
open (const char *__path, int __oflag, ...)
{
  if (__builtin_va_arg_pack_len () > 1)
    __open_too_many_args ();

  if (__builtin_constant_p (__oflag))
    {
      if ((((__oflag) & 0100) != 0 || ((__oflag) & (020000000 | 0200000)) == (020000000 | 0200000)) && __builtin_va_arg_pack_len () < 1)
 {
   __open_missing_mode ();
   return __open_2 (__path, __oflag);
 }
      return __open_alias (__path, __oflag, __builtin_va_arg_pack ());
    }

  if (__builtin_va_arg_pack_len () < 1)
    return __open_2 (__path, __oflag);

  return __open_alias (__path, __oflag, __builtin_va_arg_pack ());
}



extern int __open64_2 (const char *__path, int __oflag) __attribute__ ((__nonnull__ (1)));
extern int __open64_alias (const char *__path, int __oflag, ...) __asm__ ("" "open64")
                   __attribute__ ((__nonnull__ (1)));
extern void __open64_too_many_args (void) __attribute__((__error__ ("open64 can be called either with 2 or 3 arguments, not more")))
                                                                    ;
extern void __open64_missing_mode (void) __attribute__((__error__ ("open64 with O_CREAT or O_TMPFILE in second argument needs 3 arguments")))
                                                                              ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
open64 (const char *__path, int __oflag, ...)
{
  if (__builtin_va_arg_pack_len () > 1)
    __open64_too_many_args ();

  if (__builtin_constant_p (__oflag))
    {
      if ((((__oflag) & 0100) != 0 || ((__oflag) & (020000000 | 0200000)) == (020000000 | 0200000)) && __builtin_va_arg_pack_len () < 1)
 {
   __open64_missing_mode ();
   return __open64_2 (__path, __oflag);
 }
      return __open64_alias (__path, __oflag, __builtin_va_arg_pack ());
    }

  if (__builtin_va_arg_pack_len () < 1)
    return __open64_2 (__path, __oflag);

  return __open64_alias (__path, __oflag, __builtin_va_arg_pack ());
}





extern int __openat_2 (int __fd, const char *__path, int __oflag)
     __attribute__ ((__nonnull__ (2)));
extern int __openat_alias (int __fd, const char *__path, int __oflag, ...) __asm__ ("" "openat")

     __attribute__ ((__nonnull__ (2)));
# 111 "/usr/include/x86_64-linux-gnu/bits/fcntl2.h" 3 4
extern void __openat_too_many_args (void) __attribute__((__error__ ("openat can be called either with 3 or 4 arguments, not more")))
                                                                    ;
extern void __openat_missing_mode (void) __attribute__((__error__ ("openat with O_CREAT or O_TMPFILE in third argument needs 4 arguments")))
                                                                             ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
openat (int __fd, const char *__path, int __oflag, ...)
{
  if (__builtin_va_arg_pack_len () > 1)
    __openat_too_many_args ();

  if (__builtin_constant_p (__oflag))
    {
      if ((((__oflag) & 0100) != 0 || ((__oflag) & (020000000 | 0200000)) == (020000000 | 0200000)) && __builtin_va_arg_pack_len () < 1)
 {
   __openat_missing_mode ();
   return __openat_2 (__fd, __path, __oflag);
 }
      return __openat_alias (__fd, __path, __oflag, __builtin_va_arg_pack ());
    }

  if (__builtin_va_arg_pack_len () < 1)
    return __openat_2 (__fd, __path, __oflag);

  return __openat_alias (__fd, __path, __oflag, __builtin_va_arg_pack ());
}



extern int __openat64_2 (int __fd, const char *__path, int __oflag)
     __attribute__ ((__nonnull__ (2)));
extern int __openat64_alias (int __fd, const char *__path, int __oflag, ...) __asm__ ("" "openat64")

     __attribute__ ((__nonnull__ (2)));
extern void __openat64_too_many_args (void) __attribute__((__error__ ("openat64 can be called either with 3 or 4 arguments, not more")))
                                                                      ;
extern void __openat64_missing_mode (void) __attribute__((__error__ ("openat64 with O_CREAT or O_TMPFILE in third argument needs 4 arguments")))
                                                                               ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
openat64 (int __fd, const char *__path, int __oflag, ...)
{
  if (__builtin_va_arg_pack_len () > 1)
    __openat64_too_many_args ();

  if (__builtin_constant_p (__oflag))
    {
      if ((((__oflag) & 0100) != 0 || ((__oflag) & (020000000 | 0200000)) == (020000000 | 0200000)) && __builtin_va_arg_pack_len () < 1)
 {
   __openat64_missing_mode ();
   return __openat64_2 (__fd, __path, __oflag);
 }
      return __openat64_alias (__fd, __path, __oflag, __builtin_va_arg_pack ());
    }

  if (__builtin_va_arg_pack_len () < 1)
    return __openat64_2 (__fd, __path, __oflag);

  return __openat64_alias (__fd, __path, __oflag, __builtin_va_arg_pack ());
}
# 291 "/usr/include/fcntl.h" 2 3 4


}
# 17 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h" 2
# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4
extern "C" {
# 205 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 206 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 210 "/usr/include/unistd.h" 2 3 4
# 229 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 230 "/usr/include/unistd.h" 2 3 4
# 270 "/usr/include/unistd.h" 3 4
typedef __intptr_t intptr_t;
# 290 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) throw () __attribute__ ((__nonnull__ (1)));




extern int euidaccess (const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));


extern int eaccess (const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));






extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));
# 337 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) throw ();
# 348 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     throw ();






extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) __attribute__ ((__warn_unused_result__));





extern ssize_t write (int __fd, const void *__buf, size_t __n) __attribute__ ((__warn_unused_result__));
# 379 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) __attribute__ ((__warn_unused_result__));






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset) __attribute__ ((__warn_unused_result__));
# 407 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) __attribute__ ((__warn_unused_result__));


extern ssize_t pwrite64 (int __fd, const void *__buf, size_t __n,
    __off64_t __offset) __attribute__ ((__warn_unused_result__));







extern int pipe (int __pipedes[2]) throw () __attribute__ ((__warn_unused_result__));




extern int pipe2 (int __pipedes[2], int __flags) throw () __attribute__ ((__warn_unused_result__));
# 435 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) throw ();
# 447 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     throw ();






extern int usleep (__useconds_t __useconds);
# 472 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) throw () __attribute__ ((__warn_unused_result__));




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));



extern int chdir (const char *__path) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern int fchdir (int __fd) throw () __attribute__ ((__warn_unused_result__));
# 514 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) throw () __attribute__ ((__warn_unused_result__));





extern char *get_current_dir_name (void) throw ();







extern char *getwd (char *__buf)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) __attribute__ ((__warn_unused_result__));




extern int dup (int __fd) throw () __attribute__ ((__warn_unused_result__));


extern int dup2 (int __fd, int __fd2) throw ();




extern int dup3 (int __fd, int __fd2, int __flags) throw ();



extern char **__environ;

extern char **environ;





extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) throw () __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     throw () __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execvpe (const char *__file, char *const __argv[],
      char *const __envp[])
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int nice (int __inc) throw () __attribute__ ((__warn_unused_result__));




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 613 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     throw () __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) throw ();


extern long int sysconf (int __name) throw ();



extern size_t confstr (int __name, char *__buf, size_t __len) throw ();




extern __pid_t getpid (void) throw ();


extern __pid_t getppid (void) throw ();


extern __pid_t getpgrp (void) throw ();


extern __pid_t __getpgid (__pid_t __pid) throw ();

extern __pid_t getpgid (__pid_t __pid) throw ();






extern int setpgid (__pid_t __pid, __pid_t __pgid) throw ();
# 663 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) throw ();






extern __pid_t setsid (void) throw ();



extern __pid_t getsid (__pid_t __pid) throw ();



extern __uid_t getuid (void) throw ();


extern __uid_t geteuid (void) throw ();


extern __gid_t getgid (void) throw ();


extern __gid_t getegid (void) throw ();




extern int getgroups (int __size, __gid_t __list[]) throw () __attribute__ ((__warn_unused_result__));



extern int group_member (__gid_t __gid) throw ();






extern int setuid (__uid_t __uid) throw () __attribute__ ((__warn_unused_result__));




extern int setreuid (__uid_t __ruid, __uid_t __euid) throw () __attribute__ ((__warn_unused_result__));




extern int seteuid (__uid_t __uid) throw () __attribute__ ((__warn_unused_result__));






extern int setgid (__gid_t __gid) throw () __attribute__ ((__warn_unused_result__));




extern int setregid (__gid_t __rgid, __gid_t __egid) throw () __attribute__ ((__warn_unused_result__));




extern int setegid (__gid_t __gid) throw () __attribute__ ((__warn_unused_result__));





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     throw ();



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     throw ();



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     throw () __attribute__ ((__warn_unused_result__));



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     throw () __attribute__ ((__warn_unused_result__));






extern __pid_t fork (void) throw ();







extern __pid_t vfork (void) throw ();





extern char *ttyname (int __fd) throw ();



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));



extern int isatty (int __fd) throw ();




extern int ttyslot (void) throw ();




extern int link (const char *__from, const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     throw () __attribute__ ((__nonnull__ (2, 4))) __attribute__ ((__warn_unused_result__));




extern int symlink (const char *__from, const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));




extern int symlinkat (const char *__from, int __tofd,
        const char *__to) throw () __attribute__ ((__nonnull__ (1, 3))) __attribute__ ((__warn_unused_result__));


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__));



extern int unlink (const char *__name) throw () __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     throw () __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) throw () __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) throw ();


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) throw ();






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (const char *__name) throw () __attribute__ ((__nonnull__ (1)));







# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern "C" {







extern char *optarg;
# 50 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 91 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       throw () __attribute__ ((__nonnull__ (2, 3)));

}
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 2 3 4

extern "C" {
# 49 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
}
# 873 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) throw () __attribute__ ((__nonnull__ (1)));






extern int sethostname (const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern int sethostid (long int __id) throw () __attribute__ ((__warn_unused_result__));





extern int getdomainname (char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int setdomainname (const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));





extern int vhangup (void) throw ();


extern int revoke (const char *__file) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     throw () __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) throw ();



extern char *getusershell (void) throw ();
extern void endusershell (void) throw ();
extern void setusershell (void) throw ();





extern int daemon (int __nochdir, int __noclose) throw () __attribute__ ((__warn_unused_result__));






extern int chroot (const char *__path) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);





extern int syncfs (int __fd) throw ();






extern long int gethostid (void);


extern void sync (void) throw ();





extern int getpagesize (void) throw () __attribute__ ((__const__));




extern int getdtablesize (void) throw ();
# 994 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 1006 "/usr/include/unistd.h" 3 4
extern int truncate64 (const char *__file, __off64_t __length)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 1017 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) throw () __attribute__ ((__warn_unused_result__));
# 1027 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) throw () __attribute__ ((__warn_unused_result__));
# 1038 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) throw () __attribute__ ((__warn_unused_result__));





extern void *sbrk (intptr_t __delta) throw ();
# 1059 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) throw ();
# 1110 "/usr/include/unistd.h" 3 4
ssize_t copy_file_range (int __infd, __off64_t *__pinoff,
    int __outfd, __off64_t *__poutoff,
    size_t __length, unsigned int __flags);





extern int fdatasync (int __fildes);







extern char *crypt (const char *__key, const char *__salt)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern void encrypt (char *__glibc_block, int __edflag)
     throw () __attribute__ ((__nonnull__ (1)));






extern void swab (const void *__restrict __from, void *__restrict __to,
    ssize_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));
# 1167 "/usr/include/unistd.h" 3 4
int getentropy (void *__buffer, size_t __length) __attribute__ ((__warn_unused_result__));




# 1 "/usr/include/x86_64-linux-gnu/bits/unistd.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/unistd.h" 3 4
extern ssize_t __read_chk (int __fd, void *__buf, size_t __nbytes,
      size_t __buflen) __attribute__ ((__warn_unused_result__));
extern ssize_t __read_alias (int __fd, void *__buf, size_t __nbytes) __asm__ ("" "read")
                               __attribute__ ((__warn_unused_result__));
extern ssize_t __read_chk_warn (int __fd, void *__buf, size_t __nbytes, size_t __buflen) __asm__ ("" "__read_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("read called with bigger length than size of " "the destination buffer")))
                                  ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) ssize_t
read (int __fd, void *__buf, size_t __nbytes)
{
  if (__builtin_object_size (__buf, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__nbytes))
 return __read_chk (__fd, __buf, __nbytes, __builtin_object_size (__buf, 0));

      if (__nbytes > __builtin_object_size (__buf, 0))
 return __read_chk_warn (__fd, __buf, __nbytes, __builtin_object_size (__buf, 0));
    }
  return __read_alias (__fd, __buf, __nbytes);
}


extern ssize_t __pread_chk (int __fd, void *__buf, size_t __nbytes,
       __off_t __offset, size_t __bufsize) __attribute__ ((__warn_unused_result__));
extern ssize_t __pread64_chk (int __fd, void *__buf, size_t __nbytes,
         __off64_t __offset, size_t __bufsize) __attribute__ ((__warn_unused_result__));
extern ssize_t __pread_alias (int __fd, void *__buf, size_t __nbytes, __off_t __offset) __asm__ ("" "pread")

                                 __attribute__ ((__warn_unused_result__));
extern ssize_t __pread64_alias (int __fd, void *__buf, size_t __nbytes, __off64_t __offset) __asm__ ("" "pread64")

                                     __attribute__ ((__warn_unused_result__));
extern ssize_t __pread_chk_warn (int __fd, void *__buf, size_t __nbytes, __off_t __offset, size_t __bufsize) __asm__ ("" "__pread_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("pread called with bigger length than size of " "the destination buffer")))
                                  ;
extern ssize_t __pread64_chk_warn (int __fd, void *__buf, size_t __nbytes, __off64_t __offset, size_t __bufsize) __asm__ ("" "__pread64_chk")



     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("pread64 called with bigger length than size of " "the destination buffer")))
                                  ;


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) ssize_t
pread (int __fd, void *__buf, size_t __nbytes, __off_t __offset)
{
  if (__builtin_object_size (__buf, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__nbytes))
 return __pread_chk (__fd, __buf, __nbytes, __offset, __builtin_object_size (__buf, 0));

      if ( __nbytes > __builtin_object_size (__buf, 0))
 return __pread_chk_warn (__fd, __buf, __nbytes, __offset,
     __builtin_object_size (__buf, 0));
    }
  return __pread_alias (__fd, __buf, __nbytes, __offset);
}
# 104 "/usr/include/x86_64-linux-gnu/bits/unistd.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) ssize_t
pread64 (int __fd, void *__buf, size_t __nbytes, __off64_t __offset)
{
  if (__builtin_object_size (__buf, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__nbytes))
 return __pread64_chk (__fd, __buf, __nbytes, __offset, __builtin_object_size (__buf, 0));

      if ( __nbytes > __builtin_object_size (__buf, 0))
 return __pread64_chk_warn (__fd, __buf, __nbytes, __offset,
       __builtin_object_size (__buf, 0));
    }

  return __pread64_alias (__fd, __buf, __nbytes, __offset);
}




extern ssize_t __readlink_chk (const char *__restrict __path,
          char *__restrict __buf, size_t __len,
          size_t __buflen)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));
extern ssize_t __readlink_alias (const char *__restrict __path, char *__restrict __buf, size_t __len) throw () __asm__ ("" "readlink")


     __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));
extern ssize_t __readlink_chk_warn (const char *__restrict __path, char *__restrict __buf, size_t __len, size_t __buflen) throw () __asm__ ("" "__readlink_chk")



     __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("readlink called with bigger length " "than size of destination buffer")))
                                         ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__)) ssize_t
__attribute__ ((__leaf__)) readlink (const char *__restrict __path, char *__restrict __buf, size_t __len) throw ()

{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __readlink_chk (__path, __buf, __len, __builtin_object_size (__buf, 2 > 1));

      if ( __len > __builtin_object_size (__buf, 2 > 1))
 return __readlink_chk_warn (__path, __buf, __len, __builtin_object_size (__buf, 2 > 1));
    }
  return __readlink_alias (__path, __buf, __len);
}



extern ssize_t __readlinkat_chk (int __fd, const char *__restrict __path,
     char *__restrict __buf, size_t __len,
     size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__));
extern ssize_t __readlinkat_alias (int __fd, const char *__restrict __path, char *__restrict __buf, size_t __len) throw () __asm__ ("" "readlinkat")



     __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__));
extern ssize_t __readlinkat_chk_warn (int __fd, const char *__restrict __path, char *__restrict __buf, size_t __len, size_t __buflen) throw () __asm__ ("" "__readlinkat_chk")



     __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("readlinkat called with bigger " "length than size of destination " "buffer")))

                ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__)) ssize_t
__attribute__ ((__leaf__)) readlinkat (int __fd, const char *__restrict __path, char *__restrict __buf, size_t __len) throw ()

{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __readlinkat_chk (__fd, __path, __buf, __len, __builtin_object_size (__buf, 2 > 1));

      if (__len > __builtin_object_size (__buf, 2 > 1))
 return __readlinkat_chk_warn (__fd, __path, __buf, __len,
          __builtin_object_size (__buf, 2 > 1));
    }
  return __readlinkat_alias (__fd, __path, __buf, __len);
}


extern char *__getcwd_chk (char *__buf, size_t __size, size_t __buflen)
     throw () __attribute__ ((__warn_unused_result__));
extern char *__getcwd_alias (char *__buf, size_t __size) throw () __asm__ ("" "getcwd")
                                              __attribute__ ((__warn_unused_result__));
extern char *__getcwd_chk_warn (char *__buf, size_t __size, size_t __buflen) throw () __asm__ ("" "__getcwd_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("getcwd caller with bigger length than size of " "destination buffer")))
                              ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__leaf__)) getcwd (char *__buf, size_t __size) throw ()
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size))
 return __getcwd_chk (__buf, __size, __builtin_object_size (__buf, 2 > 1));

      if (__size > __builtin_object_size (__buf, 2 > 1))
 return __getcwd_chk_warn (__buf, __size, __builtin_object_size (__buf, 2 > 1));
    }
  return __getcwd_alias (__buf, __size);
}


extern char *__getwd_chk (char *__buf, size_t buflen)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern char *__getwd_warn (char *__buf) throw () __asm__ ("" "getwd")
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("please use getcwd instead, as getwd " "doesn't specify buffer size")))
                                         ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__leaf__)) getwd (char *__buf) throw ()
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    return __getwd_chk (__buf, __builtin_object_size (__buf, 2 > 1));
  return __getwd_warn (__buf);
}


extern size_t __confstr_chk (int __name, char *__buf, size_t __len,
        size_t __buflen) throw ();
extern size_t __confstr_alias (int __name, char *__buf, size_t __len) throw () __asm__ ("" "confstr")
                             ;
extern size_t __confstr_chk_warn (int __name, char *__buf, size_t __len, size_t __buflen) throw () __asm__ ("" "__confstr_chk")


     __attribute__((__warning__ ("confstr called with bigger length than size of destination " "buffer")))
            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) confstr (int __name, char *__buf, size_t __len) throw ()
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __confstr_chk (__name, __buf, __len, __builtin_object_size (__buf, 2 > 1));

      if (__builtin_object_size (__buf, 2 > 1) < __len)
 return __confstr_chk_warn (__name, __buf, __len, __builtin_object_size (__buf, 2 > 1));
    }
  return __confstr_alias (__name, __buf, __len);
}


extern int __getgroups_chk (int __size, __gid_t __list[], size_t __listlen)
     throw () __attribute__ ((__warn_unused_result__));
extern int __getgroups_alias (int __size, __gid_t __list[]) throw () __asm__ ("" "getgroups")
                 __attribute__ ((__warn_unused_result__));
extern int __getgroups_chk_warn (int __size, __gid_t __list[], size_t __listlen) throw () __asm__ ("" "__getgroups_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("getgroups called with bigger group count than what " "can fit into destination buffer")))
                                           ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) getgroups (int __size, __gid_t __list[]) throw ()
{
  if (__builtin_object_size (__list, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size) || __size < 0)
 return __getgroups_chk (__size, __list, __builtin_object_size (__list, 2 > 1));

      if (__size * sizeof (__gid_t) > __builtin_object_size (__list, 2 > 1))
 return __getgroups_chk_warn (__size, __list, __builtin_object_size (__list, 2 > 1));
    }
  return __getgroups_alias (__size, __list);
}


extern int __ttyname_r_chk (int __fd, char *__buf, size_t __buflen,
       size_t __nreal) throw () __attribute__ ((__nonnull__ (2)));
extern int __ttyname_r_alias (int __fd, char *__buf, size_t __buflen) throw () __asm__ ("" "ttyname_r")

     __attribute__ ((__nonnull__ (2)));
extern int __ttyname_r_chk_warn (int __fd, char *__buf, size_t __buflen, size_t __nreal) throw () __asm__ ("" "__ttyname_r_chk")


     __attribute__ ((__nonnull__ (2))) __attribute__((__warning__ ("ttyname_r called with bigger buflen than " "size of destination buffer")))
                                  ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) ttyname_r (int __fd, char *__buf, size_t __buflen) throw ()
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __ttyname_r_chk (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));

      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __ttyname_r_chk_warn (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __ttyname_r_alias (__fd, __buf, __buflen);
}



extern int __getlogin_r_chk (char *__buf, size_t __buflen, size_t __nreal)
     __attribute__ ((__nonnull__ (1)));
extern int __getlogin_r_alias (char *__buf, size_t __buflen) __asm__ ("" "getlogin_r")
                     __attribute__ ((__nonnull__ (1)));
extern int __getlogin_r_chk_warn (char *__buf, size_t __buflen, size_t __nreal) __asm__ ("" "__getlogin_r_chk")


     __attribute__ ((__nonnull__ (1))) __attribute__((__warning__ ("getlogin_r called with bigger buflen than " "size of destination buffer")))
                                  ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
getlogin_r (char *__buf, size_t __buflen)
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __getlogin_r_chk (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));

      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __getlogin_r_chk_warn (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __getlogin_r_alias (__buf, __buflen);
}




extern int __gethostname_chk (char *__buf, size_t __buflen, size_t __nreal)
     throw () __attribute__ ((__nonnull__ (1)));
extern int __gethostname_alias (char *__buf, size_t __buflen) throw () __asm__ ("" "gethostname")
                   __attribute__ ((__nonnull__ (1)));
extern int __gethostname_chk_warn (char *__buf, size_t __buflen, size_t __nreal) throw () __asm__ ("" "__gethostname_chk")


     __attribute__ ((__nonnull__ (1))) __attribute__((__warning__ ("gethostname called with bigger buflen than " "size of destination buffer")))
                                  ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) gethostname (char *__buf, size_t __buflen) throw ()
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __gethostname_chk (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));

      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __gethostname_chk_warn (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __gethostname_alias (__buf, __buflen);
}




extern int __getdomainname_chk (char *__buf, size_t __buflen, size_t __nreal)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int __getdomainname_alias (char *__buf, size_t __buflen) throw () __asm__ ("" "getdomainname")

                     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int __getdomainname_chk_warn (char *__buf, size_t __buflen, size_t __nreal) throw () __asm__ ("" "__getdomainname_chk")


     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("getdomainname called with bigger " "buflen than size of destination " "buffer")))

                    ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) getdomainname (char *__buf, size_t __buflen) throw ()
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __getdomainname_chk (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));

      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __getdomainname_chk_warn (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __getdomainname_alias (__buf, __buflen);
}
# 1173 "/usr/include/unistd.h" 2 3 4


}
# 18 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h" 2
# 1 "/usr/include/netinet/in.h" 1 3 4
# 22 "/usr/include/netinet/in.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 23 "/usr/include/netinet/in.h" 2 3 4




extern "C" {


typedef uint32_t in_addr_t;
struct in_addr
  {
    in_addr_t s_addr;
  };


# 1 "/usr/include/x86_64-linux-gnu/bits/in.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/in.h" 3 4
struct ip_opts
  {
    struct in_addr ip_dst;
    char ip_opts[40];
  };


struct ip_mreqn
  {
    struct in_addr imr_multiaddr;
    struct in_addr imr_address;
    int imr_ifindex;
  };


struct in_pktinfo
  {
    int ipi_ifindex;
    struct in_addr ipi_spec_dst;
    struct in_addr ipi_addr;
  };
# 38 "/usr/include/netinet/in.h" 2 3 4


enum
  {
    IPPROTO_IP = 0,

    IPPROTO_ICMP = 1,

    IPPROTO_IGMP = 2,

    IPPROTO_IPIP = 4,

    IPPROTO_TCP = 6,

    IPPROTO_EGP = 8,

    IPPROTO_PUP = 12,

    IPPROTO_UDP = 17,

    IPPROTO_IDP = 22,

    IPPROTO_TP = 29,

    IPPROTO_DCCP = 33,

    IPPROTO_IPV6 = 41,

    IPPROTO_RSVP = 46,

    IPPROTO_GRE = 47,

    IPPROTO_ESP = 50,

    IPPROTO_AH = 51,

    IPPROTO_MTP = 92,

    IPPROTO_BEETPH = 94,

    IPPROTO_ENCAP = 98,

    IPPROTO_PIM = 103,

    IPPROTO_COMP = 108,

    IPPROTO_SCTP = 132,

    IPPROTO_UDPLITE = 136,

    IPPROTO_MPLS = 137,

    IPPROTO_RAW = 255,

    IPPROTO_MAX
  };





enum
  {
    IPPROTO_HOPOPTS = 0,

    IPPROTO_ROUTING = 43,

    IPPROTO_FRAGMENT = 44,

    IPPROTO_ICMPV6 = 58,

    IPPROTO_NONE = 59,

    IPPROTO_DSTOPTS = 60,

    IPPROTO_MH = 135

  };



typedef uint16_t in_port_t;


enum
  {
    IPPORT_ECHO = 7,
    IPPORT_DISCARD = 9,
    IPPORT_SYSTAT = 11,
    IPPORT_DAYTIME = 13,
    IPPORT_NETSTAT = 15,
    IPPORT_FTP = 21,
    IPPORT_TELNET = 23,
    IPPORT_SMTP = 25,
    IPPORT_TIMESERVER = 37,
    IPPORT_NAMESERVER = 42,
    IPPORT_WHOIS = 43,
    IPPORT_MTP = 57,

    IPPORT_TFTP = 69,
    IPPORT_RJE = 77,
    IPPORT_FINGER = 79,
    IPPORT_TTYLINK = 87,
    IPPORT_SUPDUP = 95,


    IPPORT_EXECSERVER = 512,
    IPPORT_LOGINSERVER = 513,
    IPPORT_CMDSERVER = 514,
    IPPORT_EFSSERVER = 520,


    IPPORT_BIFFUDP = 512,
    IPPORT_WHOSERVER = 513,
    IPPORT_ROUTESERVER = 520,


    IPPORT_RESERVED = 1024,


    IPPORT_USERRESERVED = 5000
  };
# 211 "/usr/include/netinet/in.h" 3 4
struct in6_addr
  {
    union
      {
 uint8_t __u6_addr8[16];
 uint16_t __u6_addr16[8];
 uint32_t __u6_addr32[4];
      } __in6_u;





  };


extern const struct in6_addr in6addr_any;
extern const struct in6_addr in6addr_loopback;
# 237 "/usr/include/netinet/in.h" 3 4
struct sockaddr_in
  {
    sa_family_t sin_family;
    in_port_t sin_port;
    struct in_addr sin_addr;


    unsigned char sin_zero[sizeof (struct sockaddr) -
      (sizeof (unsigned short int)) -
      sizeof (in_port_t) -
      sizeof (struct in_addr)];
  };



struct sockaddr_in6
  {
    sa_family_t sin6_family;
    in_port_t sin6_port;
    uint32_t sin6_flowinfo;
    struct in6_addr sin6_addr;
    uint32_t sin6_scope_id;
  };




struct ip_mreq
  {

    struct in_addr imr_multiaddr;


    struct in_addr imr_interface;
  };

struct ip_mreq_source
  {

    struct in_addr imr_multiaddr;


    struct in_addr imr_interface;


    struct in_addr imr_sourceaddr;
  };




struct ipv6_mreq
  {

    struct in6_addr ipv6mr_multiaddr;


    unsigned int ipv6mr_interface;
  };




struct group_req
  {

    uint32_t gr_interface;


    struct sockaddr_storage gr_group;
  };

struct group_source_req
  {

    uint32_t gsr_interface;


    struct sockaddr_storage gsr_group;


    struct sockaddr_storage gsr_source;
  };



struct ip_msfilter
  {

    struct in_addr imsf_multiaddr;


    struct in_addr imsf_interface;


    uint32_t imsf_fmode;


    uint32_t imsf_numsrc;

    struct in_addr imsf_slist[1];
  };





struct group_filter
  {

    uint32_t gf_interface;


    struct sockaddr_storage gf_group;


    uint32_t gf_fmode;


    uint32_t gf_numsrc;

    struct sockaddr_storage gf_slist[1];
};
# 374 "/usr/include/netinet/in.h" 3 4
extern uint32_t ntohl (uint32_t __netlong) throw () __attribute__ ((__const__));
extern uint16_t ntohs (uint16_t __netshort)
     throw () __attribute__ ((__const__));
extern uint32_t htonl (uint32_t __hostlong)
     throw () __attribute__ ((__const__));
extern uint16_t htons (uint16_t __hostshort)
     throw () __attribute__ ((__const__));




# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 386 "/usr/include/netinet/in.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 387 "/usr/include/netinet/in.h" 2 3 4
# 502 "/usr/include/netinet/in.h" 3 4
extern int bindresvport (int __sockfd, struct sockaddr_in *__sock_in) throw ();


extern int bindresvport6 (int __sockfd, struct sockaddr_in6 *__sock_in)
     throw ();
# 532 "/usr/include/netinet/in.h" 3 4
struct cmsghdr;



struct in6_pktinfo
  {
    struct in6_addr ipi6_addr;
    unsigned int ipi6_ifindex;
  };


struct ip6_mtuinfo
  {
    struct sockaddr_in6 ip6m_addr;
    uint32_t ip6m_mtu;
  };



extern int inet6_option_space (int __nbytes)
     throw () __attribute__ ((__deprecated__));
extern int inet6_option_init (void *__bp, struct cmsghdr **__cmsgp,
         int __type) throw () __attribute__ ((__deprecated__));
extern int inet6_option_append (struct cmsghdr *__cmsg,
    const uint8_t *__typep, int __multx,
    int __plusy) throw () __attribute__ ((__deprecated__));
extern uint8_t *inet6_option_alloc (struct cmsghdr *__cmsg, int __datalen,
        int __multx, int __plusy)
     throw () __attribute__ ((__deprecated__));
extern int inet6_option_next (const struct cmsghdr *__cmsg,
         uint8_t **__tptrp)
     throw () __attribute__ ((__deprecated__));
extern int inet6_option_find (const struct cmsghdr *__cmsg,
         uint8_t **__tptrp, int __type)
     throw () __attribute__ ((__deprecated__));



extern int inet6_opt_init (void *__extbuf, socklen_t __extlen) throw ();
extern int inet6_opt_append (void *__extbuf, socklen_t __extlen, int __offset,
        uint8_t __type, socklen_t __len, uint8_t __align,
        void **__databufp) throw ();
extern int inet6_opt_finish (void *__extbuf, socklen_t __extlen, int __offset)
     throw ();
extern int inet6_opt_set_val (void *__databuf, int __offset, void *__val,
         socklen_t __vallen) throw ();
extern int inet6_opt_next (void *__extbuf, socklen_t __extlen, int __offset,
      uint8_t *__typep, socklen_t *__lenp,
      void **__databufp) throw ();
extern int inet6_opt_find (void *__extbuf, socklen_t __extlen, int __offset,
      uint8_t __type, socklen_t *__lenp,
      void **__databufp) throw ();
extern int inet6_opt_get_val (void *__databuf, int __offset, void *__val,
         socklen_t __vallen) throw ();



extern socklen_t inet6_rth_space (int __type, int __segments) throw ();
extern void *inet6_rth_init (void *__bp, socklen_t __bp_len, int __type,
        int __segments) throw ();
extern int inet6_rth_add (void *__bp, const struct in6_addr *__addr) throw ();
extern int inet6_rth_reverse (const void *__in, void *__out) throw ();
extern int inet6_rth_segments (const void *__bp) throw ();
extern struct in6_addr *inet6_rth_getaddr (const void *__bp, int __index)
     throw ();





extern int getipv4sourcefilter (int __s, struct in_addr __interface_addr,
    struct in_addr __group, uint32_t *__fmode,
    uint32_t *__numsrc, struct in_addr *__slist)
     throw ();


extern int setipv4sourcefilter (int __s, struct in_addr __interface_addr,
    struct in_addr __group, uint32_t __fmode,
    uint32_t __numsrc,
    const struct in_addr *__slist)
     throw ();



extern int getsourcefilter (int __s, uint32_t __interface_addr,
       const struct sockaddr *__group,
       socklen_t __grouplen, uint32_t *__fmode,
       uint32_t *__numsrc,
       struct sockaddr_storage *__slist) throw ();


extern int setsourcefilter (int __s, uint32_t __interface_addr,
       const struct sockaddr *__group,
       socklen_t __grouplen, uint32_t __fmode,
       uint32_t __numsrc,
       const struct sockaddr_storage *__slist) throw ();


}
# 19 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h" 2


# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_array.h" 1





# 5 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_array.h"
extern "C" {



# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_dbuf_pool.h" 1




extern "C" {


typedef struct ACL_DBUF_POOL ACL_DBUF_POOL;






 ACL_DBUF_POOL *acl_dbuf_pool_create(size_t block_size);







 int acl_dbuf_pool_reset(ACL_DBUF_POOL *pool, size_t off);





 void acl_dbuf_pool_destroy(ACL_DBUF_POOL *pool);







 void *acl_dbuf_pool_alloc(ACL_DBUF_POOL *pool, size_t len);







 void *acl_dbuf_pool_calloc(ACL_DBUF_POOL *pool, size_t len);







 char *acl_dbuf_pool_strdup(ACL_DBUF_POOL *pool, const char *s);
# 62 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_dbuf_pool.h"
 char *acl_dbuf_pool_strndup(ACL_DBUF_POOL *pool,
 const char *s, size_t len);
# 72 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_dbuf_pool.h"
 void *acl_dbuf_pool_memdup(ACL_DBUF_POOL *pool,
  const void *addr, size_t len);
# 82 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_dbuf_pool.h"
 int acl_dbuf_pool_free(ACL_DBUF_POOL *pool, const void *addr);







 int acl_dbuf_pool_keep(ACL_DBUF_POOL *pool, const void *addr);







 int acl_dbuf_pool_unkeep(ACL_DBUF_POOL *pool, const void *addr);




 void acl_dbuf_pool_test(size_t max);


}
# 10 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_array.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_iterator.h" 1



typedef struct ACL_ITER ACL_ITER;




struct ACL_ITER {
 void *ptr;
 void *data;
 int dlen;
 const char *key;
 int klen;
 int i;
 int size;
};
# 11 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_array.h" 2




typedef struct ACL_ARRAY ACL_ARRAY;
struct ACL_ARRAY{
 ACL_DBUF_POOL *dbuf;
 int capacity;
 int count;
 void **items;




 void (*push_back)(struct ACL_ARRAY*, void*);

 void (*push_front)(struct ACL_ARRAY*, void*);

 void *(*pop_back)(struct ACL_ARRAY*);

 void *(*pop_front)(struct ACL_ARRAY*);




 void *(*iter_head)(ACL_ITER*, struct ACL_ARRAY*);

 void *(*iter_next)(ACL_ITER*, struct ACL_ARRAY*);

 void *(*iter_tail)(ACL_ITER*, struct ACL_ARRAY*);

 void *(*iter_prev)(ACL_ITER*, struct ACL_ARRAY*);
};






 ACL_ARRAY *acl_array_create(int init_size);







 ACL_ARRAY *acl_array_dbuf_create(int init_size, ACL_DBUF_POOL *dbuf);






 void acl_array_clean(ACL_ARRAY *a, void (*free_fn)(void *));







 void acl_array_free(ACL_ARRAY *a, void (*free_fn)(void *));
# 82 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_array.h"
 int acl_array_append(ACL_ARRAY *a, void *obj);







 int acl_array_prepend(ACL_ARRAY *a, void *obj);
# 99 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_array.h"
 int acl_array_pred_insert(ACL_ARRAY *a, int position, void *obj);
# 108 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_array.h"
 int acl_array_succ_insert(ACL_ARRAY *a, int position, void *obj);
# 121 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_array.h"
 int acl_array_delete_idx(ACL_ARRAY *a, int position, void (*free_fn)(void *));
# 132 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_array.h"
 int acl_array_delete(ACL_ARRAY *a, int position, void (*free_fn)(void*));
# 144 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_array.h"
 int acl_array_delete_obj(ACL_ARRAY *a, void *obj, void (*free_fn)(void *));
# 155 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_array.h"
 int acl_array_delete_range(ACL_ARRAY *a, int ibegin, int iend, void (*free_fn)(void*));
# 167 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_array.h"
 int acl_array_mv_idx(ACL_ARRAY *a, int ito, int ifrom, void (*free_fn)(void *) );






 void acl_array_pre_append(ACL_ARRAY *a, int app_count);







 void *acl_array_index(const ACL_ARRAY *a, int idx);






 int acl_array_size(const ACL_ARRAY *a);


}
# 22 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_htable.h" 1




extern "C" {



# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/../thread/acl_thread.h" 1




extern "C" {


# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/../thread/acl_pthread.h" 1




extern "C" {


# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/../thread/../stdlib/acl_define.h" 1
# 9 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/../thread/acl_pthread.h" 2
# 18 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/../thread/acl_pthread.h"
# 1 "/usr/include/pthread.h" 1 3 4
# 23 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 29 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 30 "/usr/include/sched.h" 2 3 4
# 43 "/usr/include/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sched.h" 1 3 4
# 75 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4

# 75 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
struct sched_param
{
  int sched_priority;
};

extern "C" {



extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) throw ();


extern int unshare (int __flags) throw ();


extern int sched_getcpu (void) throw ();


extern int setns (int __fd, int __nstype) throw ();


}
# 44 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 115 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4
extern "C" {

extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
     throw ();
extern cpu_set_t *__sched_cpualloc (size_t __count) throw () __attribute__ ((__warn_unused_result__));
extern void __sched_cpufree (cpu_set_t *__set) throw ();

}
# 45 "/usr/include/sched.h" 2 3 4






extern "C" {


extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     throw ();


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) throw ();


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) throw ();


extern int sched_getscheduler (__pid_t __pid) throw ();


extern int sched_yield (void) throw ();


extern int sched_get_priority_max (int __algorithm) throw ();


extern int sched_get_priority_min (int __algorithm) throw ();


extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) throw ();
# 121 "/usr/include/sched.h" 3 4
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         const cpu_set_t *__cpuset) throw ();


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) throw ();


}
# 24 "/usr/include/pthread.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4




enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 115 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 156 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 191 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 229 "/usr/include/pthread.h" 3 4
extern "C" {




extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) throw () __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) throw ();







extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     const struct timespec *__abstime);






extern int pthread_detach (pthread_t __th) throw ();



extern pthread_t pthread_self (void) throw () __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  throw () __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));


extern int pthread_getattr_default_np (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_setattr_default_np (const pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));




extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     throw ();




extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
          size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int pthread_setname_np (pthread_t __target_thread, const char *__name)
     throw () __attribute__ ((__nonnull__ (2)));





extern int pthread_getconcurrency (void) throw ();


extern int pthread_setconcurrency (int __level) throw ();







extern int pthread_yield (void) throw ();




extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));
# 495 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 507 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 541 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};




class __pthread_cleanup_class
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;

 public:
  __pthread_cleanup_class (void (*__fct) (void *), void *__arg)
    : __cancel_routine (__fct), __cancel_arg (__arg), __do_it (1) { }
  ~__pthread_cleanup_class () { if (__do_it) __cancel_routine (__cancel_arg); }
  void __setdoit (int __newval) { __do_it = __newval; }
  void __defer () { pthread_setcanceltype (PTHREAD_CANCEL_DEFERRED,
        &__cancel_type); }
  void __restore () const { pthread_setcanceltype (__cancel_type, 0); }
};
# 743 "/usr/include/pthread.h" 3 4
struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) throw ();





extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     throw () __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));
# 807 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern int pthread_mutexattr_getrobust_np (const pthread_mutexattr_t *__attr,
        int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *__attr,
        int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));
# 889 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) throw () __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 1001 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_condattr_init (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     throw () __attribute__ ((__nonnull__ (1)));
# 1045 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));
# 1112 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) throw ();


extern void *pthread_getspecific (pthread_key_t __key) throw ();


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer) throw () ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     throw () __attribute__ ((__nonnull__ (2)));
# 1146 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) throw ();




extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) pthread_equal (pthread_t __thread1, pthread_t __thread2) throw ()
{
  return __thread1 == __thread2;
}


}
# 19 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/../thread/acl_pthread.h" 2








# 26 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/../thread/acl_pthread.h"
typedef pthread_t acl_pthread_t;
typedef pthread_attr_t acl_pthread_attr_t;
typedef pthread_mutex_t acl_pthread_mutex_t;
typedef pthread_cond_t acl_pthread_cond_t;
typedef pthread_mutexattr_t acl_pthread_mutexattr_t;
typedef pthread_condattr_t acl_pthread_condattr_t;
typedef pthread_key_t acl_pthread_key_t;
typedef pthread_once_t acl_pthread_once_t;
# 217 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/../thread/acl_pthread.h"
 int acl_thread_mutex_lock(acl_pthread_mutex_t *mutex);
 int acl_thread_mutex_unlock(acl_pthread_mutex_t *mutex);
 int acl_thread_mutex_nested(acl_pthread_mutex_t *mutex);


 int acl_pthread_atexit_add(void *arg, void (*free_callback)(void*));
 int acl_pthread_atexit_remove(void *arg, void (*free_callback)(void*));

 int acl_pthread_tls_set_max(int max);
 int acl_pthread_tls_get_max(void);
 void *acl_pthread_tls_get(acl_pthread_key_t *key_ptr);
 int acl_pthread_tls_set(acl_pthread_key_t key, void *ptr,
  void (*free_fn)(void *));
 int acl_pthread_tls_del(acl_pthread_key_t key);
 void acl_pthread_tls_once_get(acl_pthread_once_t *control_once);
 void acl_pthread_tls_once_set(acl_pthread_once_t control_once);
 acl_pthread_key_t acl_pthread_tls_key_get(void);
 void acl_pthread_tls_key_set(acl_pthread_key_t key);


}
# 9 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/../thread/acl_thread.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/../thread/acl_pthread_rwlock.h" 1
# 51 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/../thread/acl_pthread_rwlock.h"
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/../thread/../thread/acl_pthread.h" 1
# 52 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/../thread/acl_pthread_rwlock.h" 2
# 68 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/../thread/acl_pthread_rwlock.h"
struct acl_pthread_rwlock {
 acl_pthread_mutex_t lock;
 int state;
 acl_pthread_cond_t read_signal;
 acl_pthread_cond_t write_signal;
 int blocked_writers;
};

struct acl_pthread_rwlockattr {
        int pshared;
};

typedef struct acl_pthread_rwlock *acl_pthread_rwlock_t;
typedef struct acl_pthread_rwlockattr *acl_pthread_rwlockattr_t;


extern "C" {


 int acl_pthread_rwlock_destroy(acl_pthread_rwlock_t *);
 int acl_pthread_rwlock_init(acl_pthread_rwlock_t *,
  const acl_pthread_rwlockattr_t *);
 int acl_pthread_rwlock_rdlock(acl_pthread_rwlock_t *);
 int acl_pthread_rwlock_tryrdlock(acl_pthread_rwlock_t *);
 int acl_pthread_rwlock_trywrlock(acl_pthread_rwlock_t *);
 int acl_pthread_rwlock_unlock(acl_pthread_rwlock_t *);
 int acl_pthread_rwlock_wrlock(acl_pthread_rwlock_t *);
 int acl_pthread_rwlockattr_init(acl_pthread_rwlockattr_t *);
 int acl_pthread_rwlockattr_getpshared(const acl_pthread_rwlockattr_t *, int *);
 int acl_pthread_rwlockattr_setpshared(acl_pthread_rwlockattr_t *, int);
 int acl_pthread_rwlockattr_destroy(acl_pthread_rwlockattr_t *);


}
# 10 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/../thread/acl_thread.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/../thread/acl_pthread_pool.h" 1
# 12 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/../thread/acl_pthread_pool.h"
extern "C" {


typedef struct acl_pthread_job_t acl_pthread_job_t;
# 24 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/../thread/acl_pthread_pool.h"
 acl_pthread_job_t *acl_pthread_pool_alloc_job(void (*run_fn)(void*),
  void *run_arg, int fixed);





 void acl_pthread_pool_free_job(acl_pthread_job_t *job);




typedef struct acl_pthread_pool_t acl_pthread_pool_t;




typedef struct acl_pthread_pool_attr_t {
 int threads_limit;

 int idle_timeout;

 size_t stack_size;
} acl_pthread_pool_attr_t;







 acl_pthread_pool_t *acl_thread_pool_create(
  int threads_limit, int idle_timeout);







 acl_pthread_pool_t *acl_pthread_pool_create(
  const acl_pthread_pool_attr_t *attr);
# 74 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/../thread/acl_pthread_pool.h"
 int acl_pthread_pool_set_timewait(
  acl_pthread_pool_t *thr_pool, int timewait_sec);
# 85 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/../thread/acl_pthread_pool.h"
 int acl_pthread_pool_atinit(acl_pthread_pool_t *thr_pool,
  int (*init_fn)(void *), void *init_arg);
# 95 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/../thread/acl_pthread_pool.h"
 int acl_pthread_pool_atfree(acl_pthread_pool_t *thr_pool,
  void (*free_fn)(void *), void *free_arg);






 int acl_pthread_pool_destroy(acl_pthread_pool_t *thr_pool);






 int acl_pthread_pool_stop(acl_pthread_pool_t *thr_pool);







 void acl_pthread_pool_add_one(acl_pthread_pool_t *thr_pool,
  void (*run_fn)(void *), void *run_arg);







 void acl_pthread_pool_add_job(acl_pthread_pool_t *thr_pool,
  acl_pthread_job_t *job);





 void acl_pthread_pool_bat_add_begin(acl_pthread_pool_t *thr_pool);







 void acl_pthread_pool_bat_add_one(acl_pthread_pool_t *thr_pool,
  void (*run_fn)(void *), void *run_arg);





 void acl_pthread_pool_bat_add_job(acl_pthread_pool_t *thr_pool,
  acl_pthread_job_t *job);





 void acl_pthread_pool_bat_add_end(acl_pthread_pool_t *thr_pool);
# 168 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/../thread/acl_pthread_pool.h"
 void acl_pthread_pool_set_poller(acl_pthread_pool_t *thr_pool,
  int (*poller_fn)(void *), void *poller_arg);





 int acl_pthread_pool_start_poller(acl_pthread_pool_t *thr_pool);





 int acl_pthread_pool_add_dispatch(void *dispatch_arg,
  void (*run_fn)(void *), void *run_arg);
# 191 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/../thread/acl_pthread_pool.h"
 int acl_pthread_pool_dispatch(void *dispatch_arg,
  void (*run_fn)(void *), void *run_arg);






 int acl_pthread_pool_limit(acl_pthread_pool_t *thr_pool);






 int acl_pthread_pool_size(acl_pthread_pool_t *thr_pool);






 int acl_pthread_pool_idle(acl_pthread_pool_t *thr_pool);






 int acl_pthread_pool_busy(acl_pthread_pool_t *thr_pool);






 void acl_pthread_pool_set_schedule_warn(
  acl_pthread_pool_t *thr_pool, long long int n);






 void acl_pthread_pool_set_schedule_wait(
  acl_pthread_pool_t *thr_pool, long long int n);






 void acl_pthread_pool_set_qlen_warn(
  acl_pthread_pool_t *thr_pool, int max);





 int acl_pthread_pool_qlen(acl_pthread_pool_t *thr_pool);






 void acl_pthread_pool_set_stacksize(
  acl_pthread_pool_t *thr_pool, size_t size);





 void acl_pthread_pool_attr_init(acl_pthread_pool_attr_t *attr);






 void acl_pthread_pool_attr_set_stacksize(
  acl_pthread_pool_attr_t *attr, size_t size);






 void acl_pthread_pool_attr_set_threads_limit(
  acl_pthread_pool_attr_t *attr, int threads_limit);






 void acl_pthread_pool_attr_set_idle_timeout(
  acl_pthread_pool_attr_t *attr, int idle_timeout);


}
# 11 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/../thread/acl_thread.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/../thread/acl_sem.h" 1




extern "C" {
# 30 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/../thread/acl_sem.h"
}
# 12 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/../thread/acl_thread.h" 2


}
# 10 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_htable.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_hash.h" 1




extern "C" {



# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 10 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_hash.h" 2






typedef unsigned (*ACL_HASH_FN)(const void *buf, size_t len);

 unsigned short acl_hash_crc16(const void *buf, size_t len);
 unsigned acl_hash_crc32(const void *buf, size_t len);
 unsigned long long int acl_hash_crc64(const void *buf, size_t len);
 unsigned acl_hash_test(const void *buf, size_t len);
 unsigned acl_hash_bin(const void *buf, size_t len);
 unsigned acl_hash_func2(const void *buf, size_t len);
 unsigned acl_hash_func3(const void *buf, size_t len);
 unsigned acl_hash_func4(const void *buf, size_t len);
 unsigned acl_hash_func5(const void *buf, size_t len);
 unsigned acl_hash_func6(const void *buf, size_t len);


}
# 11 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_htable.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_slice.h" 1




extern "C" {
# 20 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_slice.h"
typedef struct ACL_SLICE_STAT {
 int nslots;
 int islots;
 int page_nslots;
 int page_size;
 int slice_length;
 int slice_size;
 int nbuf;
 unsigned long long int length;
 unsigned long long int used_length;
 unsigned int flag;
} ACL_SLICE_STAT;

typedef struct ACL_SLICE ACL_SLICE;
# 43 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_slice.h"
 ACL_SLICE *acl_slice_create(const char *name, int page_size,
 int slice_size, unsigned int flag);





 void acl_slice_destroy(ACL_SLICE *slice);






 int acl_slice_used(ACL_SLICE *slice);






 void *acl_slice_alloc(ACL_SLICE *slice);






 void *acl_slice_calloc(ACL_SLICE *slice);






 void acl_slice_free2(ACL_SLICE *slice, void *ptr);





 void acl_slice_free(void *ptr);






 void acl_slice_stat(ACL_SLICE *slice, ACL_SLICE_STAT *sbuf);





 int acl_slice_gc(ACL_SLICE *slice);



typedef struct ACL_SLICE_POOL {
 ACL_SLICE **slices;
 int base;
 int nslice;
 unsigned int slice_flag;
} ACL_SLICE_POOL;

 void acl_slice_pool_init(ACL_SLICE_POOL *asp);
 ACL_SLICE_POOL *acl_slice_pool_create(int base, int nslice,
 unsigned int slice_flag);
 void acl_slice_pool_destroy(ACL_SLICE_POOL *asp);
 int acl_slice_pool_used(ACL_SLICE_POOL *asp);
 void acl_slice_pool_clean(ACL_SLICE_POOL *asp);
 void acl_slice_pool_reset(ACL_SLICE_POOL *asp);
 void acl_slice_pool_free(const char *filename, int line, void *buf);
 void acl_slice_pool_gc(ACL_SLICE_POOL *asp);
 void *acl_slice_pool_alloc(const char *filename, int line,
 ACL_SLICE_POOL *asp, size_t size);
 void *acl_slice_pool_calloc(const char *filename, int line,
 ACL_SLICE_POOL *asp, size_t nmemb, size_t size);
 void *acl_slice_pool_realloc(const char *filename, int line,
 ACL_SLICE_POOL *asp, void *ptr, size_t size);
 void *acl_slice_pool_memdup(const char *filename, int line,
 ACL_SLICE_POOL *asp, const void *ptr, size_t len);
 char *acl_slice_pool_strdup(const char *filename, int line,
 ACL_SLICE_POOL *asp, const char *str);
 char *acl_slice_pool_strndup(const char *filename, int line,
 ACL_SLICE_POOL *asp, const char *str, size_t len);

 void acl_slice_mem_hook(void *(*malloc_hook)(const char*, int, size_t),
  void *(*calloc_hook)(const char*, int, size_t, size_t),
  void *(*realloc_hook)(const char*, int, void*, size_t),
  void (*free_hook)(const char*, int, void*));
 void acl_slice_mem_unhook(void);


}
# 12 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_htable.h" 2



typedef struct ACL_HTABLE ACL_HTABLE;
typedef struct ACL_HTABLE_INFO ACL_HTABLE_INFO;




struct ACL_HTABLE {
 int size;
 int init_size;
 int used;
 ACL_HTABLE_INFO **data;
 unsigned int flag;
 int status;

 ACL_HASH_FN hash_fn;
 ACL_SLICE_POOL *slice;
 acl_pthread_mutex_t *rwlock;




 void *(*iter_head)(ACL_ITER*, struct ACL_HTABLE*);

 void *(*iter_next)(ACL_ITER*, struct ACL_HTABLE*);

 void *(*iter_tail)(ACL_ITER*, struct ACL_HTABLE*);

 void *(*iter_prev)(ACL_ITER*, struct ACL_HTABLE*);

 ACL_HTABLE_INFO *(*iter_info)(ACL_ITER*, struct ACL_HTABLE*);
};




struct ACL_HTABLE_INFO {




 union {
  char *key;
  const char *c_key;
 } key;
 void *value;
 unsigned hash;
 struct ACL_HTABLE_INFO *next;
 struct ACL_HTABLE_INFO *prev;
};




typedef struct ACL_HTABLE_ITER {

 ACL_HTABLE_INFO *ptr;


 int i;
 int size;
 ACL_HTABLE_INFO **h;
} ACL_HTABLE_ITER;







 ACL_HTABLE *acl_htable_create(int size, unsigned int flag);
# 97 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_htable.h"
 ACL_HTABLE *acl_htable_create3(int size, unsigned int flag,
  ACL_SLICE_POOL *slice);
# 108 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_htable.h"
 void acl_htable_ctl(ACL_HTABLE *table, int name, ...);
# 118 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_htable.h"
 int acl_htable_errno(ACL_HTABLE *table);
# 128 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_htable.h"
 void acl_htable_set_errno(ACL_HTABLE *table, int error);
# 140 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_htable.h"
 ACL_HTABLE_INFO *acl_htable_enter(ACL_HTABLE *table,
  const char *key, void *value);
# 155 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_htable.h"
 int acl_htable_enter_r(ACL_HTABLE *table, const char *key, void *value,
  void (*callback)(ACL_HTABLE_INFO *ht, void *arg), void *arg);
# 165 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_htable.h"
 ACL_HTABLE_INFO *acl_htable_locate(ACL_HTABLE *table, const char *key);
# 177 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_htable.h"
 int acl_htable_locate_r(ACL_HTABLE *table, const char *key,
  void (*callback)(ACL_HTABLE_INFO *ht, void *arg), void *arg);
# 187 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_htable.h"
 void *acl_htable_find(ACL_HTABLE *table, const char *key);
# 199 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_htable.h"
 int acl_htable_find_r(ACL_HTABLE *table, const char *key,
  void (*callback)(void *value, void *arg), void *arg);
# 210 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_htable.h"
 int acl_htable_delete(ACL_HTABLE *table, const char *key,
  void (*free_fn) (void *));
# 221 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_htable.h"
 void acl_htable_delete_entry(ACL_HTABLE *table, ACL_HTABLE_INFO *ht,
  void (*free_fn) (void *));







 void acl_htable_free(ACL_HTABLE *table, void (*free_fn) (void *));
# 239 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_htable.h"
 int acl_htable_reset(ACL_HTABLE *table, void (*free_fn) (void *));
# 248 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_htable.h"
 void acl_htable_walk(ACL_HTABLE *table,
  void (*walk_fn) (ACL_HTABLE_INFO *, void *), void *arg);







 int acl_htable_size(const ACL_HTABLE *table);






 int acl_htable_used(const ACL_HTABLE *table);






 ACL_HTABLE_INFO **acl_htable_list(const ACL_HTABLE *table);





 void acl_htable_stat(const ACL_HTABLE *table);


 ACL_HTABLE_INFO **acl_htable_data(ACL_HTABLE *table);
 const ACL_HTABLE_INFO *acl_htable_iter_head(
  ACL_HTABLE *table, ACL_HTABLE_ITER *iter);
 const ACL_HTABLE_INFO *acl_htable_iter_next(ACL_HTABLE_ITER *iter);
 const ACL_HTABLE_INFO *acl_htable_iter_tail(
  ACL_HTABLE *table, ACL_HTABLE_ITER *iter);
 const ACL_HTABLE_INFO *acl_htable_iter_prev(ACL_HTABLE_ITER *iter);
# 352 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_htable.h"
}
# 23 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring.h" 1




extern "C" {



# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h" 1 3 4
# 10 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vbuf.h" 1




extern "C" {







typedef struct ACL_VBUF ACL_VBUF;
typedef int (*ACL_VBUF_GET_READY_FN) (ACL_VBUF *);
typedef int (*ACL_VBUF_PUT_READY_FN) (ACL_VBUF *);
typedef int (*ACL_VBUF_SPACE_FN) (ACL_VBUF *, ssize_t);

struct ACL_VBUF {
 unsigned char *data;
 unsigned char *ptr;
 ssize_t len;
 unsigned flags;

 int fd;




 union {
  ACL_SLICE_POOL *slice;
  ACL_DBUF_POOL *dbuf;
 } alloc;






};
# 73 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vbuf.h"
 int acl_vbuf_space(struct ACL_VBUF *bp, ssize_t len);
# 83 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vbuf.h"
 int acl_vbuf_put(ACL_VBUF *, int);
 int acl_vbuf_write(ACL_VBUF *, const char *, int);


}
# 11 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring.h" 2




typedef struct ACL_VSTRING {
 ACL_VBUF vbuf;
 ssize_t maxlen;
} ACL_VSTRING;
# 27 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring.h"
 void acl_vstring_init(ACL_VSTRING *vp, size_t len);





 void acl_vstring_free_buf(ACL_VSTRING *vp);






 ACL_VSTRING *acl_vstring_alloc(size_t len);
# 49 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring.h"
 ACL_VSTRING *acl_vstring_slice_alloc(ACL_SLICE_POOL *slice, size_t len);







 ACL_VSTRING *acl_vstring_dbuf_alloc(ACL_DBUF_POOL *dbuf, size_t len);
# 66 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring.h"
 ACL_VSTRING *acl_vstring_mmap_alloc(int fd,
 size_t max_len, size_t init_len);
# 77 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring.h"
 ACL_VSTRING *acl_vstring_mmap_alloc2(int fd,
 size_t max_len, size_t init_len, size_t offset);







 void acl_vstring_ctl(ACL_VSTRING *vp,...);
# 97 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring.h"
 ACL_VSTRING *acl_vstring_truncate(ACL_VSTRING *vp, size_t len);





 void acl_vstring_free(ACL_VSTRING *vp);







 ACL_VSTRING *acl_vstring_strcpy(ACL_VSTRING *vp, const char *src);
# 120 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring.h"
 ACL_VSTRING *acl_vstring_strncpy(ACL_VSTRING *vp,
  const char *src, size_t len);







 ACL_VSTRING *acl_vstring_strcat(ACL_VSTRING *vp, const char *src);
# 138 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring.h"
 ACL_VSTRING *acl_vstring_strncat(ACL_VSTRING *vp,
  const char *src, size_t len);
# 148 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring.h"
 ACL_VSTRING *acl_vstring_memcpy(ACL_VSTRING *vp,
  const char *src, size_t len);
# 159 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring.h"
 ACL_VSTRING *acl_vstring_memmove(ACL_VSTRING *vp,
  const char *src, size_t len);
# 169 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring.h"
 ACL_VSTRING *acl_vstring_memcat(ACL_VSTRING *vp,
  const char *src, size_t len);
# 179 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring.h"
 char *acl_vstring_memchr(ACL_VSTRING *vp, int ch);
# 188 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring.h"
 char *acl_vstring_strstr(ACL_VSTRING *vp, const char *needle);
# 197 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring.h"
 char *acl_vstring_strcasestr(ACL_VSTRING *vp, const char *needle);
# 206 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring.h"
 char *acl_vstring_rstrstr(ACL_VSTRING *vp, const char *needle);
# 215 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring.h"
 char *acl_vstring_rstrcasestr(ACL_VSTRING *vp, const char *needle);
# 225 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring.h"
 ACL_VSTRING *acl_vstring_insert(ACL_VSTRING *vp, size_t start,
  const char *buf, size_t len);
# 235 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring.h"
 ACL_VSTRING *acl_vstring_prepend(ACL_VSTRING *vp,
  const char *buf, size_t len);
# 245 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring.h"
 ACL_VSTRING *__attribute__((__format__ (__printf__, (2), (3)))) acl_vstring_sprintf(ACL_VSTRING *vp,
  const char *format,...);
# 255 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring.h"
 ACL_VSTRING *__attribute__((__format__ (__printf__, (2), (3)))) acl_vstring_sprintf_append(
  ACL_VSTRING *vp, const char *format,...);
# 265 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring.h"
 char *acl_vstring_export(ACL_VSTRING *vp);






 ACL_VSTRING *acl_vstring_import(char *str);
# 284 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring.h"
 void acl_vstring_glue(ACL_VSTRING *vp, void *buf, size_t len);







 char acl_vstring_charat(ACL_VSTRING *vp, size_t len);
# 302 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring.h"
 ACL_VSTRING *acl_vstring_vsprintf(ACL_VSTRING *vp,
  const char *format, va_list ap);
# 312 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring.h"
 ACL_VSTRING *acl_vstring_vsprintf_append(ACL_VSTRING *vp,
  const char *format, va_list ap);
# 322 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring.h"
 ACL_VSTRING *__attribute__((__format__ (__printf__, (2), (3)))) acl_vstring_sprintf_prepend(
  ACL_VSTRING *vp, const char *format, ...);
# 336 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring.h"
 const ACL_VSTRING *acl_buffer_gets_nonl(ACL_VSTRING *vp,
  const char **src, size_t dlen);
# 350 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring.h"
 const ACL_VSTRING *acl_buffer_gets(ACL_VSTRING *vp,
  const char **src, size_t dlen);
# 433 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring.h"
 int acl_vstring_space(ACL_VBUF *bp, ssize_t len);
 int acl_vstring_put_ready(ACL_VBUF *bp);


}
# 24 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h" 2
# 42 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
typedef struct ACL_VSTREAM ACL_VSTREAM;

typedef int (*ACL_VSTREAM_RD_FN)(int fd, void *buf, size_t size,
 int timeout, ACL_VSTREAM *fp, void *context);
typedef int (*ACL_VSTREAM_WR_FN)(int fd, const void *buf,
 size_t size, int timeout, ACL_VSTREAM *fp, void *context);
typedef int (*ACL_VSTREAM_WV_FN)(int fd, const struct iovec *vec,
 int count, int timeout, ACL_VSTREAM *fp, void *context);
typedef int (*ACL_FSTREAM_RD_FN)(int fh, void *buf, size_t size,
 int timeout, ACL_VSTREAM *fp, void *context);
typedef int (*ACL_FSTREAM_WR_FN)(int fh, const void *buf,
 size_t size, int timeout, ACL_VSTREAM *fp, void *context);
typedef int (*ACL_FSTREAM_WV_FN)(int fh, const struct iovec *vec,
 int count, int timeout, ACL_VSTREAM *fp, void *context);




typedef struct ACL_VSTREAM_CLOSE_HANDLE {
 void (*close_fn)(ACL_VSTREAM*, void*);
 void *context;
} ACL_VSTREAM_CLOSE_HANDLE;


struct ACL_VSTREAM {
 union {
  int sock;
  int h_file;
 } fd;

 int is_nonblock;
 int type;
# 84 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 acl_off_t offset;
 acl_off_t sys_offset;

 unsigned char *wbuf;
 int wbuf_size;
 int wbuf_dlen;

 unsigned char *read_buf;
 int read_buf_len;
 int read_cnt;
 unsigned char *read_ptr;
 int read_ready;

 acl_off_t total_read_cnt;
 acl_off_t total_write_cnt;

 void *ioctl_read_ctx;
 void *ioctl_write_ctx;
 void *fdp;

 unsigned int flag;
# 152 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 int errnum;
 int rw_timeout;
 char *addr_local;
 char *addr_peer;
 struct sockaddr *sa_local;
 struct sockaddr *sa_peer;
 size_t sa_local_size;
 size_t sa_peer_size;
 size_t sa_local_len;
 size_t sa_peer_len;
 char *path;
 void *context;

 ACL_ARRAY *close_handle_lnk;




 int (*sys_getc)(ACL_VSTREAM*);
 ACL_VSTREAM_RD_FN read_fn;
 ACL_VSTREAM_WR_FN write_fn;
 ACL_VSTREAM_WV_FN writev_fn;

 ACL_FSTREAM_RD_FN fread_fn;
 ACL_FSTREAM_WR_FN fwrite_fn;
 ACL_FSTREAM_WV_FN fwritev_fn;

 int (*close_fn)(int);
 int (*fclose_fn)(int);

 unsigned int oflags;
# 191 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 unsigned int omode;

 int nrefer;






 pid_t pid;

 ACL_HTABLE *objs_table;
};

extern ACL_VSTREAM acl_vstream_fstd[];
# 215 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 void acl_vstream_init(void);







 int acl_vstream_peekfd(ACL_VSTREAM *fp);
# 232 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 ACL_VSTREAM *acl_vstream_clone(const ACL_VSTREAM *stream_src);







 int acl_vstream_set_fdtype(ACL_VSTREAM *fp, int type);
# 252 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 ACL_VSTREAM *acl_vstream_fhopen(int fh, unsigned int oflags);
# 268 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 ACL_VSTREAM *acl_vstream_fdopen(int fd, unsigned int oflags,
  size_t buflen, int rw_timeout, int fdtype);
# 282 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 ACL_VSTREAM *acl_vstream_fopen(const char *path, unsigned int oflags,
  int mode, size_t buflen);







 char *acl_vstream_loadfile(const char *path);
# 301 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 char *acl_vstream_loadfile2(const char *path, ssize_t *size);







 void acl_vstream_ctl(ACL_VSTREAM *fp, int name,...);
# 329 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 acl_off_t acl_vstream_fseek(ACL_VSTREAM *fp, acl_off_t offset, int whence);
# 340 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 acl_off_t acl_vstream_fseek2(ACL_VSTREAM *fp, acl_off_t offset, int whence);






 acl_off_t acl_vstream_ftell(ACL_VSTREAM *fp);







 int acl_file_ftruncate(ACL_VSTREAM *fp, acl_off_t length);







 int acl_file_truncate(const char *path, acl_off_t length);







 int acl_vstream_fstat(ACL_VSTREAM *fp, struct stat64 *buf);






 long long int acl_vstream_fsize(ACL_VSTREAM *fp);







 int acl_vstream_getc(ACL_VSTREAM *fp);
# 397 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 int acl_vstream_nonb_readn(ACL_VSTREAM *fp, char *buf, int size);
# 407 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 int acl_vstream_probe_status(ACL_VSTREAM *fp);
# 416 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 int acl_vstream_ungetc(ACL_VSTREAM *fp, int ch);
# 426 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 int acl_vstream_unread(ACL_VSTREAM *fp, const void *ptr, size_t length);
# 440 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 int acl_vstream_gets(ACL_VSTREAM *fp, void *vptr, size_t maxlen);
# 453 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 int acl_vstream_gets_nonl(ACL_VSTREAM *fp, void *vptr, size_t maxlen);
# 466 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 int acl_vstream_readtags(ACL_VSTREAM *fp, void *vptr, size_t maxlen,
  const char *tag, size_t taglen);
# 478 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 int acl_vstream_readn(ACL_VSTREAM *fp, void *vptr, size_t maxlen);
# 488 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 int acl_vstream_bfcp_some(ACL_VSTREAM *fp, void *vptr, size_t maxlen);
# 503 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 int acl_vstream_read(ACL_VSTREAM *fp, void *vptr, size_t maxlen);
# 520 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 int acl_vstream_gets_peek(ACL_VSTREAM *fp, ACL_VSTRING *buf, int *ready);
# 538 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 int acl_vstream_gets_nonl_peek(ACL_VSTREAM *fp, ACL_VSTRING *buf, int *ready);
# 553 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 int acl_vstream_readn_peek(ACL_VSTREAM *fp, ACL_VSTRING *buf, int cnt, int *ready);
# 564 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 int acl_vstream_read_peek(ACL_VSTREAM *fp, ACL_VSTRING *buf);
# 576 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 int acl_vstream_read_peek3(ACL_VSTREAM *fp, void *buf, size_t size);






 int acl_vstream_can_read(ACL_VSTREAM *fp);
# 592 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 int acl_vstream_readable(ACL_VSTREAM *fp);






 int acl_vstream_fsync(ACL_VSTREAM *fp);





 void acl_vstream_buffed_space(ACL_VSTREAM *fp);






 int acl_vstream_fflush(ACL_VSTREAM *fp);
# 621 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 int acl_vstream_buffed_writen(ACL_VSTREAM *fp, const void *vptr, size_t dlen);
# 632 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 int acl_vstream_buffed_vfprintf(ACL_VSTREAM *fp, const char *fmt, va_list ap);
# 642 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 int __attribute__((__format__ (__printf__, (2), (3)))) acl_vstream_buffed_fprintf(ACL_VSTREAM *fp,
 const char *fmt, ...);






 int acl_vstream_buffed_printf(const char*, ...);







 int acl_vstream_buffed_fputs(const char *s, ACL_VSTREAM *fp);






 int acl_vstream_buffed_puts(const char *s);
# 675 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 int acl_vstream_write(ACL_VSTREAM *fp, const void *vptr, int dlen);
# 684 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 int acl_vstream_writev(ACL_VSTREAM *fp, const struct iovec *vector, int count);
# 693 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 int acl_vstream_writevn(ACL_VSTREAM *fp, const struct iovec *vector, int count);
# 703 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 int acl_vstream_vfprintf(ACL_VSTREAM *fp, const char *fmt, va_list ap);
# 713 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 int __attribute__((__format__ (__printf__, (2), (3)))) acl_vstream_fprintf(ACL_VSTREAM *fp,
 const char *fmt, ...);






 int acl_vstream_printf(const char*, ...);







 int acl_vstream_fputs(const char *s, ACL_VSTREAM *fp);






 int acl_vstream_puts(const char *s);
# 746 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 int acl_vstream_writen(ACL_VSTREAM *fp, const void *vptr, size_t dlen);






 void acl_vstream_free(ACL_VSTREAM *fp);





 int acl_vstream_close(ACL_VSTREAM *fp);






 void acl_vstream_call_close_handles(ACL_VSTREAM *fp);







 void acl_vstream_add_close_handle(ACL_VSTREAM *fp,
  void (*close_fn)(ACL_VSTREAM*, void*), void *context);







 void acl_vstream_delete_close_handle(ACL_VSTREAM *fp,
  void (*close_fn)(ACL_VSTREAM*, void*), void *context);




 void acl_vstream_clean_close_handle(ACL_VSTREAM *fp);





 void acl_vstream_reset(ACL_VSTREAM *fp);






 const char *acl_vstream_strerror(ACL_VSTREAM *fp);
# 856 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 void acl_vstream_set_path(ACL_VSTREAM *fp, const char *path);
# 868 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 void acl_vstream_set_peer(ACL_VSTREAM *fp, const char *addr);







 int acl_vstream_set_peer_addr(ACL_VSTREAM *fp, const struct sockaddr *sa);
# 888 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
 void acl_vstream_set_local(ACL_VSTREAM *fp, const char *addr);







 int acl_vstream_set_local_addr(ACL_VSTREAM *fp, const struct sockaddr *sa);

 int acl_vstream_add_object(ACL_VSTREAM *fp, const char *key, void *obj);
 int acl_vstream_del_object(ACL_VSTREAM *fp, const char *key);
 void *acl_vstream_get_object(ACL_VSTREAM *fp, const char *key);

 void acl_socket_read_hook(ACL_VSTREAM_RD_FN read_fn);
 void acl_socket_write_hook(ACL_VSTREAM_WR_FN write_fn);
 void acl_socket_writev_hook(ACL_VSTREAM_WV_FN writev_fn);
 void acl_socket_close_hook(int (*close_fn)(int));
# 965 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream.h"
}
# 10 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_sys_patch.h" 2
# 56 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_sys_patch.h"
 int acl_socket_init(void);





 int acl_socket_end(void);






 int acl_socket_close(int fd);
# 88 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_sys_patch.h"
 int acl_socket_shutdown(int fd, int how);
# 101 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_sys_patch.h"
 int acl_socket_read(int fd, void *buf, size_t size,
 int timeout, ACL_VSTREAM *fp, void *arg);
# 115 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_sys_patch.h"
 int acl_socket_write(int fd, const void *buf,
 size_t size, int timeout, ACL_VSTREAM *fp, void *arg);
# 129 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_sys_patch.h"
 int acl_socket_writev(int fd, const struct iovec *vec,
 int count, int timeout, ACL_VSTREAM *fp, void *arg);






 int acl_socket_alive(int fd);
# 147 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_sys_patch.h"
 int acl_file_open(const char *filepath, int flags, int mode);






 int acl_file_close(int fh);
# 163 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_sys_patch.h"
 acl_off_t acl_lseek(int fh, acl_off_t offset, int whence);
# 175 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_sys_patch.h"
 int acl_file_read(int fh, void *buf, size_t size,
 int timeout, ACL_VSTREAM *fp, void *arg);
# 188 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_sys_patch.h"
 int acl_file_write(int fh, const void *buf, size_t size,
 int timeout, ACL_VSTREAM *fp, void *arg);
# 201 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_sys_patch.h"
 int acl_file_writev(int fh, const struct iovec *vec,
 int count, int timeout, ACL_VSTREAM *fp, void *arg);
# 211 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_sys_patch.h"
 int acl_file_fflush(int fh, ACL_VSTREAM *fp, void *arg);






 long long int acl_file_size(const char *filename);
# 227 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_sys_patch.h"
 long long int acl_file_fsize(int fh, ACL_VSTREAM *fp, void *arg);
# 237 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_sys_patch.h"
 int acl_sane_socketpair(int domain, int type, int protocol,
  int result[2]);
# 247 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_sys_patch.h"
typedef int (*acl_close_socket_fn)(int);
typedef ssize_t (*acl_read_fn)(int, void *, size_t);
typedef ssize_t (*acl_recv_fn)(int, void *, size_t, int);
typedef ssize_t (*acl_write_fn)(int, const void *, size_t);
typedef ssize_t (*acl_writev_fn)(int, const struct iovec *, int);
typedef ssize_t (*acl_send_fn)(int, const void *, size_t, int);



 void acl_set_read(acl_read_fn fn);
 void acl_set_write(acl_write_fn fn);
 void acl_set_writev(acl_writev_fn fn);


 void acl_set_close_socket(acl_close_socket_fn fn);
 void acl_set_recv(acl_recv_fn fn);
 void acl_set_send(acl_send_fn fn);


}
# 10 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2

# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_argv.h" 1




extern "C" {
# 15 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_argv.h"
typedef struct ACL_ARGV {
 int len;
 int argc;
 char **argv;




 void (*push_back)(struct ACL_ARGV*, const char*);

 void (*push_front)(struct ACL_ARGV*, const char*);

 char *(*pop_back)(struct ACL_ARGV*);

 char *(*pop_front)(struct ACL_ARGV*);




 void *(*iter_head)(ACL_ITER*, struct ACL_ARGV*);

 void *(*iter_next)(ACL_ITER*, struct ACL_ARGV*);

 void *(*iter_tail)(ACL_ITER*, struct ACL_ARGV*);

 void *(*iter_prev)(ACL_ITER*, struct ACL_ARGV*);


 ACL_DBUF_POOL *dbuf;
} ACL_ARGV;







 ACL_ARGV *acl_argv_alloc(int size);

 ACL_ARGV *acl_argv_alloc2(int size, ACL_DBUF_POOL *dbuf);






 void acl_argv_add(ACL_ARGV *argvp,...);
# 70 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_argv.h"
 int acl_argv_set(ACL_ARGV *argvp, int idx, const char *value);






 void acl_argv_addv(ACL_ARGV *argvp, va_list ap);







 void acl_argv_addn(ACL_ARGV *argvp,...);






 void acl_argv_addnv(ACL_ARGV *argvp, va_list ap);





 void acl_argv_terminate(ACL_ARGV *argvp);





 ACL_ARGV *acl_argv_free(ACL_ARGV *argvp);







 char *acl_argv_index(ACL_ARGV *argvp, int idx);






 int acl_argv_size(ACL_ARGV *argvp);
# 128 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_argv.h"
 ACL_ARGV *acl_argv_split(const char *str, const char *delim);
# 139 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_argv.h"
 ACL_ARGV *acl_argv_split3(const char *str, const char *delim,
 ACL_DBUF_POOL *dbuf);
# 149 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_argv.h"
 ACL_ARGV *acl_argv_splitn(const char *str, const char *delim, size_t n);
# 161 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_argv.h"
 ACL_ARGV *acl_argv_splitn4(const char *str, const char *delim,
 size_t n, ACL_DBUF_POOL *dbuf);
# 171 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_argv.h"
 ACL_ARGV *acl_argv_split_append(ACL_ARGV *argvp, const char *str,
 const char *delim);
# 182 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_argv.h"
 ACL_ARGV *acl_argv_splitn_append(ACL_ARGV *argvp, const char *str,
 const char *delim, size_t n);
# 192 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_argv.h"
 ACL_ARGV *acl_argv_quote_split(const char *str, const char *delim);
# 203 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_argv.h"
 ACL_ARGV *acl_argv_quote_split4(const char *str, const char *delim,
 ACL_DBUF_POOL *dbuf);




}
# 12 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2

# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stack.h" 1




extern "C" {







typedef struct ACL_STACK ACL_STACK;




struct ACL_STACK {
 int capacity;
 int count;
 void **items;




 void (*push_back)(struct ACL_STACK*, void*);

 void (*push_front)(struct ACL_STACK*, void*);

 void *(*pop_back)(struct ACL_STACK*);

 void *(*pop_front)(struct ACL_STACK*);




 void *(*iter_head)(ACL_ITER*, struct ACL_STACK*);

 void *(*iter_next)(ACL_ITER*, struct ACL_STACK*);

 void *(*iter_tail)(ACL_ITER*, struct ACL_STACK*);

 void *(*iter_prev)(ACL_ITER*, struct ACL_STACK*);
};






 void acl_stack_space(ACL_STACK *s, int count);






 ACL_STACK *acl_stack_create(int init_size);






 void acl_stack_clean(ACL_STACK *s, void (*free_fn)(void *));






 void acl_stack_destroy(ACL_STACK *s, void (*free_fn)(void *));






 void acl_stack_append(ACL_STACK *s, void *obj);
# 88 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stack.h"
 void acl_stack_prepend(ACL_STACK *s, void *obj);







 void acl_stack_delete(ACL_STACK *s, int position, void (*free_fn)(void *));






 void acl_stack_delete_obj(ACL_STACK *s, void *obj, void (*free_fn)(void *));







 void *acl_stack_index(ACL_STACK *s, int position);






 int acl_stack_size(const ACL_STACK *s);






 void *acl_stack_pop(ACL_STACK *s);







 void *acl_stack_top(ACL_STACK *s);


}
# 14 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2

# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_binhash.h" 1




extern "C" {







typedef struct ACL_BINHASH ACL_BINHASH;
typedef struct ACL_BINHASH_INFO ACL_BINHASH_INFO;




struct ACL_BINHASH {
 int size;
 int used;
 unsigned int flag;
 int status;
 ACL_BINHASH_INFO **data;
 ACL_SLICE *slice;
 ACL_HASH_FN hash_fn;




 void *(*iter_head)(ACL_ITER*, struct ACL_BINHASH*);

 void *(*iter_next)(ACL_ITER*, struct ACL_BINHASH*);

 void *(*iter_tail)(ACL_ITER*, struct ACL_BINHASH*);

 void *(*iter_prev)(ACL_ITER*, struct ACL_BINHASH*);

 ACL_BINHASH_INFO *(*iter_info)(ACL_ITER*, struct ACL_BINHASH*);
};




struct ACL_BINHASH_INFO {
 union {
  void *key;
  const void *c_key;
 } key;



 int key_len;
 void *value;
 struct ACL_BINHASH_INFO *next;
 struct ACL_BINHASH_INFO *prev;
};




typedef struct ACL_BINHASH_ITER {

 ACL_BINHASH_INFO *ptr;


 int i;
 int size;
 ACL_BINHASH_INFO **h;
} ACL_BINHASH_ITER;







 ACL_BINHASH *acl_binhash_create(int size, unsigned int flag);
# 93 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_binhash.h"
 ACL_BINHASH_INFO *acl_binhash_enter(ACL_BINHASH *table, const void *key, int key_len, void *value);
# 102 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_binhash.h"
 ACL_BINHASH_INFO *acl_binhash_locate(ACL_BINHASH *table, const void *key, int key_len);
# 111 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_binhash.h"
 void *acl_binhash_find(ACL_BINHASH *table, const void *key, int key_len);
# 121 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_binhash.h"
 int acl_binhash_delete(ACL_BINHASH *table, const void *key, int key_len, void (*free_fn) (void *));






 void acl_binhash_free(ACL_BINHASH *table, void (*free_fn) (void *));







 void acl_binhash_walk(ACL_BINHASH *table, void (*walk_fn) (ACL_BINHASH_INFO *, void *), void *arg);







 ACL_BINHASH_INFO **acl_binhash_list(ACL_BINHASH *table);






 int acl_binhash_errno(ACL_BINHASH *table);
# 162 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_binhash.h"
 int acl_binhash_size(const ACL_BINHASH *table);






 int acl_binhash_used(ACL_BINHASH *table);

 ACL_BINHASH_INFO **acl_binhash_data(ACL_BINHASH *table);
 const ACL_BINHASH_INFO *acl_binhash_iter_head(ACL_BINHASH *table, ACL_BINHASH_ITER *iter);
 const ACL_BINHASH_INFO *acl_binhash_iter_next(ACL_BINHASH_ITER *iter);
 const ACL_BINHASH_INFO *acl_binhash_iter_tail(ACL_BINHASH *table, ACL_BINHASH_ITER *iter);
 const ACL_BINHASH_INFO *acl_binhash_iter_prev(ACL_BINHASH_ITER *iter);
# 240 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_binhash.h"
}
# 16 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2

# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_ring.h" 1




extern "C" {



# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 10 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_ring.h" 2

typedef struct ACL_RING ACL_RING;




struct ACL_RING {
 ACL_RING *succ;
 ACL_RING *pred;

 ACL_RING *parent;
 int len;
};

typedef struct ACL_RING_ITER {
 ACL_RING *ptr;
} ACL_RING_ITER;





 void acl_ring_init(ACL_RING *ring);






 int acl_ring_size(const ACL_RING *ring);






 void acl_ring_prepend(ACL_RING *ring, ACL_RING *entry);






 void acl_ring_append(ACL_RING *ring, ACL_RING *entry);





 void acl_ring_detach(ACL_RING *entry);






 ACL_RING *acl_ring_pop_head(ACL_RING *ring);






 ACL_RING *acl_ring_pop_tail(ACL_RING *ring);
# 250 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_ring.h"
}
# 18 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_fifo.h" 1




extern "C" {






typedef struct ACL_FIFO_INFO ACL_FIFO_INFO;
typedef struct ACL_FIFO_ITER ACL_FIFO_ITER;
typedef struct ACL_FIFO ACL_FIFO;

struct ACL_FIFO_INFO {
 void *data;
 ACL_FIFO_INFO *prev;
 ACL_FIFO_INFO *next;
};

struct ACL_FIFO_ITER {
 ACL_FIFO_INFO *ptr;
};

struct ACL_FIFO {
 ACL_FIFO_INFO *head;
 ACL_FIFO_INFO *tail;
 int cnt;




 void (*push_back)(struct ACL_FIFO*, void*);

 void (*push_front)(struct ACL_FIFO*, void*);

 void *(*pop_back)(struct ACL_FIFO*);

 void *(*pop_front)(struct ACL_FIFO*);




 void *(*iter_head)(ACL_ITER*, struct ACL_FIFO*);

 void *(*iter_next)(ACL_ITER*, struct ACL_FIFO*);

 void *(*iter_tail)(ACL_ITER*, struct ACL_FIFO*);

 void *(*iter_prev)(ACL_ITER*, struct ACL_FIFO*);

 ACL_FIFO_INFO *(*iter_info)(ACL_ITER*, struct ACL_FIFO*);


 ACL_SLICE_POOL *slice;
};
# 69 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_fifo.h"
 void acl_fifo_init(ACL_FIFO *fifo);





 ACL_FIFO *acl_fifo_new(void);






 ACL_FIFO *acl_fifo_new1(ACL_SLICE_POOL *slice);






 int acl_fifo_delete(ACL_FIFO *fifo, const void *data);
 void acl_fifo_delete_info(ACL_FIFO *fifo, ACL_FIFO_INFO *info);







 void acl_fifo_free(ACL_FIFO *fifo, void (*free_fn)(void *));
 void acl_fifo_free2(ACL_FIFO *fifo, void (*free_fn)(ACL_FIFO_INFO *));







 ACL_FIFO_INFO *acl_fifo_push_back(ACL_FIFO *fifo, void *data);

 void acl_fifo_push_info_back(ACL_FIFO *fifo, ACL_FIFO_INFO *info);

 ACL_FIFO_INFO *acl_fifo_push_front(ACL_FIFO *fifo, void *data);






 void *acl_fifo_pop_front(ACL_FIFO *fifo);

 ACL_FIFO_INFO *acl_fifo_pop_info(ACL_FIFO *fifo);






 void *acl_fifo_pop_back(ACL_FIFO *fifo);






 void *acl_fifo_head(ACL_FIFO *fifo);
 ACL_FIFO_INFO *acl_fifo_head_info(ACL_FIFO *fifo);






 void *acl_fifo_tail(ACL_FIFO *fifo);
 ACL_FIFO_INFO *acl_fifo_tail_info(ACL_FIFO *fifo);






 int acl_fifo_size(ACL_FIFO *fifo);
# 244 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_fifo.h"
}
# 19 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_iplink.h" 1
# 12 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_iplink.h"
extern "C" {



# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_dlink.h" 1




extern "C" {
# 15 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_dlink.h"
typedef struct {
 long long int begin;
 long long int end;
 void *pnode;
} ACL_DITEM;




typedef struct ACL_DLINK {
 ACL_ARRAY *parray;
 void *call_back_data;




 void *(*iter_head)(ACL_ITER*, struct ACL_DLINK*);

 void *(*iter_next)(ACL_ITER*, struct ACL_DLINK*);

 void *(*iter_tail)(ACL_ITER*, struct ACL_DLINK*);

 void *(*iter_prev)(ACL_ITER*, struct ACL_DLINK*);
} ACL_DLINK;






 ACL_DLINK *acl_dlink_create(int nsize);





 void acl_dlink_free(ACL_DLINK *plink);







 ACL_DITEM *acl_dlink_lookup_by_item(const ACL_DLINK *plink,
 ACL_DITEM *pitem);
# 69 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_dlink.h"
 ACL_DITEM *acl_dlink_lookup2_by_item(const ACL_DLINK *plink,
 ACL_DITEM *pitem, int *pidx);







 ACL_DITEM *acl_dlink_lookup(const ACL_DLINK *plink, long long int n);
# 87 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_dlink.h"
 ACL_DITEM *acl_dlink_lookup2(const ACL_DLINK *plink,
 long long int n, int *pidx);
# 98 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_dlink.h"
 ACL_DITEM *acl_dlink_lookup_range(const ACL_DLINK *plink,
 long long int begin, long long int end, int *pidx);
# 108 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_dlink.h"
 ACL_DITEM *acl_dlink_lookup_larger(const ACL_DLINK *plink,
 long long int off, int *pidx);
# 118 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_dlink.h"
 ACL_DITEM *acl_dlink_lookup_lower(const ACL_DLINK *plink,
 long long int off, int *pidx);
# 128 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_dlink.h"
 ACL_DITEM *acl_dlink_insert(ACL_DLINK *plink,
 long long int begin, long long int end);







 int acl_dlink_delete(ACL_DLINK *plink, long long int n);







 int acl_dlink_delete_by_item(ACL_DLINK *plink, ACL_DITEM *pitem);





 ACL_DITEM *acl_dlink_modify(ACL_DLINK *plink,
 long long int begin, long long int end);
# 162 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_dlink.h"
 int acl_dlink_delete_range(ACL_DLINK *plink,
 long long int begin, long long int end);







 ACL_DITEM *acl_dlink_index(const ACL_DLINK *plink, int idx);






 int acl_dlink_size(const ACL_DLINK *plink);






 int acl_dlink_list(const ACL_DLINK *plink);


}
# 17 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_iplink.h" 2





 ACL_DLINK *acl_iplink_create(int nsize);
 void acl_iplink_free(ACL_DLINK *plink);
 ACL_DITEM *acl_iplink_lookup_item(const ACL_DLINK *plink,
 ACL_DITEM *pitem);
 ACL_DITEM *acl_iplink_lookup_bin(const ACL_DLINK *plink,
 unsigned int ip);
 ACL_DITEM *acl_iplink_lookup_str(const ACL_DLINK *plink,
 const char *ip);
 ACL_DITEM *acl_iplink_insert_bin(ACL_DLINK *plink,
 unsigned int ip_begin, unsigned int ip_end);
 ACL_DITEM *acl_iplink_insert(ACL_DLINK *plink,
 const char *pstrip_begin, const char *pstrip_end);
 int acl_iplink_delete_by_ip(ACL_DLINK *plink,
 const char *pstrip_begin);
 int acl_iplink_delete_by_item(ACL_DLINK *plink, ACL_DITEM *pitem);
 ACL_DITEM *acl_iplink_modify(ACL_DLINK *plink, const char *pstrip_id,
 const char *pstrip_begin, const char *pstrip_end);
 int acl_iplink_count_item(ACL_DLINK *plink);
 int acl_iplink_list(const ACL_DLINK *plink);


}
# 20 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2

# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_btree.h" 1




extern "C" {







typedef struct ACL_BTREE ACL_BTREE;





 ACL_BTREE *acl_btree_create(void);






 int acl_btree_destroy(ACL_BTREE *tree);







 void *acl_btree_find(ACL_BTREE *tree, unsigned int key);







 int acl_btree_add(ACL_BTREE *tree, unsigned int key, void *data);







 void *acl_btree_remove(ACL_BTREE *tree, unsigned int key);







 int acl_btree_get_min_key(ACL_BTREE *tree, unsigned int *key);







 int acl_btree_get_max_key(ACL_BTREE *tree, unsigned int *key);
# 75 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_btree.h"
 int acl_btree_get_next_key(ACL_BTREE *tree,
 unsigned int cur_key, unsigned int *next_key);






 int acl_btree_depth(ACL_BTREE *tree);
 void acl_btree_dump(ACL_BTREE *b);


}
# 22 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_cache.h" 1




extern "C" {
# 15 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_cache.h"
typedef struct ACL_CACHE_INFO {
 char *key;
 void *value;
 int nrefer;
 time_t when_timeout;
 ACL_RING entry;
} ACL_CACHE_INFO;




typedef struct ACL_CACHE {
 ACL_HTABLE *table;
 ACL_RING ring;
 int max_size;
 int size;
 int timeout;


 void (*free_fn)(const ACL_CACHE_INFO*, void *);
 acl_pthread_mutex_t lock;
 ACL_SLICE *slice;




 void *(*iter_head)(ACL_ITER*, struct ACL_CACHE*);

 void *(*iter_next)(ACL_ITER*, struct ACL_CACHE*);

 void *(*iter_tail)(ACL_ITER*, struct ACL_CACHE*);

 void *(*iter_prev)(ACL_ITER*, struct ACL_CACHE*);

 ACL_CACHE_INFO *(*iter_info)(ACL_ITER*, struct ACL_CACHE*);
} ACL_CACHE;
# 59 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_cache.h"
 ACL_CACHE *acl_cache_create(int max_size, int timeout,
 void (*free_fn)(const ACL_CACHE_INFO*, void*));





 void acl_cache_free(ACL_CACHE *cache);
# 78 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_cache.h"
 ACL_CACHE_INFO *acl_cache_enter(ACL_CACHE *cache, const char *key, void *value);







 void *acl_cache_find(ACL_CACHE *cache, const char *key);







 ACL_CACHE_INFO *acl_cache_locate(ACL_CACHE *cache, const char *key);







 int acl_cache_delete(ACL_CACHE *cache, ACL_CACHE_INFO *info);







 int acl_cache_delete2(ACL_CACHE *cache, const char *key);






 int acl_cache_timeout(ACL_CACHE *cache);







 void acl_cache_update2(ACL_CACHE *cache, ACL_CACHE_INFO *info, int timeout);







 void acl_cache_update(ACL_CACHE *cache, const char *key, int timeout);





 void acl_cache_refer(ACL_CACHE_INFO *info);






 void acl_cache_refer2(ACL_CACHE *cache, const char *key);





 void acl_cache_unrefer(ACL_CACHE_INFO *info);






 void acl_cache_unrefer2(ACL_CACHE *cache, const char *key);





 void acl_cache_lock(ACL_CACHE *cache);





 void acl_cache_unlock(ACL_CACHE *cache);







 void acl_cache_walk(ACL_CACHE *cache, void (*walk_fn)(ACL_CACHE_INFO *, void *), void *arg);







 int acl_cache_clean(ACL_CACHE *cache, int force);






 int acl_cache_size(ACL_CACHE *cache);


}
# 23 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_cache2.h" 1




extern "C" {




typedef struct ACL_CACHE2 ACL_CACHE2;




typedef struct ACL_CACHE2_INFO {
 char *key;
 void *value;
 int nrefer;
 time_t when_timeout;
 ACL_CACHE2* cache;
} ACL_CACHE2_INFO;




struct ACL_CACHE2 {
 int max_size;
 int size;
 void *ctx;


 void (*free_fn)(const ACL_CACHE2_INFO*, void *);




 void *(*iter_head)(ACL_ITER*, struct ACL_CACHE2*);

 void *(*iter_next)(ACL_ITER*, struct ACL_CACHE2*);

 void *(*iter_tail)(ACL_ITER*, struct ACL_CACHE2*);

 void *(*iter_prev)(ACL_ITER*, struct ACL_CACHE2*);

 ACL_CACHE2_INFO *(*iter_info)(ACL_ITER*, struct ACL_CACHE2*);
};







 ACL_CACHE2 *acl_cache2_create(int max_size,
 void (*free_fn)(const ACL_CACHE2_INFO*, void*));





 void acl_cache2_free(ACL_CACHE2 *cache2);
# 74 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_cache2.h"
 ACL_CACHE2_INFO *acl_cache2_enter(ACL_CACHE2 *cache2,
 const char *key, void *value, int timeout);







 void *acl_cache2_find(ACL_CACHE2 *cache2, const char *key);







 ACL_CACHE2_INFO *acl_cache2_locate(ACL_CACHE2 *cache2, const char *key);







 int acl_cache2_delete(ACL_CACHE2 *cache2, ACL_CACHE2_INFO *info);







 int acl_cache2_delete2(ACL_CACHE2 *cache2, const char *key);






 int acl_cache2_timeout(ACL_CACHE2 *cache2);
# 123 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_cache2.h"
 ACL_CACHE2_INFO *acl_cache2_update2(ACL_CACHE2 *cache2,
 ACL_CACHE2_INFO *info, int timeout);
# 133 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_cache2.h"
 ACL_CACHE2_INFO *acl_cache2_update(ACL_CACHE2 *cache2,
 const char *key, int timeout);
# 146 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_cache2.h"
 ACL_CACHE2_INFO *acl_cache2_upsert(ACL_CACHE2 *cache2,
 const char *key, void *value, int timeout, int *exist);






 ACL_CACHE2_INFO *acl_cache2_head(ACL_CACHE2 *cache2);






 ACL_CACHE2_INFO *acl_cache2_tail(ACL_CACHE2 *cache2);





 void acl_cache2_refer(ACL_CACHE2_INFO *info);






 void acl_cache2_refer2(ACL_CACHE2 *cache2, const char *key);





 void acl_cache2_unrefer(ACL_CACHE2_INFO *info);






 void acl_cache2_unrefer2(ACL_CACHE2 *cache2, const char *key);





 void acl_cache2_lock(ACL_CACHE2 *cache2);





 void acl_cache2_unlock(ACL_CACHE2 *cache2);







 void acl_cache2_walk(ACL_CACHE2 *cache2,
 void (*walk_fn)(ACL_CACHE2_INFO *, void *), void *arg);







 int acl_cache2_clean(ACL_CACHE2 *cache2, int force);






 int acl_cache2_size(ACL_CACHE2 *cache2);


}
# 24 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_avl.h" 1
# 35 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_avl.h"
extern "C" {




# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/avl_impl.h" 1
# 37 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/avl_impl.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 38 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/avl_impl.h" 2


# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4
# 43 "/usr/include/stdint.h" 3 4

# 43 "/usr/include/stdint.h" 3 4
typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;

typedef long int int_least64_t;






typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;

typedef unsigned long int uint_least64_t;
# 68 "/usr/include/stdint.h" 3 4
typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 81 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 100 "/usr/include/stdint.h" 3 4
typedef unsigned long int uintptr_t;
# 111 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdint.h" 2 3 4
# 41 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/avl_impl.h" 2
# 59 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/avl_impl.h"

# 59 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/avl_impl.h"
typedef unsigned int ulong_t;

typedef char acl_boolean_t;





extern "C" {
# 117 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/avl_impl.h"
struct avl_node {
 struct avl_node *avl_child[2];
 uintptr_t avl_pcb;
};
# 171 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/avl_impl.h"
struct avl_tree {
 struct avl_node *avl_root;
 int (*avl_compar)(const void *, const void *);
 size_t avl_offset;
 ulong_t avl_numnodes;
 size_t avl_size;
};





 void *avl_walk(struct avl_tree *, void *, int);


}
# 41 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_avl.h" 2
# 108 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_avl.h"
typedef struct avl_tree avl_tree_t;




typedef struct avl_node avl_node_t;
# 126 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_avl.h"
typedef uintptr_t avl_index_t;
# 159 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_avl.h"
 void avl_create(avl_tree_t *tree,
 int (*compar) (const void *, const void *), size_t size, size_t offset);
# 171 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_avl.h"
 void *avl_find(avl_tree_t *tree, void *node, avl_index_t *where);







 void avl_insert(avl_tree_t *tree, void *node, avl_index_t where);
# 192 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_avl.h"
 void avl_insert_here(avl_tree_t *tree, void *new_data, void *here,
    int direction);







 void *avl_first(avl_tree_t *tree);
 void *avl_last(avl_tree_t *tree);
# 238 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_avl.h"
 void *avl_nearest(avl_tree_t *tree, avl_index_t where, int direction);
# 248 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_avl.h"
 void avl_add(avl_tree_t *tree, void *node);







 void avl_remove(avl_tree_t *tree, void *node);
# 265 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_avl.h"
 acl_boolean_t avl_update(avl_tree_t *, void *);
 acl_boolean_t avl_update_lt(avl_tree_t *, void *);
 acl_boolean_t avl_update_gt(avl_tree_t *, void *);




 ulong_t avl_numnodes(avl_tree_t *tree);




 acl_boolean_t avl_is_empty(avl_tree_t *tree);
# 300 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_avl.h"
 void *avl_destroy_nodes(avl_tree_t *tree, void **cookie);







 void avl_destroy(avl_tree_t *tree);


}
# 25 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_token_tree.h" 1




extern "C" {
# 29 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_token_tree.h"
typedef struct ACL_TOKEN ACL_TOKEN;

struct ACL_TOKEN {
 unsigned char ch;
 unsigned int flag;







 struct ACL_TOKEN *tokens[256];
 struct ACL_TOKEN *parent;
 void *ctx;

 ACL_TOKEN *(*iter_head)(ACL_ITER*, ACL_TOKEN*);
 ACL_TOKEN *(*iter_next)(ACL_ITER*, ACL_TOKEN*);
};
# 136 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_token_tree.h"
 char *acl_token_delim_tab_new(const char *delim);
 void acl_token_delim_tab_free(char *delim_tab);
 ACL_TOKEN *acl_token_new(void);
 void acl_token_free(ACL_TOKEN *token);
 void acl_token_name(ACL_TOKEN *token, ACL_VSTRING *buf);
 const char *acl_token_name1(ACL_TOKEN *token);
 ACL_TOKEN *acl_token_tree_add(ACL_TOKEN *tree,
 const char *word, unsigned int flag, const void *ctx);
 ACL_TOKEN *acl_token_tree_add_word_map(ACL_TOKEN *tree,
 const char *word, const char *word_map, unsigned int flag);
 ACL_TOKEN *acl_token_tree_word_match(ACL_TOKEN *tree,
 const char *word);
 void *acl_token_tree_word_remove(ACL_TOKEN *tree, const char *word);
 ACL_TOKEN *acl_token_tree_match(ACL_TOKEN *tree,
 const char **ptr, const char *delim, const char *delim_tab);
 void acl_token_tree_walk(ACL_TOKEN *tree,
 void (*walk_fn)(ACL_TOKEN*, void*), void *arg);
 void acl_token_tree_print(ACL_TOKEN *tree);
 ACL_TOKEN *acl_token_tree_create(const char *s);
 ACL_TOKEN *acl_token_tree_create2(const char *s, const char *sep);
 void acl_token_tree_destroy(ACL_TOKEN *tree);
 void acl_token_tree_load_deny(const char *filepath, ACL_TOKEN *tree);
 void acl_token_tree_load_pass(const char *filepath, ACL_TOKEN *tree);


}
# 26 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2


# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_iostuff.h" 1




extern "C" {
# 23 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_iostuff.h"
 int acl_non_blocking(int fd, int on);







 int acl_is_blocking(int fd);
# 42 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_iostuff.h"
 int acl_write_wait(int fd, int timeout);
# 53 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_iostuff.h"
 int acl_write_wait_ms(int fd, int timeout);
# 64 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_iostuff.h"
 int acl_read_wait(int fd, int timeout);
# 75 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_iostuff.h"
 int acl_read_wait_ms(int fd, int timeout);
# 84 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_iostuff.h"
 int acl_read_epoll_wait(int fd, int delay);
# 94 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_iostuff.h"
 int acl_read_poll_wait(int fd, int delay);
# 103 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_iostuff.h"
 int acl_read_select_wait(int fd, int delay);





 void acl_doze(unsigned delay);






 int acl_readable(int fd);
# 129 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_iostuff.h"
 int acl_timed_read(int fd, void *buf, unsigned len,
 int timeout, void *unused_context);
# 143 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_iostuff.h"
 int acl_timed_write(int fd, void *buf, unsigned len,
 int timeout, void *unused_context);
# 154 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_iostuff.h"
 int acl_write_buf(int fd, const char *buf, int len, int timeout);






 int acl_peekfd(int fd);






 int acl_pipe(int fds[2]);






 int acl_pipe_close(int fds[2]);






 int acl_duplex_pipe(int fds[2]);
# 191 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_iostuff.h"
 int acl_close_on_exec(int fd, int on);






 int acl_closefrom(int lowfd);






 int acl_open_limit(int limit);






 int acl_issock(int fd);


 void acl_set_delay_slice(int n);
# 227 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_iostuff.h"
# 1 "/usr/include/poll.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/poll.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/sys/poll.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/poll.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/sys/poll.h" 2 3 4








# 33 "/usr/include/x86_64-linux-gnu/sys/poll.h" 3 4
typedef unsigned long int nfds_t;


struct pollfd
  {
    int fd;
    short int events;
    short int revents;
  };


extern "C" {
# 54 "/usr/include/x86_64-linux-gnu/sys/poll.h" 3 4
extern int poll (struct pollfd *__fds, nfds_t __nfds, int __timeout);
# 63 "/usr/include/x86_64-linux-gnu/sys/poll.h" 3 4
extern int ppoll (struct pollfd *__fds, nfds_t __nfds,
    const struct timespec *__timeout,
    const __sigset_t *__ss);


}




# 1 "/usr/include/x86_64-linux-gnu/bits/poll2.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/poll2.h" 3 4
extern "C" {

extern int __poll_alias (struct pollfd *__fds, nfds_t __nfds, int __timeout) __asm__ ("" "poll")
                               ;
extern int __poll_chk (struct pollfd *__fds, nfds_t __nfds, int __timeout,
         long unsigned int __fdslen);
extern int __poll_chk_warn (struct pollfd *__fds, nfds_t __nfds, int __timeout, long unsigned int __fdslen) __asm__ ("" "__poll_chk")


  __attribute__((__warning__ ("poll called with fds buffer too small file nfds entries")));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
poll (struct pollfd *__fds, nfds_t __nfds, int __timeout)
{
  if (__builtin_object_size (__fds, 2 > 1) != (long unsigned int) -1)
    {
      if (! __builtin_constant_p (__nfds))
 return __poll_chk (__fds, __nfds, __timeout, __builtin_object_size (__fds, 2 > 1));
      else if (__builtin_object_size (__fds, 2 > 1) / sizeof (*__fds) < __nfds)
 return __poll_chk_warn (__fds, __nfds, __timeout, __builtin_object_size (__fds, 2 > 1));
    }

  return __poll_alias (__fds, __nfds, __timeout);
}



extern int __ppoll_alias (struct pollfd *__fds, nfds_t __nfds, const struct timespec *__timeout, const __sigset_t *__ss) __asm__ ("" "ppoll")

                                          ;
extern int __ppoll_chk (struct pollfd *__fds, nfds_t __nfds,
   const struct timespec *__timeout,
   const __sigset_t *__ss, long unsigned int __fdslen);
extern int __ppoll_chk_warn (struct pollfd *__fds, nfds_t __nfds, const struct timespec *__timeout, const __sigset_t *__ss, long unsigned int __fdslen) __asm__ ("" "__ppoll_chk")




  __attribute__((__warning__ ("ppoll called with fds buffer too small file nfds entries")));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
ppoll (struct pollfd *__fds, nfds_t __nfds, const struct timespec *__timeout,
       const __sigset_t *__ss)
{
  if (__builtin_object_size (__fds, 2 > 1) != (long unsigned int) -1)
    {
      if (! __builtin_constant_p (__nfds))
 return __ppoll_chk (__fds, __nfds, __timeout, __ss, __builtin_object_size (__fds, 2 > 1));
      else if (__builtin_object_size (__fds, 2 > 1) / sizeof (*__fds) < __nfds)
 return __ppoll_chk_warn (__fds, __nfds, __timeout, __ss,
     __builtin_object_size (__fds, 2 > 1));
    }

  return __ppoll_alias (__fds, __nfds, __timeout, __ss);
}


}
# 74 "/usr/include/x86_64-linux-gnu/sys/poll.h" 2 3 4
# 1 "/usr/include/poll.h" 2 3 4
# 228 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_iostuff.h" 2



# 230 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_iostuff.h"
typedef int (*acl_select_fn)(int, fd_set*, fd_set*, fd_set*, struct timeval*);
typedef int (*acl_poll_fn)(struct pollfd*, nfds_t, int);
 void acl_set_poll(acl_poll_fn fn);


 void acl_set_select(acl_select_fn fn);


}
# 29 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_msg.h" 1




extern "C" {
# 21 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_msg.h"
typedef void (*ACL_MSG_PRE_WRITE_FN)(void *ctx, const char *fmt, va_list ap);
# 32 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_msg.h"
typedef int (*ACL_MSG_OPEN_FN) (const char *file_name, void *ctx);







typedef void (*ACL_MSG_CLOSE_FN) (void *ctx);
# 50 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_msg.h"
typedef void (*ACL_MSG_WRITE_FN) (void *ctx, const char *fmt, va_list ap);
# 59 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_msg.h"
 void acl_msg_register(ACL_MSG_OPEN_FN open_fn, ACL_MSG_CLOSE_FN close_fn,
        ACL_MSG_WRITE_FN write_fn, void *ctx);




 void acl_msg_unregister(void);







 void acl_msg_pre_write(ACL_MSG_PRE_WRITE_FN pre_write, void *ctx);





extern int acl_msg_verbose;







 void acl_msg_stdout_enable(int onoff);






 void acl_msg_trace_enable(int onoff);
# 105 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_msg.h"
 void acl_msg_open(const char *log_file, const char *info_pre);






 void acl_msg_open2(ACL_VSTREAM *fp, const char *info_pre);




 void acl_msg_close(void);
# 130 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_msg.h"
 void __attribute__((__format__ (__printf__, (1), (2)))) acl_msg_info(const char *fmt,...);






 void __attribute__((__format__ (__printf__, (1), (2)))) acl_msg_warn(const char *fmt,...);






 void __attribute__((__format__ (__printf__, (1), (2)))) acl_msg_error(const char *fmt,...);






 void __attribute__((__format__ (__printf__, (1), (2)))) acl_msg_fatal(const char *fmt,...);







 void __attribute__((__format__ (__printf__, (2), (3))))
 acl_msg_fatal_status(int status, const char *fmt,...);






 void __attribute__((__format__ (__printf__, (1), (2)))) acl_msg_panic(const char *fmt,...);






 void acl_msg_info2(const char *fmt, va_list ap);







 void acl_msg_warn2(const char *fmt, va_list ap);






 void acl_msg_error2(const char *fmt, va_list ap);







 void acl_msg_fatal2(const char *fmt, va_list ap);







 void acl_msg_fatal_status2(int status, const char *fmt, va_list ap);






 void acl_msg_panic2(const char *fmt, va_list ap);
# 243 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_msg.h"
 const char *acl_strerror(unsigned int errnum, char *buffer, int size);
 const char *acl_strerror1(unsigned int errnum);







 const char *acl_last_strerror(char *buffer, int size);






 const char *acl_last_serror(void);





 int acl_last_error(void);





 void acl_set_error(int errnum);






 void __attribute__((__format__ (__printf__, (1), (2)))) acl_msg_printf(const char *fmt,...);


}
# 30 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_debug.h" 1







extern "C" {
# 28 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_debug.h"
 void acl_debug_end(void);






 void acl_debug_init(const char *ptr);







 void acl_debug_init2(const char *ptr, int max_debug_level);






 int acl_do_debug(int section, int level);


}
# 31 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_mem_hook.h" 1




extern "C" {
# 21 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_mem_hook.h"
 void acl_mem_hook(void *(*malloc_hook)(const char*, int, size_t),
  void *(*calloc_hook)(const char*, int, size_t, size_t),
  void *(*realloc_hook)(const char*, int, void*, size_t),
  char *(*strdup_hook)(const char*, int, const char*),
  char *(*strndup_hook)(const char*, int, const char*, size_t),
  void *(*memdup_hook)(const char*, int, const void*, size_t),
  void (*free_hook)(const char*, int, void*));




 void acl_mem_unhook(void);


}
# 32 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_debug_malloc.h" 1




extern "C" {




typedef struct ACL_DEBUG_MEM ACL_DEBUG_MEM;

 void acl_debug_dump(void);
 ACL_DEBUG_MEM *acl_debug_malloc_init(ACL_DEBUG_MEM *debug_mem_ptr,
 const char* dump_file);


}
# 33 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_malloc.h" 1




extern "C" {
# 25 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_malloc.h"
 int *acl_memory_debug_start(void);
 void acl_memory_debug_stop(void);
 void acl_memory_debug_stack(int onoff);
 void acl_memory_stat(void);
 void acl_memory_alloc_stat(void);







 void acl_mempool_open(size_t max_size, int use_mutex);




 void acl_mempool_close(void);




 void acl_mempool_ctl(int name, ...);
# 56 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_malloc.h"
 int acl_mempool_total_allocated(void);




 void acl_mempool_status(void);
# 73 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_malloc.h"
 void acl_default_memstat(const char *filename, int line,
        void *ptr, size_t *len, size_t *real_len);

 void acl_default_meminfo(void);






 void acl_default_set_memlimit(size_t len);





 size_t acl_default_get_memlimit(void);
# 100 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_malloc.h"
 void *acl_default_malloc(const char *filename, int line, size_t size);
# 112 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_malloc.h"
 void *acl_default_calloc(const char *filename, int line,
  size_t nmemb, size_t size);
# 124 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_malloc.h"
 void *acl_default_realloc(const char *filename, int line,
  void *ptr, size_t size);
# 134 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_malloc.h"
 char *acl_default_strdup(const char *filename, int line, const char *str);
# 144 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_malloc.h"
 char *acl_default_strndup(const char *filename, int line,
  const char *str, size_t len);
# 155 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_malloc.h"
 void *acl_default_memdup(const char *filename, int line,
  const void *ptr, size_t len);






 void acl_default_free(const char *filename, int line, void *ptr);







 void *acl_malloc_glue(const char *filename, int line, size_t size);
 void *acl_calloc_glue(const char *filename, int line, size_t nmemb, size_t size);
 void *acl_realloc_glue(const char *filename, int line, void *ptr, size_t size);
 char *acl_strdup_glue(const char *filename, int line, const char *str);
 char *acl_strndup_glue(const char *filename, int line, const char *str, size_t len);
 void *acl_memdup_glue(const char *filename, int line, const void *ptr, size_t len);
 void acl_free_glue(const char *filename, int line, void *ptr);
 void acl_free_fn_glue(void *ptr);


}
# 34 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_mymalloc.h" 1
# 16 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_mymalloc.h"
extern "C" {
# 85 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_mymalloc.h"
}
# 35 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_mystring.h" 1




extern "C" {
# 34 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_mystring.h"
 char *acl_lowercase(char *s);







 char *acl_lowercase2(char *s, size_t n);
# 51 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_mystring.h"
 char *acl_lowercase3(const char *s, char *buf, size_t size);






 char *acl_uppercase(char *s);







 char *acl_uppercase2(char *s, size_t n);
# 75 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_mystring.h"
 char *acl_uppercase3(const char *s, char *buf, size_t size);
# 91 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_mystring.h"
 char *acl_strtok(char **src, const char *sep);
# 100 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_mystring.h"
 char *acl_strline(char **src);







 char *acl_strtrim(char *str);
# 119 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_mystring.h"
 int acl_strstrip(const char *haystack, const char *needle,
  char *buf, int bsize);







 int acl_strtrunc_byln(char *str);
# 139 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_mystring.h"
 int acl_strrncasecmp(const char *s1, const char *s2, size_t n);
# 149 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_mystring.h"
 int acl_strrncmp(const char *s1, const char *s2, size_t n);







 char *acl_rstrstr(const char *haystack, const char *needle);







 char *acl_strcasestr(const char *haystack, const char *needle);







 char *acl_rstrcasestr(const char *haystack, const char *needle);
# 182 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_mystring.h"
 size_t acl_strnlen(const char * s, size_t count);







 int acl_strcasecmp(const char *s1, const char *s2);
# 199 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_mystring.h"
 int acl_strncasecmp(const char *s1, const char *s2, size_t n);
# 230 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_mystring.h"
 int acl_file_path_correct(const char *psrc_file_path,
  char *pbuf, int sizeb);
# 243 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_mystring.h"
 int acl_dir_correct(const char *psrc_dir, char *pbuf, int sizeb);
# 252 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_mystring.h"
 int acl_dir_getpath(const char *pathname, char *pbuf, int bsize);






 long long acl_atoll(const char *s);






 unsigned long long int acl_atoui64(const char *str);






 long long int acl_atoi64(const char *str);
# 282 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_mystring.h"
 const char *acl_ui64toa(unsigned long long int value, char *buf, size_t size);
# 291 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_mystring.h"
 const char *acl_i64toa(long long int value, char *buf, size_t size);
# 301 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_mystring.h"
 const char *acl_i64toa_radix(long long int value, char *buf,
  size_t size, int radix);
# 312 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_mystring.h"
 const char *acl_ui64toa_radix(unsigned long long int value, char *buf,
  size_t size, int radix);



typedef struct ACL_LINE_STATE {
 int offset;
 char finish;
 char last_ch;
 char last_lf;
} ACL_LINE_STATE;





 ACL_LINE_STATE *acl_line_state_alloc(void);





 void acl_line_state_free(ACL_LINE_STATE *state);
# 344 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_mystring.h"
 ACL_LINE_STATE *acl_line_state_reset(ACL_LINE_STATE *state, int offset);
# 354 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_mystring.h"
 int acl_find_blank_line(const char *s, int n, ACL_LINE_STATE *state);




}
# 36 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2

# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vbuf_print.h" 1




extern "C" {
# 23 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vbuf_print.h"
 ACL_VBUF *acl_vbuf_print(ACL_VBUF *, const char *, va_list);


}
# 38 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vsprintf.h" 1




extern "C" {




# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 11 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vsprintf.h" 2

 int acl_vsnprintf(char *buf, size_t size, const char *fmt, va_list args);
 int acl_snprintf(char * buf, size_t size, const char *fmt, ...);
 int acl_vsprintf(char *buf, const char *fmt, va_list args);
 int acl_sprintf(char * buf, const char *fmt, ...);


}
# 39 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2

# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring_vstream.h" 1




extern "C" {
# 18 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring_vstream.h"
 int acl_vstring_gets(ACL_VSTRING *vp, ACL_VSTREAM *fp);
# 27 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring_vstream.h"
 int acl_vstring_gets_nonl(ACL_VSTRING *vp, ACL_VSTREAM *fp);







 int acl_vstring_gets_null(ACL_VSTRING *vp, ACL_VSTREAM *fp);
# 44 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring_vstream.h"
 int acl_vstring_gets_bound(ACL_VSTRING *vp, ACL_VSTREAM *fp, ssize_t bound);
# 53 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring_vstream.h"
 int acl_vstring_gets_nonl_bound(ACL_VSTRING *vp, ACL_VSTREAM *fp, ssize_t bound);
# 62 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring_vstream.h"
 int acl_vstring_gets_null_bound(ACL_VSTRING *vp, ACL_VSTREAM *fp, ssize_t bound);
# 81 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstring_vstream.h"
}
# 41 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_file.h" 1
# 9 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_file.h"
extern "C" {





typedef struct ACL_FILE {
 ACL_VSTREAM *fp;
 unsigned int status;

 int errnum;
} ACL_FILE;
# 36 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_file.h"
 ACL_FILE *acl_fopen(const char *filename, const char *mode);





 int acl_fclose(ACL_FILE *fp);





 void acl_clearerr(ACL_FILE *fp);






 int acl_feof(ACL_FILE *fp);
# 65 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_file.h"
 size_t acl_fread(void *buf, size_t size, size_t nitems, ACL_FILE *fp);
# 74 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_file.h"
 char *acl_fgets(char *buf, int size, ACL_FILE *fp);
# 83 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_file.h"
 char *acl_fgets_nonl(char *buf, int size, ACL_FILE *fp);






 int acl_fgetc(ACL_FILE *fp);
# 99 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_file.h"
 char *acl_gets(char *buf, size_t size);







 char *acl_gets_nonl(char *buf, size_t size);





 int acl_getchar(void);
# 122 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_file.h"
 int __attribute__((__format__ (__printf__, (2), (3)))) acl_fprintf(ACL_FILE *fp, const char *fmt, ...);
# 131 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_file.h"
 int acl_vfprintf(ACL_FILE *fp, const char *fmt, va_list ap);
# 141 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_file.h"
 size_t acl_fwrite(const void *ptr, size_t size, size_t nitems, ACL_FILE *fp);







 int acl_fputs(const char *s, ACL_FILE *fp);







 int __attribute__((__format__ (__printf__, (1), (2)))) acl_printf(const char *fmt, ...);







 int acl_vprintf(const char *fmt, va_list ap);







 int acl_putc(int c, ACL_FILE *fp);







 int acl_puts(const char *s);






 int acl_putchar(int c);
# 197 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_file.h"
 acl_off_t acl_fseek(ACL_FILE *fp, acl_off_t offset, int whence);






 acl_off_t acl_ftell(ACL_FILE *fp);


}
# 42 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_readline.h" 1







extern "C" {
# 20 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_readline.h"
 ACL_VSTRING *acl_readlline(ACL_VSTRING *buf, ACL_VSTREAM *fp, int *lineno);


}
# 43 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2

# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_mylog.h" 1






extern "C" {
# 17 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_mylog.h"
typedef struct ACL_LOG ACL_LOG;






 void acl_logtime_fmt(char *buf, size_t size);





 void acl_log_add_tid(int onoff);






 void acl_log_fp_set(ACL_VSTREAM *fp, const char *plog_pre);
# 49 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_mylog.h"
 int acl_open_log(const char *recipients, const char *plog_pre);






 void acl_log_close_onexec(int yes);







 int __attribute__((__format__ (__printf__, (1), (2)))) acl_write_to_log(const char *fmt, ...);
# 73 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_mylog.h"
 int acl_write_to_log2(const char *info, const char *fmt, va_list ap);




 void acl_close_log(void);

 ACL_ARRAY *acl_log_get_streams(void);
 void acl_log_free_streams(ACL_ARRAY *a);


}
# 45 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_getopt.h" 1




extern "C" {




extern int acl_optind;
extern char *acl_optarg;

 void acl_getopt_init(void);
 int acl_getopt(int argc, char *argv[], const char *opts);
# 24 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_getopt.h"
}
# 46 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_allocator.h" 1




extern "C" {







typedef enum {
 ACL_MEM_TYPE_NONE,
 ACL_MEM_TYPE_8_BUF,
 ACL_MEM_TYPE_16_BUF,
 ACL_MEM_TYPE_32_BUF,
 ACL_MEM_TYPE_64_BUF,
 ACL_MEM_TYPE_128_BUF,
 ACL_MEM_TYPE_256_BUF,
 ACL_MEM_TYPE_512_BUF,
 ACL_MEM_TYPE_1K_BUF,
 ACL_MEM_TYPE_2K_BUF,
 ACL_MEM_TYPE_4K_BUF,
 ACL_MEM_TYPE_8K_BUF,
 ACL_MEM_TYPE_16K_BUF,
 ACL_MEM_TYPE_32K_BUF,
 ACL_MEM_TYPE_64K_BUF,
 ACL_MEM_TYPE_128K_BUF,
 ACL_MEM_TYPE_256K_BUF,
 ACL_MEM_TYPE_512K_BUF,
 ACL_MEM_TYPE_1M_BUF,
 ACL_MEM_TYPE_VSTRING,
 ACL_MEM_TYPE_MAX
} acl_mem_type;

typedef struct ACL_MEM_POOL ACL_MEM_POOL;
typedef struct ACL_ALLOCATOR ACL_ALLOCATOR;







 ACL_ALLOCATOR *acl_allocator_create(size_t mem_limit);
# 56 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_allocator.h"
 void acl_allocator_ctl(int name, ...);
# 67 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_allocator.h"
 void acl_allocator_config(ACL_ALLOCATOR *allocator, size_t mem_limit);





 void acl_allocator_free(ACL_ALLOCATOR *allocator);
# 87 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_allocator.h"
 ACL_MEM_POOL *acl_allocator_pool_add(ACL_ALLOCATOR *allocator,
     const char *label,
     size_t obj_size,
     acl_mem_type type,
     void (*after_alloc_fn)(void *obj, void *pool_ctx),
     void (*before_free_fn)(void *obj, void *pool_ctx),
     void *pool_ctx);






 void acl_allocator_pool_remove(ACL_ALLOCATOR *allocator, ACL_MEM_POOL *pool);







 int acl_allocator_pool_ifused(ACL_ALLOCATOR *allocator, acl_mem_type type);







 int acl_allocator_pool_inuse_count(ACL_ALLOCATOR *allocator, acl_mem_type type);







 int acl_allocator_pool_inuse_size(ACL_ALLOCATOR *allocator, acl_mem_type type);






 int acl_allocator_pool_total_allocated(ACL_ALLOCATOR *allocator);
# 141 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_allocator.h"
 void *acl_allocator_mem_alloc(const char *filename, int line,
 ACL_ALLOCATOR *allocator, acl_mem_type type);
# 152 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_allocator.h"
 void acl_allocator_mem_free(const char *filename, int line,
 ACL_ALLOCATOR *allocator, acl_mem_type type, void *obj);
# 164 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_allocator.h"
 void *acl_allocator_membuf_alloc(const char *filename, int line,
 ACL_ALLOCATOR *allocator, size_t size);
# 177 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_allocator.h"
 void *acl_allocator_membuf_realloc(const char *filename, int line,
 ACL_ALLOCATOR *allocator, void *oldbuf, size_t size);
# 188 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_allocator.h"
 void acl_allocator_membuf_free(const char *filename, int line,
 ACL_ALLOCATOR *allocator, void *buf);


}
# 47 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_chunk_chain.h" 1




extern "C" {







typedef struct ACL_CHAIN ACL_CHAIN;







 ACL_CHAIN *acl_chain_new(size_t init_size, long long int off_begin);





 void acl_chain_free(ACL_CHAIN *chain);






 void acl_chain_set_from_next(ACL_CHAIN *chain, long long int from_next);






 void acl_chain_reset(ACL_CHAIN *chain, long long int off_begin);






 long long int acl_chain_from_next(ACL_CHAIN *chain);






 long long int acl_chain_off_begin(ACL_CHAIN *chain);






 const char *acl_chain_data(ACL_CHAIN *chain);






 int acl_chain_data_len(ACL_CHAIN *chain);






 int acl_chain_size(ACL_CHAIN *chain);






 int acl_chain_chunk_data_len(ACL_CHAIN *chain);
# 92 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_chunk_chain.h"
 void acl_chain_add(ACL_CHAIN *chain, const void *data,
 long long int from, int dlen);





 void acl_chain_list(ACL_CHAIN *chain);


}
# 48 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2


# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_mem_slice.h" 1




extern "C" {


typedef struct ACL_MEM_SLICE ACL_MEM_SLICE;

 ACL_MEM_SLICE *acl_mem_slice_init(int base, int nslice,
 int nalloc_gc, unsigned int slice_flag);
 void acl_mem_slice_delay_destroy(void);
 void acl_mem_slice_destroy(void);
 int acl_mem_slice_gc(void);
 void acl_mem_slice_set(ACL_MEM_SLICE *mem_slice);


}
# 51 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2

# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_meter_time.h" 1




extern "C" {


 double acl_meter_time(const char *filename, int line, const char *info);




}
# 53 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2

# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_xinetd_cfg.h" 1




extern "C" {
# 14 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_xinetd_cfg.h"
typedef struct ACL_XINETD_CFG_PARSER ACL_XINETD_CFG_PARSER;







 const char *acl_xinetd_cfg_get(const ACL_XINETD_CFG_PARSER *xcp, const char *name);







 const ACL_ARRAY *acl_xinetd_cfg_get_ex(const ACL_XINETD_CFG_PARSER *xcp, const char *name);
# 40 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_xinetd_cfg.h"
 int acl_xinetd_cfg_index(const ACL_XINETD_CFG_PARSER *xcp,
   int idx,
   char **ppname,
   char **ppvalue);






 int acl_xinetd_cfg_size(const ACL_XINETD_CFG_PARSER *xcp);





 void acl_xinetd_cfg_free(ACL_XINETD_CFG_PARSER *xcp);






 ACL_XINETD_CFG_PARSER *acl_xinetd_cfg_load(const char *pathname);




typedef struct ACL_CFG_INT_TABLE {
 const char *name;
 int defval;
 int *target;
 int min;
 int max;
} ACL_CFG_INT_TABLE;




typedef struct ACL_CFG_INT64_TABLE {
 const char *name;
 long long int defval;
 long long int *target;
 long long int min;
 long long int max;
} ACL_CFG_INT64_TABLE;




typedef struct ACL_CFG_STR_TABLE {
 const char *name;
 const char *defval;
 char **target;
} ACL_CFG_STR_TABLE;




typedef struct ACL_CFG_BOOL_TABLE {
 const char *name;
 int defval;
 int *target;
} ACL_CFG_BOOL_TABLE;
# 112 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_xinetd_cfg.h"
 void acl_xinetd_params_int_table(ACL_XINETD_CFG_PARSER *cfg,
 ACL_CFG_INT_TABLE *table);






 void acl_xinetd_params_int64_table(ACL_XINETD_CFG_PARSER *cfg,
 ACL_CFG_INT64_TABLE *table);






 void acl_xinetd_params_str_table(ACL_XINETD_CFG_PARSER *cfg,
 ACL_CFG_STR_TABLE *table);






 void acl_xinetd_params_bool_table(ACL_XINETD_CFG_PARSER *cfg,
 ACL_CFG_BOOL_TABLE *table);


}
# 55 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_loadcfg.h" 1




extern "C" {





typedef struct ACL_CFG_PARSER ACL_CFG_PARSER;

typedef struct ACL_CFG_LINE {
 char **value;
 char *pdata;
 int ncount;




 int line_number;
} ACL_CFG_LINE;

typedef struct ACL_CFG_FN {
 const char *name;
 int (*func)(const ACL_CFG_LINE *);
} ACL_CFG_FN;

typedef void (*ACL_CFG_WALK_FN)(void *arg);

 ACL_CFG_PARSER *acl_cfg_parser_load(const char *pathname, const char *delimiter);
 void acl_cfg_parser_free(ACL_CFG_PARSER *parser);
 void acl_cfg_parser_walk(ACL_CFG_PARSER *parser, ACL_CFG_WALK_FN walk_fn);
 int acl_cfg_line_replace(ACL_CFG_LINE *cfg_line, const char **value, int from, int to);
 ACL_CFG_LINE *acl_cfg_parser_index(const ACL_CFG_PARSER *parser, int idx);
 int acl_cfg_parser_size(const ACL_CFG_PARSER *parser);
 int acl_cfg_parser_dump(const ACL_CFG_PARSER *parser, const char *pathname, const char *delimiter);
 int acl_cfg_parser_append(ACL_CFG_PARSER *parser, ACL_CFG_LINE *cfg_line);
 int acl_cfg_parser_delete(ACL_CFG_PARSER *parser, const char *name);
 ACL_CFG_LINE *acl_cfg_line_new(const char **value, int ncount);


}
# 56 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_cfg_macro.h" 1




extern "C" {





# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 12 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_cfg_macro.h" 2
# 57 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_cfg_macro.h"
}
# 57 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2

# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_hex_code.h" 1




extern "C" {
# 18 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_hex_code.h"
 ACL_VSTRING *acl_hex_encode(ACL_VSTRING *buf, const char *ptr, int len);
# 27 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_hex_code.h"
 ACL_VSTRING *acl_hex_decode(ACL_VSTRING *buf, const char *ptr, int len);


}
# 59 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_split_at.h" 1




extern "C" {
# 16 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_split_at.h"
 char *acl_split_at(char *string, int delimiter);







 char *acl_split_at_right(char *string, int delimiter);


}
# 60 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stringops.h" 1




extern "C" {
# 15 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stringops.h"
 int acl_alldig(const char *str);






 int acl_is_double(const char *s);







 char *acl_concatenate(const char *arg0,...);
# 40 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stringops.h"
 const char *acl_safe_basename(const char *path);
# 52 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stringops.h"
 const char *acl_split_nameval(char *buf, char **name, char **value);


}
# 61 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_timeops.h" 1
# 12 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_timeops.h"
extern "C" {
# 24 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_timeops.h"
 time_t acl_str2time_t(const char *str);
# 35 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_timeops.h"
 struct tm *acl_localtime_r(const time_t *t, struct tm *result);


}
# 62 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2

# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_make_dirs.h" 1




extern "C" {
# 17 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_make_dirs.h"
 int acl_make_dirs(const char *path, int perms);


}
# 64 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_scan_dir.h" 1



# 1 "/usr/include/x86_64-linux-gnu/sys/stat.h" 1 3 4
# 99 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4

# 99 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern "C" {

# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 102 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4
# 205 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat (const char *__restrict __file,
   struct stat *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int fstat (int __fd, struct stat *__buf) throw () __attribute__ ((__nonnull__ (2)));
# 224 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat64 (const char *__restrict __file,
     struct stat64 *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int fstat64 (int __fd, struct stat64 *__buf) throw () __attribute__ ((__nonnull__ (2)));







extern int fstatat (int __fd, const char *__restrict __file,
      struct stat *__restrict __buf, int __flag)
     throw () __attribute__ ((__nonnull__ (2, 3)));
# 249 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int fstatat64 (int __fd, const char *__restrict __file,
        struct stat64 *__restrict __buf, int __flag)
     throw () __attribute__ ((__nonnull__ (2, 3)));







extern int lstat (const char *__restrict __file,
    struct stat *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));
# 272 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int lstat64 (const char *__restrict __file,
      struct stat64 *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int chmod (const char *__file, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int lchmod (const char *__file, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));




extern int fchmod (int __fd, __mode_t __mode) throw ();





extern int fchmodat (int __fd, const char *__file, __mode_t __mode,
       int __flag)
     throw () __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));






extern __mode_t umask (__mode_t __mask) throw ();




extern __mode_t getumask (void) throw ();



extern int mkdir (const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mkdirat (int __fd, const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (2)));






extern int mknod (const char *__path, __mode_t __mode, __dev_t __dev)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mknodat (int __fd, const char *__path, __mode_t __mode,
      __dev_t __dev) throw () __attribute__ ((__nonnull__ (2)));





extern int mkfifo (const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mkfifoat (int __fd, const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (2)));





extern int utimensat (int __fd, const char *__path,
        const struct timespec __times[2],
        int __flags)
     throw () __attribute__ ((__nonnull__ (2)));




extern int futimens (int __fd, const struct timespec __times[2]) throw ();
# 395 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat (int __ver, int __fildes, struct stat *__stat_buf)
     throw () __attribute__ ((__nonnull__ (3)));
extern int __xstat (int __ver, const char *__filename,
      struct stat *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat (int __ver, const char *__filename,
       struct stat *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat (int __ver, int __fildes, const char *__filename,
         struct stat *__stat_buf, int __flag)
     throw () __attribute__ ((__nonnull__ (3, 4)));
# 428 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat64 (int __ver, int __fildes, struct stat64 *__stat_buf)
     throw () __attribute__ ((__nonnull__ (3)));
extern int __xstat64 (int __ver, const char *__filename,
        struct stat64 *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat64 (int __ver, const char *__filename,
         struct stat64 *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat64 (int __ver, int __fildes, const char *__filename,
    struct stat64 *__stat_buf, int __flag)
     throw () __attribute__ ((__nonnull__ (3, 4)));

extern int __xmknod (int __ver, const char *__path, __mode_t __mode,
       __dev_t *__dev) throw () __attribute__ ((__nonnull__ (2, 4)));

extern int __xmknodat (int __ver, int __fd, const char *__path,
         __mode_t __mode, __dev_t *__dev)
     throw () __attribute__ ((__nonnull__ (3, 5)));




extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) stat (const char *__path, struct stat *__statbuf) throw ()
{
  return __xstat (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) lstat (const char *__path, struct stat *__statbuf) throw ()
{
  return __lxstat (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) fstat (int __fd, struct stat *__statbuf) throw ()
{
  return __fxstat (1, __fd, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) fstatat (int __fd, const char *__filename, struct stat *__statbuf, int __flag) throw ()

{
  return __fxstatat (1, __fd, __filename, __statbuf, __flag);
}



extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) mknod (const char *__path, __mode_t __mode, __dev_t __dev) throw ()
{
  return __xmknod (0, __path, __mode, &__dev);
}



extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) mknodat (int __fd, const char *__path, __mode_t __mode, __dev_t __dev) throw ()

{
  return __xmknodat (0, __fd, __path, __mode, &__dev);
}





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) stat64 (const char *__path, struct stat64 *__statbuf) throw ()
{
  return __xstat64 (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) lstat64 (const char *__path, struct stat64 *__statbuf) throw ()
{
  return __lxstat64 (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) fstat64 (int __fd, struct stat64 *__statbuf) throw ()
{
  return __fxstat64 (1, __fd, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) fstatat64 (int __fd, const char *__filename, struct stat64 *__statbuf, int __flag) throw ()

{
  return __fxstatat64 (1, __fd, __filename, __statbuf, __flag);
}






}
# 5 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_scan_dir.h" 2



# 7 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_scan_dir.h"
extern "C" {






typedef struct ACL_SCAN_DIR ACL_SCAN_DIR;






typedef int (*ACL_SCAN_DIR_FN)(ACL_SCAN_DIR *scan, void *ctx);







typedef int (*ACL_SCAN_RMDIR_FN)(ACL_SCAN_DIR *scan, const char *path, void *ctx);







 ACL_SCAN_DIR *acl_scan_dir_open(const char *path, int recursive);







 ACL_SCAN_DIR *acl_scan_dir_open2(const char *path, unsigned flags);







 void acl_scan_dir_close(ACL_SCAN_DIR *scan);





 void acl_scan_dir_reset(ACL_SCAN_DIR *scan);







 void acl_scan_dir_ctl(ACL_SCAN_DIR *scan, int name, ...);
# 79 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_scan_dir.h"
 const char *acl_scan_dir_path(ACL_SCAN_DIR *scan);






 const char *acl_scan_dir_file(ACL_SCAN_DIR *scan);






 unsigned acl_scan_dir_ndirs(ACL_SCAN_DIR *scan);






 unsigned acl_scan_dir_nfiles(ACL_SCAN_DIR *scan);






 long long int acl_scan_dir_nsize(ACL_SCAN_DIR *scan);







 int acl_scan_stat(ACL_SCAN_DIR *scan, struct stat64 *sbuf);







 int acl_scan_dir_stat(ACL_SCAN_DIR *scan, struct stat64 *sbuf);






 int acl_scan_dir_end(ACL_SCAN_DIR *scan);







 int acl_scan_dir_push(ACL_SCAN_DIR *scan, const char *path);






 ACL_SCAN_DIR *acl_scan_dir_pop(ACL_SCAN_DIR *scan);
# 155 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_scan_dir.h"
 const char *acl_scan_dir_next(ACL_SCAN_DIR *scan);







 const char *acl_scan_dir_next_file(ACL_SCAN_DIR *scan);







 const char *acl_scan_dir_next_dir(ACL_SCAN_DIR *scan);
# 182 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_scan_dir.h"
 const char *acl_scan_dir_next_name(ACL_SCAN_DIR *scan, int *is_file);
# 192 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_scan_dir.h"
 long long int acl_scan_dir_size2(ACL_SCAN_DIR *scan, int *nfile, int *ndir);
# 202 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_scan_dir.h"
 long long int acl_scan_dir_size(const char *pathname, int recursive,
  int *nfile, int *ndir);
# 213 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_scan_dir.h"
 long long int acl_scan_dir_rm2(ACL_SCAN_DIR *scan, int *nfile, int *ndir);
# 223 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_scan_dir.h"
 long long int acl_scan_dir_rm(const char *pathname, int recursive,
  int *ndir, int *nfile);


}
# 65 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_myflock.h" 1




extern "C" {
# 18 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_myflock.h"
 int acl_myflock(int fd, int lock_style, int operation);
# 46 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_myflock.h"
}
# 66 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_sane_basename.h" 1




extern "C" {
# 15 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_sane_basename.h"
 char *acl_sane_basename(ACL_VSTRING *bp, const char *path);






 char *acl_sane_dirname(ACL_VSTRING *bp, const char *path);


}
# 67 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_fhandle.h" 1




extern "C" {
# 19 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_fhandle.h"
typedef struct ACL_FHANDLE ACL_FHANDLE;

struct ACL_FHANDLE {
 ACL_VSTREAM *fp;
 long long int fsize;
 int nrefer;
 acl_pthread_mutex_t mutex;




 acl_pthread_t tid;
 acl_pthread_t lock_mutex_tid;

 unsigned int oflags;
# 42 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_fhandle.h"
 unsigned int status;



 time_t when_free;
 ACL_RING ring;
 size_t size;
 void (*on_close)(ACL_FHANDLE*);
};
# 60 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_fhandle.h"
void acl_fhandle_init(int cache_size, int debug_section, unsigned int flags);





void acl_fhandle_end(void);
# 79 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_fhandle.h"
ACL_FHANDLE *acl_fhandle_open(size_t size, unsigned int oflags,
 const char *file_path,
 int (*on_open)(ACL_FHANDLE*, void*), void *open_arg,
 void (*on_close)(ACL_FHANDLE*));







void acl_fhandle_close(ACL_FHANDLE *fs, int delay_timeout);





void acl_fhandle_lock(ACL_FHANDLE *fs);





void acl_fhandle_unlock(ACL_FHANDLE *fs);


}
# 68 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2

# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_bits_map.h" 1




extern "C" {







typedef struct ACL_BITS_MASK {
 char *data;
 size_t data_len;
} ACL_BITS_MASK;
# 102 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_bits_map.h"
}
# 70 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_process.h" 1




extern "C" {







 const char *acl_process_path(void);





 const char *acl_getcwd(void);


}
# 71 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_unix.h" 1




extern "C" {


# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_username.h" 1




extern "C" {


# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/../acl_define.h" 1
# 9 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_username.h" 2


const char *acl_username(void);




}
# 9 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_unix.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_timed_wait.h" 1




extern "C" {
# 15 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_timed_wait.h"
extern int acl_timed_waitpid(pid_t, ACL_WAIT_STATUS_T *, int, int);




}
# 10 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_unix.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_set_ugid.h" 1




extern "C" {
# 20 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_set_ugid.h"
int acl_set_ugid(uid_t uid, gid_t gid);






int acl_change_uid(const char *user);




}
# 11 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_unix.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_set_eugid.h" 1




extern "C" {
# 20 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_set_eugid.h"
int acl_set_eugid(uid_t euid, gid_t egid);




}
# 12 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_unix.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_mychown.h" 1
# 11 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_mychown.h"
int acl_mychown(const char *path, const char *s_owner, const char *s_group);
int acl_myfchown(const int fd, const char *s_owner, const char *s_group);
# 13 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_unix.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_chroot_uid.h" 1




extern "C" {







extern int acl_chroot_uid(const char *, const char *);




}
# 14 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_unix.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_safe_open.h" 1




extern "C" {
# 21 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_safe_open.h"
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/../acl_vstream.h" 1
# 22 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_safe_open.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/../acl_vstring.h" 1
# 23 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_safe_open.h" 2




extern ACL_VSTREAM *acl_safe_open(const char *path, int flags, int mode,
 struct stat * st, uid_t user, gid_t group, ACL_VSTRING *why);




}
# 15 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_unix.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_open_lock.h" 1




extern "C" {
# 25 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_open_lock.h"
extern ACL_VSTREAM *acl_open_lock(const char *, int, int, ACL_VSTRING *);




}
# 16 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_unix.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_transfer_fd.h" 1




extern "C" {
# 29 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_transfer_fd.h"
int acl_read_fd(int fd, void *ptr, int nbytes, int *recv_fd);
int acl_write_fd(int fd, void *ptr, int nbytes, int send_fd);




}
# 17 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_unix.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_watchdog.h" 1




extern "C" {
# 15 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_watchdog.h"
typedef struct ACL_WATCHDOG ACL_WATCHDOG;
typedef void (*ACL_WATCHDOG_FN) (ACL_WATCHDOG *, char *);
extern ACL_WATCHDOG *acl_watchdog_create(unsigned, ACL_WATCHDOG_FN, char *);
extern void acl_watchdog_start(ACL_WATCHDOG *);
extern void acl_watchdog_stop(ACL_WATCHDOG *);
extern void acl_watchdog_destroy(ACL_WATCHDOG *);
extern void acl_watchdog_pat(void);




}
# 18 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_unix.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_trace.h" 1




extern "C" {






void acl_trace_save(const char *filepath);




void acl_trace_info(void);


}
# 19 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_unix.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_core_limit.h" 1




extern "C" {
# 18 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_core_limit.h"
void acl_set_core_limit(long long int max);




}
# 20 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/unix/acl_unix.h" 2


}
# 72 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2

# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream_popen.h" 1




extern "C" {
# 15 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream_popen.h"
 ACL_VSTREAM *acl_vstream_popen(int,...);
 int acl_vstream_pclose(ACL_VSTREAM *);
# 31 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_vstream_popen.h"
}
# 74 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_safe.h" 1




extern "C" {




 int acl_unsafe(void);
 char *acl_safe_getenv(const char*name);


}
# 75 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_exec_command.h" 1




extern "C" {




 void acl_exec_command(const char *command);


}
# 76 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_env.h" 1




extern "C" {




 void acl_clean_env(char **preserve_list);
 char *acl_getenv(const char *name);
 char *acl_getenv3(const char *name, char *buf, size_t len);
 int acl_setenv(const char *name, const char *val, int overwrite);
 int acl_putenv(char *str);
 const char *acl_getenv_list(void);


}
# 77 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2

# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_dll.h" 1




extern "C" {







typedef struct ACL_DLL_ENV {
 ACL_VSTREAM *logfp;
 ACL_DEBUG_MEM *mmd;
 ACL_MEM_SLICE *mem_slice;
} ACL_DLL_ENV;

 void* acl_dlopen(const char *dlname);
 void acl_dlclose(void* handle);
 void* acl_dlsym(void *handle, const char *name);
 const char *acl_dlerror(void);


}
# 79 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_atomic.h" 1




extern "C"
{




typedef struct ACL_ATOMIC ACL_ATOMIC;





 ACL_ATOMIC *acl_atomic_new(void);





 void acl_atomic_free(ACL_ATOMIC *self);






 void acl_atomic_set(ACL_ATOMIC *self, void *value);
# 40 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_atomic.h"
 void *acl_atomic_cas(ACL_ATOMIC *self, void *cmp, void *value);







 void *acl_atomic_xchg(ACL_ATOMIC *self, void *value);







 void acl_atomic_int64_set(ACL_ATOMIC *self, long long n);







 long long acl_atomic_int64_fetch_add(ACL_ATOMIC *self, long long n);







 long long acl_atomic_int64_add_fetch(ACL_ATOMIC *self, long long n);
# 82 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_atomic.h"
 long long acl_atomic_int64_cas(ACL_ATOMIC *self, long long cmp, long long n);



typedef struct ACL_ATOMIC_CLOCK ACL_ATOMIC_CLOCK;

 ACL_ATOMIC_CLOCK *acl_atomic_clock_alloc(void);
 void acl_atomic_clock_free(ACL_ATOMIC_CLOCK *clk);
 long long acl_atomic_clock_count_add(ACL_ATOMIC_CLOCK *clk, int n);
 long long acl_atomic_clock_users_add(ACL_ATOMIC_CLOCK *clk, int n);
 void acl_atomic_clock_users_count_inc(ACL_ATOMIC_CLOCK *clk);
 long long acl_atomic_clock_count(ACL_ATOMIC_CLOCK *clk);
 long long acl_atomic_clock_atime(ACL_ATOMIC_CLOCK *clk);
 long long acl_atomic_clock_users(ACL_ATOMIC_CLOCK *clk);


}
# 80 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_yqueue.h" 1




extern "C"
{




typedef struct ACL_YQUEUE ACL_YQUEUE;

 ACL_YQUEUE* acl_yqueue_new(void);
 void acl_yqueue_free(ACL_YQUEUE *yqueue, void(*free_fn)(void*));
 void **acl_yqueue_front(ACL_YQUEUE *yqueue);
 void **acl_yqueue_back(ACL_YQUEUE *yqueue);
 void acl_yqueue_push(ACL_YQUEUE *yqueue);
 void acl_yqueue_pop(ACL_YQUEUE *yqueue);


}
# 81 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_ypipe.h" 1




extern "C"
{




typedef struct ACL_YPIPE ACL_YPIPE;

 ACL_YPIPE *acl_ypipe_new(void);
 int acl_ypipe_check_read(ACL_YPIPE *self);
 void *acl_ypipe_read(ACL_YPIPE *self);
 void acl_ypipe_write(ACL_YPIPE *self, void *data);
 int acl_ypipe_flush(ACL_YPIPE *self);
 void acl_ypipe_free(ACL_YPIPE *self, void(*free_fun)(void*));


}
# 82 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2

# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_mbox.h" 1




extern "C" {




typedef struct ACL_MBOX ACL_MBOX;





 ACL_MBOX *acl_mbox_create(void);




 ACL_MBOX *acl_mbox_create2(unsigned type);






 void acl_mbox_free(ACL_MBOX *mbox, void (*free_fn)(void*));







 int acl_mbox_send(ACL_MBOX *mbox, void *msg);
# 46 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_mbox.h"
 void *acl_mbox_read(ACL_MBOX *mbox, int timeout, int *success);






 size_t acl_mbox_nsend(ACL_MBOX *mbox);






 size_t acl_mbox_nread(ACL_MBOX *mbox);


}
# 84 "/workspace/acl/lib_acl_cpp/../lib_acl/include/stdlib/acl_stdlib.h" 2


}
# 10 "/workspace/acl/lib_acl_cpp/../lib_acl/include/lib_acl.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_net.h" 1




extern "C" {


# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_connect.h" 1




extern "C" {


# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../stdlib/acl_define.h" 1
# 9 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_connect.h" 2




# 1 "/usr/include/arpa/inet.h" 1 3 4
# 30 "/usr/include/arpa/inet.h" 3 4

# 30 "/usr/include/arpa/inet.h" 3 4
extern "C" {



extern in_addr_t inet_addr (const char *__cp) throw ();


extern in_addr_t inet_lnaof (struct in_addr __in) throw ();



extern struct in_addr inet_makeaddr (in_addr_t __net, in_addr_t __host)
     throw ();


extern in_addr_t inet_netof (struct in_addr __in) throw ();



extern in_addr_t inet_network (const char *__cp) throw ();



extern char *inet_ntoa (struct in_addr __in) throw ();




extern int inet_pton (int __af, const char *__restrict __cp,
        void *__restrict __buf) throw ();




extern const char *inet_ntop (int __af, const void *__restrict __cp,
         char *__restrict __buf, socklen_t __len)
     throw ();






extern int inet_aton (const char *__cp, struct in_addr *__inp) throw ();



extern char *inet_neta (in_addr_t __net, char *__buf, size_t __len) throw ();




extern char *inet_net_ntop (int __af, const void *__cp, int __bits,
       char *__buf, size_t __len) throw ();




extern int inet_net_pton (int __af, const char *__cp,
     void *__buf, size_t __len) throw ();




extern unsigned int inet_nsap_addr (const char *__cp,
        unsigned char *__buf, int __len) throw ();



extern char *inet_nsap_ntoa (int __len, const unsigned char *__cp,
        char *__buf) throw ();


}
# 14 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_connect.h" 2
# 25 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_connect.h"
 
# 25 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_connect.h"
       int acl_sane_connect(int sock, const struct sockaddr * sa,
  socklen_t len);
# 38 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_connect.h"
 int acl_timed_connect(int fd, const struct sockaddr * sa,
  socklen_t len, int timeout);
# 49 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_connect.h"
 int acl_timed_connect_ms(int fd, const struct sockaddr * sa,
  socklen_t len, int timeout);
# 63 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_connect.h"
 int acl_inet_connect(const char *addr, int blocking, int timeout);
# 75 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_connect.h"
 int acl_inet_connect_ex(const char *addr, int blocking,
  int timeout, int *h_error);
# 88 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_connect.h"
 int acl_inet_timed_connect(const char *addr, int blocking,
  int timeout, int *h_error);
# 103 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_connect.h"
 int acl_unix_connect(const char *addr, int blocking, int timeout);
# 115 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_connect.h"
typedef int (*acl_connect_fn)(int, const struct sockaddr*, socklen_t);


 void acl_set_connect(acl_connect_fn fn);


}
# 9 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_net.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_netdb.h" 1
# 10 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_netdb.h"
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../stdlib/acl_array.h" 1
# 11 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_netdb.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_sane_inet.h" 1




extern "C" {






# 1 "/usr/include/x86_64-linux-gnu/sys/un.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/sys/un.h" 3 4

# 26 "/usr/include/x86_64-linux-gnu/sys/un.h" 3 4
extern "C" {


struct sockaddr_un
  {
    sa_family_t sun_family;
    char sun_path[108];
  };
# 44 "/usr/include/x86_64-linux-gnu/sys/un.h" 3 4
}
# 13 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_sane_inet.h" 2



# 15 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_sane_inet.h"
typedef union {
 struct sockaddr_storage ss;

 struct sockaddr_in6 in6;

 struct sockaddr_in in;

 struct sockaddr_un un;

 struct sockaddr sa;
} ACL_SOCKADDR;
# 36 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_sane_inet.h"
 size_t acl_inet_ntop(const struct sockaddr *sa, char *buf, size_t size);
# 47 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_sane_inet.h"
 size_t acl_inet_pton(int af, const char *src, struct sockaddr *dst);
# 58 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_sane_inet.h"
 size_t acl_sane_pton(const char *src, struct sockaddr *dst);
# 67 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_sane_inet.h"
 const char *acl_inet_ntop4(const unsigned char *src, char *dst, size_t size);
# 76 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_sane_inet.h"
 const char *acl_inet_ntoa(const struct in_addr in, char *dst, size_t size);


 const char *acl_inet6_ntoa(const struct in6_addr in6, char *buf, size_t size);







 int acl_is_ip(const char *ip);
 int acl_is_ipv4(const char *ip);
 int acl_is_ipv6(const char *ip);






 int acl_ipv4_addr_valid(const char *addr);


}
# 12 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_netdb.h" 2




typedef struct ACL_HOSTNAME ACL_HOST_INFO;
typedef struct ACL_HOSTNAME {
 char ip[256];
 ACL_SOCKADDR saddr;
 unsigned int ttl;
 int priority;
 int hport;
 unsigned int nrefer;
 unsigned int type;







} ACL_HOSTNAME;




typedef struct ACL_DNS_DB {
 ACL_ARRAY *h_db;
 int size;
 char name[256];
 const ACL_HOSTNAME *refer;
 ACL_SOCKADDR ns_addr;




 const ACL_HOSTNAME *(*iter_head)(ACL_ITER*, struct ACL_DNS_DB*);

 const ACL_HOSTNAME *(*iter_next)(ACL_ITER*, struct ACL_DNS_DB*);

 const ACL_HOSTNAME *(*iter_tail)(ACL_ITER*, struct ACL_DNS_DB*);

 const ACL_HOSTNAME *(*iter_prev)(ACL_ITER*, struct ACL_DNS_DB*);

 const ACL_HOSTNAME *(*iter_info)(ACL_ITER*, struct ACL_DNS_DB*);
} ACL_DNS_DB;
# 66 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_netdb.h"
 const ACL_HOSTNAME *acl_netdb_index(const ACL_DNS_DB *h_dns_db, int i);







 const ACL_SOCKADDR *acl_netdb_index_saddr(ACL_DNS_DB *h_dns_db, int i);







 void acl_netdb_refer_oper(ACL_DNS_DB *h_dns_db, int i, int n);






 void acl_netdb_refer(ACL_DNS_DB *h_dns_db, int i);






 void acl_netdb_unrefer(ACL_DNS_DB *h_dns_db, int i);







 const char *acl_netdb_index_ip(const ACL_DNS_DB *h_dns_db, int i);






 int acl_netdb_size(const ACL_DNS_DB *h_dns_db);





 void acl_netdb_free(ACL_DNS_DB *h_dns_db);






 ACL_DNS_DB *acl_netdb_new(const char *domain);






 void acl_netdb_set_ns(ACL_DNS_DB *db, ACL_SOCKADDR *sa);






 void acl_netdb_addip(ACL_DNS_DB *h_dns_db, const char *ip);







 void acl_netdb_add_addr(ACL_DNS_DB *h_dns_db, const char *ip, int port);






 ACL_DNS_DB *acl_netdb_clone(const ACL_DNS_DB *h_dns_db);
# 162 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_netdb.h"
 ACL_DNS_DB *acl_gethostbyname(const char *name, int *h_error);
# 175 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_netdb.h"
 ACL_DNS_DB *acl_gethostbyname2(const char *name, int socktype,
  int family, int *h_error);






 const char *acl_netdb_strerror(int errnum);
# 192 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_netdb.h"
 void acl_netdb_cache_push(const ACL_DNS_DB *h_dns_db, int timeout);






 ACL_DNS_DB *acl_netdb_cache_lookup(const char *name);





 void acl_netdb_cache_del_host(const char *name);







 void acl_netdb_cache_init(int timeout, int thread_safe);
# 10 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_net.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_sane_socket.h" 1




extern "C" {
# 24 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_sane_socket.h"
 int acl_getpeername(int fd, char *buf, size_t bsize);
# 33 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_sane_socket.h"
 int acl_getsockname(int fd, char *buf, size_t bsize);







 int acl_getsocktype(int fd);







 int acl_getsockfamily(int fd);






 int acl_check_socket(int fd);






 int acl_is_listening_socket(int fd);


}
# 11 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_net.h" 2

# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_tcp_ctl.h" 1




extern "C" {
# 18 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_tcp_ctl.h"
 void acl_tcp_set_rcvbuf(int fd, int size);






 void acl_tcp_set_sndbuf(int fd, int size);






 int acl_tcp_get_rcvbuf(int fd);






 int acl_tcp_get_sndbuf(int fd);





 void acl_tcp_set_nodelay(int fd);






 void acl_tcp_nodelay(int fd, int onoff);






 int acl_get_tcp_nodelay(int fd);







 void acl_tcp_so_linger(int fd, int onoff, int timeout);
# 76 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_tcp_ctl.h"
 int acl_get_tcp_solinger(int fd);
# 85 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_tcp_ctl.h"
 void acl_tcp_defer_accept(int fd, int timeout);






 void acl_tcp_fastopen(int fd, int on);


}
# 13 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_net.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_listen.h" 1




extern "C" {





# 1 "/usr/include/netdb.h" 1 3 4
# 32 "/usr/include/netdb.h" 3 4
# 1 "/usr/include/rpc/netdb.h" 1 3 4
# 42 "/usr/include/rpc/netdb.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 43 "/usr/include/rpc/netdb.h" 2 3 4


# 44 "/usr/include/rpc/netdb.h" 3 4
extern "C" {

struct rpcent
{
  char *r_name;
  char **r_aliases;
  int r_number;
};

extern void setrpcent (int __stayopen) throw ();
extern void endrpcent (void) throw ();
extern struct rpcent *getrpcbyname (const char *__name) throw ();
extern struct rpcent *getrpcbynumber (int __number) throw ();
extern struct rpcent *getrpcent (void) throw ();


extern int getrpcbyname_r (const char *__name, struct rpcent *__result_buf,
      char *__buffer, size_t __buflen,
      struct rpcent **__result) throw ();

extern int getrpcbynumber_r (int __number, struct rpcent *__result_buf,
        char *__buffer, size_t __buflen,
        struct rpcent **__result) throw ();

extern int getrpcent_r (struct rpcent *__result_buf, char *__buffer,
   size_t __buflen, struct rpcent **__result) throw ();


}
# 33 "/usr/include/netdb.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h" 3 4
union sigval
{
  int sival_int;
  void *sival_ptr;
};

typedef union sigval __sigval_t;
# 7 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 2 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 3 4
typedef struct sigevent
  {
    __sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 4)];



 __pid_t _tid;

 struct
   {
     void (*_function) (__sigval_t);
     pthread_attr_t *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;
# 37 "/usr/include/netdb.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/netdb.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/netdb.h" 3 4
struct netent
{
  char *n_name;
  char **n_aliases;
  int n_addrtype;
  uint32_t n_net;
};
# 41 "/usr/include/netdb.h" 2 3 4
# 51 "/usr/include/netdb.h" 3 4
extern "C" {







extern int *__h_errno_location (void) throw () __attribute__ ((__const__));
# 90 "/usr/include/netdb.h" 3 4
extern void herror (const char *__str) throw ();


extern const char *hstrerror (int __err_num) throw ();




struct hostent
{
  char *h_name;
  char **h_aliases;
  int h_addrtype;
  int h_length;
  char **h_addr_list;



};






extern void sethostent (int __stay_open);





extern void endhostent (void);






extern struct hostent *gethostent (void);






extern struct hostent *gethostbyaddr (const void *__addr, __socklen_t __len,
          int __type);





extern struct hostent *gethostbyname (const char *__name);
# 153 "/usr/include/netdb.h" 3 4
extern struct hostent *gethostbyname2 (const char *__name, int __af);
# 165 "/usr/include/netdb.h" 3 4
extern int gethostent_r (struct hostent *__restrict __result_buf,
    char *__restrict __buf, size_t __buflen,
    struct hostent **__restrict __result,
    int *__restrict __h_errnop);

extern int gethostbyaddr_r (const void *__restrict __addr, __socklen_t __len,
       int __type,
       struct hostent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct hostent **__restrict __result,
       int *__restrict __h_errnop);

extern int gethostbyname_r (const char *__restrict __name,
       struct hostent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct hostent **__restrict __result,
       int *__restrict __h_errnop);

extern int gethostbyname2_r (const char *__restrict __name, int __af,
        struct hostent *__restrict __result_buf,
        char *__restrict __buf, size_t __buflen,
        struct hostent **__restrict __result,
        int *__restrict __h_errnop);
# 196 "/usr/include/netdb.h" 3 4
extern void setnetent (int __stay_open);





extern void endnetent (void);






extern struct netent *getnetent (void);






extern struct netent *getnetbyaddr (uint32_t __net, int __type);





extern struct netent *getnetbyname (const char *__name);
# 235 "/usr/include/netdb.h" 3 4
extern int getnetent_r (struct netent *__restrict __result_buf,
   char *__restrict __buf, size_t __buflen,
   struct netent **__restrict __result,
   int *__restrict __h_errnop);

extern int getnetbyaddr_r (uint32_t __net, int __type,
      struct netent *__restrict __result_buf,
      char *__restrict __buf, size_t __buflen,
      struct netent **__restrict __result,
      int *__restrict __h_errnop);

extern int getnetbyname_r (const char *__restrict __name,
      struct netent *__restrict __result_buf,
      char *__restrict __buf, size_t __buflen,
      struct netent **__restrict __result,
      int *__restrict __h_errnop);




struct servent
{
  char *s_name;
  char **s_aliases;
  int s_port;
  char *s_proto;
};






extern void setservent (int __stay_open);





extern void endservent (void);






extern struct servent *getservent (void);






extern struct servent *getservbyname (const char *__name, const char *__proto);






extern struct servent *getservbyport (int __port, const char *__proto);
# 306 "/usr/include/netdb.h" 3 4
extern int getservent_r (struct servent *__restrict __result_buf,
    char *__restrict __buf, size_t __buflen,
    struct servent **__restrict __result);

extern int getservbyname_r (const char *__restrict __name,
       const char *__restrict __proto,
       struct servent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct servent **__restrict __result);

extern int getservbyport_r (int __port, const char *__restrict __proto,
       struct servent *__restrict __result_buf,
       char *__restrict __buf, size_t __buflen,
       struct servent **__restrict __result);




struct protoent
{
  char *p_name;
  char **p_aliases;
  int p_proto;
};






extern void setprotoent (int __stay_open);





extern void endprotoent (void);






extern struct protoent *getprotoent (void);





extern struct protoent *getprotobyname (const char *__name);





extern struct protoent *getprotobynumber (int __proto);
# 372 "/usr/include/netdb.h" 3 4
extern int getprotoent_r (struct protoent *__restrict __result_buf,
     char *__restrict __buf, size_t __buflen,
     struct protoent **__restrict __result);

extern int getprotobyname_r (const char *__restrict __name,
        struct protoent *__restrict __result_buf,
        char *__restrict __buf, size_t __buflen,
        struct protoent **__restrict __result);

extern int getprotobynumber_r (int __proto,
          struct protoent *__restrict __result_buf,
          char *__restrict __buf, size_t __buflen,
          struct protoent **__restrict __result);
# 393 "/usr/include/netdb.h" 3 4
extern int setnetgrent (const char *__netgroup);







extern void endnetgrent (void);
# 410 "/usr/include/netdb.h" 3 4
extern int getnetgrent (char **__restrict __hostp,
   char **__restrict __userp,
   char **__restrict __domainp);
# 421 "/usr/include/netdb.h" 3 4
extern int innetgr (const char *__netgroup, const char *__host,
      const char *__user, const char *__domain);







extern int getnetgrent_r (char **__restrict __hostp,
     char **__restrict __userp,
     char **__restrict __domainp,
     char *__restrict __buffer, size_t __buflen);
# 449 "/usr/include/netdb.h" 3 4
extern int rcmd (char **__restrict __ahost, unsigned short int __rport,
   const char *__restrict __locuser,
   const char *__restrict __remuser,
   const char *__restrict __cmd, int *__restrict __fd2p);
# 461 "/usr/include/netdb.h" 3 4
extern int rcmd_af (char **__restrict __ahost, unsigned short int __rport,
      const char *__restrict __locuser,
      const char *__restrict __remuser,
      const char *__restrict __cmd, int *__restrict __fd2p,
      sa_family_t __af);
# 477 "/usr/include/netdb.h" 3 4
extern int rexec (char **__restrict __ahost, int __rport,
    const char *__restrict __name,
    const char *__restrict __pass,
    const char *__restrict __cmd, int *__restrict __fd2p);
# 489 "/usr/include/netdb.h" 3 4
extern int rexec_af (char **__restrict __ahost, int __rport,
       const char *__restrict __name,
       const char *__restrict __pass,
       const char *__restrict __cmd, int *__restrict __fd2p,
       sa_family_t __af);
# 503 "/usr/include/netdb.h" 3 4
extern int ruserok (const char *__rhost, int __suser,
      const char *__remuser, const char *__locuser);
# 513 "/usr/include/netdb.h" 3 4
extern int ruserok_af (const char *__rhost, int __suser,
         const char *__remuser, const char *__locuser,
         sa_family_t __af);
# 526 "/usr/include/netdb.h" 3 4
extern int iruserok (uint32_t __raddr, int __suser,
       const char *__remuser, const char *__locuser);
# 537 "/usr/include/netdb.h" 3 4
extern int iruserok_af (const void *__raddr, int __suser,
   const char *__remuser, const char *__locuser,
   sa_family_t __af);
# 549 "/usr/include/netdb.h" 3 4
extern int rresvport (int *__alport);
# 558 "/usr/include/netdb.h" 3 4
extern int rresvport_af (int *__alport, sa_family_t __af);






struct addrinfo
{
  int ai_flags;
  int ai_family;
  int ai_socktype;
  int ai_protocol;
  socklen_t ai_addrlen;
  struct sockaddr *ai_addr;
  char *ai_canonname;
  struct addrinfo *ai_next;
};



struct gaicb
{
  const char *ar_name;
  const char *ar_service;
  const struct addrinfo *ar_request;
  struct addrinfo *ar_result;

  int __return;
  int __glibc_reserved[5];
};
# 660 "/usr/include/netdb.h" 3 4
extern int getaddrinfo (const char *__restrict __name,
   const char *__restrict __service,
   const struct addrinfo *__restrict __req,
   struct addrinfo **__restrict __pai);


extern void freeaddrinfo (struct addrinfo *__ai) throw ();


extern const char *gai_strerror (int __ecode) throw ();





extern int getnameinfo (const struct sockaddr *__restrict __sa,
   socklen_t __salen, char *__restrict __host,
   socklen_t __hostlen, char *__restrict __serv,
   socklen_t __servlen, int __flags);
# 690 "/usr/include/netdb.h" 3 4
extern int getaddrinfo_a (int __mode, struct gaicb *__list[],
     int __ent, struct sigevent *__restrict __sig);
# 701 "/usr/include/netdb.h" 3 4
extern int gai_suspend (const struct gaicb *const __list[], int __ent,
   const struct timespec *__timeout);


extern int gai_error (struct gaicb *__req) throw ();


extern int gai_cancel (struct gaicb *__gaicbp) throw ();


}
# 12 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_listen.h" 2
# 27 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_listen.h"
 
# 27 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_listen.h"
       int acl_sane_accept(int sock, struct sockaddr * sa,
  socklen_t *len);
# 40 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_listen.h"
 int acl_accept(int sock, char *buf, size_t size,
  int* sock_type);
# 55 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_listen.h"
 int acl_inet_listen(const char *addr, int backlog, unsigned flag);







 int acl_inet_accept(int listen_fd);
# 72 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_listen.h"
 int acl_inet_accept_ex(int listen_fd, char *ipbuf,
  size_t size);
# 83 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_listen.h"
 int acl_inet_bind(const struct addrinfo *res, unsigned flag);
# 94 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_listen.h"
 int acl_sane_bind(const char *addr, unsigned flag,
 int socktype, int *family);
# 106 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_listen.h"
 int acl_unix_dgram_bind(const char *addr, unsigned flag);
# 119 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_listen.h"
 int acl_udp_bind3(const char *addr, unsigned flag, int *family);
 int acl_udp_bind(const char *addr, unsigned flag);
# 132 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_listen.h"
 int acl_unix_listen(const char *addr, int backlog, unsigned flag);






 int acl_unix_accept(int fd);



 int acl_fifo_listen(const char *path, int permissions, int mode);
# 157 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_listen.h"
typedef int (*acl_accept_fn)(int, struct sockaddr*, socklen_t*);


 void acl_set_accept(acl_accept_fn fn);


}
# 14 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_net.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_vstream_net.h" 1




extern "C" {



# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../stdlib/acl_vstream.h" 1
# 10 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_vstream_net.h" 2
# 22 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_vstream_net.h"
 ACL_VSTREAM *acl_vstream_listen_ex(const char *addr, int qlen,
  unsigned flag, int io_bufsize, int rw_timeout);
# 33 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_vstream_net.h"
 ACL_VSTREAM *acl_vstream_listen(const char *addr, int qlen);
# 44 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_vstream_net.h"
 ACL_VSTREAM *acl_vstream_accept_ex(ACL_VSTREAM *listen_stream,
  ACL_VSTREAM *client_stream, char *ipbuf, int bsize);
# 54 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_vstream_net.h"
 ACL_VSTREAM *acl_vstream_accept(ACL_VSTREAM *listen_stream,
  char *ipbuf, int bsize);
# 73 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_vstream_net.h"
 ACL_VSTREAM *acl_vstream_connect_ex(const char *addr, int block_mode,
 int conn_timeout, int rw_timeout, int bufsize, int *error);
# 85 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_vstream_net.h"
 ACL_VSTREAM *acl_vstream_connect(const char *addr, int block_mode,
 int connect_timeout, int rw_timeout, int rw_bufsize);
# 98 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_vstream_net.h"
 ACL_VSTREAM *acl_vstream_timed_connect(const char *addr, int block_mode,
 int connect_timeout, int rw_timeout, int rw_bufsize, int *error);
# 112 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_vstream_net.h"
 ACL_VSTREAM *acl_vstream_bind(const char *addr, int rw_timeout, unsigned flag);





 void acl_vstream_set_udp_io(ACL_VSTREAM *stream);


}
# 15 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_net.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_res.h" 1




extern "C" {
# 20 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_res.h"
typedef struct ACL_RES {
 char dns_ip[64];
 unsigned short dns_port;
 unsigned short cur_qid;
 time_t tm_spent;
 int errnum;






 int transfer;



 int conn_timeout;
 int rw_timeout;
} ACL_RES;







 ACL_RES *acl_res_new(const char *dns_ip, unsigned short dns_port);






 void acl_res_set_timeout(int conn_timeout, int rw_timeout);





 void acl_res_free(ACL_RES *res);







 ACL_DNS_DB *acl_res_lookup(ACL_RES *res, const char *domain);


 ACL_DNS_DB *acl_res_lookup6(ACL_RES *res, const char *domain);







 const char *acl_res_strerror(int errnum);






 const char *acl_res_errmsg(const ACL_RES *res);


}
# 16 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_net.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_dns.h" 1




extern "C" {



# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../stdlib/acl_htable.h" 1
# 10 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_dns.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../stdlib/acl_cache2.h" 1
# 11 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_dns.h" 2




# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../event/acl_events.h" 1




extern "C" {


# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../event/../stdlib/acl_define.h" 1
# 9 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../event/acl_events.h" 2

# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../event/../stdlib/acl_vstream.h" 1
# 11 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../event/acl_events.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../event/acl_timer.h" 1





# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../event/../stdlib/acl_iterator.h" 1
# 7 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../event/acl_timer.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../event/../stdlib/acl_ring.h" 1
# 8 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../event/acl_timer.h" 2


extern "C" {





typedef struct ACL_TIMER_INFO {

 void *obj;
 long long int when;


 ACL_RING entry;
} ACL_TIMER_INFO;


typedef struct ACL_TIMER ACL_TIMER;

struct ACL_TIMER {
        long long int (*request)(ACL_TIMER *timer, void *obj, long long int delay);
        long long int (*cancel)(ACL_TIMER *timer, void *obj);
        void* (*popup)(ACL_TIMER* timer);

        ACL_RING timer_header;
        long long int present;
        long long int time_left;




 const void *(*iter_head)(ACL_ITER*, struct ACL_TIMER*);

 const void *(*iter_next)(ACL_ITER*, struct ACL_TIMER*);

 const void *(*iter_tail)(ACL_ITER*, struct ACL_TIMER*);

 const void *(*iter_prev)(ACL_ITER*, struct ACL_TIMER*);


 const ACL_TIMER_INFO *(*iter_info)(ACL_ITER*, struct ACL_TIMER*);
};
# 59 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../event/acl_timer.h"
 long long int acl_timer_request(ACL_TIMER* timer, void *obj, long long int delay);







 long long int acl_timer_cancel(ACL_TIMER* timer, void *obj);






 void *acl_timer_popup(ACL_TIMER* timer);






 long long int acl_timer_left(ACL_TIMER* timer);







 void acl_timer_walk(ACL_TIMER *timer, void (*action)(ACL_TIMER_INFO *, void *), void *arg);





 ACL_TIMER *acl_timer_new(void);






 void acl_timer_free(ACL_TIMER* timer, void (*free_fn)(void*));






 int acl_timer_size(ACL_TIMER *timer);


}
# 12 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../event/acl_events.h" 2
# 43 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../event/acl_events.h"
typedef struct ACL_EVENT ACL_EVENT;
typedef struct ACL_EVENT_FDTABLE ACL_EVENT_FDTABLE;
# 54 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../event/acl_events.h"
typedef void (*ACL_EVENT_NOTIFY_RDWR)(int event_type, ACL_EVENT *event,
  ACL_VSTREAM *stream, void *context);
typedef void (*ACL_EVENT_NOTIFY_TIME)(int event_type, ACL_EVENT *event,
  void *context);
# 73 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../event/acl_events.h"
 ACL_EVENT *acl_event_new(int event_mode, int use_thr,
 int delay_sec, int delay_usec);







 ACL_EVENT *acl_event_new_select(int delay_sec, int delay_usec);







 ACL_EVENT *acl_event_new_select_thr(int delay_sec, int delay_usec);







 ACL_EVENT *acl_event_new_poll(int delay_sec, int delay_usec);







 ACL_EVENT *acl_event_new_poll_thr(int delay_sec, int delay_usec);







 ACL_EVENT *acl_event_new_kernel(int delay_sec, int delay_usec);







 ACL_EVENT *acl_event_new_kernel_thr(int delay_sec, int delay_usec);







 ACL_EVENT *acl_event_new_wmsg(unsigned int nMsg);
# 141 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../event/acl_events.h"
 void acl_event_add_dog(ACL_EVENT *eventp);
# 150 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../event/acl_events.h"
 void acl_event_set_fire_hook(ACL_EVENT *eventp,
  void (*fire_begin)(ACL_EVENT*, void*),
  void (*fire_end)(ACL_EVENT*, void*),
  void* ctx);






 void acl_event_set_check_inter(ACL_EVENT *eventp, int n);





 void acl_event_free(ACL_EVENT *eventp);






 long long int acl_event_time(ACL_EVENT *eventp);





 void acl_event_drain(ACL_EVENT *eventp);
# 189 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../event/acl_events.h"
 void acl_event_enable_read(ACL_EVENT *eventp, ACL_VSTREAM *stream,
 int read_timeout, ACL_EVENT_NOTIFY_RDWR callback, void *context);
# 200 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../event/acl_events.h"
 void acl_event_enable_write(ACL_EVENT *eventp, ACL_VSTREAM *stream,
 int write_timeout, ACL_EVENT_NOTIFY_RDWR callback, void *context);
# 211 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../event/acl_events.h"
 void acl_event_enable_listen(ACL_EVENT *eventp, ACL_VSTREAM *stream,
 int read_timeout, ACL_EVENT_NOTIFY_RDWR callback, void *context);






 void acl_event_disable_read(ACL_EVENT *eventp, ACL_VSTREAM *stream);






 void acl_event_disable_write(ACL_EVENT *eventp, ACL_VSTREAM *stream);






 void acl_event_disable_readwrite(ACL_EVENT *eventp, ACL_VSTREAM *stream);






 int acl_event_isset(ACL_EVENT *eventp, ACL_VSTREAM *stream);






 int acl_event_isrset(ACL_EVENT *eventp, ACL_VSTREAM *stream);






 int acl_event_iswset(ACL_EVENT *eventp, ACL_VSTREAM *stream);






 int acl_event_isxset(ACL_EVENT *eventp, ACL_VSTREAM *stream);
# 273 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../event/acl_events.h"
 long long int acl_event_request_timer(ACL_EVENT *eventp,
 ACL_EVENT_NOTIFY_TIME callback, void *context, long long int delay, int keep);
# 283 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../event/acl_events.h"
 long long int acl_event_cancel_timer(ACL_EVENT *eventp,
 ACL_EVENT_NOTIFY_TIME callback, void *context);
# 294 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../event/acl_events.h"
 void acl_event_keep_timer(ACL_EVENT *eventp, ACL_EVENT_NOTIFY_TIME callback,
 void *context, int onoff);
# 304 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../event/acl_events.h"
 int acl_event_timer_ifkeep(ACL_EVENT *eventp, ACL_EVENT_NOTIFY_TIME callback,
 void *context);





 void acl_event_loop(ACL_EVENT *eventp);






 void acl_event_set_delay_sec(ACL_EVENT *eventp, int sec);






 void acl_event_set_delay_usec(ACL_EVENT *eventp, int usec);






 int acl_event_get_delay_sec(ACL_EVENT *eventp);






 int acl_event_get_delay_usec(ACL_EVENT *eventp);






 int acl_event_use_thread(ACL_EVENT *eventp);






 int acl_event_mode(ACL_EVENT *eventp);






 int acl_event_last_nready(ACL_EVENT *eventp);


}
# 16 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_dns.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h" 1
# 13 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h"
extern "C" {


# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/../stdlib/acl_define.h" 1
# 17 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h" 2





# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/../stdlib/acl_stdlib.h" 1
# 23 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/../event/acl_events.h" 1
# 24 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/../net/acl_netdb.h" 1
# 25 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h" 2






typedef struct ACL_AIO ACL_AIO;




typedef struct ACL_ASTREAM ACL_ASTREAM;
# 48 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h"
typedef int (*ACL_AIO_READ_FN)(ACL_ASTREAM *astream,
 void *context, char *data, int dlen);







typedef int (*ACL_AIO_NOTIFY_FN)(ACL_ASTREAM *astream, void *context);
# 67 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h"
typedef int (*ACL_AIO_WRITE_FN)(ACL_ASTREAM *astream, void *context);
# 77 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h"
typedef int (*ACL_AIO_ACCEPT_FN)(ACL_ASTREAM *cstream, void *context);
# 87 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h"
typedef int (*ACL_AIO_LISTEN_FN)(ACL_ASTREAM *sstream, void *context);
# 96 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h"
typedef int (*ACL_AIO_CONNECT_FN)(ACL_ASTREAM *cstream, void *context);

typedef struct ACL_ASTREAM_CTX ACL_ASTREAM_CTX;

 int acl_astream_get_status(const ACL_ASTREAM_CTX *ctx);






 const ACL_SOCKADDR *acl_astream_get_ns_addr(const ACL_ASTREAM_CTX *ctx);
 const ACL_SOCKADDR *acl_astream_get_serv_addr(const ACL_ASTREAM_CTX *ctx);
 ACL_ASTREAM *acl_astream_get_conn(const ACL_ASTREAM_CTX *ctx);
 void *acl_astream_get_ctx(const ACL_ASTREAM_CTX *ctx);






typedef int (*ACL_AIO_CONNECT_ADDR_FN)(const ACL_ASTREAM_CTX *ctx);
# 126 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h"
typedef int (*ACL_AIO_TIMEO_FN)(ACL_ASTREAM *astream, void *context);







typedef int (*ACL_AIO_CLOSE_FN)(ACL_ASTREAM *astream, void *context);



struct ACL_ASTREAM {
 ACL_AIO *aio;
 ACL_VSTREAM *stream;

 ACL_VSTRING strbuf;
 int timeout;
 int nrefer;
 int flag;







 ACL_FIFO write_fifo;
 int write_left;
 int write_offset;
 int write_nested;
 int write_nested_limit;

 int (*read_ready_fn) (ACL_VSTREAM *, ACL_VSTRING *, int *);
 int read_nested;
 int read_nested_limit;
 int count;
 int keep_read;
 int accept_nloop;
 int error;
 int line_length;

 ACL_AIO_ACCEPT_FN accept_fn;
 ACL_AIO_LISTEN_FN listen_fn;
 void *context;

 ACL_AIO_NOTIFY_FN can_read_fn;
 void *can_read_ctx;
 ACL_AIO_NOTIFY_FN can_write_fn;
 void *can_write_ctx;

 ACL_ARRAY *read_handles;
 ACL_ARRAY *write_handles;
 ACL_ARRAY *close_handles;
 ACL_ARRAY *timeo_handles;
 ACL_ARRAY *connect_handles;
 ACL_FIFO reader_fifo;
 ACL_FIFO writer_fifo;


 void (*event_read_callback)(int event_type, ACL_ASTREAM *astream);
};
# 213 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h"
 ACL_AIO *acl_aio_create(int event_mode);
# 223 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h"
 ACL_AIO *acl_aio_create2(int event_mode, unsigned int nMsg);






 ACL_AIO *acl_aio_create3(ACL_EVENT *event);







 void *acl_aio_dns(ACL_AIO *aio);
# 249 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h"
 int acl_aio_set_dns(ACL_AIO *aio, const char *dns_list, int timeout);






 void acl_aio_del_dns(ACL_AIO *aio, const char *dns_list);





 void acl_aio_clear_dns(ACL_AIO *aio);





 void acl_aio_free(ACL_AIO *aio);






 void acl_aio_free2(ACL_AIO *aio, int keep);





 void acl_aio_loop(ACL_AIO *aio);






 int acl_aio_last_nready(ACL_AIO *aio);






 void acl_aio_check(ACL_AIO *aio);






 ACL_EVENT *acl_aio_event(ACL_AIO *aio);






 int acl_aio_event_mode(ACL_AIO *aio);






 int acl_aio_get_keep_read(ACL_AIO *aio);






 void acl_aio_set_keep_read(ACL_AIO *aio, int onoff);






 int acl_aio_get_delay_sec(ACL_AIO *aio);






 int acl_aio_get_delay_usec(ACL_AIO *aio);







 void acl_aio_set_delay_sec(ACL_AIO *aio, int delay_sec);







 void acl_aio_set_delay_usec(ACL_AIO *aio, int delay_usec);






 void acl_aio_set_check_inter(ACL_AIO *aio, int check_inter);






 void acl_aio_set_rbuf_size(ACL_AIO *aio, int rbuf_size);






 void acl_aio_set_accept_nloop(ACL_ASTREAM *astream, int nloop);






 ACL_AIO *acl_aio_handle(ACL_ASTREAM *stream);






 void acl_aio_set_ctx(ACL_ASTREAM *stream, void *ctx);






 void *acl_aio_get_ctx(ACL_ASTREAM *stream);
# 404 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h"
 ACL_ASTREAM *acl_aio_open(ACL_AIO *aio, ACL_VSTREAM *stream);





 void acl_aio_iocp_close(ACL_ASTREAM *astream);
# 419 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h"
 void acl_aio_flush_on_close(ACL_ASTREAM *astream, int yes);






 ACL_VSTREAM *acl_aio_cancel(ACL_ASTREAM *astream);
# 435 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h"
 int acl_aio_get_accept_max(ACL_ASTREAM *astream);







 void acl_aio_set_accept_max(ACL_ASTREAM *astream, int accept_max);







 void acl_aio_add_read_hook(ACL_ASTREAM *astream,
 ACL_AIO_READ_FN callback, void *ctx);







 void acl_aio_add_write_hook(ACL_ASTREAM *astream,
 ACL_AIO_WRITE_FN callback, void *ctx);







 void acl_aio_add_close_hook(ACL_ASTREAM *astream,
 ACL_AIO_CLOSE_FN callback, void *ctx);







 void acl_aio_add_timeo_hook(ACL_ASTREAM *astream,
 ACL_AIO_TIMEO_FN callback, void *ctx);







 void acl_aio_add_connect_hook(ACL_ASTREAM *astream,
 ACL_AIO_CONNECT_FN callback, void *ctx);







 void acl_aio_del_read_hook(ACL_ASTREAM *astream,
 ACL_AIO_READ_FN callback, void *ctx);







 void acl_aio_del_write_hook(ACL_ASTREAM *astream,
 ACL_AIO_WRITE_FN callback, void *ctx);







 void acl_aio_del_close_hook(ACL_ASTREAM *astream,
 ACL_AIO_CLOSE_FN callback, void *ctx);







 void acl_aio_del_timeo_hook(ACL_ASTREAM *astream,
 ACL_AIO_TIMEO_FN callback, void *ctx);







 void acl_aio_del_connect_hook(ACL_ASTREAM *astream,
 ACL_AIO_CONNECT_FN callback, void *ctx);





 void acl_aio_clean_read_hooks(ACL_ASTREAM *astream);





 void acl_aio_clean_write_hooks(ACL_ASTREAM *astream);





 void acl_aio_clean_close_hooks(ACL_ASTREAM *astream);





 void acl_aio_clean_timeo_hooks(ACL_ASTREAM *astream);





 void acl_aio_clean_connect_hooks(ACL_ASTREAM *astream);





 void acl_aio_clean_hooks(ACL_ASTREAM *astream);
# 578 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h"
 void acl_aio_ctl(ACL_ASTREAM *astream, int name, ...);
# 605 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h"
 ACL_VSTREAM *acl_aio_vstream(ACL_ASTREAM *astream);
# 619 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h"
 void acl_aio_gets(ACL_ASTREAM *astream);
# 631 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h"
 void acl_aio_gets_nonl(ACL_ASTREAM *astream);







 void acl_aio_read(ACL_ASTREAM *astream);
# 649 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h"
 void acl_aio_readn(ACL_ASTREAM *astream, int count);







 ACL_VSTRING *acl_aio_gets_peek(ACL_ASTREAM *astream);
# 667 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h"
 ACL_VSTRING *acl_aio_gets_nonl_peek(ACL_ASTREAM *astream);
# 676 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h"
 ACL_VSTRING *acl_aio_read_peek(ACL_ASTREAM *astream, int *count);
# 686 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h"
 ACL_VSTRING *acl_aio_readn_peek(ACL_ASTREAM *astream, int *count);







 void acl_aio_enable_read(ACL_ASTREAM *astream,
 ACL_AIO_NOTIFY_FN can_read_fn, void *context);







 int acl_aio_can_read(ACL_ASTREAM *astream);





 void acl_aio_disable_read(ACL_ASTREAM *astream);






 int acl_aio_isrset(ACL_ASTREAM *astream);







 void acl_aio_stream_set_line_length(ACL_ASTREAM *astream, int len);






 int acl_aio_stream_get_line_length(ACL_ASTREAM *astream);







 void acl_aio_stream_set_keep_read(ACL_ASTREAM *astream, int onoff);





 int acl_aio_stream_get_keep_read(ACL_ASTREAM *astream);
# 755 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h"
 void acl_aio_writen(ACL_ASTREAM *astream, const char *data, int dlen);
# 764 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h"
 void acl_aio_writev(ACL_ASTREAM *astream,
  const struct iovec *vector, int count);







 void acl_aio_vfprintf(ACL_ASTREAM *astream, const char *fmt, va_list ap);







 void __attribute__((__format__ (__printf__, (2), (3)))) acl_aio_fprintf(ACL_ASTREAM *astream, const char *fmt, ...);






 size_t acl_aio_send_pending(ACL_ASTREAM *astream);







 void acl_aio_enable_write(ACL_ASTREAM *astream,
 ACL_AIO_NOTIFY_FN can_write_fn, void *context);





 void acl_aio_disable_write(ACL_ASTREAM *astream);






 int acl_aio_iswset(ACL_ASTREAM *astream);







 void acl_aio_accept(ACL_ASTREAM *astream);






 void acl_aio_listen(ACL_ASTREAM *astream);
# 836 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h"
 ACL_ASTREAM *acl_aio_connect(ACL_AIO *aio, const char *addr, int timeout);
# 849 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h"
 int acl_aio_connect_addr(ACL_AIO *aio, const char *addr, int timeout,
  ACL_AIO_CONNECT_ADDR_FN callback, void *context);







 void acl_aio_disable_readwrite(ACL_ASTREAM *astream);






 int acl_aio_isset(ACL_ASTREAM *astream);






 int acl_aio_refer_value(ACL_ASTREAM * astream);





 void acl_aio_refer(ACL_ASTREAM *astream);





 void acl_aio_unrefer(ACL_ASTREAM *astream);
# 895 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h"
 long long int acl_aio_request_timer(ACL_AIO *aio,
  ACL_EVENT_NOTIFY_TIME timer_fn, void *context,
  long long int idle_limit, int keep);
# 906 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h"
 long long int acl_aio_cancel_timer(ACL_AIO *aio,
  ACL_EVENT_NOTIFY_TIME timer_fn, void *context);
# 916 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h"
 void acl_aio_keep_timer(ACL_AIO *aio, ACL_EVENT_NOTIFY_TIME timer_fn,
  void *context, int onoff);
# 926 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../aio/acl_aio.h"
 int acl_aio_timer_ifkeep(ACL_AIO *aio, ACL_EVENT_NOTIFY_TIME timer_fn,
  void *context);


}
# 17 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_dns.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_rfc1035.h" 1




extern "C" {



# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../stdlib/acl_argv.h" 1
# 10 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_rfc1035.h" 2
# 18 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_rfc1035.h"
typedef struct ACL_RFC1035_RR {
    char name[256];
    unsigned short type;
    unsigned short tclass;
    unsigned int ttl;
    unsigned short rdlength;
    char *rdata;
} ACL_RFC1035_RR;

typedef struct ACL_RFC1035_QUERY {
    char name[256];
    unsigned short qtype;
    unsigned short qclass;
} ACL_RFC1035_QUERY;

typedef struct ACL_RFC1035_MESSAGE {
    unsigned short id;
    unsigned int qr:1;
    unsigned int opcode:4;





    unsigned int aa:1;
    unsigned int tc:1;
    unsigned int rd:1;
    unsigned int ra:1;
    unsigned int z:3;
    unsigned int rcode:4;







    unsigned short qdcount;
    unsigned short ancount;
    unsigned short nscount;
    unsigned short arcount;
    ACL_RFC1035_QUERY *query;
    ACL_RFC1035_RR *answer;
    ACL_RFC1035_RR *authority;
    ACL_RFC1035_RR *additional;
} ACL_RFC1035_MESSAGE;






 const char *acl_rfc1035_strerror(int errnum);
# 87 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_rfc1035.h"
 size_t acl_rfc1035_build_query4a(const char *hostname, char *buf,
  size_t sz, unsigned short qid, ACL_RFC1035_QUERY *query);
# 100 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_rfc1035.h"
 size_t acl_rfc1035_build_query4aaaa(const char *hostname, char *buf,
  size_t sz, unsigned short qid, ACL_RFC1035_QUERY *query);
# 113 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_rfc1035.h"
 size_t acl_rfc1035_build_query4mx(const char *hostname, char *buf,
  size_t sz, unsigned short qid, ACL_RFC1035_QUERY *query);
# 129 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_rfc1035.h"
 size_t acl_rfc1035_build_query4ptr(const struct in_addr addr, char *buf,
  size_t sz, unsigned short qid, ACL_RFC1035_QUERY *query);
# 140 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_rfc1035.h"
 void acl_rfc1035_set_query_id(char *buf, size_t sz, unsigned short qid);







 int acl_rfc1035_query_compare(const ACL_RFC1035_QUERY *a,
  const ACL_RFC1035_QUERY *b);
# 159 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_rfc1035.h"
 ACL_RFC1035_MESSAGE *acl_rfc1035_response_unpack(const char *buf, size_t sz);
# 169 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_rfc1035.h"
 ACL_RFC1035_MESSAGE *acl_rfc1035_request_unpack(const char *buf, size_t sz);





 void acl_rfc1035_message_destroy(ACL_RFC1035_MESSAGE *message);
# 189 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_rfc1035.h"
 size_t acl_rfc1035_build_reply4a(const char *hostname, const ACL_ARGV *ips,
  const char *domain_root, const char *dnsname, const char *dnsip,
  unsigned short qid, char *buf, size_t sz);

 size_t acl_rfc1035_build_reply4aaaa(const char *hostname, const ACL_ARGV *ips,
  const char *domain_root, const char *dnsname, const char *dnsip,
  unsigned short qid, char *buf, size_t sz);

typedef struct ACL_RFC1035_REPLY {
 const char *hostname;
 const char *cname;
 const ACL_ARGV *ips;
 const char *domain_root;
 const char *dns_name;
 const char *dns_ip;
 int ip_type;
 int ttl;
 unsigned short qid;
} ACL_RFC1035_REPLY;

 size_t acl_rfc1035_build_reply(const ACL_RFC1035_REPLY *reply,
  char *buf, size_t sz);
# 240 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_rfc1035.h"
}
# 18 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_dns.h" 2
# 40 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_dns.h"
typedef struct ACL_DNS_ADDR {
 char ip[64];
 unsigned short port;
 ACL_SOCKADDR addr;
 int addr_len;
 int mask_length;
 struct in_addr in;
} ACL_DNS_ADDR;

typedef struct ACL_DNS {
 ACL_AIO *aio;
 unsigned short qid;
 ACL_ASTREAM *astream;

 ACL_ARRAY *groups;
 ACL_ARRAY *dns_list;
 unsigned dns_idx;
 ACL_DNS_ADDR addr_from;
 ACL_HTABLE *lookup_table;
 ACL_CACHE2 *dns_cache;
 int timeout;
 int retry_limit;
 unsigned int flag;





 ACL_EVENT_NOTIFY_TIME lookup_timeout;
} ACL_DNS;

typedef struct ACL_DNS_REQ ACL_DNS_REQ;
# 80 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_dns.h"
 int acl_dns_init(ACL_DNS *dns, ACL_AIO *aio, int timeout);







 ACL_DNS *acl_dns_create(ACL_AIO *aio, int timeout);






 void acl_dns_open_cache(ACL_DNS *dns, int limit);
# 104 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_dns.h"
 void acl_dns_add_dns(ACL_DNS *dns, const char *dns_ip,
 unsigned short dns_port, int mask_length);





 void acl_dns_clear_dns(ACL_DNS *dns);






 ACL_ARRAY *acl_dns_list(ACL_DNS *dns);






 size_t acl_dns_size(ACL_DNS *dns);






 int acl_dns_empty(ACL_DNS *dns);







 void acl_dns_del_dns(ACL_DNS *dns, const char *ip, unsigned short port);





 void acl_dns_close(ACL_DNS *dns);






 void acl_dns_check_dns_ip(ACL_DNS *dns);






 void acl_dns_check_dns_net(ACL_DNS *dns);






 void acl_dns_set_retry_limit(ACL_DNS *dns, int retry_limit);
# 178 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_dns.h"
 void acl_dns_lookup(ACL_DNS *dns, const char *domain,
 void (*callback)(ACL_DNS_DB*, void*, int, const ACL_RFC1035_MESSAGE*),
 void *ctx);
# 192 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_dns.h"
 void acl_dns_lookup2(ACL_DNS *dns, const char *domain, unsigned short type,
 void (*callback)(ACL_DNS_DB*, void*, int, const ACL_RFC1035_MESSAGE*),
 void *ctx);







 void acl_dns_add_host(ACL_DNS *dns, const char *domain, const char *ip_list);
# 214 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_dns.h"
 void acl_dns_add_group(ACL_DNS *dns, const char *group, const char *refer,
  const char *ip_list, const char *excepts);




 void acl_dns_cancel(ACL_DNS_REQ *handle);






 const char *acl_dns_serror(int errnum);


}
# 17 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_net.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_access.h" 1




extern "C" {


# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/../stdlib/acl_stdlib.h" 1
# 9 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_access.h" 2
# 18 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_access.h"
 int acl_access_add(const char *data, const char *sep1, const char *sep2);
# 27 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_access.h"
 int acl_access_cfg(ACL_XINETD_CFG_PARSER *xcp, const char *name);






 void acl_access_setup_logfn(void (*log_fn)(const char *fmt, ...));






 int acl_access_permit(const char *ip);




 void acl_access_debug(void);


}
# 18 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_net.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_mask_addr.h" 1




extern "C" {
# 17 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_mask_addr.h"
 void acl_mask_addr(unsigned char *addr_bytes,
  unsigned addr_byte_count, unsigned network_bits);


}
# 19 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_net.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_valid_hostname.h" 1




extern "C" {
# 17 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_valid_hostname.h"
 int acl_valid_hostname(const char *, int);
 int acl_valid_hostaddr(const char *, int);
 int acl_valid_ipv4_hostaddr(const char *, int);
 int acl_valid_ipv6_hostaddr(const char *, int);
 int acl_valid_unix(const char *);


}
# 20 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_net.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_host_port.h" 1




extern "C" {
# 17 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_host_port.h"
 const char *acl_host_port(char *buf, char **host,
 char *def_host, char **port, char *def_service);

 struct addrinfo *acl_host_addrinfo(const char *addr, int type);
 struct addrinfo *acl_host_addrinfo2(const char *addr, int type, int family);


}
# 21 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_net.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_ifconf.h" 1




extern "C" {






typedef struct ACL_IFADDR {
 char name[256];



 char addr[128];
 ACL_SOCKADDR saddr;
} ACL_IFADDR;

typedef struct ACL_IFCONF {
 ACL_IFADDR *addrs;
 int length;




 const ACL_IFADDR *(*iter_head)(ACL_ITER*, struct ACL_IFCONF*);

 const ACL_IFADDR *(*iter_next)(ACL_ITER*, struct ACL_IFCONF*);

 const ACL_IFADDR *(*iter_tail)(ACL_ITER*, struct ACL_IFCONF*);

 const ACL_IFADDR *(*iter_prev)(ACL_ITER*, struct ACL_IFCONF*);
} ACL_IFCONF;





 ACL_IFCONF *acl_get_ifaddrs(void);





 void acl_free_ifaddrs(ACL_IFCONF *ifconf);
# 57 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_ifconf.h"
 ACL_IFCONF *acl_ifconf_search(const char *pattern);


}
# 22 "/workspace/acl/lib_acl_cpp/../lib_acl/include/net/acl_net.h" 2



}
# 11 "/workspace/acl/lib_acl_cpp/../lib_acl/include/lib_acl.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/thread/acl_thread.h" 1
# 12 "/workspace/acl/lib_acl_cpp/../lib_acl/include/lib_acl.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/msg/acl_aqueue.h" 1



# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/msg/../stdlib/acl_define.h" 1
# 5 "/workspace/acl/lib_acl_cpp/../lib_acl/include/msg/acl_aqueue.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/msg/../thread/acl_thread.h" 1
# 6 "/workspace/acl/lib_acl_cpp/../lib_acl/include/msg/acl_aqueue.h" 2


extern "C" {
# 19 "/workspace/acl/lib_acl_cpp/../lib_acl/include/msg/acl_aqueue.h"
typedef struct ACL_AQUEUE_ITEM ACL_AQUEUE_ITEM;
typedef struct ACL_AQUEUE ACL_AQUEUE;

typedef void (*ACL_AQUEUE_FREE_FN)(void *);




 ACL_AQUEUE *acl_aqueue_new(void);






 void acl_aqueue_check_owner(ACL_AQUEUE *queue, char flag);






 void acl_aqueue_set_owner(ACL_AQUEUE *queue, unsigned int owner);







 void acl_aqueue_free(ACL_AQUEUE *queue, ACL_AQUEUE_FREE_FN free_fn);






 void *acl_aqueue_pop(ACL_AQUEUE *queue);
# 65 "/workspace/acl/lib_acl_cpp/../lib_acl/include/msg/acl_aqueue.h"
 void *acl_aqueue_pop_timedwait(ACL_AQUEUE *queue, int tmo_sec, int tmo_usec);







 int acl_aqueue_push(ACL_AQUEUE *queue, void *data);






 int acl_aqueue_last_error(const ACL_AQUEUE *queue);





 void acl_aqueue_set_quit(ACL_AQUEUE *queue);






 int acl_aqueue_qlen(ACL_AQUEUE* queue);


}
# 13 "/workspace/acl/lib_acl_cpp/../lib_acl/include/lib_acl.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/msg/acl_msgio.h" 1




extern "C" {



# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/msg/../stdlib/acl_vstring.h" 1
# 10 "/workspace/acl/lib_acl_cpp/../lib_acl/include/msg/acl_msgio.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/msg/../stdlib/acl_ring.h" 1
# 11 "/workspace/acl/lib_acl_cpp/../lib_acl/include/msg/acl_msgio.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/msg/../aio/acl_aio.h" 1
# 12 "/workspace/acl/lib_acl_cpp/../lib_acl/include/msg/acl_msgio.h" 2

typedef struct ACL_MSGIO ACL_MSGIO;
typedef struct ACL_MSGIO_INFO ACL_MSGIO_INFO;

typedef int (*ACL_MSGIO_NOTIFY_FN)(int msg_type, ACL_MSGIO *peer,
       const ACL_MSGIO_INFO *info, void *arg);
# 32 "/workspace/acl/lib_acl_cpp/../lib_acl/include/msg/acl_msgio.h"
struct ACL_MSGIO_INFO {
 struct {
  int type;
  int dlen;
 } hdr;
 struct {
  ACL_VSTRING *buf;
 } body;
};

 void acl_msgio_init(void);
 void acl_msgio_close(ACL_MSGIO *mio);
 void acl_msgio_reg(ACL_MSGIO *mio, int id,
 ACL_MSGIO_NOTIFY_FN callback, void *arg);
 void acl_msgio_listen_reg(ACL_MSGIO *mio, int id,
 ACL_MSGIO_NOTIFY_FN callback, void *arg, int inherit);
 void acl_msgio_unreg(ACL_MSGIO *mio, int id, ACL_MSGIO_NOTIFY_FN callback);
 void acl_msgio_unreg_id(ACL_MSGIO *mio, int id);
 void acl_msgio_unreg_all(ACL_MSGIO *mio);

 int acl_msgio_wait(ACL_MSGIO *mio);
 ACL_MSGIO *acl_msgio_listen(ACL_AIO *aio, const char *addr);
 ACL_MSGIO *acl_msgio_accept(ACL_MSGIO *listener);
 ACL_MSGIO *acl_msgio_connect(ACL_AIO *aio, const char *addr, int timeout);
 void acl_msgio_set_noblock(ACL_AIO *aio, ACL_MSGIO *mio);

 int acl_msgio_send(ACL_MSGIO *mio, int type, void *data, int dlen);


 void acl_msgio_addr(const ACL_MSGIO *mio, char *buf, size_t size);
 ACL_AIO *acl_msgio_aio(ACL_MSGIO *mio);
 ACL_VSTREAM *acl_msgio_vstream(ACL_MSGIO *mio);
 ACL_ASTREAM *acl_msgio_astream(ACL_MSGIO *mio);






}
# 14 "/workspace/acl/lib_acl_cpp/../lib_acl/include/lib_acl.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/event/acl_events.h" 1
# 15 "/workspace/acl/lib_acl_cpp/../lib_acl/include/lib_acl.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/ioctl/acl_ioctl.h" 1




extern "C" {


# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/ioctl/../stdlib/acl_define.h" 1
# 9 "/workspace/acl/lib_acl_cpp/../lib_acl/include/ioctl/acl_ioctl.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/ioctl/../event/acl_events.h" 1
# 10 "/workspace/acl/lib_acl_cpp/../lib_acl/include/ioctl/acl_ioctl.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/ioctl/../stdlib/acl_vstream.h" 1
# 11 "/workspace/acl/lib_acl_cpp/../lib_acl/include/ioctl/acl_ioctl.h" 2

typedef struct ACL_IOCTL ACL_IOCTL;
# 25 "/workspace/acl/lib_acl_cpp/../lib_acl/include/ioctl/acl_ioctl.h"
typedef void (*ACL_IOCTL_NOTIFY_FN)(int event_type, ACL_IOCTL *ioc,
 ACL_VSTREAM *stream, void *context);

typedef void (*ACL_IOCTL_WORKER_FN)(ACL_IOCTL *ioc, void *arg);
typedef void (*ACL_IOCTL_THREAD_INIT_FN)(void *);
typedef void (*ACL_IOCTL_THREAD_EXIT_FN)(void *);
# 41 "/workspace/acl/lib_acl_cpp/../lib_acl/include/ioctl/acl_ioctl.h"
 ACL_IOCTL *acl_ioctl_create(int max_threads, int idle_timeout);
# 53 "/workspace/acl/lib_acl_cpp/../lib_acl/include/ioctl/acl_ioctl.h"
 ACL_IOCTL *acl_ioctl_create_ex(int event_mode, int max_threads,
 int idle_timeout, int delay_sec, int delay_usec);






 void acl_ioctl_add_dog(ACL_IOCTL *ioc);







 void acl_ioctl_ctl(ACL_IOCTL *ioc, int name, ...);
# 85 "/workspace/acl/lib_acl_cpp/../lib_acl/include/ioctl/acl_ioctl.h"
 void acl_ioctl_free(ACL_IOCTL *ioc);






 int acl_ioctl_start(ACL_IOCTL *ioc);





 void acl_ioctl_loop(ACL_IOCTL *ioc);






 ACL_EVENT *acl_ioctl_event(ACL_IOCTL *ioc);






 void acl_ioctl_disable_readwrite(ACL_IOCTL *ioc, ACL_VSTREAM *stream);






 void acl_ioctl_disable_read(ACL_IOCTL *ioc, ACL_VSTREAM *stream);






 void acl_ioctl_disable_write(ACL_IOCTL *ioc, ACL_VSTREAM *stream);







 int acl_ioctl_isset(ACL_IOCTL *ioc, ACL_VSTREAM *stream);







 int acl_ioctl_isrset(ACL_IOCTL *ioc, ACL_VSTREAM *stream);







 int acl_ioctl_iswset(ACL_IOCTL *ioc, ACL_VSTREAM *stream);
# 160 "/workspace/acl/lib_acl_cpp/../lib_acl/include/ioctl/acl_ioctl.h"
 int acl_ioctl_iocp_close(ACL_IOCTL *ioc, ACL_VSTREAM *stream);
# 171 "/workspace/acl/lib_acl_cpp/../lib_acl/include/ioctl/acl_ioctl.h"
 void acl_ioctl_enable_read(ACL_IOCTL *ioc, ACL_VSTREAM *stream,
 int timeout, ACL_IOCTL_NOTIFY_FN callback, void *context);
# 183 "/workspace/acl/lib_acl_cpp/../lib_acl/include/ioctl/acl_ioctl.h"
 void acl_ioctl_enable_write(ACL_IOCTL *ioc, ACL_VSTREAM *stream,
 int timeout, ACL_IOCTL_NOTIFY_FN callback, void *context);
# 195 "/workspace/acl/lib_acl_cpp/../lib_acl/include/ioctl/acl_ioctl.h"
 void acl_ioctl_enable_connect(ACL_IOCTL *ioc, ACL_VSTREAM *stream,
 int timeout, ACL_IOCTL_NOTIFY_FN callback, void *context);
# 209 "/workspace/acl/lib_acl_cpp/../lib_acl/include/ioctl/acl_ioctl.h"
 void acl_ioctl_enable_listen(ACL_IOCTL *ioc, ACL_VSTREAM *stream,
 int timeout, ACL_IOCTL_NOTIFY_FN callback, void *context);
# 227 "/workspace/acl/lib_acl_cpp/../lib_acl/include/ioctl/acl_ioctl.h"
 ACL_VSTREAM *acl_ioctl_connect(const char *addr, int timeout);
# 237 "/workspace/acl/lib_acl_cpp/../lib_acl/include/ioctl/acl_ioctl.h"
 ACL_VSTREAM *acl_ioctl_listen(const char *addr, int qlen);
# 251 "/workspace/acl/lib_acl_cpp/../lib_acl/include/ioctl/acl_ioctl.h"
 ACL_VSTREAM *acl_ioctl_listen_ex(const char *addr, int qlen,
 int block_mode, int io_bufsize, int io_timeout);
# 262 "/workspace/acl/lib_acl_cpp/../lib_acl/include/ioctl/acl_ioctl.h"
 ACL_VSTREAM *acl_ioctl_accept(ACL_VSTREAM *sstream,
 char *ipbuf, int size);
# 273 "/workspace/acl/lib_acl_cpp/../lib_acl/include/ioctl/acl_ioctl.h"
 long long int acl_ioctl_request_timer(ACL_IOCTL *ioc,
 ACL_EVENT_NOTIFY_TIME timer_fn, void *context, long long int idle_limit);
# 283 "/workspace/acl/lib_acl_cpp/../lib_acl/include/ioctl/acl_ioctl.h"
 long long int acl_ioctl_cancel_timer(ACL_IOCTL *ioc,
 ACL_EVENT_NOTIFY_TIME timer_fn, void *context);
# 293 "/workspace/acl/lib_acl_cpp/../lib_acl/include/ioctl/acl_ioctl.h"
 int acl_ioctl_add(ACL_IOCTL *ioc,
 ACL_IOCTL_WORKER_FN callback, void *arg);






 int acl_ioctl_nworker(ACL_IOCTL *ioc);


}
# 16 "/workspace/acl/lib_acl_cpp/../lib_acl/include/lib_acl.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/ioctl/acl_spool.h" 1




extern "C" {


# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/ioctl/acl_ioctl.h" 1
# 9 "/workspace/acl/lib_acl_cpp/../lib_acl/include/ioctl/acl_spool.h" 2
# 45 "/workspace/acl/lib_acl_cpp/../lib_acl/include/ioctl/acl_spool.h"
}
# 17 "/workspace/acl/lib_acl_cpp/../lib_acl/include/lib_acl.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/aio/acl_aio.h" 1
# 18 "/workspace/acl/lib_acl_cpp/../lib_acl/include/lib_acl.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/acl_db.h" 1




extern "C" {


# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/acl_dbpool.h" 1






extern "C" {


# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/../stdlib/acl_define.h" 1
# 11 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/acl_dbpool.h" 2

# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/../stdlib/acl_stdlib.h" 1
# 13 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/acl_dbpool.h" 2



typedef struct ACL_DB_HANDLE ACL_DB_HANDLE;
typedef struct ACL_SQL_RES ACL_SQL_RES;
typedef struct ACL_DB_POOL ACL_DB_POOL;

typedef struct ACL_DB_INFO {
 int db_max;
 char db_addr[256];
 char db_name[256];
 char db_user[256];
 char db_pass[256];
 unsigned long db_flags;
 int ping_inter;
 int timeout_inter;
 int auto_commit;
 int conn_timeout;
 int rw_timeout;
 int buf_size;
 int debug_flag;





 int (*db_before_connect)(ACL_DB_HANDLE* db_handle, void *ctx);
 int (*db_after_connect)(ACL_DB_HANDLE* db_handle, void *ctx);

 void *ctx;
} ACL_DB_INFO;

struct ACL_DB_HANDLE {



 int status;
 time_t timeout;
 time_t ping;

 ACL_DB_POOL *parent;

 int (*sql_results)(ACL_DB_HANDLE *handle, const char *sql, int *error,
  int (*walk_fn)(const void** result_row, void *arg), void *arg);
 int (*sql_result)(ACL_DB_HANDLE *handle, const char *sql, int *error,
  int (*callback)(const void** result_row, void *arg), void *arg);
 int (*sql_update)(ACL_DB_HANDLE *handle, const char *sql, int *error);

 ACL_SQL_RES *(*sql_select)(ACL_DB_HANDLE *handle, const char *sql, int *error);
 void (*free_result)(ACL_SQL_RES *res);
};

struct ACL_SQL_RES {
 void *res;
 int num;




 const void *(*iter_head)(ACL_ITER*, struct ACL_SQL_RES*);

 const void *(*iter_next)(ACL_ITER*, struct ACL_SQL_RES*);
};

struct ACL_DB_POOL {
 ACL_DB_INFO db_info;

 ACL_DB_HANDLE *(*dbh_peek)(ACL_DB_POOL *);
 void (*dbh_check)(ACL_DB_POOL *);
 void (*dbh_release)(ACL_DB_HANDLE *);
 void *(*dbh_export)(ACL_DB_HANDLE *);
 void (*dbh_close)(ACL_DB_HANDLE *);
 int (*dbh_ping)(ACL_DB_HANDLE *);

 void (*destroy)(ACL_DB_POOL *);

 int db_max;
 int db_ready;
 int db_inuse;
};
# 104 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/acl_dbpool.h"
 ACL_DB_POOL *acl_dbpool_create(const char *db_type, const ACL_DB_INFO *db_info);





 void acl_dbpool_destroy(ACL_DB_POOL *db_pool);






 ACL_DB_HANDLE *acl_dbpool_peek(ACL_DB_POOL *db_pool);






 void acl_dbpool_check(ACL_DB_POOL *db_pool);





 void acl_dbpool_release(ACL_DB_HANDLE *db_handle);





 void *acl_dbpool_export(ACL_DB_HANDLE *db_handle);




 void acl_dbpool_close(ACL_DB_HANDLE *db_handle);






 void acl_dbpool_set_ping(ACL_DB_POOL *db_pool, int (*ping_fn)(ACL_DB_HANDLE*));



}
# 9 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/acl_db.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/acl_dberr.h" 1




extern "C" {
# 18 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/acl_dberr.h"
}
# 10 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/acl_db.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/acl_dbsql.h" 1






extern "C" {
# 42 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/acl_dbsql.h"
 ACL_SQL_RES *acl_dbsql_select(ACL_DB_HANDLE *handle,
 const char *sql, int *error);






 void acl_dbsql_free_result(ACL_DB_HANDLE *handle, ACL_SQL_RES *res);
# 69 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/acl_dbsql.h"
 int acl_dbsql_results(ACL_DB_HANDLE *handle, const char *sql, int *error,
 int (*walk_fn)(const void** result_row, void *arg), void *arg);
# 88 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/acl_dbsql.h"
 int acl_dbsql_result(ACL_DB_HANDLE *handle, const char *sql, int *error,
 int (*walk_fn)(const void** result_row, void *arg), void *arg);
# 101 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/acl_dbsql.h"
 int acl_dbsql_update(ACL_DB_HANDLE *handle, const char *sql, int *error);


}
# 11 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/acl_db.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/acl_mdb.h" 1




extern "C" {




typedef struct ACL_MDT_NOD ACL_MDT_NOD;
typedef struct ACL_MDT_RES ACL_MDT_RES;
typedef struct ACL_MDT_REC ACL_MDT_REC;
typedef struct ACL_MDT_REF ACL_MDT_REF;
typedef struct ACL_MDT_IDX ACL_MDT_IDX;
typedef struct ACL_MDT ACL_MDT;
typedef struct ACL_MDB ACL_MDB;
# 38 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/acl_mdb.h"
 ACL_MDB *acl_mdb_create(const char *dbname, const char *dbtype);





 void acl_mdb_free(ACL_MDB *mdb);
# 56 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/acl_mdb.h"
 ACL_MDT *acl_mdb_tbl_create(ACL_MDB *mdb, const char *tbl_name,
 unsigned int tbl_flag, size_t init_capacity,
 const char *key_labels[], unsigned int flags[]);
# 70 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/acl_mdb.h"
 ACL_MDT_NOD *acl_mdb_add(ACL_MDB *mdb, const char *tbl_name,
 void *data, unsigned int dlen,
 const char *key_labels[], const char *keys[]);
# 82 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/acl_mdb.h"
 int acl_mdb_probe(ACL_MDB *mdb, const char *tbl_name,
 const char *key_label, const char *key);
# 95 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/acl_mdb.h"
 ACL_MDT_RES *acl_mdb_find(ACL_MDB *mdb, const char *tbl_name,
 const char *key_label, const char *key, int from, int limit);
# 106 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/acl_mdb.h"
 ACL_MDT_RES *acl_mdb_list(ACL_MDB *mdb, const char *tbl_name,
 int from, int limit);
# 119 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/acl_mdb.h"
 int acl_mdb_del(ACL_MDB *mdb, const char *tbl_name,
 const char *key_label, const char *key,
 void (*onfree_fn)(void*, unsigned int));
# 132 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/acl_mdb.h"
 int acl_mdb_walk(ACL_MDB *mdb, const char *tbl_name,
 int (*walk_fn)(const void*, unsigned int),
 int from, int limit);







 int acl_mdb_cnt(ACL_MDB *mdb, const char *tbl_name);
# 158 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/acl_mdb.h"
 ACL_MDT *acl_mdt_create(const char *dbtype, const char *tbl_name,
 unsigned int tbl_flag, size_t init_capacity,
 const char *key_labels[], unsigned int flags[]);





 void acl_mdt_free(ACL_MDT *mdt);
# 178 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/acl_mdb.h"
 ACL_MDT_NOD *acl_mdt_add(ACL_MDT *mdt, void *data,
 unsigned int dlen, const char *key_labels[], const char *keys[]);
# 188 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/acl_mdb.h"
 int acl_mdt_probe(ACL_MDT *mdt, const char *key_label, const char *key);
# 199 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/acl_mdb.h"
 ACL_MDT_RES *acl_mdt_find(ACL_MDT *mdt, const char *key_label,
 const char *key, int from, int limit);
# 209 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/acl_mdb.h"
 ACL_MDT_RES *acl_mdt_list(ACL_MDT *mdt, int from, int limit);
# 220 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/acl_mdb.h"
 int acl_mdt_delete(ACL_MDT *mdt, const char *key_label,
 const char *key, void (*onfree_fn)(void*, unsigned int));
# 231 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/acl_mdb.h"
 int acl_mdt_walk(ACL_MDT *mdt, int (*walk_fn)(const void*, unsigned int),
 int from, int len);






 const void *acl_mdt_fetch_row(ACL_MDT_RES *res);






 int acl_mdt_row_count(ACL_MDT_RES *res);





 void acl_mdt_res_free(ACL_MDT_RES *res);






 int acl_mdt_cnt(ACL_MDT *mdt);


}
# 12 "/workspace/acl/lib_acl_cpp/../lib_acl/include/db/acl_db.h" 2


}
# 19 "/workspace/acl/lib_acl_cpp/../lib_acl/include/lib_acl.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/unit_test/acl_unit_test.h" 1




extern "C" {


# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/unit_test/acl_test_struct.h" 1




extern "C" {


# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/unit_test/../stdlib/acl_array.h" 1
# 9 "/workspace/acl/lib_acl_cpp/../lib_acl/include/unit_test/acl_test_struct.h" 2

typedef struct AUT_LINE {
 char cmd_name[128];
 int result;
 int argc;
 ACL_ARRAY *argv;
 char *args_str;
 int valid_line_idx;
 int line_number;
 void *arg_inner;
 void (*free_arg_inner)(void*);
 void *arg_outer;
 int obj_type;


} AUT_LINE;

typedef int (*AUT_FN) (AUT_LINE *test_line, void *arg);




typedef struct AUT_FN_ITEM {
 const char *cmd_name;
 const char *fn_name;
 AUT_FN fn_callback;
 void *arg;
 int inner;
} AUT_FN_ITEM;


typedef struct {
 char *name;
 char *value;
} AUT_ARG_ITEM;

typedef struct {
 int match_number;




 AUT_LINE *peer;
 int flag;
 int status;
 int valid_line_idx;



 int nloop_max;
 int nloop_cur;
 int offset_valid_line_idx;
 int loop_sleep;
} AUT_CMD_TOKEN;
# 137 "/workspace/acl/lib_acl_cpp/../lib_acl/include/unit_test/acl_test_struct.h"
}
# 9 "/workspace/acl/lib_acl_cpp/../lib_acl/include/unit_test/acl_unit_test.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/unit_test/acl_test_global.h" 1







# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/unit_test/../stdlib/acl_define.h" 1
# 9 "/workspace/acl/lib_acl_cpp/../lib_acl/include/unit_test/acl_test_global.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/unit_test/../stdlib/acl_loadcfg.h" 1
# 10 "/workspace/acl/lib_acl_cpp/../lib_acl/include/unit_test/acl_test_global.h" 2






 ACL_ARRAY *aut_parse_args_list(const char *str_in);
 void aut_free_args_list(ACL_ARRAY *a);


 int aut_cfg_add_general_line(const ACL_CFG_LINE *line);


 AUT_LINE *aut_add_inner_cmd(const ACL_CFG_LINE *line);


 AUT_LINE *aut_add_outer_cmd(const ACL_CFG_LINE *line);


 AUT_CMD_TOKEN *aut_line_peer_token(const AUT_LINE *test_line);
 AUT_LINE *aut_line_peer(const AUT_LINE *test_line);


 void aut_line_free(void *ctx);
# 44 "/workspace/acl/lib_acl_cpp/../lib_acl/include/unit_test/acl_test_global.h"
 int aut_cfg_parse(const char *pathname);





 int aut_cfg_print(void);



 AUT_LINE *aut_line_new(const ACL_CFG_LINE *cfg_line);






 const ACL_ARRAY *aut_args_get(const char *cmd_name);





 int aut_size(void);







 AUT_LINE *aut_index(int idx);







 int aut_line_cmdcmp(const AUT_LINE *test_line, const char *cmd_name);







 int aut_line_resultcmp(const AUT_LINE *test_line, int result);






 int aut_line_number(const AUT_LINE *test_line);






 int aut_line_valid_linenum(const AUT_LINE *test_line);






 const char *aut_line_cmdname(const AUT_LINE *test_line);






 int aut_line_argc(const AUT_LINE *test_line);







 const char *aut_line_getvalue(const AUT_LINE *test_line, const char *name);






 const char *aut_line_argstr(const AUT_LINE *test_line);
# 143 "/workspace/acl/lib_acl_cpp/../lib_acl/include/unit_test/acl_test_global.h"
 int aut_line_result(const AUT_LINE *test_line);






 int aut_line_stop(const AUT_LINE *test_line);






 int aut_line_reserved(AUT_LINE *test_line);







 int aut_line_add_arg(AUT_LINE *test_line, void *arg);






 void aut_line_del_arg(AUT_LINE *test_line, void (*free_fn) (void *));






 void *aut_line_get_arg(const AUT_LINE *test_line);






 int aut_end_linenum(int start_linenum);
# 195 "/workspace/acl/lib_acl_cpp/../lib_acl/include/unit_test/acl_test_global.h"
 const AUT_LINE *aut_lookup_from_line(const AUT_LINE *test_line, int flag);
# 204 "/workspace/acl/lib_acl_cpp/../lib_acl/include/unit_test/acl_test_global.h"
 int aut_start(void);




 void aut_stop(void);





 void aut_register(const AUT_FN_ITEM test_fn_tab[]);


 AUT_LINE *aut_loop_make_begin(const ACL_CFG_LINE *cfg_line);
 AUT_LINE *aut_loop_make_break(const ACL_CFG_LINE *cfg_line);
 AUT_LINE *aut_loop_make_end(const ACL_CFG_LINE *cfg_line);
 const AUT_LINE *aut_loop_end(const AUT_LINE *test_begin);
 int aut_loop_count(const AUT_LINE *test_line);
 int aut_loop_from(const AUT_LINE *test_line);
 int aut_loop_to(const AUT_LINE *test_line);



 int aut_log_open(const char *pathname);
 void aut_log_info(const char *format, ...);
 void aut_log_warn(const char *format, ...);
 void aut_log_error(const char *format, ...);
 void aut_log_fatal(const char *format, ...);
 void aut_log_panic(const char *format, ...);
# 10 "/workspace/acl/lib_acl_cpp/../lib_acl/include/unit_test/acl_unit_test.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/unit_test/acl_test_var.h" 1




extern "C" {




extern int var_aut_log_level;
extern int var_aut_verbose;

extern ACL_ARRAY *var_aut_line_array;
extern int var_aut_valid_line_idx;


}
# 11 "/workspace/acl/lib_acl_cpp/../lib_acl/include/unit_test/acl_unit_test.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/unit_test/acl_test_macro.h" 1




extern "C" {
# 39 "/workspace/acl/lib_acl_cpp/../lib_acl/include/unit_test/acl_test_macro.h"
}
# 12 "/workspace/acl/lib_acl_cpp/../lib_acl/include/unit_test/acl_unit_test.h" 2


}
# 20 "/workspace/acl/lib_acl_cpp/../lib_acl/include/lib_acl.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/code/acl_code.h" 1




extern "C" {


# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/code/acl_base64.h" 1




extern "C" {


# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/code/../stdlib/acl_define.h" 1
# 9 "/workspace/acl/lib_acl_cpp/../lib_acl/include/code/acl_base64.h" 2







 unsigned char *acl_base64_encode(const char *plain_in, int len);
# 27 "/workspace/acl/lib_acl_cpp/../lib_acl/include/code/acl_base64.h"
 int acl_base64_decode(const char *code_in, char **ppresult);



}
# 9 "/workspace/acl/lib_acl_cpp/../lib_acl/include/code/acl_code.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/code/acl_vstring_base64.h" 1




extern "C" {



# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/code/../stdlib/acl_vstring.h" 1
# 10 "/workspace/acl/lib_acl_cpp/../lib_acl/include/code/acl_vstring_base64.h" 2
# 18 "/workspace/acl/lib_acl_cpp/../lib_acl/include/code/acl_vstring_base64.h"
 ACL_VSTRING *acl_vstring_base64_encode(ACL_VSTRING *vp,
 const char *in, int len);
# 28 "/workspace/acl/lib_acl_cpp/../lib_acl/include/code/acl_vstring_base64.h"
 ACL_VSTRING *acl_vstring_base64_decode(ACL_VSTRING *vp,
 const char *in, int len);


}
# 10 "/workspace/acl/lib_acl_cpp/../lib_acl/include/code/acl_code.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/code/acl_urlcode.h" 1




extern "C" {



# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/code/../stdlib/acl_dbuf_pool.h" 1
# 10 "/workspace/acl/lib_acl_cpp/../lib_acl/include/code/acl_urlcode.h" 2
# 18 "/workspace/acl/lib_acl_cpp/../lib_acl/include/code/acl_urlcode.h"
 char *acl_url_encode(const char *str, ACL_DBUF_POOL *dbuf);
# 27 "/workspace/acl/lib_acl_cpp/../lib_acl/include/code/acl_urlcode.h"
 char *acl_url_decode(const char *str, ACL_DBUF_POOL *dbuf);


}
# 11 "/workspace/acl/lib_acl_cpp/../lib_acl/include/code/acl_code.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/code/acl_gbcode.h" 1






extern "C" {
# 18 "/workspace/acl/lib_acl_cpp/../lib_acl/include/code/acl_gbcode.h"
 void acl_gbjt2ft(const char *data, size_t dlen, char *buf, size_t size);
# 28 "/workspace/acl/lib_acl_cpp/../lib_acl/include/code/acl_gbcode.h"
 void acl_gbft2jt(const char *data, size_t dlen, char *buf, size_t size);


}
# 12 "/workspace/acl/lib_acl_cpp/../lib_acl/include/code/acl_code.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/code/acl_htmlcode.h" 1






extern "C" {





 int acl_html_encode(const char *in, ACL_VSTRING *out);
 int acl_html_decode(const char *in, ACL_VSTRING *out);


}
# 13 "/workspace/acl/lib_acl_cpp/../lib_acl/include/code/acl_code.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/code/acl_xmlcode.h" 1







extern "C" {


 int acl_xml_encode(const char *in, ACL_VSTRING *out);
 int acl_xml_decode(const char *in, ACL_VSTRING *out);
# 35 "/workspace/acl/lib_acl_cpp/../lib_acl/include/code/acl_xmlcode.h"
 size_t acl_xml_encode2(const char** in, size_t ilen,
  char* out, size_t olen);

 const char *acl_xml_decode2(const char *in, char **out, size_t *size);




}
# 14 "/workspace/acl/lib_acl_cpp/../lib_acl/include/code/acl_code.h" 2


}
# 21 "/workspace/acl/lib_acl_cpp/../lib_acl/include/lib_acl.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_master.h" 1




extern "C" {


# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_master_type.h" 1



# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/../stdlib/acl_xinetd_cfg.h" 1
# 5 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_master_type.h" 2




extern "C" {
# 18 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_master_type.h"
}
# 9 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_master.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_master_proto.h" 1



# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/../stdlib/acl_define.h" 1
# 5 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_master_proto.h" 2




extern "C" {
# 42 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_master_proto.h"
typedef struct ACL_MASTER_STATUS {
 int pid;
 unsigned gen;
 int status;
} ACL_MASTER_STATUS;
# 57 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_master_proto.h"
int acl_master_notify(int, unsigned, int);
# 83 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_master_proto.h"
}
# 10 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_master.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_master_flow.h" 1
# 9 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_master_flow.h"
extern "C" {







extern int acl_var_master_flow_pipe[2];

extern void acl_master_flow_init(void);
extern int acl_master_flow_get(int);
extern int acl_master_flow_put(int);
extern int acl_master_flow_count(void);




}
# 11 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_master.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_server_api.h" 1
# 9 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_server_api.h"
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/../stdlib/acl_vstream.h" 1
# 10 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_server_api.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/../ioctl/acl_ioctl.h" 1
# 11 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_server_api.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/../aio/acl_aio.h" 1
# 12 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_server_api.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/../event/acl_events.h" 1
# 13 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_server_api.h" 2




extern "C" {
# 71 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_server_api.h"
typedef void (*ACL_MASTER_SERVER_INIT_FN) (void *);
typedef int (*ACL_MASTER_SERVER_LOOP_FN) (void *);
typedef void (*ACL_MASTER_SERVER_EXIT_FN) (void *);
typedef void (*ACL_MASTER_SERVER_ON_LISTEN_FN) (void *, ACL_VSTREAM *);
typedef void (*ACL_MASTER_SERVER_ON_BIND_FN) (void *, ACL_VSTREAM *);
typedef void (*ACL_MASTER_SERVER_ON_UNBIND_FN) (void *, ACL_VSTREAM *);
typedef int (*ACL_MASTER_SERVER_ON_ACCEPT_FN) (void *, ACL_VSTREAM *);
typedef int (*ACL_MASTER_SERVER_HANDSHAKE_FN) (void *, ACL_VSTREAM *);
typedef void (*ACL_MASTER_SERVER_DISCONN_FN) (void *, ACL_VSTREAM *);
typedef int (*ACL_MASTER_SERVER_TIMEOUT_FN) (void *, ACL_VSTREAM *);
typedef int (*ACL_MASTER_SERVER_EXIT_TIMER_FN)(void *, size_t, size_t);

typedef int (*ACL_MASTER_SERVER_THREAD_INIT_FN)(void *);
typedef void (*ACL_MASTER_SERVER_THREAD_EXIT_FN)(void *);
typedef int (*ACL_MASTER_SERVER_SIGHUP_FN)(void *, ACL_VSTRING *);




typedef void (*ACL_SINGLE_SERVER_FN) (void*, ACL_VSTREAM *);

 const char *acl_single_server_conf(void);
 void acl_single_server_main(int, char **, ACL_SINGLE_SERVER_FN, ...);
 ACL_EVENT *acl_single_server_event(void);
 ACL_VSTREAM **acl_single_server_sstreams(void);




typedef int (*ACL_THREADS_SERVER_FN) (void *, ACL_VSTREAM*);

 const char *acl_threads_server_conf(void);
 void acl_threads_server_main(int argc, char *argv[],
 ACL_THREADS_SERVER_FN, void *service_ctx, int name, ...);


 ACL_EVENT *acl_threads_server_event(void);
 acl_pthread_pool_t *acl_threads_server_threads(void);
 ACL_VSTREAM **acl_threads_server_streams(void);

 void acl_threads_server_enable_read(ACL_EVENT *event,
 acl_pthread_pool_t *threads, ACL_VSTREAM *stream);
 void acl_threads_server_disable_read(ACL_EVENT *event,
 ACL_VSTREAM *stream);




typedef void (*ACL_AIO_SERVER_FN) (ACL_ASTREAM *, void *);
typedef void (*ACL_AIO_SERVER2_FN) (int, void *);

 const char *acl_aio_server_conf(void);
 void acl_aio_server_main(int, char **, ACL_AIO_SERVER_FN, ...);
 void acl_aio_server2_main(int, char **, ACL_AIO_SERVER2_FN, ...);

typedef int (*ACL_AIO_RUN_FN)(ACL_ASTREAM *stream, void *run_ctx);
typedef int (*ACL_AIO_RUN2_FN)(int fd, void *run_ctx);

__attribute__((__deprecated__)) void acl_aio_app_main(int argc, char *argv[],
 ACL_AIO_RUN_FN run_fn, void *run_ctx, ...);
__attribute__((__deprecated__)) void acl_aio_app2_main(int argc, char *argv[],
 ACL_AIO_RUN2_FN run2_fn, void *run_ctx, ...);

 void acl_aio_server_request_timer(ACL_EVENT_NOTIFY_TIME timer_fn,
 void *arg, int delay);
 void acl_aio_server_cancel_timer(ACL_EVENT_NOTIFY_TIME timer_fn, void *arg);
 void acl_aio_server_request_rw_timer(ACL_ASTREAM *);
 void acl_aio_server_cancel_rw_timer(ACL_ASTREAM *);
 ACL_AIO *acl_aio_server_handle(void);
 ACL_EVENT *acl_aio_server_event(void);
 int acl_aio_server_read(ACL_ASTREAM *astream, int timeout,
 ACL_AIO_READ_FN notify_fn, void *context);
 int acl_aio_server_readn(ACL_ASTREAM *astream, int count, int timeout,
 ACL_AIO_READ_FN notify_fn, void *context);
 int acl_aio_server_gets(ACL_ASTREAM *astream, int timeout,
 ACL_AIO_READ_FN notify_fn, void *context);
 int acl_aio_server_gets_nonl(ACL_ASTREAM *astream, int timeout,
 ACL_AIO_READ_FN notify_fn, void *context);
 int acl_aio_server_writen(ACL_ASTREAM *astream, ACL_AIO_WRITE_FN notify_fn,
 void *context, const char *data, int dlen);
 int acl_aio_server_vfprintf(ACL_ASTREAM *astream, ACL_AIO_WRITE_FN notify_fn,
 void *context, const char *fmt, va_list ap);
 int acl_aio_server_fprintf(ACL_ASTREAM *astream, ACL_AIO_WRITE_FN notify_fn,
 void *context, const char *fmt, ...);
 int acl_aio_server_connect(const char *saddr, int timeout,
 ACL_AIO_CONNECT_FN connect_fn, void *context);
 ACL_ASTREAM **acl_aio_server_streams(void);
 void acl_aio_server_on_close(ACL_ASTREAM *stream);




typedef void (*ACL_UDP_SERVER_FN) (void* ctx, ACL_VSTREAM *);

 const char *acl_udp_server_conf(void);
 void acl_udp_server_request_timer(ACL_EVENT_NOTIFY_TIME timer_fn, void *arg,
 long long int delay, int keep);
 void acl_udp_server_cancel_timer(ACL_EVENT_NOTIFY_TIME timer_fn, void *arg);
 void acl_udp_server_main(int, char **, ACL_UDP_SERVER_FN, ...);
 ACL_EVENT *acl_udp_server_event(void);
 ACL_VSTREAM **acl_udp_server_streams(void);




typedef void (*ACL_TRIGGER_SERVER_FN) (void *);
 const char *acl_trigger_server_conf(void);
 void acl_trigger_server_main(int, char **, ACL_TRIGGER_SERVER_FN, ...);
 ACL_EVENT *acl_trigger_server_event(void);






extern int acl_var_server_gotsighup;
 void acl_server_sighup_setup(void);
 void acl_server_sigterm_setup(void);




 void acl_master_log_enable(int yes);
 int acl_master_log_enabled(void);


}
# 12 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_master.h" 2

# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_single_params.h" 1
# 9 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_single_params.h"
extern "C" {




extern int acl_var_single_pid;
extern char *acl_var_single_procname;
extern char *acl_var_single_log_file;

extern int acl_var_single_buf_size;
extern int acl_var_single_rw_timeout;
extern int acl_var_single_in_flow_delay;





extern int acl_var_single_idle_limit;
extern char *acl_var_single_queue_dir;
extern char *acl_var_single_pid_dir;
extern char *acl_var_single_owner;
extern int acl_var_single_delay_sec;
extern int acl_var_single_delay_usec;





extern int acl_var_single_daemon_timeout;





extern int acl_var_single_use_limit;
extern int acl_var_single_enable_core;
extern int acl_var_single_disable_core_onexit;
extern long long int acl_var_single_core_limit;
extern char *acl_var_single_log_debug;
extern int acl_var_single_max_debug;




}
# 14 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_master.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_aio_params.h" 1
# 9 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_aio_params.h"
extern "C" {




extern int acl_var_aio_pid;
extern char *acl_var_aio_procname;
extern char *acl_var_aio_log_file;

extern int acl_var_aio_buf_size;
extern int acl_var_aio_rw_timeout;
extern int acl_var_aio_in_flow_delay;
extern int acl_var_aio_max_threads;
extern int acl_var_aio_thread_idle_limit;
extern int acl_var_aio_idle_limit;
extern char *acl_var_aio_queue_dir;
extern char *acl_var_aio_pid_dir;
extern char *acl_var_aio_access_allow;
extern char *acl_var_aio_owner;
extern int acl_var_aio_delay_sec;
extern int acl_var_aio_delay_usec;
extern char *acl_var_aio_event_mode;
extern int acl_var_aio_daemon_timeout;
extern int acl_var_aio_use_limit;
extern int acl_var_aio_master_maxproc;
extern int acl_var_aio_max_accept;
extern int acl_var_aio_min_notify;
extern char *acl_var_aio_accept_alone;
extern int acl_var_aio_enable_core;
extern int acl_var_aio_disable_core_onexit;
extern long long int acl_var_aio_core_limit;
extern int acl_var_aio_quick_abort;
extern int acl_var_aio_accept_timer;
extern char *acl_var_aio_log_debug;
extern int acl_var_aio_max_debug;
extern int acl_var_aio_status_notify;
extern char *acl_var_aio_dispatch_addr;
extern char *acl_var_aio_dispatch_type;
extern char *acl_var_aio_deny_info;




}
# 15 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_master.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_udp_params.h" 1
# 9 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_udp_params.h"
extern "C" {


extern int acl_var_udp_pid;
extern char *acl_var_udp_procname;
extern char *acl_var_udp_log_file;

extern int acl_var_udp_buf_size;
extern int acl_var_udp_rw_timeout;
extern long long int acl_var_udp_use_limit;
extern int acl_var_udp_idle_limit;
extern char *acl_var_udp_queue_dir;
extern char *acl_var_udp_pid_dir;
extern char *acl_var_udp_access_allow;
extern char *acl_var_udp_owner;
extern int acl_var_udp_delay_sec;
extern int acl_var_udp_delay_usec;
extern char *acl_var_udp_event_mode;
extern int acl_var_udp_daemon_timeout;
extern int acl_var_udp_master_maxproc;
extern int acl_var_udp_enable_core;
extern int acl_var_udp_disable_core_onexit;
extern long long int acl_var_udp_core_limit;
extern char *acl_var_udp_log_debug;
extern int acl_var_udp_max_debug;
extern int acl_var_udp_threads;
extern int acl_var_udp_threads_detached;
extern int acl_var_udp_fatal_on_bind_error;
extern int acl_var_udp_monitor_netlink;
extern int acl_var_udp_non_block;
extern char *acl_var_udp_reuse_port;
extern char *acl_var_udp_private;


}
# 16 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_master.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_master_conf.h" 1




# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/../master/acl_master_type.h" 1
# 6 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_master_conf.h" 2




extern "C" {


 void acl_app_conf_load(const char *pathname);
 void acl_app_conf_unload(void);
 void acl_get_app_conf_int_table(ACL_CFG_INT_TABLE *table);
 void acl_get_app_conf_int64_table(ACL_CFG_INT64_TABLE *table);
 void acl_get_app_conf_str_table(ACL_CFG_STR_TABLE *table);
 void acl_get_app_conf_bool_table(ACL_CFG_BOOL_TABLE *table);
 void acl_free_app_conf_str_table(ACL_CFG_STR_TABLE *table);


}
# 17 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_master.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_threads_params.h" 1
# 9 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_threads_params.h"
extern "C" {


extern char *acl_var_threads_procname;
extern char *acl_var_threads_log_file;

extern int acl_var_threads_buf_size;
extern int acl_var_threads_rw_timeout;
extern int acl_var_threads_pool_limit;
extern int acl_var_threads_thread_stacksize;
extern int acl_var_threads_thread_idle;
extern int acl_var_threads_idle_limit;
extern int acl_var_threads_use_limit;

extern char *acl_var_threads_queue_dir;
extern char *acl_var_threads_owner;
extern int acl_var_threads_delay_sec;
extern int acl_var_threads_delay_usec;
extern char *acl_var_threads_event_mode;
extern int acl_var_threads_daemon_timeout;
extern int acl_var_threads_master_maxproc;
extern int acl_var_threads_max_accept;
extern int acl_var_threads_enable_dog;
extern int acl_var_threads_quick_abort;
extern int acl_var_threads_enable_core;
extern int acl_var_threads_disable_core_onexit;
extern long long int acl_var_threads_core_limit;
extern char *acl_var_threads_log_debug;
extern int acl_var_threads_max_debug;
extern int acl_var_threads_status_notify;
extern char *acl_var_threads_deny_banner;
extern char *acl_var_threads_access_allow;
extern int acl_var_threads_batadd;
extern int acl_var_threads_schedule_warn;
extern int acl_var_threads_schedule_wait;
extern int acl_var_threads_check_inter;
extern int acl_var_threads_qlen_warn;
extern char *acl_var_threads_dispatch_addr;
extern char *acl_var_threads_dispatch_type;
extern char *acl_var_threads_master_service;
extern char *acl_var_threads_master_reuseport;


}
# 18 "/workspace/acl/lib_acl_cpp/../lib_acl/include/master/acl_master.h" 2


}
# 22 "/workspace/acl/lib_acl_cpp/../lib_acl/include/lib_acl.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/proctl/acl_proctl.h" 1



# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/proctl/../stdlib/acl_define.h" 1
# 5 "/workspace/acl/lib_acl_cpp/../lib_acl/include/proctl/acl_proctl.h" 2
# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 6 "/workspace/acl/lib_acl_cpp/../lib_acl/include/proctl/acl_proctl.h" 2


extern "C" {
# 18 "/workspace/acl/lib_acl_cpp/../lib_acl/include/proctl/acl_proctl.h"
 void acl_proctl_daemon_path(char *buf, size_t size);





 void acl_proctl_deamon_init(const char *progname);





 void acl_proctl_daemon_loop(void);
# 39 "/workspace/acl/lib_acl_cpp/../lib_acl/include/proctl/acl_proctl.h"
 int acl_proctl_deamon_start_one(const char *progchild, int argc, char *argv[]);
# 48 "/workspace/acl/lib_acl_cpp/../lib_acl/include/proctl/acl_proctl.h"
 void acl_proctl_start_one(const char *progname,
 const char *progchild, int argc, char *argv[]);
# 58 "/workspace/acl/lib_acl_cpp/../lib_acl/include/proctl/acl_proctl.h"
 void acl_proctl_stop_one(const char *progname,
 const char *progchild, int argc, char *argv[]);





 void acl_proctl_stop_all(const char *progname);





 void acl_proctl_quit(const char *progname);





 void acl_proctl_list(const char *progname);






 void acl_proctl_probe(const char *progname, const char *progchild);







 void acl_proctl_child(const char *progname, void (*onexit_fn)(void *), void *arg);


}
# 23 "/workspace/acl/lib_acl_cpp/../lib_acl/include/lib_acl.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h" 1




extern "C" {


# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/../stdlib/acl_array.h" 1
# 9 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/../stdlib/acl_ring.h" 1
# 10 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/../stdlib/acl_vstream.h" 1
# 11 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/../stdlib/acl_htable.h" 1
# 12 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/../stdlib/acl_vstring.h" 1
# 13 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/../stdlib/acl_iterator.h" 1
# 14 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/../stdlib/acl_dbuf_pool.h" 1
# 15 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h" 2

typedef struct ACL_XML ACL_XML;
typedef struct ACL_XML_NODE ACL_XML_NODE;
typedef struct ACL_XML_ATTR ACL_XML_ATTR;

struct ACL_XML_ATTR {
 ACL_XML_NODE *node;
 ACL_VSTRING *name;
 ACL_VSTRING *value;


 int quote;
 int backslash;
 int slash;
};

struct ACL_XML_NODE {
 ACL_VSTRING *ltag;
 ACL_VSTRING *rtag;
 const ACL_VSTRING *id;

 ACL_VSTRING *text;
 ACL_ARRAY *attr_list;
 ACL_XML_NODE *parent;
 ACL_RING children;
 int depth;


 ACL_XML *xml;
 ACL_RING node;
 ACL_XML_ATTR *curr_attr;
 int quote;
 int last_ch;
 int nlt;
 char meta[3];
 unsigned int flag;
# 66 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h"
 int status;
# 88 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h"
 ACL_XML_NODE *(*iter_head)(ACL_ITER*, ACL_XML_NODE*);

 ACL_XML_NODE *(*iter_next)(ACL_ITER*, ACL_XML_NODE*);

 ACL_XML_NODE *(*iter_tail)(ACL_ITER*, ACL_XML_NODE*);

 ACL_XML_NODE *(*iter_prev)(ACL_ITER*, ACL_XML_NODE*);
};

struct ACL_XML {

 int depth;
 int node_cnt;
 int root_cnt;
 int attr_cnt;
 ACL_XML_NODE *root;


 ACL_HTABLE *id_table;
 ACL_XML_NODE *curr_node;
 ACL_DBUF_POOL *dbuf;
 ACL_DBUF_POOL *dbuf_inner;
 size_t dbuf_keep;
 size_t space;

 unsigned flag;
# 127 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h"
 ACL_VSTRING *decode_buf;




 ACL_XML_NODE *(*iter_head)(ACL_ITER*, ACL_XML*);

 ACL_XML_NODE *(*iter_next)(ACL_ITER*, ACL_XML*);

 ACL_XML_NODE *(*iter_tail)(ACL_ITER*, ACL_XML*);

 ACL_XML_NODE *(*iter_prev)(ACL_ITER*, ACL_XML*);
};
# 153 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h"
 int acl_xml_is_closure(ACL_XML *xml);
# 164 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h"
 int acl_xml_is_complete(ACL_XML *xml, const char *tag);





 ACL_XML *acl_xml_alloc(void);







 ACL_XML *acl_xml_dbuf_alloc(ACL_DBUF_POOL *dbuf);






 size_t acl_xml_space(ACL_XML *xml);





 void acl_xml_space_clear(ACL_XML *xml);
# 200 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h"
 void acl_xml_foreach_init(ACL_XML *xml, ACL_XML_NODE *node);







 void acl_xml_multi_root(ACL_XML *xml, int on);
# 218 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h"
 void acl_xml_slash(ACL_XML *xml, int ignore);






 void acl_xml_decode_enable(ACL_XML *xml, int on);




 void acl_xml_encode_enable(ACL_XML *xml, int on);






 int acl_xml_free(ACL_XML *xml);





 void acl_xml_reset(ACL_XML *xml);
# 257 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h"
 const char *acl_xml_update(ACL_XML *xml, const char *data);
# 267 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h"
 void acl_xml_tag_init(void);





 void acl_xml_tag_add(const char *tag);







 int acl_xml_tag_selfclosed(const char *tag);






 int acl_xml_tag_leaf(const char *tag);
# 298 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h"
 void acl_xml_free_array(ACL_ARRAY *a);
# 307 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h"
 ACL_XML_NODE *acl_xml_getFirstElementByTagName(
 ACL_XML *xml, const char *tag);
# 317 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h"
 ACL_ARRAY *acl_xml_getElementsByTagName(
 ACL_XML *xml, const char *tag);
# 331 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h"
 ACL_ARRAY *acl_xml_getElementsByTags(ACL_XML *xml, const char *tags);
# 340 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h"
 ACL_ARRAY *acl_xml_getElementsByName(ACL_XML *xml, const char *value);
# 350 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h"
 ACL_ARRAY *acl_xml_getElementsByAttr(ACL_XML *xml,
 const char *name, const char *value);
# 360 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h"
 ACL_XML_ATTR *acl_xml_getAttrById(ACL_XML *xml, const char *id);
# 369 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h"
 const char *acl_xml_getAttrValueById(ACL_XML *xml, const char *id);
# 378 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h"
 ACL_XML_NODE *acl_xml_getElementById(ACL_XML *xml, const char *id);
# 387 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h"
 ACL_XML_NODE *acl_xml_getElementMeta(ACL_XML *xml, const char *tag);






 const char *acl_xml_getEncoding(ACL_XML *xml);






 const char *acl_xml_getType(ACL_XML *xml);







 ACL_XML_ATTR *acl_xml_getElementAttr(ACL_XML_NODE *node, const char *name);







 const char *acl_xml_getElementAttrVal(ACL_XML_NODE *node, const char *name);







 int acl_xml_removeElementAttr(ACL_XML_NODE *node, const char *name);
# 436 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h"
 ACL_XML_ATTR *acl_xml_addElementAttr(ACL_XML_NODE *node,
        const char *name, const char *value);
# 447 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h"
 ACL_XML_NODE *acl_xml_create_node(ACL_XML *xml,
 const char* tagname, const char* text);
# 460 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h"
 ACL_XML_NODE *acl_xml_create_node_with_text_stream(ACL_XML *xml,
 const char *tag, ACL_VSTREAM *in, size_t off, size_t len);
# 471 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h"
 ACL_XML_ATTR *acl_xml_node_add_attr(ACL_XML_NODE *node,
 const char *name, const char *value);







 void acl_xml_node_add_attrs(ACL_XML_NODE *node, ...);







 void acl_xml_node_set_text(ACL_XML_NODE *node, const char *text);







 void acl_xml_node_add_text(ACL_XML_NODE *node, const char *text);
# 505 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h"
 void acl_xml_node_set_text_stream(ACL_XML_NODE *node,
 ACL_VSTREAM *fp, size_t off, size_t len);
# 517 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h"
 ACL_VSTRING* acl_xml_build(ACL_XML* xml, ACL_VSTRING *buf);






 void acl_xml_dump(ACL_XML *xml, ACL_VSTREAM *fp);






 void acl_xml_dump2(ACL_XML *xml, ACL_VSTRING *buf);
# 544 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml.h"
 ACL_XML_ATTR *acl_xml_attr_alloc(ACL_XML_NODE *node);






 ACL_XML_NODE *acl_xml_node_alloc(ACL_XML *xml);







 int acl_xml_node_delete(ACL_XML_NODE *node);






 void acl_xml_node_append(ACL_XML_NODE *node1, ACL_XML_NODE *node2);






 void acl_xml_node_add_child(ACL_XML_NODE *parent, ACL_XML_NODE *child);






 ACL_XML_NODE *acl_xml_node_parent(ACL_XML_NODE *node);






 ACL_XML_NODE *acl_xml_node_next(ACL_XML_NODE *node);






 ACL_XML_NODE *acl_xml_node_prev(ACL_XML_NODE *node);


}
# 24 "/workspace/acl/lib_acl_cpp/../lib_acl/include/lib_acl.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml2.h" 1




extern "C" {
# 16 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml2.h"
typedef struct ACL_XML2 ACL_XML2;
typedef struct ACL_XML2_NODE ACL_XML2_NODE;
typedef struct ACL_XML2_ATTR ACL_XML2_ATTR;

struct ACL_XML2_ATTR {
 ACL_XML2_NODE *node;
 char *name;
 char *value;

 ssize_t name_size;
 ssize_t value_size;


 int quote;
 int backslash;
 int slash;
};

struct ACL_XML2_NODE {
 char *ltag;
 char *rtag;
 ssize_t ltag_size;
 ssize_t rtag_size;
 const char *id;

 char *text;
 ssize_t text_size;

 ACL_ARRAY *attr_list;
 ACL_XML2_NODE *parent;
 ACL_RING children;
 int depth;


 ACL_XML2 *xml;
 ACL_RING node;
 ACL_XML2_ATTR *curr_attr;
 int quote;
 int last_ch;
 int nlt;
 char meta[3];

 unsigned int flag;
# 74 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml2.h"
 int status;
# 96 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml2.h"
 ACL_XML2_NODE *(*iter_head)(ACL_ITER*, ACL_XML2_NODE*);

 ACL_XML2_NODE *(*iter_next)(ACL_ITER*, ACL_XML2_NODE*);

 ACL_XML2_NODE *(*iter_tail)(ACL_ITER*, ACL_XML2_NODE*);

 ACL_XML2_NODE *(*iter_prev)(ACL_ITER*, ACL_XML2_NODE*);
};

struct ACL_XML2 {


 int depth;
 int node_cnt;
 int root_cnt;
 int attr_cnt;
 ACL_XML2_NODE *root;


 int fd;
 ACL_VSTRING *vbuf;
 ACL_VSTRING *vbuf_inner;
 char dummy[1];

 ACL_HTABLE *id_table;
 ACL_XML2_NODE *curr_node;
 ACL_DBUF_POOL *dbuf;
 ACL_DBUF_POOL *dbuf_inner;
 size_t dbuf_keep;

 unsigned flag;
# 143 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml2.h"
 ACL_XML2_NODE *(*iter_head)(ACL_ITER*, const ACL_XML2*);

 ACL_XML2_NODE *(*iter_next)(ACL_ITER*, const ACL_XML2*);

 ACL_XML2_NODE *(*iter_tail)(ACL_ITER*, const ACL_XML2*);

 ACL_XML2_NODE *(*iter_prev)(ACL_ITER*, const ACL_XML2*);
};
# 164 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml2.h"
 int acl_xml2_is_closure(ACL_XML2 *xml);
# 175 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml2.h"
 int acl_xml2_is_complete(ACL_XML2 *xml, const char *tag);






 ACL_XML2 *acl_xml2_alloc(ACL_VSTRING *vbuf);
# 191 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml2.h"
 ACL_XML2 *acl_xml2_dbuf_alloc(ACL_VSTRING *vbuf, ACL_DBUF_POOL *dbuf);
# 202 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml2.h"
 ACL_XML2 *acl_xml2_mmap_file(const char *filepath, size_t max_len,
  size_t init_len, ACL_DBUF_POOL *dbuf);
# 215 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml2.h"
 ACL_XML2 *acl_xml2_mmap_fd(int fd, size_t max_len,
  size_t init_len, ACL_DBUF_POOL *dbuf);






 size_t acl_xml2_space(ACL_XML2 *xml);





 void acl_xml2_space_clear(ACL_XML2 *xml);
# 238 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml2.h"
 void acl_xml2_foreach_init(ACL_XML2 *xml, ACL_XML2_NODE *node);







 void acl_xml2_multi_root(ACL_XML2 *xml, int on);
# 256 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml2.h"
 void acl_xml2_slash(ACL_XML2 *xml, int ignore);






 void acl_xml2_decode_enable(ACL_XML2 *xml, int on);




 void acl_xml2_encode_enable(ACL_XML2 *xml, int on);






 int acl_xml2_free(ACL_XML2 *xml);





 void acl_xml2_reset(ACL_XML2 *xml);
# 295 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml2.h"
 const char *acl_xml2_update(ACL_XML2 *xml, const char *data);
# 305 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml2.h"
 void acl_xml2_tag_init(void);





 void acl_xml2_tag_add(const char *tag);







 int acl_xml2_tag_selfclosed(const char *tag);






 int acl_xml2_tag_leaf(const char *tag);
# 336 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml2.h"
 void acl_xml2_free_array(ACL_ARRAY *a);
# 345 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml2.h"
 ACL_XML2_NODE *acl_xml2_getFirstElementByTagName(
 ACL_XML2 *xml, const char *tag);
# 355 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml2.h"
 ACL_ARRAY *acl_xml2_getElementsByTagName(
 ACL_XML2 *xml, const char *tag);
# 369 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml2.h"
 ACL_ARRAY *acl_xml2_getElementsByTags(ACL_XML2 *xml, const char *tags);
# 378 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml2.h"
 ACL_ARRAY *acl_xml2_getElementsByName(ACL_XML2 *xml, const char *value);
# 388 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml2.h"
 ACL_ARRAY *acl_xml2_getElementsByAttr(ACL_XML2 *xml,
 const char *name, const char *value);
# 398 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml2.h"
 ACL_XML2_ATTR *acl_xml2_getAttrById(ACL_XML2 *xml, const char *id);
# 407 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml2.h"
 const char *acl_xml2_getAttrValueById(ACL_XML2 *xml, const char *id);
# 416 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml2.h"
 ACL_XML2_NODE *acl_xml2_getElementById(ACL_XML2 *xml, const char *id);
# 425 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml2.h"
 ACL_XML2_NODE *acl_xml2_getElementMeta(ACL_XML2 *xml, const char *tag);






 const char *acl_xml2_getEncoding(ACL_XML2 *xml);






 const char *acl_xml2_getType(ACL_XML2 *xml);







 ACL_XML2_ATTR *acl_xml2_getElementAttr(ACL_XML2_NODE *node, const char *name);







 const char *acl_xml2_getElementAttrVal(ACL_XML2_NODE *node, const char *name);







 int acl_xml2_removeElementAttr(ACL_XML2_NODE *node, const char *name);
# 474 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml2.h"
 ACL_XML2_ATTR *acl_xml2_addElementAttr(ACL_XML2_NODE *node,
        const char *name, const char *value);
# 485 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml2.h"
 ACL_XML2_NODE *acl_xml2_create_node(ACL_XML2 *xml,
 const char* tagname, const char* text);
# 498 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml2.h"
 ACL_XML2_NODE *acl_xml2_create_node_with_text_stream(ACL_XML2 *xml,
 const char *tag, ACL_VSTREAM *in, size_t off, size_t len);
# 509 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml2.h"
 ACL_XML2_ATTR *acl_xml2_node_add_attr(ACL_XML2_NODE *node,
 const char *name, const char *value);







 void acl_xml2_node_add_attrs(ACL_XML2_NODE *node, ...);







 void acl_xml2_node_set_text(ACL_XML2_NODE *node, const char *text);







 void acl_xml2_node_add_text(ACL_XML2_NODE *node, const char *text);
# 543 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml2.h"
 void acl_xml2_node_set_text_stream(ACL_XML2_NODE *node,
 ACL_VSTREAM *in, size_t off, size_t len);






 const char *acl_xml2_build(ACL_XML2* xml);







 const char *acl_xml2_build2(const ACL_XML2* xml, ACL_VSTRING *vbuf);






 void acl_xml2_dump(ACL_XML2 *xml, ACL_VSTREAM *fp);






 void acl_xml2_dump2(ACL_XML2 *xml, ACL_VSTRING *buf);
# 586 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml2.h"
 ACL_XML2_ATTR *acl_xml2_attr_alloc(ACL_XML2_NODE *node);






 ACL_XML2_NODE *acl_xml2_node_alloc(ACL_XML2 *xml);







 int acl_xml2_node_delete(ACL_XML2_NODE *node);






 void acl_xml2_node_append(ACL_XML2_NODE *node1, ACL_XML2_NODE *node2);






 void acl_xml2_node_add_child(ACL_XML2_NODE *parent, ACL_XML2_NODE *child);






 ACL_XML2_NODE *acl_xml2_node_parent(ACL_XML2_NODE *node);






 ACL_XML2_NODE *acl_xml2_node_next(ACL_XML2_NODE *node);






 ACL_XML2_NODE *acl_xml2_node_prev(ACL_XML2_NODE *node);


}
# 25 "/workspace/acl/lib_acl_cpp/../lib_acl/include/lib_acl.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml3.h" 1




extern "C" {
# 16 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml3.h"
typedef struct ACL_XML3 ACL_XML3;
typedef struct ACL_XML3_NODE ACL_XML3_NODE;
typedef struct ACL_XML3_ATTR ACL_XML3_ATTR;

struct ACL_XML3_ATTR {
 ACL_XML3_NODE *node;
 char *name;
 char *value;

 size_t name_size;
 size_t value_size;


 int quote;
 int backslash;
 int slash;
};

struct ACL_XML3_NODE {
 char *ltag;
 char *rtag;
 size_t ltag_size;
 size_t rtag_size;
 const char *id;

 char *text;
 size_t text_size;

 ACL_ARRAY *attr_list;
 ACL_XML3_NODE *parent;
 ACL_RING children;
 int depth;


 ACL_XML3 *xml;
 ACL_RING node;
 ACL_XML3_ATTR *curr_attr;
 int quote;
 int last_ch;
 int nlt;
 char meta[3];

 unsigned int flag;
# 71 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml3.h"
 int status;
# 92 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml3.h"
 ACL_XML3_NODE *(*iter_head)(ACL_ITER*, ACL_XML3_NODE*);

 ACL_XML3_NODE *(*iter_next)(ACL_ITER*, ACL_XML3_NODE*);

 ACL_XML3_NODE *(*iter_tail)(ACL_ITER*, ACL_XML3_NODE*);

 ACL_XML3_NODE *(*iter_prev)(ACL_ITER*, ACL_XML3_NODE*);
};

struct ACL_XML3 {


 int depth;
 int node_cnt;
 int root_cnt;
 ACL_XML3_NODE *root;


 char addr[1];
 ACL_HTABLE *id_table;
 ACL_XML3_NODE *curr_node;
 ACL_DBUF_POOL *dbuf;
 ACL_DBUF_POOL *dbuf_inner;
 size_t dbuf_keep;

 unsigned flag;
# 128 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml3.h"
 ACL_XML3_NODE *(*iter_head)(ACL_ITER*, ACL_XML3*);

 ACL_XML3_NODE *(*iter_next)(ACL_ITER*, ACL_XML3*);

 ACL_XML3_NODE *(*iter_tail)(ACL_ITER*, ACL_XML3*);

 ACL_XML3_NODE *(*iter_prev)(ACL_ITER*, ACL_XML3*);
};
# 149 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml3.h"
 int acl_xml3_is_closure(ACL_XML3 *xml);
# 160 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml3.h"
 int acl_xml3_is_complete(ACL_XML3 *xml, const char *tag);





 ACL_XML3 *acl_xml3_alloc(void);







 ACL_XML3 *acl_xml3_dbuf_alloc(ACL_DBUF_POOL *dbuf);
# 183 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml3.h"
 void acl_xml3_foreach_init(ACL_XML3 *xml, ACL_XML3_NODE *node);







 void acl_xml3_multi_root(ACL_XML3 *xml, int on);
# 201 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml3.h"
 void acl_xml3_slash(ACL_XML3 *xml, int ignore);






 int acl_xml3_free(ACL_XML3 *xml);





 void acl_xml3_reset(ACL_XML3 *xml);
# 228 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml3.h"
 char *acl_xml3_update(ACL_XML3 *xml, char *data);
# 238 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml3.h"
 void acl_xml3_tag_init(void);





 void acl_xml3_tag_add(const char *tag);







 int acl_xml3_tag_selfclosed(const char *tag);






 int acl_xml3_tag_leaf(const char *tag);
# 269 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml3.h"
 void acl_xml3_free_array(ACL_ARRAY *a);
# 278 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml3.h"
 ACL_XML3_NODE *acl_xml3_getFirstElementByTagName(
 ACL_XML3 *xml, const char *tag);
# 288 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml3.h"
 ACL_ARRAY *acl_xml3_getElementsByTagName(
 ACL_XML3 *xml, const char *tag);
# 302 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml3.h"
 ACL_ARRAY *acl_xml3_getElementsByTags(ACL_XML3 *xml, const char *tags);
# 311 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml3.h"
 ACL_ARRAY *acl_xml3_getElementsByName(ACL_XML3 *xml, const char *value);
# 321 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml3.h"
 ACL_ARRAY *acl_xml3_getElementsByAttr(ACL_XML3 *xml,
 const char *name, const char *value);
# 331 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml3.h"
 ACL_XML3_ATTR *acl_xml3_getAttrById(ACL_XML3 *xml, const char *id);
# 340 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml3.h"
 const char *acl_xml3_getAttrValueById(ACL_XML3 *xml, const char *id);
# 349 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml3.h"
 ACL_XML3_NODE *acl_xml3_getElementById(ACL_XML3 *xml, const char *id);
# 358 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml3.h"
 ACL_XML3_NODE *acl_xml3_getElementMeta(ACL_XML3 *xml, const char *tag);






 const char *acl_xml3_getEncoding(ACL_XML3 *xml);






 const char *acl_xml3_getType(ACL_XML3 *xml);







 ACL_XML3_ATTR *acl_xml3_getElementAttr(ACL_XML3_NODE *node,
  const char *name);







 const char *acl_xml3_getElementAttrVal(
   ACL_XML3_NODE *node, const char *name);







 int acl_xml3_removeElementAttr(ACL_XML3_NODE *node, const char *name);
# 488 "/workspace/acl/lib_acl_cpp/../lib_acl/include/xml/acl_xml3.h"
 ACL_XML3_ATTR *acl_xml3_attr_alloc(ACL_XML3_NODE *node);






 ACL_XML3_NODE *acl_xml3_node_alloc(ACL_XML3 *xml);







 int acl_xml3_node_delete(ACL_XML3_NODE *node);






 void acl_xml3_node_append(ACL_XML3_NODE *node1, ACL_XML3_NODE *node2);






 void acl_xml3_node_add_child(ACL_XML3_NODE *parent, ACL_XML3_NODE *child);






 ACL_XML3_NODE *acl_xml3_node_parent(ACL_XML3_NODE *node);






 ACL_XML3_NODE *acl_xml3_node_next(ACL_XML3_NODE *node);






 ACL_XML3_NODE *acl_xml3_node_prev(ACL_XML3_NODE *node);


}
# 26 "/workspace/acl/lib_acl_cpp/../lib_acl/include/lib_acl.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/acl_json.h" 1




extern "C" {


# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/../stdlib/acl_define.h" 1
# 9 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/acl_json.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/../stdlib/acl_dbuf_pool.h" 1
# 10 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/acl_json.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/../stdlib/acl_iterator.h" 1
# 11 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/acl_json.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/../stdlib/acl_vstring.h" 1
# 12 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/acl_json.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/../stdlib/acl_ring.h" 1
# 13 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/acl_json.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/../stdlib/acl_array.h" 1
# 14 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/acl_json.h" 2

typedef struct ACL_JSON ACL_JSON;
typedef struct ACL_JSON_NODE ACL_JSON_NODE;

struct ACL_JSON_NODE {
 ACL_VSTRING *ltag;
 ACL_VSTRING *text;
 ACL_JSON_NODE *tag_node;
 ACL_JSON_NODE *parent;
 ACL_RING children;
 unsigned short type;
# 44 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/acl_json.h"
 unsigned short depth;


 unsigned char quote;
 unsigned char left_ch;
 unsigned char right_ch;
 unsigned backslash:1;
 unsigned part_word:1;
 ACL_JSON *json;
 ACL_RING node;




 ACL_JSON_NODE *(*iter_head)(ACL_ITER*, ACL_JSON_NODE*);

 ACL_JSON_NODE *(*iter_next)(ACL_ITER*, ACL_JSON_NODE*);

 ACL_JSON_NODE *(*iter_tail)(ACL_ITER*, ACL_JSON_NODE*);

 ACL_JSON_NODE *(*iter_prev)(ACL_ITER*, ACL_JSON_NODE*);
};

enum {
 ACL_JSON_S_ROOT,
 ACL_JSON_S_OBJ,
 ACL_JSON_S_MEMBER,
 ACL_JSON_S_ARRAY,
 ACL_JSON_S_ELEMENT,
 ACL_JSON_S_PAIR,
 ACL_JSON_S_NEXT,
 ACL_JSON_S_TAG,
 ACL_JSON_S_VALUE,
 ACL_JSON_S_COLON,
 ACL_JSON_S_STRING,
 ACL_JSON_S_STREND
};

struct ACL_JSON {
 int depth;
 int node_cnt;
 ACL_JSON_NODE *root;
 int finish;
 unsigned flag;






 ACL_JSON_NODE *(*iter_head)(ACL_ITER*, ACL_JSON*);

 ACL_JSON_NODE *(*iter_next)(ACL_ITER*, ACL_JSON*);

 ACL_JSON_NODE *(*iter_tail)(ACL_ITER*, ACL_JSON*);

 ACL_JSON_NODE *(*iter_prev)(ACL_ITER*, ACL_JSON*);



 int status;

 ACL_JSON_NODE *curr_node;
 ACL_DBUF_POOL *dbuf;
 ACL_DBUF_POOL *dbuf_inner;
 size_t dbuf_keep;
};
# 119 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/acl_json.h"
 ACL_JSON_NODE *acl_json_node_alloc(ACL_JSON *json);







 int acl_json_node_delete(ACL_JSON_NODE *node);






 void acl_json_node_append(ACL_JSON_NODE *node1, ACL_JSON_NODE *node2);






 void acl_json_node_add_child(
 ACL_JSON_NODE *parent, ACL_JSON_NODE *child);
# 151 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/acl_json.h"
 ACL_JSON_NODE *acl_json_node_duplicate(
 ACL_JSON *json, ACL_JSON_NODE *from);






 ACL_JSON_NODE *acl_json_node_parent(ACL_JSON_NODE *node);






 ACL_JSON_NODE *acl_json_node_next(ACL_JSON_NODE *node);






 ACL_JSON_NODE *acl_json_node_prev(ACL_JSON_NODE *node);





 ACL_JSON *acl_json_alloc(void);







 ACL_JSON *acl_json_dbuf_alloc(ACL_DBUF_POOL *dbuf);






 ACL_JSON *acl_json_create(ACL_JSON_NODE *node);
# 203 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/acl_json.h"
 ACL_JSON *acl_json_dbuf_create(ACL_DBUF_POOL *dbuf, ACL_JSON_NODE *node);
# 213 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/acl_json.h"
 void acl_json_foreach_init(ACL_JSON *json, ACL_JSON_NODE *node);





 void acl_json_free(ACL_JSON *json);





 void acl_json_reset(ACL_JSON *json);
# 237 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/acl_json.h"
 const char* acl_json_update(ACL_JSON *json, const char *data);






 int acl_json_finish(ACL_JSON *json);
# 255 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/acl_json.h"
 ACL_JSON_NODE *acl_json_getFirstElementByTagName(
 ACL_JSON *json, const char *tag);
# 266 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/acl_json.h"
 void acl_json_free_array(ACL_ARRAY *a);
# 275 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/acl_json.h"
 ACL_ARRAY *acl_json_getElementsByTagName(
 ACL_JSON *json, const char *tag);
# 292 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/acl_json.h"
 ACL_ARRAY *acl_json_getElementsByTags(
 ACL_JSON *json, const char *tags);
# 303 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/acl_json.h"
 ACL_JSON_NODE *acl_json_create_text(ACL_JSON *json,
 const char *name, const char *value);
# 315 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/acl_json.h"
 ACL_JSON_NODE *acl_json_create_bool(ACL_JSON *json,
 const char *name, int value);
# 325 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/acl_json.h"
 ACL_JSON_NODE *acl_json_create_null(ACL_JSON *json, const char *name);
# 335 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/acl_json.h"
 ACL_JSON_NODE *acl_json_create_int64(ACL_JSON *json,
 const char *name, long long int value);
# 346 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/acl_json.h"
 ACL_JSON_NODE *acl_json_create_double(ACL_JSON *json,
 const char *name, double value);
# 358 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/acl_json.h"
 ACL_JSON_NODE *acl_json_create_double2(ACL_JSON *json,
 const char *name, double value, int precision);
# 368 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/acl_json.h"
 ACL_JSON_NODE *acl_json_create_array_text(ACL_JSON *json,
 const char *text);
# 378 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/acl_json.h"
 ACL_JSON_NODE *acl_json_create_array_int64(ACL_JSON *json,
 long long int value);







 ACL_JSON_NODE *acl_json_create_array_double(ACL_JSON *json,
 double value);
# 397 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/acl_json.h"
 ACL_JSON_NODE *acl_json_create_array_bool(ACL_JSON *json, int value);







 ACL_JSON_NODE *acl_json_create_array_null(ACL_JSON *json);







 ACL_JSON_NODE *acl_json_create_obj(ACL_JSON *json);







 ACL_JSON_NODE *acl_json_create_array(ACL_JSON *json);
# 431 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/acl_json.h"
 ACL_JSON_NODE *acl_json_create_node(ACL_JSON *json,
 const char *name, ACL_JSON_NODE *value);






 void acl_json_node_append_child(ACL_JSON_NODE *parent,
 ACL_JSON_NODE *child);
# 452 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/acl_json.h"
 ACL_VSTRING *acl_json_node_build(ACL_JSON_NODE *node, ACL_VSTRING *buf);
# 463 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/acl_json.h"
 ACL_VSTRING *acl_json_build(ACL_JSON *json, ACL_VSTRING *buf);
# 478 "/workspace/acl/lib_acl_cpp/../lib_acl/include/json/acl_json.h"
 void acl_json_building(ACL_JSON *json, size_t length,
 int (*callback)(ACL_JSON *, ACL_VSTRING *, void *), void *ctx);


}
# 27 "/workspace/acl/lib_acl_cpp/../lib_acl/include/lib_acl.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_acl/include/experiment/experiment.h" 1




extern "C" {





}
# 28 "/workspace/acl/lib_acl_cpp/../lib_acl/include/lib_acl.h" 2


}
# 14 "/workspace/acl/lib_acl_cpp/src/acl_stdafx.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/lib_protocol.h" 1



# 1 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h" 1



# 1 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http_status.h" 1





extern "C" {
# 44 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http_status.h"
}
# 5 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http_struct.h" 1







extern "C" {
# 27 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http_struct.h"
typedef long long int http_off_t;


typedef struct HTTP_HDR HTTP_HDR;
typedef struct HTTP_HDR_REQ HTTP_HDR_REQ;
typedef struct HTTP_HDR_RES HTTP_HDR_RES;
typedef struct HTTP_REQ HTTP_REQ;
typedef struct HTTP_RES HTTP_RES;
typedef struct HTTP_HDR_ENTRY HTTP_HDR_ENTRY;
# 49 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http_struct.h"
typedef int (*HTTP_HDR_NOTIFY)(int status, void *arg);
# 68 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http_struct.h"
typedef int (*HTTP_BODY_NOTIFY)(int status, char *data, int dlen, void *arg);
# 91 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http_struct.h"
struct HTTP_REQ {
 HTTP_HDR_REQ *hdr_req;
 int status;
 unsigned int flag;
 void *ctx;
 void (*free_ctx)(void*);
};

struct HTTP_RES {
 HTTP_HDR_RES *hdr_res;
 int read_cnt;
 int status;
 unsigned int flag;
 void *ctx;
 void (*free_ctx)(void*);
};


struct HTTP_HDR_ENTRY {
 char *name;
 char *value;
 int off;
};



struct HTTP_HDR {

 char proto[8];
 struct {
  unsigned int major;
  unsigned int minor;
 } version;

 http_off_t content_length;


 short keep_alive;
 short chunked;


 short cur_lines;
 short max_lines;
 short valid_lines;
 short status;
 short keep_alive_count;

 ACL_ARRAY *entry_lnk;
 void *chat_ctx;
 void (*chat_free_ctx_fn)(void*);

 short debug;
};





struct HTTP_HDR_REQ {
 HTTP_HDR hdr;

 int port;

 char method[32];
 char host[512];
 ACL_VSTRING *url_part;





 ACL_VSTRING *url_path;





 ACL_VSTRING *url_params;
 ACL_VSTRING *file_path;

 ACL_HTABLE *params_table;
 ACL_HTABLE *cookies_table;
 unsigned int flag;


};



struct HTTP_HDR_RES {
 HTTP_HDR hdr;


 int reply_status;
};


}
# 6 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h" 2


extern "C" {
# 19 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 HTTP_HDR *http_hdr_new(size_t size);






 void http_hdr_clone(const HTTP_HDR *src, HTTP_HDR *dst);





 void http_hdr_free(HTTP_HDR *hh);





 void http_hdr_reset(HTTP_HDR *hh);






 void http_hdr_append_entry(HTTP_HDR *hh, HTTP_HDR_ENTRY *entry);







 int http_hdr_parse_version(HTTP_HDR *hh, const char *data);






 int http_hdr_parse(HTTP_HDR *hh);







 HTTP_HDR_ENTRY *http_hdr_entry_build(const char *name, const char *value);






 HTTP_HDR_ENTRY *http_hdr_entry_new(const char *data);
 HTTP_HDR_ENTRY *http_hdr_entry_head(char *data);
 HTTP_HDR_ENTRY *http_hdr_entry_new2(char *data);







 HTTP_HDR_ENTRY *http_hdr_entry(const HTTP_HDR *hh, const char *name);
# 94 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 char *http_hdr_entry_value(const HTTP_HDR *hh, const char *name);
# 105 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 int http_hdr_entry_replace(HTTP_HDR *hh, const char *name, const char *value, int force);
# 116 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 int http_hdr_entry_replace2(HTTP_HDR *hh, const char *name,
        const char *from, const char *to, int ignore_case);






 void http_hdr_entry_off(HTTP_HDR *hh, const char *name);






 void http_hdr_print(const HTTP_HDR *hh, const char *msg);







 void http_hdr_fprint(ACL_VSTREAM *fp, const HTTP_HDR *hh, const char *msg);







 void http_hdr_sprint(ACL_VSTRING *bf, const HTTP_HDR *hh, const char *msg);
# 156 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 void http_uri_correct(int onoff);





 HTTP_HDR_REQ *http_hdr_req_new(void);
# 176 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 HTTP_HDR_REQ *http_hdr_req_create(const char *url,
  const char *method, const char *version);







 HTTP_HDR_REQ *http_hdr_req_clone(const HTTP_HDR_REQ* hdr_req);
# 195 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 HTTP_HDR_REQ *http_hdr_req_rewrite(const HTTP_HDR_REQ *hh, const char *url);
# 205 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 int http_hdr_req_rewrite2(HTTP_HDR_REQ *hh, const char *url);





 void http_hdr_req_free(HTTP_HDR_REQ *hh);





 void http_hdr_req_reset(HTTP_HDR_REQ *hh);






 int http_hdr_req_cookies_parse(HTTP_HDR_REQ *hh);
# 235 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 int http_hdr_req_line_parse(HTTP_HDR_REQ *hh);






 int http_hdr_req_parse(HTTP_HDR_REQ *hh);
# 253 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 int http_hdr_req_parse3(HTTP_HDR_REQ *hh, int parse_params, int parse_cookie);







 const char *http_hdr_req_cookie_get(HTTP_HDR_REQ *hh, const char *name);






 const char *http_hdr_req_method(const HTTP_HDR_REQ *hh);
# 277 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 const char *http_hdr_req_param(const HTTP_HDR_REQ *hh, const char *name);
# 290 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 const char *http_hdr_req_url_part(const HTTP_HDR_REQ *hh);
# 303 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 const char *http_hdr_req_url_path(const HTTP_HDR_REQ *hh);







 const char *http_hdr_req_host(const HTTP_HDR_REQ *hh);
# 356 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 const char *http_hdr_req_url(const HTTP_HDR_REQ *hh);
# 367 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 int http_hdr_req_range(const HTTP_HDR_REQ *hdr_req,
 http_off_t *range_from, http_off_t *range_to);
# 379 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 int http_hdr_res_status_parse(HTTP_HDR_RES *hh, const char *dbuf);





 HTTP_HDR_RES *http_hdr_res_new(void);






 HTTP_HDR_RES *http_hdr_res_clone(const HTTP_HDR_RES *hdr_res);





 void http_hdr_res_free(HTTP_HDR_RES *hh);





 void http_hdr_res_reset(HTTP_HDR_RES *hh);





 int http_hdr_res_parse(HTTP_HDR_RES *hdr_res);
# 423 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 int http_hdr_res_range(const HTTP_HDR_RES *hdr_res,
 http_off_t *range_from, http_off_t *range_to, http_off_t *total_length);
# 434 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 const char *http_mkrfc1123(char *buf, size_t size, time_t t);
# 448 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 void http_hdr_req_get_async(HTTP_HDR_REQ *hdr, ACL_ASTREAM *astream,
  HTTP_HDR_NOTIFY notify, void *arg, int timeout);
# 460 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 void http_hdr_res_get_async(HTTP_HDR_RES *hdr, ACL_ASTREAM *astream,
  HTTP_HDR_NOTIFY notify, void *arg, int timeout);
# 472 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 void http_req_body_get_async(HTTP_REQ *request, ACL_ASTREAM *astream,
   HTTP_BODY_NOTIFY notify, void *arg, int timeout);
# 483 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 void http_res_body_get_async(HTTP_RES *respond, ACL_ASTREAM *astream,
  HTTP_BODY_NOTIFY notify, void *arg, int timeout);
# 497 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 int http_hdr_req_get_sync(HTTP_HDR_REQ *hdr,
   ACL_VSTREAM *stream, int timeout);
# 508 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 int http_hdr_res_get_sync(HTTP_HDR_RES *hdr,
  ACL_VSTREAM *stream, int timeout);
# 522 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 http_off_t http_req_body_get_sync(HTTP_REQ *request, ACL_VSTREAM *stream,
  void *buf, int size);
# 537 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 http_off_t http_res_body_get_sync(HTTP_RES *respond, ACL_VSTREAM *stream,
  void *buf, int size);
# 547 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 void http_chat_sync_reqctl(HTTP_REQ *request, int name, ...);







 void http_chat_sync_resctl(HTTP_RES *respond, int name, ...);
# 567 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 HTTP_REQ *http_req_new(HTTP_HDR_REQ *hdr_req);





 void http_req_free(HTTP_REQ *request);
# 583 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 HTTP_RES *http_res_new(HTTP_HDR_RES *hdr_res);





 void http_res_free(HTTP_RES *respond);
# 600 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 void http_hdr_put_str(HTTP_HDR *hdr, const char *name, const char *value);







 void http_hdr_put_int(HTTP_HDR *hdr, const char *name, int value);
# 619 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 void __attribute__((format(printf,3,4)))
 http_hdr_put_fmt(HTTP_HDR *hdr, const char *name, const char *fmt, ...);
# 629 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 void http_hdr_put_time(HTTP_HDR *hdr, const char *name, time_t t);






 int http_hdr_set_keepalive(const HTTP_HDR_REQ *req, HTTP_HDR_RES *res);






 void http_hdr_res_init(HTTP_HDR_RES *hdr_res, int status);






 HTTP_HDR_RES *http_hdr_res_static(int status);






 HTTP_HDR_RES *http_hdr_res_error(int status);






 void http_hdr_build(const HTTP_HDR *hdr, ACL_VSTRING *strbuf);






 void http_hdr_build_request(const HTTP_HDR_REQ *hdr_req, ACL_VSTRING *strbuf);
# 681 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 const char *http_status_line(int status);
# 690 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 void http_tmpl_load(const char *tmpl_path);






 const ACL_VSTRING *http_tmpl_get(int status);






 const char *http_tmpl_title(int status);






 int http_tmpl_size(int status);
# 720 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http.h"
 void http_init(const char *tmpl_path);






 void http_hdr_cache(int max);





 void http_buf_size_set(http_off_t size);





 http_off_t http_buf_size_get(void);


}
# 5 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/lib_protocol.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http_util.h" 1






extern "C" {


typedef struct HTTP_UTIL {
 HTTP_HDR_REQ *hdr_req;
 HTTP_HDR_RES *hdr_res;
 HTTP_RES *http_res;
 char server_addr[256];
 ACL_VSTREAM *stream;
 int conn_timeout;
 int rw_timeout;
 ACL_VSTRING *req_buf;
 int res_body_dlen;
 ACL_VSTREAM *dump_stream;
 unsigned int flag;




} HTTP_UTIL;







 HTTP_UTIL *http_util_req_new(const char *url, const char *method);






 HTTP_UTIL *http_util_res_new(int status);





 void http_util_free(HTTP_UTIL *http_util);







 void http_util_set_req_entry(HTTP_UTIL *http_util, const char *name, const char *value);






 void http_util_off_req_entry(HTTP_UTIL *http_util, const char *name);







 char *http_util_get_req_value(HTTP_UTIL *http_util, const char *name);







 HTTP_HDR_ENTRY *http_util_get_req_entry(HTTP_UTIL *http_util, const char *name);






 void http_util_set_req_content_length(HTTP_UTIL *http_util, int len);






 void http_util_set_req_keep_alive(HTTP_UTIL *http_util, int timeout);






 void http_util_set_req_connection(HTTP_UTIL *http_util, const char *value);






 void http_util_set_req_refer(HTTP_UTIL *http_util, const char *refer);







 void http_util_set_req_cookie(HTTP_UTIL *http_util, const char *name, const char *value);







 void http_util_set_req_proxy(HTTP_UTIL *http_util, const char *proxy);






 void http_util_set_dump_stream(HTTP_UTIL *http_util, ACL_VSTREAM *stream);







 int http_util_set_dump_file(HTTP_UTIL *http_util, const char *filename);







 int http_util_req_open(HTTP_UTIL *http_util);
# 156 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http_util.h"
 int http_util_put_req_data(HTTP_UTIL *http_util, const char *data, size_t dlen);






 int http_util_get_res_hdr(HTTP_UTIL *http_util);







 char *http_util_get_res_value(HTTP_UTIL *http_util, const char *name);







 HTTP_HDR_ENTRY *http_util_get_res_entry(HTTP_UTIL *http_util, const char *name);







 void http_util_set_res_entry(HTTP_UTIL *http_util, const char *name, const char *value);






 void http_util_off_res_entry(HTTP_UTIL *http_util, const char *name);






 int http_util_has_res_body(HTTP_UTIL *http_util);
# 212 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/http/lib_http_util.h"
 int http_util_get_res_body(HTTP_UTIL *http_util, char *buf, size_t size);







 int http_util_dump_url(const char *url, const char *dump);







 int http_util_dump_url_to_stream(const char *url, ACL_VSTREAM *stream);


}
# 6 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/lib_protocol.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/icmp/lib_icmp.h" 1




# 1 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/icmp/lib_icmp_type.h" 1
# 9 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/icmp/lib_icmp_type.h"
typedef struct ICMP_STREAM ICMP_STREAM;
typedef struct ICMP_CHAT ICMP_CHAT;
typedef struct ICMP_STAT ICMP_STAT;
typedef struct ICMP_HOST ICMP_HOST;
typedef struct ICMP_PKT ICMP_PKT;
typedef struct ICMP_PKT_STATUS ICMP_PKT_STATUS;


struct ICMP_STAT {
 double tmin;
 double tmax;
 double tsum;
 double tave;
 size_t nsent;
 size_t nreceived;
 double loss;
};





struct ICMP_PKT_STATUS {
 size_t reply_len;
 char from_ip[64];

 double rtt;
 unsigned short seq;
 unsigned char ttl;
 unsigned int gid;
 char *data;
 size_t dlen;
 char status;





 ICMP_PKT *pkt;
};


struct ICMP_HOST {
 ICMP_STAT icmp_stat;
 char dest_ip[32];
 char domain[64];
 struct sockaddr_in dest;
 struct sockaddr_in from;
 int from_len;
 int delay;
 int timeout;
 size_t dlen;
 size_t nsent;

 ICMP_PKT **pkts;
 size_t npkt;
 size_t ipkt;

 ACL_RING host_ring;
 ICMP_CHAT *chat;
 char enable_log;


 void (*stat_respond)(ICMP_PKT_STATUS*, void*);


 void (*stat_timeout)(ICMP_PKT_STATUS*, void*);


 void (*stat_unreach)(ICMP_PKT_STATUS*, void*);


 void (*stat_finish)(ICMP_HOST*, void*);


 void *arg;
};
# 6 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/icmp/lib_icmp.h" 2


extern "C" {
# 35 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/icmp/lib_icmp.h"
 ICMP_CHAT *icmp_chat_create(ACL_AIO *aio, int check_tid);





 void icmp_chat_free(ICMP_CHAT *chat);





 void icmp_chat(ICMP_HOST* host);






 int icmp_chat_size(ICMP_CHAT *chat);






 int icmp_chat_count(ICMP_CHAT *chat);






 int icmp_chat_finish(ICMP_CHAT *chat);






 unsigned short icmp_chat_seqno(ICMP_CHAT *chat);






 void icmp_stat(ICMP_CHAT *chat);






 void icmp_stat_host(ICMP_HOST *host, int show_flag);
# 103 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/icmp/lib_icmp.h"
 ICMP_HOST* icmp_host_new(ICMP_CHAT *chat, const char *domain,
 const char *ip, size_t npkt, size_t dlen, int delay, int timeout);





 void icmp_host_free(ICMP_HOST *host);
# 121 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/icmp/lib_icmp.h"
 void icmp_host_set(ICMP_HOST *host, void *arg,
 void (*stat_respond)(ICMP_PKT_STATUS*, void*),
 void (*stat_timeout)(ICMP_PKT_STATUS*, void*),
 void (*stat_unreach)(ICMP_PKT_STATUS*, void*),
 void (*stat_finish)(ICMP_HOST*, void*));
# 137 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/icmp/lib_icmp.h"
 void icmp_ping_one(ICMP_CHAT *chat, const char *domain,
 const char *ip, size_t npkt, int delay, int timeout);







 ICMP_STREAM* icmp_stream_open(ACL_AIO *aio);
 void icmp_stream_close(ICMP_STREAM* is);
 ACL_VSTREAM *icmp_vstream(ICMP_STREAM *is);
 void icmp_stream_from(ICMP_STREAM *is, struct sockaddr_in *addr);
 void icmp_stream_dest(ICMP_STREAM *is, struct sockaddr_in *addr);
 void icmp_stream_set_dest(ICMP_STREAM *is, struct sockaddr_in addr);

 ICMP_HOST *icmp_host_alloc(ICMP_CHAT *chat, const char *domain,
  const char *ip);
 void icmp_host_init(ICMP_HOST *host, unsigned char type,
  unsigned char code, size_t npkt, size_t dlen,
  int delay, int timeout);

 ICMP_PKT *icmp_pkt_alloc(void);
 void icmp_pkt_free(ICMP_PKT *ipkt);
 void icmp_pkt_pack(ICMP_PKT *pkt, unsigned char type,
  unsigned char code, unsigned short id,
  const void *payload, size_t payload_len);
 void icmp_pkt_build(ICMP_PKT *pkt, unsigned short seq);
 void icmp_pkt_save_status(ICMP_PKT* to, const ICMP_PKT* from);
 int icmp_pkt_unpack(struct sockaddr_in from, const char *buf,
  int bytes, ICMP_PKT *pkt);
 ICMP_PKT* icmp_pkt_check(const ICMP_HOST *host, const ICMP_PKT *pkt);

 unsigned char icmp_pkt_type(const ICMP_PKT *pkt);
 unsigned char icmp_pkt_code(const ICMP_PKT *pkt);
 unsigned short icmp_pkt_cksum(const ICMP_PKT *pkt);
 unsigned short icmp_pkt_id(const ICMP_PKT *pkt);
 unsigned short icmp_pkt_seq(const ICMP_PKT *pkt);
 unsigned int icmp_pkt_gid(const ICMP_PKT *pkt);
 const ICMP_PKT *icmp_pkt_peer(const ICMP_PKT *pkt);
 const ICMP_PKT_STATUS *icmp_pkt_status(const ICMP_PKT *pkt);
 size_t icmp_pkt_len(const ICMP_PKT *pkt);
 size_t icmp_pkt_wlen(const ICMP_PKT *pkt);
 size_t icmp_pkt_payload(const ICMP_PKT *pkt, char *buf, size_t size);

 size_t icmp_pkt_set_extra(ICMP_PKT *pkt,
  const void *data, size_t len);
 void icmp_pkt_set_type(ICMP_PKT *pkt, unsigned char type);
 void icmp_pkt_set_code(ICMP_PKT *pkt, unsigned char code);
 void icmp_pkt_set_cksum(ICMP_PKT *pkt, unsigned short cksum);
 void icmp_pkt_set_id(ICMP_PKT *pkt, unsigned short id);
 void icmp_pkt_set_seq(ICMP_PKT *pkt, unsigned short seq);
 void icmp_pkt_set_data(ICMP_PKT *pkt, void *data, size_t size);


}
# 7 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/lib_protocol.h" 2
# 1 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/smtp/smtp_client.h" 1






extern "C" {
# 26 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/smtp/smtp_client.h"
typedef struct SMTP_CLIENT {
 ACL_VSTREAM *conn;
 int smtp_code;
 char* buf;
 int size;
 unsigned int flag;







 int message_size_limit;
} SMTP_CLIENT;
# 50 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/smtp/smtp_client.h"
 SMTP_CLIENT *smtp_open(const char *addr, int conn_timeout,
 int rw_timeout, int line_limit);





 void smtp_close(SMTP_CLIENT *client);







 int smtp_get_banner(SMTP_CLIENT *client);
# 76 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/smtp/smtp_client.h"
 int smtp_greet(SMTP_CLIENT *client, const char* name, int ehlo);
# 85 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/smtp/smtp_client.h"
 int smtp_helo(SMTP_CLIENT *client, const char *helo);
# 94 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/smtp/smtp_client.h"
 int smtp_ehlo(SMTP_CLIENT *client, const char *ehlo);
# 104 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/smtp/smtp_client.h"
 int smtp_auth(SMTP_CLIENT *client, const char *user, const char *pass);
# 113 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/smtp/smtp_client.h"
 int smtp_mail(SMTP_CLIENT *client, const char *from);
# 122 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/smtp/smtp_client.h"
 int smtp_rcpt(SMTP_CLIENT *client, const char *to);







 int smtp_data(SMTP_CLIENT *client);
# 140 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/smtp/smtp_client.h"
 int smtp_send(SMTP_CLIENT *client, const char* src, size_t len);
# 150 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/smtp/smtp_client.h"
 int smtp_printf(SMTP_CLIENT *client, const char* fmt, ...);







 int smtp_data_end(SMTP_CLIENT *client);
# 167 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/smtp/smtp_client.h"
 int smtp_send_file(SMTP_CLIENT *client, const char *filepath);
# 176 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/smtp/smtp_client.h"
 int smtp_send_stream(SMTP_CLIENT *client, ACL_VSTREAM *in);







 int smtp_quit(SMTP_CLIENT *client);







 int smtp_noop(SMTP_CLIENT *client);







 int smtp_rset(SMTP_CLIENT *client);


}
# 8 "/workspace/acl/lib_acl_cpp/../lib_protocol/include/lib_protocol.h" 2
# 15 "/workspace/acl/lib_acl_cpp/src/acl_stdafx.hpp" 2

# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 17 "/workspace/acl/lib_acl_cpp/src/acl_stdafx.hpp" 2




# 1 "/usr/include/assert.h" 1 3 4
# 22 "/workspace/acl/lib_acl_cpp/src/acl_stdafx.hpp" 2
# 1 "/usr/include/c++/7/vector" 1 3
# 58 "/usr/include/c++/7/vector" 3
       
# 59 "/usr/include/c++/7/vector" 3

# 1 "/usr/include/c++/7/bits/stl_algobase.h" 1 3
# 60 "/usr/include/c++/7/bits/stl_algobase.h" 3
# 1 "/usr/include/c++/7/bits/functexcept.h" 1 3
# 40 "/usr/include/c++/7/bits/functexcept.h" 3
# 1 "/usr/include/c++/7/bits/exception_defines.h" 1 3
# 41 "/usr/include/c++/7/bits/functexcept.h" 2 3


# 42 "/usr/include/c++/7/bits/functexcept.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  void
  __throw_bad_exception(void) __attribute__((__noreturn__));


  void
  __throw_bad_alloc(void) __attribute__((__noreturn__));


  void
  __throw_bad_cast(void) __attribute__((__noreturn__));

  void
  __throw_bad_typeid(void) __attribute__((__noreturn__));


  void
  __throw_logic_error(const char*) __attribute__((__noreturn__));

  void
  __throw_domain_error(const char*) __attribute__((__noreturn__));

  void
  __throw_invalid_argument(const char*) __attribute__((__noreturn__));

  void
  __throw_length_error(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__))
    __attribute__((__format__(__gnu_printf__, 1, 2)));

  void
  __throw_runtime_error(const char*) __attribute__((__noreturn__));

  void
  __throw_range_error(const char*) __attribute__((__noreturn__));

  void
  __throw_overflow_error(const char*) __attribute__((__noreturn__));

  void
  __throw_underflow_error(const char*) __attribute__((__noreturn__));


  void
  __throw_ios_failure(const char*) __attribute__((__noreturn__));

  void
  __throw_system_error(int) __attribute__((__noreturn__));

  void
  __throw_future_error(int) __attribute__((__noreturn__));


  void
  __throw_bad_function_call() __attribute__((__noreturn__));


}
# 61 "/usr/include/c++/7/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/7/bits/cpp_type_traits.h" 1 3
# 35 "/usr/include/c++/7/bits/cpp_type_traits.h" 3
       
# 36 "/usr/include/c++/7/bits/cpp_type_traits.h" 3
# 67 "/usr/include/c++/7/bits/cpp_type_traits.h" 3
extern "C++" {

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };





  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 261 "/usr/include/c++/7/bits/cpp_type_traits.h" 3
template<> struct __is_integer<__int128> { enum { __value = 1 }; typedef __true_type __type; }; template<> struct __is_integer<unsigned __int128> { enum { __value = 1 }; typedef __true_type __type; };
# 278 "/usr/include/c++/7/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };



  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
    { return __it; }


}
}
# 62 "/usr/include/c++/7/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/7/ext/type_traits.h" 1 3
# 32 "/usr/include/c++/7/ext/type_traits.h" 3
       
# 33 "/usr/include/c++/7/ext/type_traits.h" 3




extern "C++" {

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }


  inline bool
  __is_null_pointer(std::nullptr_t)
  { return true; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
}
# 63 "/usr/include/c++/7/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/7/ext/numeric_traits.h" 1 3
# 32 "/usr/include/c++/7/ext/numeric_traits.h" 3
       
# 33 "/usr/include/c++/7/ext/numeric_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 54 "/usr/include/c++/7/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_integer
    {

      static const _Value __min = (((_Value)(-1) < 0) ? (_Value)1 << (sizeof(_Value) * 8 - ((_Value)(-1) < 0)) : (_Value)0);
      static const _Value __max = (((_Value)(-1) < 0) ? (((((_Value)1 << ((sizeof(_Value) * 8 - ((_Value)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(_Value)0);



      static const bool __is_signed = ((_Value)(-1) < 0);
      static const int __digits = (sizeof(_Value) * 8 - ((_Value)(-1) < 0));
    };

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__min;

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__max;

  template<typename _Value>
    const bool __numeric_traits_integer<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_integer<_Value>::__digits;
# 99 "/usr/include/c++/7/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_floating
    {

      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 64) * 643L / 2136);


      static const bool __is_signed = true;
      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 18);
      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 4932);
    };

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_digits10;

  template<typename _Value>
    const bool __numeric_traits_floating<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__digits10;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_exponent10;

  template<typename _Value>
    struct __numeric_traits
    : public __conditional_type<std::__is_integer<_Value>::__value,
    __numeric_traits_integer<_Value>,
    __numeric_traits_floating<_Value> >::__type
    { };


}
# 64 "/usr/include/c++/7/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/7/bits/stl_pair.h" 1 3
# 59 "/usr/include/c++/7/bits/stl_pair.h" 3
# 1 "/usr/include/c++/7/bits/move.h" 1 3
# 34 "/usr/include/c++/7/bits/move.h" 3
# 1 "/usr/include/c++/7/bits/concept_check.h" 1 3
# 33 "/usr/include/c++/7/bits/concept_check.h" 3
       
# 34 "/usr/include/c++/7/bits/concept_check.h" 3
# 35 "/usr/include/c++/7/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Tp>
    inline constexpr _Tp*
    __addressof(_Tp& __r) noexcept
    { return __builtin_addressof(__r); }


}


# 1 "/usr/include/c++/7/type_traits" 1 3
# 32 "/usr/include/c++/7/type_traits" 3
       
# 33 "/usr/include/c++/7/type_traits" 3
# 42 "/usr/include/c++/7/type_traits" 3
namespace std
{
  typedef short unsigned int uint_least16_t;
  typedef unsigned int uint_least32_t;
}





namespace std __attribute__ ((__visibility__ ("default")))
{

# 68 "/usr/include/c++/7/type_traits" 3
  template<typename _Tp, _Tp __v>
    struct integral_constant
    {
      static constexpr _Tp value = __v;
      typedef _Tp value_type;
      typedef integral_constant<_Tp, __v> type;
      constexpr operator value_type() const noexcept { return value; }




      constexpr value_type operator()() const noexcept { return value; }

    };

  template<typename _Tp, _Tp __v>
    constexpr _Tp integral_constant<_Tp, __v>::value;


  typedef integral_constant<bool, true> true_type;


  typedef integral_constant<bool, false> false_type;

  template<bool __v>
    using __bool_constant = integral_constant<bool, __v>;
# 103 "/usr/include/c++/7/type_traits" 3
  template<bool, typename, typename>
    struct conditional;

  template<typename...>
    struct __or_;

  template<>
    struct __or_<>
    : public false_type
    { };

  template<typename _B1>
    struct __or_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __or_<_B1, _B2>
    : public conditional<_B1::value, _B1, _B2>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __or_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, _B1, __or_<_B2, _B3, _Bn...>>::type
    { };

  template<typename...>
    struct __and_;

  template<>
    struct __and_<>
    : public true_type
    { };

  template<typename _B1>
    struct __and_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __and_<_B1, _B2>
    : public conditional<_B1::value, _B2, _B1>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __and_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, __and_<_B2, _B3, _Bn...>, _B1>::type
    { };

  template<typename _Pp>
    struct __not_
    : public __bool_constant<!bool(_Pp::value)>
    { };
# 192 "/usr/include/c++/7/type_traits" 3
  template<typename _Tp>
    struct __success_type
    { typedef _Tp type; };

  struct __failure_type
  { };



  template<typename>
    struct remove_cv;

  template<typename>
    struct __is_void_helper
    : public false_type { };

  template<>
    struct __is_void_helper<void>
    : public true_type { };


  template<typename _Tp>
    struct is_void
    : public __is_void_helper<typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_integral_helper
    : public false_type { };

  template<>
    struct __is_integral_helper<bool>
    : public true_type { };

  template<>
    struct __is_integral_helper<char>
    : public true_type { };

  template<>
    struct __is_integral_helper<signed char>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned char>
    : public true_type { };


  template<>
    struct __is_integral_helper<wchar_t>
    : public true_type { };


  template<>
    struct __is_integral_helper<char16_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<char32_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<short>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned short>
    : public true_type { };

  template<>
    struct __is_integral_helper<int>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned int>
    : public true_type { };

  template<>
    struct __is_integral_helper<long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long>
    : public true_type { };

  template<>
    struct __is_integral_helper<long long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long long>
    : public true_type { };




  template<>
    struct __is_integral_helper<__int128>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned __int128>
    : public true_type { };
# 324 "/usr/include/c++/7/type_traits" 3
  template<typename _Tp>
    struct is_integral
    : public __is_integral_helper<typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_floating_point_helper
    : public false_type { };

  template<>
    struct __is_floating_point_helper<float>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<double>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<long double>
    : public true_type { };


  template<>
    struct __is_floating_point_helper<__float128>
    : public true_type { };



  template<typename _Tp>
    struct is_floating_point
    : public __is_floating_point_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename>
    struct is_array
    : public false_type { };

  template<typename _Tp, std::size_t _Size>
    struct is_array<_Tp[_Size]>
    : public true_type { };

  template<typename _Tp>
    struct is_array<_Tp[]>
    : public true_type { };

  template<typename>
    struct __is_pointer_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_pointer_helper<_Tp*>
    : public true_type { };


  template<typename _Tp>
    struct is_pointer
    : public __is_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename>
    struct is_lvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_lvalue_reference<_Tp&>
    : public true_type { };


  template<typename>
    struct is_rvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_rvalue_reference<_Tp&&>
    : public true_type { };

  template<typename>
    struct is_function;

  template<typename>
    struct __is_member_object_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_object_pointer_helper<_Tp _Cp::*>
    : public integral_constant<bool, !is_function<_Tp>::value> { };


  template<typename _Tp>
    struct is_member_object_pointer
    : public __is_member_object_pointer_helper<
    typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_member_function_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_function_pointer_helper<_Tp _Cp::*>
    : public integral_constant<bool, is_function<_Tp>::value> { };


  template<typename _Tp>
    struct is_member_function_pointer
    : public __is_member_function_pointer_helper<
    typename remove_cv<_Tp>::type>::type
    { };


  template<typename _Tp>
    struct is_enum
    : public integral_constant<bool, __is_enum(_Tp)>
    { };


  template<typename _Tp>
    struct is_union
    : public integral_constant<bool, __is_union(_Tp)>
    { };


  template<typename _Tp>
    struct is_class
    : public integral_constant<bool, __is_class(_Tp)>
    { };


  template<typename>
    struct is_function
    : public false_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) volatile && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) volatile && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const volatile && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const volatile && >
    : public true_type { };



  template<typename>
    struct __is_null_pointer_helper
    : public false_type { };

  template<>
    struct __is_null_pointer_helper<std::nullptr_t>
    : public true_type { };


  template<typename _Tp>
    struct is_null_pointer
    : public __is_null_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename _Tp>
    struct __is_nullptr_t
    : public is_null_pointer<_Tp>
    { };




  template<typename _Tp>
    struct is_reference
    : public __or_<is_lvalue_reference<_Tp>,
                   is_rvalue_reference<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_arithmetic
    : public __or_<is_integral<_Tp>, is_floating_point<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_fundamental
    : public __or_<is_arithmetic<_Tp>, is_void<_Tp>,
     is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_object
    : public __not_<__or_<is_function<_Tp>, is_reference<_Tp>,
                          is_void<_Tp>>>::type
    { };

  template<typename>
    struct is_member_pointer;


  template<typename _Tp>
    struct is_scalar
    : public __or_<is_arithmetic<_Tp>, is_enum<_Tp>, is_pointer<_Tp>,
                   is_member_pointer<_Tp>, is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_compound
    : public integral_constant<bool, !is_fundamental<_Tp>::value> { };

  template<typename _Tp>
    struct __is_member_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_pointer_helper<_Tp _Cp::*>
    : public true_type { };


  template<typename _Tp>
    struct is_member_pointer
    : public __is_member_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };



  template<typename _Tp>
    struct __is_referenceable
    : public __or_<is_object<_Tp>, is_reference<_Tp>>::type
    { };

  template<typename _Res, typename... _Args >
    struct __is_referenceable<_Res(_Args...) >
    : public true_type
    { };

  template<typename _Res, typename... _Args >
    struct __is_referenceable<_Res(_Args......) >
    : public true_type
    { };




  template<typename>
    struct is_const
    : public false_type { };

  template<typename _Tp>
    struct is_const<_Tp const>
    : public true_type { };


  template<typename>
    struct is_volatile
    : public false_type { };

  template<typename _Tp>
    struct is_volatile<_Tp volatile>
    : public true_type { };


  template<typename _Tp>
    struct is_trivial
    : public integral_constant<bool, __is_trivial(_Tp)>
    { };


  template<typename _Tp>
    struct is_trivially_copyable
    : public integral_constant<bool, __is_trivially_copyable(_Tp)>
    { };


  template<typename _Tp>
    struct is_standard_layout
    : public integral_constant<bool, __is_standard_layout(_Tp)>
    { };



  template<typename _Tp>
    struct is_pod
    : public integral_constant<bool, __is_pod(_Tp)>
    { };


  template<typename _Tp>
    struct is_literal_type
    : public integral_constant<bool, __is_literal_type(_Tp)>
    { };


  template<typename _Tp>
    struct is_empty
    : public integral_constant<bool, __is_empty(_Tp)>
    { };


  template<typename _Tp>
    struct is_polymorphic
    : public integral_constant<bool, __is_polymorphic(_Tp)>
    { };




  template<typename _Tp>
    struct is_final
    : public integral_constant<bool, __is_final(_Tp)>
    { };



  template<typename _Tp>
    struct is_abstract
    : public integral_constant<bool, __is_abstract(_Tp)>
    { };

  template<typename _Tp,
    bool = is_arithmetic<_Tp>::value>
    struct __is_signed_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_signed_helper<_Tp, true>
    : public integral_constant<bool, _Tp(-1) < _Tp(0)>
    { };


  template<typename _Tp>
    struct is_signed
    : public __is_signed_helper<_Tp>::type
    { };


  template<typename _Tp>
    struct is_unsigned
    : public __and_<is_arithmetic<_Tp>, __not_<is_signed<_Tp>>>
    { };




  template<typename>
    struct add_rvalue_reference;





  template<typename _Tp>
    typename add_rvalue_reference<_Tp>::type declval() noexcept;

  template<typename, unsigned = 0>
    struct extent;

  template<typename>
    struct remove_all_extents;

  template<typename _Tp>
    struct __is_array_known_bounds
    : public integral_constant<bool, (extent<_Tp>::value > 0)>
    { };

  template<typename _Tp>
    struct __is_array_unknown_bounds
    : public __and_<is_array<_Tp>, __not_<extent<_Tp>>>
    { };






  struct __do_is_destructible_impl
  {
    template<typename _Tp, typename = decltype(declval<_Tp&>().~_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_destructible_impl
    : public __do_is_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_destructible_safe;

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, false>
    : public __is_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_destructible
    : public __is_destructible_safe<_Tp>::type
    { };





  struct __do_is_nt_destructible_impl
  {
    template<typename _Tp>
      static integral_constant<bool, noexcept(declval<_Tp&>().~_Tp())>
        __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_nt_destructible_impl
    : public __do_is_nt_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_nt_destructible_safe;

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, false>
    : public __is_nt_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_nothrow_destructible
    : public __is_nt_destructible_safe<_Tp>::type
    { };

  struct __do_is_default_constructible_impl
  {
    template<typename _Tp, typename = decltype(_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_default_constructible_impl
    : public __do_is_default_constructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_default_constructible_atom
    : public __and_<__not_<is_void<_Tp>>,
                    __is_default_constructible_impl<_Tp>>
    { };

  template<typename _Tp, bool = is_array<_Tp>::value>
    struct __is_default_constructible_safe;






  template<typename _Tp>
    struct __is_default_constructible_safe<_Tp, true>
    : public __and_<__is_array_known_bounds<_Tp>,
      __is_default_constructible_atom<typename
                      remove_all_extents<_Tp>::type>>
    { };

  template<typename _Tp>
    struct __is_default_constructible_safe<_Tp, false>
    : public __is_default_constructible_atom<_Tp>::type
    { };


  template<typename _Tp>
    struct is_default_constructible
    : public __is_default_constructible_safe<_Tp>::type
    { };
# 936 "/usr/include/c++/7/type_traits" 3
  struct __do_is_static_castable_impl
  {
    template<typename _From, typename _To, typename
             = decltype(static_cast<_To>(declval<_From>()))>
      static true_type __test(int);

    template<typename, typename>
      static false_type __test(...);
  };

  template<typename _From, typename _To>
    struct __is_static_castable_impl
    : public __do_is_static_castable_impl
    {
      typedef decltype(__test<_From, _To>(0)) type;
    };

  template<typename _From, typename _To>
    struct __is_static_castable_safe
    : public __is_static_castable_impl<_From, _To>::type
    { };


  template<typename _From, typename _To>
    struct __is_static_castable
    : public integral_constant<bool, (__is_static_castable_safe<
          _From, _To>::value)>
    { };






  struct __do_is_direct_constructible_impl
  {
    template<typename _Tp, typename _Arg, typename
      = decltype(::new _Tp(declval<_Arg>()))>
      static true_type __test(int);

    template<typename, typename>
      static false_type __test(...);
  };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_impl
    : public __do_is_direct_constructible_impl
    {
      typedef decltype(__test<_Tp, _Arg>(0)) type;
    };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_new_safe
    : public __and_<is_destructible<_Tp>,
                    __is_direct_constructible_impl<_Tp, _Arg>>
    { };

  template<typename, typename>
    struct is_same;

  template<typename, typename>
    struct is_base_of;

  template<typename>
    struct remove_reference;

  template<typename _From, typename _To, bool
           = __not_<__or_<is_void<_From>,
                          is_function<_From>>>::value>
    struct __is_base_to_derived_ref;

  template<typename _Tp, typename... _Args>
    struct is_constructible;



  template<typename _From, typename _To>
    struct __is_base_to_derived_ref<_From, _To, true>
    {
      typedef typename remove_cv<typename remove_reference<_From
        >::type>::type __src_t;
      typedef typename remove_cv<typename remove_reference<_To
        >::type>::type __dst_t;
      typedef __and_<__not_<is_same<__src_t, __dst_t>>,
       is_base_of<__src_t, __dst_t>,
       __not_<is_constructible<__dst_t, _From>>> type;
      static constexpr bool value = type::value;
    };

  template<typename _From, typename _To>
    struct __is_base_to_derived_ref<_From, _To, false>
    : public false_type
    { };

  template<typename _From, typename _To, bool
           = __and_<is_lvalue_reference<_From>,
                    is_rvalue_reference<_To>>::value>
    struct __is_lvalue_to_rvalue_ref;



  template<typename _From, typename _To>
    struct __is_lvalue_to_rvalue_ref<_From, _To, true>
    {
      typedef typename remove_cv<typename remove_reference<
        _From>::type>::type __src_t;
      typedef typename remove_cv<typename remove_reference<
        _To>::type>::type __dst_t;
      typedef __and_<__not_<is_function<__src_t>>,
        __or_<is_same<__src_t, __dst_t>,
      is_base_of<__dst_t, __src_t>>> type;
      static constexpr bool value = type::value;
    };

  template<typename _From, typename _To>
    struct __is_lvalue_to_rvalue_ref<_From, _To, false>
    : public false_type
    { };







  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_ref_cast
    : public __and_<__is_static_castable<_Arg, _Tp>,
                    __not_<__or_<__is_base_to_derived_ref<_Arg, _Tp>,
                                 __is_lvalue_to_rvalue_ref<_Arg, _Tp>
                   >>>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_new
    : public conditional<is_reference<_Tp>::value,
    __is_direct_constructible_ref_cast<_Tp, _Arg>,
    __is_direct_constructible_new_safe<_Tp, _Arg>
    >::type
    { };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible
    : public __is_direct_constructible_new<_Tp, _Arg>::type
    { };






  struct __do_is_nary_constructible_impl
  {
    template<typename _Tp, typename... _Args, typename
             = decltype(_Tp(declval<_Args>()...))>
      static true_type __test(int);

    template<typename, typename...>
      static false_type __test(...);
  };

  template<typename _Tp, typename... _Args>
    struct __is_nary_constructible_impl
    : public __do_is_nary_constructible_impl
    {
      typedef decltype(__test<_Tp, _Args...>(0)) type;
    };

  template<typename _Tp, typename... _Args>
    struct __is_nary_constructible
    : public __is_nary_constructible_impl<_Tp, _Args...>::type
    {
      static_assert(sizeof...(_Args) > 1,
                    "Only useful for > 1 arguments");
    };

  template<typename _Tp, typename... _Args>
    struct __is_constructible_impl
    : public __is_nary_constructible<_Tp, _Args...>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_constructible_impl<_Tp, _Arg>
    : public __is_direct_constructible<_Tp, _Arg>
    { };

  template<typename _Tp>
    struct __is_constructible_impl<_Tp>
    : public is_default_constructible<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_constructible
    : public __is_constructible_impl<_Tp, _Args...>::type
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_constructible_impl;

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, true>
    : public is_constructible<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_constructible
    : public __is_copy_constructible_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_constructible_impl;

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, true>
    : public is_constructible<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_constructible
    : public __is_move_constructible_impl<_Tp>
    { };

  template<typename _Tp>
    struct __is_nt_default_constructible_atom
    : public integral_constant<bool, noexcept(_Tp())>
    { };

  template<typename _Tp, bool = is_array<_Tp>::value>
    struct __is_nt_default_constructible_impl;

  template<typename _Tp>
    struct __is_nt_default_constructible_impl<_Tp, true>
    : public __and_<__is_array_known_bounds<_Tp>,
      __is_nt_default_constructible_atom<typename
                      remove_all_extents<_Tp>::type>>
    { };

  template<typename _Tp>
    struct __is_nt_default_constructible_impl<_Tp, false>
    : public __is_nt_default_constructible_atom<_Tp>
    { };


  template<typename _Tp>
    struct is_nothrow_default_constructible
    : public __and_<is_default_constructible<_Tp>,
                    __is_nt_default_constructible_impl<_Tp>>
    { };

  template<typename _Tp, typename... _Args>
    struct __is_nt_constructible_impl
    : public integral_constant<bool, noexcept(_Tp(declval<_Args>()...))>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_nt_constructible_impl<_Tp, _Arg>
    : public integral_constant<bool,
                               noexcept(static_cast<_Tp>(declval<_Arg>()))>
    { };

  template<typename _Tp>
    struct __is_nt_constructible_impl<_Tp>
    : public is_nothrow_default_constructible<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_nothrow_constructible
    : public __and_<is_constructible<_Tp, _Args...>,
      __is_nt_constructible_impl<_Tp, _Args...>>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_copy_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, true>
    : public is_nothrow_constructible<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_constructible
    : public __is_nothrow_copy_constructible_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_move_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, true>
    : public is_nothrow_constructible<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_constructible
    : public __is_nothrow_move_constructible_impl<_Tp>
    { };

  template<typename _Tp, typename _Up>
    class __is_assignable_helper
    {
      template<typename _Tp1, typename _Up1,
        typename = decltype(declval<_Tp1>() = declval<_Up1>())>
 static true_type
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp, typename _Up>
    struct is_assignable
      : public __is_assignable_helper<_Tp, _Up>::type
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_assignable_impl;

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, true>
    : public is_assignable<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_assignable
    : public __is_copy_assignable_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_assignable_impl;

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, true>
    : public is_assignable<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_assignable
    : public __is_move_assignable_impl<_Tp>
    { };

  template<typename _Tp, typename _Up>
    struct __is_nt_assignable_impl
    : public integral_constant<bool, noexcept(declval<_Tp>() = declval<_Up>())>
    { };


  template<typename _Tp, typename _Up>
    struct is_nothrow_assignable
    : public __and_<is_assignable<_Tp, _Up>,
      __is_nt_assignable_impl<_Tp, _Up>>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_copy_assignable_impl;

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, true>
    : public is_nothrow_assignable<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_assignable
    : public __is_nt_copy_assignable_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_move_assignable_impl;

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, true>
    : public is_nothrow_assignable<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_assignable
    : public __is_nt_move_assignable_impl<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_trivially_constructible
    : public __and_<is_constructible<_Tp, _Args...>, integral_constant<bool,
   __is_trivially_constructible(_Tp, _Args...)>>
    { };


  template<typename _Tp>
    struct is_trivially_default_constructible
    : public is_trivially_constructible<_Tp>::type
    { };

  struct __do_is_implicitly_default_constructible_impl
  {
    template <typename _Tp>
    static void __helper(const _Tp&);

    template <typename _Tp>
    static true_type __test(const _Tp&,
                            decltype(__helper<const _Tp&>({}))* = 0);

    static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_impl
      : public __do_is_implicitly_default_constructible_impl
  {
    typedef decltype(__test(declval<_Tp>())) type;
  };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_safe
      : public __is_implicitly_default_constructible_impl<_Tp>::type
  { };

  template <typename _Tp>
    struct __is_implicitly_default_constructible
      : public __and_<is_default_constructible<_Tp>,
                      __is_implicitly_default_constructible_safe<_Tp>>
  { };


  template<typename _Tp>
    struct is_trivially_copy_constructible
    : public __and_<is_copy_constructible<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, const _Tp&)>>
    { };


  template<typename _Tp>
    struct is_trivially_move_constructible
    : public __and_<is_move_constructible<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, _Tp&&)>>
    { };


  template<typename _Tp, typename _Up>
    struct is_trivially_assignable
    : public __and_<is_assignable<_Tp, _Up>,
      integral_constant<bool,
   __is_trivially_assignable(_Tp, _Up)>>
    { };


  template<typename _Tp>
    struct is_trivially_copy_assignable
    : public __and_<is_copy_assignable<_Tp>,
      integral_constant<bool,
   __is_trivially_assignable(_Tp&, const _Tp&)>>
    { };


  template<typename _Tp>
    struct is_trivially_move_assignable
    : public __and_<is_move_assignable<_Tp>,
      integral_constant<bool,
   __is_trivially_assignable(_Tp&, _Tp&&)>>
    { };


  template<typename _Tp>
    struct is_trivially_destructible
    : public __and_<is_destructible<_Tp>, integral_constant<bool,
         __has_trivial_destructor(_Tp)>>
    { };



  template<typename _Tp>
    struct has_virtual_destructor
    : public integral_constant<bool, __has_virtual_destructor(_Tp)>
    { };





  template<typename _Tp>
    struct alignment_of
    : public integral_constant<std::size_t, __alignof__(_Tp)> { };


  template<typename>
    struct rank
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, std::size_t _Size>
    struct rank<_Tp[_Size]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };

  template<typename _Tp>
    struct rank<_Tp[]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };


  template<typename, unsigned _Uint>
    struct extent
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, unsigned _Uint, std::size_t _Size>
    struct extent<_Tp[_Size], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? _Size : extent<_Tp,
          _Uint - 1>::value>
    { };

  template<typename _Tp, unsigned _Uint>
    struct extent<_Tp[], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? 0 : extent<_Tp,
             _Uint - 1>::value>
    { };





  template<typename, typename>
    struct is_same
    : public false_type { };

  template<typename _Tp>
    struct is_same<_Tp, _Tp>
    : public true_type { };


  template<typename _Base, typename _Derived>
    struct is_base_of
    : public integral_constant<bool, __is_base_of(_Base, _Derived)>
    { };

  template<typename _From, typename _To,
           bool = __or_<is_void<_From>, is_function<_To>,
                        is_array<_To>>::value>
    struct __is_convertible_helper
    { typedef typename is_void<_To>::type type; };

  template<typename _From, typename _To>
    class __is_convertible_helper<_From, _To, false>
    {
       template<typename _To1>
 static void __test_aux(_To1);

      template<typename _From1, typename _To1,
        typename = decltype(__test_aux<_To1>(std::declval<_From1>()))>
 static true_type
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      typedef decltype(__test<_From, _To>(0)) type;
    };



  template<typename _From, typename _To>
    struct is_convertible
    : public __is_convertible_helper<_From, _To>::type
    { };





  template<typename _Tp>
    struct remove_const
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_const<_Tp const>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_volatile
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_volatile<_Tp volatile>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_cv
    {
      typedef typename
      remove_const<typename remove_volatile<_Tp>::type>::type type;
    };


  template<typename _Tp>
    struct add_const
    { typedef _Tp const type; };


  template<typename _Tp>
    struct add_volatile
    { typedef _Tp volatile type; };


  template<typename _Tp>
    struct add_cv
    {
      typedef typename
      add_const<typename add_volatile<_Tp>::type>::type type;
    };






  template<typename _Tp>
    using remove_const_t = typename remove_const<_Tp>::type;


  template<typename _Tp>
    using remove_volatile_t = typename remove_volatile<_Tp>::type;


  template<typename _Tp>
    using remove_cv_t = typename remove_cv<_Tp>::type;


  template<typename _Tp>
    using add_const_t = typename add_const<_Tp>::type;


  template<typename _Tp>
    using add_volatile_t = typename add_volatile<_Tp>::type;


  template<typename _Tp>
    using add_cv_t = typename add_cv<_Tp>::type;





  template<typename _Tp>
    struct remove_reference
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&&>
    { typedef _Tp type; };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_lvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_lvalue_reference_helper<_Tp, true>
    { typedef _Tp& type; };


  template<typename _Tp>
    struct add_lvalue_reference
    : public __add_lvalue_reference_helper<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_rvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_rvalue_reference_helper<_Tp, true>
    { typedef _Tp&& type; };


  template<typename _Tp>
    struct add_rvalue_reference
    : public __add_rvalue_reference_helper<_Tp>
    { };



  template<typename _Tp>
    using remove_reference_t = typename remove_reference<_Tp>::type;


  template<typename _Tp>
    using add_lvalue_reference_t = typename add_lvalue_reference<_Tp>::type;


  template<typename _Tp>
    using add_rvalue_reference_t = typename add_rvalue_reference<_Tp>::type;





  template<typename _Unqualified, bool _IsConst, bool _IsVol>
    struct __cv_selector;

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, false>
    { typedef _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, true>
    { typedef volatile _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, false>
    { typedef const _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, true>
    { typedef const volatile _Unqualified __type; };

  template<typename _Qualified, typename _Unqualified,
    bool _IsConst = is_const<_Qualified>::value,
    bool _IsVol = is_volatile<_Qualified>::value>
    class __match_cv_qualifiers
    {
      typedef __cv_selector<_Unqualified, _IsConst, _IsVol> __match;

    public:
      typedef typename __match::__type __type;
    };


  template<typename _Tp>
    struct __make_unsigned
    { typedef _Tp __type; };

  template<>
    struct __make_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __make_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __make_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __make_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __make_unsigned<wchar_t> : __make_unsigned<int>
    { };



  template<>
    struct __make_unsigned<__int128>
    { typedef unsigned __int128 __type; };
# 1771 "/usr/include/c++/7/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_unsigned_selector;

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, true, false>
    {
      typedef __make_unsigned<typename remove_cv<_Tp>::type> __unsignedt;
      typedef typename __unsignedt::__type __unsigned_type;
      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;

    public:
      typedef typename __cv_unsigned::__type __type;
    };

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, false, true>
    {

      typedef unsigned char __smallest;
      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);
      static const bool __b1 = sizeof(_Tp) <= sizeof(unsigned short);
      static const bool __b2 = sizeof(_Tp) <= sizeof(unsigned int);
      static const bool __b3 = sizeof(_Tp) <= sizeof(unsigned long);
      typedef conditional<__b3, unsigned long, unsigned long long> __cond3;
      typedef typename __cond3::type __cond3_type;
      typedef conditional<__b2, unsigned int, __cond3_type> __cond2;
      typedef typename __cond2::type __cond2_type;
      typedef conditional<__b1, unsigned short, __cond2_type> __cond1;
      typedef typename __cond1::type __cond1_type;

      typedef typename conditional<__b0, __smallest, __cond1_type>::type
 __unsigned_type;
      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;

    public:
      typedef typename __cv_unsigned::__type __type;
    };





  template<typename _Tp>
    struct make_unsigned
    { typedef typename __make_unsigned_selector<_Tp>::__type type; };


  template<>
    struct make_unsigned<bool>;



  template<typename _Tp>
    struct __make_signed
    { typedef _Tp __type; };

  template<>
    struct __make_signed<char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned short>
    { typedef signed short __type; };

  template<>
    struct __make_signed<unsigned int>
    { typedef signed int __type; };

  template<>
    struct __make_signed<unsigned long>
    { typedef signed long __type; };

  template<>
    struct __make_signed<unsigned long long>
    { typedef signed long long __type; };
# 1860 "/usr/include/c++/7/type_traits" 3
  template<>
    struct __make_signed<char16_t> : __make_signed<uint_least16_t>
    { };
  template<>
    struct __make_signed<char32_t> : __make_signed<uint_least32_t>
    { };



  template<>
    struct __make_signed<unsigned __int128>
    { typedef __int128 __type; };
# 1890 "/usr/include/c++/7/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_signed_selector;

  template<typename _Tp>
    class __make_signed_selector<_Tp, true, false>
    {
      typedef __make_signed<typename remove_cv<_Tp>::type> __signedt;
      typedef typename __signedt::__type __signed_type;
      typedef __match_cv_qualifiers<_Tp, __signed_type> __cv_signed;

    public:
      typedef typename __cv_signed::__type __type;
    };

  template<typename _Tp>
    class __make_signed_selector<_Tp, false, true>
    {
      typedef typename __make_unsigned_selector<_Tp>::__type __unsigned_type;

    public:
      typedef typename __make_signed_selector<__unsigned_type>::__type __type;
    };





  template<typename _Tp>
    struct make_signed
    { typedef typename __make_signed_selector<_Tp>::__type type; };


  template<>
    struct make_signed<bool>;



  template<typename _Tp>
    using make_signed_t = typename make_signed<_Tp>::type;


  template<typename _Tp>
    using make_unsigned_t = typename make_unsigned<_Tp>::type;





  template<typename _Tp>
    struct remove_extent
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_extent<_Tp[_Size]>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_extent<_Tp[]>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_all_extents
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_all_extents<_Tp[_Size]>
    { typedef typename remove_all_extents<_Tp>::type type; };

  template<typename _Tp>
    struct remove_all_extents<_Tp[]>
    { typedef typename remove_all_extents<_Tp>::type type; };



  template<typename _Tp>
    using remove_extent_t = typename remove_extent<_Tp>::type;


  template<typename _Tp>
    using remove_all_extents_t = typename remove_all_extents<_Tp>::type;




  template<typename _Tp, typename>
    struct __remove_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp, typename _Up>
    struct __remove_pointer_helper<_Tp, _Up*>
    { typedef _Up type; };


  template<typename _Tp>
    struct remove_pointer
    : public __remove_pointer_helper<_Tp, typename remove_cv<_Tp>::type>
    { };


  template<typename _Tp, bool = __or_<__is_referenceable<_Tp>,
          is_void<_Tp>>::value>
    struct __add_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_pointer_helper<_Tp, true>
    { typedef typename remove_reference<_Tp>::type* type; };

  template<typename _Tp>
    struct add_pointer
    : public __add_pointer_helper<_Tp>
    { };



  template<typename _Tp>
    using remove_pointer_t = typename remove_pointer<_Tp>::type;


  template<typename _Tp>
    using add_pointer_t = typename add_pointer<_Tp>::type;


  template<std::size_t _Len>
    struct __aligned_storage_msa
    {
      union __type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__)) { } __align;
      };
    };
# 2036 "/usr/include/c++/7/type_traits" 3
  template<std::size_t _Len, std::size_t _Align =
    __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    struct aligned_storage
    {
      union type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__((_Align)))) { } __align;
      };
    };

  template <typename... _Types>
    struct __strictest_alignment
    {
      static const size_t _S_alignment = 0;
      static const size_t _S_size = 0;
    };

  template <typename _Tp, typename... _Types>
    struct __strictest_alignment<_Tp, _Types...>
    {
      static const size_t _S_alignment =
        alignof(_Tp) > __strictest_alignment<_Types...>::_S_alignment
 ? alignof(_Tp) : __strictest_alignment<_Types...>::_S_alignment;
      static const size_t _S_size =
        sizeof(_Tp) > __strictest_alignment<_Types...>::_S_size
 ? sizeof(_Tp) : __strictest_alignment<_Types...>::_S_size;
    };
# 2075 "/usr/include/c++/7/type_traits" 3
  template <size_t _Len, typename... _Types>
    struct aligned_union
    {
    private:
      static_assert(sizeof...(_Types) != 0, "At least one type is required");

      using __strictest = __strictest_alignment<_Types...>;
      static const size_t _S_len = _Len > __strictest::_S_size
 ? _Len : __strictest::_S_size;
    public:

      static const size_t alignment_value = __strictest::_S_alignment;

      typedef typename aligned_storage<_S_len, alignment_value>::type type;
    };

  template <size_t _Len, typename... _Types>
    const size_t aligned_union<_Len, _Types...>::alignment_value;



  template<typename _Up,
    bool _IsArray = is_array<_Up>::value,
    bool _IsFunction = is_function<_Up>::value>
    struct __decay_selector;


  template<typename _Up>
    struct __decay_selector<_Up, false, false>
    { typedef typename remove_cv<_Up>::type __type; };

  template<typename _Up>
    struct __decay_selector<_Up, true, false>
    { typedef typename remove_extent<_Up>::type* __type; };

  template<typename _Up>
    struct __decay_selector<_Up, false, true>
    { typedef typename add_pointer<_Up>::type __type; };


  template<typename _Tp>
    class decay
    {
      typedef typename remove_reference<_Tp>::type __remove_type;

    public:
      typedef typename __decay_selector<__remove_type>::__type type;
    };

  template<typename _Tp>
    class reference_wrapper;


  template<typename _Tp>
    struct __strip_reference_wrapper
    {
      typedef _Tp __type;
    };

  template<typename _Tp>
    struct __strip_reference_wrapper<reference_wrapper<_Tp> >
    {
      typedef _Tp& __type;
    };

  template<typename _Tp>
    struct __decay_and_strip
    {
      typedef typename __strip_reference_wrapper<
 typename decay<_Tp>::type>::__type __type;
    };




  template<bool, typename _Tp = void>
    struct enable_if
    { };


  template<typename _Tp>
    struct enable_if<true, _Tp>
    { typedef _Tp type; };

  template<typename... _Cond>
    using _Require = typename enable_if<__and_<_Cond...>::value>::type;



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct conditional
    { typedef _Iftrue type; };


  template<typename _Iftrue, typename _Iffalse>
    struct conditional<false, _Iftrue, _Iffalse>
    { typedef _Iffalse type; };


  template<typename... _Tp>
    struct common_type;



  struct __do_common_type_impl
  {
    template<typename _Tp, typename _Up>
      static __success_type<typename decay<decltype
       (true ? std::declval<_Tp>()
        : std::declval<_Up>())>::type> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _Tp, typename _Up>
    struct __common_type_impl
    : private __do_common_type_impl
    {
      typedef decltype(_S_test<_Tp, _Up>(0)) type;
    };

  struct __do_member_type_wrapper
  {
    template<typename _Tp>
      static __success_type<typename _Tp::type> _S_test(int);

    template<typename>
      static __failure_type _S_test(...);
  };

  template<typename _Tp>
    struct __member_type_wrapper
    : private __do_member_type_wrapper
    {
      typedef decltype(_S_test<_Tp>(0)) type;
    };

  template<typename _CTp, typename... _Args>
    struct __expanded_common_type_wrapper
    {
      typedef common_type<typename _CTp::type, _Args...> type;
    };

  template<typename... _Args>
    struct __expanded_common_type_wrapper<__failure_type, _Args...>
    { typedef __failure_type type; };

  template<typename _Tp>
    struct common_type<_Tp>
    { typedef typename decay<_Tp>::type type; };

  template<typename _Tp, typename _Up>
    struct common_type<_Tp, _Up>
    : public __common_type_impl<_Tp, _Up>::type
    { };

  template<typename _Tp, typename _Up, typename... _Vp>
    struct common_type<_Tp, _Up, _Vp...>
    : public __expanded_common_type_wrapper<typename __member_type_wrapper<
               common_type<_Tp, _Up>>::type, _Vp...>::type
    { };


  template<typename _Tp>
    struct underlying_type
    {
      typedef __underlying_type(_Tp) type;
    };

  template<typename _Tp>
    struct __declval_protector
    {
      static const bool __stop = false;
      static typename add_rvalue_reference<_Tp>::type __delegate();
    };

  template<typename _Tp>
    inline typename add_rvalue_reference<_Tp>::type
    declval() noexcept
    {
      static_assert(__declval_protector<_Tp>::__stop,
      "declval() must not be used!");
      return __declval_protector<_Tp>::__delegate();
    }


  template<typename _Signature>
    class result_of;





  struct __invoke_memfun_ref { };
  struct __invoke_memfun_deref { };
  struct __invoke_memobj_ref { };
  struct __invoke_memobj_deref { };
  struct __invoke_other { };


  template<typename _Tp, typename _Tag>
    struct __result_of_success : __success_type<_Tp>
    { using __invoke_type = _Tag; };


  struct __result_of_memfun_ref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      (std::declval<_Tp1>().*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_ref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_ref
    : private __result_of_memfun_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memfun_deref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      ((*std::declval<_Tp1>()).*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_deref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_deref
    : private __result_of_memfun_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memobj_ref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      std::declval<_Tp1>().*std::declval<_Fp>()
      ), __invoke_memobj_ref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_ref
    : private __result_of_memobj_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };


  struct __result_of_memobj_deref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      (*std::declval<_Tp1>()).*std::declval<_Fp>()
      ), __invoke_memobj_deref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_deref
    : private __result_of_memobj_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj;

  template<typename _Res, typename _Class, typename _Arg>
    struct __result_of_memobj<_Res _Class::*, _Arg>
    {
      typedef typename remove_cv<typename remove_reference<
        _Arg>::type>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memobj_ref<_MemPtr, _Arg>,
        __result_of_memobj_deref<_MemPtr, _Arg>
      >::type::type type;
    };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun;

  template<typename _Res, typename _Class, typename _Arg, typename... _Args>
    struct __result_of_memfun<_Res _Class::*, _Arg, _Args...>
    {
      typedef typename remove_cv<typename remove_reference<
        _Arg>::type>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memfun_ref<_MemPtr, _Arg, _Args...>,
        __result_of_memfun_deref<_MemPtr, _Arg, _Args...>
      >::type::type type;
    };






  template<typename _Tp, typename _Up = typename decay<_Tp>::type>
    struct __inv_unwrap
    {
      using type = _Tp;
    };

  template<typename _Tp, typename _Up>
    struct __inv_unwrap<_Tp, reference_wrapper<_Up>>
    {
      using type = _Up&;
    };

  template<bool, bool, typename _Functor, typename... _ArgTypes>
    struct __result_of_impl
    {
      typedef __failure_type type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_impl<true, false, _MemPtr, _Arg>
    : public __result_of_memobj<typename decay<_MemPtr>::type,
    typename __inv_unwrap<_Arg>::type>
    { };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_impl<false, true, _MemPtr, _Arg, _Args...>
    : public __result_of_memfun<typename decay<_MemPtr>::type,
    typename __inv_unwrap<_Arg>::type, _Args...>
    { };


  struct __result_of_other_impl
  {
    template<typename _Fn, typename... _Args>
      static __result_of_success<decltype(
      std::declval<_Fn>()(std::declval<_Args>()...)
      ), __invoke_other> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _Functor, typename... _ArgTypes>
    struct __result_of_impl<false, false, _Functor, _ArgTypes...>
    : private __result_of_other_impl
    {
      typedef decltype(_S_test<_Functor, _ArgTypes...>(0)) type;
    };


  template<typename _Functor, typename... _ArgTypes>
    struct __invoke_result
    : public __result_of_impl<
        is_member_object_pointer<
          typename remove_reference<_Functor>::type
        >::value,
        is_member_function_pointer<
          typename remove_reference<_Functor>::type
        >::value,
 _Functor, _ArgTypes...
      >::type
    { };

  template<typename _Functor, typename... _ArgTypes>
    struct result_of<_Functor(_ArgTypes...)>
    : public __invoke_result<_Functor, _ArgTypes...>
    { };



  template<size_t _Len, size_t _Align =
     __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;

  template <size_t _Len, typename... _Types>
    using aligned_union_t = typename aligned_union<_Len, _Types...>::type;


  template<typename _Tp>
    using decay_t = typename decay<_Tp>::type;


  template<bool _Cond, typename _Tp = void>
    using enable_if_t = typename enable_if<_Cond, _Tp>::type;


  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    using conditional_t = typename conditional<_Cond, _Iftrue, _Iffalse>::type;


  template<typename... _Tp>
    using common_type_t = typename common_type<_Tp...>::type;


  template<typename _Tp>
    using underlying_type_t = typename underlying_type<_Tp>::type;


  template<typename _Tp>
    using result_of_t = typename result_of<_Tp>::type;



  template<bool _Cond, typename _Tp = void>
    using __enable_if_t = typename enable_if<_Cond, _Tp>::type;


  template<typename...> using __void_t = void;




  template<typename...> using void_t = void;



  template<typename _Default, typename _AlwaysVoid,
    template<typename...> class _Op, typename... _Args>
    struct __detector
    {
      using value_t = false_type;
      using type = _Default;
    };


  template<typename _Default, template<typename...> class _Op,
     typename... _Args>
    struct __detector<_Default, __void_t<_Op<_Args...>>, _Op, _Args...>
    {
      using value_t = true_type;
      using type = _Op<_Args...>;
    };


  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or = __detector<_Default, void, _Op, _Args...>;


  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or_t
      = typename __detected_or<_Default, _Op, _Args...>::type;
# 2553 "/usr/include/c++/7/type_traits" 3
  template <typename _Tp>
    struct __is_swappable;

  template <typename _Tp>
    struct __is_nothrow_swappable;

  template<typename... _Elements>
    class tuple;

  template<typename>
    struct __is_tuple_like_impl : false_type
    { };

  template<typename... _Tps>
    struct __is_tuple_like_impl<tuple<_Tps...>> : true_type
    { };


  template<typename _Tp>
    struct __is_tuple_like
    : public __is_tuple_like_impl<typename remove_cv<
      typename remove_reference<_Tp>::type>::type>::type
    { };

  template<typename _Tp>
    inline
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
         is_move_constructible<_Tp>,
         is_move_assignable<_Tp>>::value>::type
    swap(_Tp&, _Tp&)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value);

  template<typename _Tp, size_t _Nm>
    inline
    typename enable_if<__is_swappable<_Tp>::value>::type
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value);

  namespace __swappable_details {
    using std::swap;

    struct __do_is_swappable_impl
    {
      template<typename _Tp, typename
               = decltype(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))>
        static true_type __test(int);

      template<typename>
        static false_type __test(...);
    };

    struct __do_is_nothrow_swappable_impl
    {
      template<typename _Tp>
        static __bool_constant<
          noexcept(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))
        > __test(int);

      template<typename>
        static false_type __test(...);
    };

  }

  template<typename _Tp>
    struct __is_swappable_impl
    : public __swappable_details::__do_is_swappable_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_nothrow_swappable_impl
    : public __swappable_details::__do_is_nothrow_swappable_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_swappable
    : public __is_swappable_impl<_Tp>::type
    { };

  template<typename _Tp>
    struct __is_nothrow_swappable
    : public __is_nothrow_swappable_impl<_Tp>::type
    { };






  template<typename _Tp>
    struct is_swappable
    : public __is_swappable_impl<_Tp>::type
    { };


  template<typename _Tp>
    struct is_nothrow_swappable
    : public __is_nothrow_swappable_impl<_Tp>::type
    { };



  template<typename _Tp>
    constexpr bool is_swappable_v =
      is_swappable<_Tp>::value;


  template<typename _Tp>
    constexpr bool is_nothrow_swappable_v =
      is_nothrow_swappable<_Tp>::value;


  namespace __swappable_with_details {
    using std::swap;

    struct __do_is_swappable_with_impl
    {
      template<typename _Tp, typename _Up, typename
               = decltype(swap(std::declval<_Tp>(), std::declval<_Up>())),
               typename
               = decltype(swap(std::declval<_Up>(), std::declval<_Tp>()))>
        static true_type __test(int);

      template<typename, typename>
        static false_type __test(...);
    };

    struct __do_is_nothrow_swappable_with_impl
    {
      template<typename _Tp, typename _Up>
        static __bool_constant<
          noexcept(swap(std::declval<_Tp>(), std::declval<_Up>()))
          &&
          noexcept(swap(std::declval<_Up>(), std::declval<_Tp>()))
        > __test(int);

      template<typename, typename>
        static false_type __test(...);
    };

  }

  template<typename _Tp, typename _Up>
    struct __is_swappable_with_impl
    : public __swappable_with_details::__do_is_swappable_with_impl
    {
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp>
    struct __is_swappable_with_impl<_Tp&, _Tp&>
    : public __swappable_details::__do_is_swappable_impl
    {
      typedef decltype(__test<_Tp&>(0)) type;
    };

  template<typename _Tp, typename _Up>
    struct __is_nothrow_swappable_with_impl
    : public __swappable_with_details::__do_is_nothrow_swappable_with_impl
    {
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp>
    struct __is_nothrow_swappable_with_impl<_Tp&, _Tp&>
    : public __swappable_details::__do_is_nothrow_swappable_impl
    {
      typedef decltype(__test<_Tp&>(0)) type;
    };


  template<typename _Tp, typename _Up>
    struct is_swappable_with
    : public __is_swappable_with_impl<_Tp, _Up>::type
    { };


  template<typename _Tp, typename _Up>
    struct is_nothrow_swappable_with
    : public __is_nothrow_swappable_with_impl<_Tp, _Up>::type
    { };



  template<typename _Tp, typename _Up>
    constexpr bool is_swappable_with_v =
      is_swappable_with<_Tp, _Up>::value;


  template<typename _Tp, typename _Up>
    constexpr bool is_nothrow_swappable_with_v =
      is_nothrow_swappable_with<_Tp, _Up>::value;






  template<typename _Result, typename _Ret, typename = void>
    struct __is_invocable_impl : false_type { };

  template<typename _Result, typename _Ret>
    struct __is_invocable_impl<_Result, _Ret, __void_t<typename _Result::type>>
    : __or_<is_void<_Ret>, is_convertible<typename _Result::type, _Ret>>::type
    { };

  template<typename _Fn, typename... _ArgTypes>
    struct __is_invocable
    : __is_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, void>::type
    { };

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept((std::declval<_Up>().*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_deref)
    {
      return noexcept(((*std::declval<_Tp>()).*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept(std::declval<_Up>().*std::declval<_Fn>());
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_deref)
    {
      return noexcept((*std::declval<_Tp>()).*std::declval<_Fn>());
    }

  template<typename _Fn, typename... _Args>
    constexpr bool __call_is_nt(__invoke_other)
    {
      return noexcept(std::declval<_Fn>()(std::declval<_Args>()...));
    }

  template<typename _Result, typename _Fn, typename... _Args>
    struct __call_is_nothrow
    : __bool_constant<
 std::__call_is_nt<_Fn, _Args...>(typename _Result::__invoke_type{})
      >
    { };

  template<typename _Fn, typename... _Args>
    using __call_is_nothrow_
      = __call_is_nothrow<__invoke_result<_Fn, _Args...>, _Fn, _Args...>;


  template<typename _Fn, typename... _Args>
    struct __is_nothrow_invocable
    : __and_<__is_invocable<_Fn, _Args...>,
             __call_is_nothrow_<_Fn, _Args...>>::type
    { };

  struct __nonesuch {
    __nonesuch() = delete;
    ~__nonesuch() = delete;
    __nonesuch(__nonesuch const&) = delete;
    void operator=(__nonesuch const&) = delete;
  };
# 3108 "/usr/include/c++/7/type_traits" 3

}
# 55 "/usr/include/c++/7/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 71 "/usr/include/c++/7/bits/move.h" 3
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Tp&&>(__t); }







  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
    {
      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
      " substituting _Tp is an lvalue reference type");
      return static_cast<_Tp&&>(__t);
    }






  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }


  template<typename _Tp>
    struct __move_if_noexcept_cond
    : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
                    is_copy_constructible<_Tp>>::type { };
# 115 "/usr/include/c++/7/bits/move.h" 3
  template<typename _Tp>
    constexpr typename
    conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
    move_if_noexcept(_Tp& __x) noexcept
    { return std::move(__x); }
# 135 "/usr/include/c++/7/bits/move.h" 3
  template<typename _Tp>
    inline _Tp*
    addressof(_Tp& __r) noexcept
    { return std::__addressof(__r); }



  template<typename _Tp>
    const _Tp* addressof(const _Tp&&) = delete;


  template <typename _Tp, typename _Up = _Tp>
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
    {
      _Tp __old_val = std::move(__obj);
      __obj = std::forward<_Up>(__new_val);
      return __old_val;
    }



}
# 166 "/usr/include/c++/7/bits/move.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 181 "/usr/include/c++/7/bits/move.h" 3
  template<typename _Tp>
    inline

    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
         is_move_constructible<_Tp>,
         is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value)




    {

     

      _Tp __tmp = std::move(__a);
      __a = std::move(__b);
      __b = std::move(__tmp);
    }




  template<typename _Tp, size_t _Nm>
    inline

    typename enable_if<__is_swappable<_Tp>::value>::type
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value)




    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }



}
# 60 "/usr/include/c++/7/bits/stl_pair.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{

# 76 "/usr/include/c++/7/bits/stl_pair.h" 3
  struct piecewise_construct_t { explicit piecewise_construct_t() = default; };


  constexpr piecewise_construct_t piecewise_construct =
    piecewise_construct_t();


  template<typename...>
    class tuple;

  template<std::size_t...>
    struct _Index_tuple;






  template <bool, typename _T1, typename _T2>
    struct _PCC
    {
      template <typename _U1, typename _U2>
      static constexpr bool _ConstructiblePair()
      {
 return __and_<is_constructible<_T1, const _U1&>,
        is_constructible<_T2, const _U2&>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyConvertiblePair()
      {
 return __and_<is_convertible<const _U1&, _T1>,
        is_convertible<const _U2&, _T2>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _MoveConstructiblePair()
      {
 return __and_<is_constructible<_T1, _U1&&>,
        is_constructible<_T2, _U2&&>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyMoveConvertiblePair()
      {
 return __and_<is_convertible<_U1&&, _T1>,
        is_convertible<_U2&&, _T2>>::value;
      }

      template <bool __implicit, typename _U1, typename _U2>
      static constexpr bool _CopyMovePair()
      {
 using __do_converts = __and_<is_convertible<const _U1&, _T1>,
      is_convertible<_U2&&, _T2>>;
 using __converts = typename conditional<__implicit,
           __do_converts,
           __not_<__do_converts>>::type;
 return __and_<is_constructible<_T1, const _U1&>,
        is_constructible<_T2, _U2&&>,
        __converts
        >::value;
      }

      template <bool __implicit, typename _U1, typename _U2>
      static constexpr bool _MoveCopyPair()
      {
 using __do_converts = __and_<is_convertible<_U1&&, _T1>,
      is_convertible<const _U2&, _T2>>;
 using __converts = typename conditional<__implicit,
           __do_converts,
           __not_<__do_converts>>::type;
 return __and_<is_constructible<_T1, _U1&&>,
        is_constructible<_T2, const _U2&&>,
        __converts
        >::value;
      }
  };

  template <typename _T1, typename _T2>
    struct _PCC<false, _T1, _T2>
    {
      template <typename _U1, typename _U2>
      static constexpr bool _ConstructiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyConvertiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _MoveConstructiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyMoveConvertiblePair()
      {
 return false;
      }
  };




  struct __nonesuch_no_braces : std::__nonesuch {
    explicit __nonesuch_no_braces(const __nonesuch&) = delete;
  };


  template<typename _U1, typename _U2> class __pair_base
  {

    template<typename _T1, typename _T2> friend struct pair;
    __pair_base() = default;
    ~__pair_base() = default;
    __pair_base(const __pair_base&) = default;
    __pair_base& operator=(const __pair_base&) = delete;

  };







  template<typename _T1, typename _T2>
    struct pair
    : private __pair_base<_T1, _T2>
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;






      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                                     __is_implicitly_default_constructible<_U1>,
                                     __is_implicitly_default_constructible<_U2>>
                                   ::value, bool>::type = true>

      constexpr pair()
      : first(), second() { }


      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                       is_default_constructible<_U1>,
                       is_default_constructible<_U2>,
                       __not_<
                         __and_<__is_implicitly_default_constructible<_U1>,
                                __is_implicitly_default_constructible<_U2>>>>
                                   ::value, bool>::type = false>
      explicit constexpr pair()
      : first(), second() { }
# 252 "/usr/include/c++/7/bits/stl_pair.h" 3
      using _PCCP = _PCC<true, _T1, _T2>;

      template<typename _U1 = _T1, typename _U2=_T2, typename
        enable_if<_PCCP::template
      _ConstructiblePair<_U1, _U2>()
                  && _PCCP::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
      constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }

       template<typename _U1 = _T1, typename _U2=_T2, typename
  enable_if<_PCCP::template
       _ConstructiblePair<_U1, _U2>()
                   && !_PCCP::template
       _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
      explicit constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }
# 280 "/usr/include/c++/7/bits/stl_pair.h" 3
      template <typename _U1, typename _U2>
        using _PCCFP = _PCC<!is_same<_T1, _U1>::value
       || !is_same<_T2, _U2>::value,
       _T1, _T2>;

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _ConstructiblePair<_U1, _U2>()
                  && _PCCFP<_U1, _U2>::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
     bool>::type=true>
        constexpr pair(const pair<_U1, _U2>& __p)
        : first(__p.first), second(__p.second) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _ConstructiblePair<_U1, _U2>()
    && !_PCCFP<_U1, _U2>::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(const pair<_U1, _U2>& __p)
 : first(__p.first), second(__p.second) { }

      constexpr pair(const pair&) = default;
      constexpr pair(pair&&) = default;


      template<typename _U1, typename
        enable_if<_PCCP::template
      _MoveCopyPair<true, _U1, _T2>(),
                         bool>::type=true>
       constexpr pair(_U1&& __x, const _T2& __y)
       : first(std::forward<_U1>(__x)), second(__y) { }

      template<typename _U1, typename
        enable_if<_PCCP::template
      _MoveCopyPair<false, _U1, _T2>(),
                         bool>::type=false>
       explicit constexpr pair(_U1&& __x, const _T2& __y)
       : first(std::forward<_U1>(__x)), second(__y) { }

      template<typename _U2, typename
        enable_if<_PCCP::template
      _CopyMovePair<true, _T1, _U2>(),
                         bool>::type=true>
       constexpr pair(const _T1& __x, _U2&& __y)
       : first(__x), second(std::forward<_U2>(__y)) { }

      template<typename _U2, typename
        enable_if<_PCCP::template
      _CopyMovePair<false, _T1, _U2>(),
                         bool>::type=false>
       explicit pair(const _T1& __x, _U2&& __y)
       : first(__x), second(std::forward<_U2>(__y)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCP::template
      _MoveConstructiblePair<_U1, _U2>()
     && _PCCP::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
 constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCP::template
      _MoveConstructiblePair<_U1, _U2>()
     && !_PCCP::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }


      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _MoveConstructiblePair<_U1, _U2>()
     && _PCCFP<_U1, _U2>::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
 constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _MoveConstructiblePair<_U1, _U2>()
     && !_PCCFP<_U1, _U2>::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<typename... _Args1, typename... _Args2>
        pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);

      pair&
      operator=(typename conditional<
  __and_<is_copy_assignable<_T1>,
         is_copy_assignable<_T2>>::value,
  const pair&, const __nonesuch_no_braces&>::type __p)
      {
 first = __p.first;
 second = __p.second;
 return *this;
      }

      pair&
      operator=(typename conditional<
  __and_<is_move_assignable<_T1>,
         is_move_assignable<_T2>>::value,
  pair&&, __nonesuch_no_braces&&>::type __p)
      noexcept(__and_<is_nothrow_move_assignable<_T1>,
        is_nothrow_move_assignable<_T2>>::value)
      {
 first = std::forward<first_type>(__p.first);
 second = std::forward<second_type>(__p.second);
 return *this;
      }

      template<typename _U1, typename _U2>
      typename enable_if<__and_<is_assignable<_T1&, const _U1&>,
    is_assignable<_T2&, const _U2&>>::value,
    pair&>::type
 operator=(const pair<_U1, _U2>& __p)
 {
   first = __p.first;
   second = __p.second;
   return *this;
 }

      template<typename _U1, typename _U2>
      typename enable_if<__and_<is_assignable<_T1&, _U1&&>,
    is_assignable<_T2&, _U2&&>>::value,
    pair&>::type
 operator=(pair<_U1, _U2>&& __p)
 {
   first = std::forward<_U1>(__p.first);
   second = std::forward<_U2>(__p.second);
   return *this;
 }

      void
      swap(pair& __p)
      noexcept(__and_<__is_nothrow_swappable<_T1>,
                      __is_nothrow_swappable<_T2>>::value)
      {
 using std::swap;
 swap(first, __p.first);
 swap(second, __p.second);
      }

    private:
      template<typename... _Args1, std::size_t... _Indexes1,
               typename... _Args2, std::size_t... _Indexes2>
        pair(tuple<_Args1...>&, tuple<_Args2...>&,
             _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>);

    };






  template<typename _T1, typename _T2>
    inline constexpr bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }





  template<typename _T1, typename _T2>
    inline


    typename enable_if<__and_<__is_swappable<_T1>,
                              __is_swappable<_T2>>::value>::type



    swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }


  template<typename _T1, typename _T2>
    typename enable_if<!__and_<__is_swappable<_T1>,
          __is_swappable<_T2>>::value>::type
    swap(pair<_T1, _T2>&, pair<_T1, _T2>&) = delete;
# 521 "/usr/include/c++/7/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
    }
# 540 "/usr/include/c++/7/bits/stl_pair.h" 3

}
# 65 "/usr/include/c++/7/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/7/bits/stl_iterator_base_types.h" 1 3
# 62 "/usr/include/c++/7/bits/stl_iterator_base_types.h" 3
       
# 63 "/usr/include/c++/7/bits/stl_iterator_base_types.h" 3







namespace std __attribute__ ((__visibility__ ("default")))
{

# 89 "/usr/include/c++/7/bits/stl_iterator_base_types.h" 3
  struct input_iterator_tag { };


  struct output_iterator_tag { };


  struct forward_iterator_tag : public input_iterator_tag { };



  struct bidirectional_iterator_tag : public forward_iterator_tag { };



  struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 116 "/usr/include/c++/7/bits/stl_iterator_base_types.h" 3
  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator
    {

      typedef _Category iterator_category;

      typedef _Tp value_type;

      typedef _Distance difference_type;

      typedef _Pointer pointer;

      typedef _Reference reference;
    };
# 143 "/usr/include/c++/7/bits/stl_iterator_base_types.h" 3
  template<typename _Iterator, typename = __void_t<>>
    struct __iterator_traits { };

  template<typename _Iterator>
    struct __iterator_traits<_Iterator,
        __void_t<typename _Iterator::iterator_category,
          typename _Iterator::value_type,
          typename _Iterator::difference_type,
          typename _Iterator::pointer,
          typename _Iterator::reference>>
    {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };

  template<typename _Iterator>
    struct iterator_traits
    : public __iterator_traits<_Iterator> { };
# 177 "/usr/include/c++/7/bits/stl_iterator_base_types.h" 3
  template<typename _Tp>
    struct iterator_traits<_Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };


  template<typename _Tp>
    struct iterator_traits<const _Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };





  template<typename _Iter>
    inline constexpr
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }
# 231 "/usr/include/c++/7/bits/stl_iterator_base_types.h" 3
  template<typename _InIter>
    using _RequireInputIter = typename
      enable_if<is_convertible<typename
  iterator_traits<_InIter>::iterator_category,
          input_iterator_tag>::value>::type;



}
# 66 "/usr/include/c++/7/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/7/bits/stl_iterator_base_funcs.h" 1 3
# 62 "/usr/include/c++/7/bits/stl_iterator_base_funcs.h" 3
       
# 63 "/usr/include/c++/7/bits/stl_iterator_base_funcs.h" 3


# 1 "/usr/include/c++/7/debug/assertions.h" 1 3
# 66 "/usr/include/c++/7/bits/stl_iterator_base_funcs.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template <typename> struct _List_iterator;
  template <typename> struct _List_const_iterator;




  template<typename _InputIterator>
    inline constexpr
    typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {

     

      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }

  template<typename _RandomAccessIterator>
    inline constexpr
    typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {

     

      return __last - __first;
    }



  template<typename _Tp>
    ptrdiff_t
    __distance(std::_List_iterator<_Tp>,
        std::_List_iterator<_Tp>,
        input_iterator_tag);

  template<typename _Tp>
    ptrdiff_t
    __distance(std::_List_const_iterator<_Tp>,
        std::_List_const_iterator<_Tp>,
        input_iterator_tag);
# 135 "/usr/include/c++/7/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator>
    inline
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {

      return std::__distance(__first, __last,
        std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline constexpr void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {

     
      ;
      while (__n--)
 ++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline constexpr void
    __advance(_BidirectionalIterator& __i, _Distance __n,
       bidirectional_iterator_tag)
    {

     

      if (__n > 0)
        while (__n--)
   ++__i;
      else
        while (__n++)
   --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline constexpr void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {

     

      __i += __n;
    }
# 195 "/usr/include/c++/7/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator, typename _Distance>
    inline void
    advance(_InputIterator& __i, _Distance __n)
    {

      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
    }



  template<typename _ForwardIterator>
    inline _ForwardIterator
    next(_ForwardIterator __x, typename
  iterator_traits<_ForwardIterator>::difference_type __n = 1)
    {

     

      std::advance(__x, __n);
      return __x;
    }

  template<typename _BidirectionalIterator>
    inline _BidirectionalIterator
    prev(_BidirectionalIterator __x, typename
  iterator_traits<_BidirectionalIterator>::difference_type __n = 1)
    {

     

      std::advance(__x, -__n);
      return __x;
    }




}
# 67 "/usr/include/c++/7/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/7/bits/stl_iterator.h" 1 3
# 66 "/usr/include/c++/7/bits/stl_iterator.h" 3
# 1 "/usr/include/c++/7/bits/ptr_traits.h" 1 3
# 37 "/usr/include/c++/7/bits/ptr_traits.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  class __undefined;


  template<typename _Tp>
    struct __get_first_arg
    { using type = __undefined; };

  template<template<typename, typename...> class _Template, typename _Tp,
           typename... _Types>
    struct __get_first_arg<_Template<_Tp, _Types...>>
    { using type = _Tp; };

  template<typename _Tp>
    using __get_first_arg_t = typename __get_first_arg<_Tp>::type;


  template<typename _Tp, typename _Up>
    struct __replace_first_arg
    { };

  template<template<typename, typename...> class _Template, typename _Up,
           typename _Tp, typename... _Types>
    struct __replace_first_arg<_Template<_Tp, _Types...>, _Up>
    { using type = _Template<_Up, _Types...>; };

  template<typename _Tp, typename _Up>
    using __replace_first_arg_t = typename __replace_first_arg<_Tp, _Up>::type;

  template<typename _Tp>
    using __make_not_void
      = typename conditional<is_void<_Tp>::value, __undefined, _Tp>::type;





  template<typename _Ptr>
    struct pointer_traits
    {
    private:
      template<typename _Tp>
 using __element_type = typename _Tp::element_type;

      template<typename _Tp>
 using __difference_type = typename _Tp::difference_type;

      template<typename _Tp, typename _Up, typename = void>
 struct __rebind : __replace_first_arg<_Tp, _Up> { };

      template<typename _Tp, typename _Up>
 struct __rebind<_Tp, _Up, __void_t<typename _Tp::template rebind<_Up>>>
 { using type = typename _Tp::template rebind<_Up>; };

    public:

      using pointer = _Ptr;


      using element_type
 = __detected_or_t<__get_first_arg_t<_Ptr>, __element_type, _Ptr>;


      using difference_type
 = __detected_or_t<ptrdiff_t, __difference_type, _Ptr>;


      template<typename _Up>
        using rebind = typename __rebind<_Ptr, _Up>::type;

      static _Ptr
      pointer_to(__make_not_void<element_type>& __e)
      { return _Ptr::pointer_to(__e); }

      static_assert(!is_same<element_type, __undefined>::value,
   "pointer type defines element_type or is like SomePointer<T, Args>");
    };





  template<typename _Tp>
    struct pointer_traits<_Tp*>
    {

      typedef _Tp* pointer;

      typedef _Tp element_type;

      typedef ptrdiff_t difference_type;

      template<typename _Up>
        using rebind = _Up*;






      static pointer
      pointer_to(__make_not_void<element_type>& __r) noexcept
      { return std::addressof(__r); }
    };


  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;


}
# 67 "/usr/include/c++/7/bits/stl_iterator.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{

# 100 "/usr/include/c++/7/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
        typename iterator_traits<_Iterator>::value_type,
        typename iterator_traits<_Iterator>::difference_type,
        typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
    protected:
      _Iterator current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::pointer pointer;
      typedef typename __traits_type::reference reference;
# 126 "/usr/include/c++/7/bits/stl_iterator.h" 3
     
      reverse_iterator() : current() { }




      explicit
      reverse_iterator(iterator_type __x) : current(__x) { }




     
      reverse_iterator(const reverse_iterator& __x)
      : current(__x.current) { }





      template<typename _Iter>

        reverse_iterator(const reverse_iterator<_Iter>& __x)
 : current(__x.base()) { }




      iterator_type
      base() const
      { return current; }
# 168 "/usr/include/c++/7/bits/stl_iterator.h" 3
      reference
      operator*() const
      {
 _Iterator __tmp = current;
 return *--__tmp;
      }
# 182 "/usr/include/c++/7/bits/stl_iterator.h" 3
      pointer
      operator->() const
      { return std::__addressof(operator*()); }






      reverse_iterator&
      operator++()
      {
 --current;
 return *this;
      }






      reverse_iterator
      operator++(int)
      {
 reverse_iterator __tmp = *this;
 --current;
 return __tmp;
      }






      reverse_iterator&
      operator--()
      {
 ++current;
 return *this;
      }






      reverse_iterator
      operator--(int)
      {
 reverse_iterator __tmp = *this;
 ++current;
 return __tmp;
      }






      reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }







      reverse_iterator&
      operator+=(difference_type __n)
      {
 current -= __n;
 return *this;
      }






      reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }







      reverse_iterator&
      operator-=(difference_type __n)
      {
 current += __n;
 return *this;
      }






      reference
      operator[](difference_type __n) const
      { return *(*this + __n); }
    };
# 300 "/usr/include/c++/7/bits/stl_iterator.h" 3
  template<typename _Iterator>
    inline bool
    operator==(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator>(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator<=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }



  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y.base() < __x.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x < __y); }
# 390 "/usr/include/c++/7/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR>
    inline auto
    operator-(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    -> decltype(__y.base() - __x.base())
    { return __y.base() - __x.base(); }


  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
       const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }



  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    __make_reverse_iterator(_Iterator __i)
    { return reverse_iterator<_Iterator>(__i); }







  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    make_reverse_iterator(_Iterator __i)
    { return reverse_iterator<_Iterator>(__i); }




  template<typename _Iterator>
    auto
    __niter_base(reverse_iterator<_Iterator> __it)
    -> decltype(__make_reverse_iterator(__niter_base(__it.base())))
    { return __make_reverse_iterator(__niter_base(__it.base())); }

  template<typename _Iterator>
    struct __is_move_iterator<reverse_iterator<_Iterator> >
      : __is_move_iterator<_Iterator>
    { };

  template<typename _Iterator>
    auto
    __miter_base(reverse_iterator<_Iterator> __it)
    -> decltype(__make_reverse_iterator(__miter_base(__it.base())))
    { return __make_reverse_iterator(__miter_base(__it.base())); }
# 454 "/usr/include/c++/7/bits/stl_iterator.h" 3
  template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit
      back_insert_iterator(_Container& __x)
      : container(std::__addressof(__x)) { }
# 489 "/usr/include/c++/7/bits/stl_iterator.h" 3
      back_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_back(__value);
 return *this;
      }

      back_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_back(std::move(__value));
 return *this;
      }



      back_insert_iterator&
      operator*()
      { return *this; }


      back_insert_iterator&
      operator++()
      { return *this; }


      back_insert_iterator
      operator++(int)
      { return *this; }
    };
# 531 "/usr/include/c++/7/bits/stl_iterator.h" 3
  template<typename _Container>
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }
# 546 "/usr/include/c++/7/bits/stl_iterator.h" 3
  template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit front_insert_iterator(_Container& __x)
      : container(std::__addressof(__x)) { }
# 580 "/usr/include/c++/7/bits/stl_iterator.h" 3
      front_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_front(__value);
 return *this;
      }

      front_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_front(std::move(__value));
 return *this;
      }



      front_insert_iterator&
      operator*()
      { return *this; }


      front_insert_iterator&
      operator++()
      { return *this; }


      front_insert_iterator
      operator++(int)
      { return *this; }
    };
# 622 "/usr/include/c++/7/bits/stl_iterator.h" 3
  template<typename _Container>
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }
# 641 "/usr/include/c++/7/bits/stl_iterator.h" 3
  template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;
      typename _Container::iterator iter;

    public:

      typedef _Container container_type;





      insert_iterator(_Container& __x, typename _Container::iterator __i)
      : container(std::__addressof(__x)), iter(__i) {}
# 692 "/usr/include/c++/7/bits/stl_iterator.h" 3
      insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 iter = container->insert(iter, __value);
 ++iter;
 return *this;
      }

      insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 iter = container->insert(iter, std::move(__value));
 ++iter;
 return *this;
      }



      insert_iterator&
      operator*()
      { return *this; }


      insert_iterator&
      operator++()
      { return *this; }


      insert_iterator&
      operator++(int)
      { return *this; }
    };
# 736 "/usr/include/c++/7/bits/stl_iterator.h" 3
  template<typename _Container, typename _Iterator>
    inline insert_iterator<_Container>
    inserter(_Container& __x, _Iterator __i)
    {
      return insert_iterator<_Container>(__x,
      typename _Container::iterator(__i));
    }




}

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 760 "/usr/include/c++/7/bits/stl_iterator.h" 3
  using std::iterator_traits;
  using std::iterator;
  template<typename _Iterator, typename _Container>
    class __normal_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::reference reference;
      typedef typename __traits_type::pointer pointer;

      constexpr __normal_iterator() noexcept
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) noexcept
      : _M_current(__i) { }


      template<typename _Iter>
        __normal_iterator(const __normal_iterator<_Iter,
     typename __enable_if<
              (std::__are_same<_Iter, typename _Container::pointer>::__value),
        _Container>::__type>& __i) noexcept
        : _M_current(__i.base()) { }


      reference
      operator*() const noexcept
      { return *_M_current; }

      pointer
      operator->() const noexcept
      { return _M_current; }

      __normal_iterator&
      operator++() noexcept
      {
 ++_M_current;
 return *this;
      }

      __normal_iterator
      operator++(int) noexcept
      { return __normal_iterator(_M_current++); }


      __normal_iterator&
      operator--() noexcept
      {
 --_M_current;
 return *this;
      }

      __normal_iterator
      operator--(int) noexcept
      { return __normal_iterator(_M_current--); }


      reference
      operator[](difference_type __n) const noexcept
      { return _M_current[__n]; }

      __normal_iterator&
      operator+=(difference_type __n) noexcept
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(difference_type __n) const noexcept
      { return __normal_iterator(_M_current + __n); }

      __normal_iterator&
      operator-=(difference_type __n) noexcept
      { _M_current -= __n; return *this; }

      __normal_iterator
      operator-(difference_type __n) const noexcept
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const noexcept
      { return _M_current; }
    };
# 860 "/usr/include/c++/7/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() != __rhs.base(); }


  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() >= __rhs.base(); }





  template<typename _IteratorL, typename _IteratorR, typename _Container>


    inline auto
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
    -> decltype(__lhs.base() - __rhs.base())





    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline __normal_iterator<_Iterator, _Container>
    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
       __n, const __normal_iterator<_Iterator, _Container>& __i)
    noexcept
    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }


}

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Iterator, typename _Container>
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
    { return __it.base(); }


}



namespace std __attribute__ ((__visibility__ ("default")))
{

# 1012 "/usr/include/c++/7/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class move_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;
      typedef typename __traits_type::reference __base_ref;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;

      typedef _Iterator pointer;


      typedef typename conditional<is_reference<__base_ref>::value,
    typename remove_reference<__base_ref>::type&&,
    __base_ref>::type reference;

     
      move_iterator()
      : _M_current() { }

      explicit
      move_iterator(iterator_type __i)
      : _M_current(__i) { }

      template<typename _Iter>

 move_iterator(const move_iterator<_Iter>& __i)
 : _M_current(__i.base()) { }

      iterator_type
      base() const
      { return _M_current; }

      reference
      operator*() const
      { return static_cast<reference>(*_M_current); }

      pointer
      operator->() const
      { return _M_current; }

      move_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      move_iterator
      operator++(int)
      {
 move_iterator __tmp = *this;
 ++_M_current;
 return __tmp;
      }

      move_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      move_iterator
      operator--(int)
      {
 move_iterator __tmp = *this;
 --_M_current;
 return __tmp;
      }

      move_iterator
      operator+(difference_type __n) const
      { return move_iterator(_M_current + __n); }

      move_iterator&
      operator+=(difference_type __n)
      {
 _M_current += __n;
 return *this;
      }

      move_iterator
      operator-(difference_type __n) const
      { return move_iterator(_M_current - __n); }

      move_iterator&
      operator-=(difference_type __n)
      {
 _M_current -= __n;
 return *this;
      }

      reference
      operator[](difference_type __n) const
      { return std::move(_M_current[__n]); }
    };




  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator==(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator!=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    { return __x.base() < __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __x.base() < __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator<=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator>(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline bool
    operator>=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x < __y); }


  template<typename _IteratorL, typename _IteratorR>
    inline auto
    operator-(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    -> decltype(__x.base() - __y.base())
    { return __x.base() - __y.base(); }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    operator+(typename move_iterator<_Iterator>::difference_type __n,
       const move_iterator<_Iterator>& __x)
    { return __x + __n; }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    make_move_iterator(_Iterator __i)
    { return move_iterator<_Iterator>(__i); }

  template<typename _Iterator, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond
      <typename iterator_traits<_Iterator>::value_type>::value,
                _Iterator, move_iterator<_Iterator>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Iterator __i)
    { return _ReturnType(__i); }



  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
      const _Tp*, move_iterator<_Tp*>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
    { return _ReturnType(__i); }



  template<typename _Iterator>
    auto
    __niter_base(move_iterator<_Iterator> __it)
    -> decltype(make_move_iterator(__niter_base(__it.base())))
    { return make_move_iterator(__niter_base(__it.base())); }

  template<typename _Iterator>
    struct __is_move_iterator<move_iterator<_Iterator> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }


}
# 68 "/usr/include/c++/7/bits/stl_algobase.h" 2 3

# 1 "/usr/include/c++/7/debug/debug.h" 1 3
# 48 "/usr/include/c++/7/debug/debug.h" 3
namespace std
{
  namespace __debug { }
}




namespace __gnu_debug
{
  using namespace std::__debug;
}
# 70 "/usr/include/c++/7/bits/stl_algobase.h" 2 3

# 1 "/usr/include/c++/7/bits/predefined_ops.h" 1 3
# 33 "/usr/include/c++/7/bits/predefined_ops.h" 3
namespace __gnu_cxx
{
namespace __ops
{
  struct _Iter_less_iter
  {
    template<typename _Iterator1, typename _Iterator2>
      constexpr
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 < *__it2; }
  };

  constexpr
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }

  struct _Iter_less_val
  {

    constexpr _Iter_less_val() = default;




    explicit
    _Iter_less_val(_Iter_less_iter) { }

    template<typename _Iterator, typename _Value>
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it < __val; }
  };

  inline _Iter_less_val
  __iter_less_val()
  { return _Iter_less_val(); }

  inline _Iter_less_val
  __iter_comp_val(_Iter_less_iter)
  { return _Iter_less_val(); }

  struct _Val_less_iter
  {

    constexpr _Val_less_iter() = default;




    explicit
    _Val_less_iter(_Iter_less_iter) { }

    template<typename _Value, typename _Iterator>
      bool
      operator()(_Value& __val, _Iterator __it) const
      { return __val < *__it; }
  };

  inline _Val_less_iter
  __val_less_iter()
  { return _Val_less_iter(); }

  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }

  struct _Iter_equal_to_iter
  {
    template<typename _Iterator1, typename _Iterator2>
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 == *__it2; }
  };

  inline _Iter_equal_to_iter
  __iter_equal_to_iter()
  { return _Iter_equal_to_iter(); }

  struct _Iter_equal_to_val
  {
    template<typename _Iterator, typename _Value>
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it == __val; }
  };

  inline _Iter_equal_to_val
  __iter_equal_to_val()
  { return _Iter_equal_to_val(); }

  inline _Iter_equal_to_val
  __iter_comp_val(_Iter_equal_to_iter)
  { return _Iter_equal_to_val(); }

  template<typename _Compare>
    struct _Iter_comp_iter
    {
      _Compare _M_comp;

      explicit constexpr
      _Iter_comp_iter(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

      template<typename _Iterator1, typename _Iterator2>
        constexpr
        bool
        operator()(_Iterator1 __it1, _Iterator2 __it2)
        { return bool(_M_comp(*__it1, *__it2)); }
    };

  template<typename _Compare>
    constexpr
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
    { return _Iter_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    struct _Iter_comp_val
    {
      _Compare _M_comp;

      explicit
      _Iter_comp_val(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

      explicit
      _Iter_comp_val(const _Iter_comp_iter<_Compare>& __comp)
 : _M_comp(__comp._M_comp)
      { }


      explicit
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 : _M_comp(std::move(__comp._M_comp))
      { }


      template<typename _Iterator, typename _Value>
 bool
 operator()(_Iterator __it, _Value& __val)
 { return bool(_M_comp(*__it, __val)); }
    };

  template<typename _Compare>
   inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Compare __comp)
    { return _Iter_comp_val<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Iter_comp_iter<_Compare> __comp)
    { return _Iter_comp_val<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    struct _Val_comp_iter
    {
      _Compare _M_comp;

      explicit
      _Val_comp_iter(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

      explicit
      _Val_comp_iter(const _Iter_comp_iter<_Compare>& __comp)
 : _M_comp(__comp._M_comp)
      { }


      explicit
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 : _M_comp(std::move(__comp._M_comp))
      { }


      template<typename _Value, typename _Iterator>
 bool
 operator()(_Value& __val, _Iterator __it)
 { return bool(_M_comp(__val, *__it)); }
    };

  template<typename _Compare>
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Compare __comp)
    { return _Val_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
    { return _Val_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Value>
    struct _Iter_equals_val
    {
      _Value& _M_value;

      explicit
      _Iter_equals_val(_Value& __value)
 : _M_value(__value)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return *__it == _M_value; }
    };

  template<typename _Value>
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
    { return _Iter_equals_val<_Value>(__val); }

  template<typename _Iterator1>
    struct _Iter_equals_iter
    {
      _Iterator1 _M_it1;

      explicit
      _Iter_equals_iter(_Iterator1 __it1)
 : _M_it1(__it1)
      { }

      template<typename _Iterator2>
 bool
 operator()(_Iterator2 __it2)
 { return *__it2 == *_M_it1; }
    };

  template<typename _Iterator>
    inline _Iter_equals_iter<_Iterator>
    __iter_comp_iter(_Iter_equal_to_iter, _Iterator __it)
    { return _Iter_equals_iter<_Iterator>(__it); }

  template<typename _Predicate>
    struct _Iter_pred
    {
      _Predicate _M_pred;

      explicit
      _Iter_pred(_Predicate __pred)
 : _M_pred(std::move(__pred))
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
    { return _Iter_pred<_Predicate>(std::move(__pred)); }

  template<typename _Compare, typename _Value>
    struct _Iter_comp_to_val
    {
      _Compare _M_comp;
      _Value& _M_value;

      _Iter_comp_to_val(_Compare __comp, _Value& __value)
 : _M_comp(std::move(__comp)), _M_value(__value)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return bool(_M_comp(*__it, _M_value)); }
    };

  template<typename _Compare, typename _Value>
    _Iter_comp_to_val<_Compare, _Value>
    __iter_comp_val(_Compare __comp, _Value &__val)
    {
      return _Iter_comp_to_val<_Compare, _Value>(std::move(__comp), __val);
    }

  template<typename _Compare, typename _Iterator1>
    struct _Iter_comp_to_iter
    {
      _Compare _M_comp;
      _Iterator1 _M_it1;

      _Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1)
 : _M_comp(std::move(__comp)), _M_it1(__it1)
      { }

      template<typename _Iterator2>
 bool
 operator()(_Iterator2 __it2)
 { return bool(_M_comp(*__it2, *_M_it1)); }
    };

  template<typename _Compare, typename _Iterator>
    inline _Iter_comp_to_iter<_Compare, _Iterator>
    __iter_comp_iter(_Iter_comp_iter<_Compare> __comp, _Iterator __it)
    {
      return _Iter_comp_to_iter<_Compare, _Iterator>(
   std::move(__comp._M_comp), __it);
    }

  template<typename _Predicate>
    struct _Iter_negate
    {
      _Predicate _M_pred;

      explicit
      _Iter_negate(_Predicate __pred)
 : _M_pred(std::move(__pred))
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return !bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
    inline _Iter_negate<_Predicate>
    __negate(_Iter_pred<_Predicate> __pred)
    { return _Iter_negate<_Predicate>(std::move(__pred._M_pred)); }

}
}
# 72 "/usr/include/c++/7/bits/stl_algobase.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 118 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline void
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {

     

     
# 148 "/usr/include/c++/7/bits/stl_algobase.h" 3
      swap(*__a, *__b);

    }
# 164 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2)
    {

     

     

      ;

      for (; __first1 != __last1; ++__first1, (void)++__first2)
 std::iter_swap(__first1, __first2);
      return __first2;
    }
# 192 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _Tp>
    constexpr
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {

     

      if (__b < __a)
 return __b;
      return __a;
    }
# 216 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _Tp>
    constexpr
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {

     

      if (__a < __b)
 return __b;
      return __a;
    }
# 240 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    constexpr
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__b, __a))
 return __b;
      return __a;
    }
# 262 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    constexpr
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__a, __b))
 return __b;
      return __a;
    }



  template<typename _Iterator>
    inline _Iterator
    __niter_base(_Iterator __it)
    { return __it; }







  template<bool, bool, typename>
    struct __copy_move
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   for (; __first != __last; ++__result, (void)++__first)
     *__result = *__first;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move<true, false, _Category>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   for (; __first != __last; ++__result, (void)++__first)
     *__result = std::move(*__first);
   return __result;
 }
    };


  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = *__first;
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<>
    struct __copy_move<true, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = std::move(*__first);
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {

   using __assignable = conditional<_IsMove,
        is_move_assignable<_Tp>,
        is_copy_assignable<_Tp>>;

   static_assert( __assignable::type::value, "type is not assignable" );

   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   return __result + _Num;
 }
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueTypeI)
                      && __is_pointer<_II>::__value
                      && __is_pointer<_OI>::__value
        && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
                       _Category>::__copy_m(__first, __last, __result);
    }



  template<typename _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits>
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator;

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(_CharT*, _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(const _CharT*, const _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
     istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
          std::__niter_base(__last),
          std::__niter_base(__result)));
    }
# 444 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    {

     
     

      ;

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 477 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    move(_II __first, _II __last, _OI __result)
    {

     
     

      ;

      return std::__copy_move_a2<true>(std::__miter_base(__first),
           std::__miter_base(__last), __result);
    }






  template<bool, bool, typename>
    struct __copy_move_backward
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   while (__first != __last)
     *--__result = *--__last;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move_backward<true, false, _Category>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   while (__first != __last)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<false, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = *--__last;
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<true, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {

   using __assignable = conditional<_IsMove,
        is_move_assignable<_Tp>,
        is_copy_assignable<_Tp>>;

   static_assert( __assignable::type::value, "type is not assignable" );

   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   return __result - _Num;
 }
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueType1)
                      && __is_pointer<_BI1>::__value
                      && __is_pointer<_BI2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__copy_move_backward<_IsMove, __simple,
                                _Category>::__copy_move_b(__first,
         __last,
         __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      return _BI2(std::__copy_move_backward_a<_IsMove>
    (std::__niter_base(__first), std::__niter_base(__last),
     std::__niter_base(__result)));
    }
# 620 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {

     
     
     


      ;

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 656 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {

     
     
     


      ;

      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
      std::__miter_base(__last),
      __result);
    }






  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
      for (; __first != __last; ++__first)
 *__first = __value;
    }

  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 *__first = __tmp;
    }


  template<typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
    {
      const _Tp __tmp = __c;
      if (const size_t __len = __last - __first)
 __builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
    }
# 722 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    {

     

      ;

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
      __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __value;
      return __first;
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __tmp;
      return __first;
    }

  template<typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
    {
      std::__fill_a(__first, __first + __n, __c);
      return __first + __n;
    }
# 782 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    {

     

      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
    }

  template<bool _BoolType>
    struct __equal
    {
      template<typename _II1, typename _II2>
        static bool
        equal(_II1 __first1, _II1 __last1, _II2 __first2)
        {
   for (; __first1 != __last1; ++__first1, (void)++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return true;
 }
    };

  template<>
    struct __equal<true>
    {
      template<typename _Tp>
        static bool
        equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
        {
   if (const size_t __len = (__last1 - __first1))
     return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
   return true;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple = ((__is_integer<_ValueType1>::__value
         || __is_pointer<_ValueType1>::__value)
                      && __is_pointer<_II1>::__value
                      && __is_pointer<_II2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__equal<__simple>::equal(__first1, __last1, __first2);
    }

  template<typename, typename>
    struct __lc_rai
    {
      template<typename _II1, typename _II2>
        static _II1
        __newlast1(_II1, _II1 __last1, _II2, _II2)
        { return __last1; }

      template<typename _II>
        static bool
        __cnd2(_II __first, _II __last)
        { return __first != __last; }
    };

  template<>
    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>
    {
      template<typename _RAI1, typename _RAI2>
        static _RAI1
        __newlast1(_RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2)
        {
   const typename iterator_traits<_RAI1>::difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits<_RAI2>::difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }

      template<typename _RAI>
        static bool
        __cnd2(_RAI, _RAI)
        { return true; }
    };

  template<typename _II1, typename _II2, typename _Compare>
    bool
    __lexicographical_compare_impl(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2,
       _Compare __comp)
    {
      typedef typename iterator_traits<_II1>::iterator_category _Category1;
      typedef typename iterator_traits<_II2>::iterator_category _Category2;
      typedef std::__lc_rai<_Category1, _Category2> __rai_type;

      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
    ++__first1, (void)++__first2)
 {
   if (__comp(__first1, __first2))
     return true;
   if (__comp(__first2, __first1))
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }

  template<bool _BoolType>
    struct __lexicographical_compare
    {
      template<typename _II1, typename _II2>
        static bool __lc(_II1, _II1, _II2, _II2);
    };

  template<bool _BoolType>
    template<typename _II1, typename _II2>
      bool
      __lexicographical_compare<_BoolType>::
      __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
      {
 return std::__lexicographical_compare_impl(__first1, __last1,
         __first2, __last2,
     __gnu_cxx::__ops::__iter_less_iter());
      }

  template<>
    struct __lexicographical_compare<true>
    {
      template<typename _Tp, typename _Up>
        static bool
        __lc(const _Tp* __first1, const _Tp* __last1,
      const _Up* __first2, const _Up* __last2)
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   if (const size_t __len = std::min(__len1, __len2))
     if (int __result = __builtin_memcmp(__first1, __first2, __len))
       return __result < 0;
   return __len1 < __len2;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple =
 (__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value
  && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed
  && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed
  && __is_pointer<_II1>::__value
  && __is_pointer<_II2>::__value);

      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,
           __first2, __last2);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 982 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {

     
     

      ;

      return std::__lower_bound(__first, __last, __val,
    __gnu_cxx::__ops::__iter_less_val());
    }



  inline constexpr int
  __lg(int __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline constexpr unsigned
  __lg(unsigned __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline constexpr long
  __lg(long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline constexpr unsigned long
  __lg(unsigned long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline constexpr long long
  __lg(long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }

  inline constexpr unsigned long long
  __lg(unsigned long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }




# 1039 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {

     
     
     


      ;

      return std::__equal_aux(std::__niter_base(__first1),
         std::__niter_base(__last1),
         std::__niter_base(__first2));
    }
# 1071 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred)
    {

     
     
      ;

      for (; __first1 != __last1; ++__first1, (void)++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return true;
    }
# 1104 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
    {

     
     
     


      ;
      ;

      using _RATag = random_access_iterator_tag;
      using _Cat1 = typename iterator_traits<_II1>::iterator_category;
      using _Cat2 = typename iterator_traits<_II2>::iterator_category;
      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;
      if (_RAIters())
 {
   auto __d1 = std::distance(__first1, __last1);
   auto __d2 = std::distance(__first2, __last2);
   if (__d1 != __d2)
     return false;
   return std::equal(__first1, __last1, __first2);
 }

      for (; __first1 != __last1 && __first2 != __last2;
   ++__first1, (void)++__first2)
 if (!(*__first1 == *__first2))
   return false;
      return __first1 == __last1 && __first2 == __last2;
    }
# 1153 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _IIter2 __last2, _BinaryPredicate __binary_pred)
    {

     
     
      ;
      ;

      using _RATag = random_access_iterator_tag;
      using _Cat1 = typename iterator_traits<_IIter1>::iterator_category;
      using _Cat2 = typename iterator_traits<_IIter2>::iterator_category;
      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;
      if (_RAIters())
 {
   auto __d1 = std::distance(__first1, __last1);
   auto __d2 = std::distance(__first2, __last2);
   if (__d1 != __d2)
     return false;
   return std::equal(__first1, __last1, __first2,
           __binary_pred);
 }

      for (; __first1 != __last1 && __first2 != __last2;
   ++__first1, (void)++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return __first1 == __last1 && __first2 == __last2;
    }
# 1201 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {





     
     
     
     
      ;
      ;

      return std::__lexicographical_compare_aux(std::__niter_base(__first1),
      std::__niter_base(__last1),
      std::__niter_base(__first2),
      std::__niter_base(__last2));
    }
# 1237 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2, typename _Compare>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp)
    {

     
     
      ;
      ;

      return std::__lexicographical_compare_impl
 (__first1, __last1, __first2, __last2,
  __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {
      while (__first1 != __last1 && __binary_pred(__first1, __first2))
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1280 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2)
    {

     
     
     


      ;

      return std::__mismatch(__first1, __last1, __first2,
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1313 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {

     
     
      ;

      return std::__mismatch(__first1, __last1, __first2,
 __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }



  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _BinaryPredicate __binary_pred)
    {
      while (__first1 != __last1 && __first2 != __last2
      && __binary_pred(__first1, __first2))
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1360 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2)
    {

     
     
     


      ;
      ;

      return std::__mismatch(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1395 "/usr/include/c++/7/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2,
      _BinaryPredicate __binary_pred)
    {

     
     
      ;
      ;

      return std::__mismatch(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }



}
# 61 "/usr/include/c++/7/vector" 2 3
# 1 "/usr/include/c++/7/bits/allocator.h" 1 3
# 46 "/usr/include/c++/7/bits/allocator.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++allocator.h" 1 3
# 33 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++allocator.h" 3
# 1 "/usr/include/c++/7/ext/new_allocator.h" 1 3
# 33 "/usr/include/c++/7/ext/new_allocator.h" 3
# 1 "/usr/include/c++/7/new" 1 3
# 37 "/usr/include/c++/7/new" 3
       
# 38 "/usr/include/c++/7/new" 3


# 1 "/usr/include/c++/7/exception" 1 3
# 33 "/usr/include/c++/7/exception" 3
       
# 34 "/usr/include/c++/7/exception" 3

#pragma GCC visibility push(default)


# 1 "/usr/include/c++/7/bits/exception.h" 1 3
# 34 "/usr/include/c++/7/bits/exception.h" 3
       
# 35 "/usr/include/c++/7/bits/exception.h" 3

#pragma GCC visibility push(default)



extern "C++" {

namespace std
{
# 60 "/usr/include/c++/7/bits/exception.h" 3
  class exception
  {
  public:
    exception() noexcept { }
    virtual ~exception() noexcept;



    virtual const char*
    what() const noexcept;
  };

}

}

#pragma GCC visibility pop
# 39 "/usr/include/c++/7/exception" 2 3

extern "C++" {

namespace std
{


  class bad_exception : public exception
  {
  public:
    bad_exception() noexcept { }



    virtual ~bad_exception() noexcept;


    virtual const char*
    what() const noexcept;
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) noexcept;



  terminate_handler get_terminate() noexcept;




  void terminate() noexcept __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) noexcept;



  unexpected_handler get_unexpected() noexcept;




  void unexpected() __attribute__ ((__noreturn__));
# 101 "/usr/include/c++/7/exception" 3
  bool uncaught_exception() noexcept __attribute__ ((__pure__));




  int uncaught_exceptions() noexcept __attribute__ ((__pure__));



}

namespace __gnu_cxx
{

# 132 "/usr/include/c++/7/exception" 3
  void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop


# 1 "/usr/include/c++/7/bits/exception_ptr.h" 1 3
# 34 "/usr/include/c++/7/bits/exception_ptr.h" 3
#pragma GCC visibility push(default)



# 1 "/usr/include/c++/7/bits/cxxabi_init_exception.h" 1 3
# 34 "/usr/include/c++/7/bits/cxxabi_init_exception.h" 3
       
# 35 "/usr/include/c++/7/bits/cxxabi_init_exception.h" 3

#pragma GCC visibility push(default)

# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 39 "/usr/include/c++/7/bits/cxxabi_init_exception.h" 2 3
# 50 "/usr/include/c++/7/bits/cxxabi_init_exception.h" 3
namespace std
{
  class type_info;
}

namespace __cxxabiv1
{
  struct __cxa_refcounted_exception;

  extern "C"
    {

      void*
      __cxa_allocate_exception(size_t) noexcept;

      void
      __cxa_free_exception(void*) noexcept;


      __cxa_refcounted_exception*
      __cxa_init_primary_exception(void *object, std::type_info *tinfo,
                void ( *dest) (void *)) noexcept;

    }
}



#pragma GCC visibility pop
# 39 "/usr/include/c++/7/bits/exception_ptr.h" 2 3
# 1 "/usr/include/c++/7/typeinfo" 1 3
# 32 "/usr/include/c++/7/typeinfo" 3
       
# 33 "/usr/include/c++/7/typeinfo" 3



# 1 "/usr/include/c++/7/bits/hash_bytes.h" 1 3
# 33 "/usr/include/c++/7/bits/hash_bytes.h" 3
       
# 34 "/usr/include/c++/7/bits/hash_bytes.h" 3



namespace std
{







  size_t
  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);





  size_t
  _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);


}
# 37 "/usr/include/c++/7/typeinfo" 2 3


#pragma GCC visibility push(default)

extern "C++" {

namespace __cxxabiv1
{
  class __class_type_info;
}
# 80 "/usr/include/c++/7/typeinfo" 3
namespace std
{






  class type_info
  {
  public:




    virtual ~type_info();



    const char* name() const noexcept
    { return __name[0] == '*' ? __name + 1 : __name; }
# 115 "/usr/include/c++/7/typeinfo" 3
    bool before(const type_info& __arg) const noexcept
    { return (__name[0] == '*' && __arg.__name[0] == '*')
 ? __name < __arg.__name
 : __builtin_strcmp (__name, __arg.__name) < 0; }

    bool operator==(const type_info& __arg) const noexcept
    {
      return ((__name == __arg.__name)
       || (__name[0] != '*' &&
    __builtin_strcmp (__name, __arg.__name) == 0));
    }
# 136 "/usr/include/c++/7/typeinfo" 3
    bool operator!=(const type_info& __arg) const noexcept
    { return !operator==(__arg); }


    size_t hash_code() const noexcept
    {

      return _Hash_bytes(name(), __builtin_strlen(name()),
    static_cast<size_t>(0xc70f6907UL));



    }



    virtual bool __is_pointer_p() const;


    virtual bool __is_function_p() const;







    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,
       unsigned __outer) const;


    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,
        void **__obj_ptr) const;

  protected:
    const char *__name;

    explicit type_info(const char *__n): __name(__n) { }

  private:

    type_info& operator=(const type_info&);
    type_info(const type_info&);
  };







  class bad_cast : public exception
  {
  public:
    bad_cast() noexcept { }



    virtual ~bad_cast() noexcept;


    virtual const char* what() const noexcept;
  };





  class bad_typeid : public exception
  {
  public:
    bad_typeid () noexcept { }



    virtual ~bad_typeid() noexcept;


    virtual const char* what() const noexcept;
  };
}

}

#pragma GCC visibility pop
# 40 "/usr/include/c++/7/bits/exception_ptr.h" 2 3
# 1 "/usr/include/c++/7/new" 1 3
# 41 "/usr/include/c++/7/bits/exception_ptr.h" 2 3

extern "C++" {

namespace std
{
  class type_info;





  namespace __exception_ptr
  {
    class exception_ptr;
  }

  using __exception_ptr::exception_ptr;





  exception_ptr current_exception() noexcept;

  template<typename _Ex>
  exception_ptr make_exception_ptr(_Ex) noexcept;


  void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));

  namespace __exception_ptr
  {
    using std::rethrow_exception;





    class exception_ptr
    {
      void* _M_exception_object;

      explicit exception_ptr(void* __e) noexcept;

      void _M_addref() noexcept;
      void _M_release() noexcept;

      void *_M_get() const noexcept __attribute__ ((__pure__));

      friend exception_ptr std::current_exception() noexcept;
      friend void std::rethrow_exception(exception_ptr);
      template<typename _Ex>
      friend exception_ptr std::make_exception_ptr(_Ex) noexcept;

    public:
      exception_ptr() noexcept;

      exception_ptr(const exception_ptr&) noexcept;


      exception_ptr(nullptr_t) noexcept
      : _M_exception_object(0)
      { }

      exception_ptr(exception_ptr&& __o) noexcept
      : _M_exception_object(__o._M_exception_object)
      { __o._M_exception_object = 0; }
# 117 "/usr/include/c++/7/bits/exception_ptr.h" 3
      exception_ptr&
      operator=(const exception_ptr&) noexcept;


      exception_ptr&
      operator=(exception_ptr&& __o) noexcept
      {
        exception_ptr(static_cast<exception_ptr&&>(__o)).swap(*this);
        return *this;
      }


      ~exception_ptr() noexcept;

      void
      swap(exception_ptr&) noexcept;
# 144 "/usr/include/c++/7/bits/exception_ptr.h" 3
      explicit operator bool() const
      { return _M_exception_object; }


      friend bool
      operator==(const exception_ptr&, const exception_ptr&)
 noexcept __attribute__ ((__pure__));

      const class std::type_info*
      __cxa_exception_type() const noexcept
 __attribute__ ((__pure__));
    };

    bool
    operator==(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    bool
    operator!=(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    inline void
    swap(exception_ptr& __lhs, exception_ptr& __rhs)
    { __lhs.swap(__rhs); }

    template<typename _Ex>
      inline void
      __dest_thunk(void* __x)
      { static_cast<_Ex*>(__x)->~_Ex(); }

  }


  template<typename _Ex>
    exception_ptr
    make_exception_ptr(_Ex __ex) noexcept
    {

      void* __e = __cxxabiv1::__cxa_allocate_exception(sizeof(_Ex));
      (void) __cxxabiv1::__cxa_init_primary_exception(
   __e, const_cast<std::type_info*>(&typeid(__ex)),
   __exception_ptr::__dest_thunk<_Ex>);
      try
 {
          ::new (__e) _Ex(__ex);
          return exception_ptr(__e);
 }
      catch(...)
 {
   __cxxabiv1::__cxa_free_exception(__e);
   return current_exception();
 }
# 208 "/usr/include/c++/7/bits/exception_ptr.h" 3
    }





  template<typename _Ex>
    exception_ptr
    copy_exception(_Ex __ex) noexcept __attribute__ ((__deprecated__));

  template<typename _Ex>
    exception_ptr
    copy_exception(_Ex __ex) noexcept
    { return std::make_exception_ptr<_Ex>(__ex); }


}

}

#pragma GCC visibility pop
# 143 "/usr/include/c++/7/exception" 2 3
# 1 "/usr/include/c++/7/bits/nested_exception.h" 1 3
# 33 "/usr/include/c++/7/bits/nested_exception.h" 3
#pragma GCC visibility push(default)
# 42 "/usr/include/c++/7/bits/nested_exception.h" 3
extern "C++" {

namespace std
{






  class nested_exception
  {
    exception_ptr _M_ptr;

  public:
    nested_exception() noexcept : _M_ptr(current_exception()) { }

    nested_exception(const nested_exception&) noexcept = default;

    nested_exception& operator=(const nested_exception&) noexcept = default;

    virtual ~nested_exception() noexcept;

    [[noreturn]]
    void
    rethrow_nested() const
    {
      if (_M_ptr)
 rethrow_exception(_M_ptr);
      std::terminate();
    }

    exception_ptr
    nested_ptr() const noexcept
    { return _M_ptr; }
  };

  template<typename _Except>
    struct _Nested_exception : public _Except, public nested_exception
    {
      explicit _Nested_exception(const _Except& __ex)
      : _Except(__ex)
      { }

      explicit _Nested_exception(_Except&& __ex)
      : _Except(static_cast<_Except&&>(__ex))
      { }
    };




  template<typename _Tp>
    inline void
    __throw_with_nested_impl(_Tp&& __t, true_type)
    {
      using _Up = typename remove_reference<_Tp>::type;
      throw _Nested_exception<_Up>{std::forward<_Tp>(__t)};
    }

  template<typename _Tp>
    inline void
    __throw_with_nested_impl(_Tp&& __t, false_type)
    { throw std::forward<_Tp>(__t); }



  template<typename _Tp>
    [[noreturn]]
    inline void
    throw_with_nested(_Tp&& __t)
    {
      using _Up = typename decay<_Tp>::type;
      using _CopyConstructible
 = __and_<is_copy_constructible<_Up>, is_move_constructible<_Up>>;
      static_assert(_CopyConstructible::value,
   "throw_with_nested argument must be CopyConstructible");
      using __nest = __and_<is_class<_Up>, __bool_constant<!__is_final(_Up)>,
       __not_<is_base_of<nested_exception, _Up>>>;
      std::__throw_with_nested_impl(std::forward<_Tp>(__t), __nest{});
    }


  template<typename _Tp>
    using __rethrow_if_nested_cond = typename enable_if<
      __and_<is_polymorphic<_Tp>,
      __or_<__not_<is_base_of<nested_exception, _Tp>>,
     is_convertible<_Tp*, nested_exception*>>>::value
    >::type;


  template<typename _Ex>
    inline __rethrow_if_nested_cond<_Ex>
    __rethrow_if_nested_impl(const _Ex* __ptr)
    {
      if (auto __ne_ptr = dynamic_cast<const nested_exception*>(__ptr))
 __ne_ptr->rethrow_nested();
    }


  inline void
  __rethrow_if_nested_impl(const void*)
  { }


  template<typename _Ex>
    inline void
    rethrow_if_nested(const _Ex& __ex)
    { std::__rethrow_if_nested_impl(std::__addressof(__ex)); }


}

}



#pragma GCC visibility pop
# 144 "/usr/include/c++/7/exception" 2 3
# 41 "/usr/include/c++/7/new" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };


  class bad_array_new_length : public bad_alloc
  {
  public:
    bad_array_new_length() throw() { };



    virtual ~bad_array_new_length() throw();


    virtual const char* what() const throw();
  };






  struct nothrow_t
  {

    explicit nothrow_t() = default;

  };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();



  new_handler get_new_handler() noexcept;

}
# 120 "/usr/include/c++/7/new" 3
void* operator new(std::size_t)
  __attribute__((__externally_visible__));
void* operator new[](std::size_t)
  __attribute__((__externally_visible__));
void operator delete(void*) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*) noexcept
  __attribute__((__externally_visible__));

void operator delete(void*, std::size_t) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, std::size_t) noexcept
  __attribute__((__externally_visible__));

void* operator new(std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void* operator new[](std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete(void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
# 168 "/usr/include/c++/7/new" 3
inline void* operator new(std::size_t, void* __p) noexcept
{ return __p; }
inline void* operator new[](std::size_t, void* __p) noexcept
{ return __p; }


inline void operator delete (void*, void*) noexcept { }
inline void operator delete[](void*, void*) noexcept { }

}
# 216 "/usr/include/c++/7/new" 3
#pragma GCC visibility pop
# 34 "/usr/include/c++/7/ext/new_allocator.h" 2 3






namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  using std::size_t;
  using std::ptrdiff_t;
# 57 "/usr/include/c++/7/ext/new_allocator.h" 3
  template<typename _Tp>
    class new_allocator
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
 struct rebind
 { typedef new_allocator<_Tp1> other; };




      typedef std::true_type propagate_on_container_move_assignment;


      new_allocator() noexcept { }

      new_allocator(const new_allocator&) noexcept { }

      template<typename _Tp1>
 new_allocator(const new_allocator<_Tp1>&) noexcept { }

      ~new_allocator() noexcept { }

      pointer
      address(reference __x) const noexcept
      { return std::__addressof(__x); }

      const_pointer
      address(const_reference __x) const noexcept
      { return std::__addressof(__x); }



      pointer
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {
 if (__n > this->max_size())
   std::__throw_bad_alloc();
# 111 "/usr/include/c++/7/ext/new_allocator.h" 3
 return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }


      void
      deallocate(pointer __p, size_type)
      {







 ::operator delete(__p);
      }

      size_type
      max_size() const noexcept
      { return size_t(-1) / sizeof(_Tp); }


      template<typename _Up, typename... _Args>
 void
 construct(_Up* __p, _Args&&... __args)
 { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
 void
 destroy(_Up* __p) { __p->~_Up(); }
# 151 "/usr/include/c++/7/ext/new_allocator.h" 3
    };

  template<typename _Tp>
    inline bool
    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return false; }


}
# 34 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++allocator.h" 2 3


namespace std
{
# 47 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++allocator.h" 3
  template<typename _Tp>
    using __allocator_base = __gnu_cxx::new_allocator<_Tp>;
}
# 47 "/usr/include/c++/7/bits/allocator.h" 2 3
# 1 "/usr/include/c++/7/bits/memoryfwd.h" 1 3
# 46 "/usr/include/c++/7/bits/memoryfwd.h" 3
       
# 47 "/usr/include/c++/7/bits/memoryfwd.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{

# 63 "/usr/include/c++/7/bits/memoryfwd.h" 3
  template<typename>
    class allocator;

  template<>
    class allocator<void>;


  template<typename, typename>
    struct uses_allocator;




}
# 48 "/usr/include/c++/7/bits/allocator.h" 2 3
# 57 "/usr/include/c++/7/bits/allocator.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{








  template<>
    class allocator<void>
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef void* pointer;
      typedef const void* const_pointer;
      typedef void value_type;

      template<typename _Tp1>
 struct rebind
 { typedef allocator<_Tp1> other; };




      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;

      template<typename _Up, typename... _Args>
 void
 construct(_Up* __p, _Args&&... __args)
 { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
 void
 destroy(_Up* __p) { __p->~_Up(); }

    };
# 107 "/usr/include/c++/7/bits/allocator.h" 3
  template<typename _Tp>
    class allocator: public __allocator_base<_Tp>
    {
   public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
 struct rebind
 { typedef allocator<_Tp1> other; };




      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;


      allocator() throw() { }

      allocator(const allocator& __a) throw()
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
 allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }


    };

  template<typename _T1, typename _T2>
    inline bool
    operator==(const allocator<_T1>&, const allocator<_T2>&)
    noexcept
    { return true; }

  template<typename _Tp>
    inline bool
    operator==(const allocator<_Tp>&, const allocator<_Tp>&)
    noexcept
    { return true; }

  template<typename _T1, typename _T2>
    inline bool
    operator!=(const allocator<_T1>&, const allocator<_T2>&)
    noexcept
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
    noexcept
    { return false; }






  extern template class allocator<char>;
  extern template class allocator<wchar_t>;






  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_swap
    { static void _S_do_it(_Alloc&, _Alloc&) noexcept { } };

  template<typename _Alloc>
    struct __alloc_swap<_Alloc, false>
    {
      static void
      _S_do_it(_Alloc& __one, _Alloc& __two) noexcept
      {

 if (__one != __two)
   swap(__one, __two);
      }
    };


  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_neq
    {
      static bool
      _S_do_it(const _Alloc&, const _Alloc&)
      { return false; }
    };

  template<typename _Alloc>
    struct __alloc_neq<_Alloc, false>
    {
      static bool
      _S_do_it(const _Alloc& __one, const _Alloc& __two)
      { return __one != __two; }
    };


  template<typename _Tp, bool
    = __or_<is_copy_constructible<typename _Tp::value_type>,
            is_nothrow_move_constructible<typename _Tp::value_type>>::value>
    struct __shrink_to_fit_aux
    { static bool _S_do_it(_Tp&) noexcept { return false; } };

  template<typename _Tp>
    struct __shrink_to_fit_aux<_Tp, true>
    {
      static bool
      _S_do_it(_Tp& __c) noexcept
      {

 try
   {
     _Tp(__make_move_if_noexcept_iterator(__c.begin()),
  __make_move_if_noexcept_iterator(__c.end()),
  __c.get_allocator()).swap(__c);
     return true;
   }
 catch(...)
   { return false; }



      }
    };



}
# 62 "/usr/include/c++/7/vector" 2 3
# 1 "/usr/include/c++/7/bits/stl_construct.h" 1 3
# 61 "/usr/include/c++/7/bits/stl_construct.h" 3
# 1 "/usr/include/c++/7/ext/alloc_traits.h" 1 3
# 32 "/usr/include/c++/7/ext/alloc_traits.h" 3
       
# 33 "/usr/include/c++/7/ext/alloc_traits.h" 3



# 1 "/usr/include/c++/7/bits/alloc_traits.h" 1 3
# 41 "/usr/include/c++/7/bits/alloc_traits.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __allocator_traits_base
  {
    template<typename _Tp, typename _Up, typename = void>
      struct __rebind : __replace_first_arg<_Tp, _Up> { };

    template<typename _Tp, typename _Up>
      struct __rebind<_Tp, _Up,
        __void_t<typename _Tp::template rebind<_Up>::other>>
      { using type = typename _Tp::template rebind<_Up>::other; };

  protected:
    template<typename _Tp>
      using __pointer = typename _Tp::pointer;
    template<typename _Tp>
      using __c_pointer = typename _Tp::const_pointer;
    template<typename _Tp>
      using __v_pointer = typename _Tp::void_pointer;
    template<typename _Tp>
      using __cv_pointer = typename _Tp::const_void_pointer;
    template<typename _Tp>
      using __pocca = typename _Tp::propagate_on_container_copy_assignment;
    template<typename _Tp>
      using __pocma = typename _Tp::propagate_on_container_move_assignment;
    template<typename _Tp>
      using __pocs = typename _Tp::propagate_on_container_swap;
    template<typename _Tp>
      using __equal = typename _Tp::is_always_equal;
  };

  template<typename _Alloc, typename _Up>
    using __alloc_rebind
      = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;





  template<typename _Alloc>
    struct allocator_traits : __allocator_traits_base
    {

      typedef _Alloc allocator_type;

      typedef typename _Alloc::value_type value_type;






      using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;

    private:

      template<template<typename> class _Func, typename _Tp, typename = void>
 struct _Ptr
 {
   using type = typename pointer_traits<pointer>::template rebind<_Tp>;
 };

      template<template<typename> class _Func, typename _Tp>
 struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>
 {
   using type = _Func<_Alloc>;
 };


      template<typename _A2, typename _PtrT, typename = void>
 struct _Diff
 { using type = typename pointer_traits<_PtrT>::difference_type; };

      template<typename _A2, typename _PtrT>
 struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>
 { using type = typename _A2::difference_type; };


      template<typename _A2, typename _DiffT, typename = void>
 struct _Size : make_unsigned<_DiffT> { };

      template<typename _A2, typename _DiffT>
 struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>
 { using type = typename _A2::size_type; };

    public:






      using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;







      using void_pointer = typename _Ptr<__v_pointer, void>::type;







      using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;







      using difference_type = typename _Diff<_Alloc, pointer>::type;







      using size_type = typename _Size<_Alloc, difference_type>::type;







      using propagate_on_container_copy_assignment
 = __detected_or_t<false_type, __pocca, _Alloc>;







      using propagate_on_container_move_assignment
 = __detected_or_t<false_type, __pocma, _Alloc>;







      using propagate_on_container_swap
 = __detected_or_t<false_type, __pocs, _Alloc>;







      using is_always_equal
 = __detected_or_t<typename is_empty<_Alloc>::type, __equal, _Alloc>;

      template<typename _Tp>
 using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;
      template<typename _Tp>
 using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;

    private:
      template<typename _Alloc2>
 static auto
 _S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)
 -> decltype(__a.allocate(__n, __hint))
 { return __a.allocate(__n, __hint); }

      template<typename _Alloc2>
 static pointer
 _S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)
 { return __a.allocate(__n); }

      template<typename _Tp, typename... _Args>
 struct __construct_helper
 {
   template<typename _Alloc2,
     typename = decltype(std::declval<_Alloc2*>()->construct(
    std::declval<_Tp*>(), std::declval<_Args>()...))>
     static true_type __test(int);

   template<typename>
     static false_type __test(...);

   using type = decltype(__test<_Alloc>(0));
 };

      template<typename _Tp, typename... _Args>
 using __has_construct
   = typename __construct_helper<_Tp, _Args...>::type;

      template<typename _Tp, typename... _Args>
 static _Require<__has_construct<_Tp, _Args...>>
 _S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 { __a.construct(__p, std::forward<_Args>(__args)...); }

      template<typename _Tp, typename... _Args>
 static
 _Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
          is_constructible<_Tp, _Args...>>>
 _S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 { ::new((void*)__p) _Tp(std::forward<_Args>(__args)...); }

      template<typename _Alloc2, typename _Tp>
 static auto
 _S_destroy(_Alloc2& __a, _Tp* __p, int)
 -> decltype(__a.destroy(__p))
 { __a.destroy(__p); }

      template<typename _Alloc2, typename _Tp>
 static void
 _S_destroy(_Alloc2&, _Tp* __p, ...)
 { __p->~_Tp(); }

      template<typename _Alloc2>
 static auto
 _S_max_size(_Alloc2& __a, int)
 -> decltype(__a.max_size())
 { return __a.max_size(); }

      template<typename _Alloc2>
 static size_type
 _S_max_size(_Alloc2&, ...)
 {


   return __gnu_cxx::__numeric_traits<size_type>::__max
     / sizeof(value_type);
 }

      template<typename _Alloc2>
 static auto
 _S_select(_Alloc2& __a, int)
 -> decltype(__a.select_on_container_copy_construction())
 { return __a.select_on_container_copy_construction(); }

      template<typename _Alloc2>
 static _Alloc2
 _S_select(_Alloc2& __a, ...)
 { return __a; }

    public:
# 299 "/usr/include/c++/7/bits/alloc_traits.h" 3
      static pointer
      allocate(_Alloc& __a, size_type __n)
      { return __a.allocate(__n); }
# 314 "/usr/include/c++/7/bits/alloc_traits.h" 3
      static pointer
      allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
      { return _S_allocate(__a, __n, __hint, 0); }
# 326 "/usr/include/c++/7/bits/alloc_traits.h" 3
      static void
      deallocate(_Alloc& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
# 341 "/usr/include/c++/7/bits/alloc_traits.h" 3
      template<typename _Tp, typename... _Args>
 static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 -> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 { _S_construct(__a, __p, std::forward<_Args>(__args)...); }
# 354 "/usr/include/c++/7/bits/alloc_traits.h" 3
      template<typename _Tp>
 static void destroy(_Alloc& __a, _Tp* __p)
 { _S_destroy(__a, __p, 0); }
# 366 "/usr/include/c++/7/bits/alloc_traits.h" 3
      static size_type max_size(const _Alloc& __a) noexcept
      { return _S_max_size(__a, 0); }
# 377 "/usr/include/c++/7/bits/alloc_traits.h" 3
      static _Alloc
      select_on_container_copy_construction(const _Alloc& __rhs)
      { return _S_select(__rhs, 0); }
    };


  template<typename _Tp>
    struct allocator_traits<allocator<_Tp>>
    {

      using allocator_type = allocator<_Tp>;

      using value_type = _Tp;


      using pointer = _Tp*;


      using const_pointer = const _Tp*;


      using void_pointer = void*;


      using const_void_pointer = const void*;


      using difference_type = std::ptrdiff_t;


      using size_type = std::size_t;


      using propagate_on_container_copy_assignment = false_type;


      using propagate_on_container_move_assignment = true_type;


      using propagate_on_container_swap = false_type;


      using is_always_equal = true_type;

      template<typename _Up>
 using rebind_alloc = allocator<_Up>;

      template<typename _Up>
 using rebind_traits = allocator_traits<allocator<_Up>>;
# 434 "/usr/include/c++/7/bits/alloc_traits.h" 3
      static pointer
      allocate(allocator_type& __a, size_type __n)
      { return __a.allocate(__n); }
# 448 "/usr/include/c++/7/bits/alloc_traits.h" 3
      static pointer
      allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
      { return __a.allocate(__n, __hint); }
# 460 "/usr/include/c++/7/bits/alloc_traits.h" 3
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
# 472 "/usr/include/c++/7/bits/alloc_traits.h" 3
      template<typename _Up, typename... _Args>
 static void
 construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 { __a.construct(__p, std::forward<_Args>(__args)...); }
# 484 "/usr/include/c++/7/bits/alloc_traits.h" 3
      template<typename _Up>
 static void
 destroy(allocator_type& __a, _Up* __p)
 { __a.destroy(__p); }






      static size_type
      max_size(const allocator_type& __a) noexcept
      { return __a.max_size(); }






      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
      { return __rhs; }
    };


  template<typename _Alloc>
    inline void
    __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)
    { __one = __two; }

  template<typename _Alloc>
    inline void
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_copy_assignment __pocca;
      __do_alloc_on_copy(__one, __two, __pocca());
    }

  template<typename _Alloc>
    inline _Alloc __alloc_on_copy(const _Alloc& __a)
    {
      typedef allocator_traits<_Alloc> __traits;
      return __traits::select_on_container_copy_construction(__a);
    }

  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
    { __one = std::move(__two); }

  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
    }

  template<typename _Alloc>
    inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)
    {
      using std::swap;
      swap(__one, __two);
    }

  template<typename _Alloc>
    inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_swap(_Alloc& __one, _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_swap __pocs;
      __do_alloc_on_swap(__one, __two, __pocs());
    }

  template<typename _Alloc>
    class __is_copy_insertable_impl
    {
      typedef allocator_traits<_Alloc> _Traits;

      template<typename _Up, typename
        = decltype(_Traits::construct(std::declval<_Alloc&>(),
          std::declval<_Up*>(),
          std::declval<const _Up&>()))>
 static true_type
 _M_select(int);

      template<typename _Up>
 static false_type
 _M_select(...);

    public:
      typedef decltype(_M_select<typename _Alloc::value_type>(0)) type;
    };


  template<typename _Alloc>
    struct __is_copy_insertable
    : __is_copy_insertable_impl<_Alloc>::type
    { };


  template<typename _Tp>
    struct __is_copy_insertable<allocator<_Tp>>
    : is_copy_constructible<_Tp>
    { };


}
# 37 "/usr/include/c++/7/ext/alloc_traits.h" 2 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{






template<typename _Alloc>
  struct __alloc_traits

  : std::allocator_traits<_Alloc>

  {
    typedef _Alloc allocator_type;

    typedef std::allocator_traits<_Alloc> _Base_type;
    typedef typename _Base_type::value_type value_type;
    typedef typename _Base_type::pointer pointer;
    typedef typename _Base_type::const_pointer const_pointer;
    typedef typename _Base_type::size_type size_type;
    typedef typename _Base_type::difference_type difference_type;

    typedef value_type& reference;
    typedef const value_type& const_reference;
    using _Base_type::allocate;
    using _Base_type::deallocate;
    using _Base_type::construct;
    using _Base_type::destroy;
    using _Base_type::max_size;

  private:
    template<typename _Ptr>
      using __is_custom_pointer
 = std::__and_<std::is_same<pointer, _Ptr>,
        std::__not_<std::is_pointer<_Ptr>>>;

  public:

    template<typename _Ptr, typename... _Args>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      construct(_Alloc& __a, _Ptr __p, _Args&&... __args)
      {
 _Base_type::construct(__a, std::addressof(*__p),
         std::forward<_Args>(__args)...);
      }


    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      { _Base_type::destroy(__a, std::addressof(*__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
    { return _Base_type::select_on_container_copy_construction(__a); }

    static void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
    { return _Base_type::propagate_on_container_copy_assignment::value; }

    static constexpr bool _S_propagate_on_move_assign()
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
    { return _Base_type::is_always_equal::value; }

    static constexpr bool _S_nothrow_move()
    { return _S_propagate_on_move_assign() || _S_always_equal(); }

    template<typename _Tp>
      struct rebind
      { typedef typename _Base_type::template rebind_alloc<_Tp> other; };
# 158 "/usr/include/c++/7/ext/alloc_traits.h" 3
  };


}
# 62 "/usr/include/c++/7/bits/stl_construct.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
# 87 "/usr/include/c++/7/bits/stl_construct.h" 3
  template<typename _T1>
    inline void
    _Construct_novalue(_T1* __p)
    { ::new(static_cast<void*>(__p)) _T1; }




  template<typename _Tp>
    inline void
    _Destroy(_Tp* __pointer)
    { __pointer->~_Tp(); }

  template<bool>
    struct _Destroy_aux
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 {
   for (; __first != __last; ++__first)
     std::_Destroy(std::__addressof(*__first));
 }
    };

  template<>
    struct _Destroy_aux<true>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator, _ForwardIterator) { }
    };






  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;


      static_assert(is_destructible<_Value_type>::value,
      "value type is destructible");

      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 __destroy(__first, __last);
    }

  template<bool>
    struct _Destroy_n_aux
    {
      template<typename _ForwardIterator, typename _Size>
        static _ForwardIterator
        __destroy_n(_ForwardIterator __first, _Size __count)
 {
   for (; __count > 0; (void)++__first, --__count)
     std::_Destroy(std::__addressof(*__first));
   return __first;
 }
    };

  template<>
    struct _Destroy_n_aux<true>
    {
      template<typename _ForwardIterator, typename _Size>
        static _ForwardIterator
        __destroy_n(_ForwardIterator __first, _Size __count)
 {
   std::advance(__first, __count);
   return __first;
 }
    };






  template<typename _ForwardIterator, typename _Size>
    inline _ForwardIterator
    _Destroy_n(_ForwardIterator __first, _Size __count)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;


      static_assert(is_destructible<_Value_type>::value,
      "value type is destructible");

      return std::_Destroy_n_aux<__has_trivial_destructor(_Value_type)>::
 __destroy_n(__first, __count);
    }







  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      _Allocator& __alloc)
    {
      typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
      for (; __first != __last; ++__first)
 __traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      allocator<_Tp>&)
    {
      _Destroy(__first, __last);
    }
# 232 "/usr/include/c++/7/bits/stl_construct.h" 3

}
# 63 "/usr/include/c++/7/vector" 2 3
# 1 "/usr/include/c++/7/bits/stl_uninitialized.h" 1 3
# 67 "/usr/include/c++/7/bits/stl_uninitialized.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<bool _TrivialValueTypes>
    struct __uninitialized_copy
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        {
   _ForwardIterator __cur = __result;
   try
     {
       for (; __first != __last; ++__first, (void)++__cur)
  std::_Construct(std::__addressof(*__cur), *__first);
       return __cur;
     }
   catch(...)
     {
       std::_Destroy(__result, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_copy<true>
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        { return std::copy(__first, __last, __result); }
    };
# 113 "/usr/include/c++/7/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
         _ForwardIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType2;




      typedef typename iterator_traits<_InputIterator>::reference _RefType1;
      typedef typename iterator_traits<_ForwardIterator>::reference _RefType2;
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;


      return std::__uninitialized_copy<__is_trivial(_ValueType1)
           && __is_trivial(_ValueType2)
           && __assignable>::
 __uninit_copy(__first, __last, __result);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_fill<true>
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        { std::fill(__first, __last, __x); }
    };
# 179 "/usr/include/c++/7/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
         const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;




      const bool __assignable = is_copy_assignable<_ValueType>::value;


      std::__uninitialized_fill<__is_trivial(_ValueType) && __assignable>::
 __uninit_fill(__first, __last, __x);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill_n
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static _ForwardIterator
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __n > 0; --__n, ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
       return __cur;
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_fill_n<true>
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static _ForwardIterator
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        { return std::fill_n(__first, __n, __x); }
    };
# 242 "/usr/include/c++/7/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;




      const bool __assignable = is_copy_assignable<_ValueType>::value;

      return __uninitialized_fill_n<__is_trivial(_ValueType) && __assignable>::
 __uninit_fill_n(__first, __n, __x);
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __result;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __first != __last; ++__first, (void)++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), *__first);
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__result, __cur, __alloc);
   throw;
 }
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a(std::make_move_iterator(__first),
      std::make_move_iterator(__last),
      __result, __alloc);
    }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
           _InputIterator __last,
           _ForwardIterator __result,
           _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
 (std::__make_move_if_noexcept_iterator(__first),
  std::__make_move_if_noexcept_iterator(__last), __result, __alloc);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Allocator>
    void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __cur != __last; ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), __x);
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Tp, typename _Tp2>
    inline void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill(__first, __last, __x); }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Allocator>
    _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __n > 0; --__n, ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), __x);
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Tp2>
    inline _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, allocator<_Tp2>&)
    { return std::uninitialized_fill_n(__first, __n, __x); }
# 378 "/usr/include/c++/7/bits/stl_uninitialized.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_copy_move(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
          __result,
          __alloc);
      try
 {
   return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }





  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_copy(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
          __result,
          __alloc);
      try
 {
   return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }




  template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
         const _Tp& __x, _InputIterator __first,
         _InputIterator __last, _Allocator& __alloc)
    {
      std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
      try
 {
   return std::__uninitialized_move_a(__first, __last, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }




  template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
    typename _Allocator>
    inline void
    __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
         _ForwardIterator __first2,
         _ForwardIterator __last2, const _Tp& __x,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
           __first2,
           __alloc);
      try
 {
   std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__first2, __mid2, __alloc);
   throw;
 }
    }





  template<bool _TrivialValueType>
    struct __uninitialized_default_1
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur));
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_default_1<true>
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;

   std::fill(__first, __last, _ValueType());
 }
    };

  template<bool _TrivialValueType>
    struct __uninitialized_default_n_1
    {
      template<typename _ForwardIterator, typename _Size>
        static _ForwardIterator
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __n > 0; --__n, ++__cur)
  std::_Construct(std::__addressof(*__cur));
       return __cur;
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_default_n_1<true>
    {
      template<typename _ForwardIterator, typename _Size>
        static _ForwardIterator
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;

   return std::fill_n(__first, __n, _ValueType());
 }
    };




  template<typename _ForwardIterator>
    inline void
    __uninitialized_default(_ForwardIterator __first,
       _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      const bool __assignable = is_copy_assignable<_ValueType>::value;

      std::__uninitialized_default_1<__is_trivial(_ValueType)
         && __assignable>::
 __uninit_default(__first, __last);
    }



  template<typename _ForwardIterator, typename _Size>
    inline _ForwardIterator
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      const bool __assignable = is_copy_assignable<_ValueType>::value;

      return __uninitialized_default_n_1<__is_trivial(_ValueType)
           && __assignable>::
 __uninit_default_n(__first, __n);
    }





  template<typename _ForwardIterator, typename _Allocator>
    void
    __uninitialized_default_a(_ForwardIterator __first,
         _ForwardIterator __last,
         _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __cur != __last; ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur));
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    __uninitialized_default_a(_ForwardIterator __first,
         _ForwardIterator __last,
         allocator<_Tp>&)
    { std::__uninitialized_default(__first, __last); }





  template<typename _ForwardIterator, typename _Size, typename _Allocator>
    _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __n > 0; --__n, ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur));
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }

  template<bool _TrivialValueType>
    struct __uninitialized_default_novalue_1
    {
      template<typename _ForwardIterator>
 static void
 __uninit_default_novalue(_ForwardIterator __first,
     _ForwardIterator __last)
 {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __cur != __last; ++__cur)
  std::_Construct_novalue(std::__addressof(*__cur));
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_default_novalue_1<true>
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default_novalue(_ForwardIterator __first,
     _ForwardIterator __last)
 {
 }
    };

  template<bool _TrivialValueType>
    struct __uninitialized_default_novalue_n_1
    {
      template<typename _ForwardIterator, typename _Size>
 static _ForwardIterator
 __uninit_default_novalue_n(_ForwardIterator __first, _Size __n)
 {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __n > 0; --__n, ++__cur)
  std::_Construct_novalue(std::__addressof(*__cur));
       return __cur;
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_default_novalue_n_1<true>
    {
      template<typename _ForwardIterator, typename _Size>
 static _ForwardIterator
 __uninit_default_novalue_n(_ForwardIterator __first, _Size __n)
 { return std::next(__first, __n); }
    };




  template<typename _ForwardIterator>
    inline void
    __uninitialized_default_novalue(_ForwardIterator __first,
        _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_default_novalue_1<
 is_trivially_default_constructible<_ValueType>::value>::
 __uninit_default_novalue(__first, __last);
    }



  template<typename _ForwardIterator, typename _Size>
    inline _ForwardIterator
    __uninitialized_default_novalue_n(_ForwardIterator __first, _Size __n)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      return __uninitialized_default_novalue_n_1<
 is_trivially_default_constructible<_ValueType>::value>::
 __uninit_default_novalue_n(__first, __n);
    }

  template<typename _InputIterator, typename _Size,
    typename _ForwardIterator>
    _ForwardIterator
    __uninitialized_copy_n(_InputIterator __first, _Size __n,
      _ForwardIterator __result, input_iterator_tag)
    {
      _ForwardIterator __cur = __result;
      try
 {
   for (; __n > 0; --__n, ++__first, ++__cur)
     std::_Construct(std::__addressof(*__cur), *__first);
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__result, __cur);
   throw;
 }
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _ForwardIterator>
    inline _ForwardIterator
    __uninitialized_copy_n(_RandomAccessIterator __first, _Size __n,
      _ForwardIterator __result,
      random_access_iterator_tag)
    { return std::uninitialized_copy(__first, __first + __n, __result); }

  template<typename _InputIterator, typename _Size,
    typename _ForwardIterator>
    pair<_InputIterator, _ForwardIterator>
    __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,
      _ForwardIterator __result, input_iterator_tag)
    {
      _ForwardIterator __cur = __result;
      try
 {
   for (; __n > 0; --__n, ++__first, ++__cur)
     std::_Construct(std::__addressof(*__cur), *__first);
   return {__first, __cur};
 }
      catch(...)
 {
   std::_Destroy(__result, __cur);
   throw;
 }
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _ForwardIterator>
    inline pair<_RandomAccessIterator, _ForwardIterator>
    __uninitialized_copy_n_pair(_RandomAccessIterator __first, _Size __n,
      _ForwardIterator __result,
      random_access_iterator_tag)
    {
      auto __second_res = uninitialized_copy(__first, __first + __n, __result);
      auto __first_res = std::next(__first, __n);
      return {__first_res, __second_res};
    }
# 810 "/usr/include/c++/7/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _Size, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy_n(_InputIterator __first, _Size __n,
    _ForwardIterator __result)
    { return std::__uninitialized_copy_n(__first, __n, __result,
      std::__iterator_category(__first)); }

  template<typename _InputIterator, typename _Size, typename _ForwardIterator>
    inline pair<_InputIterator, _ForwardIterator>
    __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,
         _ForwardIterator __result)
    {
      return
 std::__uninitialized_copy_n_pair(__first, __n, __result,
      std::__iterator_category(__first));
    }
# 884 "/usr/include/c++/7/bits/stl_uninitialized.h" 3

}
# 64 "/usr/include/c++/7/vector" 2 3
# 1 "/usr/include/c++/7/bits/stl_vector.h" 1 3
# 63 "/usr/include/c++/7/bits/stl_vector.h" 3
# 1 "/usr/include/c++/7/initializer_list" 1 3
# 33 "/usr/include/c++/7/initializer_list" 3
       
# 34 "/usr/include/c++/7/initializer_list" 3





#pragma GCC visibility push(default)



namespace std
{

  template<class _E>
    class initializer_list
    {
    public:
      typedef _E value_type;
      typedef const _E& reference;
      typedef const _E& const_reference;
      typedef size_t size_type;
      typedef const _E* iterator;
      typedef const _E* const_iterator;

    private:
      iterator _M_array;
      size_type _M_len;


      constexpr initializer_list(const_iterator __a, size_type __l)
      : _M_array(__a), _M_len(__l) { }

    public:
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }


      constexpr size_type
      size() const noexcept { return _M_len; }


      constexpr const_iterator
      begin() const noexcept { return _M_array; }


      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
    };






  template<class _Tp>
    constexpr const _Tp*
    begin(initializer_list<_Tp> __ils) noexcept
    { return __ils.begin(); }






  template<class _Tp>
    constexpr const _Tp*
    end(initializer_list<_Tp> __ils) noexcept
    { return __ils.end(); }
}

#pragma GCC visibility pop
# 64 "/usr/include/c++/7/bits/stl_vector.h" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp, typename _Alloc>
    struct _Vector_base
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_Tp>::other _Tp_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
        pointer;

      struct _Vector_impl
      : public _Tp_alloc_type
      {
 pointer _M_start;
 pointer _M_finish;
 pointer _M_end_of_storage;

 _Vector_impl()
 : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 { }

 _Vector_impl(_Tp_alloc_type const& __a) noexcept
 : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 { }


 _Vector_impl(_Tp_alloc_type&& __a) noexcept
 : _Tp_alloc_type(std::move(__a)),
   _M_start(), _M_finish(), _M_end_of_storage()
 { }


 void _M_swap_data(_Vector_impl& __x) noexcept
 {
   std::swap(_M_start, __x._M_start);
   std::swap(_M_finish, __x._M_finish);
   std::swap(_M_end_of_storage, __x._M_end_of_storage);
 }
      };

    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator() noexcept
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const noexcept
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Tp_allocator()); }

      _Vector_base()
      : _M_impl() { }

      _Vector_base(const allocator_type& __a) noexcept
      : _M_impl(__a) { }

      _Vector_base(size_t __n)
      : _M_impl()
      { _M_create_storage(__n); }

      _Vector_base(size_t __n, const allocator_type& __a)
      : _M_impl(__a)
      { _M_create_storage(__n); }


      _Vector_base(_Tp_alloc_type&& __a) noexcept
      : _M_impl(std::move(__a)) { }

      _Vector_base(_Vector_base&& __x) noexcept
      : _M_impl(std::move(__x._M_get_Tp_allocator()))
      { this->_M_impl._M_swap_data(__x._M_impl); }

      _Vector_base(_Vector_base&& __x, const allocator_type& __a)
      : _M_impl(__a)
      {
 if (__x.get_allocator() == __a)
   this->_M_impl._M_swap_data(__x._M_impl);
 else
   {
     size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
     _M_create_storage(__n);
   }
      }


      ~_Vector_base() noexcept
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
        - this->_M_impl._M_start); }

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
      {
 typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
      }

      void
      _M_deallocate(pointer __p, size_t __n)
      {
 typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 if (__p)
   _Tr::deallocate(_M_impl, __p, __n);
      }

    private:
      void
      _M_create_storage(size_t __n)
      {
 this->_M_impl._M_start = this->_M_allocate(__n);
 this->_M_impl._M_finish = this->_M_impl._M_start;
 this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }
    };
# 215 "/usr/include/c++/7/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class vector : protected _Vector_base<_Tp, _Alloc>
    {
# 227 "/usr/include/c++/7/bits/stl_vector.h" 3
      typedef _Vector_base<_Tp, _Alloc> _Base;
      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Alloc_traits;

    public:
      typedef _Tp value_type;
      typedef typename _Base::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
      const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    protected:
      using _Base::_M_allocate;
      using _Base::_M_deallocate;
      using _Base::_M_impl;
      using _Base::_M_get_Tp_allocator;

    public:






      vector()

      noexcept(is_nothrow_default_constructible<_Alloc>::value)

      : _Base() { }





      explicit
      vector(const allocator_type& __a) noexcept
      : _Base(__a) { }
# 282 "/usr/include/c++/7/bits/stl_vector.h" 3
      explicit
      vector(size_type __n, const allocator_type& __a = allocator_type())
      : _Base(__n, __a)
      { _M_default_initialize(__n); }
# 295 "/usr/include/c++/7/bits/stl_vector.h" 3
      vector(size_type __n, const value_type& __value,
      const allocator_type& __a = allocator_type())
      : _Base(__n, __a)
      { _M_fill_initialize(__n, __value); }
# 326 "/usr/include/c++/7/bits/stl_vector.h" 3
      vector(const vector& __x)
      : _Base(__x.size(),
 _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
      {
 this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }
# 344 "/usr/include/c++/7/bits/stl_vector.h" 3
      vector(vector&& __x) noexcept
      : _Base(std::move(__x)) { }


      vector(const vector& __x, const allocator_type& __a)
      : _Base(__x.size(), __a)
      {
 this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }


      vector(vector&& __rv, const allocator_type& __m)
      noexcept(_Alloc_traits::_S_always_equal())
      : _Base(std::move(__rv), __m)
      {
 if (__rv.get_allocator() != __m)
   {
     this->_M_impl._M_finish =
       std::__uninitialized_move_a(__rv.begin(), __rv.end(),
       this->_M_impl._M_start,
       _M_get_Tp_allocator());
     __rv.clear();
   }
      }
# 383 "/usr/include/c++/7/bits/stl_vector.h" 3
      vector(initializer_list<value_type> __l,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 _M_range_initialize(__l.begin(), __l.end(),
       random_access_iterator_tag());
      }
# 409 "/usr/include/c++/7/bits/stl_vector.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 vector(_InputIterator __first, _InputIterator __last,
        const allocator_type& __a = allocator_type())
 : _Base(__a)
 { _M_initialize_dispatch(__first, __last, __false_type()); }
# 433 "/usr/include/c++/7/bits/stl_vector.h" 3
      ~vector() noexcept
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        _M_get_Tp_allocator()); }
# 446 "/usr/include/c++/7/bits/stl_vector.h" 3
      vector&
      operator=(const vector& __x);
# 460 "/usr/include/c++/7/bits/stl_vector.h" 3
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
      {
 constexpr bool __move_storage =
   _Alloc_traits::_S_propagate_on_move_assign()
   || _Alloc_traits::_S_always_equal();
 _M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 return *this;
      }
# 481 "/usr/include/c++/7/bits/stl_vector.h" 3
      vector&
      operator=(initializer_list<value_type> __l)
      {
 this->_M_assign_aux(__l.begin(), __l.end(),
       random_access_iterator_tag());
 return *this;
      }
# 500 "/usr/include/c++/7/bits/stl_vector.h" 3
      void
      assign(size_type __n, const value_type& __val)
      { _M_fill_assign(__n, __val); }
# 517 "/usr/include/c++/7/bits/stl_vector.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 void
 assign(_InputIterator __first, _InputIterator __last)
 { _M_assign_dispatch(__first, __last, __false_type()); }
# 545 "/usr/include/c++/7/bits/stl_vector.h" 3
      void
      assign(initializer_list<value_type> __l)
      {
 this->_M_assign_aux(__l.begin(), __l.end(),
       random_access_iterator_tag());
      }



      using _Base::get_allocator;







      iterator
      begin() noexcept
      { return iterator(this->_M_impl._M_start); }






      const_iterator
      begin() const noexcept
      { return const_iterator(this->_M_impl._M_start); }






      iterator
      end() noexcept
      { return iterator(this->_M_impl._M_finish); }






      const_iterator
      end() const noexcept
      { return const_iterator(this->_M_impl._M_finish); }






      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }






      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }






      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }






      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }







      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_impl._M_start); }






      const_iterator
      cend() const noexcept
      { return const_iterator(this->_M_impl._M_finish); }






      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(end()); }






      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(begin()); }




      size_type
      size() const noexcept
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }


      size_type
      max_size() const noexcept
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
# 688 "/usr/include/c++/7/bits/stl_vector.h" 3
      void
      resize(size_type __new_size)
      {
 if (__new_size > size())
   _M_default_append(__new_size - size());
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 708 "/usr/include/c++/7/bits/stl_vector.h" 3
      void
      resize(size_type __new_size, const value_type& __x)
      {
 if (__new_size > size())
   _M_fill_insert(end(), __new_size - size(), __x);
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 740 "/usr/include/c++/7/bits/stl_vector.h" 3
      void
      shrink_to_fit()
      { _M_shrink_to_fit(); }






      size_type
      capacity() const noexcept
      { return size_type(this->_M_impl._M_end_of_storage
    - this->_M_impl._M_start); }





      bool
      empty() const noexcept
      { return begin() == end(); }
# 779 "/usr/include/c++/7/bits/stl_vector.h" 3
      void
      reserve(size_type __n);
# 794 "/usr/include/c++/7/bits/stl_vector.h" 3
      reference
      operator[](size_type __n) noexcept
      {
 ;
 return *(this->_M_impl._M_start + __n);
      }
# 812 "/usr/include/c++/7/bits/stl_vector.h" 3
      const_reference
      operator[](size_type __n) const noexcept
      {
 ;
 return *(this->_M_impl._M_start + __n);
      }

    protected:

      void
      _M_range_check(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("vector::_M_range_check: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
      }

    public:
# 843 "/usr/include/c++/7/bits/stl_vector.h" 3
      reference
      at(size_type __n)
      {
 _M_range_check(__n);
 return (*this)[__n];
      }
# 861 "/usr/include/c++/7/bits/stl_vector.h" 3
      const_reference
      at(size_type __n) const
      {
 _M_range_check(__n);
 return (*this)[__n];
      }





      reference
      front() noexcept
      {
 ;
 return *begin();
      }





      const_reference
      front() const noexcept
      {
 ;
 return *begin();
      }





      reference
      back() noexcept
      {
 ;
 return *(end() - 1);
      }





      const_reference
      back() const noexcept
      {
 ;
 return *(end() - 1);
      }
# 919 "/usr/include/c++/7/bits/stl_vector.h" 3
      _Tp*
      data() noexcept
      { return _M_data_ptr(this->_M_impl._M_start); }

      const _Tp*
      data() const noexcept
      { return _M_data_ptr(this->_M_impl._M_start); }
# 938 "/usr/include/c++/7/bits/stl_vector.h" 3
      void
      push_back(const value_type& __x)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         __x);
     ++this->_M_impl._M_finish;
   }
 else
   _M_realloc_insert(end(), __x);
      }


      void
      push_back(value_type&& __x)
      { emplace_back(std::move(__x)); }

      template<typename... _Args>



 void

 emplace_back(_Args&&... __args);
# 974 "/usr/include/c++/7/bits/stl_vector.h" 3
      void
      pop_back() noexcept
      {
 ;
 --this->_M_impl._M_finish;
 _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
      }
# 995 "/usr/include/c++/7/bits/stl_vector.h" 3
      template<typename... _Args>
 iterator
 emplace(const_iterator __position, _Args&&... __args)
 { return _M_emplace_aux(__position, std::forward<_Args>(__args)...); }
# 1011 "/usr/include/c++/7/bits/stl_vector.h" 3
      iterator
      insert(const_iterator __position, const value_type& __x);
# 1041 "/usr/include/c++/7/bits/stl_vector.h" 3
      iterator
      insert(const_iterator __position, value_type&& __x)
      { return _M_insert_rval(__position, std::move(__x)); }
# 1058 "/usr/include/c++/7/bits/stl_vector.h" 3
      iterator
      insert(const_iterator __position, initializer_list<value_type> __l)
      {
 auto __offset = __position - cbegin();
 _M_range_insert(begin() + __offset, __l.begin(), __l.end(),
   std::random_access_iterator_tag());
 return begin() + __offset;
      }
# 1083 "/usr/include/c++/7/bits/stl_vector.h" 3
      iterator
      insert(const_iterator __position, size_type __n, const value_type& __x)
      {
 difference_type __offset = __position - cbegin();
 _M_fill_insert(begin() + __offset, __n, __x);
 return begin() + __offset;
      }
# 1125 "/usr/include/c++/7/bits/stl_vector.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 iterator
 insert(const_iterator __position, _InputIterator __first,
        _InputIterator __last)
 {
   difference_type __offset = __position - cbegin();
   _M_insert_dispatch(begin() + __offset,
        __first, __last, __false_type());
   return begin() + __offset;
 }
# 1177 "/usr/include/c++/7/bits/stl_vector.h" 3
      iterator

      erase(const_iterator __position)
      { return _M_erase(begin() + (__position - cbegin())); }
# 1204 "/usr/include/c++/7/bits/stl_vector.h" 3
      iterator

      erase(const_iterator __first, const_iterator __last)
      {
 const auto __beg = begin();
 const auto __cbeg = cbegin();
 return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
      }
# 1228 "/usr/include/c++/7/bits/stl_vector.h" 3
      void
      swap(vector& __x) noexcept
      {


                                                          ;

 this->_M_impl._M_swap_data(__x._M_impl);
 _Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
      __x._M_get_Tp_allocator());
      }







      void
      clear() noexcept
      { _M_erase_at_end(this->_M_impl._M_start); }

    protected:




      template<typename _ForwardIterator>
 pointer
 _M_allocate_and_copy(size_type __n,
        _ForwardIterator __first, _ForwardIterator __last)
 {
   pointer __result = this->_M_allocate(__n);
   try
     {
       std::__uninitialized_copy_a(__first, __last, __result,
       _M_get_Tp_allocator());
       return __result;
     }
   catch(...)
     {
       _M_deallocate(__result, __n);
       throw;
     }
 }
# 1281 "/usr/include/c++/7/bits/stl_vector.h" 3
      template<typename _Integer>
 void
 _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
 {
   this->_M_impl._M_start = _M_allocate(static_cast<size_type>(__n));
   this->_M_impl._M_end_of_storage =
     this->_M_impl._M_start + static_cast<size_type>(__n);
   _M_fill_initialize(static_cast<size_type>(__n), __value);
 }


      template<typename _InputIterator>
 void
 _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
          __false_type)
 {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_initialize(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
 void
 _M_range_initialize(_InputIterator __first, _InputIterator __last,
       std::input_iterator_tag)
 {
   try {
     for (; __first != __last; ++__first)

       emplace_back(*__first);



   } catch(...) {
     clear();
     throw;
   }
 }


      template<typename _ForwardIterator>
 void
 _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
       std::forward_iterator_tag)
 {
   const size_type __n = std::distance(__first, __last);
   this->_M_impl._M_start = this->_M_allocate(__n);
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   this->_M_impl._M_finish =
     std::__uninitialized_copy_a(__first, __last,
     this->_M_impl._M_start,
     _M_get_Tp_allocator());
 }



      void
      _M_fill_initialize(size_type __n, const value_type& __value)
      {
 this->_M_impl._M_finish =
   std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
     _M_get_Tp_allocator());
      }



      void
      _M_default_initialize(size_type __n)
      {
 this->_M_impl._M_finish =
   std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
        _M_get_Tp_allocator());
      }
# 1364 "/usr/include/c++/7/bits/stl_vector.h" 3
      template<typename _Integer>
 void
 _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
 { _M_fill_assign(__n, __val); }


      template<typename _InputIterator>
 void
 _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
      __false_type)
 { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }


      template<typename _InputIterator>
 void
 _M_assign_aux(_InputIterator __first, _InputIterator __last,
        std::input_iterator_tag);


      template<typename _ForwardIterator>
 void
 _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        std::forward_iterator_tag);



      void
      _M_fill_assign(size_type __n, const value_type& __val);







      template<typename _Integer>
 void
 _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
      __true_type)
 { _M_fill_insert(__pos, __n, __val); }


      template<typename _InputIterator>
 void
 _M_insert_dispatch(iterator __pos, _InputIterator __first,
      _InputIterator __last, __false_type)
 {
   _M_range_insert(__pos, __first, __last,
     std::__iterator_category(__first));
 }


      template<typename _InputIterator>
 void
 _M_range_insert(iterator __pos, _InputIterator __first,
   _InputIterator __last, std::input_iterator_tag);


      template<typename _ForwardIterator>
 void
 _M_range_insert(iterator __pos, _ForwardIterator __first,
   _ForwardIterator __last, std::forward_iterator_tag);



      void
      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);



      void
      _M_default_append(size_type __n);

      bool
      _M_shrink_to_fit();
# 1451 "/usr/include/c++/7/bits/stl_vector.h" 3
      struct _Temporary_value
      {
 template<typename... _Args>
   explicit
   _Temporary_value(vector* __vec, _Args&&... __args) : _M_this(__vec)
   {
     _Alloc_traits::construct(_M_this->_M_impl, _M_ptr(),
         std::forward<_Args>(__args)...);
   }

 ~_Temporary_value()
 { _Alloc_traits::destroy(_M_this->_M_impl, _M_ptr()); }

 value_type&
 _M_val() { return *reinterpret_cast<_Tp*>(&__buf); }

      private:
 pointer
 _M_ptr() { return pointer_traits<pointer>::pointer_to(_M_val()); }

 vector* _M_this;
 typename aligned_storage<sizeof(_Tp), alignof(_Tp)>::type __buf;
      };



      template<typename _Arg>
 void
 _M_insert_aux(iterator __position, _Arg&& __arg);

      template<typename... _Args>
 void
 _M_realloc_insert(iterator __position, _Args&&... __args);


      iterator
      _M_insert_rval(const_iterator __position, value_type&& __v);


      template<typename... _Args>
 iterator
 _M_emplace_aux(const_iterator __position, _Args&&... __args);


      iterator
      _M_emplace_aux(const_iterator __position, value_type&& __v)
      { return _M_insert_rval(__position, std::move(__v)); }



      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
 if (max_size() - size() < __n)
   __throw_length_error((__s));

 const size_type __len = size() + std::max(size(), __n);
 return (__len < size() || __len > max_size()) ? max_size() : __len;
      }





      void
      _M_erase_at_end(pointer __pos) noexcept
      {
 std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 this->_M_impl._M_finish = __pos;
      }

      iterator
      _M_erase(iterator __position);

      iterator
      _M_erase(iterator __first, iterator __last);


    private:



      void
      _M_move_assign(vector&& __x, std::true_type) noexcept
      {
 vector __tmp(get_allocator());
 this->_M_impl._M_swap_data(__tmp._M_impl);
 this->_M_impl._M_swap_data(__x._M_impl);
 std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
      }



      void
      _M_move_assign(vector&& __x, std::false_type)
      {
 if (__x._M_get_Tp_allocator() == this->_M_get_Tp_allocator())
   _M_move_assign(std::move(__x), std::true_type());
 else
   {


     this->assign(std::__make_move_if_noexcept_iterator(__x.begin()),
    std::__make_move_if_noexcept_iterator(__x.end()));
     __x.clear();
   }
      }


      template<typename _Up>
 _Up*
 _M_data_ptr(_Up* __ptr) const noexcept
 { return __ptr; }


      template<typename _Ptr>
 typename std::pointer_traits<_Ptr>::element_type*
 _M_data_ptr(_Ptr __ptr) const
 { return empty() ? nullptr : std::__addressof(*__ptr); }
# 1586 "/usr/include/c++/7/bits/stl_vector.h" 3
    };
# 1599 "/usr/include/c++/7/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return (__x.size() == __y.size()
       && std::equal(__x.begin(), __x.end(), __y.begin())); }
# 1616 "/usr/include/c++/7/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end()); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Tp, typename _Alloc>
    inline void
    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }


}
# 65 "/usr/include/c++/7/vector" 2 3
# 1 "/usr/include/c++/7/bits/stl_bvector.h" 1 3
# 63 "/usr/include/c++/7/bits/stl_bvector.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef unsigned long _Bit_type;
  enum { _S_word_bit = int(8 * sizeof(_Bit_type)) };

  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
    : _M_p(__x), _M_mask(__y) { }

    _Bit_reference() noexcept : _M_p(0), _M_mask(0) { }

    operator bool() const noexcept
    { return !!(*_M_p & _M_mask); }

    _Bit_reference&
    operator=(bool __x) noexcept
    {
      if (__x)
 *_M_p |= _M_mask;
      else
 *_M_p &= ~_M_mask;
      return *this;
    }

    _Bit_reference&
    operator=(const _Bit_reference& __x) noexcept
    { return *this = bool(__x); }

    bool
    operator==(const _Bit_reference& __x) const
    { return bool(*this) == bool(__x); }

    bool
    operator<(const _Bit_reference& __x) const
    { return !bool(*this) && bool(__x); }

    void
    flip() noexcept
    { *_M_p ^= _M_mask; }
  };


  inline void
  swap(_Bit_reference __x, _Bit_reference __y) noexcept
  {
    bool __tmp = __x;
    __x = __y;
    __y = __tmp;
  }

  inline void
  swap(_Bit_reference __x, bool& __y) noexcept
  {
    bool __tmp = __x;
    __x = __y;
    __y = __tmp;
  }

  inline void
  swap(bool& __x, _Bit_reference __y) noexcept
  {
    bool __tmp = __x;
    __x = __y;
    __y = __tmp;
  }


  struct _Bit_iterator_base
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
    : _M_p(__x), _M_offset(__y) { }

    void
    _M_bump_up()
    {
      if (_M_offset++ == int(_S_word_bit) - 1)
 {
   _M_offset = 0;
   ++_M_p;
 }
    }

    void
    _M_bump_down()
    {
      if (_M_offset-- == 0)
 {
   _M_offset = int(_S_word_bit) - 1;
   --_M_p;
 }
    }

    void
    _M_incr(ptrdiff_t __i)
    {
      difference_type __n = __i + _M_offset;
      _M_p += __n / int(_S_word_bit);
      __n = __n % int(_S_word_bit);
      if (__n < 0)
 {
   __n += int(_S_word_bit);
   --_M_p;
 }
      _M_offset = static_cast<unsigned int>(__n);
    }

    bool
    operator==(const _Bit_iterator_base& __i) const
    { return _M_p == __i._M_p && _M_offset == __i._M_offset; }

    bool
    operator<(const _Bit_iterator_base& __i) const
    {
      return _M_p < __i._M_p
      || (_M_p == __i._M_p && _M_offset < __i._M_offset);
    }

    bool
    operator!=(const _Bit_iterator_base& __i) const
    { return !(*this == __i); }

    bool
    operator>(const _Bit_iterator_base& __i) const
    { return __i < *this; }

    bool
    operator<=(const _Bit_iterator_base& __i) const
    { return !(__i < *this); }

    bool
    operator>=(const _Bit_iterator_base& __i) const
    { return !(*this < __i); }
  };

  inline ptrdiff_t
  operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
  {
    return (int(_S_word_bit) * (__x._M_p - __y._M_p)
     + __x._M_offset - __y._M_offset);
  }

  struct _Bit_iterator : public _Bit_iterator_base
  {
    typedef _Bit_reference reference;
    typedef _Bit_reference* pointer;
    typedef _Bit_iterator iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    iterator
    _M_const_cast() const
    { return *this; }

    reference
    operator*() const
    { return reference(_M_p, 1UL << _M_offset); }

    iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    iterator
    operator++(int)
    {
      iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    iterator
    operator--(int)
    {
      iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    iterator
    operator+(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp += __i;
    }

    iterator
    operator-(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp -= __i;
    }

    reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_iterator
  operator+(ptrdiff_t __n, const _Bit_iterator& __x)
  { return __x + __n; }

  struct _Bit_const_iterator : public _Bit_iterator_base
  {
    typedef bool reference;
    typedef bool const_reference;
    typedef const bool* pointer;
    typedef _Bit_const_iterator const_iterator;

    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    _Bit_const_iterator(const _Bit_iterator& __x)
    : _Bit_iterator_base(__x._M_p, __x._M_offset) { }

    _Bit_iterator
    _M_const_cast() const
    { return _Bit_iterator(_M_p, _M_offset); }

    const_reference
    operator*() const
    { return _Bit_reference(_M_p, 1UL << _M_offset); }

    const_iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    const_iterator
    operator++(int)
    {
      const_iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    const_iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    const_iterator
    operator--(int)
    {
      const_iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    const_iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    const_iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    const_iterator
    operator+(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp += __i;
    }

    const_iterator
    operator-(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp -= __i;
    }

    const_reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_const_iterator
  operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)
  { return __x + __n; }

  inline void
  __fill_bvector(_Bit_iterator __first, _Bit_iterator __last, bool __x)
  {
    for (; __first != __last; ++__first)
      *__first = __x;
  }

  inline void
  fill(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)
  {
    if (__first._M_p != __last._M_p)
      {
 std::fill(__first._M_p + 1, __last._M_p, __x ? ~0 : 0);
 __fill_bvector(__first, _Bit_iterator(__first._M_p + 1, 0), __x);
 __fill_bvector(_Bit_iterator(__last._M_p, 0), __last, __x);
      }
    else
      __fill_bvector(__first, __last, __x);
  }

  template<typename _Alloc>
    struct _Bvector_base
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Bit_type>::other _Bit_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Bit_alloc_type>
 _Bit_alloc_traits;
      typedef typename _Bit_alloc_traits::pointer _Bit_pointer;

      struct _Bvector_impl
      : public _Bit_alloc_type
      {
 _Bit_iterator _M_start;
 _Bit_iterator _M_finish;
 _Bit_pointer _M_end_of_storage;

 _Bvector_impl()
 : _Bit_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 { }

 _Bvector_impl(const _Bit_alloc_type& __a)
 : _Bit_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 { }


 _Bvector_impl(_Bit_alloc_type&& __a)
 : _Bit_alloc_type(std::move(__a)), _M_start(), _M_finish(),
   _M_end_of_storage()
 { }


 _Bit_type*
 _M_end_addr() const noexcept
 {
   if (_M_end_of_storage)
     return std::__addressof(_M_end_of_storage[-1]) + 1;
   return 0;
 }
      };

    public:
      typedef _Alloc allocator_type;

      _Bit_alloc_type&
      _M_get_Bit_allocator() noexcept
      { return *static_cast<_Bit_alloc_type*>(&this->_M_impl); }

      const _Bit_alloc_type&
      _M_get_Bit_allocator() const noexcept
      { return *static_cast<const _Bit_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Bit_allocator()); }

      _Bvector_base()
      : _M_impl() { }

      _Bvector_base(const allocator_type& __a)
      : _M_impl(__a) { }


      _Bvector_base(_Bvector_base&& __x) noexcept
      : _M_impl(std::move(__x._M_get_Bit_allocator()))
      {
 this->_M_impl._M_start = __x._M_impl._M_start;
 this->_M_impl._M_finish = __x._M_impl._M_finish;
 this->_M_impl._M_end_of_storage = __x._M_impl._M_end_of_storage;
 __x._M_impl._M_start = _Bit_iterator();
 __x._M_impl._M_finish = _Bit_iterator();
 __x._M_impl._M_end_of_storage = nullptr;
      }


      ~_Bvector_base()
      { this->_M_deallocate(); }

    protected:
      _Bvector_impl _M_impl;

      _Bit_pointer
      _M_allocate(size_t __n)
      { return _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n)); }

      void
      _M_deallocate()
      {
 if (_M_impl._M_start._M_p)
   {
     const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
     _Bit_alloc_traits::deallocate(_M_impl,
       _M_impl._M_end_of_storage - __n,
       __n);
     _M_impl._M_start = _M_impl._M_finish = _Bit_iterator();
     _M_impl._M_end_of_storage = _Bit_pointer();
   }
      }

      static size_t
      _S_nword(size_t __n)
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
    };


}




namespace std __attribute__ ((__visibility__ ("default")))
{

# 542 "/usr/include/c++/7/bits/stl_bvector.h" 3
template<typename _Alloc>
  class vector<bool, _Alloc> : protected _Bvector_base<_Alloc>
  {
    typedef _Bvector_base<_Alloc> _Base;
    typedef typename _Base::_Bit_pointer _Bit_pointer;
    typedef typename _Base::_Bit_alloc_traits _Bit_alloc_traits;


    template<typename> friend struct hash;


  public:
    typedef bool value_type;
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
    typedef _Bit_reference reference;
    typedef bool const_reference;
    typedef _Bit_reference* pointer;
    typedef const bool* const_pointer;
    typedef _Bit_iterator iterator;
    typedef _Bit_const_iterator const_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
    typedef std::reverse_iterator<iterator> reverse_iterator;
    typedef _Alloc allocator_type;

    allocator_type get_allocator() const
    { return _Base::get_allocator(); }

  protected:
    using _Base::_M_allocate;
    using _Base::_M_deallocate;
    using _Base::_S_nword;
    using _Base::_M_get_Bit_allocator;

  public:
    vector()

      noexcept(is_nothrow_default_constructible<allocator_type>::value)

    : _Base() { }

    explicit
    vector(const allocator_type& __a)
    : _Base(__a) { }


    explicit
    vector(size_type __n, const allocator_type& __a = allocator_type())
    : vector(__n, false, __a)
    { }

    vector(size_type __n, const bool& __value,
    const allocator_type& __a = allocator_type())
    : _Base(__a)
    {
      _M_initialize(__n);
      std::fill(this->_M_impl._M_start._M_p, this->_M_impl._M_end_addr(),
  __value ? ~0 : 0);
    }
# 613 "/usr/include/c++/7/bits/stl_bvector.h" 3
    vector(const vector& __x)
    : _Base(_Bit_alloc_traits::_S_select_on_copy(__x._M_get_Bit_allocator()))
    {
      _M_initialize(__x.size());
      _M_copy_aligned(__x.begin(), __x.end(), this->_M_impl._M_start);
    }


    vector(vector&& __x) noexcept
    : _Base(std::move(__x)) { }

    vector(vector&& __x, const allocator_type& __a)
    noexcept(_Bit_alloc_traits::_S_always_equal())
    : _Base(__a)
    {
      if (__x.get_allocator() == __a)
 {
   this->_M_impl._M_start = __x._M_impl._M_start;
   this->_M_impl._M_finish = __x._M_impl._M_finish;
   this->_M_impl._M_end_of_storage = __x._M_impl._M_end_of_storage;
   __x._M_impl._M_start = _Bit_iterator();
   __x._M_impl._M_finish = _Bit_iterator();
   __x._M_impl._M_end_of_storage = nullptr;
 }
      else
 {
   _M_initialize(__x.size());
   _M_copy_aligned(__x.begin(), __x.end(), begin());
   __x.clear();
 }
    }

    vector(const vector& __x, const allocator_type& __a)
    : _Base(__a)
    {
      _M_initialize(__x.size());
      _M_copy_aligned(__x.begin(), __x.end(), this->_M_impl._M_start);
    }

    vector(initializer_list<bool> __l,
    const allocator_type& __a = allocator_type())
    : _Base(__a)
    {
      _M_initialize_range(__l.begin(), __l.end(),
     random_access_iterator_tag());
    }



    template<typename _InputIterator,
      typename = std::_RequireInputIter<_InputIterator>>
      vector(_InputIterator __first, _InputIterator __last,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      { _M_initialize_dispatch(__first, __last, __false_type()); }
# 679 "/usr/include/c++/7/bits/stl_bvector.h" 3
    ~vector() noexcept { }

    vector&
    operator=(const vector& __x)
    {
      if (&__x == this)
 return *this;

      if (_Bit_alloc_traits::_S_propagate_on_copy_assign())
 {
   if (this->_M_get_Bit_allocator() != __x._M_get_Bit_allocator())
     {
       this->_M_deallocate();
       std::__alloc_on_copy(_M_get_Bit_allocator(),
       __x._M_get_Bit_allocator());
       _M_initialize(__x.size());
     }
   else
     std::__alloc_on_copy(_M_get_Bit_allocator(),
     __x._M_get_Bit_allocator());
 }

      if (__x.size() > capacity())
 {
   this->_M_deallocate();
   _M_initialize(__x.size());
 }
      this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(),
      begin());
      return *this;
    }


    vector&
    operator=(vector&& __x) noexcept(_Bit_alloc_traits::_S_nothrow_move())
    {
      if (_Bit_alloc_traits::_S_propagate_on_move_assign()
   || this->_M_get_Bit_allocator() == __x._M_get_Bit_allocator())
 {
   this->_M_deallocate();
   this->_M_impl._M_start = __x._M_impl._M_start;
   this->_M_impl._M_finish = __x._M_impl._M_finish;
   this->_M_impl._M_end_of_storage = __x._M_impl._M_end_of_storage;
   __x._M_impl._M_start = _Bit_iterator();
   __x._M_impl._M_finish = _Bit_iterator();
   __x._M_impl._M_end_of_storage = nullptr;
   std::__alloc_on_move(_M_get_Bit_allocator(),
          __x._M_get_Bit_allocator());
 }
      else
 {
   if (__x.size() > capacity())
     {
       this->_M_deallocate();
       _M_initialize(__x.size());
     }
   this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(),
          begin());
   __x.clear();
 }
      return *this;
    }

    vector&
    operator=(initializer_list<bool> __l)
    {
      this->assign (__l.begin(), __l.end());
      return *this;
    }






    void
    assign(size_type __n, const bool& __x)
    { _M_fill_assign(__n, __x); }


    template<typename _InputIterator,
      typename = std::_RequireInputIter<_InputIterator>>
      void
      assign(_InputIterator __first, _InputIterator __last)
      { _M_assign_dispatch(__first, __last, __false_type()); }
# 775 "/usr/include/c++/7/bits/stl_bvector.h" 3
    void
    assign(initializer_list<bool> __l)
    { this->assign(__l.begin(), __l.end()); }


    iterator
    begin() noexcept
    { return this->_M_impl._M_start; }

    const_iterator
    begin() const noexcept
    { return this->_M_impl._M_start; }

    iterator
    end() noexcept
    { return this->_M_impl._M_finish; }

    const_iterator
    end() const noexcept
    { return this->_M_impl._M_finish; }

    reverse_iterator
    rbegin() noexcept
    { return reverse_iterator(end()); }

    const_reverse_iterator
    rbegin() const noexcept
    { return const_reverse_iterator(end()); }

    reverse_iterator
    rend() noexcept
    { return reverse_iterator(begin()); }

    const_reverse_iterator
    rend() const noexcept
    { return const_reverse_iterator(begin()); }


    const_iterator
    cbegin() const noexcept
    { return this->_M_impl._M_start; }

    const_iterator
    cend() const noexcept
    { return this->_M_impl._M_finish; }

    const_reverse_iterator
    crbegin() const noexcept
    { return const_reverse_iterator(end()); }

    const_reverse_iterator
    crend() const noexcept
    { return const_reverse_iterator(begin()); }


    size_type
    size() const noexcept
    { return size_type(end() - begin()); }

    size_type
    max_size() const noexcept
    {
      const size_type __isize =
 __gnu_cxx::__numeric_traits<difference_type>::__max
 - int(_S_word_bit) + 1;
      const size_type __asize
 = _Bit_alloc_traits::max_size(_M_get_Bit_allocator());
      return (__asize <= __isize / int(_S_word_bit)
       ? __asize * int(_S_word_bit) : __isize);
    }

    size_type
    capacity() const noexcept
    { return size_type(const_iterator(this->_M_impl._M_end_addr(), 0)
         - begin()); }

    bool
    empty() const noexcept
    { return begin() == end(); }

    reference
    operator[](size_type __n)
    {
      return *iterator(this->_M_impl._M_start._M_p
         + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

    const_reference
    operator[](size_type __n) const
    {
      return *const_iterator(this->_M_impl._M_start._M_p
        + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

  protected:
    void
    _M_range_check(size_type __n) const
    {
      if (__n >= this->size())
 __throw_out_of_range_fmt(("vector<bool>::_M_range_check: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                          ,
     __n, this->size());
    }

  public:
    reference
    at(size_type __n)
    { _M_range_check(__n); return (*this)[__n]; }

    const_reference
    at(size_type __n) const
    { _M_range_check(__n); return (*this)[__n]; }

    void
    reserve(size_type __n)
    {
      if (__n > max_size())
 __throw_length_error(("vector::reserve"));
      if (capacity() < __n)
 _M_reallocate(__n);
    }

    reference
    front()
    { return *begin(); }

    const_reference
    front() const
    { return *begin(); }

    reference
    back()
    { return *(end() - 1); }

    const_reference
    back() const
    { return *(end() - 1); }






    void
    data() noexcept { }

    void
    push_back(bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr())
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(end(), __x);
    }

    void
    swap(vector& __x) noexcept
    {
      std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
      std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
      std::swap(this->_M_impl._M_end_of_storage,
  __x._M_impl._M_end_of_storage);
      _Bit_alloc_traits::_S_on_swap(_M_get_Bit_allocator(),
        __x._M_get_Bit_allocator());
    }


    static void
    swap(reference __x, reference __y) noexcept
    {
      bool __tmp = __x;
      __x = __y;
      __y = __tmp;
    }

    iterator

    insert(const_iterator __position, const bool& __x = bool())



    {
      const difference_type __n = __position - begin();
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr()
   && __position == end())
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(__position._M_const_cast(), __x);
      return begin() + __n;
    }


    template<typename _InputIterator,
      typename = std::_RequireInputIter<_InputIterator>>
      iterator
      insert(const_iterator __position,
      _InputIterator __first, _InputIterator __last)
      {
 difference_type __offset = __position - cbegin();
 _M_insert_dispatch(__position._M_const_cast(),
      __first, __last, __false_type());
 return begin() + __offset;
      }
# 991 "/usr/include/c++/7/bits/stl_bvector.h" 3
    iterator
    insert(const_iterator __position, size_type __n, const bool& __x)
    {
      difference_type __offset = __position - cbegin();
      _M_fill_insert(__position._M_const_cast(), __n, __x);
      return begin() + __offset;
    }







    iterator
    insert(const_iterator __p, initializer_list<bool> __l)
    { return this->insert(__p, __l.begin(), __l.end()); }


    void
    pop_back()
    { --this->_M_impl._M_finish; }

    iterator

    erase(const_iterator __position)



    { return _M_erase(__position._M_const_cast()); }

    iterator

    erase(const_iterator __first, const_iterator __last)



    { return _M_erase(__first._M_const_cast(), __last._M_const_cast()); }

    void
    resize(size_type __new_size, bool __x = bool())
    {
      if (__new_size < size())
        _M_erase_at_end(begin() + difference_type(__new_size));
      else
        insert(end(), __new_size - size(), __x);
    }


    void
    shrink_to_fit()
    { _M_shrink_to_fit(); }


    void
    flip() noexcept
    {
      _Bit_type * const __end = this->_M_impl._M_end_addr();
      for (_Bit_type * __p = this->_M_impl._M_start._M_p; __p != __end; ++__p)
        *__p = ~*__p;
    }

    void
    clear() noexcept
    { _M_erase_at_end(begin()); }


    template<typename... _Args>



      void

      emplace_back(_Args&&... __args)
      {
 push_back(bool(__args...));



      }

    template<typename... _Args>
      iterator
      emplace(const_iterator __pos, _Args&&... __args)
      { return insert(__pos, bool(__args...)); }


  protected:

    iterator
    _M_copy_aligned(const_iterator __first, const_iterator __last,
      iterator __result)
    {
      _Bit_type* __q = std::copy(__first._M_p, __last._M_p, __result._M_p);
      return std::copy(const_iterator(__last._M_p, 0), __last,
         iterator(__q, 0));
    }

    void
    _M_initialize(size_type __n)
    {
      if (__n)
 {
   _Bit_pointer __q = this->_M_allocate(__n);
   this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
   this->_M_impl._M_start = iterator(std::__addressof(*__q), 0);
 }
      else
 {
   this->_M_impl._M_end_of_storage = _Bit_pointer();
   this->_M_impl._M_start = iterator(0, 0);
 }
      this->_M_impl._M_finish = this->_M_impl._M_start + difference_type(__n);
    }

    void
    _M_reallocate(size_type __n);


    bool
    _M_shrink_to_fit();






    template<typename _Integer>
      void
      _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
      {
 _M_initialize(static_cast<size_type>(__n));
 std::fill(this->_M_impl._M_start._M_p,
    this->_M_impl._M_end_addr(), __x ? ~0 : 0);
      }

    template<typename _InputIterator>
      void
      _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
        __false_type)
      { _M_initialize_range(__first, __last,
       std::__iterator_category(__first)); }

    template<typename _InputIterator>
      void
      _M_initialize_range(_InputIterator __first, _InputIterator __last,
     std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   push_back(*__first);
      }

    template<typename _ForwardIterator>
      void
      _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,
     std::forward_iterator_tag)
      {
 const size_type __n = std::distance(__first, __last);
 _M_initialize(__n);
 std::copy(__first, __last, this->_M_impl._M_start);
      }



    template<typename _Integer>
      void
      _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
      { _M_fill_assign(__n, __val); }

    template<class _InputIterator>
      void
      _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }

    void
    _M_fill_assign(size_t __n, bool __x)
    {
      if (__n > size())
 {
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_addr(), __x ? ~0 : 0);
   insert(end(), __n - size(), __x);
 }
      else
 {
   _M_erase_at_end(begin() + __n);
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_addr(), __x ? ~0 : 0);
 }
    }

    template<typename _InputIterator>
      void
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 iterator __cur = begin();
 for (; __first != __last && __cur != end(); ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   insert(end(), __first, __last);
      }

    template<typename _ForwardIterator>
      void
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);
 if (__len < size())
   _M_erase_at_end(std::copy(__first, __last, begin()));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, begin());
     insert(end(), __mid, __last);
   }
      }





    template<typename _Integer>
      void
      _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,
    __true_type)
      { _M_fill_insert(__pos, __n, __x); }

    template<typename _InputIterator>
      void
      _M_insert_dispatch(iterator __pos,
    _InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_insert_range(__pos, __first, __last,
   std::__iterator_category(__first)); }

    void
    _M_fill_insert(iterator __position, size_type __n, bool __x);

    template<typename _InputIterator>
      void
      _M_insert_range(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

    template<typename _ForwardIterator>
      void
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag);

    void
    _M_insert_aux(iterator __position, bool __x);

    size_type
    _M_check_len(size_type __n, const char* __s) const
    {
      if (max_size() - size() < __n)
 __throw_length_error((__s));

      const size_type __len = size() + std::max(size(), __n);
      return (__len < size() || __len > max_size()) ? max_size() : __len;
    }

    void
    _M_erase_at_end(iterator __pos)
    { this->_M_impl._M_finish = __pos; }

    iterator
    _M_erase(iterator __pos);

    iterator
    _M_erase(iterator __first, iterator __last);
  };


}



# 1 "/usr/include/c++/7/bits/functional_hash.h" 1 3
# 33 "/usr/include/c++/7/bits/functional_hash.h" 3
       
# 34 "/usr/include/c++/7/bits/functional_hash.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{

# 49 "/usr/include/c++/7/bits/functional_hash.h" 3
  template<typename _Result, typename _Arg>
    struct __hash_base
    {
      typedef _Result result_type;
      typedef _Arg argument_type;
    };


  template<typename _Tp>
    struct hash;

  template<typename _Tp, typename = void>
    struct __poison_hash
    {
      static constexpr bool __enable_hash_call = false;
    private:

      __poison_hash(__poison_hash&&);
      ~__poison_hash();
    };

  template<typename _Tp>
    struct __poison_hash<_Tp, __void_t<decltype(hash<_Tp>()(declval<_Tp>()))>>
    {
      static constexpr bool __enable_hash_call = true;
    };


  template<typename _Tp, bool = is_enum<_Tp>::value>
    struct __hash_enum
    {
    private:

      __hash_enum(__hash_enum&&);
      ~__hash_enum();
    };


  template<typename _Tp>
    struct __hash_enum<_Tp, true> : public __hash_base<size_t, _Tp>
    {
      size_t
      operator()(_Tp __val) const noexcept
      {
       using __type = typename underlying_type<_Tp>::type;
       return hash<__type>{}(static_cast<__type>(__val));
      }
    };



  template<typename _Tp>
    struct hash : __hash_enum<_Tp>
    { };


  template<typename _Tp>
    struct hash<_Tp*> : public __hash_base<size_t, _Tp*>
    {
      size_t
      operator()(_Tp* __p) const noexcept
      { return reinterpret_cast<size_t>(__p); }
    };
# 124 "/usr/include/c++/7/bits/functional_hash.h" 3
  template<> struct hash<bool> : public __hash_base<size_t, bool> { size_t operator()(bool __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char> : public __hash_base<size_t, char> { size_t operator()(char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<signed char> : public __hash_base<size_t, signed char> { size_t operator()(signed char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned char> : public __hash_base<size_t, unsigned char> { size_t operator()(unsigned char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<wchar_t> : public __hash_base<size_t, wchar_t> { size_t operator()(wchar_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char16_t> : public __hash_base<size_t, char16_t> { size_t operator()(char16_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char32_t> : public __hash_base<size_t, char32_t> { size_t operator()(char32_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<short> : public __hash_base<size_t, short> { size_t operator()(short __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<int> : public __hash_base<size_t, int> { size_t operator()(int __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<long> : public __hash_base<size_t, long> { size_t operator()(long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<long long> : public __hash_base<size_t, long long> { size_t operator()(long long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned short> : public __hash_base<size_t, unsigned short> { size_t operator()(unsigned short __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned int> : public __hash_base<size_t, unsigned int> { size_t operator()(unsigned int __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned long> : public __hash_base<size_t, unsigned long> { size_t operator()(unsigned long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned long long> : public __hash_base<size_t, unsigned long long> { size_t operator()(unsigned long long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<__int128> : public __hash_base<size_t, __int128> { size_t operator()(__int128 __val) const noexcept { return static_cast<size_t>(__val); } };
  template<> struct hash<__int128 unsigned> : public __hash_base<size_t, __int128 unsigned> { size_t operator()(__int128 unsigned __val) const noexcept { return static_cast<size_t>(__val); } };
# 187 "/usr/include/c++/7/bits/functional_hash.h" 3
  struct _Hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(0xc70f6907UL))
    { return _Hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };


  struct _Fnv_hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(2166136261UL))
    { return _Fnv_hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };


  template<>
    struct hash<float> : public __hash_base<size_t, float>
    {
      size_t
      operator()(float __val) const noexcept
      {

 return __val != 0.0f ? std::_Hash_impl::hash(__val) : 0;
      }
    };


  template<>
    struct hash<double> : public __hash_base<size_t, double>
    {
      size_t
      operator()(double __val) const noexcept
      {

 return __val != 0.0 ? std::_Hash_impl::hash(__val) : 0;
      }
    };


  template<>
    struct hash<long double>
    : public __hash_base<size_t, long double>
    {
      __attribute__ ((__pure__)) size_t
      operator()(long double __val) const noexcept;
    };







  template<typename _Hash>
    struct __is_fast_hash : public std::true_type
    { };

  template<>
    struct __is_fast_hash<hash<long double>> : public std::false_type
    { };


}
# 1282 "/usr/include/c++/7/bits/stl_bvector.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Alloc>
    struct hash<std::vector<bool, _Alloc>>
    : public __hash_base<size_t, std::vector<bool, _Alloc>>
    {
      size_t
      operator()(const std::vector<bool, _Alloc>&) const noexcept;
    };


}
# 66 "/usr/include/c++/7/vector" 2 3
# 1 "/usr/include/c++/7/bits/range_access.h" 1 3
# 33 "/usr/include/c++/7/bits/range_access.h" 3
       
# 34 "/usr/include/c++/7/bits/range_access.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Container>
    inline auto
    begin(_Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<typename _Container>
    inline auto
    begin(const _Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<typename _Container>
    inline auto
    end(_Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }






  template<typename _Container>
    inline auto
    end(const _Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }





  template<typename _Tp, size_t _Nm>
    inline constexpr _Tp*
    begin(_Tp (&__arr)[_Nm])
    { return __arr; }






  template<typename _Tp, size_t _Nm>
    inline constexpr _Tp*
    end(_Tp (&__arr)[_Nm])
    { return __arr + _Nm; }



  template<typename _Tp> class valarray;

  template<typename _Tp> _Tp* begin(valarray<_Tp>&);
  template<typename _Tp> const _Tp* begin(const valarray<_Tp>&);
  template<typename _Tp> _Tp* end(valarray<_Tp>&);
  template<typename _Tp> const _Tp* end(const valarray<_Tp>&);






  template<typename _Container>
    inline constexpr auto
    cbegin(const _Container& __cont) noexcept(noexcept(std::begin(__cont)))
      -> decltype(std::begin(__cont))
    { return std::begin(__cont); }






  template<typename _Container>
    inline constexpr auto
    cend(const _Container& __cont) noexcept(noexcept(std::end(__cont)))
      -> decltype(std::end(__cont))
    { return std::end(__cont); }






  template<typename _Container>
    inline auto
    rbegin(_Container& __cont) -> decltype(__cont.rbegin())
    { return __cont.rbegin(); }






  template<typename _Container>
    inline auto
    rbegin(const _Container& __cont) -> decltype(__cont.rbegin())
    { return __cont.rbegin(); }






  template<typename _Container>
    inline auto
    rend(_Container& __cont) -> decltype(__cont.rend())
    { return __cont.rend(); }






  template<typename _Container>
    inline auto
    rend(const _Container& __cont) -> decltype(__cont.rend())
    { return __cont.rend(); }






  template<typename _Tp, size_t _Nm>
    inline reverse_iterator<_Tp*>
    rbegin(_Tp (&__arr)[_Nm])
    { return reverse_iterator<_Tp*>(__arr + _Nm); }






  template<typename _Tp, size_t _Nm>
    inline reverse_iterator<_Tp*>
    rend(_Tp (&__arr)[_Nm])
    { return reverse_iterator<_Tp*>(__arr); }






  template<typename _Tp>
    inline reverse_iterator<const _Tp*>
    rbegin(initializer_list<_Tp> __il)
    { return reverse_iterator<const _Tp*>(__il.end()); }






  template<typename _Tp>
    inline reverse_iterator<const _Tp*>
    rend(initializer_list<_Tp> __il)
    { return reverse_iterator<const _Tp*>(__il.begin()); }






  template<typename _Container>
    inline auto
    crbegin(const _Container& __cont) -> decltype(std::rbegin(__cont))
    { return std::rbegin(__cont); }






  template<typename _Container>
    inline auto
    crend(const _Container& __cont) -> decltype(std::rend(__cont))
    { return std::rend(__cont); }
# 323 "/usr/include/c++/7/bits/range_access.h" 3

}
# 67 "/usr/include/c++/7/vector" 2 3


# 1 "/usr/include/c++/7/bits/vector.tcc" 1 3
# 59 "/usr/include/c++/7/bits/vector.tcc" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 __throw_length_error(("vector::reserve"));
      if (this->capacity() < __n)
 {
   const size_type __old_size = size();
   pointer __tmp = _M_allocate_and_copy(__n,
     std::__make_move_if_noexcept_iterator(this->_M_impl._M_start),
     std::__make_move_if_noexcept_iterator(this->_M_impl._M_finish));
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __tmp;
   this->_M_impl._M_finish = __tmp + __old_size;
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 }
    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>



      void

      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         std::forward<_Args>(__args)...);
     ++this->_M_impl._M_finish;
   }
 else
   _M_realloc_insert(end(), std::forward<_Args>(__args)...);



      }


  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::

    insert(const_iterator __position, const value_type& __x)



    {
      const size_type __n = __position - begin();
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 if (__position == end())
   {
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         __x);
     ++this->_M_impl._M_finish;
   }
 else
   {

     const auto __pos = begin() + (__position - cbegin());


     _Temporary_value __x_copy(this, __x);
     _M_insert_aux(__pos, std::move(__x_copy._M_val()));



   }
      else

 _M_realloc_insert(begin() + (__position - cbegin()), __x);




      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
 std::move(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
      return __position;
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    _M_erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 {
   if (__last != end())
     std::move(__last, end(), __first);
   _M_erase_at_end(__first.base() + (end() - __last));
 }
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 {

   if (_Alloc_traits::_S_propagate_on_copy_assign())
     {
       if (!_Alloc_traits::_S_always_equal()
           && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
         {

    this->clear();
    _M_deallocate(this->_M_impl._M_start,
    this->_M_impl._M_end_of_storage
    - this->_M_impl._M_start);
    this->_M_impl._M_start = nullptr;
    this->_M_impl._M_finish = nullptr;
    this->_M_impl._M_end_of_storage = nullptr;
  }
       std::__alloc_on_copy(_M_get_Tp_allocator(),
       __x._M_get_Tp_allocator());
     }

   const size_type __xlen = __x.size();
   if (__xlen > capacity())
     {
       pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
         __x.end());
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __tmp;
       this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
     }
   else if (size() >= __xlen)
     {
       std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
       end(), _M_get_Tp_allocator());
     }
   else
     {
       std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
   this->_M_impl._M_start);
       std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
       __x._M_impl._M_finish,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
     }
   this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 }
      return *this;
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_assign(size_t __n, const value_type& __val)
    {
      if (__n > capacity())
 {
   vector __tmp(__n, __val, _M_get_Tp_allocator());
   __tmp._M_impl._M_swap_data(this->_M_impl);
 }
      else if (__n > size())
 {
   std::fill(begin(), end(), __val);
   this->_M_impl._M_finish =
     std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
       __n - size(), __val,
       _M_get_Tp_allocator());
 }
      else
        _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
    }

  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 pointer __cur(this->_M_impl._M_start);
 for (; __first != __last && __cur != this->_M_impl._M_finish;
      ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   _M_range_insert(end(), __first, __last,
     std::__iterator_category(__first));
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);

 if (__len > capacity())
   {
     pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
     std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
     _M_get_Tp_allocator());
     _M_deallocate(this->_M_impl._M_start,
     this->_M_impl._M_end_of_storage
     - this->_M_impl._M_start);
     this->_M_impl._M_start = __tmp;
     this->_M_impl._M_finish = this->_M_impl._M_start + __len;
     this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   }
 else if (size() >= __len)
   _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, this->_M_impl._M_start);
     this->_M_impl._M_finish =
       std::__uninitialized_copy_a(__mid, __last,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
   }
      }


  template<typename _Tp, typename _Alloc>
    auto
    vector<_Tp, _Alloc>::
    _M_insert_rval(const_iterator __position, value_type&& __v) -> iterator
    {
      const auto __n = __position - cbegin();
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 if (__position == cend())
   {
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         std::move(__v));
     ++this->_M_impl._M_finish;
   }
 else
   _M_insert_aux(begin() + __n, std::move(__v));
      else
 _M_realloc_insert(begin() + __n, std::move(__v));

      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      auto
      vector<_Tp, _Alloc>::
      _M_emplace_aux(const_iterator __position, _Args&&... __args)
      -> iterator
      {
 const auto __n = __position - cbegin();
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   if (__position == cend())
     {
       _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
           std::forward<_Args>(__args)...);
       ++this->_M_impl._M_finish;
     }
   else
     {



       _Temporary_value __tmp(this, std::forward<_Args>(__args)...);
       _M_insert_aux(begin() + __n, std::move(__tmp._M_val()));
     }
 else
   _M_realloc_insert(begin() + __n, std::forward<_Args>(__args)...);

 return iterator(this->_M_impl._M_start + __n);
      }

  template<typename _Tp, typename _Alloc>
    template<typename _Arg>
      void
      vector<_Tp, _Alloc>::
      _M_insert_aux(iterator __position, _Arg&& __arg)






    {
      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
          std::move(*(this->_M_impl._M_finish - 1))
                 );
      ++this->_M_impl._M_finish;



      std::move_backward(__position.base(), this->_M_impl._M_finish - 2, this->_M_impl._M_finish - 1)

                                     ;



      *__position = std::forward<_Arg>(__arg);

    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      _M_realloc_insert(iterator __position, _Args&&... __args)






    {
      const size_type __len =
 _M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
      pointer __new_start(this->_M_allocate(__len));
      pointer __new_finish(__new_start);
      try
 {





   _Alloc_traits::construct(this->_M_impl,
       __new_start + __elems_before,

       std::forward<_Args>(__args)...);



   __new_finish = pointer();

   __new_finish
     = std::__uninitialized_move_if_noexcept_a
     (this->_M_impl._M_start, __position.base(),
      __new_start, _M_get_Tp_allocator());

   ++__new_finish;

   __new_finish
     = std::__uninitialized_move_if_noexcept_a
     (__position.base(), this->_M_impl._M_finish,
      __new_finish, _M_get_Tp_allocator());
 }
      catch(...)
 {
   if (!__new_finish)
     _Alloc_traits::destroy(this->_M_impl,
       __new_start + __elems_before);
   else
     std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
   _M_deallocate(__new_start, __len);
   throw;
 }
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      _M_deallocate(this->_M_impl._M_start,
      this->_M_impl._M_end_of_storage
      - this->_M_impl._M_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {



       _Temporary_value __tmp(this, __x);
       value_type& __x_copy = __tmp._M_val();

       const size_type __elems_after = end() - __position;
       pointer __old_finish(this->_M_impl._M_finish);
       if (__elems_after > __n)
  {
    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
           this->_M_impl._M_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n;
    std::move_backward(__position.base(), __old_finish - __n, __old_finish)
                                        ;
    std::fill(__position.base(), __position.base() + __n,
       __x_copy);
  }
       else
  {
    this->_M_impl._M_finish =
      std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
        __n - __elems_after,
        __x_copy,
        _M_get_Tp_allocator());
    std::__uninitialized_move_a(__position.base(), __old_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __elems_after;
    std::fill(__position.base(), __old_finish, __x_copy);
  }
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_fill_insert");
       const size_type __elems_before = __position - begin();
       pointer __new_start(this->_M_allocate(__len));
       pointer __new_finish(__new_start);
       try
  {

    std::__uninitialized_fill_n_a(__new_start + __elems_before,
      __n, __x,
      _M_get_Tp_allocator());
    __new_finish = pointer();

    __new_finish
      = std::__uninitialized_move_if_noexcept_a
      (this->_M_impl._M_start, __position.base(),
       __new_start, _M_get_Tp_allocator());

    __new_finish += __n;

    __new_finish
      = std::__uninitialized_move_if_noexcept_a
      (__position.base(), this->_M_impl._M_finish,
       __new_finish, _M_get_Tp_allocator());
  }
       catch(...)
  {
    if (!__new_finish)
      std::_Destroy(__new_start + __elems_before,
      __new_start + __elems_before + __n,
      _M_get_Tp_allocator());
    else
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
    throw;
  }
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_finish;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }


  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {
       this->_M_impl._M_finish =
  std::__uninitialized_default_n_a(this->_M_impl._M_finish,
       __n, _M_get_Tp_allocator());
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_default_append");
       const size_type __size = this->size();
       pointer __new_start(this->_M_allocate(__len));
       pointer __destroy_from = pointer();
       try
  {
    std::__uninitialized_default_n_a(__new_start + __size,
         __n, _M_get_Tp_allocator());
    __destroy_from = __new_start + __size;
    std::__uninitialized_move_if_noexcept_a(
        this->_M_impl._M_start, this->_M_impl._M_finish,
        __new_start, _M_get_Tp_allocator());
  }
       catch(...)
  {
    if (__destroy_from)
      std::_Destroy(__destroy_from, __destroy_from + __n,
      _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
    throw;
  }
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_start + __size + __n;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }

  template<typename _Tp, typename _Alloc>
    bool
    vector<_Tp, _Alloc>::
    _M_shrink_to_fit()
    {
      if (capacity() == size())
 return false;
      return std::__shrink_to_fit_aux<vector>::_S_do_it(*this);
    }


  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     const size_type __n = std::distance(__first, __last);
     if (size_type(this->_M_impl._M_end_of_storage
     - this->_M_impl._M_finish) >= __n)
       {
  const size_type __elems_after = end() - __position;
  pointer __old_finish(this->_M_impl._M_finish);
  if (__elems_after > __n)
    {
      std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
      this->_M_impl._M_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n;
      std::move_backward(__position.base(), __old_finish - __n, __old_finish)
                                          ;
      std::copy(__first, __last, __position);
    }
  else
    {
      _ForwardIterator __mid = __first;
      std::advance(__mid, __elems_after);
      std::__uninitialized_copy_a(__mid, __last,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n - __elems_after;
      std::__uninitialized_move_a(__position.base(),
      __old_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __elems_after;
      std::copy(__first, __mid, __position);
    }
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector::_M_range_insert");
  pointer __new_start(this->_M_allocate(__len));
  pointer __new_finish(__new_start);
  try
    {
      __new_finish
        = std::__uninitialized_move_if_noexcept_a
        (this->_M_impl._M_start, __position.base(),
         __new_start, _M_get_Tp_allocator());
      __new_finish
        = std::__uninitialized_copy_a(__first, __last,
          __new_finish,
          _M_get_Tp_allocator());
      __new_finish
        = std::__uninitialized_move_if_noexcept_a
        (__position.base(), this->_M_impl._M_finish,
         __new_finish, _M_get_Tp_allocator());
    }
  catch(...)
    {
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
      _M_deallocate(__new_start, __len);
      throw;
    }
  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         _M_get_Tp_allocator());
  _M_deallocate(this->_M_impl._M_start,
         this->_M_impl._M_end_of_storage
         - this->_M_impl._M_start);
  this->_M_impl._M_start = __new_start;
  this->_M_impl._M_finish = __new_finish;
  this->_M_impl._M_end_of_storage = __new_start + __len;
       }
   }
      }



  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_reallocate(size_type __n)
    {
      _Bit_pointer __q = this->_M_allocate(__n);
      iterator __start(std::__addressof(*__q), 0);
      iterator __finish(_M_copy_aligned(begin(), end(), __start));
      this->_M_deallocate();
      this->_M_impl._M_start = __start;
      this->_M_impl._M_finish = __finish;
      this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
    }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, bool __x)
    {
      if (__n == 0)
 return;
      if (capacity() - size() >= __n)
 {
   std::copy_backward(__position, end(),
        this->_M_impl._M_finish + difference_type(__n));
   std::fill(__position, __position + difference_type(__n), __x);
   this->_M_impl._M_finish += difference_type(__n);
 }
      else
 {
   const size_type __len =
     _M_check_len(__n, "vector<bool>::_M_fill_insert");
   _Bit_pointer __q = this->_M_allocate(__len);
   iterator __start(std::__addressof(*__q), 0);
   iterator __i = _M_copy_aligned(begin(), __position, __start);
   std::fill(__i, __i + difference_type(__n), __x);
   iterator __finish = std::copy(__position, end(),
     __i + difference_type(__n));
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
   this->_M_impl._M_start = __start;
   this->_M_impl._M_finish = __finish;
 }
    }

  template<typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<bool, _Alloc>::
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     size_type __n = std::distance(__first, __last);
     if (capacity() - size() >= __n)
       {
  std::copy_backward(__position, end(),
       this->_M_impl._M_finish
       + difference_type(__n));
  std::copy(__first, __last, __position);
  this->_M_impl._M_finish += difference_type(__n);
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector<bool>::_M_insert_range");
  _Bit_pointer __q = this->_M_allocate(__len);
  iterator __start(std::__addressof(*__q), 0);
  iterator __i = _M_copy_aligned(begin(), __position, __start);
  __i = std::copy(__first, __last, __i);
  iterator __finish = std::copy(__position, end(), __i);
  this->_M_deallocate();
  this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
  this->_M_impl._M_start = __start;
  this->_M_impl._M_finish = __finish;
       }
   }
      }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_insert_aux(iterator __position, bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr())
 {
   std::copy_backward(__position, this->_M_impl._M_finish,
        this->_M_impl._M_finish + 1);
   *__position = __x;
   ++this->_M_impl._M_finish;
 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector<bool>::_M_insert_aux");
   _Bit_pointer __q = this->_M_allocate(__len);
   iterator __start(std::__addressof(*__q), 0);
   iterator __i = _M_copy_aligned(begin(), __position, __start);
   *__i++ = __x;
   iterator __finish = std::copy(__position, end(), __i);
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
   this->_M_impl._M_start = __start;
   this->_M_impl._M_finish = __finish;
 }
    }

  template<typename _Alloc>
    typename vector<bool, _Alloc>::iterator
    vector<bool, _Alloc>::
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
        std::copy(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      return __position;
    }

  template<typename _Alloc>
    typename vector<bool, _Alloc>::iterator
    vector<bool, _Alloc>::
    _M_erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 _M_erase_at_end(std::copy(__last, end(), __first));
      return __first;
    }


  template<typename _Alloc>
    bool
    vector<bool, _Alloc>::
    _M_shrink_to_fit()
    {
      if (capacity() - size() < int(_S_word_bit))
 return false;
      try
 {
   _M_reallocate(size());
   return true;
 }
      catch(...)
 { return false; }
    }



}



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Alloc>
    size_t
    hash<std::vector<bool, _Alloc>>::
    operator()(const std::vector<bool, _Alloc>& __b) const noexcept
    {
      size_t __hash = 0;
      using std::_S_word_bit;
      using std::_Bit_type;

      const size_t __words = __b.size() / _S_word_bit;
      if (__words)
 {
   const size_t __clength = __words * sizeof(_Bit_type);
   __hash = std::_Hash_impl::hash(__b._M_impl._M_start._M_p, __clength);
 }

      const size_t __extrabits = __b.size() % _S_word_bit;
      if (__extrabits)
 {
   _Bit_type __hiword = *__b._M_impl._M_finish._M_p;
   __hiword &= ~((~static_cast<_Bit_type>(0)) << __extrabits);

   const size_t __clength
     = (__extrabits + 8 - 1) / 8;
   if (__words)
     __hash = std::_Hash_impl::hash(&__hiword, __clength, __hash);
   else
     __hash = std::_Hash_impl::hash(&__hiword, __clength);
 }

      return __hash;
    }


}
# 70 "/usr/include/c++/7/vector" 2 3
# 23 "/workspace/acl/lib_acl_cpp/src/acl_stdafx.hpp" 2
# 1 "/usr/include/c++/7/map" 1 3
# 58 "/usr/include/c++/7/map" 3
       
# 59 "/usr/include/c++/7/map" 3

# 1 "/usr/include/c++/7/bits/stl_tree.h" 1 3
# 61 "/usr/include/c++/7/bits/stl_tree.h" 3
       
# 62 "/usr/include/c++/7/bits/stl_tree.h" 3



# 1 "/usr/include/c++/7/bits/stl_function.h" 1 3
# 63 "/usr/include/c++/7/bits/stl_function.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 104 "/usr/include/c++/7/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    struct unary_function
    {

      typedef _Arg argument_type;


      typedef _Result result_type;
    };




  template<typename _Arg1, typename _Arg2, typename _Result>
    struct binary_function
    {

      typedef _Arg1 first_argument_type;


      typedef _Arg2 second_argument_type;


      typedef _Result result_type;
    };
# 144 "/usr/include/c++/7/bits/stl_function.h" 3
  struct __is_transparent;

  template<typename _Tp = void>
    struct plus;

  template<typename _Tp = void>
    struct minus;

  template<typename _Tp = void>
    struct multiplies;

  template<typename _Tp = void>
    struct divides;

  template<typename _Tp = void>
    struct modulus;

  template<typename _Tp = void>
    struct negate;



  template<typename _Tp>
    struct plus : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x + __y; }
    };


  template<typename _Tp>
    struct minus : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x - __y; }
    };


  template<typename _Tp>
    struct multiplies : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x * __y; }
    };


  template<typename _Tp>
    struct divides : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x / __y; }
    };


  template<typename _Tp>
    struct modulus : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x % __y; }
    };


  template<typename _Tp>
    struct negate : public unary_function<_Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x) const
      { return -__x; }
    };





  template<>
    struct plus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) + std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) + std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) + std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct minus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) - std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) - std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) - std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct multiplies<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) * std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) * std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) * std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct divides<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) / std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) / std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) / std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct modulus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) % std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) % std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) % std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct negate<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(-std::forward<_Tp>(__t)))
 -> decltype(-std::forward<_Tp>(__t))
 { return -std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };
# 330 "/usr/include/c++/7/bits/stl_function.h" 3
  template<typename _Tp = void>
    struct equal_to;

  template<typename _Tp = void>
    struct not_equal_to;

  template<typename _Tp = void>
    struct greater;

  template<typename _Tp = void>
    struct less;

  template<typename _Tp = void>
    struct greater_equal;

  template<typename _Tp = void>
    struct less_equal;



  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x == __y; }
    };


  template<typename _Tp>
    struct not_equal_to : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x != __y; }
    };


  template<typename _Tp>
    struct greater : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x > __y; }
    };


  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
    };


  template<typename _Tp>
    struct greater_equal : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x >= __y; }
    };


  template<typename _Tp>
    struct less_equal : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x <= __y; }
    };



  template<>
    struct equal_to<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) == std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) == std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) == std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct not_equal_to<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) != std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) != std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) != std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct greater<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) > std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) > std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) > std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct less<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) < std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) < std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) < std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct greater_equal<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) >= std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) >= std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) >= std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct less_equal<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) <= std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) <= std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) <= std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };
# 512 "/usr/include/c++/7/bits/stl_function.h" 3
  template<typename _Tp = void>
    struct logical_and;

  template<typename _Tp = void>
    struct logical_or;

  template<typename _Tp = void>
    struct logical_not;



  template<typename _Tp>
    struct logical_and : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x && __y; }
    };


  template<typename _Tp>
    struct logical_or : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x || __y; }
    };


  template<typename _Tp>
    struct logical_not : public unary_function<_Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x) const
      { return !__x; }
    };



  template<>
    struct logical_and<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) && std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) && std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) && std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct logical_or<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) || std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) || std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) || std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct logical_not<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(!std::forward<_Tp>(__t)))
 -> decltype(!std::forward<_Tp>(__t))
 { return !std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };




  template<typename _Tp = void>
    struct bit_and;

  template<typename _Tp = void>
    struct bit_or;

  template<typename _Tp = void>
    struct bit_xor;

  template<typename _Tp = void>
    struct bit_not;




  template<typename _Tp>
    struct bit_and : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x & __y; }
    };

  template<typename _Tp>
    struct bit_or : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x | __y; }
    };

  template<typename _Tp>
    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x ^ __y; }
    };

  template<typename _Tp>
    struct bit_not : public unary_function<_Tp, _Tp>
    {
    constexpr
      _Tp
      operator()(const _Tp& __x) const
      { return ~__x; }
    };


  template <>
    struct bit_and<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) & std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) & std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) & std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_or<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) | std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) | std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) | std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_xor<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) ^ std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_not<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(~std::forward<_Tp>(__t)))
 -> decltype(~std::forward<_Tp>(__t))
 { return ~std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };
# 740 "/usr/include/c++/7/bits/stl_function.h" 3
  template<typename _Predicate>
    class unary_negate
    : public unary_function<typename _Predicate::argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      constexpr
      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) { }

      constexpr
      bool
      operator()(const typename _Predicate::argument_type& __x) const
      { return !_M_pred(__x); }
    };


  template<typename _Predicate>
    constexpr
    inline unary_negate<_Predicate>
    not1(const _Predicate& __pred)
    { return unary_negate<_Predicate>(__pred); }


  template<typename _Predicate>
    class binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
        typename _Predicate::second_argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      constexpr
      explicit
      binary_negate(const _Predicate& __x) : _M_pred(__x) { }

      constexpr
      bool
      operator()(const typename _Predicate::first_argument_type& __x,
   const typename _Predicate::second_argument_type& __y) const
      { return !_M_pred(__x, __y); }
    };


  template<typename _Predicate>
    constexpr
    inline binary_negate<_Predicate>
    not2(const _Predicate& __pred)
    { return binary_negate<_Predicate>(__pred); }
# 817 "/usr/include/c++/7/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    class pointer_to_unary_function : public unary_function<_Arg, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg);

    public:
      pointer_to_unary_function() { }

      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg __x) const
      { return _M_ptr(__x); }
    };


  template<typename _Arg, typename _Result>
    inline pointer_to_unary_function<_Arg, _Result>
    ptr_fun(_Result (*__x)(_Arg))
    { return pointer_to_unary_function<_Arg, _Result>(__x); }


  template<typename _Arg1, typename _Arg2, typename _Result>
    class pointer_to_binary_function
    : public binary_function<_Arg1, _Arg2, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg1, _Arg2);

    public:
      pointer_to_binary_function() { }

      explicit
      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg1 __x, _Arg2 __y) const
      { return _M_ptr(__x, __y); }
    };


  template<typename _Arg1, typename _Arg2, typename _Result>
    inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
    ptr_fun(_Result (*__x)(_Arg1, _Arg2))
    { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }


  template<typename _Tp>
    struct _Identity
    : public unary_function<_Tp,_Tp>
    {
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
      { return __x; }
    };

  template<typename _Pair>
    struct _Select1st
    : public unary_function<_Pair, typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }


      template<typename _Pair2>
        typename _Pair2::first_type&
        operator()(_Pair2& __x) const
        { return __x.first; }

      template<typename _Pair2>
        const typename _Pair2::first_type&
        operator()(const _Pair2& __x) const
        { return __x.first; }

    };

  template<typename _Pair>
    struct _Select2nd
    : public unary_function<_Pair, typename _Pair::second_type>
    {
      typename _Pair::second_type&
      operator()(_Pair& __x) const
      { return __x.second; }

      const typename _Pair::second_type&
      operator()(const _Pair& __x) const
      { return __x.second; }
    };
# 937 "/usr/include/c++/7/bits/stl_function.h" 3
  template<typename _Ret, typename _Tp>
    class mem_fun_t : public unary_function<_Tp*, _Ret>
    {
    public:
      explicit
      mem_fun_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
    };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>
    {
    public:
      explicit
      const_mem_fun_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp>
    class mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      mem_fun_ref_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
  };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp>
    inline mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)())
    { return mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)())
    { return mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }




}


# 1 "/usr/include/c++/7/backward/binders.h" 1 3
# 60 "/usr/include/c++/7/backward/binders.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

namespace std __attribute__ ((__visibility__ ("default")))
{

# 107 "/usr/include/c++/7/backward/binders.h" 3
  template<typename _Operation>
    class binder1st
    : public unary_function<typename _Operation::second_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::first_argument_type value;

    public:
      binder1st(const _Operation& __x,
  const typename _Operation::first_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }



      typename _Operation::result_type
      operator()(typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder1st<_Operation>
    bind1st(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::first_argument_type _Arg1_type;
      return binder1st<_Operation>(__fn, _Arg1_type(__x));
    }


  template<typename _Operation>
    class binder2nd
    : public unary_function<typename _Operation::first_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::second_argument_type value;

    public:
      binder2nd(const _Operation& __x,
  const typename _Operation::second_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }



      typename _Operation::result_type
      operator()(typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder2nd<_Operation>
    bind2nd(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::second_argument_type _Arg2_type;
      return binder2nd<_Operation>(__fn, _Arg2_type(__x));
    }



}

#pragma GCC diagnostic pop
# 1128 "/usr/include/c++/7/bits/stl_function.h" 2 3
# 66 "/usr/include/c++/7/bits/stl_tree.h" 2 3



# 1 "/usr/include/c++/7/ext/aligned_buffer.h" 1 3
# 32 "/usr/include/c++/7/ext/aligned_buffer.h" 3
       
# 33 "/usr/include/c++/7/ext/aligned_buffer.h" 3







namespace __gnu_cxx
{




  template<typename _Tp>
    struct __aligned_membuf
    {



      struct _Tp2 { _Tp _M_t; };

      alignas(__alignof__(_Tp2::_M_t)) unsigned char _M_storage[sizeof(_Tp)];

      __aligned_membuf() = default;


      __aligned_membuf(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      { return static_cast<void*>(&_M_storage); }

      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
      { return static_cast<_Tp*>(_M_addr()); }

      const _Tp*
      _M_ptr() const noexcept
      { return static_cast<const _Tp*>(_M_addr()); }
    };






  template<typename _Tp>
    struct __aligned_buffer
    : std::aligned_storage<sizeof(_Tp), std::alignment_of<_Tp>::value>
    {
      typename
 std::aligned_storage<sizeof(_Tp), std::alignment_of<_Tp>::value>::type
 _M_storage;

      __aligned_buffer() = default;


      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
      }

      const void*
      _M_addr() const noexcept
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
      { return static_cast<_Tp*>(_M_addr()); }

      const _Tp*
      _M_ptr() const noexcept
      { return static_cast<const _Tp*>(_M_addr()); }
    };

}
# 70 "/usr/include/c++/7/bits/stl_tree.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{

# 99 "/usr/include/c++/7/bits/stl_tree.h" 3
  enum _Rb_tree_color { _S_red = false, _S_black = true };

  struct _Rb_tree_node_base
  {
    typedef _Rb_tree_node_base* _Base_ptr;
    typedef const _Rb_tree_node_base* _Const_Base_ptr;

    _Rb_tree_color _M_color;
    _Base_ptr _M_parent;
    _Base_ptr _M_left;
    _Base_ptr _M_right;

    static _Base_ptr
    _S_minimum(_Base_ptr __x) noexcept
    {
      while (__x->_M_left != 0) __x = __x->_M_left;
      return __x;
    }

    static _Const_Base_ptr
    _S_minimum(_Const_Base_ptr __x) noexcept
    {
      while (__x->_M_left != 0) __x = __x->_M_left;
      return __x;
    }

    static _Base_ptr
    _S_maximum(_Base_ptr __x) noexcept
    {
      while (__x->_M_right != 0) __x = __x->_M_right;
      return __x;
    }

    static _Const_Base_ptr
    _S_maximum(_Const_Base_ptr __x) noexcept
    {
      while (__x->_M_right != 0) __x = __x->_M_right;
      return __x;
    }
  };


  template<typename _Key_compare>
    struct _Rb_tree_key_compare
    {
      _Key_compare _M_key_compare;

      _Rb_tree_key_compare()
      noexcept(is_nothrow_default_constructible<_Key_compare>::value)

      : _M_key_compare()
      { }

      _Rb_tree_key_compare(const _Key_compare& __comp)
      : _M_key_compare(__comp)
      { }



      _Rb_tree_key_compare(const _Rb_tree_key_compare&) = default;

      _Rb_tree_key_compare(_Rb_tree_key_compare&& __x)
 noexcept(is_nothrow_copy_constructible<_Key_compare>::value)
      : _M_key_compare(__x._M_key_compare)
      { }

    };


  struct _Rb_tree_header
  {
    _Rb_tree_node_base _M_header;
    size_t _M_node_count;

    _Rb_tree_header() noexcept
    {
      _M_header._M_color = _S_red;
      _M_reset();
    }


    _Rb_tree_header(_Rb_tree_header&& __x) noexcept
    {
      if (__x._M_header._M_parent != nullptr)
 _M_move_data(__x);
      else
 {
   _M_header._M_color = _S_red;
   _M_reset();
 }
    }


    void
    _M_move_data(_Rb_tree_header& __from)
    {
      _M_header._M_color = __from._M_header._M_color;
      _M_header._M_parent = __from._M_header._M_parent;
      _M_header._M_left = __from._M_header._M_left;
      _M_header._M_right = __from._M_header._M_right;
      _M_header._M_parent->_M_parent = &_M_header;
      _M_node_count = __from._M_node_count;

      __from._M_reset();
    }

    void
    _M_reset()
    {
      _M_header._M_parent = 0;
      _M_header._M_left = &_M_header;
      _M_header._M_right = &_M_header;
      _M_node_count = 0;
    }
  };

  template<typename _Val>
    struct _Rb_tree_node : public _Rb_tree_node_base
    {
      typedef _Rb_tree_node<_Val>* _Link_type;
# 231 "/usr/include/c++/7/bits/stl_tree.h" 3
      __gnu_cxx::__aligned_membuf<_Val> _M_storage;

      _Val*
      _M_valptr()
      { return _M_storage._M_ptr(); }

      const _Val*
      _M_valptr() const
      { return _M_storage._M_ptr(); }

    };

  __attribute__ ((__pure__)) _Rb_tree_node_base*
  _Rb_tree_increment(_Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) const _Rb_tree_node_base*
  _Rb_tree_increment(const _Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) _Rb_tree_node_base*
  _Rb_tree_decrement(_Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) const _Rb_tree_node_base*
  _Rb_tree_decrement(const _Rb_tree_node_base* __x) throw ();

  template<typename _Tp>
    struct _Rb_tree_iterator
    {
      typedef _Tp value_type;
      typedef _Tp& reference;
      typedef _Tp* pointer;

      typedef bidirectional_iterator_tag iterator_category;
      typedef ptrdiff_t difference_type;

      typedef _Rb_tree_iterator<_Tp> _Self;
      typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;
      typedef _Rb_tree_node<_Tp>* _Link_type;

      _Rb_tree_iterator() noexcept
      : _M_node() { }

      explicit
      _Rb_tree_iterator(_Base_ptr __x) noexcept
      : _M_node(__x) { }

      reference
      operator*() const noexcept
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }

      pointer
      operator->() const noexcept
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }

      _Self&
      operator++() noexcept
      {
 _M_node = _Rb_tree_increment(_M_node);
 return *this;
      }

      _Self
      operator++(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_increment(_M_node);
 return __tmp;
      }

      _Self&
      operator--() noexcept
      {
 _M_node = _Rb_tree_decrement(_M_node);
 return *this;
      }

      _Self
      operator--(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_decrement(_M_node);
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const noexcept
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const noexcept
      { return _M_node != __x._M_node; }

      _Base_ptr _M_node;
  };

  template<typename _Tp>
    struct _Rb_tree_const_iterator
    {
      typedef _Tp value_type;
      typedef const _Tp& reference;
      typedef const _Tp* pointer;

      typedef _Rb_tree_iterator<_Tp> iterator;

      typedef bidirectional_iterator_tag iterator_category;
      typedef ptrdiff_t difference_type;

      typedef _Rb_tree_const_iterator<_Tp> _Self;
      typedef _Rb_tree_node_base::_Const_Base_ptr _Base_ptr;
      typedef const _Rb_tree_node<_Tp>* _Link_type;

      _Rb_tree_const_iterator() noexcept
      : _M_node() { }

      explicit
      _Rb_tree_const_iterator(_Base_ptr __x) noexcept
      : _M_node(__x) { }

      _Rb_tree_const_iterator(const iterator& __it) noexcept
      : _M_node(__it._M_node) { }

      iterator
      _M_const_cast() const noexcept
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }

      reference
      operator*() const noexcept
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }

      pointer
      operator->() const noexcept
      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }

      _Self&
      operator++() noexcept
      {
 _M_node = _Rb_tree_increment(_M_node);
 return *this;
      }

      _Self
      operator++(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_increment(_M_node);
 return __tmp;
      }

      _Self&
      operator--() noexcept
      {
 _M_node = _Rb_tree_decrement(_M_node);
 return *this;
      }

      _Self
      operator--(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_decrement(_M_node);
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const noexcept
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const noexcept
      { return _M_node != __x._M_node; }

      _Base_ptr _M_node;
    };

  template<typename _Val>
    inline bool
    operator==(const _Rb_tree_iterator<_Val>& __x,
               const _Rb_tree_const_iterator<_Val>& __y) noexcept
    { return __x._M_node == __y._M_node; }

  template<typename _Val>
    inline bool
    operator!=(const _Rb_tree_iterator<_Val>& __x,
               const _Rb_tree_const_iterator<_Val>& __y) noexcept
    { return __x._M_node != __y._M_node; }

  void
  _Rb_tree_insert_and_rebalance(const bool __insert_left,
                                _Rb_tree_node_base* __x,
                                _Rb_tree_node_base* __p,
                                _Rb_tree_node_base& __header) throw ();

  _Rb_tree_node_base*
  _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z,
          _Rb_tree_node_base& __header) throw ();


  template<typename _Cmp, typename _SfinaeType, typename = __void_t<>>
    struct __has_is_transparent
    { };

  template<typename _Cmp, typename _SfinaeType>
    struct __has_is_transparent<_Cmp, _SfinaeType,
    __void_t<typename _Cmp::is_transparent>>
    { typedef void type; };







  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc = allocator<_Val> >
    class _Rb_tree
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Rb_tree_node<_Val> >::other _Node_allocator;

      typedef __gnu_cxx::__alloc_traits<_Node_allocator> _Alloc_traits;

    protected:
      typedef _Rb_tree_node_base* _Base_ptr;
      typedef const _Rb_tree_node_base* _Const_Base_ptr;
      typedef _Rb_tree_node<_Val>* _Link_type;
      typedef const _Rb_tree_node<_Val>* _Const_Link_type;

    private:


      struct _Reuse_or_alloc_node
      {
 _Reuse_or_alloc_node(_Rb_tree& __t)
   : _M_root(__t._M_root()), _M_nodes(__t._M_rightmost()), _M_t(__t)
 {
   if (_M_root)
     {
       _M_root->_M_parent = 0;

       if (_M_nodes->_M_left)
  _M_nodes = _M_nodes->_M_left;
     }
   else
     _M_nodes = 0;
 }


 _Reuse_or_alloc_node(const _Reuse_or_alloc_node&) = delete;


 ~_Reuse_or_alloc_node()
 { _M_t._M_erase(static_cast<_Link_type>(_M_root)); }

 template<typename _Arg>
   _Link_type



   operator()(_Arg&& __arg)

   {
     _Link_type __node = static_cast<_Link_type>(_M_extract());
     if (__node)
       {
  _M_t._M_destroy_node(__node);
  _M_t._M_construct_node(__node, std::forward<_Arg>(__arg));
  return __node;
       }

     return _M_t._M_create_node(std::forward<_Arg>(__arg));
   }

      private:
 _Base_ptr
 _M_extract()
 {
   if (!_M_nodes)
     return _M_nodes;

   _Base_ptr __node = _M_nodes;
   _M_nodes = _M_nodes->_M_parent;
   if (_M_nodes)
     {
       if (_M_nodes->_M_right == __node)
  {
    _M_nodes->_M_right = 0;

    if (_M_nodes->_M_left)
      {
        _M_nodes = _M_nodes->_M_left;

        while (_M_nodes->_M_right)
   _M_nodes = _M_nodes->_M_right;

        if (_M_nodes->_M_left)
   _M_nodes = _M_nodes->_M_left;
      }
  }
       else
  _M_nodes->_M_left = 0;
     }
   else
     _M_root = 0;

   return __node;
 }

 _Base_ptr _M_root;
 _Base_ptr _M_nodes;
 _Rb_tree& _M_t;
      };



      struct _Alloc_node
      {
 _Alloc_node(_Rb_tree& __t)
   : _M_t(__t) { }

 template<typename _Arg>
   _Link_type



   operator()(_Arg&& __arg) const

   { return _M_t._M_create_node(std::forward<_Arg>(__arg)); }

      private:
 _Rb_tree& _M_t;
      };

    public:
      typedef _Key key_type;
      typedef _Val value_type;
      typedef value_type* pointer;
      typedef const value_type* const_pointer;
      typedef value_type& reference;
      typedef const value_type& const_reference;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

      _Node_allocator&
      _M_get_Node_allocator() noexcept
      { return *static_cast<_Node_allocator*>(&this->_M_impl); }

      const _Node_allocator&
      _M_get_Node_allocator() const noexcept
      { return *static_cast<const _Node_allocator*>(&this->_M_impl); }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Node_allocator()); }

    protected:
      _Link_type
      _M_get_node()
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }

      void
      _M_put_node(_Link_type __p) noexcept
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
# 619 "/usr/include/c++/7/bits/stl_tree.h" 3
      template<typename... _Args>
 void
 _M_construct_node(_Link_type __node, _Args&&... __args)
 {
   try
     {
       ::new(__node) _Rb_tree_node<_Val>;
       _Alloc_traits::construct(_M_get_Node_allocator(),
           __node->_M_valptr(),
           std::forward<_Args>(__args)...);
     }
   catch(...)
     {
       __node->~_Rb_tree_node<_Val>();
       _M_put_node(__node);
       throw;
     }
 }

      template<typename... _Args>
        _Link_type
        _M_create_node(_Args&&... __args)
 {
   _Link_type __tmp = _M_get_node();
   _M_construct_node(__tmp, std::forward<_Args>(__args)...);
   return __tmp;
 }

      void
      _M_destroy_node(_Link_type __p) noexcept
      {
 _Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 __p->~_Rb_tree_node<_Val>();
      }


      void
      _M_drop_node(_Link_type __p) noexcept
      {
 _M_destroy_node(__p);
 _M_put_node(__p);
      }

      template<typename _NodeGen>
 _Link_type
 _M_clone_node(_Const_Link_type __x, _NodeGen& __node_gen)
 {
   _Link_type __tmp = __node_gen(*__x->_M_valptr());
   __tmp->_M_color = __x->_M_color;
   __tmp->_M_left = 0;
   __tmp->_M_right = 0;
   return __tmp;
 }

    protected:

      template<typename _Key_compare,
        bool = __is_pod(_Key_compare)>
        struct _Rb_tree_impl
 : public _Node_allocator
 , public _Rb_tree_key_compare<_Key_compare>
 , public _Rb_tree_header
        {
   typedef _Rb_tree_key_compare<_Key_compare> _Base_key_compare;





   _Rb_tree_impl() = default;
   _Rb_tree_impl(_Rb_tree_impl&&) = default;


   _Rb_tree_impl(const _Rb_tree_impl& __x)
   : _Node_allocator(_Alloc_traits::_S_select_on_copy(__x))
   , _Base_key_compare(__x._M_key_compare)
   { }






   _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
   : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
   { }

 };

      _Rb_tree_impl<_Compare> _M_impl;

    protected:
      _Base_ptr&
      _M_root() noexcept
      { return this->_M_impl._M_header._M_parent; }

      _Const_Base_ptr
      _M_root() const noexcept
      { return this->_M_impl._M_header._M_parent; }

      _Base_ptr&
      _M_leftmost() noexcept
      { return this->_M_impl._M_header._M_left; }

      _Const_Base_ptr
      _M_leftmost() const noexcept
      { return this->_M_impl._M_header._M_left; }

      _Base_ptr&
      _M_rightmost() noexcept
      { return this->_M_impl._M_header._M_right; }

      _Const_Base_ptr
      _M_rightmost() const noexcept
      { return this->_M_impl._M_header._M_right; }

      _Link_type
      _M_begin() noexcept
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }

      _Const_Link_type
      _M_begin() const noexcept
      {
 return static_cast<_Const_Link_type>
   (this->_M_impl._M_header._M_parent);
      }

      _Base_ptr
      _M_end() noexcept
      { return &this->_M_impl._M_header; }

      _Const_Base_ptr
      _M_end() const noexcept
      { return &this->_M_impl._M_header; }

      static const_reference
      _S_value(_Const_Link_type __x)
      { return *__x->_M_valptr(); }

      static const _Key&
      _S_key(_Const_Link_type __x)
      { return _KeyOfValue()(_S_value(__x)); }

      static _Link_type
      _S_left(_Base_ptr __x) noexcept
      { return static_cast<_Link_type>(__x->_M_left); }

      static _Const_Link_type
      _S_left(_Const_Base_ptr __x) noexcept
      { return static_cast<_Const_Link_type>(__x->_M_left); }

      static _Link_type
      _S_right(_Base_ptr __x) noexcept
      { return static_cast<_Link_type>(__x->_M_right); }

      static _Const_Link_type
      _S_right(_Const_Base_ptr __x) noexcept
      { return static_cast<_Const_Link_type>(__x->_M_right); }

      static const_reference
      _S_value(_Const_Base_ptr __x)
      { return *static_cast<_Const_Link_type>(__x)->_M_valptr(); }

      static const _Key&
      _S_key(_Const_Base_ptr __x)
      { return _KeyOfValue()(_S_value(__x)); }

      static _Base_ptr
      _S_minimum(_Base_ptr __x) noexcept
      { return _Rb_tree_node_base::_S_minimum(__x); }

      static _Const_Base_ptr
      _S_minimum(_Const_Base_ptr __x) noexcept
      { return _Rb_tree_node_base::_S_minimum(__x); }

      static _Base_ptr
      _S_maximum(_Base_ptr __x) noexcept
      { return _Rb_tree_node_base::_S_maximum(__x); }

      static _Const_Base_ptr
      _S_maximum(_Const_Base_ptr __x) noexcept
      { return _Rb_tree_node_base::_S_maximum(__x); }

    public:
      typedef _Rb_tree_iterator<value_type> iterator;
      typedef _Rb_tree_const_iterator<value_type> const_iterator;

      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
# 816 "/usr/include/c++/7/bits/stl_tree.h" 3
      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_unique_pos(const key_type& __k);

      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_equal_pos(const key_type& __k);

      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_hint_unique_pos(const_iterator __pos,
        const key_type& __k);

      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_hint_equal_pos(const_iterator __pos,
       const key_type& __k);

    private:

      template<typename _Arg, typename _NodeGen>
        iterator
 _M_insert_(_Base_ptr __x, _Base_ptr __y, _Arg&& __v, _NodeGen&);

      iterator
      _M_insert_node(_Base_ptr __x, _Base_ptr __y, _Link_type __z);

      template<typename _Arg>
        iterator
        _M_insert_lower(_Base_ptr __y, _Arg&& __v);

      template<typename _Arg>
        iterator
        _M_insert_equal_lower(_Arg&& __x);

      iterator
      _M_insert_lower_node(_Base_ptr __p, _Link_type __z);

      iterator
      _M_insert_equal_lower_node(_Link_type __z);
# 867 "/usr/include/c++/7/bits/stl_tree.h" 3
      template<typename _NodeGen>
 _Link_type
 _M_copy(_Const_Link_type __x, _Base_ptr __p, _NodeGen&);

      template<typename _NodeGen>
 _Link_type
 _M_copy(const _Rb_tree& __x, _NodeGen& __gen)
 {
   _Link_type __root = _M_copy(__x._M_begin(), _M_end(), __gen);
   _M_leftmost() = _S_minimum(__root);
   _M_rightmost() = _S_maximum(__root);
   _M_impl._M_node_count = __x._M_impl._M_node_count;
   return __root;
 }

      _Link_type
      _M_copy(const _Rb_tree& __x)
      {
 _Alloc_node __an(*this);
 return _M_copy(__x, __an);
      }

      void
      _M_erase(_Link_type __x);

      iterator
      _M_lower_bound(_Link_type __x, _Base_ptr __y,
       const _Key& __k);

      const_iterator
      _M_lower_bound(_Const_Link_type __x, _Const_Base_ptr __y,
       const _Key& __k) const;

      iterator
      _M_upper_bound(_Link_type __x, _Base_ptr __y,
       const _Key& __k);

      const_iterator
      _M_upper_bound(_Const_Link_type __x, _Const_Base_ptr __y,
       const _Key& __k) const;

    public:




      _Rb_tree() = default;


      _Rb_tree(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_impl(__comp, _Node_allocator(__a)) { }

      _Rb_tree(const _Rb_tree& __x)
      : _M_impl(__x._M_impl)
      {
 if (__x._M_root() != 0)
   _M_root() = _M_copy(__x);
      }


      _Rb_tree(const allocator_type& __a)
      : _M_impl(_Compare(), _Node_allocator(__a))
      { }

      _Rb_tree(const _Rb_tree& __x, const allocator_type& __a)
      : _M_impl(__x._M_impl._M_key_compare, _Node_allocator(__a))
      {
 if (__x._M_root() != nullptr)
   _M_root() = _M_copy(__x);
      }

      _Rb_tree(_Rb_tree&&) = default;

      _Rb_tree(_Rb_tree&& __x, const allocator_type& __a)
      : _Rb_tree(std::move(__x), _Node_allocator(__a))
      { }

      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a);


      ~_Rb_tree() noexcept
      { _M_erase(_M_begin()); }

      _Rb_tree&
      operator=(const _Rb_tree& __x);


      _Compare
      key_comp() const
      { return _M_impl._M_key_compare; }

      iterator
      begin() noexcept
      { return iterator(this->_M_impl._M_header._M_left); }

      const_iterator
      begin() const noexcept
      { return const_iterator(this->_M_impl._M_header._M_left); }

      iterator
      end() noexcept
      { return iterator(&this->_M_impl._M_header); }

      const_iterator
      end() const noexcept
      { return const_iterator(&this->_M_impl._M_header); }

      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }

      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }

      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }

      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }

      bool
      empty() const noexcept
      { return _M_impl._M_node_count == 0; }

      size_type
      size() const noexcept
      { return _M_impl._M_node_count; }

      size_type
      max_size() const noexcept
      { return _Alloc_traits::max_size(_M_get_Node_allocator()); }

      void
      swap(_Rb_tree& __t)
      noexcept(__is_nothrow_swappable<_Compare>::value);



      template<typename _Arg>
        pair<iterator, bool>
        _M_insert_unique(_Arg&& __x);

      template<typename _Arg>
        iterator
        _M_insert_equal(_Arg&& __x);

      template<typename _Arg, typename _NodeGen>
        iterator
 _M_insert_unique_(const_iterator __pos, _Arg&& __x, _NodeGen&);

      template<typename _Arg>
 iterator
 _M_insert_unique_(const_iterator __pos, _Arg&& __x)
 {
   _Alloc_node __an(*this);
   return _M_insert_unique_(__pos, std::forward<_Arg>(__x), __an);
 }

      template<typename _Arg, typename _NodeGen>
 iterator
 _M_insert_equal_(const_iterator __pos, _Arg&& __x, _NodeGen&);

      template<typename _Arg>
 iterator
 _M_insert_equal_(const_iterator __pos, _Arg&& __x)
 {
   _Alloc_node __an(*this);
   return _M_insert_equal_(__pos, std::forward<_Arg>(__x), __an);
 }

      template<typename... _Args>
 pair<iterator, bool>
 _M_emplace_unique(_Args&&... __args);

      template<typename... _Args>
 iterator
 _M_emplace_equal(_Args&&... __args);

      template<typename... _Args>
 iterator
 _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args);

      template<typename... _Args>
 iterator
 _M_emplace_hint_equal(const_iterator __pos, _Args&&... __args);
# 1087 "/usr/include/c++/7/bits/stl_tree.h" 3
      template<typename _InputIterator>
        void
        _M_insert_unique(_InputIterator __first, _InputIterator __last);

      template<typename _InputIterator>
        void
        _M_insert_equal(_InputIterator __first, _InputIterator __last);

    private:
      void
      _M_erase_aux(const_iterator __position);

      void
      _M_erase_aux(const_iterator __first, const_iterator __last);

    public:



      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __position)
      {
 ;
 const_iterator __result = __position;
 ++__result;
 _M_erase_aux(__position);
 return __result._M_const_cast();
      }


      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(iterator __position)
      {
 ;
 iterator __result = __position;
 ++__result;
 _M_erase_aux(__position);
 return __result;
      }
# 1143 "/usr/include/c++/7/bits/stl_tree.h" 3
      size_type
      erase(const key_type& __x);




      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __first, const_iterator __last)
      {
 _M_erase_aux(__first, __last);
 return __last._M_const_cast();
      }
# 1165 "/usr/include/c++/7/bits/stl_tree.h" 3
      void
      erase(const key_type* __first, const key_type* __last);

      void
      clear() noexcept
      {
        _M_erase(_M_begin());
 _M_impl._M_reset();
      }


      iterator
      find(const key_type& __k);

      const_iterator
      find(const key_type& __k) const;

      size_type
      count(const key_type& __k) const;

      iterator
      lower_bound(const key_type& __k)
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }

      const_iterator
      lower_bound(const key_type& __k) const
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }

      iterator
      upper_bound(const key_type& __k)
      { return _M_upper_bound(_M_begin(), _M_end(), __k); }

      const_iterator
      upper_bound(const key_type& __k) const
      { return _M_upper_bound(_M_begin(), _M_end(), __k); }

      pair<iterator, iterator>
      equal_range(const key_type& __k);

      pair<const_iterator, const_iterator>
      equal_range(const key_type& __k) const;


      template<typename _Kt,
        typename _Req =
   typename __has_is_transparent<_Compare, _Kt>::type>
 iterator
 _M_find_tr(const _Kt& __k)
 {
   const _Rb_tree* __const_this = this;
   return __const_this->_M_find_tr(__k)._M_const_cast();
 }

      template<typename _Kt,
        typename _Req =
   typename __has_is_transparent<_Compare, _Kt>::type>
 const_iterator
 _M_find_tr(const _Kt& __k) const
 {
   auto __j = _M_lower_bound_tr(__k);
   if (__j != end() && _M_impl._M_key_compare(__k, _S_key(__j._M_node)))
     __j = end();
   return __j;
 }

      template<typename _Kt,
        typename _Req =
   typename __has_is_transparent<_Compare, _Kt>::type>
 size_type
 _M_count_tr(const _Kt& __k) const
 {
   auto __p = _M_equal_range_tr(__k);
   return std::distance(__p.first, __p.second);
 }

      template<typename _Kt,
        typename _Req =
   typename __has_is_transparent<_Compare, _Kt>::type>
 iterator
 _M_lower_bound_tr(const _Kt& __k)
 {
   const _Rb_tree* __const_this = this;
   return __const_this->_M_lower_bound_tr(__k)._M_const_cast();
 }

      template<typename _Kt,
        typename _Req =
   typename __has_is_transparent<_Compare, _Kt>::type>
 const_iterator
 _M_lower_bound_tr(const _Kt& __k) const
 {
   auto __x = _M_begin();
   auto __y = _M_end();
   while (__x != 0)
     if (!_M_impl._M_key_compare(_S_key(__x), __k))
       {
  __y = __x;
  __x = _S_left(__x);
       }
     else
       __x = _S_right(__x);
   return const_iterator(__y);
 }

      template<typename _Kt,
        typename _Req =
   typename __has_is_transparent<_Compare, _Kt>::type>
 iterator
 _M_upper_bound_tr(const _Kt& __k)
 {
   const _Rb_tree* __const_this = this;
   return __const_this->_M_upper_bound_tr(__k)._M_const_cast();
 }

      template<typename _Kt,
        typename _Req =
   typename __has_is_transparent<_Compare, _Kt>::type>
 const_iterator
 _M_upper_bound_tr(const _Kt& __k) const
 {
   auto __x = _M_begin();
   auto __y = _M_end();
   while (__x != 0)
     if (_M_impl._M_key_compare(__k, _S_key(__x)))
       {
  __y = __x;
  __x = _S_left(__x);
       }
     else
       __x = _S_right(__x);
   return const_iterator(__y);
 }

      template<typename _Kt,
        typename _Req =
   typename __has_is_transparent<_Compare, _Kt>::type>
 pair<iterator, iterator>
 _M_equal_range_tr(const _Kt& __k)
 {
   const _Rb_tree* __const_this = this;
   auto __ret = __const_this->_M_equal_range_tr(__k);
   return { __ret.first._M_const_cast(), __ret.second._M_const_cast() };
 }

      template<typename _Kt,
        typename _Req =
   typename __has_is_transparent<_Compare, _Kt>::type>
 pair<const_iterator, const_iterator>
 _M_equal_range_tr(const _Kt& __k) const
 {
   auto __low = _M_lower_bound_tr(__k);
   auto __high = __low;
   auto& __cmp = _M_impl._M_key_compare;
   while (__high != end() && !__cmp(__k, _S_key(__high._M_node)))
     ++__high;
   return { __low, __high };
 }



      bool
      __rb_verify() const;


      _Rb_tree&
      operator=(_Rb_tree&&)
      noexcept(_Alloc_traits::_S_nothrow_move()
        && is_nothrow_move_assignable<_Compare>::value);

      template<typename _Iterator>
 void
 _M_assign_unique(_Iterator, _Iterator);

      template<typename _Iterator>
 void
 _M_assign_equal(_Iterator, _Iterator);

    private:

      void
      _M_move_data(_Rb_tree& __x, std::true_type)
      { _M_impl._M_move_data(__x._M_impl); }



      void
      _M_move_data(_Rb_tree&, std::false_type);


      void
      _M_move_assign(_Rb_tree&, std::true_type);



      void
      _M_move_assign(_Rb_tree&, std::false_type);
# 1528 "/usr/include/c++/7/bits/stl_tree.h" 3
    };

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator==(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    {
      return __x.size() == __y.size()
      && std::equal(__x.begin(), __x.end(), __y.begin());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator<(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    {
      return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator!=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__x == __y); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator>(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return __y < __x; }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator<=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__y < __x); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator>=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__x < __y); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline void
    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
  _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a)
    : _M_impl(__x._M_impl._M_key_compare, std::move(__a))
    {
      using __eq = typename _Alloc_traits::is_always_equal;
      if (__x._M_root() != nullptr)
 _M_move_data(__x, __eq());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_move_data(_Rb_tree& __x, std::false_type)
    {
      if (_M_get_Node_allocator() == __x._M_get_Node_allocator())
 _M_move_data(__x, std::true_type());
      else
 {
   _Alloc_node __an(*this);
   auto __lbd =
     [&__an](const value_type& __cval)
     {
       auto& __val = const_cast<value_type&>(__cval);
       return __an(std::move_if_noexcept(__val));
     };
   _M_root() = _M_copy(__x, __lbd);
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_move_assign(_Rb_tree& __x, true_type)
    {
      clear();
      if (__x._M_root() != nullptr)
 _M_move_data(__x, std::true_type());
      std::__alloc_on_move(_M_get_Node_allocator(),
      __x._M_get_Node_allocator());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_move_assign(_Rb_tree& __x, false_type)
    {
      if (_M_get_Node_allocator() == __x._M_get_Node_allocator())
 return _M_move_assign(__x, true_type{});



      _Reuse_or_alloc_node __roan(*this);
      _M_impl._M_reset();
      if (__x._M_root() != nullptr)
 {
   auto __lbd =
     [&__roan](const value_type& __cval)
     {
       auto& __val = const_cast<value_type&>(__cval);
       return __roan(std::move_if_noexcept(__val));
     };
   _M_root() = _M_copy(__x, __lbd);
   __x.clear();
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    operator=(_Rb_tree&& __x)
    noexcept(_Alloc_traits::_S_nothrow_move()
      && is_nothrow_move_assignable<_Compare>::value)
    {
      _M_impl._M_key_compare = std::move(__x._M_impl._M_key_compare);
      _M_move_assign(__x, __bool_constant<_Alloc_traits::_S_nothrow_move()>());
      return *this;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename _Iterator>
      void
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_assign_unique(_Iterator __first, _Iterator __last)
      {
 _Reuse_or_alloc_node __roan(*this);
 _M_impl._M_reset();
 for (; __first != __last; ++__first)
   _M_insert_unique_(end(), *__first, __roan);
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename _Iterator>
      void
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_assign_equal(_Iterator __first, _Iterator __last)
      {
 _Reuse_or_alloc_node __roan(*this);
 _M_impl._M_reset();
 for (; __first != __last; ++__first)
   _M_insert_equal_(end(), *__first, __roan);
      }


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    operator=(const _Rb_tree& __x)
    {
      if (this != &__x)
 {


   if (_Alloc_traits::_S_propagate_on_copy_assign())
     {
       auto& __this_alloc = this->_M_get_Node_allocator();
       auto& __that_alloc = __x._M_get_Node_allocator();
       if (!_Alloc_traits::_S_always_equal()
    && __this_alloc != __that_alloc)
  {


    clear();
    std::__alloc_on_copy(__this_alloc, __that_alloc);
  }
     }


   _Reuse_or_alloc_node __roan(*this);
   _M_impl._M_reset();
   _M_impl._M_key_compare = __x._M_impl._M_key_compare;
   if (__x._M_root() != 0)
     _M_root() = _M_copy(__x, __roan);
 }

      return *this;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg, typename _NodeGen>



      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_insert_(_Base_ptr __x, _Base_ptr __p,

   _Arg&& __v,



   _NodeGen& __node_gen)
      {
 bool __insert_left = (__x != 0 || __p == _M_end()
         || _M_impl._M_key_compare(_KeyOfValue()(__v),
       _S_key(__p)));

 _Link_type __z = __node_gen(std::forward<_Arg>(__v));

 _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
          this->_M_impl._M_header);
 ++_M_impl._M_node_count;
 return iterator(__z);
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_lower(_Base_ptr __p, _Arg&& __v)



    {
      bool __insert_left = (__p == _M_end()
       || !_M_impl._M_key_compare(_S_key(__p),
             _KeyOfValue()(__v)));

      _Link_type __z = _M_create_node(std::forward<_Arg>(__v));

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_equal_lower(_Arg&& __v)



    {
      _Link_type __x = _M_begin();
      _Base_ptr __y = _M_end();
      while (__x != 0)
 {
   __y = __x;
   __x = !_M_impl._M_key_compare(_S_key(__x), _KeyOfValue()(__v)) ?
         _S_left(__x) : _S_right(__x);
 }
      return _M_insert_lower(__y, std::forward<_Arg>(__v));
    }

  template<typename _Key, typename _Val, typename _KoV,
    typename _Compare, typename _Alloc>
    template<typename _NodeGen>
      typename _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::_Link_type
      _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
      _M_copy(_Const_Link_type __x, _Base_ptr __p, _NodeGen& __node_gen)
      {

 _Link_type __top = _M_clone_node(__x, __node_gen);
 __top->_M_parent = __p;

 try
   {
     if (__x->_M_right)
       __top->_M_right = _M_copy(_S_right(__x), __top, __node_gen);
     __p = __top;
     __x = _S_left(__x);

     while (__x != 0)
       {
  _Link_type __y = _M_clone_node(__x, __node_gen);
  __p->_M_left = __y;
  __y->_M_parent = __p;
  if (__x->_M_right)
    __y->_M_right = _M_copy(_S_right(__x), __y, __node_gen);
  __p = __y;
  __x = _S_left(__x);
       }
   }
 catch(...)
   {
     _M_erase(__top);
     throw;
   }
 return __top;
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase(_Link_type __x)
    {

      while (__x != 0)
 {
   _M_erase(_S_right(__x));
   _Link_type __y = _S_left(__x);
   _M_drop_node(__x);
   __x = __y;
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Base_ptr __y,
     const _Key& __k)
    {
      while (__x != 0)
 if (!_M_impl._M_key_compare(_S_key(__x), __k))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Const_Link_type __x, _Const_Base_ptr __y,
     const _Key& __k) const
    {
      while (__x != 0)
 if (!_M_impl._M_key_compare(_S_key(__x), __k))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return const_iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_upper_bound(_Link_type __x, _Base_ptr __y,
     const _Key& __k)
    {
      while (__x != 0)
 if (_M_impl._M_key_compare(__k, _S_key(__x)))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_upper_bound(_Const_Link_type __x, _Const_Base_ptr __y,
     const _Key& __k) const
    {
      while (__x != 0)
 if (_M_impl._M_key_compare(__k, _S_key(__x)))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return const_iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    equal_range(const _Key& __k)
    {
      _Link_type __x = _M_begin();
      _Base_ptr __y = _M_end();
      while (__x != 0)
 {
   if (_M_impl._M_key_compare(_S_key(__x), __k))
     __x = _S_right(__x);
   else if (_M_impl._M_key_compare(__k, _S_key(__x)))
     __y = __x, __x = _S_left(__x);
   else
     {
       _Link_type __xu(__x);
       _Base_ptr __yu(__y);
       __y = __x, __x = _S_left(__x);
       __xu = _S_right(__xu);
       return pair<iterator,
            iterator>(_M_lower_bound(__x, __y, __k),
        _M_upper_bound(__xu, __yu, __k));
     }
 }
      return pair<iterator, iterator>(iterator(__y),
          iterator(__y));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::const_iterator,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::const_iterator>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    equal_range(const _Key& __k) const
    {
      _Const_Link_type __x = _M_begin();
      _Const_Base_ptr __y = _M_end();
      while (__x != 0)
 {
   if (_M_impl._M_key_compare(_S_key(__x), __k))
     __x = _S_right(__x);
   else if (_M_impl._M_key_compare(__k, _S_key(__x)))
     __y = __x, __x = _S_left(__x);
   else
     {
       _Const_Link_type __xu(__x);
       _Const_Base_ptr __yu(__y);
       __y = __x, __x = _S_left(__x);
       __xu = _S_right(__xu);
       return pair<const_iterator,
            const_iterator>(_M_lower_bound(__x, __y, __k),
       _M_upper_bound(__xu, __yu, __k));
     }
 }
      return pair<const_iterator, const_iterator>(const_iterator(__y),
        const_iterator(__y));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    swap(_Rb_tree& __t)
    noexcept(__is_nothrow_swappable<_Compare>::value)
    {
      if (_M_root() == 0)
 {
   if (__t._M_root() != 0)
     _M_impl._M_move_data(__t._M_impl);
 }
      else if (__t._M_root() == 0)
 __t._M_impl._M_move_data(_M_impl);
      else
 {
   std::swap(_M_root(),__t._M_root());
   std::swap(_M_leftmost(),__t._M_leftmost());
   std::swap(_M_rightmost(),__t._M_rightmost());

   _M_root()->_M_parent = _M_end();
   __t._M_root()->_M_parent = __t._M_end();
   std::swap(this->_M_impl._M_node_count, __t._M_impl._M_node_count);
 }

      std::swap(this->_M_impl._M_key_compare, __t._M_impl._M_key_compare);

      _Alloc_traits::_S_on_swap(_M_get_Node_allocator(),
    __t._M_get_Node_allocator());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Base_ptr __y = _M_end();
      bool __comp = true;
      while (__x != 0)
 {
   __y = __x;
   __comp = _M_impl._M_key_compare(__k, _S_key(__x));
   __x = __comp ? _S_left(__x) : _S_right(__x);
 }
      iterator __j = iterator(__y);
      if (__comp)
 {
   if (__j == begin())
     return _Res(__x, __y);
   else
     --__j;
 }
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 return _Res(__x, __y);
      return _Res(__j._M_node, 0);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_equal_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Base_ptr __y = _M_end();
      while (__x != 0)
 {
   __y = __x;
   __x = _M_impl._M_key_compare(__k, _S_key(__x)) ?
         _S_left(__x) : _S_right(__x);
 }
      return _Res(__x, __y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator, bool>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_unique(_Arg&& __v)



    {
      typedef pair<iterator, bool> _Res;
      pair<_Base_ptr, _Base_ptr> __res
 = _M_get_insert_unique_pos(_KeyOfValue()(__v));

      if (__res.second)
 {
   _Alloc_node __an(*this);
   return _Res(_M_insert_(__res.first, __res.second,
     std::forward<_Arg>(__v), __an),
        true);
 }

      return _Res(iterator(__res.first), false);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_equal(_Arg&& __v)



    {
      pair<_Base_ptr, _Base_ptr> __res
 = _M_get_insert_equal_pos(_KeyOfValue()(__v));
      _Alloc_node __an(*this);
      return _M_insert_(__res.first, __res.second,
   std::forward<_Arg>(__v), __an);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
         typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_hint_unique_pos(const_iterator __position,
      const key_type& __k)
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;


      if (__pos._M_node == _M_end())
 {
   if (size() > 0
       && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
     return _Res(0, _M_rightmost());
   else
     return _M_get_insert_unique_pos(__k);
 }
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 {

   iterator __before = __pos;
   if (__pos._M_node == _M_leftmost())
     return _Res(_M_leftmost(), _M_leftmost());
   else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
     {
       if (_S_right(__before._M_node) == 0)
  return _Res(0, __before._M_node);
       else
  return _Res(__pos._M_node, __pos._M_node);
     }
   else
     return _M_get_insert_unique_pos(__k);
 }
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 {

   iterator __after = __pos;
   if (__pos._M_node == _M_rightmost())
     return _Res(0, _M_rightmost());
   else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
     {
       if (_S_right(__pos._M_node) == 0)
  return _Res(0, __pos._M_node);
       else
  return _Res(__after._M_node, __after._M_node);
     }
   else
     return _M_get_insert_unique_pos(__k);
 }
      else

 return _Res(__pos._M_node, 0);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg, typename _NodeGen>



      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_insert_unique_(const_iterator __position,

   _Arg&& __v,



   _NodeGen& __node_gen)
    {
      pair<_Base_ptr, _Base_ptr> __res
 = _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));

      if (__res.second)
 return _M_insert_(__res.first, __res.second,
     std::forward<_Arg>(__v),
     __node_gen);
      return iterator(__res.first);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
         typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_hint_equal_pos(const_iterator __position, const key_type& __k)
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;


      if (__pos._M_node == _M_end())
 {
   if (size() > 0
       && !_M_impl._M_key_compare(__k, _S_key(_M_rightmost())))
     return _Res(0, _M_rightmost());
   else
     return _M_get_insert_equal_pos(__k);
 }
      else if (!_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 {

   iterator __before = __pos;
   if (__pos._M_node == _M_leftmost())
     return _Res(_M_leftmost(), _M_leftmost());
   else if (!_M_impl._M_key_compare(__k, _S_key((--__before)._M_node)))
     {
       if (_S_right(__before._M_node) == 0)
  return _Res(0, __before._M_node);
       else
  return _Res(__pos._M_node, __pos._M_node);
     }
   else
     return _M_get_insert_equal_pos(__k);
 }
      else
 {

   iterator __after = __pos;
   if (__pos._M_node == _M_rightmost())
     return _Res(0, _M_rightmost());
   else if (!_M_impl._M_key_compare(_S_key((++__after)._M_node), __k))
     {
       if (_S_right(__pos._M_node) == 0)
  return _Res(0, __pos._M_node);
       else
  return _Res(__after._M_node, __after._M_node);
     }
   else
     return _Res(0, 0);
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg, typename _NodeGen>



      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_insert_equal_(const_iterator __position,

         _Arg&& __v,



         _NodeGen& __node_gen)
      {
 pair<_Base_ptr, _Base_ptr> __res
   = _M_get_insert_hint_equal_pos(__position, _KeyOfValue()(__v));

 if (__res.second)
   return _M_insert_(__res.first, __res.second,
       std::forward<_Arg>(__v),
       __node_gen);

 return _M_insert_equal_lower(std::forward<_Arg>(__v));
      }


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
    {
      bool __insert_left = (__x != 0 || __p == _M_end()
       || _M_impl._M_key_compare(_S_key(__z),
            _S_key(__p)));

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_lower_node(_Base_ptr __p, _Link_type __z)
    {
      bool __insert_left = (__p == _M_end()
       || !_M_impl._M_key_compare(_S_key(__p),
             _S_key(__z)));

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_equal_lower_node(_Link_type __z)
    {
      _Link_type __x = _M_begin();
      _Base_ptr __y = _M_end();
      while (__x != 0)
 {
   __y = __x;
   __x = !_M_impl._M_key_compare(_S_key(__x), _S_key(__z)) ?
         _S_left(__x) : _S_right(__x);
 }
      return _M_insert_lower_node(__y, __z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator, bool>
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_emplace_unique(_Args&&... __args)
      {
 _Link_type __z = _M_create_node(std::forward<_Args>(__args)...);

 try
   {
     typedef pair<iterator, bool> _Res;
     auto __res = _M_get_insert_unique_pos(_S_key(__z));
     if (__res.second)
       return _Res(_M_insert_node(__res.first, __res.second, __z), true);

     _M_drop_node(__z);
     return _Res(iterator(__res.first), false);
   }
 catch(...)
   {
     _M_drop_node(__z);
     throw;
   }
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_emplace_equal(_Args&&... __args)
      {
 _Link_type __z = _M_create_node(std::forward<_Args>(__args)...);

 try
   {
     auto __res = _M_get_insert_equal_pos(_S_key(__z));
     return _M_insert_node(__res.first, __res.second, __z);
   }
 catch(...)
   {
     _M_drop_node(__z);
     throw;
   }
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      {
 _Link_type __z = _M_create_node(std::forward<_Args>(__args)...);

 try
   {
     auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));

     if (__res.second)
       return _M_insert_node(__res.first, __res.second, __z);

     _M_drop_node(__z);
     return iterator(__res.first);
   }
 catch(...)
   {
     _M_drop_node(__z);
     throw;
   }
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_emplace_hint_equal(const_iterator __pos, _Args&&... __args)
      {
 _Link_type __z = _M_create_node(std::forward<_Args>(__args)...);

 try
   {
     auto __res = _M_get_insert_hint_equal_pos(__pos, _S_key(__z));

     if (__res.second)
       return _M_insert_node(__res.first, __res.second, __z);

     return _M_insert_equal_lower_node(__z);
   }
 catch(...)
   {
     _M_drop_node(__z);
     throw;
   }
      }


  template<typename _Key, typename _Val, typename _KoV,
           typename _Cmp, typename _Alloc>
    template<class _II>
      void
      _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::
      _M_insert_unique(_II __first, _II __last)
      {
 _Alloc_node __an(*this);
 for (; __first != __last; ++__first)
   _M_insert_unique_(end(), *__first, __an);
      }

  template<typename _Key, typename _Val, typename _KoV,
           typename _Cmp, typename _Alloc>
    template<class _II>
      void
      _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::
      _M_insert_equal(_II __first, _II __last)
      {
 _Alloc_node __an(*this);
 for (; __first != __last; ++__first)
   _M_insert_equal_(end(), *__first, __an);
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase_aux(const_iterator __position)
    {
      _Link_type __y =
 static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
    (const_cast<_Base_ptr>(__position._M_node),
     this->_M_impl._M_header));
      _M_drop_node(__y);
      --_M_impl._M_node_count;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase_aux(const_iterator __first, const_iterator __last)
    {
      if (__first == begin() && __last == end())
 clear();
      else
 while (__first != __last)
   _M_erase_aux(__first++);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(const _Key& __x)
    {
      pair<iterator, iterator> __p = equal_range(__x);
      const size_type __old_size = size();
      _M_erase_aux(__p.first, __p.second);
      return __old_size - size();
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(const _Key* __first, const _Key* __last)
    {
      while (__first != __last)
 erase(*__first++);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
       || _M_impl._M_key_compare(__k,
     _S_key(__j._M_node))) ? end() : __j;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
       || _M_impl._M_key_compare(__k,
     _S_key(__j._M_node))) ? end() : __j;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    count(const _Key& __k) const
    {
      pair<const_iterator, const_iterator> __p = equal_range(__k);
      const size_type __n = std::distance(__p.first, __p.second);
      return __n;
    }

  __attribute__ ((__pure__)) unsigned int
  _Rb_tree_black_count(const _Rb_tree_node_base* __node,
                       const _Rb_tree_node_base* __root) throw ();

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    bool
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::__rb_verify() const
    {
      if (_M_impl._M_node_count == 0 || begin() == end())
 return _M_impl._M_node_count == 0 && begin() == end()
        && this->_M_impl._M_header._M_left == _M_end()
        && this->_M_impl._M_header._M_right == _M_end();

      unsigned int __len = _Rb_tree_black_count(_M_leftmost(), _M_root());
      for (const_iterator __it = begin(); __it != end(); ++__it)
 {
   _Const_Link_type __x = static_cast<_Const_Link_type>(__it._M_node);
   _Const_Link_type __L = _S_left(__x);
   _Const_Link_type __R = _S_right(__x);

   if (__x->_M_color == _S_red)
     if ((__L && __L->_M_color == _S_red)
  || (__R && __R->_M_color == _S_red))
       return false;

   if (__L && _M_impl._M_key_compare(_S_key(__x), _S_key(__L)))
     return false;
   if (__R && _M_impl._M_key_compare(_S_key(__R), _S_key(__x)))
     return false;

   if (!__L && !__R && _Rb_tree_black_count(__x, _M_root()) != __len)
     return false;
 }

      if (_M_leftmost() != _Rb_tree_node_base::_S_minimum(_M_root()))
 return false;
      if (_M_rightmost() != _Rb_tree_node_base::_S_maximum(_M_root()))
 return false;
      return true;
    }
# 2611 "/usr/include/c++/7/bits/stl_tree.h" 3

}
# 61 "/usr/include/c++/7/map" 2 3
# 1 "/usr/include/c++/7/bits/stl_map.h" 1 3
# 63 "/usr/include/c++/7/bits/stl_map.h" 3
# 1 "/usr/include/c++/7/tuple" 1 3
# 32 "/usr/include/c++/7/tuple" 3
       
# 33 "/usr/include/c++/7/tuple" 3





# 1 "/usr/include/c++/7/utility" 1 3
# 58 "/usr/include/c++/7/utility" 3
       
# 59 "/usr/include/c++/7/utility" 3
# 69 "/usr/include/c++/7/utility" 3
# 1 "/usr/include/c++/7/bits/stl_relops.h" 1 3
# 67 "/usr/include/c++/7/bits/stl_relops.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
  namespace rel_ops
  {
 
# 85 "/usr/include/c++/7/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator!=(const _Tp& __x, const _Tp& __y)
      { return !(__x == __y); }
# 98 "/usr/include/c++/7/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>(const _Tp& __x, const _Tp& __y)
      { return __y < __x; }
# 111 "/usr/include/c++/7/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator<=(const _Tp& __x, const _Tp& __y)
      { return !(__y < __x); }
# 124 "/usr/include/c++/7/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>=(const _Tp& __x, const _Tp& __y)
      { return !(__x < __y); }

 
  }

}
# 70 "/usr/include/c++/7/utility" 2 3
# 78 "/usr/include/c++/7/utility" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp>
    struct tuple_size;





  template<typename _Tp, typename = void>
    struct __tuple_size_cv_impl { };

  template<typename _Tp>
    struct __tuple_size_cv_impl<_Tp, __void_t<decltype(tuple_size<_Tp>::value)>>
    : integral_constant<size_t, tuple_size<_Tp>::value> { };



  template<typename _Tp>
    struct tuple_size<const _Tp> : __tuple_size_cv_impl<_Tp> { };

  template<typename _Tp>
    struct tuple_size<volatile _Tp> : __tuple_size_cv_impl<_Tp> { };

  template<typename _Tp>
    struct tuple_size<const volatile _Tp> : __tuple_size_cv_impl<_Tp> { };
# 128 "/usr/include/c++/7/utility" 3
  template<std::size_t __i, typename _Tp>
    struct tuple_element;


  template<std::size_t __i, typename _Tp>
    using __tuple_element_t = typename tuple_element<__i, _Tp>::type;

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, const _Tp>
    {
      typedef typename add_const<__tuple_element_t<__i, _Tp>>::type type;
    };

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, volatile _Tp>
    {
      typedef typename add_volatile<__tuple_element_t<__i, _Tp>>::type type;
    };

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, const volatile _Tp>
    {
      typedef typename add_cv<__tuple_element_t<__i, _Tp>>::type type;
    };




  template<std::size_t __i, typename _Tp>
    using tuple_element_t = typename tuple_element<__i, _Tp>::type;





  template<typename _T1, typename _T2>
    struct __is_tuple_like_impl<std::pair<_T1, _T2>> : true_type
    { };


  template<class _Tp1, class _Tp2>
    struct tuple_size<std::pair<_Tp1, _Tp2>>
    : public integral_constant<std::size_t, 2> { };


  template<class _Tp1, class _Tp2>
    struct tuple_element<0, std::pair<_Tp1, _Tp2>>
    { typedef _Tp1 type; };


  template<class _Tp1, class _Tp2>
    struct tuple_element<1, std::pair<_Tp1, _Tp2>>
    { typedef _Tp2 type; };

  template<std::size_t _Int>
    struct __pair_get;

  template<>
    struct __pair_get<0>
    {
      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp1&
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.first; }

      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp1&&
        __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<_Tp1>(__pair.first); }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp1&
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.first; }
    };

  template<>
    struct __pair_get<1>
    {
      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp2&
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.second; }

      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp2&&
        __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<_Tp2>(__pair.second); }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp2&
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.second; }
    };

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(std::pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__get(__in); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&&
    get(std::pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__move_get(std::move(__in)); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(const std::pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__const_get(__in); }





  template <typename _Tp, typename _Up>
    constexpr _Tp&
    get(pair<_Tp, _Up>& __p) noexcept
    { return __p.first; }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&
    get(const pair<_Tp, _Up>& __p) noexcept
    { return __p.first; }

  template <typename _Tp, typename _Up>
    constexpr _Tp&&
    get(pair<_Tp, _Up>&& __p) noexcept
    { return std::move(__p.first); }

  template <typename _Tp, typename _Up>
    constexpr _Tp&
    get(pair<_Up, _Tp>& __p) noexcept
    { return __p.second; }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&
    get(const pair<_Up, _Tp>& __p) noexcept
    { return __p.second; }

  template <typename _Tp, typename _Up>
    constexpr _Tp&&
    get(pair<_Up, _Tp>&& __p) noexcept
    { return std::move(__p.second); }




  template <typename _Tp, typename _Up = _Tp>
    inline _Tp
    exchange(_Tp& __obj, _Up&& __new_val)
    { return std::__exchange(__obj, std::forward<_Up>(__new_val)); }




  template<size_t... _Indexes> struct _Index_tuple { };


  template<typename _Itup1, typename _Itup2> struct _Itup_cat;

  template<size_t... _Ind1, size_t... _Ind2>
    struct _Itup_cat<_Index_tuple<_Ind1...>, _Index_tuple<_Ind2...>>
    {
      using __type = _Index_tuple<_Ind1..., (_Ind2 + sizeof...(_Ind1))...>;
    };


  template<size_t _Num>
    struct _Build_index_tuple
    : _Itup_cat<typename _Build_index_tuple<_Num / 2>::__type,
  typename _Build_index_tuple<_Num - _Num / 2>::__type>
    { };

  template<>
    struct _Build_index_tuple<1>
    {
      typedef _Index_tuple<0> __type;
    };

  template<>
    struct _Build_index_tuple<0>
    {
      typedef _Index_tuple<> __type;
    };






  template<typename _Tp, _Tp... _Idx>
    struct integer_sequence
    {
      typedef _Tp value_type;
      static constexpr size_t size() noexcept { return sizeof...(_Idx); }
    };

  template<typename _Tp, _Tp _Num,
    typename _ISeq = typename _Build_index_tuple<_Num>::__type>
    struct _Make_integer_sequence;

  template<typename _Tp, _Tp _Num, size_t... _Idx>
    struct _Make_integer_sequence<_Tp, _Num, _Index_tuple<_Idx...>>
    {
      static_assert( _Num >= 0,
       "Cannot make integer sequence of negative length" );

      typedef integer_sequence<_Tp, static_cast<_Tp>(_Idx)...> __type;
    };


  template<typename _Tp, _Tp _Num>
    using make_integer_sequence
      = typename _Make_integer_sequence<_Tp, _Num>::__type;


  template<size_t... _Idx>
    using index_sequence = integer_sequence<size_t, _Idx...>;


  template<size_t _Num>
    using make_index_sequence = make_integer_sequence<size_t, _Num>;


  template<typename... _Types>
    using index_sequence_for = make_index_sequence<sizeof...(_Types)>;
# 402 "/usr/include/c++/7/utility" 3

}
# 39 "/usr/include/c++/7/tuple" 2 3
# 1 "/usr/include/c++/7/array" 1 3
# 32 "/usr/include/c++/7/array" 3
       
# 33 "/usr/include/c++/7/array" 3






# 1 "/usr/include/c++/7/stdexcept" 1 3
# 36 "/usr/include/c++/7/stdexcept" 3
       
# 37 "/usr/include/c++/7/stdexcept" 3


# 1 "/usr/include/c++/7/string" 1 3
# 36 "/usr/include/c++/7/string" 3
       
# 37 "/usr/include/c++/7/string" 3


# 1 "/usr/include/c++/7/bits/stringfwd.h" 1 3
# 37 "/usr/include/c++/7/bits/stringfwd.h" 3
       
# 38 "/usr/include/c++/7/bits/stringfwd.h" 3




namespace std __attribute__ ((__visibility__ ("default")))
{








  template<class _CharT>
    struct char_traits;

  template<> struct char_traits<char>;


  template<> struct char_traits<wchar_t>;




  template<> struct char_traits<char16_t>;
  template<> struct char_traits<char32_t>;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;


  typedef basic_string<char> string;



  typedef basic_string<wchar_t> wstring;





  typedef basic_string<char16_t> u16string;


  typedef basic_string<char32_t> u32string;


}




}
# 40 "/usr/include/c++/7/string" 2 3
# 1 "/usr/include/c++/7/bits/char_traits.h" 1 3
# 37 "/usr/include/c++/7/bits/char_traits.h" 3
       
# 38 "/usr/include/c++/7/bits/char_traits.h" 3


# 1 "/usr/include/c++/7/bits/postypes.h" 1 3
# 38 "/usr/include/c++/7/bits/postypes.h" 3
       
# 39 "/usr/include/c++/7/bits/postypes.h" 3

# 1 "/usr/include/c++/7/cwchar" 1 3
# 39 "/usr/include/c++/7/cwchar" 3
       
# 40 "/usr/include/c++/7/cwchar" 3




# 1 "/usr/include/wchar.h" 1 3 4
# 27 "/usr/include/wchar.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/wchar.h" 2 3 4







# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 36 "/usr/include/wchar.h" 2 3 4





# 1 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h" 3 4
typedef unsigned int wint_t;
# 42 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h" 1 3 4





typedef __mbstate_t mbstate_t;
# 43 "/usr/include/wchar.h" 2 3 4
# 79 "/usr/include/wchar.h" 3 4
extern "C" {



struct tm;



extern wchar_t *wcscpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcsncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcscat (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern wchar_t *wcsncat (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int wcscmp (const wchar_t *__s1, const wchar_t *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int wcsncmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern int wcscasecmp (const wchar_t *__s1, const wchar_t *__s2) throw ();


extern int wcsncasecmp (const wchar_t *__s1, const wchar_t *__s2,
   size_t __n) throw ();



extern int wcscasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
    locale_t __loc) throw ();

extern int wcsncasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
     size_t __n, locale_t __loc) throw ();




extern int wcscoll (const wchar_t *__s1, const wchar_t *__s2) throw ();



extern size_t wcsxfrm (wchar_t *__restrict __s1,
         const wchar_t *__restrict __s2, size_t __n) throw ();







extern int wcscoll_l (const wchar_t *__s1, const wchar_t *__s2,
        locale_t __loc) throw ();




extern size_t wcsxfrm_l (wchar_t *__s1, const wchar_t *__s2,
    size_t __n, locale_t __loc) throw ();


extern wchar_t *wcsdup (const wchar_t *__s) throw () __attribute__ ((__malloc__));




extern "C++" wchar_t *wcschr (wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcschr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcschr (const wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcschr") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsrchr (wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcsrchr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcsrchr (const wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcsrchr") __attribute__ ((__pure__));
# 181 "/usr/include/wchar.h" 3 4
extern wchar_t *wcschrnul (const wchar_t *__s, wchar_t __wc)
     throw () __attribute__ ((__pure__));




extern size_t wcscspn (const wchar_t *__wcs, const wchar_t *__reject)
     throw () __attribute__ ((__pure__));


extern size_t wcsspn (const wchar_t *__wcs, const wchar_t *__accept)
     throw () __attribute__ ((__pure__));


extern "C++" wchar_t *wcspbrk (wchar_t *__wcs, const wchar_t *__accept)
     throw () __asm ("wcspbrk") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcspbrk (const wchar_t *__wcs,
         const wchar_t *__accept)
     throw () __asm ("wcspbrk") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsstr (wchar_t *__haystack, const wchar_t *__needle)
     throw () __asm ("wcsstr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcsstr (const wchar_t *__haystack,
        const wchar_t *__needle)
     throw () __asm ("wcsstr") __attribute__ ((__pure__));






extern wchar_t *wcstok (wchar_t *__restrict __s,
   const wchar_t *__restrict __delim,
   wchar_t **__restrict __ptr) throw ();


extern size_t wcslen (const wchar_t *__s) throw () __attribute__ ((__pure__));




extern "C++" wchar_t *wcswcs (wchar_t *__haystack, const wchar_t *__needle)
     throw () __asm ("wcswcs") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcswcs (const wchar_t *__haystack,
        const wchar_t *__needle)
     throw () __asm ("wcswcs") __attribute__ ((__pure__));
# 240 "/usr/include/wchar.h" 3 4
extern size_t wcsnlen (const wchar_t *__s, size_t __maxlen)
     throw () __attribute__ ((__pure__));





extern "C++" wchar_t *wmemchr (wchar_t *__s, wchar_t __c, size_t __n)
     throw () __asm ("wmemchr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wmemchr (const wchar_t *__s, wchar_t __c,
         size_t __n)
     throw () __asm ("wmemchr") __attribute__ ((__pure__));






extern int wmemcmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__));


extern wchar_t *wmemcpy (wchar_t *__restrict __s1,
    const wchar_t *__restrict __s2, size_t __n) throw ();



extern wchar_t *wmemmove (wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw ();


extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) throw ();




extern wchar_t *wmempcpy (wchar_t *__restrict __s1,
     const wchar_t *__restrict __s2, size_t __n)
     throw ();





extern wint_t btowc (int __c) throw ();



extern int wctob (wint_t __c) throw ();



extern int mbsinit (const mbstate_t *__ps) throw () __attribute__ ((__pure__));



extern size_t mbrtowc (wchar_t *__restrict __pwc,
         const char *__restrict __s, size_t __n,
         mbstate_t *__restrict __p) throw ();


extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,
         mbstate_t *__restrict __ps) throw ();


extern size_t __mbrlen (const char *__restrict __s, size_t __n,
   mbstate_t *__restrict __ps) throw ();
extern size_t mbrlen (const char *__restrict __s, size_t __n,
        mbstate_t *__restrict __ps) throw ();







extern wint_t __btowc_alias (int __c) __asm ("btowc");
extern __inline __attribute__ ((__gnu_inline__)) wint_t
__attribute__ ((__leaf__)) btowc (int __c) throw ()
{ return (__builtin_constant_p (__c) && __c >= '\0' && __c <= '\x7f'
   ? (wint_t) __c : __btowc_alias (__c)); }

extern int __wctob_alias (wint_t __c) __asm ("wctob");
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) wctob (wint_t __wc) throw ()
{ return (__builtin_constant_p (__wc) && __wc >= L'\0' && __wc <= L'\x7f'
   ? (int) __wc : __wctob_alias (__wc)); }

extern __inline __attribute__ ((__gnu_inline__)) size_t
__attribute__ ((__leaf__)) mbrlen (const char *__restrict __s, size_t __n, mbstate_t *__restrict __ps) throw ()

{ return (__ps != __null
   ? mbrtowc (__null, __s, __n, __ps) : __mbrlen (__s, __n, __null)); }




extern size_t mbsrtowcs (wchar_t *__restrict __dst,
    const char **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();



extern size_t wcsrtombs (char *__restrict __dst,
    const wchar_t **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();





extern size_t mbsnrtowcs (wchar_t *__restrict __dst,
     const char **__restrict __src, size_t __nmc,
     size_t __len, mbstate_t *__restrict __ps) throw ();



extern size_t wcsnrtombs (char *__restrict __dst,
     const wchar_t **__restrict __src,
     size_t __nwc, size_t __len,
     mbstate_t *__restrict __ps) throw ();






extern int wcwidth (wchar_t __c) throw ();



extern int wcswidth (const wchar_t *__s, size_t __n) throw ();





extern double wcstod (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr) throw ();



extern float wcstof (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
extern long double wcstold (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
# 396 "/usr/include/wchar.h" 3 4
extern _Float32 wcstof32 (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr) throw ();



extern _Float64 wcstof64 (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr) throw ();



extern _Float128 wcstof128 (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();



extern _Float32x wcstof32x (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();



extern _Float64x wcstof64x (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
# 428 "/usr/include/wchar.h" 3 4
extern long int wcstol (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, int __base) throw ();



extern unsigned long int wcstoul (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();




__extension__
extern long long int wcstoll (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstoull (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr,
     int __base) throw ();





__extension__
extern long long int wcstoq (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstouq (const wchar_t *__restrict __nptr,
           wchar_t **__restrict __endptr,
           int __base) throw ();






extern long int wcstol_l (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr, int __base,
     locale_t __loc) throw ();

extern unsigned long int wcstoul_l (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr,
        int __base, locale_t __loc) throw ();

__extension__
extern long long int wcstoll_l (const wchar_t *__restrict __nptr,
    wchar_t **__restrict __endptr,
    int __base, locale_t __loc) throw ();

__extension__
extern unsigned long long int wcstoull_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, locale_t __loc)
     throw ();

extern double wcstod_l (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, locale_t __loc)
     throw ();

extern float wcstof_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, locale_t __loc)
     throw ();

extern long double wcstold_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();
# 511 "/usr/include/wchar.h" 3 4
extern _Float32 wcstof32_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       locale_t __loc) throw ();



extern _Float64 wcstof64_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       locale_t __loc) throw ();



extern _Float128 wcstof128_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();



extern _Float32x wcstof32x_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();



extern _Float64x wcstof64x_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();
# 551 "/usr/include/wchar.h" 3 4
extern wchar_t *wcpcpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src) throw ();



extern wchar_t *wcpncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw ();
# 567 "/usr/include/wchar.h" 3 4
extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) throw ();





extern int fwide (__FILE *__fp, int __mode) throw ();






extern int fwprintf (__FILE *__restrict __stream,
       const wchar_t *__restrict __format, ...)
                                                           ;




extern int wprintf (const wchar_t *__restrict __format, ...)
                                                           ;

extern int swprintf (wchar_t *__restrict __s, size_t __n,
       const wchar_t *__restrict __format, ...)
     throw () ;





extern int vfwprintf (__FILE *__restrict __s,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
                                                           ;




extern int vwprintf (const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                           ;


extern int vswprintf (wchar_t *__restrict __s, size_t __n,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
     throw () ;






extern int fwscanf (__FILE *__restrict __stream,
      const wchar_t *__restrict __format, ...)
                                                          ;




extern int wscanf (const wchar_t *__restrict __format, ...)
                                                          ;

extern int swscanf (const wchar_t *__restrict __s,
      const wchar_t *__restrict __format, ...)
     throw () ;
# 673 "/usr/include/wchar.h" 3 4
extern int vfwscanf (__FILE *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                          ;




extern int vwscanf (const wchar_t *__restrict __format,
      __gnuc_va_list __arg)
                                                          ;

extern int vswscanf (const wchar_t *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
     throw () ;
# 727 "/usr/include/wchar.h" 3 4
extern wint_t fgetwc (__FILE *__stream);
extern wint_t getwc (__FILE *__stream);





extern wint_t getwchar (void);






extern wint_t fputwc (wchar_t __wc, __FILE *__stream);
extern wint_t putwc (wchar_t __wc, __FILE *__stream);





extern wint_t putwchar (wchar_t __wc);







extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,
   __FILE *__restrict __stream);





extern int fputws (const wchar_t *__restrict __ws,
     __FILE *__restrict __stream);






extern wint_t ungetwc (wint_t __wc, __FILE *__stream);
# 782 "/usr/include/wchar.h" 3 4
extern wint_t getwc_unlocked (__FILE *__stream);
extern wint_t getwchar_unlocked (void);







extern wint_t fgetwc_unlocked (__FILE *__stream);







extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);
# 808 "/usr/include/wchar.h" 3 4
extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);
extern wint_t putwchar_unlocked (wchar_t __wc);
# 818 "/usr/include/wchar.h" 3 4
extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,
     __FILE *__restrict __stream);







extern int fputws_unlocked (const wchar_t *__restrict __ws,
       __FILE *__restrict __stream);






extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,
   const wchar_t *__restrict __format,
   const struct tm *__restrict __tp) throw ();




extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,
     const wchar_t *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) throw ();




# 1 "/usr/include/x86_64-linux-gnu/bits/wchar2.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/wchar2.h" 3 4
extern wchar_t *__wmemcpy_chk (wchar_t *__restrict __s1,
          const wchar_t *__restrict __s2, size_t __n,
          size_t __ns1) throw ();
extern wchar_t *__wmemcpy_alias (wchar_t *__restrict __s1, const wchar_t *__restrict __s2, size_t __n) throw () __asm__ ("" "wmemcpy")


            ;
extern wchar_t *__wmemcpy_chk_warn (wchar_t *__restrict __s1, const wchar_t *__restrict __s2, size_t __n, size_t __ns1) throw () __asm__ ("" "__wmemcpy_chk")



     __attribute__((__warning__ ("wmemcpy called with length bigger than size of destination " "buffer")))
            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__leaf__)) wmemcpy (wchar_t *__restrict __s1, const wchar_t *__restrict __s2, size_t __n) throw ()

{
  if (__builtin_object_size (__s1, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n))
 return __wmemcpy_chk (__s1, __s2, __n,
         __builtin_object_size (__s1, 0) / sizeof (wchar_t));

      if (__n > __builtin_object_size (__s1, 0) / sizeof (wchar_t))
 return __wmemcpy_chk_warn (__s1, __s2, __n,
       __builtin_object_size (__s1, 0) / sizeof (wchar_t));
    }
  return __wmemcpy_alias (__s1, __s2, __n);
}


extern wchar_t *__wmemmove_chk (wchar_t *__s1, const wchar_t *__s2,
    size_t __n, size_t __ns1) throw ();
extern wchar_t *__wmemmove_alias (wchar_t *__s1, const wchar_t *__s2, size_t __n) throw () __asm__ ("" "wmemmove")

                               ;
extern wchar_t *__wmemmove_chk_warn (wchar_t *__s1, const wchar_t *__s2, size_t __n, size_t __ns1) throw () __asm__ ("" "__wmemmove_chk")


     __attribute__((__warning__ ("wmemmove called with length bigger than size of destination " "buffer")))
            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__leaf__)) wmemmove (wchar_t *__s1, const wchar_t *__s2, size_t __n) throw ()
{
  if (__builtin_object_size (__s1, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n))
 return __wmemmove_chk (__s1, __s2, __n,
          __builtin_object_size (__s1, 0) / sizeof (wchar_t));

      if (__n > __builtin_object_size (__s1, 0) / sizeof (wchar_t))
 return __wmemmove_chk_warn (__s1, __s2, __n,
        __builtin_object_size (__s1, 0) / sizeof (wchar_t));
    }
  return __wmemmove_alias (__s1, __s2, __n);
}



extern wchar_t *__wmempcpy_chk (wchar_t *__restrict __s1,
    const wchar_t *__restrict __s2, size_t __n,
    size_t __ns1) throw ();
extern wchar_t *__wmempcpy_alias (wchar_t *__restrict __s1, const wchar_t *__restrict __s2, size_t __n) throw () __asm__ ("" "wmempcpy")


                           ;
extern wchar_t *__wmempcpy_chk_warn (wchar_t *__restrict __s1, const wchar_t *__restrict __s2, size_t __n, size_t __ns1) throw () __asm__ ("" "__wmempcpy_chk")



     __attribute__((__warning__ ("wmempcpy called with length bigger than size of destination " "buffer")))
            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__leaf__)) wmempcpy (wchar_t *__restrict __s1, const wchar_t *__restrict __s2, size_t __n) throw ()

{
  if (__builtin_object_size (__s1, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n))
 return __wmempcpy_chk (__s1, __s2, __n,
          __builtin_object_size (__s1, 0) / sizeof (wchar_t));

      if (__n > __builtin_object_size (__s1, 0) / sizeof (wchar_t))
 return __wmempcpy_chk_warn (__s1, __s2, __n,
        __builtin_object_size (__s1, 0) / sizeof (wchar_t));
    }
  return __wmempcpy_alias (__s1, __s2, __n);
}



extern wchar_t *__wmemset_chk (wchar_t *__s, wchar_t __c, size_t __n,
          size_t __ns) throw ();
extern wchar_t *__wmemset_alias (wchar_t *__s, wchar_t __c, size_t __n) throw () __asm__ ("" "wmemset")
                             ;
extern wchar_t *__wmemset_chk_warn (wchar_t *__s, wchar_t __c, size_t __n, size_t __ns) throw () __asm__ ("" "__wmemset_chk")


     __attribute__((__warning__ ("wmemset called with length bigger than size of destination " "buffer")))
            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__leaf__)) wmemset (wchar_t *__s, wchar_t __c, size_t __n) throw ()
{
  if (__builtin_object_size (__s, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n))
 return __wmemset_chk (__s, __c, __n, __builtin_object_size (__s, 0) / sizeof (wchar_t));

      if (__n > __builtin_object_size (__s, 0) / sizeof (wchar_t))
 return __wmemset_chk_warn (__s, __c, __n,
       __builtin_object_size (__s, 0) / sizeof (wchar_t));
    }
  return __wmemset_alias (__s, __c, __n);
}


extern wchar_t *__wcscpy_chk (wchar_t *__restrict __dest,
         const wchar_t *__restrict __src,
         size_t __n) throw ();
extern wchar_t *__wcscpy_alias (wchar_t *__restrict __dest, const wchar_t *__restrict __src) throw () __asm__ ("" "wcscpy")

                                              ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__leaf__)) wcscpy (wchar_t *__restrict __dest, const wchar_t *__restrict __src) throw ()
{
  if (__builtin_object_size (__dest, 2 > 1) != (size_t) -1)
    return __wcscpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1) / sizeof (wchar_t));
  return __wcscpy_alias (__dest, __src);
}


extern wchar_t *__wcpcpy_chk (wchar_t *__restrict __dest,
         const wchar_t *__restrict __src,
         size_t __destlen) throw ();
extern wchar_t *__wcpcpy_alias (wchar_t *__restrict __dest, const wchar_t *__restrict __src) throw () __asm__ ("" "wcpcpy")

                                              ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__leaf__)) wcpcpy (wchar_t *__restrict __dest, const wchar_t *__restrict __src) throw ()
{
  if (__builtin_object_size (__dest, 2 > 1) != (size_t) -1)
    return __wcpcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1) / sizeof (wchar_t));
  return __wcpcpy_alias (__dest, __src);
}


extern wchar_t *__wcsncpy_chk (wchar_t *__restrict __dest,
          const wchar_t *__restrict __src, size_t __n,
          size_t __destlen) throw ();
extern wchar_t *__wcsncpy_alias (wchar_t *__restrict __dest, const wchar_t *__restrict __src, size_t __n) throw () __asm__ ("" "wcsncpy")


                          ;
extern wchar_t *__wcsncpy_chk_warn (wchar_t *__restrict __dest, const wchar_t *__restrict __src, size_t __n, size_t __destlen) throw () __asm__ ("" "__wcsncpy_chk")



     __attribute__((__warning__ ("wcsncpy called with length bigger than size of destination " "buffer")))
            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__leaf__)) wcsncpy (wchar_t *__restrict __dest, const wchar_t *__restrict __src, size_t __n) throw ()

{
  if (__builtin_object_size (__dest, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n))
 return __wcsncpy_chk (__dest, __src, __n,
         __builtin_object_size (__dest, 2 > 1) / sizeof (wchar_t));
      if (__n > __builtin_object_size (__dest, 2 > 1) / sizeof (wchar_t))
 return __wcsncpy_chk_warn (__dest, __src, __n,
       __builtin_object_size (__dest, 2 > 1) / sizeof (wchar_t));
    }
  return __wcsncpy_alias (__dest, __src, __n);
}


extern wchar_t *__wcpncpy_chk (wchar_t *__restrict __dest,
          const wchar_t *__restrict __src, size_t __n,
          size_t __destlen) throw ();
extern wchar_t *__wcpncpy_alias (wchar_t *__restrict __dest, const wchar_t *__restrict __src, size_t __n) throw () __asm__ ("" "wcpncpy")


                          ;
extern wchar_t *__wcpncpy_chk_warn (wchar_t *__restrict __dest, const wchar_t *__restrict __src, size_t __n, size_t __destlen) throw () __asm__ ("" "__wcpncpy_chk")



     __attribute__((__warning__ ("wcpncpy called with length bigger than size of destination " "buffer")))
            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__leaf__)) wcpncpy (wchar_t *__restrict __dest, const wchar_t *__restrict __src, size_t __n) throw ()

{
  if (__builtin_object_size (__dest, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n))
 return __wcpncpy_chk (__dest, __src, __n,
         __builtin_object_size (__dest, 2 > 1) / sizeof (wchar_t));
      if (__n > __builtin_object_size (__dest, 2 > 1) / sizeof (wchar_t))
 return __wcpncpy_chk_warn (__dest, __src, __n,
       __builtin_object_size (__dest, 2 > 1) / sizeof (wchar_t));
    }
  return __wcpncpy_alias (__dest, __src, __n);
}


extern wchar_t *__wcscat_chk (wchar_t *__restrict __dest,
         const wchar_t *__restrict __src,
         size_t __destlen) throw ();
extern wchar_t *__wcscat_alias (wchar_t *__restrict __dest, const wchar_t *__restrict __src) throw () __asm__ ("" "wcscat")

                                              ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__leaf__)) wcscat (wchar_t *__restrict __dest, const wchar_t *__restrict __src) throw ()
{
  if (__builtin_object_size (__dest, 2 > 1) != (size_t) -1)
    return __wcscat_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1) / sizeof (wchar_t));
  return __wcscat_alias (__dest, __src);
}


extern wchar_t *__wcsncat_chk (wchar_t *__restrict __dest,
          const wchar_t *__restrict __src,
          size_t __n, size_t __destlen) throw ();
extern wchar_t *__wcsncat_alias (wchar_t *__restrict __dest, const wchar_t *__restrict __src, size_t __n) throw () __asm__ ("" "wcsncat")


                          ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__leaf__)) wcsncat (wchar_t *__restrict __dest, const wchar_t *__restrict __src, size_t __n) throw ()

{
  if (__builtin_object_size (__dest, 2 > 1) != (size_t) -1)
    return __wcsncat_chk (__dest, __src, __n,
     __builtin_object_size (__dest, 2 > 1) / sizeof (wchar_t));
  return __wcsncat_alias (__dest, __src, __n);
}


extern int __swprintf_chk (wchar_t *__restrict __s, size_t __n,
      int __flag, size_t __s_len,
      const wchar_t *__restrict __format, ...)
     throw () ;

extern int __swprintf_alias (wchar_t *__restrict __s, size_t __n, const wchar_t *__restrict __fmt, ...) throw () __asm__ ("" "swprintf")


             ;


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) swprintf (wchar_t *__restrict __s, size_t __n, const wchar_t *__restrict __fmt, ...) throw ()

{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1 || 2 > 1)
    return __swprintf_chk (__s, __n, 2 - 1,
      __builtin_object_size (__s, 2 > 1) / sizeof (wchar_t),
      __fmt, __builtin_va_arg_pack ());
  return __swprintf_alias (__s, __n, __fmt, __builtin_va_arg_pack ());
}
# 303 "/usr/include/x86_64-linux-gnu/bits/wchar2.h" 3 4
extern int __vswprintf_chk (wchar_t *__restrict __s, size_t __n,
       int __flag, size_t __s_len,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
     throw () ;

extern int __vswprintf_alias (wchar_t *__restrict __s, size_t __n, const wchar_t *__restrict __fmt, __gnuc_va_list __ap) throw () __asm__ ("" "vswprintf")


                                     ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) vswprintf (wchar_t *__restrict __s, size_t __n, const wchar_t *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1 || 2 > 1)
    return __vswprintf_chk (__s, __n, 2 - 1,
       __builtin_object_size (__s, 2 > 1) / sizeof (wchar_t), __fmt, __ap);
  return __vswprintf_alias (__s, __n, __fmt, __ap);
}




extern int __fwprintf_chk (__FILE *__restrict __stream, int __flag,
      const wchar_t *__restrict __format, ...);
extern int __wprintf_chk (int __flag, const wchar_t *__restrict __format,
     ...);
extern int __vfwprintf_chk (__FILE *__restrict __stream, int __flag,
       const wchar_t *__restrict __format,
       __gnuc_va_list __ap);
extern int __vwprintf_chk (int __flag, const wchar_t *__restrict __format,
      __gnuc_va_list __ap);


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
wprintf (const wchar_t *__restrict __fmt, ...)
{
  return __wprintf_chk (2 - 1, __fmt, __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
fwprintf (__FILE *__restrict __stream, const wchar_t *__restrict __fmt, ...)
{
  return __fwprintf_chk (__stream, 2 - 1, __fmt,
    __builtin_va_arg_pack ());
}







extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vwprintf (const wchar_t *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vwprintf_chk (2 - 1, __fmt, __ap);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vfwprintf (__FILE *__restrict __stream,
    const wchar_t *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vfwprintf_chk (__stream, 2 - 1, __fmt, __ap);
}



extern wchar_t *__fgetws_chk (wchar_t *__restrict __s, size_t __size, int __n,
         __FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern wchar_t *__fgetws_alias (wchar_t *__restrict __s, int __n, __FILE *__restrict __stream) __asm__ ("" "fgetws")

                                              __attribute__ ((__warn_unused_result__));
extern wchar_t *__fgetws_chk_warn (wchar_t *__restrict __s, size_t __size, int __n, __FILE *__restrict __stream) __asm__ ("" "__fgetws_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgetws called with bigger size than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) wchar_t *
fgetws (wchar_t *__restrict __s, int __n, __FILE *__restrict __stream)
{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n) || __n <= 0)
 return __fgetws_chk (__s, __builtin_object_size (__s, 2 > 1) / sizeof (wchar_t),
        __n, __stream);

      if ((size_t) __n > __builtin_object_size (__s, 2 > 1) / sizeof (wchar_t))
 return __fgetws_chk_warn (__s, __builtin_object_size (__s, 2 > 1) / sizeof (wchar_t),
      __n, __stream);
    }
  return __fgetws_alias (__s, __n, __stream);
}


extern wchar_t *__fgetws_unlocked_chk (wchar_t *__restrict __s, size_t __size,
           int __n, __FILE *__restrict __stream)
  __attribute__ ((__warn_unused_result__));
extern wchar_t *__fgetws_unlocked_alias (wchar_t *__restrict __s, int __n, __FILE *__restrict __stream) __asm__ ("" "fgetws_unlocked")


  __attribute__ ((__warn_unused_result__));
extern wchar_t *__fgetws_unlocked_chk_warn (wchar_t *__restrict __s, size_t __size, int __n, __FILE *__restrict __stream) __asm__ ("" "__fgetws_unlocked_chk")



     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgetws_unlocked called with bigger size than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) wchar_t *
fgetws_unlocked (wchar_t *__restrict __s, int __n, __FILE *__restrict __stream)
{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n) || __n <= 0)
 return __fgetws_unlocked_chk (__s, __builtin_object_size (__s, 2 > 1) / sizeof (wchar_t),
          __n, __stream);

      if ((size_t) __n > __builtin_object_size (__s, 2 > 1) / sizeof (wchar_t))
 return __fgetws_unlocked_chk_warn (__s, __builtin_object_size (__s, 2 > 1) / sizeof (wchar_t),
        __n, __stream);
    }
  return __fgetws_unlocked_alias (__s, __n, __stream);
}



extern size_t __wcrtomb_chk (char *__restrict __s, wchar_t __wchar,
        mbstate_t *__restrict __p,
        size_t __buflen) throw () __attribute__ ((__warn_unused_result__));
extern size_t __wcrtomb_alias (char *__restrict __s, wchar_t __wchar, mbstate_t *__restrict __ps) throw () __asm__ ("" "wcrtomb")

                                                __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
__attribute__ ((__leaf__)) wcrtomb (char *__restrict __s, wchar_t __wchar, mbstate_t *__restrict __ps) throw ()

{







  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1 && 16 > __builtin_object_size (__s, 2 > 1))
    return __wcrtomb_chk (__s, __wchar, __ps, __builtin_object_size (__s, 2 > 1));
  return __wcrtomb_alias (__s, __wchar, __ps);
}


extern size_t __mbsrtowcs_chk (wchar_t *__restrict __dst,
          const char **__restrict __src,
          size_t __len, mbstate_t *__restrict __ps,
          size_t __dstlen) throw ();
extern size_t __mbsrtowcs_alias (wchar_t *__restrict __dst, const char **__restrict __src, size_t __len, mbstate_t *__restrict __ps) throw () __asm__ ("" "mbsrtowcs")



                   ;
extern size_t __mbsrtowcs_chk_warn (wchar_t *__restrict __dst, const char **__restrict __src, size_t __len, mbstate_t *__restrict __ps, size_t __dstlen) throw () __asm__ ("" "__mbsrtowcs_chk")




     __attribute__((__warning__ ("mbsrtowcs called with dst buffer smaller than len " "* sizeof (wchar_t)")))
                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) mbsrtowcs (wchar_t *__restrict __dst, const char **__restrict __src, size_t __len, mbstate_t *__restrict __ps) throw ()

{
  if (__builtin_object_size (__dst, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __mbsrtowcs_chk (__dst, __src, __len, __ps,
    __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t));

      if (__len > __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t))
 return __mbsrtowcs_chk_warn (__dst, __src, __len, __ps,
         __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t));
    }
  return __mbsrtowcs_alias (__dst, __src, __len, __ps);
}


extern size_t __wcsrtombs_chk (char *__restrict __dst,
          const wchar_t **__restrict __src,
          size_t __len, mbstate_t *__restrict __ps,
          size_t __dstlen) throw ();
extern size_t __wcsrtombs_alias (char *__restrict __dst, const wchar_t **__restrict __src, size_t __len, mbstate_t *__restrict __ps) throw () __asm__ ("" "wcsrtombs")



                   ;
extern size_t __wcsrtombs_chk_warn (char *__restrict __dst, const wchar_t **__restrict __src, size_t __len, mbstate_t *__restrict __ps, size_t __dstlen) throw () __asm__ ("" "__wcsrtombs_chk")




    __attribute__((__warning__ ("wcsrtombs called with dst buffer smaller than len")));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) wcsrtombs (char *__restrict __dst, const wchar_t **__restrict __src, size_t __len, mbstate_t *__restrict __ps) throw ()

{
  if (__builtin_object_size (__dst, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __wcsrtombs_chk (__dst, __src, __len, __ps, __builtin_object_size (__dst, 2 > 1));

      if (__len > __builtin_object_size (__dst, 2 > 1))
 return __wcsrtombs_chk_warn (__dst, __src, __len, __ps, __builtin_object_size (__dst, 2 > 1));
    }
  return __wcsrtombs_alias (__dst, __src, __len, __ps);
}



extern size_t __mbsnrtowcs_chk (wchar_t *__restrict __dst,
    const char **__restrict __src, size_t __nmc,
    size_t __len, mbstate_t *__restrict __ps,
    size_t __dstlen) throw ();
extern size_t __mbsnrtowcs_alias (wchar_t *__restrict __dst, const char **__restrict __src, size_t __nmc, size_t __len, mbstate_t *__restrict __ps) throw () __asm__ ("" "mbsnrtowcs")



                    ;
extern size_t __mbsnrtowcs_chk_warn (wchar_t *__restrict __dst, const char **__restrict __src, size_t __nmc, size_t __len, mbstate_t *__restrict __ps, size_t __dstlen) throw () __asm__ ("" "__mbsnrtowcs_chk")




     __attribute__((__warning__ ("mbsnrtowcs called with dst buffer smaller than len " "* sizeof (wchar_t)")))
                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) mbsnrtowcs (wchar_t *__restrict __dst, const char **__restrict __src, size_t __nmc, size_t __len, mbstate_t *__restrict __ps) throw ()

{
  if (__builtin_object_size (__dst, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __mbsnrtowcs_chk (__dst, __src, __nmc, __len, __ps,
     __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t));

      if (__len > __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t))
 return __mbsnrtowcs_chk_warn (__dst, __src, __nmc, __len, __ps,
          __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t));
    }
  return __mbsnrtowcs_alias (__dst, __src, __nmc, __len, __ps);
}


extern size_t __wcsnrtombs_chk (char *__restrict __dst,
    const wchar_t **__restrict __src,
    size_t __nwc, size_t __len,
    mbstate_t *__restrict __ps, size_t __dstlen)
     throw ();
extern size_t __wcsnrtombs_alias (char *__restrict __dst, const wchar_t **__restrict __src, size_t __nwc, size_t __len, mbstate_t *__restrict __ps) throw () __asm__ ("" "wcsnrtombs")



                                                  ;
extern size_t __wcsnrtombs_chk_warn (char *__restrict __dst, const wchar_t **__restrict __src, size_t __nwc, size_t __len, mbstate_t *__restrict __ps, size_t __dstlen) throw () __asm__ ("" "__wcsnrtombs_chk")





     __attribute__((__warning__ ("wcsnrtombs called with dst buffer smaller than len")));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) wcsnrtombs (char *__restrict __dst, const wchar_t **__restrict __src, size_t __nwc, size_t __len, mbstate_t *__restrict __ps) throw ()

{
  if (__builtin_object_size (__dst, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __wcsnrtombs_chk (__dst, __src, __nwc, __len, __ps,
     __builtin_object_size (__dst, 2 > 1));

      if (__len > __builtin_object_size (__dst, 2 > 1))
 return __wcsnrtombs_chk_warn (__dst, __src, __nwc, __len, __ps,
          __builtin_object_size (__dst, 2 > 1));
    }
  return __wcsnrtombs_alias (__dst, __src, __nwc, __len, __ps);
}
# 851 "/usr/include/wchar.h" 2 3 4






}
# 45 "/usr/include/c++/7/cwchar" 2 3
# 62 "/usr/include/c++/7/cwchar" 3
namespace std
{
  using ::mbstate_t;
}
# 135 "/usr/include/c++/7/cwchar" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;

  using ::swprintf;

  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;


  using ::vswprintf;


  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
  using ::wcschr;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsstr;
  using ::wmemchr;
# 232 "/usr/include/c++/7/cwchar" 3

}







namespace __gnu_cxx
{





  using ::wcstold;
# 257 "/usr/include/c++/7/cwchar" 3
  using ::wcstoll;
  using ::wcstoull;

}

namespace std
{
  using ::__gnu_cxx::wcstold;
  using ::__gnu_cxx::wcstoll;
  using ::__gnu_cxx::wcstoull;
}
# 277 "/usr/include/c++/7/cwchar" 3
namespace std
{

  using std::wcstof;


  using std::vfwscanf;


  using std::vswscanf;


  using std::vwscanf;



  using std::wcstold;
  using std::wcstoll;
  using std::wcstoull;

}
# 41 "/usr/include/c++/7/bits/postypes.h" 2 3
# 68 "/usr/include/c++/7/bits/postypes.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 88 "/usr/include/c++/7/bits/postypes.h" 3
  typedef long streamoff;
# 98 "/usr/include/c++/7/bits/postypes.h" 3
  typedef ptrdiff_t streamsize;
# 111 "/usr/include/c++/7/bits/postypes.h" 3
  template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:




      fpos()
      : _M_off(0), _M_state() { }
# 133 "/usr/include/c++/7/bits/postypes.h" 3
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }


      operator streamoff() const { return _M_off; }


      void
      state(_StateT __st)
      { _M_state = __st; }


      _StateT
      state() const
      { return _M_state; }





      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }





      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }







      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }







      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };






  template<typename _StateT>
    inline bool
    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) == streamoff(__rhs); }

  template<typename _StateT>
    inline bool
    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) != streamoff(__rhs); }





  typedef fpos<mbstate_t> streampos;

  typedef fpos<mbstate_t> wstreampos;



  typedef fpos<mbstate_t> u16streampos;

  typedef fpos<mbstate_t> u32streampos;



}
# 41 "/usr/include/c++/7/bits/char_traits.h" 2 3
# 1 "/usr/include/c++/7/cwchar" 1 3
# 39 "/usr/include/c++/7/cwchar" 3
       
# 40 "/usr/include/c++/7/cwchar" 3
# 42 "/usr/include/c++/7/bits/char_traits.h" 2 3





namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 61 "/usr/include/c++/7/bits/char_traits.h" 3
  template<typename _CharT>
    struct _Char_types
    {
      typedef unsigned long int_type;
      typedef std::streampos pos_type;
      typedef std::streamoff off_type;
      typedef std::mbstate_t state_type;
    };
# 86 "/usr/include/c++/7/bits/char_traits.h" 3
  template<typename _CharT>
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types<_CharT>::int_type int_type;
      typedef typename _Char_types<_CharT>::pos_type pos_type;
      typedef typename _Char_types<_CharT>::off_type off_type;
      typedef typename _Char_types<_CharT>::state_type state_type;

      static constexpr void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static constexpr int
      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);

      static constexpr std::size_t
      length(const char_type* __s);

      static constexpr const char_type*
      find(const char_type* __s, std::size_t __n, const char_type& __a);

      static char_type*
      move(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      copy(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      assign(char_type* __s, std::size_t __n, char_type __a);

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
    };

  template<typename _CharT>
    constexpr int
    char_traits<_CharT>::
    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
 if (lt(__s1[__i], __s2[__i]))
   return -1;
 else if (lt(__s2[__i], __s1[__i]))
   return 1;
      return 0;
    }

  template<typename _CharT>
    constexpr std::size_t
    char_traits<_CharT>::
    length(const char_type* __p)
    {
      std::size_t __i = 0;
      while (!eq(__p[__i], char_type()))
        ++__i;
      return __i;
    }

  template<typename _CharT>
    constexpr const typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    find(const char_type* __s, std::size_t __n, const char_type& __a)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
        if (eq(__s[__i], __a))
          return __s + __i;
      return 0;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    move(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
          __n * sizeof(char_type)));
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    copy(char_type* __s1, const char_type* __s2, std::size_t __n)
    {

      std::copy(__s2, __s2 + __n, __s1);
      return __s1;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    assign(char_type* __s, std::size_t __n, char_type __a)
    {

      std::fill_n(__s, __n, __a);
      return __s;
    }


}

namespace std __attribute__ ((__visibility__ ("default")))
{

# 268 "/usr/include/c++/7/bits/char_traits.h" 3
  template<class _CharT>
    struct char_traits : public __gnu_cxx::char_traits<_CharT>
    { };



  template<>
    struct char_traits<char>
    {
      typedef char char_type;
      typedef int int_type;
      typedef streampos pos_type;
      typedef streamoff off_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      {

 return (static_cast<unsigned char>(__c1)
  < static_cast<unsigned char>(__c2));
      }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {






 if (__n == 0)
   return 0;
 return __builtin_memcmp(__s1, __s2, __n);
      }

      static size_t
      length(const char_type* __s)
      {




 return __builtin_strlen(__s);
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {






 if (__n == 0)
   return 0;
 return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 if (__n == 0)
   return __s;
 return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return static_cast<char_type>(__c); }



      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return (__c == eof()) ? 0 : __c; }
  };




  template<>
    struct char_traits<wchar_t>
    {
      typedef wchar_t char_type;
      typedef wint_t int_type;
      typedef streamoff off_type;
      typedef wstreampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {






 if (__n == 0)
   return 0;
 else
   return wmemcmp(__s1, __s2, __n);
      }

      static size_t
      length(const char_type* __s)
      {





   return wcslen(__s);
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {






 if (__n == 0)
   return 0;
 else
   return wmemchr(__s, __a, __n);
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return wmemmove(__s1, __s2, __n);
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return wmemcpy(__s1, __s2, __n);
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 if (__n == 0)
   return __s;
 return wmemset(__s, __a, __n);
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>((0xffffffffu)); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
  };



}




# 1 "/usr/include/c++/7/cstdint" 1 3
# 32 "/usr/include/c++/7/cstdint" 3
       
# 33 "/usr/include/c++/7/cstdint" 3
# 46 "/usr/include/c++/7/cstdint" 3
namespace std
{
  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;
}
# 502 "/usr/include/c++/7/bits/char_traits.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<>
    struct char_traits<char16_t>
    {
      typedef char16_t char_type;
      typedef uint_least16_t int_type;
      typedef streamoff off_type;
      typedef u16streampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };

  template<>
    struct char_traits<char32_t>
    {
      typedef char32_t char_type;
      typedef uint_least32_t int_type;
      typedef streamoff off_type;
      typedef u32streampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };


}
# 41 "/usr/include/c++/7/string" 2 3


# 1 "/usr/include/c++/7/bits/localefwd.h" 1 3
# 37 "/usr/include/c++/7/bits/localefwd.h" 3
       
# 38 "/usr/include/c++/7/bits/localefwd.h" 3


# 1 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++locale.h" 1 3
# 39 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++locale.h" 3
       
# 40 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++locale.h" 3

# 1 "/usr/include/c++/7/clocale" 1 3
# 39 "/usr/include/c++/7/clocale" 3
       
# 40 "/usr/include/c++/7/clocale" 3


# 1 "/usr/include/locale.h" 1 3 4
# 28 "/usr/include/locale.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 29 "/usr/include/locale.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/locale.h" 1 3 4
# 30 "/usr/include/locale.h" 2 3 4

extern "C" {
# 51 "/usr/include/locale.h" 3 4
struct lconv
{


  char *decimal_point;
  char *thousands_sep;





  char *grouping;





  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;

  char p_cs_precedes;

  char p_sep_by_space;

  char n_cs_precedes;

  char n_sep_by_space;






  char p_sign_posn;
  char n_sign_posn;


  char int_p_cs_precedes;

  char int_p_sep_by_space;

  char int_n_cs_precedes;

  char int_n_sep_by_space;






  char int_p_sign_posn;
  char int_n_sign_posn;
# 118 "/usr/include/locale.h" 3 4
};



extern char *setlocale (int __category, const char *__locale) throw ();


extern struct lconv *localeconv (void) throw ();
# 141 "/usr/include/locale.h" 3 4
extern locale_t newlocale (int __category_mask, const char *__locale,
      locale_t __base) throw ();
# 176 "/usr/include/locale.h" 3 4
extern locale_t duplocale (locale_t __dataset) throw ();



extern void freelocale (locale_t __dataset) throw ();






extern locale_t uselocale (locale_t __dataset) throw ();







}
# 43 "/usr/include/c++/7/clocale" 2 3
# 51 "/usr/include/c++/7/clocale" 3
namespace std
{
  using ::lconv;
  using ::setlocale;
  using ::localeconv;
}
# 42 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++locale.h" 2 3






namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  extern "C" __typeof(uselocale) __uselocale;


}


namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef __locale_t __c_locale;





  inline int
  __convert_from_v(const __c_locale& __cloc __attribute__ ((__unused__)),
     char* __out,
     const int __size __attribute__ ((__unused__)),
     const char* __fmt, ...)
  {

    __c_locale __old = __gnu_cxx::__uselocale(__cloc);
# 88 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++locale.h" 3
    __builtin_va_list __args;
    __builtin_va_start(__args, __fmt);


    const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);




    __builtin_va_end(__args);


    __gnu_cxx::__uselocale(__old);







    return __ret;
  }


}
# 41 "/usr/include/c++/7/bits/localefwd.h" 2 3
# 1 "/usr/include/c++/7/iosfwd" 1 3
# 36 "/usr/include/c++/7/iosfwd" 3
       
# 37 "/usr/include/c++/7/iosfwd" 3





namespace std __attribute__ ((__visibility__ ("default")))
{

# 74 "/usr/include/c++/7/iosfwd" 3
  class ios_base;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

}

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;



  typedef basic_ios<char> ios;


  typedef basic_streambuf<char> streambuf;


  typedef basic_istream<char> istream;


  typedef basic_ostream<char> ostream;


  typedef basic_iostream<char> iostream;


  typedef basic_stringbuf<char> stringbuf;


  typedef basic_istringstream<char> istringstream;


  typedef basic_ostringstream<char> ostringstream;


  typedef basic_stringstream<char> stringstream;


  typedef basic_filebuf<char> filebuf;


  typedef basic_ifstream<char> ifstream;


  typedef basic_ofstream<char> ofstream;


  typedef basic_fstream<char> fstream;



  typedef basic_ios<wchar_t> wios;


  typedef basic_streambuf<wchar_t> wstreambuf;


  typedef basic_istream<wchar_t> wistream;


  typedef basic_ostream<wchar_t> wostream;


  typedef basic_iostream<wchar_t> wiostream;


  typedef basic_stringbuf<wchar_t> wstringbuf;


  typedef basic_istringstream<wchar_t> wistringstream;


  typedef basic_ostringstream<wchar_t> wostringstream;


  typedef basic_stringstream<wchar_t> wstringstream;


  typedef basic_filebuf<wchar_t> wfilebuf;


  typedef basic_ifstream<wchar_t> wifstream;


  typedef basic_ofstream<wchar_t> wofstream;


  typedef basic_fstream<wchar_t> wfstream;




}
# 42 "/usr/include/c++/7/bits/localefwd.h" 2 3
# 1 "/usr/include/c++/7/cctype" 1 3
# 39 "/usr/include/c++/7/cctype" 3
       
# 40 "/usr/include/c++/7/cctype" 3
# 62 "/usr/include/c++/7/cctype" 3
namespace std
{
  using ::isalnum;
  using ::isalpha;
  using ::iscntrl;
  using ::isdigit;
  using ::isgraph;
  using ::islower;
  using ::isprint;
  using ::ispunct;
  using ::isspace;
  using ::isupper;
  using ::isxdigit;
  using ::tolower;
  using ::toupper;
}







namespace std
{
  using ::isblank;
}
# 43 "/usr/include/c++/7/bits/localefwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 55 "/usr/include/c++/7/bits/localefwd.h" 3
  class locale;

  template<typename _Facet>
    bool
    has_facet(const locale&) throw();

  template<typename _Facet>
    const _Facet&
    use_facet(const locale&);


  template<typename _CharT>
    bool
    isspace(_CharT, const locale&);

  template<typename _CharT>
    bool
    isprint(_CharT, const locale&);

  template<typename _CharT>
    bool
    iscntrl(_CharT, const locale&);

  template<typename _CharT>
    bool
    isupper(_CharT, const locale&);

  template<typename _CharT>
    bool
    islower(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalpha(_CharT, const locale&);

  template<typename _CharT>
    bool
    isdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    ispunct(_CharT, const locale&);

  template<typename _CharT>
    bool
    isxdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalnum(_CharT, const locale&);

  template<typename _CharT>
    bool
    isgraph(_CharT, const locale&);


  template<typename _CharT>
    bool
    isblank(_CharT, const locale&);


  template<typename _CharT>
    _CharT
    toupper(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    tolower(_CharT, const locale&);


  class ctype_base;
  template<typename _CharT>
    class ctype;
  template<> class ctype<char>;

  template<> class ctype<wchar_t>;

  template<typename _CharT>
    class ctype_byname;


  class codecvt_base;
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt;
  template<> class codecvt<char, char, mbstate_t>;

  template<> class codecvt<wchar_t, char, mbstate_t>;

  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname;



  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class num_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class num_put;

namespace __cxx11 {
  template<typename _CharT> class numpunct;
  template<typename _CharT> class numpunct_byname;
}

namespace __cxx11 {

  template<typename _CharT>
    class collate;
  template<typename _CharT>
    class collate_byname;
}


  class time_base;
namespace __cxx11 {
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get_byname;
}
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put_byname;


  class money_base;
namespace __cxx11 {
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class money_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class money_put;
}
namespace __cxx11 {
  template<typename _CharT, bool _Intl = false>
    class moneypunct;
  template<typename _CharT, bool _Intl = false>
    class moneypunct_byname;
}


  class messages_base;
namespace __cxx11 {
  template<typename _CharT>
    class messages;
  template<typename _CharT>
    class messages_byname;
}


}
# 44 "/usr/include/c++/7/string" 2 3
# 1 "/usr/include/c++/7/bits/ostream_insert.h" 1 3
# 33 "/usr/include/c++/7/bits/ostream_insert.h" 3
       
# 34 "/usr/include/c++/7/bits/ostream_insert.h" 3


# 1 "/usr/include/c++/7/bits/cxxabi_forced.h" 1 3
# 34 "/usr/include/c++/7/bits/cxxabi_forced.h" 3
       
# 35 "/usr/include/c++/7/bits/cxxabi_forced.h" 3

#pragma GCC visibility push(default)


namespace __cxxabiv1
{







  class __forced_unwind
  {
    virtual ~__forced_unwind() throw();


    virtual void __pure_dummy() = 0;
  };
}


#pragma GCC visibility pop
# 37 "/usr/include/c++/7/bits/ostream_insert.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    inline void
    __ostream_write(basic_ostream<_CharT, _Traits>& __out,
      const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const streamsize __put = __out.rdbuf()->sputn(__s, __n);
      if (__put != __n)
 __out.setstate(__ios_base::badbit);
    }

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const _CharT __c = __out.fill();
      for (; __n > 0; --__n)
 {
   const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);
   if (_Traits::eq_int_type(__put, _Traits::eof()))
     {
       __out.setstate(__ios_base::badbit);
       break;
     }
 }
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,
       const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      typename __ostream_type::sentry __cerb(__out);
      if (__cerb)
 {
   try
     {
       const streamsize __w = __out.width();
       if (__w > __n)
  {
    const bool __left = ((__out.flags()
     & __ios_base::adjustfield)
           == __ios_base::left);
    if (!__left)
      __ostream_fill(__out, __w - __n);
    if (__out.good())
      __ostream_write(__out, __s, __n);
    if (__left && __out.good())
      __ostream_fill(__out, __w - __n);
  }
       else
  __ostream_write(__out, __s, __n);
       __out.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(__ios_base::badbit); }
 }
      return __out;
    }




  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);


  extern template wostream& __ostream_insert(wostream&, const wchar_t*,
          streamsize);




}
# 45 "/usr/include/c++/7/string" 2 3







# 1 "/usr/include/c++/7/bits/basic_string.h" 1 3
# 37 "/usr/include/c++/7/bits/basic_string.h" 3
       
# 38 "/usr/include/c++/7/bits/basic_string.h" 3

# 1 "/usr/include/c++/7/ext/atomicity.h" 1 3
# 32 "/usr/include/c++/7/ext/atomicity.h" 3
       
# 33 "/usr/include/c++/7/ext/atomicity.h" 3


# 1 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr.h" 1 3
# 30 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr.h" 3
#pragma GCC visibility push(default)
# 148 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr-default.h" 1 3
# 47 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr-default.h" 3
typedef pthread_t __gthread_t;
typedef pthread_key_t __gthread_key_t;
typedef pthread_once_t __gthread_once_t;
typedef pthread_mutex_t __gthread_mutex_t;
typedef pthread_mutex_t __gthread_recursive_mutex_t;
typedef pthread_cond_t __gthread_cond_t;
typedef struct timespec __gthread_time_t;
# 101 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr-default.h" 3
static __typeof(pthread_once) __gthrw_pthread_once __attribute__ ((__weakref__("pthread_once")));
static __typeof(pthread_getspecific) __gthrw_pthread_getspecific __attribute__ ((__weakref__("pthread_getspecific")));
static __typeof(pthread_setspecific) __gthrw_pthread_setspecific __attribute__ ((__weakref__("pthread_setspecific")));

static __typeof(pthread_create) __gthrw_pthread_create __attribute__ ((__weakref__("pthread_create")));
static __typeof(pthread_join) __gthrw_pthread_join __attribute__ ((__weakref__("pthread_join")));
static __typeof(pthread_equal) __gthrw_pthread_equal __attribute__ ((__weakref__("pthread_equal")));
static __typeof(pthread_self) __gthrw_pthread_self __attribute__ ((__weakref__("pthread_self")));
static __typeof(pthread_detach) __gthrw_pthread_detach __attribute__ ((__weakref__("pthread_detach")));

static __typeof(pthread_cancel) __gthrw_pthread_cancel __attribute__ ((__weakref__("pthread_cancel")));

static __typeof(sched_yield) __gthrw_sched_yield __attribute__ ((__weakref__("sched_yield")));

static __typeof(pthread_mutex_lock) __gthrw_pthread_mutex_lock __attribute__ ((__weakref__("pthread_mutex_lock")));
static __typeof(pthread_mutex_trylock) __gthrw_pthread_mutex_trylock __attribute__ ((__weakref__("pthread_mutex_trylock")));

static __typeof(pthread_mutex_timedlock) __gthrw_pthread_mutex_timedlock __attribute__ ((__weakref__("pthread_mutex_timedlock")));

static __typeof(pthread_mutex_unlock) __gthrw_pthread_mutex_unlock __attribute__ ((__weakref__("pthread_mutex_unlock")));
static __typeof(pthread_mutex_init) __gthrw_pthread_mutex_init __attribute__ ((__weakref__("pthread_mutex_init")));
static __typeof(pthread_mutex_destroy) __gthrw_pthread_mutex_destroy __attribute__ ((__weakref__("pthread_mutex_destroy")));

static __typeof(pthread_cond_init) __gthrw_pthread_cond_init __attribute__ ((__weakref__("pthread_cond_init")));
static __typeof(pthread_cond_broadcast) __gthrw_pthread_cond_broadcast __attribute__ ((__weakref__("pthread_cond_broadcast")));
static __typeof(pthread_cond_signal) __gthrw_pthread_cond_signal __attribute__ ((__weakref__("pthread_cond_signal")));
static __typeof(pthread_cond_wait) __gthrw_pthread_cond_wait __attribute__ ((__weakref__("pthread_cond_wait")));
static __typeof(pthread_cond_timedwait) __gthrw_pthread_cond_timedwait __attribute__ ((__weakref__("pthread_cond_timedwait")));
static __typeof(pthread_cond_destroy) __gthrw_pthread_cond_destroy __attribute__ ((__weakref__("pthread_cond_destroy")));

static __typeof(pthread_key_create) __gthrw_pthread_key_create __attribute__ ((__weakref__("pthread_key_create")));
static __typeof(pthread_key_delete) __gthrw_pthread_key_delete __attribute__ ((__weakref__("pthread_key_delete")));
static __typeof(pthread_mutexattr_init) __gthrw_pthread_mutexattr_init __attribute__ ((__weakref__("pthread_mutexattr_init")));
static __typeof(pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype __attribute__ ((__weakref__("pthread_mutexattr_settype")));
static __typeof(pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy __attribute__ ((__weakref__("pthread_mutexattr_destroy")));
# 236 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr-default.h" 3
static __typeof(pthread_key_create) __gthrw___pthread_key_create __attribute__ ((__weakref__("__pthread_key_create")));
# 246 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr-default.h" 3
static inline int
__gthread_active_p (void)
{
  static void *const __gthread_active_ptr
    = __extension__ (void *) &__gthrw___pthread_key_create;
  return __gthread_active_ptr != 0;
}
# 658 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr-default.h" 3
static inline int
__gthread_create (__gthread_t *__threadid, void *(*__func) (void*),
    void *__args)
{
  return __gthrw_pthread_create (__threadid, __null, __func, __args);
}

static inline int
__gthread_join (__gthread_t __threadid, void **__value_ptr)
{
  return __gthrw_pthread_join (__threadid, __value_ptr);
}

static inline int
__gthread_detach (__gthread_t __threadid)
{
  return __gthrw_pthread_detach (__threadid);
}

static inline int
__gthread_equal (__gthread_t __t1, __gthread_t __t2)
{
  return __gthrw_pthread_equal (__t1, __t2);
}

static inline __gthread_t
__gthread_self (void)
{
  return __gthrw_pthread_self ();
}

static inline int
__gthread_yield (void)
{
  return __gthrw_sched_yield ();
}

static inline int
__gthread_once (__gthread_once_t *__once, void (*__func) (void))
{
  if (__gthread_active_p ())
    return __gthrw_pthread_once (__once, __func);
  else
    return -1;
}

static inline int
__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))
{
  return __gthrw_pthread_key_create (__key, __dtor);
}

static inline int
__gthread_key_delete (__gthread_key_t __key)
{
  return __gthrw_pthread_key_delete (__key);
}

static inline void *
__gthread_getspecific (__gthread_key_t __key)
{
  return __gthrw_pthread_getspecific (__key);
}

static inline int
__gthread_setspecific (__gthread_key_t __key, const void *__ptr)
{
  return __gthrw_pthread_setspecific (__key, __ptr);
}

static inline void
__gthread_mutex_init_function (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    __gthrw_pthread_mutex_init (__mutex, __null);
}

static inline int
__gthread_mutex_destroy (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_destroy (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_lock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_trylock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_trylock (__mutex);
  else
    return 0;
}


static inline int
__gthread_mutex_timedlock (__gthread_mutex_t *__mutex,
      const __gthread_time_t *__abs_timeout)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_timedlock (__mutex, __abs_timeout);
  else
    return 0;
}


static inline int
__gthread_mutex_unlock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_unlock (__mutex);
  else
    return 0;
}
# 807 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr-default.h" 3
static inline int
__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_lock (__mutex);
}

static inline int
__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_trylock (__mutex);
}


static inline int
__gthread_recursive_mutex_timedlock (__gthread_recursive_mutex_t *__mutex,
         const __gthread_time_t *__abs_timeout)
{
  return __gthread_mutex_timedlock (__mutex, __abs_timeout);
}


static inline int
__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_unlock (__mutex);
}

static inline int
__gthread_recursive_mutex_destroy (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_destroy (__mutex);
}
# 849 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr-default.h" 3
static inline int
__gthread_cond_broadcast (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_broadcast (__cond);
}

static inline int
__gthread_cond_signal (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_signal (__cond);
}

static inline int
__gthread_cond_wait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex)
{
  return __gthrw_pthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_timedwait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex,
     const __gthread_time_t *__abs_timeout)
{
  return __gthrw_pthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

static inline int
__gthread_cond_wait_recursive (__gthread_cond_t *__cond,
          __gthread_recursive_mutex_t *__mutex)
{
  return __gthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_destroy (__gthread_cond_t* __cond)
{
  return __gthrw_pthread_cond_destroy (__cond);
}
# 149 "/usr/include/x86_64-linux-gnu/c++/7/bits/gthr.h" 2 3


#pragma GCC visibility pop
# 36 "/usr/include/c++/7/ext/atomicity.h" 2 3
# 1 "/usr/include/x86_64-linux-gnu/c++/7/bits/atomic_word.h" 1 3
# 32 "/usr/include/x86_64-linux-gnu/c++/7/bits/atomic_word.h" 3
typedef int _Atomic_word;
# 37 "/usr/include/c++/7/ext/atomicity.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{







  static inline _Atomic_word
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  { return __atomic_fetch_add(__mem, __val, 4); }

  static inline void
  __atomic_add(volatile _Atomic_word* __mem, int __val)
  { __atomic_fetch_add(__mem, __val, 4); }
# 64 "/usr/include/c++/7/ext/atomicity.h" 3
  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
    *__mem += __val;
    return __result;
  }

  static inline void
  __atomic_add_single(_Atomic_word* __mem, int __val)
  { *__mem += __val; }

  static inline _Atomic_word
  __attribute__ ((__unused__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      return __exchange_and_add(__mem, __val);
    else
      return __exchange_and_add_single(__mem, __val);



  }

  static inline void
  __attribute__ ((__unused__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      __atomic_add(__mem, __val);
    else
      __atomic_add_single(__mem, __val);



  }


}
# 40 "/usr/include/c++/7/bits/basic_string.h" 2 3
# 52 "/usr/include/c++/7/bits/basic_string.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



namespace __cxx11 {
# 76 "/usr/include/c++/7/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_string
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;


    public:
      typedef _Traits traits_type;
      typedef typename _Traits::char_type value_type;
      typedef _Char_alloc_type allocator_type;
      typedef typename _Alloc_traits::size_type size_type;
      typedef typename _Alloc_traits::difference_type difference_type;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
       const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;


      static const size_type npos = static_cast<size_type>(-1);

    private:




      typedef const_iterator __const_iterator;
# 139 "/usr/include/c++/7/bits/basic_string.h" 3
      struct _Alloc_hider : allocator_type
      {




 _Alloc_hider(pointer __dat, const _Alloc& __a)
 : allocator_type(__a), _M_p(__dat) { }

 _Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
 : allocator_type(std::move(__a)), _M_p(__dat) { }


 pointer _M_p;
      };

      _Alloc_hider _M_dataplus;
      size_type _M_string_length;

      enum { _S_local_capacity = 15 / sizeof(_CharT) };

      union
      {
 _CharT _M_local_buf[_S_local_capacity + 1];
 size_type _M_allocated_capacity;
      };

      void
      _M_data(pointer __p)
      { _M_dataplus._M_p = __p; }

      void
      _M_length(size_type __length)
      { _M_string_length = __length; }

      pointer
      _M_data() const
      { return _M_dataplus._M_p; }

      pointer
      _M_local_data()
      {

 return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);



      }

      const_pointer
      _M_local_data() const
      {

 return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);



      }

      void
      _M_capacity(size_type __capacity)
      { _M_allocated_capacity = __capacity; }

      void
      _M_set_length(size_type __n)
      {
 _M_length(__n);
 traits_type::assign(_M_data()[__n], _CharT());
      }

      bool
      _M_is_local() const
      { return _M_data() == _M_local_data(); }


      pointer
      _M_create(size_type&, size_type);

      void
      _M_dispose()
      {
 if (!_M_is_local())
   _M_destroy(_M_allocated_capacity);
      }

      void
      _M_destroy(size_type __size) throw()
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }



      template<typename _InIterator>
        void
        _M_construct_aux(_InIterator __beg, _InIterator __end,
    std::__false_type)
 {
          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
          _M_construct(__beg, __end, _Tag());
 }



      template<typename _Integer>
        void
        _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)
 { _M_construct_aux_2(static_cast<size_type>(__beg), __end); }

      void
      _M_construct_aux_2(size_type __req, _CharT __c)
      { _M_construct(__req, __c); }

      template<typename _InIterator>
        void
        _M_construct(_InIterator __beg, _InIterator __end)
 {
   typedef typename std::__is_integer<_InIterator>::__type _Integral;
   _M_construct_aux(__beg, __end, _Integral());
        }


      template<typename _InIterator>
        void
        _M_construct(_InIterator __beg, _InIterator __end,
       std::input_iterator_tag);



      template<typename _FwdIterator>
        void
        _M_construct(_FwdIterator __beg, _FwdIterator __end,
       std::forward_iterator_tag);

      void
      _M_construct(size_type __req, _CharT __c);

      allocator_type&
      _M_get_allocator()
      { return _M_dataplus; }

      const allocator_type&
      _M_get_allocator() const
      { return _M_dataplus; }

    private:
# 298 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      _M_check(size_type __pos, const char* __s) const
      {
 if (__pos > this->size())
   __throw_out_of_range_fmt(("%s: __pos (which is %zu) > " "this->size() (which is %zu)")
                                         ,
       __s, __pos, this->size());
 return __pos;
      }

      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
 if (this->max_size() - (this->size() - __n1) < __n2)
   __throw_length_error((__s));
      }



      size_type
      _M_limit(size_type __pos, size_type __off) const noexcept
      {
 const bool __testoff = __off < this->size() - __pos;
 return __testoff ? __off : this->size() - __pos;
      }


      bool
      _M_disjunct(const _CharT* __s) const noexcept
      {
 return (less<const _CharT*>()(__s, _M_data())
  || less<const _CharT*>()(_M_data() + this->size(), __s));
      }



      static void
      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::copy(__d, __s, __n);
      }

      static void
      _S_move(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::move(__d, __s, __n);
      }

      static void
      _S_assign(_CharT* __d, size_type __n, _CharT __c)
      {
 if (__n == 1)
   traits_type::assign(*__d, __c);
 else
   traits_type::assign(__d, __n, __c);
      }



      template<class _Iterator>
        static void
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
        {
   for (; __k1 != __k2; ++__k1, (void)++__p)
     traits_type::assign(*__p, *__k1);
 }

      static void
      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) noexcept
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
      noexcept
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) noexcept
      { _S_copy(__p, __k1, __k2 - __k1); }

      static void
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
      noexcept
      { _S_copy(__p, __k1, __k2 - __k1); }

      static int
      _S_compare(size_type __n1, size_type __n2) noexcept
      {
 const difference_type __d = difference_type(__n1 - __n2);

 if (__d > __gnu_cxx::__numeric_traits<int>::__max)
   return __gnu_cxx::__numeric_traits<int>::__max;
 else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
   return __gnu_cxx::__numeric_traits<int>::__min;
 else
   return int(__d);
      }

      void
      _M_assign(const basic_string&);

      void
      _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
  size_type __len2);

      void
      _M_erase(size_type __pos, size_type __n);

    public:







      basic_string()
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
      : _M_dataplus(_M_local_data())
      { _M_set_length(0); }




      explicit
      basic_string(const _Alloc& __a) noexcept
      : _M_dataplus(_M_local_data(), __a)
      { _M_set_length(0); }





      basic_string(const basic_string& __str)
      : _M_dataplus(_M_local_data(),
      _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
# 450 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string(const basic_string& __str, size_type __pos,
     const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      {
 const _CharT* __start = __str._M_data()
   + __str._M_check(__pos, "basic_string::basic_string");
 _M_construct(__start, __start + __str._M_limit(__pos, npos));
      }







      basic_string(const basic_string& __str, size_type __pos,
     size_type __n)
      : _M_dataplus(_M_local_data())
      {
 const _CharT* __start = __str._M_data()
   + __str._M_check(__pos, "basic_string::basic_string");
 _M_construct(__start, __start + __str._M_limit(__pos, __n));
      }
# 481 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string(const basic_string& __str, size_type __pos,
     size_type __n, const _Alloc& __a)
      : _M_dataplus(_M_local_data(), __a)
      {
 const _CharT* __start
   = __str._M_data() + __str._M_check(__pos, "string::string");
 _M_construct(__start, __start + __str._M_limit(__pos, __n));
      }
# 499 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string(const _CharT* __s, size_type __n,
     const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s + __n); }






      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }







      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__n, __c); }
# 531 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string(basic_string&& __str) noexcept
      : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
      {
 if (__str._M_is_local())
   {
     traits_type::copy(_M_local_buf, __str._M_local_buf,
         _S_local_capacity + 1);
   }
 else
   {
     _M_data(__str._M_data());
     _M_capacity(__str._M_allocated_capacity);
   }




 _M_length(__str.length());
 __str._M_data(__str._M_local_data());
 __str._M_set_length(0);
      }






      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__l.begin(), __l.end()); }

      basic_string(const basic_string& __str, const _Alloc& __a)
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__str.begin(), __str.end()); }

      basic_string(basic_string&& __str, const _Alloc& __a)
      noexcept(_Alloc_traits::_S_always_equal())
      : _M_dataplus(_M_local_data(), __a)
      {
 if (__str._M_is_local())
   {
     traits_type::copy(_M_local_buf, __str._M_local_buf,
         _S_local_capacity + 1);
     _M_length(__str.length());
     __str._M_set_length(0);
   }
 else if (_Alloc_traits::_S_always_equal()
     || __str.get_allocator() == __a)
   {
     _M_data(__str._M_data());
     _M_length(__str.length());
     _M_capacity(__str._M_allocated_capacity);
     __str._M_data(__str._M_local_buf);
     __str._M_set_length(0);
   }
 else
   _M_construct(__str.begin(), __str.end());
      }
# 599 "/usr/include/c++/7/bits/basic_string.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string(_InputIterator __beg, _InputIterator __end,
       const _Alloc& __a = _Alloc())
 : _M_dataplus(_M_local_data(), __a)
 { _M_construct(__beg, __end); }
# 646 "/usr/include/c++/7/bits/basic_string.h" 3
      ~basic_string()
      { _M_dispose(); }





      basic_string&
      operator=(const basic_string& __str)
      {

 if (_Alloc_traits::_S_propagate_on_copy_assign())
   {
     if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
  && _M_get_allocator() != __str._M_get_allocator())
       {


  if (__str.size() <= _S_local_capacity)
    {
      _M_destroy(_M_allocated_capacity);
      _M_data(_M_local_data());
      _M_set_length(0);
    }
  else
    {
      const auto __len = __str.size();
      auto __alloc = __str._M_get_allocator();

      auto __ptr = _Alloc_traits::allocate(__alloc, __len + 1);
      _M_destroy(_M_allocated_capacity);
      _M_data(__ptr);
      _M_capacity(__len);
      _M_set_length(__len);
    }
       }
     std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
   }

 return this->assign(__str);
      }





      basic_string&
      operator=(const _CharT* __s)
      { return this->assign(__s); }
# 703 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      operator=(_CharT __c)
      {
 this->assign(1, __c);
 return *this;
      }
# 721 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      operator=(basic_string&& __str)
      noexcept(_Alloc_traits::_S_nothrow_move())
      {
 if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()
     && !_Alloc_traits::_S_always_equal()
     && _M_get_allocator() != __str._M_get_allocator())
   {

     _M_destroy(_M_allocated_capacity);
     _M_data(_M_local_data());
     _M_set_length(0);
   }

 std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());

 if (__str._M_is_local())
   {

     if (__str.size())
       this->_S_copy(_M_data(), __str._M_data(), __str.size());
     _M_set_length(__str.size());
   }
 else if (_Alloc_traits::_S_propagate_on_move_assign()
     || _Alloc_traits::_S_always_equal()
     || _M_get_allocator() == __str._M_get_allocator())
   {

     pointer __data = nullptr;
     size_type __capacity;
     if (!_M_is_local())
       {
  if (_Alloc_traits::_S_always_equal())
    {

      __data = _M_data();
      __capacity = _M_allocated_capacity;
    }
  else
    _M_destroy(_M_allocated_capacity);
       }

     _M_data(__str._M_data());
     _M_length(__str.length());
     _M_capacity(__str._M_allocated_capacity);
     if (__data)
       {
  __str._M_data(__data);
  __str._M_capacity(__capacity);
       }
     else
       __str._M_data(__str._M_local_buf);
   }
 else
   assign(__str);
 __str.clear();
 return *this;
      }





      basic_string&
      operator=(initializer_list<_CharT> __l)
      {
 this->assign(__l.begin(), __l.size());
 return *this;
      }
# 815 "/usr/include/c++/7/bits/basic_string.h" 3
      iterator
      begin() noexcept
      { return iterator(_M_data()); }





      const_iterator
      begin() const noexcept
      { return const_iterator(_M_data()); }





      iterator
      end() noexcept
      { return iterator(_M_data() + this->size()); }





      const_iterator
      end() const noexcept
      { return const_iterator(_M_data() + this->size()); }






      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(this->end()); }






      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(this->end()); }






      reverse_iterator
      rend() noexcept
      { return reverse_iterator(this->begin()); }






      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(this->begin()); }






      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_data()); }





      const_iterator
      cend() const noexcept
      { return const_iterator(this->_M_data() + this->size()); }






      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(this->end()); }






      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(this->begin()); }


    public:



      size_type
      size() const noexcept
      { return _M_string_length; }



      size_type
      length() const noexcept
      { return _M_string_length; }


      size_type
      max_size() const noexcept
      { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
# 944 "/usr/include/c++/7/bits/basic_string.h" 3
      void
      resize(size_type __n, _CharT __c);
# 957 "/usr/include/c++/7/bits/basic_string.h" 3
      void
      resize(size_type __n)
      { this->resize(__n, _CharT()); }



      void
      shrink_to_fit() noexcept
      {

 if (capacity() > size())
   {
     try
       { reserve(0); }
     catch(...)
       { }
   }

      }






      size_type
      capacity() const noexcept
      {
 return _M_is_local() ? size_type(_S_local_capacity)
                      : _M_allocated_capacity;
      }
# 1006 "/usr/include/c++/7/bits/basic_string.h" 3
      void
      reserve(size_type __res_arg = 0);




      void
      clear() noexcept
      { _M_set_length(0); }





      bool
      empty() const noexcept
      { return this->size() == 0; }
# 1035 "/usr/include/c++/7/bits/basic_string.h" 3
      const_reference
      operator[] (size_type __pos) const noexcept
      {
 ;
 return _M_data()[__pos];
      }
# 1052 "/usr/include/c++/7/bits/basic_string.h" 3
      reference
      operator[](size_type __pos)
      {


 ;

 ;
 return _M_data()[__pos];
      }
# 1073 "/usr/include/c++/7/bits/basic_string.h" 3
      const_reference
      at(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("basic_string::at: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
 return _M_data()[__n];
      }
# 1094 "/usr/include/c++/7/bits/basic_string.h" 3
      reference
      at(size_type __n)
      {
 if (__n >= size())
   __throw_out_of_range_fmt(("basic_string::at: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
 return _M_data()[__n];
      }






      reference
      front() noexcept
      {
 ;
 return operator[](0);
      }





      const_reference
      front() const noexcept
      {
 ;
 return operator[](0);
      }





      reference
      back() noexcept
      {
 ;
 return operator[](this->size() - 1);
      }





      const_reference
      back() const noexcept
      {
 ;
 return operator[](this->size() - 1);
      }
# 1157 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      operator+=(const basic_string& __str)
      { return this->append(__str); }






      basic_string&
      operator+=(const _CharT* __s)
      { return this->append(__s); }






      basic_string&
      operator+=(_CharT __c)
      {
 this->push_back(__c);
 return *this;
      }







      basic_string&
      operator+=(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }
# 1210 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str)
      { return _M_append(__str._M_data(), __str.size()); }
# 1227 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str, size_type __pos, size_type __n = npos)
      { return _M_append(__str._M_data()
    + __str._M_check(__pos, "basic_string::append"),
    __str._M_limit(__pos, __n)); }







      basic_string&
      append(const _CharT* __s, size_type __n)
      {
 ;
 _M_check_length(size_type(0), __n, "basic_string::append");
 return _M_append(__s, __n);
      }






      basic_string&
      append(const _CharT* __s)
      {
 ;
 const size_type __n = traits_type::length(__s);
 _M_check_length(size_type(0), __n, "basic_string::append");
 return _M_append(__s, __n);
      }
# 1269 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      append(size_type __n, _CharT __c)
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }







      basic_string&
      append(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }
# 1293 "/usr/include/c++/7/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string&
        append(_InputIterator __first, _InputIterator __last)
        { return this->replace(end(), end(), __first, __last); }
# 1338 "/usr/include/c++/7/bits/basic_string.h" 3
      void
      push_back(_CharT __c)
      {
 const size_type __size = this->size();
 if (__size + 1 > this->capacity())
   this->_M_mutate(__size, size_type(0), 0, size_type(1));
 traits_type::assign(this->_M_data()[__size], __c);
 this->_M_set_length(__size + 1);
      }






      basic_string&
      assign(const basic_string& __str)
      {
 this->_M_assign(__str);
 return *this;
      }
# 1369 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      assign(basic_string&& __str)
      noexcept(_Alloc_traits::_S_nothrow_move())
      {


 return *this = std::move(__str);
      }
# 1392 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      assign(const basic_string& __str, size_type __pos, size_type __n = npos)
      { return _M_replace(size_type(0), this->size(), __str._M_data()
     + __str._M_check(__pos, "basic_string::assign"),
     __str._M_limit(__pos, __n)); }
# 1408 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s, size_type __n)
      {
 ;
 return _M_replace(size_type(0), this->size(), __s, __n);
      }
# 1424 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s)
      {
 ;
 return _M_replace(size_type(0), this->size(), __s,
     traits_type::length(__s));
      }
# 1441 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      assign(size_type __n, _CharT __c)
      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
# 1454 "/usr/include/c++/7/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string&
        assign(_InputIterator __first, _InputIterator __last)
        { return this->replace(begin(), end(), __first, __last); }







      basic_string&
      assign(initializer_list<_CharT> __l)
      { return this->assign(__l.begin(), __l.size()); }
# 1522 "/usr/include/c++/7/bits/basic_string.h" 3
      iterator
      insert(const_iterator __p, size_type __n, _CharT __c)
      {
 ;
 const size_type __pos = __p - begin();
 this->replace(__p, __p, __n, __c);
 return iterator(this->_M_data() + __pos);
      }
# 1564 "/usr/include/c++/7/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 iterator
        insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)
        {
   ;
   const size_type __pos = __p - begin();
   this->replace(__p, __p, __beg, __end);
   return iterator(this->_M_data() + __pos);
 }
# 1600 "/usr/include/c++/7/bits/basic_string.h" 3
      void
      insert(iterator __p, initializer_list<_CharT> __l)
      {
 ;
 this->insert(__p - begin(), __l.begin(), __l.size());
      }
# 1620 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str)
      { return this->replace(__pos1, size_type(0),
        __str._M_data(), __str.size()); }
# 1643 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str,
      size_type __pos2, size_type __n = npos)
      { return this->replace(__pos1, size_type(0), __str._M_data()
        + __str._M_check(__pos2, "basic_string::insert"),
        __str._M_limit(__pos2, __n)); }
# 1666 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s, size_type __n)
      { return this->replace(__pos, size_type(0), __s, __n); }
# 1685 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s)
      {
 ;
 return this->replace(__pos, size_type(0), __s,
        traits_type::length(__s));
      }
# 1709 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
         size_type(0), __n, __c); }
# 1727 "/usr/include/c++/7/bits/basic_string.h" 3
      iterator
      insert(__const_iterator __p, _CharT __c)
      {
 ;
 const size_type __pos = __p - begin();
 _M_replace_aux(__pos, size_type(0), size_type(1), __c);
 return iterator(_M_data() + __pos);
      }
# 1787 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      erase(size_type __pos = 0, size_type __n = npos)
      {
 _M_check(__pos, "basic_string::erase");
 if (__n == npos)
   this->_M_set_length(__pos);
 else if (__n != 0)
   this->_M_erase(__pos, _M_limit(__pos, __n));
 return *this;
      }
# 1806 "/usr/include/c++/7/bits/basic_string.h" 3
      iterator
      erase(__const_iterator __position)
      {

                           ;
 const size_type __pos = __position - begin();
 this->_M_erase(__pos, size_type(1));
 return iterator(_M_data() + __pos);
      }
# 1825 "/usr/include/c++/7/bits/basic_string.h" 3
      iterator
      erase(__const_iterator __first, __const_iterator __last)
      {

                        ;
        const size_type __pos = __first - begin();
 if (__last == end())
   this->_M_set_length(__pos);
 else
   this->_M_erase(__pos, __last - __first);
 return iterator(this->_M_data() + __pos);
      }







      void
      pop_back() noexcept
      {
 ;
 _M_erase(size() - 1, 1);
      }
# 1869 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n, const basic_string& __str)
      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
# 1891 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2 = npos)
      { return this->replace(__pos1, __n1, __str._M_data()
        + __str._M_check(__pos2, "basic_string::replace"),
        __str._M_limit(__pos2, __n2)); }
# 1916 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2)
      {
 ;
 return _M_replace(_M_check(__pos, "basic_string::replace"),
     _M_limit(__pos, __n1), __s, __n2);
      }
# 1941 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s)
      {
 ;
 return this->replace(__pos, __n1, __s, traits_type::length(__s));
      }
# 1965 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
         _M_limit(__pos, __n1), __n2, __c); }
# 1983 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const basic_string& __str)
      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
# 2003 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const _CharT* __s, size_type __n)
      {

                      ;
 return this->replace(__i1 - begin(), __i2 - __i1, __s, __n);
      }
# 2025 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)
      {
 ;
 return this->replace(__i1, __i2, __s, traits_type::length(__s));
      }
# 2046 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2, size_type __n,
       _CharT __c)
      {

                      ;
 return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c);
      }
# 2071 "/usr/include/c++/7/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
        basic_string&
        replace(const_iterator __i1, const_iterator __i2,
  _InputIterator __k1, _InputIterator __k2)
        {
  
                        ;
   ;
   return this->_M_replace_dispatch(__i1, __i2, __k1, __k2,
        std::__false_type());
 }
# 2103 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       _CharT* __k1, _CharT* __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const _CharT* __k1, const _CharT* __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       iterator __k1, iterator __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const_iterator __k1, const_iterator __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }
# 2162 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string& replace(const_iterator __i1, const_iterator __i2,
       initializer_list<_CharT> __l)
      { return this->replace(__i1, __i2, __l.begin(), __l.size()); }
# 2221 "/usr/include/c++/7/bits/basic_string.h" 3
    private:
      template<class _Integer>
 basic_string&
 _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
       _Integer __n, _Integer __val, __true_type)
        { return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); }

      template<class _InputIterator>
 basic_string&
 _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
       _InputIterator __k1, _InputIterator __k2,
       __false_type);

      basic_string&
      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c);

      basic_string&
      _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
   const size_type __len2);

      basic_string&
      _M_append(const _CharT* __s, size_type __n);

    public:
# 2259 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
# 2269 "/usr/include/c++/7/bits/basic_string.h" 3
      void
      swap(basic_string& __s) noexcept;
# 2279 "/usr/include/c++/7/bits/basic_string.h" 3
      const _CharT*
      c_str() const noexcept
      { return _M_data(); }
# 2291 "/usr/include/c++/7/bits/basic_string.h" 3
      const _CharT*
      data() const noexcept
      { return _M_data(); }
# 2310 "/usr/include/c++/7/bits/basic_string.h" 3
      allocator_type
      get_allocator() const noexcept
      { return _M_get_allocator(); }
# 2326 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2340 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find(__str.data(), __pos, __str.size()); }
# 2372 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos = 0) const noexcept
      {
 ;
 return this->find(__s, __pos, traits_type::length(__s));
      }
# 2389 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find(_CharT __c, size_type __pos = 0) const noexcept;
# 2402 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      rfind(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->rfind(__str.data(), __pos, __str.size()); }
# 2436 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2450 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos = npos) const
      {
 ;
 return this->rfind(__s, __pos, traits_type::length(__s));
      }
# 2467 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      rfind(_CharT __c, size_type __pos = npos) const noexcept;
# 2481 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find_first_of(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find_first_of(__str.data(), __pos, __str.size()); }
# 2516 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2530 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos = 0) const
      noexcept
      {
 ;
 return this->find_first_of(__s, __pos, traits_type::length(__s));
      }
# 2550 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find_first_of(_CharT __c, size_type __pos = 0) const noexcept
      { return this->find(__c, __pos); }
# 2565 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find_last_of(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->find_last_of(__str.data(), __pos, __str.size()); }
# 2600 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2614 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos = npos) const
      noexcept
      {
 ;
 return this->find_last_of(__s, __pos, traits_type::length(__s));
      }
# 2634 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find_last_of(_CharT __c, size_type __pos = npos) const noexcept
      { return this->rfind(__c, __pos); }
# 2648 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find_first_not_of(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
# 2683 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos,
   size_type __n) const noexcept;
# 2697 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      noexcept
      {
 ;
 return this->find_first_not_of(__s, __pos, traits_type::length(__s));
      }
# 2715 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find_first_not_of(_CharT __c, size_type __pos = 0) const
      noexcept;
# 2730 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find_last_not_of(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
# 2765 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos,
         size_type __n) const noexcept;
# 2779 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      noexcept
      {
 ;
 return this->find_last_not_of(__s, __pos, traits_type::length(__s));
      }
# 2797 "/usr/include/c++/7/bits/basic_string.h" 3
      size_type
      find_last_not_of(_CharT __c, size_type __pos = npos) const
      noexcept;
# 2813 "/usr/include/c++/7/bits/basic_string.h" 3
      basic_string
      substr(size_type __pos = 0, size_type __n = npos) const
      { return basic_string(*this,
       _M_check(__pos, "basic_string::substr"), __n); }
# 2832 "/usr/include/c++/7/bits/basic_string.h" 3
      int
      compare(const basic_string& __str) const
      {
 const size_type __size = this->size();
 const size_type __osize = __str.size();
 const size_type __len = std::min(__size, __osize);

 int __r = traits_type::compare(_M_data(), __str.data(), __len);
 if (!__r)
   __r = _S_compare(__size, __osize);
 return __r;
      }
# 2925 "/usr/include/c++/7/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n, const basic_string& __str) const;
# 2951 "/usr/include/c++/7/bits/basic_string.h" 3
      int
      compare(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2 = npos) const;
# 2969 "/usr/include/c++/7/bits/basic_string.h" 3
      int
      compare(const _CharT* __s) const noexcept;
# 2993 "/usr/include/c++/7/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s) const;
# 3020 "/usr/include/c++/7/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2) const;


      template<typename, typename, typename> friend class basic_stringbuf;
    };
}
# 5886 "/usr/include/c++/7/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str(__lhs);
      __str.append(__size_type(1), __rhs);
      return __str;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    {
      const auto __size = __lhs.size() + __rhs.size();
      const bool __cond = (__size > __lhs.capacity()
      && __size <= __rhs.capacity());
      return __cond ? std::move(__rhs.insert(0, __lhs))
             : std::move(__lhs.append(__rhs));
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, 1, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       _CharT __rhs)
    { return std::move(__lhs.append(1, __rhs)); }
# 6007 "/usr/include/c++/7/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
        const basic_string<_CharT>& __rhs) noexcept
    { return (__lhs.size() == __rhs.size()
       && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
          __lhs.size())); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) == 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
# 6054 "/usr/include/c++/7/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return !(__lhs == __rhs); }
# 6092 "/usr/include/c++/7/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) > 0; }
# 6130 "/usr/include/c++/7/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) < 0; }
# 6168 "/usr/include/c++/7/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) >= 0; }
# 6206 "/usr/include/c++/7/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const _CharT* __lhs,
      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) <= 0; }
# 6244 "/usr/include/c++/7/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline void
    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
  basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept(noexcept(__lhs.swap(__rhs)))
    { __lhs.swap(__rhs); }
# 6264 "/usr/include/c++/7/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT, _Traits, _Alloc>& __str);

  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __is, basic_string<char>& __str);
# 6282 "/usr/include/c++/7/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os,
        const basic_string<_CharT, _Traits, _Alloc>& __str)
    {


      return __ostream_insert(__os, __str.data(), __str.size());
    }
# 6305 "/usr/include/c++/7/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);
# 6322 "/usr/include/c++/7/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str, __is.widen('\n')); }



  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>&& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    { return std::getline(__is, __str, __delim); }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>&& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str); }


  template<>
    basic_istream<char>&
    getline(basic_istream<char>& __in, basic_string<char>& __str,
     char __delim);


  template<>
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,
     wchar_t __delim);



}



# 1 "/usr/include/c++/7/ext/string_conversions.h" 1 3
# 32 "/usr/include/c++/7/ext/string_conversions.h" 3
       
# 33 "/usr/include/c++/7/ext/string_conversions.h" 3
# 41 "/usr/include/c++/7/ext/string_conversions.h" 3
# 1 "/usr/include/c++/7/cstdlib" 1 3
# 39 "/usr/include/c++/7/cstdlib" 3
       
# 40 "/usr/include/c++/7/cstdlib" 3
# 42 "/usr/include/c++/7/ext/string_conversions.h" 2 3
# 1 "/usr/include/c++/7/cwchar" 1 3
# 39 "/usr/include/c++/7/cwchar" 3
       
# 40 "/usr/include/c++/7/cwchar" 3
# 43 "/usr/include/c++/7/ext/string_conversions.h" 2 3
# 1 "/usr/include/c++/7/cstdio" 1 3
# 39 "/usr/include/c++/7/cstdio" 3
       
# 40 "/usr/include/c++/7/cstdio" 3
# 96 "/usr/include/c++/7/cstdio" 3
namespace std
{
  using ::FILE;
  using ::fpos_t;

  using ::clearerr;
  using ::fclose;
  using ::feof;
  using ::ferror;
  using ::fflush;
  using ::fgetc;
  using ::fgetpos;
  using ::fgets;
  using ::fopen;
  using ::fprintf;
  using ::fputc;
  using ::fputs;
  using ::fread;
  using ::freopen;
  using ::fscanf;
  using ::fseek;
  using ::fsetpos;
  using ::ftell;
  using ::fwrite;
  using ::getc;
  using ::getchar;




  using ::perror;
  using ::printf;
  using ::putc;
  using ::putchar;
  using ::puts;
  using ::remove;
  using ::rename;
  using ::rewind;
  using ::scanf;
  using ::setbuf;
  using ::setvbuf;
  using ::sprintf;
  using ::sscanf;
  using ::tmpfile;

  using ::tmpnam;

  using ::ungetc;
  using ::vfprintf;
  using ::vprintf;
  using ::vsprintf;
}
# 157 "/usr/include/c++/7/cstdio" 3
namespace __gnu_cxx
{
# 175 "/usr/include/c++/7/cstdio" 3
  using ::snprintf;
  using ::vfscanf;
  using ::vscanf;
  using ::vsnprintf;
  using ::vsscanf;

}

namespace std
{
  using ::__gnu_cxx::snprintf;
  using ::__gnu_cxx::vfscanf;
  using ::__gnu_cxx::vscanf;
  using ::__gnu_cxx::vsnprintf;
  using ::__gnu_cxx::vsscanf;
}
# 44 "/usr/include/c++/7/ext/string_conversions.h" 2 3
# 1 "/usr/include/c++/7/cerrno" 1 3
# 39 "/usr/include/c++/7/cerrno" 3
       
# 40 "/usr/include/c++/7/cerrno" 3
# 45 "/usr/include/c++/7/ext/string_conversions.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<typename _TRet, typename _Ret = _TRet, typename _CharT,
    typename... _Base>
    _Ret
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
    const char* __name, const _CharT* __str, std::size_t* __idx,
    _Base... __base)
    {
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
 _Save_errno() : _M_errno((*__errno_location ())) { (*__errno_location ()) = 0; }
 ~_Save_errno() { if ((*__errno_location ()) == 0) (*__errno_location ()) = _M_errno; }
 int _M_errno;
      } const __save_errno;

      struct _Range_chk {
   static bool
   _S_chk(_TRet, std::false_type) { return false; }

   static bool
   _S_chk(_TRet __val, std::true_type)
   {
     return __val < _TRet(__numeric_traits<int>::__min)
       || __val > _TRet(__numeric_traits<int>::__max);
   }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);

      if (__endptr == __str)
 std::__throw_invalid_argument(__name);
      else if ((*__errno_location ()) == 34
   || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 std::__throw_out_of_range(__name);
      else
 __ret = __tmp;

      if (__idx)
 *__idx = __endptr - __str;

      return __ret;
    }


  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
     __builtin_va_list), std::size_t __n,
   const _CharT* __fmt, ...)
    {


      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
         * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);

      const int __len = __convf(__s, __n, __fmt, __args);

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
    }


}
# 6362 "/usr/include/c++/7/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

namespace __cxx11 {



  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtold, "stold", __str.c_str(), __idx); }






  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
        "%d", __val); }

  inline string
  to_string(unsigned __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned),
        "%u", __val); }

  inline string
  to_string(long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
        "%ld", __val); }

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned long),
        "%lu", __val); }

  inline string
  to_string(long long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(long long),
        "%lld", __val); }

  inline string
  to_string(unsigned long long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned long long),
        "%llu", __val); }

  inline string
  to_string(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  inline string
  to_string(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  inline string
  to_string(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%Lf", __val);
  }



  inline int
  stoi(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::wcstol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstold, "stold", __str.c_str(), __idx); }



  inline wstring
  to_wstring(int __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(int),
         L"%d", __val); }

  inline wstring
  to_wstring(unsigned __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned),
         L"%u", __val); }

  inline wstring
  to_wstring(long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(long),
         L"%ld", __val); }

  inline wstring
  to_wstring(unsigned long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned long),
         L"%lu", __val); }

  inline wstring
  to_wstring(long long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(long long),
         L"%lld", __val); }

  inline wstring
  to_wstring(unsigned long long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned long long),
         L"%llu", __val); }

  inline wstring
  to_wstring(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%f", __val);
  }

  inline wstring
  to_wstring(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%f", __val);
  }

  inline wstring
  to_wstring(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%Lf", __val);
  }



}

}







namespace std __attribute__ ((__visibility__ ("default")))
{






  template<>
    struct hash<string>
    : public __hash_base<size_t, string>
    {
      size_t
      operator()(const string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(), __s.length()); }
    };

  template<>
    struct __is_fast_hash<hash<string>> : std::false_type
    { };



  template<>
    struct hash<wstring>
    : public __hash_base<size_t, wstring>
    {
      size_t
      operator()(const wstring& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(wchar_t)); }
    };

  template<>
    struct __is_fast_hash<hash<wstring>> : std::false_type
    { };





  template<>
    struct hash<u16string>
    : public __hash_base<size_t, u16string>
    {
      size_t
      operator()(const u16string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char16_t)); }
    };

  template<>
    struct __is_fast_hash<hash<u16string>> : std::false_type
    { };


  template<>
    struct hash<u32string>
    : public __hash_base<size_t, u32string>
    {
      size_t
      operator()(const u32string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char32_t)); }
    };

  template<>
    struct __is_fast_hash<hash<u32string>> : std::false_type
    { };








  inline namespace literals
  {
  inline namespace string_literals
  {


    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<char>
    operator""s(const char* __str, size_t __len)
    { return basic_string<char>{__str, __len}; }


    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<wchar_t>
    operator""s(const wchar_t* __str, size_t __len)
    { return basic_string<wchar_t>{__str, __len}; }



    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<char16_t>
    operator""s(const char16_t* __str, size_t __len)
    { return basic_string<char16_t>{__str, __len}; }

    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<char32_t>
    operator""s(const char32_t* __str, size_t __len)
    { return basic_string<char32_t>{__str, __len}; }



  }
  }



}
# 53 "/usr/include/c++/7/string" 2 3
# 1 "/usr/include/c++/7/bits/basic_string.tcc" 1 3
# 42 "/usr/include/c++/7/bits/basic_string.tcc" 3
       
# 43 "/usr/include/c++/7/bits/basic_string.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::npos;

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    swap(basic_string& __s) noexcept
    {
      if (this == &__s)
 return;

      _Alloc_traits::_S_on_swap(_M_get_allocator(), __s._M_get_allocator());

      if (_M_is_local())
 if (__s._M_is_local())
   {
     if (length() && __s.length())
       {
  _CharT __tmp_data[_S_local_capacity + 1];
  traits_type::copy(__tmp_data, __s._M_local_buf,
      _S_local_capacity + 1);
  traits_type::copy(__s._M_local_buf, _M_local_buf,
      _S_local_capacity + 1);
  traits_type::copy(_M_local_buf, __tmp_data,
      _S_local_capacity + 1);
       }
     else if (__s.length())
       {
  traits_type::copy(_M_local_buf, __s._M_local_buf,
      _S_local_capacity + 1);
  _M_length(__s.length());
  __s._M_set_length(0);
  return;
       }
     else if (length())
       {
  traits_type::copy(__s._M_local_buf, _M_local_buf,
      _S_local_capacity + 1);
  __s._M_length(length());
  _M_set_length(0);
  return;
       }
   }
 else
   {
     const size_type __tmp_capacity = __s._M_allocated_capacity;
     traits_type::copy(__s._M_local_buf, _M_local_buf,
         _S_local_capacity + 1);
     _M_data(__s._M_data());
     __s._M_data(__s._M_local_buf);
     _M_capacity(__tmp_capacity);
   }
      else
 {
   const size_type __tmp_capacity = _M_allocated_capacity;
   if (__s._M_is_local())
     {
       traits_type::copy(_M_local_buf, __s._M_local_buf,
    _S_local_capacity + 1);
       __s._M_data(_M_data());
       _M_data(_M_local_buf);
     }
   else
     {
       pointer __tmp_ptr = _M_data();
       _M_data(__s._M_data());
       __s._M_data(__tmp_ptr);
       _M_capacity(__s._M_allocated_capacity);
     }
   __s._M_capacity(__tmp_capacity);
 }

      const size_type __tmp_length = length();
      _M_length(__s.length());
      __s._M_length(__tmp_length);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::pointer
    basic_string<_CharT, _Traits, _Alloc>::
    _M_create(size_type& __capacity, size_type __old_capacity)
    {


      if (__capacity > max_size())
 std::__throw_length_error(("basic_string::_M_create"));




      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 {
   __capacity = 2 * __old_capacity;

   if (__capacity > max_size())
     __capacity = max_size();
 }



      return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
    }





  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
     std::input_iterator_tag)
      {
 size_type __len = 0;
 size_type __capacity = size_type(_S_local_capacity);

 while (__beg != __end && __len < __capacity)
   {
     _M_data()[__len++] = *__beg;
     ++__beg;
   }

 try
   {
     while (__beg != __end)
       {
  if (__len == __capacity)
    {

      __capacity = __len + 1;
      pointer __another = _M_create(__capacity, __len);
      this->_S_copy(__another, _M_data(), __len);
      _M_dispose();
      _M_data(__another);
      _M_capacity(__capacity);
    }
  _M_data()[__len++] = *__beg;
  ++__beg;
       }
   }
 catch(...)
   {
     _M_dispose();
     throw;
   }

 _M_set_length(__len);
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
     std::forward_iterator_tag)
      {

 if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   std::__throw_logic_error(("basic_string::" "_M_construct null not valid")
                                         );

 size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

 if (__dnew > size_type(_S_local_capacity))
   {
     _M_data(_M_create(__dnew, size_type(0)));
     _M_capacity(__dnew);
   }


 try
   { this->_S_copy_chars(_M_data(), __beg, __end); }
 catch(...)
   {
     _M_dispose();
     throw;
   }

 _M_set_length(__dnew);
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_construct(size_type __n, _CharT __c)
    {
      if (__n > size_type(_S_local_capacity))
 {
   _M_data(_M_create(__n, size_type(0)));
   _M_capacity(__n);
 }

      if (__n)
 this->_S_assign(_M_data(), __n, __c);

      _M_set_length(__n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_assign(const basic_string& __str)
    {
      if (this != &__str)
 {
   const size_type __rsize = __str.length();
   const size_type __capacity = capacity();

   if (__rsize > __capacity)
     {
       size_type __new_capacity = __rsize;
       pointer __tmp = _M_create(__new_capacity, __capacity);
       _M_dispose();
       _M_data(__tmp);
       _M_capacity(__new_capacity);
     }

   if (__rsize)
     this->_S_copy(_M_data(), __str._M_data(), __rsize);

   _M_set_length(__rsize);
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    reserve(size_type __res)
    {

      if (__res < length())
 __res = length();

      const size_type __capacity = capacity();
      if (__res != __capacity)
 {
   if (__res > __capacity
       || __res > size_type(_S_local_capacity))
     {
       pointer __tmp = _M_create(__res, __capacity);
       this->_S_copy(__tmp, _M_data(), length() + 1);
       _M_dispose();
       _M_data(__tmp);
       _M_capacity(__res);
     }
   else if (!_M_is_local())
     {
       this->_S_copy(_M_local_data(), _M_data(), length() + 1);
       _M_destroy(__capacity);
       _M_data(_M_local_data());
     }
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
       size_type __len2)
    {
      const size_type __how_much = length() - __pos - __len1;

      size_type __new_capacity = length() + __len2 - __len1;
      pointer __r = _M_create(__new_capacity, capacity());

      if (__pos)
 this->_S_copy(__r, _M_data(), __pos);
      if (__s && __len2)
 this->_S_copy(__r + __pos, __s, __len2);
      if (__how_much)
 this->_S_copy(__r + __pos + __len2,
        _M_data() + __pos + __len1, __how_much);

      _M_dispose();
      _M_data(__r);
      _M_capacity(__new_capacity);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_erase(size_type __pos, size_type __n)
    {
      const size_type __how_much = length() - __pos - __n;

      if (__how_much && __n)
 this->_S_move(_M_data() + __pos, _M_data() + __pos + __n, __how_much);

      _M_set_length(length() - __n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    resize(size_type __n, _CharT __c)
    {
      const size_type __size = this->size();
      if (__size < __n)
 this->append(__n - __size, __c);
      else if (__n < __size)
 this->_M_set_length(__n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_append(const _CharT* __s, size_type __n)
    {
      const size_type __len = __n + this->size();

      if (__len <= this->capacity())
 {
   if (__n)
     this->_S_copy(this->_M_data() + this->size(), __s, __n);
 }
      else
 this->_M_mutate(this->size(), size_type(0), __s, __n);

      this->_M_set_length(__len);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
      basic_string<_CharT, _Traits, _Alloc>&
      basic_string<_CharT, _Traits, _Alloc>::
      _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
     _InputIterator __k1, _InputIterator __k2,
     std::__false_type)
      {
 const basic_string __s(__k1, __k2);
 const size_type __n1 = __i2 - __i1;
 return _M_replace(__i1 - begin(), __n1, __s._M_data(),
     __s.size());
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c)
    {
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");

      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __n2 - __n1;

      if (__new_size <= this->capacity())
 {
   pointer __p = this->_M_data() + __pos1;

   const size_type __how_much = __old_size - __pos1 - __n1;
   if (__how_much && __n1 != __n2)
     this->_S_move(__p + __n2, __p + __n1, __how_much);
 }
      else
 this->_M_mutate(__pos1, __n1, 0, __n2);

      if (__n2)
 this->_S_assign(this->_M_data() + __pos1, __n2, __c);

      this->_M_set_length(__new_size);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
        const size_type __len2)
    {
      _M_check_length(__len1, __len2, "basic_string::_M_replace");

      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __len2 - __len1;

      if (__new_size <= this->capacity())
 {
   pointer __p = this->_M_data() + __pos;

   const size_type __how_much = __old_size - __pos - __len1;
   if (_M_disjunct(__s))
     {
       if (__how_much && __len1 != __len2)
  this->_S_move(__p + __len2, __p + __len1, __how_much);
       if (__len2)
  this->_S_copy(__p, __s, __len2);
     }
   else
     {

       if (__len2 && __len2 <= __len1)
  this->_S_move(__p, __s, __len2);
       if (__how_much && __len1 != __len2)
  this->_S_move(__p + __len2, __p + __len1, __how_much);
       if (__len2 > __len1)
  {
    if (__s + __len2 <= __p + __len1)
      this->_S_move(__p, __s, __len2);
    else if (__s >= __p + __len1)
      this->_S_copy(__p, __s + __len2 - __len1, __len2);
    else
      {
        const size_type __nleft = (__p + __len1) - __s;
        this->_S_move(__p, __s, __nleft);
        this->_S_copy(__p + __nleft, __p + __len2,
        __len2 - __nleft);
      }
  }
     }
 }
      else
 this->_M_mutate(__pos, __len1, __s, __len2);

      this->_M_set_length(__new_size);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    copy(_CharT* __s, size_type __n, size_type __pos) const
    {
      _M_check(__pos, "basic_string::copy");
      __n = _M_limit(__pos, __n);
      ;
      if (__n)
 _S_copy(__s, _M_data() + __pos, __n);

      return __n;
    }
# 1155 "/usr/include/c++/7/bits/basic_string.tcc" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      ;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str;
      __str.reserve(__len + __rhs.size());
      __str.append(__lhs, __len);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str;
      const __size_type __len = __rhs.size();
      __str.reserve(__len + 1);
      __str.append(__size_type(1), __lhs);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      const size_type __size = this->size();

      if (__n == 0)
 return __pos <= __size ? __pos : npos;
      if (__pos >= __size)
 return npos;

      const _CharT __elem0 = __s[0];
      const _CharT* const __data = data();
      const _CharT* __first = __data + __pos;
      const _CharT* const __last = __data + __size;
      size_type __len = __size - __pos;

      while (__len >= __n)
 {

   __first = traits_type::find(__first, __len - __n + 1, __elem0);
   if (!__first)
     return npos;



   if (traits_type::compare(__first, __s, __n) == 0)
     return __first - __data;
   __len = __last - ++__first;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(_CharT __c, size_type __pos) const noexcept
    {
      size_type __ret = npos;
      const size_type __size = this->size();
      if (__pos < __size)
 {
   const _CharT* __data = _M_data();
   const size_type __n = __size - __pos;
   const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
   if (__p)
     __ret = __p - __data;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      const size_type __size = this->size();
      if (__n <= __size)
 {
   __pos = std::min(size_type(__size - __n), __pos);
   const _CharT* __data = _M_data();
   do
     {
       if (traits_type::compare(__data + __pos, __s, __n) == 0)
  return __pos;
     }
   while (__pos-- > 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(_CharT __c, size_type __pos) const noexcept
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   for (++__size; __size-- > 0; )
     if (traits_type::eq(_M_data()[__size], __c))
       return __size;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      for (; __n && __pos < this->size(); ++__pos)
 {
   const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);
   if (__p)
     return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      size_type __size = this->size();
      if (__size && __n)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size-- != 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::find(__s, __n, _M_data()[__pos]))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(_CharT __c, size_type __pos) const noexcept
    {
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::eq(_M_data()[__pos], __c))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(_CharT __c, size_type __pos) const noexcept
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::eq(_M_data()[__size], __c))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n, const basic_string& __str) const
    {
      _M_check(__pos, "basic_string::compare");
      __n = _M_limit(__pos, __n);
      const size_type __osize = __str.size();
      const size_type __len = std::min(__n, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
      if (!__r)
 __r = _S_compare(__n, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos1, size_type __n1, const basic_string& __str,
     size_type __pos2, size_type __n2) const
    {
      _M_check(__pos1, "basic_string::compare");
      __str._M_check(__pos2, "basic_string::compare");
      __n1 = _M_limit(__pos1, __n1);
      __n2 = __str._M_limit(__pos2, __n2);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos1,
         __str.data() + __pos2, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(const _CharT* __s) const noexcept
    {
      ;
      const size_type __size = this->size();
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__size, __osize);
      int __r = traits_type::compare(_M_data(), __s, __len);
      if (!__r)
 __r = _S_compare(__size, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s) const
    {
      ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__n1, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s,
     size_type __n2) const
    {
      ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in,
        basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;
      typedef ctype<_CharT> __ctype_type;
      typedef typename __ctype_type::ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       __str.erase();
       _CharT __buf[128];
       __size_type __len = 0;
       const streamsize __w = __in.width();
       const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)
                                : __str.max_size();
       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(__ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    if (__len == sizeof(__buf) / sizeof(_CharT))
      {
        __str.append(__buf, sizeof(__buf) / sizeof(_CharT));
        __len = 0;
      }
    __buf[__len++] = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }
       __str.append(__buf, __len);

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }

      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __in,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str.max_size();
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, true);
      if (__cerb)
 {
   try
     {
       __str.erase();
       const __int_type __idelim = _Traits::to_int_type(__delim);
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !_Traits::eq_int_type(__c, __idelim))
  {
    __str += _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       else if (_Traits::eq_int_type(__c, __idelim))
  {
    ++__extracted;
    __in.rdbuf()->sbumpc();
  }
       else
  __err |= __ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }
      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }
# 1607 "/usr/include/c++/7/bits/basic_string.tcc" 3
  extern template class basic_string<char>;







  extern template
    basic_istream<char>&
    operator>>(basic_istream<char>&, string&);
  extern template
    basic_ostream<char>&
    operator<<(basic_ostream<char>&, const string&);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&, char);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&);



  extern template class basic_string<wchar_t>;





  extern template
    basic_istream<wchar_t>&
    operator>>(basic_istream<wchar_t>&, wstring&);
  extern template
    basic_ostream<wchar_t>&
    operator<<(basic_ostream<wchar_t>&, const wstring&);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&, wchar_t);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&);




}
# 54 "/usr/include/c++/7/string" 2 3
# 40 "/usr/include/c++/7/stdexcept" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{





  struct __cow_string
  {
    union {
      const char* _M_p;
      char _M_bytes[sizeof(const char*)];
    };

    __cow_string();
    __cow_string(const std::string&);
    __cow_string(const char*, size_t);
    __cow_string(const __cow_string&) noexcept;
    __cow_string& operator=(const __cow_string&) noexcept;
    ~__cow_string();

    __cow_string(__cow_string&&) noexcept;
    __cow_string& operator=(__cow_string&&) noexcept;

  };

  typedef basic_string<char> __sso_string;
# 113 "/usr/include/c++/7/stdexcept" 3
  class logic_error : public exception
  {
    __cow_string _M_msg;

  public:

    explicit
    logic_error(const string& __arg) ;


    explicit
    logic_error(const char*) ;



    logic_error(const logic_error&) noexcept;
    logic_error& operator=(const logic_error&) noexcept;


    virtual ~logic_error() noexcept;



    virtual const char*
    what() const noexcept;





  };



  class domain_error : public logic_error
  {
  public:
    explicit domain_error(const string& __arg) ;

    explicit domain_error(const char*) ;

    virtual ~domain_error() noexcept;
  };


  class invalid_argument : public logic_error
  {
  public:
    explicit invalid_argument(const string& __arg) ;

    explicit invalid_argument(const char*) ;

    virtual ~invalid_argument() noexcept;
  };



  class length_error : public logic_error
  {
  public:
    explicit length_error(const string& __arg) ;

    explicit length_error(const char*) ;

    virtual ~length_error() noexcept;
  };



  class out_of_range : public logic_error
  {
  public:
    explicit out_of_range(const string& __arg) ;

    explicit out_of_range(const char*) ;

    virtual ~out_of_range() noexcept;
  };






  class runtime_error : public exception
  {
    __cow_string _M_msg;

  public:

    explicit
    runtime_error(const string& __arg) ;


    explicit
    runtime_error(const char*) ;



    runtime_error(const runtime_error&) noexcept;
    runtime_error& operator=(const runtime_error&) noexcept;


    virtual ~runtime_error() noexcept;



    virtual const char*
    what() const noexcept;





  };


  class range_error : public runtime_error
  {
  public:
    explicit range_error(const string& __arg) ;

    explicit range_error(const char*) ;

    virtual ~range_error() noexcept;
  };


  class overflow_error : public runtime_error
  {
  public:
    explicit overflow_error(const string& __arg) ;

    explicit overflow_error(const char*) ;

    virtual ~overflow_error() noexcept;
  };


  class underflow_error : public runtime_error
  {
  public:
    explicit underflow_error(const string& __arg) ;

    explicit underflow_error(const char*) ;

    virtual ~underflow_error() noexcept;
  };




}
# 40 "/usr/include/c++/7/array" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Tp, std::size_t _Nm>
    struct __array_traits
    {
      typedef _Tp _Type[_Nm];
      typedef __is_swappable<_Tp> _Is_swappable;
      typedef __is_nothrow_swappable<_Tp> _Is_nothrow_swappable;

      static constexpr _Tp&
      _S_ref(const _Type& __t, std::size_t __n) noexcept
      { return const_cast<_Tp&>(__t[__n]); }

      static constexpr _Tp*
      _S_ptr(const _Type& __t) noexcept
      { return const_cast<_Tp*>(__t); }
    };

 template<typename _Tp>
   struct __array_traits<_Tp, 0>
   {
     struct _Type { };
     typedef true_type _Is_swappable;
     typedef true_type _Is_nothrow_swappable;

     static constexpr _Tp&
     _S_ref(const _Type&, std::size_t) noexcept
     { return *static_cast<_Tp*>(nullptr); }

     static constexpr _Tp*
     _S_ptr(const _Type&) noexcept
     { return nullptr; }
   };
# 93 "/usr/include/c++/7/array" 3
  template<typename _Tp, std::size_t _Nm>
    struct array
    {
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef const value_type* const_pointer;
      typedef value_type& reference;
      typedef const value_type& const_reference;
      typedef value_type* iterator;
      typedef const value_type* const_iterator;
      typedef std::size_t size_type;
      typedef std::ptrdiff_t difference_type;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;


      typedef std::__array_traits<_Tp, _Nm> _AT_Type;
      typename _AT_Type::_Type _M_elems;




      void
      fill(const value_type& __u)
      { std::fill_n(begin(), size(), __u); }

      void
      swap(array& __other)
      noexcept(_AT_Type::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }


      iterator
      begin() noexcept
      { return iterator(data()); }

      const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      iterator
      end() noexcept
      { return iterator(data() + _Nm); }

      const_iterator
      end() const noexcept
      { return const_iterator(data() + _Nm); }

      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }

      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }

      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }

      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }

      const_iterator
      cbegin() const noexcept
      { return const_iterator(data()); }

      const_iterator
      cend() const noexcept
      { return const_iterator(data() + _Nm); }

      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(end()); }

      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(begin()); }


      constexpr size_type
      size() const noexcept { return _Nm; }

      constexpr size_type
      max_size() const noexcept { return _Nm; }

      constexpr bool
      empty() const noexcept { return size() == 0; }


      reference
      operator[](size_type __n) noexcept
      { return _AT_Type::_S_ref(_M_elems, __n); }

      constexpr const_reference
      operator[](size_type __n) const noexcept
      { return _AT_Type::_S_ref(_M_elems, __n); }

      reference
      at(size_type __n)
      {
 if (__n >= _Nm)
   std::__throw_out_of_range_fmt(("array::at: __n (which is %zu) " ">= _Nm (which is %zu)")
                                 ,
     __n, _Nm);
 return _AT_Type::_S_ref(_M_elems, __n);
      }

      constexpr const_reference
      at(size_type __n) const
      {


 return __n < _Nm ? _AT_Type::_S_ref(_M_elems, __n)
   : (std::__throw_out_of_range_fmt(("array::at: __n (which is %zu) " ">= _Nm (which is %zu)")
                                    ,
        __n, _Nm),
      _AT_Type::_S_ref(_M_elems, 0));
      }

      reference
      front() noexcept
      { return *begin(); }

      constexpr const_reference
      front() const noexcept
      { return _AT_Type::_S_ref(_M_elems, 0); }

      reference
      back() noexcept
      { return _Nm ? *(end() - 1) : *end(); }

      constexpr const_reference
      back() const noexcept
      {
 return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
             : _AT_Type::_S_ref(_M_elems, 0);
      }

      pointer
      data() noexcept
      { return _AT_Type::_S_ptr(_M_elems); }

      const_pointer
      data() const noexcept
      { return _AT_Type::_S_ptr(_M_elems); }
    };
# 250 "/usr/include/c++/7/array" 3
  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return std::equal(__one.begin(), __one.end(), __two.begin()); }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator!=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one == __two); }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator<(const array<_Tp, _Nm>& __a, const array<_Tp, _Nm>& __b)
    {
      return std::lexicographical_compare(__a.begin(), __a.end(),
       __b.begin(), __b.end());
    }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator>(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return __two < __one; }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator<=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one > __two); }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator>=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one < __two); }


  template<typename _Tp, std::size_t _Nm>
    inline


    typename enable_if<
      std::__array_traits<_Tp, _Nm>::_Is_swappable::value
    >::type



    swap(array<_Tp, _Nm>& __one, array<_Tp, _Nm>& __two)
    noexcept(noexcept(__one.swap(__two)))
    { __one.swap(__two); }


  template<typename _Tp, std::size_t _Nm>
    typename enable_if<
      !std::__array_traits<_Tp, _Nm>::_Is_swappable::value>::type
    swap(array<_Tp, _Nm>&, array<_Tp, _Nm>&) = delete;


  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    constexpr _Tp&
    get(array<_Tp, _Nm>& __arr) noexcept
    {
      static_assert(_Int < _Nm, "array index is within bounds");
      return std::__array_traits<_Tp, _Nm>::
 _S_ref(__arr._M_elems, _Int);
    }

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    constexpr _Tp&&
    get(array<_Tp, _Nm>&& __arr) noexcept
    {
      static_assert(_Int < _Nm, "array index is within bounds");
      return std::move(std::get<_Int>(__arr));
    }

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    constexpr const _Tp&
    get(const array<_Tp, _Nm>& __arr) noexcept
    {
      static_assert(_Int < _Nm, "array index is within bounds");
      return std::__array_traits<_Tp, _Nm>::
 _S_ref(__arr._M_elems, _Int);
    }


}

namespace std __attribute__ ((__visibility__ ("default")))
{





  template<typename _Tp>
    class tuple_size;


  template<typename _Tp, std::size_t _Nm>
    struct tuple_size<std::array<_Tp, _Nm>>
    : public integral_constant<std::size_t, _Nm> { };


  template<std::size_t _Int, typename _Tp>
    class tuple_element;


  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    struct tuple_element<_Int, std::array<_Tp, _Nm>>
    {
      static_assert(_Int < _Nm, "index is out of bounds");
      typedef _Tp type;
    };

  template<typename _Tp, std::size_t _Nm>
    struct __is_tuple_like_impl<std::array<_Tp, _Nm>> : true_type
    { };


}
# 40 "/usr/include/c++/7/tuple" 2 3
# 1 "/usr/include/c++/7/bits/uses_allocator.h" 1 3
# 35 "/usr/include/c++/7/bits/uses_allocator.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __erased_type { };

  template<typename _Alloc, typename _Tp>
    using __is_erased_or_convertible
      = __or_<is_same<_Tp, __erased_type>, is_convertible<_Alloc, _Tp>>;


  struct allocator_arg_t { explicit allocator_arg_t() = default; };

  constexpr allocator_arg_t allocator_arg =
    allocator_arg_t();

  template<typename _Tp, typename _Alloc, typename = __void_t<>>
    struct __uses_allocator_helper
    : false_type { };

  template<typename _Tp, typename _Alloc>
    struct __uses_allocator_helper<_Tp, _Alloc,
       __void_t<typename _Tp::allocator_type>>
    : __is_erased_or_convertible<_Alloc, typename _Tp::allocator_type>::type
    { };


  template<typename _Tp, typename _Alloc>
    struct uses_allocator
    : __uses_allocator_helper<_Tp, _Alloc>::type
    { };

  struct __uses_alloc_base { };

  struct __uses_alloc0 : __uses_alloc_base
  {
    struct _Sink { void operator=(const void*) { } } _M_a;
  };

  template<typename _Alloc>
    struct __uses_alloc1 : __uses_alloc_base { const _Alloc* _M_a; };

  template<typename _Alloc>
    struct __uses_alloc2 : __uses_alloc_base { const _Alloc* _M_a; };

  template<bool, typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc;

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc<true, _Tp, _Alloc, _Args...>
    : conditional<
        is_constructible<_Tp, allocator_arg_t, _Alloc, _Args...>::value,
        __uses_alloc1<_Alloc>,
        __uses_alloc2<_Alloc>>::type
    {
      static_assert(__or_<
   is_constructible<_Tp, allocator_arg_t, _Alloc, _Args...>,
   is_constructible<_Tp, _Args..., _Alloc>>::value, "construction with"
   " an allocator must be possible if uses_allocator is true");
    };

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc<false, _Tp, _Alloc, _Args...>
    : __uses_alloc0 { };

  template<typename _Tp, typename _Alloc, typename... _Args>
    using __uses_alloc_t =
      __uses_alloc<uses_allocator<_Tp, _Alloc>::value, _Tp, _Alloc, _Args...>;

  template<typename _Tp, typename _Alloc, typename... _Args>
    inline __uses_alloc_t<_Tp, _Alloc, _Args...>
    __use_alloc(const _Alloc& __a)
    {
      __uses_alloc_t<_Tp, _Alloc, _Args...> __ret;
      __ret._M_a = std::__addressof(__a);
      return __ret;
    }

  template<typename _Tp, typename _Alloc, typename... _Args>
    void
    __use_alloc(const _Alloc&&) = delete;







  template<template<typename...> class _Predicate,
    typename _Tp, typename _Alloc, typename... _Args>
    struct __is_uses_allocator_predicate
    : conditional<uses_allocator<_Tp, _Alloc>::value,
      __or_<_Predicate<_Tp, allocator_arg_t, _Alloc, _Args...>,
     _Predicate<_Tp, _Args..., _Alloc>>,
      _Predicate<_Tp, _Args...>>::type { };

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __is_uses_allocator_constructible
    : __is_uses_allocator_predicate<is_constructible, _Tp, _Alloc, _Args...>
    { };


  template<typename _Tp, typename _Alloc, typename... _Args>
    constexpr bool __is_uses_allocator_constructible_v =
      __is_uses_allocator_constructible<_Tp, _Alloc, _Args...>::value;


  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __is_nothrow_uses_allocator_constructible
    : __is_uses_allocator_predicate<is_nothrow_constructible,
        _Tp, _Alloc, _Args...>
    { };



  template<typename _Tp, typename _Alloc, typename... _Args>
    constexpr bool
    __is_nothrow_uses_allocator_constructible_v =
      __is_nothrow_uses_allocator_constructible<_Tp, _Alloc, _Args...>::value;


  template<typename _Tp, typename... _Args>
    void __uses_allocator_construct_impl(__uses_alloc0 __a, _Tp* __ptr,
      _Args&&... __args)
    { ::new ((void*)__ptr) _Tp(std::forward<_Args>(__args)...); }

  template<typename _Tp, typename _Alloc, typename... _Args>
    void __uses_allocator_construct_impl(__uses_alloc1<_Alloc> __a, _Tp* __ptr,
      _Args&&... __args)
    {
      ::new ((void*)__ptr) _Tp(allocator_arg, *__a._M_a,
          std::forward<_Args>(__args)...);
    }

  template<typename _Tp, typename _Alloc, typename... _Args>
    void __uses_allocator_construct_impl(__uses_alloc2<_Alloc> __a, _Tp* __ptr,
      _Args&&... __args)
    { ::new ((void*)__ptr) _Tp(std::forward<_Args>(__args)..., *__a._M_a); }

  template<typename _Tp, typename _Alloc, typename... _Args>
    void __uses_allocator_construct(const _Alloc& __a, _Tp* __ptr,
        _Args&&... __args)
    {
      __uses_allocator_construct_impl(__use_alloc<_Tp, _Alloc, _Args...>(__a),
          __ptr, std::forward<_Args>(__args)...);
    }


}
# 41 "/usr/include/c++/7/tuple" 2 3
# 1 "/usr/include/c++/7/bits/invoke.h" 1 3
# 33 "/usr/include/c++/7/bits/invoke.h" 3
       
# 34 "/usr/include/c++/7/bits/invoke.h" 3







namespace std __attribute__ ((__visibility__ ("default")))
{

# 52 "/usr/include/c++/7/bits/invoke.h" 3
  template<typename _Tp, typename _Up = typename __inv_unwrap<_Tp>::type>
    constexpr _Up&&
    __invfwd(typename remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
    _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
    _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
    }

  template<typename _Res, typename _MemPtr, typename _Tp>
    constexpr _Res
    __invoke_impl(__invoke_memobj_ref, _MemPtr&& __f, _Tp&& __t)
    { return __invfwd<_Tp>(__t).*__f; }

  template<typename _Res, typename _MemPtr, typename _Tp>
    constexpr _Res
    __invoke_impl(__invoke_memobj_deref, _MemPtr&& __f, _Tp&& __t)
    { return (*std::forward<_Tp>(__t)).*__f; }


  template<typename _Callable, typename... _Args>
    constexpr typename __invoke_result<_Callable, _Args...>::type
    __invoke(_Callable&& __fn, _Args&&... __args)
    noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
     std::forward<_Args>(__args)...);
    }


}
# 42 "/usr/include/c++/7/tuple" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename... _Elements>
    class tuple;

  template<typename _Tp>
    struct __is_empty_non_tuple : is_empty<_Tp> { };


  template<typename _El0, typename... _El>
    struct __is_empty_non_tuple<tuple<_El0, _El...>> : false_type { };


  template<typename _Tp>
    using __empty_not_final
    = typename conditional<__is_final(_Tp), false_type,
      __is_empty_non_tuple<_Tp>>::type;

  template<std::size_t _Idx, typename _Head,
    bool = __empty_not_final<_Head>::value>
    struct _Head_base;

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, true>
    : public _Head
    {
      constexpr _Head_base()
      : _Head() { }

      constexpr _Head_base(const _Head& __h)
      : _Head(__h) { }

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
 : _Head(std::forward<_UHead>(__h)) { }

      _Head_base(allocator_arg_t, __uses_alloc0)
      : _Head() { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
 : _Head(allocator_arg, *__a._M_a) { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)
 : _Head(*__a._M_a) { }

      template<typename _UHead>
 _Head_base(__uses_alloc0, _UHead&& __uhead)
 : _Head(std::forward<_UHead>(__uhead)) { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
 : _Head(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead)) { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
 : _Head(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b; }

      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }

      constexpr _Head_base(const _Head& __h)
      : _M_head_impl(__h) { }

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
 : _M_head_impl(std::forward<_UHead>(__h)) { }

      _Head_base(allocator_arg_t, __uses_alloc0)
      : _M_head_impl() { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
 : _M_head_impl(allocator_arg, *__a._M_a) { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)
 : _M_head_impl(*__a._M_a) { }

      template<typename _UHead>
 _Head_base(__uses_alloc0, _UHead&& __uhead)
 : _M_head_impl(std::forward<_UHead>(__uhead)) { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
 : _M_head_impl(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead))
 { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
 : _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }

      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }

      _Head _M_head_impl;
    };
# 176 "/usr/include/c++/7/tuple" 3
  template<std::size_t _Idx, typename... _Elements>
    struct _Tuple_impl;






  template<std::size_t _Idx, typename _Head, typename... _Tail>
    struct _Tuple_impl<_Idx, _Head, _Tail...>
    : public _Tuple_impl<_Idx + 1, _Tail...>,
      private _Head_base<_Idx, _Head>
    {
      template<std::size_t, typename...> friend class _Tuple_impl;

      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head> _Base;

      static constexpr _Head&
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr _Inherited&
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }

      static constexpr const _Inherited&
      _M_tail(const _Tuple_impl& __t) noexcept { return __t; }

      constexpr _Tuple_impl()
      : _Inherited(), _Base() { }

      explicit
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail, typename = typename
               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type>
        explicit
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 : _Inherited(std::forward<_UTail>(__tail)...),
   _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
      noexcept(__and_<is_nothrow_move_constructible<_Head>,
               is_nothrow_move_constructible<_Inherited>>::value)
      : _Inherited(std::move(_M_tail(__in))),
 _Base(std::forward<_Head>(_M_head(__in))) { }

      template<typename... _UElements>
        constexpr _Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)
 : _Inherited(_Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),
   _Base(_Tuple_impl<_Idx, _UElements...>::_M_head(__in)) { }

      template<typename _UHead, typename... _UTails>
        constexpr _Tuple_impl(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 : _Inherited(std::move
       (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
   _Base(std::forward<_UHead>
  (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a),
          _Base(__tag, __use_alloc<_Head>(__a)) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
      const _Head& __head, const _Tail&... __tail)
 : _Inherited(__tag, __a, __tail...),
          _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head) { }

      template<typename _Alloc, typename _UHead, typename... _UTail,
               typename = typename enable_if<sizeof...(_Tail)
          == sizeof...(_UTail)>::type>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _UHead&& __head, _UTail&&... __tail)
 : _Inherited(__tag, __a, std::forward<_UTail>(__tail)...),
          _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
         std::forward<_UHead>(__head)) { }

      template<typename _Alloc>
        _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             const _Tuple_impl& __in)
 : _Inherited(__tag, __a, _M_tail(__in)),
          _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in)) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _Tuple_impl&& __in)
 : _Inherited(__tag, __a, std::move(_M_tail(__in))),
   _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
         std::forward<_Head>(_M_head(__in))) { }

      template<typename _Alloc, typename... _UElements>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             const _Tuple_impl<_Idx, _UElements...>& __in)
 : _Inherited(__tag, __a,
       _Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),
   _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
  _Tuple_impl<_Idx, _UElements...>::_M_head(__in)) { }

      template<typename _Alloc, typename _UHead, typename... _UTails>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 : _Inherited(__tag, __a, std::move
       (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
   _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
                std::forward<_UHead>
  (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }

      _Tuple_impl&
      operator=(const _Tuple_impl& __in)
      {
 _M_head(*this) = _M_head(__in);
 _M_tail(*this) = _M_tail(__in);
 return *this;
      }

      _Tuple_impl&
      operator=(_Tuple_impl&& __in)
      noexcept(__and_<is_nothrow_move_assignable<_Head>,
               is_nothrow_move_assignable<_Inherited>>::value)
      {
 _M_head(*this) = std::forward<_Head>(_M_head(__in));
 _M_tail(*this) = std::move(_M_tail(__in));
 return *this;
      }

      template<typename... _UElements>
        _Tuple_impl&
        operator=(const _Tuple_impl<_Idx, _UElements...>& __in)
        {
   _M_head(*this) = _Tuple_impl<_Idx, _UElements...>::_M_head(__in);
   _M_tail(*this) = _Tuple_impl<_Idx, _UElements...>::_M_tail(__in);
   return *this;
 }

      template<typename _UHead, typename... _UTails>
        _Tuple_impl&
        operator=(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
        {
   _M_head(*this) = std::forward<_UHead>
     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in));
   _M_tail(*this) = std::move
     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in));
   return *this;
 }

    protected:
      void
      _M_swap(_Tuple_impl& __in)
      noexcept(__is_nothrow_swappable<_Head>::value
               && noexcept(_M_tail(__in)._M_swap(_M_tail(__in))))
      {
 using std::swap;
 swap(_M_head(*this), _M_head(__in));
 _Inherited::_M_swap(_M_tail(__in));
      }
    };


  template<std::size_t _Idx, typename _Head>
    struct _Tuple_impl<_Idx, _Head>
    : private _Head_base<_Idx, _Head>
    {
      template<std::size_t, typename...> friend class _Tuple_impl;

      typedef _Head_base<_Idx, _Head> _Base;

      static constexpr _Head&
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      constexpr _Tuple_impl()
      : _Base() { }

      explicit
      constexpr _Tuple_impl(const _Head& __head)
      : _Base(__head) { }

      template<typename _UHead>
        explicit
        constexpr _Tuple_impl(_UHead&& __head)
 : _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
      noexcept(is_nothrow_move_constructible<_Head>::value)
      : _Base(std::forward<_Head>(_M_head(__in))) { }

      template<typename _UHead>
        constexpr _Tuple_impl(const _Tuple_impl<_Idx, _UHead>& __in)
 : _Base(_Tuple_impl<_Idx, _UHead>::_M_head(__in)) { }

      template<typename _UHead>
        constexpr _Tuple_impl(_Tuple_impl<_Idx, _UHead>&& __in)
 : _Base(std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
 { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)
 : _Base(__tag, __use_alloc<_Head>(__a)) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
      const _Head& __head)
 : _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head) { }

      template<typename _Alloc, typename _UHead>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _UHead&& __head)
 : _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
         std::forward<_UHead>(__head)) { }

      template<typename _Alloc>
        _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             const _Tuple_impl& __in)
 : _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in)) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _Tuple_impl&& __in)
 : _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
         std::forward<_Head>(_M_head(__in))) { }

      template<typename _Alloc, typename _UHead>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             const _Tuple_impl<_Idx, _UHead>& __in)
 : _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
  _Tuple_impl<_Idx, _UHead>::_M_head(__in)) { }

      template<typename _Alloc, typename _UHead>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _Tuple_impl<_Idx, _UHead>&& __in)
 : _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
                std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
 { }

      _Tuple_impl&
      operator=(const _Tuple_impl& __in)
      {
 _M_head(*this) = _M_head(__in);
 return *this;
      }

      _Tuple_impl&
      operator=(_Tuple_impl&& __in)
      noexcept(is_nothrow_move_assignable<_Head>::value)
      {
 _M_head(*this) = std::forward<_Head>(_M_head(__in));
 return *this;
      }

      template<typename _UHead>
        _Tuple_impl&
        operator=(const _Tuple_impl<_Idx, _UHead>& __in)
        {
   _M_head(*this) = _Tuple_impl<_Idx, _UHead>::_M_head(__in);
   return *this;
 }

      template<typename _UHead>
        _Tuple_impl&
        operator=(_Tuple_impl<_Idx, _UHead>&& __in)
        {
   _M_head(*this)
     = std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in));
   return *this;
 }

    protected:
      void
      _M_swap(_Tuple_impl& __in)
      noexcept(__is_nothrow_swappable<_Head>::value)
      {
 using std::swap;
 swap(_M_head(*this), _M_head(__in));
      }
    };



  template<bool, typename... _Elements>
  struct _TC
  {
    template<typename... _UElements>
    static constexpr bool _ConstructibleTuple()
    {
      return __and_<is_constructible<_Elements, const _UElements&>...>::value;
    }

    template<typename... _UElements>
    static constexpr bool _ImplicitlyConvertibleTuple()
    {
      return __and_<is_convertible<const _UElements&, _Elements>...>::value;
    }

    template<typename... _UElements>
    static constexpr bool _MoveConstructibleTuple()
    {
      return __and_<is_constructible<_Elements, _UElements&&>...>::value;
    }

    template<typename... _UElements>
    static constexpr bool _ImplicitlyMoveConvertibleTuple()
    {
      return __and_<is_convertible<_UElements&&, _Elements>...>::value;
    }

    template<typename _SrcTuple>
    static constexpr bool _NonNestedTuple()
    {
      return __and_<__not_<is_same<tuple<_Elements...>,
                                   typename remove_cv<
                                     typename remove_reference<_SrcTuple>::type
                                   >::type>>,
                     __not_<is_convertible<_SrcTuple, _Elements...>>,
                     __not_<is_constructible<_Elements..., _SrcTuple>>
              >::value;
    }
    template<typename... _UElements>
    static constexpr bool _NotSameTuple()
    {
      return __not_<is_same<tuple<_Elements...>,
        typename remove_const<
          typename remove_reference<_UElements...>::type
          >::type>>::value;
    }
  };

  template<typename... _Elements>
  struct _TC<false, _Elements...>
  {
    template<typename... _UElements>
    static constexpr bool _ConstructibleTuple()
    {
      return false;
    }

    template<typename... _UElements>
    static constexpr bool _ImplicitlyConvertibleTuple()
    {
      return false;
    }

    template<typename... _UElements>
    static constexpr bool _MoveConstructibleTuple()
    {
      return false;
    }

    template<typename... _UElements>
    static constexpr bool _ImplicitlyMoveConvertibleTuple()
    {
      return false;
    }

    template<typename... _UElements>
    static constexpr bool _NonNestedTuple()
    {
      return true;
    }
    template<typename... _UElements>
    static constexpr bool _NotSameTuple()
    {
      return true;
    }
  };


  template<typename... _Elements>
    class tuple : public _Tuple_impl<0, _Elements...>
    {
      typedef _Tuple_impl<0, _Elements...> _Inherited;



      template<typename _Dummy>
      struct _TC2
      {
        static constexpr bool _DefaultConstructibleTuple()
        {
          return __and_<is_default_constructible<_Elements>...>::value;
        }
        static constexpr bool _ImplicitlyDefaultConstructibleTuple()
        {
          return __and_<__is_implicitly_default_constructible<_Elements>...>
            ::value;
        }
      };

    public:
      template<typename _Dummy = void,
               typename enable_if<_TC2<_Dummy>::
                                    _ImplicitlyDefaultConstructibleTuple(),
                                  bool>::type = true>
      constexpr tuple()
      : _Inherited() { }

      template<typename _Dummy = void,
               typename enable_if<_TC2<_Dummy>::
                                    _DefaultConstructibleTuple()
                                  &&
                                  !_TC2<_Dummy>::
                                    _ImplicitlyDefaultConstructibleTuple(),
                                  bool>::type = false>
      explicit constexpr tuple()
      : _Inherited() { }



      template<typename _Dummy> using _TCC =
        _TC<is_same<_Dummy, void>::value,
            _Elements...>;

      template<typename _Dummy = void,
               typename enable_if<
                 _TCC<_Dummy>::template
                   _ConstructibleTuple<_Elements...>()
                 && _TCC<_Dummy>::template
                   _ImplicitlyConvertibleTuple<_Elements...>()
                 && (sizeof...(_Elements) >= 1),
               bool>::type=true>
        constexpr tuple(const _Elements&... __elements)
      : _Inherited(__elements...) { }

      template<typename _Dummy = void,
               typename enable_if<
                 _TCC<_Dummy>::template
                   _ConstructibleTuple<_Elements...>()
                 && !_TCC<_Dummy>::template
                   _ImplicitlyConvertibleTuple<_Elements...>()
                 && (sizeof...(_Elements) >= 1),
               bool>::type=false>
      explicit constexpr tuple(const _Elements&... __elements)
      : _Inherited(__elements...) { }



      template<typename... _UElements> using _TMC =
                  _TC<(sizeof...(_Elements) == sizeof...(_UElements))
        && (_TC<(sizeof...(_UElements)==1), _Elements...>::
     template _NotSameTuple<_UElements...>()),
                      _Elements...>;



      template<typename... _UElements> using _TMCT =
                  _TC<(sizeof...(_Elements) == sizeof...(_UElements))
        && !is_same<tuple<_Elements...>,
      tuple<_UElements...>>::value,
                      _Elements...>;

      template<typename... _UElements, typename
        enable_if<
    _TMC<_UElements...>::template
                    _MoveConstructibleTuple<_UElements...>()
                  && _TMC<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>()
                  && (sizeof...(_Elements) >= 1),
        bool>::type=true>
        constexpr tuple(_UElements&&... __elements)
        : _Inherited(std::forward<_UElements>(__elements)...) { }

      template<typename... _UElements, typename
        enable_if<
    _TMC<_UElements...>::template
                    _MoveConstructibleTuple<_UElements...>()
                  && !_TMC<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>()
                  && (sizeof...(_Elements) >= 1),
        bool>::type=false>
        explicit constexpr tuple(_UElements&&... __elements)
 : _Inherited(std::forward<_UElements>(__elements)...) { }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;



      template<typename _Dummy> using _TNTC =
        _TC<is_same<_Dummy, void>::value && sizeof...(_Elements) == 1,
            _Elements...>;

      template<typename... _UElements, typename _Dummy = void, typename
        enable_if<_TMCT<_UElements...>::template
                    _ConstructibleTuple<_UElements...>()
                  && _TMCT<_UElements...>::template
                    _ImplicitlyConvertibleTuple<_UElements...>()
                  && _TNTC<_Dummy>::template
                    _NonNestedTuple<const tuple<_UElements...>&>(),
        bool>::type=true>
        constexpr tuple(const tuple<_UElements...>& __in)
        : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
        { }

      template<typename... _UElements, typename _Dummy = void, typename
        enable_if<_TMCT<_UElements...>::template
                    _ConstructibleTuple<_UElements...>()
                  && !_TMCT<_UElements...>::template
                    _ImplicitlyConvertibleTuple<_UElements...>()
                  && _TNTC<_Dummy>::template
                    _NonNestedTuple<const tuple<_UElements...>&>(),
        bool>::type=false>
        explicit constexpr tuple(const tuple<_UElements...>& __in)
        : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
        { }

      template<typename... _UElements, typename _Dummy = void, typename
        enable_if<_TMCT<_UElements...>::template
                    _MoveConstructibleTuple<_UElements...>()
                  && _TMCT<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>()
                  && _TNTC<_Dummy>::template
                    _NonNestedTuple<tuple<_UElements...>&&>(),
        bool>::type=true>
        constexpr tuple(tuple<_UElements...>&& __in)
        : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }

      template<typename... _UElements, typename _Dummy = void, typename
        enable_if<_TMCT<_UElements...>::template
                    _MoveConstructibleTuple<_UElements...>()
                  && !_TMCT<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>()
                  && _TNTC<_Dummy>::template
                    _NonNestedTuple<tuple<_UElements...>&&>(),
        bool>::type=false>
        explicit constexpr tuple(tuple<_UElements...>&& __in)
        : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }



      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a) { }

      template<typename _Alloc, typename _Dummy = void,
               typename enable_if<
                 _TCC<_Dummy>::template
                   _ConstructibleTuple<_Elements...>()
                 && _TCC<_Dummy>::template
                   _ImplicitlyConvertibleTuple<_Elements...>(),
               bool>::type=true>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _Elements&... __elements)
 : _Inherited(__tag, __a, __elements...) { }

      template<typename _Alloc, typename _Dummy = void,
               typename enable_if<
                 _TCC<_Dummy>::template
                   _ConstructibleTuple<_Elements...>()
                 && !_TCC<_Dummy>::template
                   _ImplicitlyConvertibleTuple<_Elements...>(),
               bool>::type=false>
 explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
                       const _Elements&... __elements)
 : _Inherited(__tag, __a, __elements...) { }

      template<typename _Alloc, typename... _UElements, typename
        enable_if<_TMC<_UElements...>::template
                    _MoveConstructibleTuple<_UElements...>()
                  && _TMC<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>(),
        bool>::type=true>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       _UElements&&... __elements)
 : _Inherited(__tag, __a, std::forward<_UElements>(__elements)...)
        { }

      template<typename _Alloc, typename... _UElements, typename
        enable_if<_TMC<_UElements...>::template
                    _MoveConstructibleTuple<_UElements...>()
                  && !_TMC<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>(),
        bool>::type=false>
 explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
       _UElements&&... __elements)
 : _Inherited(__tag, __a, std::forward<_UElements>(__elements)...)
        { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)
 : _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)
 : _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }

      template<typename _Alloc, typename _Dummy = void,
        typename... _UElements, typename
        enable_if<_TMCT<_UElements...>::template
                    _ConstructibleTuple<_UElements...>()
                  && _TMCT<_UElements...>::template
                    _ImplicitlyConvertibleTuple<_UElements...>()
                  && _TNTC<_Dummy>::template
                    _NonNestedTuple<tuple<_UElements...>&&>(),
        bool>::type=true>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_UElements...>& __in)
 : _Inherited(__tag, __a,
              static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 { }

      template<typename _Alloc, typename _Dummy = void,
        typename... _UElements, typename
        enable_if<_TMCT<_UElements...>::template
                    _ConstructibleTuple<_UElements...>()
                  && !_TMCT<_UElements...>::template
                    _ImplicitlyConvertibleTuple<_UElements...>()
                  && _TNTC<_Dummy>::template
                    _NonNestedTuple<tuple<_UElements...>&&>(),
        bool>::type=false>
 explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_UElements...>& __in)
 : _Inherited(__tag, __a,
              static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 { }

      template<typename _Alloc, typename _Dummy = void,
        typename... _UElements, typename
        enable_if<_TMCT<_UElements...>::template
                    _MoveConstructibleTuple<_UElements...>()
                  && _TMCT<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>()
                  && _TNTC<_Dummy>::template
                    _NonNestedTuple<tuple<_UElements...>&&>(),
        bool>::type=true>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       tuple<_UElements...>&& __in)
 : _Inherited(__tag, __a,
              static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
 { }

      template<typename _Alloc, typename _Dummy = void,
        typename... _UElements, typename
        enable_if<_TMCT<_UElements...>::template
                    _MoveConstructibleTuple<_UElements...>()
                  && !_TMCT<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>()
                  && _TNTC<_Dummy>::template
                    _NonNestedTuple<tuple<_UElements...>&&>(),
        bool>::type=false>
 explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
       tuple<_UElements...>&& __in)
 : _Inherited(__tag, __a,
              static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
 { }

      tuple&
      operator=(const tuple& __in)
      {
 static_cast<_Inherited&>(*this) = __in;
 return *this;
      }

      tuple&
      operator=(tuple&& __in)
      noexcept(is_nothrow_move_assignable<_Inherited>::value)
      {
 static_cast<_Inherited&>(*this) = std::move(__in);
 return *this;
      }

      template<typename... _UElements>
 typename
        enable_if<sizeof...(_UElements)
    == sizeof...(_Elements), tuple&>::type
        operator=(const tuple<_UElements...>& __in)
        {
   static_cast<_Inherited&>(*this) = __in;
   return *this;
 }

      template<typename... _UElements>
 typename
        enable_if<sizeof...(_UElements)
    == sizeof...(_Elements), tuple&>::type
        operator=(tuple<_UElements...>&& __in)
        {
   static_cast<_Inherited&>(*this) = std::move(__in);
   return *this;
 }

      void
      swap(tuple& __in)
      noexcept(noexcept(__in._M_swap(__in)))
      { _Inherited::_M_swap(__in); }
    };
# 889 "/usr/include/c++/7/tuple" 3
  template<>
    class tuple<>
    {
    public:
      void swap(tuple&) noexcept { }


      tuple() = default;

      template<typename _Alloc>
 tuple(allocator_arg_t, const _Alloc&) { }
      template<typename _Alloc>
 tuple(allocator_arg_t, const _Alloc&, const tuple&) { }
    };



  template<typename _T1, typename _T2>
    class tuple<_T1, _T2> : public _Tuple_impl<0, _T1, _T2>
    {
      typedef _Tuple_impl<0, _T1, _T2> _Inherited;

    public:
      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                                     __is_implicitly_default_constructible<_U1>,
                                     __is_implicitly_default_constructible<_U2>>
                                   ::value, bool>::type = true>

      constexpr tuple()
      : _Inherited() { }

      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<
                  __and_<
                    is_default_constructible<_U1>,
                    is_default_constructible<_U2>,
                    __not_<
                      __and_<__is_implicitly_default_constructible<_U1>,
                             __is_implicitly_default_constructible<_U2>>>>
                  ::value, bool>::type = false>

      explicit constexpr tuple()
      : _Inherited() { }



      template<typename _Dummy> using _TCC =
        _TC<is_same<_Dummy, void>::value, _T1, _T2>;

      template<typename _Dummy = void, typename
               enable_if<_TCC<_Dummy>::template
                           _ConstructibleTuple<_T1, _T2>()
                         && _TCC<_Dummy>::template
                           _ImplicitlyConvertibleTuple<_T1, _T2>(),
 bool>::type = true>
        constexpr tuple(const _T1& __a1, const _T2& __a2)
        : _Inherited(__a1, __a2) { }

      template<typename _Dummy = void, typename
               enable_if<_TCC<_Dummy>::template
                           _ConstructibleTuple<_T1, _T2>()
                         && !_TCC<_Dummy>::template
                           _ImplicitlyConvertibleTuple<_T1, _T2>(),
 bool>::type = false>
        explicit constexpr tuple(const _T1& __a1, const _T2& __a2)
        : _Inherited(__a1, __a2) { }



      using _TMC = _TC<true, _T1, _T2>;

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>()
           && !is_same<typename decay<_U1>::type,
         allocator_arg_t>::value,
 bool>::type = true>
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 : _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>()
           && !is_same<typename decay<_U1>::type,
         allocator_arg_t>::value,
 bool>::type = false>
        explicit constexpr tuple(_U1&& __a1, _U2&& __a2)
 : _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _ConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
        constexpr tuple(const tuple<_U1, _U2>& __in)
 : _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _ConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
        explicit constexpr tuple(const tuple<_U1, _U2>& __in)
 : _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
        constexpr tuple(tuple<_U1, _U2>&& __in)
 : _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
        explicit constexpr tuple(tuple<_U1, _U2>&& __in)
 : _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _ConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
        constexpr tuple(const pair<_U1, _U2>& __in)
 : _Inherited(__in.first, __in.second) { }

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _ConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
        explicit constexpr tuple(const pair<_U1, _U2>& __in)
 : _Inherited(__in.first, __in.second) { }

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
        constexpr tuple(pair<_U1, _U2>&& __in)
 : _Inherited(std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
        explicit constexpr tuple(pair<_U1, _U2>&& __in)
 : _Inherited(std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }



      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a) { }

      template<typename _Alloc, typename _Dummy = void,
               typename enable_if<
                 _TCC<_Dummy>::template
                   _ConstructibleTuple<_T1, _T2>()
                 && _TCC<_Dummy>::template
                   _ImplicitlyConvertibleTuple<_T1, _T2>(),
               bool>::type=true>

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _T1& __a1, const _T2& __a2)
 : _Inherited(__tag, __a, __a1, __a2) { }

      template<typename _Alloc, typename _Dummy = void,
               typename enable_if<
                 _TCC<_Dummy>::template
                   _ConstructibleTuple<_T1, _T2>()
                 && !_TCC<_Dummy>::template
                   _ImplicitlyConvertibleTuple<_T1, _T2>(),
               bool>::type=false>

 explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _T1& __a1, const _T2& __a2)
 : _Inherited(__tag, __a, __a1, __a2) { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
 tuple(allocator_arg_t __tag, const _Alloc& __a, _U1&& __a1, _U2&& __a2)
 : _Inherited(__tag, __a, std::forward<_U1>(__a1),
              std::forward<_U2>(__a2)) { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
 explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
                       _U1&& __a1, _U2&& __a2)
 : _Inherited(__tag, __a, std::forward<_U1>(__a1),
              std::forward<_U2>(__a2)) { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)
 : _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)
 : _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _ConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_U1, _U2>& __in)
 : _Inherited(__tag, __a,
              static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
 { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _ConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
 explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_U1, _U2>& __in)
 : _Inherited(__tag, __a,
              static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
 { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
 { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
 explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
                       tuple<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
 { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _ConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
        tuple(allocator_arg_t __tag, const _Alloc& __a,
       const pair<_U1, _U2>& __in)
 : _Inherited(__tag, __a, __in.first, __in.second) { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _ConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
        explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
       const pair<_U1, _U2>& __in)
 : _Inherited(__tag, __a, __in.first, __in.second) { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
        tuple(allocator_arg_t __tag, const _Alloc& __a, pair<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
        explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
                       pair<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }

      tuple&
      operator=(const tuple& __in)
      {
 static_cast<_Inherited&>(*this) = __in;
 return *this;
      }

      tuple&
      operator=(tuple&& __in)
      noexcept(is_nothrow_move_assignable<_Inherited>::value)
      {
 static_cast<_Inherited&>(*this) = std::move(__in);
 return *this;
      }

      template<typename _U1, typename _U2>
        tuple&
        operator=(const tuple<_U1, _U2>& __in)
        {
   static_cast<_Inherited&>(*this) = __in;
   return *this;
 }

      template<typename _U1, typename _U2>
        tuple&
        operator=(tuple<_U1, _U2>&& __in)
        {
   static_cast<_Inherited&>(*this) = std::move(__in);
   return *this;
 }

      template<typename _U1, typename _U2>
        tuple&
        operator=(const pair<_U1, _U2>& __in)
        {
   this->_M_head(*this) = __in.first;
   this->_M_tail(*this)._M_head(*this) = __in.second;
   return *this;
 }

      template<typename _U1, typename _U2>
        tuple&
        operator=(pair<_U1, _U2>&& __in)
        {
   this->_M_head(*this) = std::forward<_U1>(__in.first);
   this->_M_tail(*this)._M_head(*this) = std::forward<_U2>(__in.second);
   return *this;
 }

      void
      swap(tuple& __in)
      noexcept(noexcept(__in._M_swap(__in)))
      { _Inherited::_M_swap(__in); }
    };



  template<typename... _Elements>
    struct tuple_size<tuple<_Elements...>>
    : public integral_constant<std::size_t, sizeof...(_Elements)> { };
# 1278 "/usr/include/c++/7/tuple" 3
  template<std::size_t __i, typename _Head, typename... _Tail>
    struct tuple_element<__i, tuple<_Head, _Tail...> >
    : tuple_element<__i - 1, tuple<_Tail...> > { };




  template<typename _Head, typename... _Tail>
    struct tuple_element<0, tuple<_Head, _Tail...> >
    {
      typedef _Head type;
    };




  template<size_t __i>
    struct tuple_element<__i, tuple<>>
    {
      static_assert(__i < tuple_size<tuple<>>::value,
   "tuple index is in range");
    };

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr _Head&
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr const _Head&
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }


  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
    { return std::__get_helper<__i>(__t); }


  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
    { return std::__get_helper<__i>(__t); }


  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&&
    get(tuple<_Elements...>&& __t) noexcept
    {
      typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;
      return std::forward<__element_type&&>(std::get<__i>(__t));
    }





  template<typename _Head, size_t __i, typename... _Tail>
    constexpr _Head&
    __get_helper2(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  template<typename _Head, size_t __i, typename... _Tail>
    constexpr const _Head&
    __get_helper2(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }


  template <typename _Tp, typename... _Types>
    constexpr _Tp&
    get(tuple<_Types...>& __t) noexcept
    { return std::__get_helper2<_Tp>(__t); }


  template <typename _Tp, typename... _Types>
    constexpr _Tp&&
    get(tuple<_Types...>&& __t) noexcept
    { return std::forward<_Tp&&>(std::__get_helper2<_Tp>(__t)); }


  template <typename _Tp, typename... _Types>
    constexpr const _Tp&
    get(const tuple<_Types...>& __t) noexcept
    { return std::__get_helper2<_Tp>(__t); }



  template<typename _Tp, typename _Up, size_t __i, size_t __size>
    struct __tuple_compare
    {
      static constexpr bool
      __eq(const _Tp& __t, const _Up& __u)
      {
 return bool(std::get<__i>(__t) == std::get<__i>(__u))
   && __tuple_compare<_Tp, _Up, __i + 1, __size>::__eq(__t, __u);
      }

      static constexpr bool
      __less(const _Tp& __t, const _Up& __u)
      {
 return bool(std::get<__i>(__t) < std::get<__i>(__u))
   || (!bool(std::get<__i>(__u) < std::get<__i>(__t))
       && __tuple_compare<_Tp, _Up, __i + 1, __size>::__less(__t, __u));
      }
    };

  template<typename _Tp, typename _Up, size_t __size>
    struct __tuple_compare<_Tp, _Up, __size, __size>
    {
      static constexpr bool
      __eq(const _Tp&, const _Up&) { return true; }

      static constexpr bool
      __less(const _Tp&, const _Up&) { return false; }
    };

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator==(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    {
      static_assert(sizeof...(_TElements) == sizeof...(_UElements),
   "tuple objects can only be compared if they have equal sizes.");
      using __compare = __tuple_compare<tuple<_TElements...>,
     tuple<_UElements...>,
     0, sizeof...(_TElements)>;
      return __compare::__eq(__t, __u);
    }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator<(const tuple<_TElements...>& __t,
       const tuple<_UElements...>& __u)
    {
      static_assert(sizeof...(_TElements) == sizeof...(_UElements),
   "tuple objects can only be compared if they have equal sizes.");
      using __compare = __tuple_compare<tuple<_TElements...>,
     tuple<_UElements...>,
     0, sizeof...(_TElements)>;
      return __compare::__less(__t, __u);
    }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator!=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__t == __u); }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator>(const tuple<_TElements...>& __t,
       const tuple<_UElements...>& __u)
    { return __u < __t; }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator<=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__u < __t); }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator>=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__t < __u); }


  template<typename... _Elements>
    constexpr tuple<typename __decay_and_strip<_Elements>::__type...>
    make_tuple(_Elements&&... __args)
    {
      typedef tuple<typename __decay_and_strip<_Elements>::__type...>
 __result_type;
      return __result_type(std::forward<_Elements>(__args)...);
    }



  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }

  template<size_t, typename, typename, size_t>
    struct __make_tuple_impl;

  template<size_t _Idx, typename _Tuple, typename... _Tp, size_t _Nm>
    struct __make_tuple_impl<_Idx, tuple<_Tp...>, _Tuple, _Nm>
    : __make_tuple_impl<_Idx + 1,
   tuple<_Tp..., __tuple_element_t<_Idx, _Tuple>>,
   _Tuple, _Nm>
    { };

  template<std::size_t _Nm, typename _Tuple, typename... _Tp>
    struct __make_tuple_impl<_Nm, tuple<_Tp...>, _Tuple, _Nm>
    {
      typedef tuple<_Tp...> __type;
    };

  template<typename _Tuple>
    struct __do_make_tuple
    : __make_tuple_impl<0, tuple<>, _Tuple, std::tuple_size<_Tuple>::value>
    { };


  template<typename _Tuple>
    struct __make_tuple
    : public __do_make_tuple<typename std::remove_cv
            <typename std::remove_reference<_Tuple>::type>::type>
    { };


  template<typename...>
    struct __combine_tuples;

  template<>
    struct __combine_tuples<>
    {
      typedef tuple<> __type;
    };

  template<typename... _Ts>
    struct __combine_tuples<tuple<_Ts...>>
    {
      typedef tuple<_Ts...> __type;
    };

  template<typename... _T1s, typename... _T2s, typename... _Rem>
    struct __combine_tuples<tuple<_T1s...>, tuple<_T2s...>, _Rem...>
    {
      typedef typename __combine_tuples<tuple<_T1s..., _T2s...>,
     _Rem...>::__type __type;
    };


  template<typename... _Tpls>
    struct __tuple_cat_result
    {
      typedef typename __combine_tuples
        <typename __make_tuple<_Tpls>::__type...>::__type __type;
    };



  template<typename...>
    struct __make_1st_indices;

  template<>
    struct __make_1st_indices<>
    {
      typedef std::_Index_tuple<> __type;
    };

  template<typename _Tp, typename... _Tpls>
    struct __make_1st_indices<_Tp, _Tpls...>
    {
      typedef typename std::_Build_index_tuple<std::tuple_size<
 typename std::remove_reference<_Tp>::type>::value>::__type __type;
    };




  template<typename _Ret, typename _Indices, typename... _Tpls>
    struct __tuple_concater;

  template<typename _Ret, std::size_t... _Is, typename _Tp, typename... _Tpls>
    struct __tuple_concater<_Ret, std::_Index_tuple<_Is...>, _Tp, _Tpls...>
    {
      template<typename... _Us>
        static constexpr _Ret
        _S_do(_Tp&& __tp, _Tpls&&... __tps, _Us&&... __us)
        {
   typedef typename __make_1st_indices<_Tpls...>::__type __idx;
   typedef __tuple_concater<_Ret, __idx, _Tpls...> __next;
   return __next::_S_do(std::forward<_Tpls>(__tps)...,
          std::forward<_Us>(__us)...,
          std::get<_Is>(std::forward<_Tp>(__tp))...);
 }
    };

  template<typename _Ret>
    struct __tuple_concater<_Ret, std::_Index_tuple<>>
    {
      template<typename... _Us>
 static constexpr _Ret
 _S_do(_Us&&... __us)
        {
   return _Ret(std::forward<_Us>(__us)...);
 }
    };


  template<typename... _Tpls, typename = typename
           enable_if<__and_<__is_tuple_like<_Tpls>...>::value>::type>
    constexpr auto
    tuple_cat(_Tpls&&... __tpls)
    -> typename __tuple_cat_result<_Tpls...>::__type
    {
      typedef typename __tuple_cat_result<_Tpls...>::__type __ret;
      typedef typename __make_1st_indices<_Tpls...>::__type __idx;
      typedef __tuple_concater<__ret, __idx, _Tpls...> __concater;
      return __concater::_S_do(std::forward<_Tpls>(__tpls)...);
    }




  template<typename... _Elements>
    constexpr tuple<_Elements&...>
    tie(_Elements&... __args) noexcept
    { return tuple<_Elements&...>(__args...); }


  template<typename... _Elements>
    inline


    typename enable_if<__and_<__is_swappable<_Elements>...>::value
      >::type



    swap(tuple<_Elements...>& __x, tuple<_Elements...>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }


  template<typename... _Elements>
    typename enable_if<!__and_<__is_swappable<_Elements>...>::value>::type
    swap(tuple<_Elements...>&, tuple<_Elements...>&) = delete;






  struct _Swallow_assign
  {
    template<class _Tp>
      constexpr const _Swallow_assign&
      operator=(const _Tp&) const
      { return *this; }
  };



  constexpr _Swallow_assign ignore{};


  template<typename... _Types, typename _Alloc>
    struct uses_allocator<tuple<_Types...>, _Alloc> : true_type { };


  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      inline
      pair<_T1, _T2>::
      pair(piecewise_construct_t,
    tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
      typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
      typename _Build_index_tuple<sizeof...(_Args2)>::__type())
      { }

  template<class _T1, class _T2>
    template<typename... _Args1, std::size_t... _Indexes1,
             typename... _Args2, std::size_t... _Indexes2>
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
    _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
      { }
# 1695 "/usr/include/c++/7/tuple" 3

}
# 64 "/usr/include/c++/7/bits/stl_map.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{


  template <typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    class multimap;
# 97 "/usr/include/c++/7/bits/stl_map.h" 3
  template <typename _Key, typename _Tp, typename _Compare = std::less<_Key>,
     typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
    class map
    {
    public:
      typedef _Key key_type;
      typedef _Tp mapped_type;
      typedef std::pair<const _Key, _Tp> value_type;
      typedef _Compare key_compare;
      typedef _Alloc allocator_type;

    private:
# 120 "/usr/include/c++/7/bits/stl_map.h" 3
    public:
      class value_compare
      : public std::binary_function<value_type, value_type, bool>
      {
 friend class map<_Key, _Tp, _Compare, _Alloc>;
      protected:
 _Compare comp;

 value_compare(_Compare __c)
 : comp(__c) { }

      public:
 bool operator()(const value_type& __x, const value_type& __y) const
 { return comp(__x.first, __y.first); }
      };

    private:

      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<value_type>::other _Pair_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Select1st<value_type>,
         key_compare, _Pair_alloc_type> _Rep_type;


      _Rep_type _M_t;

      typedef __gnu_cxx::__alloc_traits<_Pair_alloc_type> _Alloc_traits;

    public:


      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Rep_type::iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;
      typedef typename _Rep_type::reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;
# 177 "/usr/include/c++/7/bits/stl_map.h" 3
      map() = default;







      explicit
      map(const _Compare& __comp,
   const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a)) { }
# 199 "/usr/include/c++/7/bits/stl_map.h" 3
      map(const map&) = default;







      map(map&&) = default;
# 220 "/usr/include/c++/7/bits/stl_map.h" 3
      map(initializer_list<value_type> __l,
   const _Compare& __comp = _Compare(),
   const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a))
      { _M_t._M_insert_unique(__l.begin(), __l.end()); }


      explicit
      map(const allocator_type& __a)
      : _M_t(_Compare(), _Pair_alloc_type(__a)) { }


      map(const map& __m, const allocator_type& __a)
      : _M_t(__m._M_t, _Pair_alloc_type(__a)) { }


      map(map&& __m, const allocator_type& __a)
      noexcept(is_nothrow_copy_constructible<_Compare>::value
        && _Alloc_traits::_S_always_equal())
      : _M_t(std::move(__m._M_t), _Pair_alloc_type(__a)) { }


      map(initializer_list<value_type> __l, const allocator_type& __a)
      : _M_t(_Compare(), _Pair_alloc_type(__a))
      { _M_t._M_insert_unique(__l.begin(), __l.end()); }


      template<typename _InputIterator>
 map(_InputIterator __first, _InputIterator __last,
     const allocator_type& __a)
 : _M_t(_Compare(), _Pair_alloc_type(__a))
 { _M_t._M_insert_unique(__first, __last); }
# 264 "/usr/include/c++/7/bits/stl_map.h" 3
      template<typename _InputIterator>
 map(_InputIterator __first, _InputIterator __last)
 : _M_t()
 { _M_t._M_insert_unique(__first, __last); }
# 281 "/usr/include/c++/7/bits/stl_map.h" 3
      template<typename _InputIterator>
 map(_InputIterator __first, _InputIterator __last,
     const _Compare& __comp,
     const allocator_type& __a = allocator_type())
 : _M_t(__comp, _Pair_alloc_type(__a))
 { _M_t._M_insert_unique(__first, __last); }







      ~map() = default;
# 310 "/usr/include/c++/7/bits/stl_map.h" 3
      map&
      operator=(const map&) = default;


      map&
      operator=(map&&) = default;
# 328 "/usr/include/c++/7/bits/stl_map.h" 3
      map&
      operator=(initializer_list<value_type> __l)
      {
 _M_t._M_assign_unique(__l.begin(), __l.end());
 return *this;
      }



      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_t.get_allocator()); }







      iterator
      begin() noexcept
      { return _M_t.begin(); }






      const_iterator
      begin() const noexcept
      { return _M_t.begin(); }






      iterator
      end() noexcept
      { return _M_t.end(); }






      const_iterator
      end() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      rbegin() noexcept
      { return _M_t.rbegin(); }






      const_reverse_iterator
      rbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      rend() noexcept
      { return _M_t.rend(); }






      const_reverse_iterator
      rend() const noexcept
      { return _M_t.rend(); }







      const_iterator
      cbegin() const noexcept
      { return _M_t.begin(); }






      const_iterator
      cend() const noexcept
      { return _M_t.end(); }






      const_reverse_iterator
      crbegin() const noexcept
      { return _M_t.rbegin(); }






      const_reverse_iterator
      crend() const noexcept
      { return _M_t.rend(); }






      bool
      empty() const noexcept
      { return _M_t.empty(); }


      size_type
      size() const noexcept
      { return _M_t.size(); }


      size_type
      max_size() const noexcept
      { return _M_t.max_size(); }
# 483 "/usr/include/c++/7/bits/stl_map.h" 3
      mapped_type&
      operator[](const key_type& __k)
      {



 iterator __i = lower_bound(__k);

 if (__i == end() || key_comp()(__k, (*__i).first))

   __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
         std::tuple<const key_type&>(__k),
         std::tuple<>());



 return (*__i).second;
      }


      mapped_type&
      operator[](key_type&& __k)
      {



 iterator __i = lower_bound(__k);

 if (__i == end() || key_comp()(__k, (*__i).first))
   __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
     std::forward_as_tuple(std::move(__k)),
     std::tuple<>());
 return (*__i).second;
      }
# 528 "/usr/include/c++/7/bits/stl_map.h" 3
      mapped_type&
      at(const key_type& __k)
      {
 iterator __i = lower_bound(__k);
 if (__i == end() || key_comp()(__k, (*__i).first))
   __throw_out_of_range(("map::at"));
 return (*__i).second;
      }

      const mapped_type&
      at(const key_type& __k) const
      {
 const_iterator __i = lower_bound(__k);
 if (__i == end() || key_comp()(__k, (*__i).first))
   __throw_out_of_range(("map::at"));
 return (*__i).second;
      }
# 566 "/usr/include/c++/7/bits/stl_map.h" 3
      template<typename... _Args>
 std::pair<iterator, bool>
 emplace(_Args&&... __args)
 { return _M_t._M_emplace_unique(std::forward<_Args>(__args)...); }
# 596 "/usr/include/c++/7/bits/stl_map.h" 3
      template<typename... _Args>
 iterator
 emplace_hint(const_iterator __pos, _Args&&... __args)
 {
   return _M_t._M_emplace_hint_unique(__pos,
          std::forward<_Args>(__args)...);
 }
# 794 "/usr/include/c++/7/bits/stl_map.h" 3
      std::pair<iterator, bool>
      insert(const value_type& __x)
      { return _M_t._M_insert_unique(__x); }




      std::pair<iterator, bool>
      insert(value_type&& __x)
      { return _M_t._M_insert_unique(std::move(__x)); }

      template<typename _Pair>
 __enable_if_t<is_constructible<value_type, _Pair>::value,
        pair<iterator, bool>>
 insert(_Pair&& __x)
 { return _M_t._M_emplace_unique(std::forward<_Pair>(__x)); }
# 821 "/usr/include/c++/7/bits/stl_map.h" 3
      void
      insert(std::initializer_list<value_type> __list)
      { insert(__list.begin(), __list.end()); }
# 850 "/usr/include/c++/7/bits/stl_map.h" 3
      iterator

      insert(const_iterator __position, const value_type& __x)



      { return _M_t._M_insert_unique_(__position, __x); }




      iterator
      insert(const_iterator __position, value_type&& __x)
      { return _M_t._M_insert_unique_(__position, std::move(__x)); }

      template<typename _Pair>
 __enable_if_t<is_constructible<value_type, _Pair>::value, iterator>
 insert(const_iterator __position, _Pair&& __x)
 {
   return _M_t._M_emplace_hint_unique(__position,
          std::forward<_Pair>(__x));
 }
# 883 "/usr/include/c++/7/bits/stl_map.h" 3
      template<typename _InputIterator>
 void
 insert(_InputIterator __first, _InputIterator __last)
 { _M_t._M_insert_unique(__first, __last); }
# 1023 "/usr/include/c++/7/bits/stl_map.h" 3
      iterator
      erase(const_iterator __position)
      { return _M_t.erase(__position); }


      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(iterator __position)
      { return _M_t.erase(__position); }
# 1060 "/usr/include/c++/7/bits/stl_map.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 1080 "/usr/include/c++/7/bits/stl_map.h" 3
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_t.erase(__first, __last); }
# 1114 "/usr/include/c++/7/bits/stl_map.h" 3
      void
      swap(map& __x)
      noexcept(__is_nothrow_swappable<_Compare>::value)
      { _M_t.swap(__x._M_t); }







      void
      clear() noexcept
      { _M_t.clear(); }






      key_compare
      key_comp() const
      { return _M_t.key_comp(); }





      value_compare
      value_comp() const
      { return value_compare(_M_t.key_comp()); }
# 1161 "/usr/include/c++/7/bits/stl_map.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }


      template<typename _Kt>
 auto
 find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))
 { return _M_t._M_find_tr(__x); }
# 1186 "/usr/include/c++/7/bits/stl_map.h" 3
      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }


      template<typename _Kt>
 auto
 find(const _Kt& __x) const -> decltype(_M_t._M_find_tr(__x))
 { return _M_t._M_find_tr(__x); }
# 1207 "/usr/include/c++/7/bits/stl_map.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }


      template<typename _Kt>
 auto
 count(const _Kt& __x) const -> decltype(_M_t._M_count_tr(__x))
 { return _M_t._M_count_tr(__x); }
# 1231 "/usr/include/c++/7/bits/stl_map.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }


      template<typename _Kt>
 auto
 lower_bound(const _Kt& __x)
 -> decltype(iterator(_M_t._M_lower_bound_tr(__x)))
 { return iterator(_M_t._M_lower_bound_tr(__x)); }
# 1256 "/usr/include/c++/7/bits/stl_map.h" 3
      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }


      template<typename _Kt>
 auto
 lower_bound(const _Kt& __x) const
 -> decltype(const_iterator(_M_t._M_lower_bound_tr(__x)))
 { return const_iterator(_M_t._M_lower_bound_tr(__x)); }
# 1276 "/usr/include/c++/7/bits/stl_map.h" 3
      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }


      template<typename _Kt>
 auto
 upper_bound(const _Kt& __x)
 -> decltype(iterator(_M_t._M_upper_bound_tr(__x)))
 { return iterator(_M_t._M_upper_bound_tr(__x)); }
# 1296 "/usr/include/c++/7/bits/stl_map.h" 3
      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }


      template<typename _Kt>
 auto
 upper_bound(const _Kt& __x) const
 -> decltype(const_iterator(_M_t._M_upper_bound_tr(__x)))
 { return const_iterator(_M_t._M_upper_bound_tr(__x)); }
# 1325 "/usr/include/c++/7/bits/stl_map.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }


      template<typename _Kt>
 auto
 equal_range(const _Kt& __x)
 -> decltype(pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)))
 { return pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)); }
# 1354 "/usr/include/c++/7/bits/stl_map.h" 3
      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }


      template<typename _Kt>
 auto
 equal_range(const _Kt& __x) const
 -> decltype(pair<const_iterator, const_iterator>(
       _M_t._M_equal_range_tr(__x)))
 {
   return pair<const_iterator, const_iterator>(
       _M_t._M_equal_range_tr(__x));
 }



      template<typename _K1, typename _T1, typename _C1, typename _A1>
 friend bool
 operator==(const map<_K1, _T1, _C1, _A1>&,
     const map<_K1, _T1, _C1, _A1>&);

      template<typename _K1, typename _T1, typename _C1, typename _A1>
 friend bool
 operator<(const map<_K1, _T1, _C1, _A1>&,
    const map<_K1, _T1, _C1, _A1>&);
    };
# 1392 "/usr/include/c++/7/bits/stl_map.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator==(const map<_Key, _Tp, _Compare, _Alloc>& __x,
        const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 1409 "/usr/include/c++/7/bits/stl_map.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<(const map<_Key, _Tp, _Compare, _Alloc>& __x,
       const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
        const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>(const map<_Key, _Tp, _Compare, _Alloc>& __x,
       const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
        const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
        const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline void
    swap(map<_Key, _Tp, _Compare, _Alloc>& __x,
  map<_Key, _Tp, _Compare, _Alloc>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }


# 1476 "/usr/include/c++/7/bits/stl_map.h" 3
}
# 62 "/usr/include/c++/7/map" 2 3
# 1 "/usr/include/c++/7/bits/stl_multimap.h" 1 3
# 64 "/usr/include/c++/7/bits/stl_multimap.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template <typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    class map;
# 95 "/usr/include/c++/7/bits/stl_multimap.h" 3
  template <typename _Key, typename _Tp,
     typename _Compare = std::less<_Key>,
     typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
    class multimap
    {
    public:
      typedef _Key key_type;
      typedef _Tp mapped_type;
      typedef std::pair<const _Key, _Tp> value_type;
      typedef _Compare key_compare;
      typedef _Alloc allocator_type;

    private:
# 119 "/usr/include/c++/7/bits/stl_multimap.h" 3
    public:
      class value_compare
      : public std::binary_function<value_type, value_type, bool>
      {
 friend class multimap<_Key, _Tp, _Compare, _Alloc>;
      protected:
 _Compare comp;

 value_compare(_Compare __c)
 : comp(__c) { }

      public:
 bool operator()(const value_type& __x, const value_type& __y) const
 { return comp(__x.first, __y.first); }
      };

    private:

      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<value_type>::other _Pair_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Select1st<value_type>,
         key_compare, _Pair_alloc_type> _Rep_type;

      _Rep_type _M_t;

      typedef __gnu_cxx::__alloc_traits<_Pair_alloc_type> _Alloc_traits;

    public:


      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Rep_type::iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;
      typedef typename _Rep_type::reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;
# 174 "/usr/include/c++/7/bits/stl_multimap.h" 3
      multimap() = default;







      explicit
      multimap(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a)) { }
# 196 "/usr/include/c++/7/bits/stl_multimap.h" 3
      multimap(const multimap&) = default;
# 205 "/usr/include/c++/7/bits/stl_multimap.h" 3
      multimap(multimap&&) = default;
# 217 "/usr/include/c++/7/bits/stl_multimap.h" 3
      multimap(initializer_list<value_type> __l,
        const _Compare& __comp = _Compare(),
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a))
      { _M_t._M_insert_equal(__l.begin(), __l.end()); }


      explicit
      multimap(const allocator_type& __a)
      : _M_t(_Compare(), _Pair_alloc_type(__a)) { }


      multimap(const multimap& __m, const allocator_type& __a)
      : _M_t(__m._M_t, _Pair_alloc_type(__a)) { }


      multimap(multimap&& __m, const allocator_type& __a)
      noexcept(is_nothrow_copy_constructible<_Compare>::value
        && _Alloc_traits::_S_always_equal())
      : _M_t(std::move(__m._M_t), _Pair_alloc_type(__a)) { }


      multimap(initializer_list<value_type> __l, const allocator_type& __a)
      : _M_t(_Compare(), _Pair_alloc_type(__a))
      { _M_t._M_insert_equal(__l.begin(), __l.end()); }


      template<typename _InputIterator>
 multimap(_InputIterator __first, _InputIterator __last,
   const allocator_type& __a)
 : _M_t(_Compare(), _Pair_alloc_type(__a))
 { _M_t._M_insert_equal(__first, __last); }
# 260 "/usr/include/c++/7/bits/stl_multimap.h" 3
      template<typename _InputIterator>
 multimap(_InputIterator __first, _InputIterator __last)
 : _M_t()
 { _M_t._M_insert_equal(__first, __last); }
# 276 "/usr/include/c++/7/bits/stl_multimap.h" 3
      template<typename _InputIterator>
 multimap(_InputIterator __first, _InputIterator __last,
   const _Compare& __comp,
   const allocator_type& __a = allocator_type())
 : _M_t(__comp, _Pair_alloc_type(__a))
 { _M_t._M_insert_equal(__first, __last); }







      ~multimap() = default;
# 305 "/usr/include/c++/7/bits/stl_multimap.h" 3
      multimap&
      operator=(const multimap&) = default;


      multimap&
      operator=(multimap&&) = default;
# 323 "/usr/include/c++/7/bits/stl_multimap.h" 3
      multimap&
      operator=(initializer_list<value_type> __l)
      {
 _M_t._M_assign_equal(__l.begin(), __l.end());
 return *this;
      }



      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_t.get_allocator()); }







      iterator
      begin() noexcept
      { return _M_t.begin(); }






      const_iterator
      begin() const noexcept
      { return _M_t.begin(); }






      iterator
      end() noexcept
      { return _M_t.end(); }






      const_iterator
      end() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      rbegin() noexcept
      { return _M_t.rbegin(); }






      const_reverse_iterator
      rbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      rend() noexcept
      { return _M_t.rend(); }






      const_reverse_iterator
      rend() const noexcept
      { return _M_t.rend(); }







      const_iterator
      cbegin() const noexcept
      { return _M_t.begin(); }






      const_iterator
      cend() const noexcept
      { return _M_t.end(); }






      const_reverse_iterator
      crbegin() const noexcept
      { return _M_t.rbegin(); }






      const_reverse_iterator
      crend() const noexcept
      { return _M_t.rend(); }




      bool
      empty() const noexcept
      { return _M_t.empty(); }


      size_type
      size() const noexcept
      { return _M_t.size(); }


      size_type
      max_size() const noexcept
      { return _M_t.max_size(); }
# 481 "/usr/include/c++/7/bits/stl_multimap.h" 3
      template<typename... _Args>
 iterator
 emplace(_Args&&... __args)
 { return _M_t._M_emplace_equal(std::forward<_Args>(__args)...); }
# 508 "/usr/include/c++/7/bits/stl_multimap.h" 3
      template<typename... _Args>
 iterator
 emplace_hint(const_iterator __pos, _Args&&... __args)
 {
   return _M_t._M_emplace_hint_equal(__pos,
         std::forward<_Args>(__args)...);
 }
# 530 "/usr/include/c++/7/bits/stl_multimap.h" 3
      iterator
      insert(const value_type& __x)
      { return _M_t._M_insert_equal(__x); }




      iterator
      insert(value_type&& __x)
      { return _M_t._M_insert_equal(std::move(__x)); }

      template<typename _Pair>
 __enable_if_t<is_constructible<value_type, _Pair>::value, iterator>
 insert(_Pair&& __x)
 { return _M_t._M_emplace_equal(std::forward<_Pair>(__x)); }
# 569 "/usr/include/c++/7/bits/stl_multimap.h" 3
      iterator

      insert(const_iterator __position, const value_type& __x)



      { return _M_t._M_insert_equal_(__position, __x); }




      iterator
      insert(const_iterator __position, value_type&& __x)
      { return _M_t._M_insert_equal_(__position, std::move(__x)); }

      template<typename _Pair>
 __enable_if_t<is_constructible<value_type, _Pair&&>::value, iterator>
 insert(const_iterator __position, _Pair&& __x)
 {
   return _M_t._M_emplace_hint_equal(__position,
         std::forward<_Pair>(__x));
 }
# 603 "/usr/include/c++/7/bits/stl_multimap.h" 3
      template<typename _InputIterator>
 void
 insert(_InputIterator __first, _InputIterator __last)
 { _M_t._M_insert_equal(__first, __last); }
# 616 "/usr/include/c++/7/bits/stl_multimap.h" 3
      void
      insert(initializer_list<value_type> __l)
      { this->insert(__l.begin(), __l.end()); }
# 693 "/usr/include/c++/7/bits/stl_multimap.h" 3
      iterator
      erase(const_iterator __position)
      { return _M_t.erase(__position); }


      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(iterator __position)
      { return _M_t.erase(__position); }
# 730 "/usr/include/c++/7/bits/stl_multimap.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 751 "/usr/include/c++/7/bits/stl_multimap.h" 3
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_t.erase(__first, __last); }
# 788 "/usr/include/c++/7/bits/stl_multimap.h" 3
      void
      swap(multimap& __x)
      noexcept(__is_nothrow_swappable<_Compare>::value)
      { _M_t.swap(__x._M_t); }







      void
      clear() noexcept
      { _M_t.clear(); }






      key_compare
      key_comp() const
      { return _M_t.key_comp(); }





      value_compare
      value_comp() const
      { return value_compare(_M_t.key_comp()); }
# 834 "/usr/include/c++/7/bits/stl_multimap.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }


      template<typename _Kt>
 auto
 find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))
 { return _M_t._M_find_tr(__x); }
# 858 "/usr/include/c++/7/bits/stl_multimap.h" 3
      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }


      template<typename _Kt>
 auto
 find(const _Kt& __x) const -> decltype(_M_t._M_find_tr(__x))
 { return _M_t._M_find_tr(__x); }
# 876 "/usr/include/c++/7/bits/stl_multimap.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_t.count(__x); }


      template<typename _Kt>
 auto
 count(const _Kt& __x) const -> decltype(_M_t._M_count_tr(__x))
 { return _M_t._M_count_tr(__x); }
# 900 "/usr/include/c++/7/bits/stl_multimap.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }


      template<typename _Kt>
 auto
 lower_bound(const _Kt& __x)
 -> decltype(iterator(_M_t._M_lower_bound_tr(__x)))
 { return iterator(_M_t._M_lower_bound_tr(__x)); }
# 925 "/usr/include/c++/7/bits/stl_multimap.h" 3
      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }


      template<typename _Kt>
 auto
 lower_bound(const _Kt& __x) const
 -> decltype(const_iterator(_M_t._M_lower_bound_tr(__x)))
 { return const_iterator(_M_t._M_lower_bound_tr(__x)); }
# 945 "/usr/include/c++/7/bits/stl_multimap.h" 3
      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }


      template<typename _Kt>
 auto
 upper_bound(const _Kt& __x)
 -> decltype(iterator(_M_t._M_upper_bound_tr(__x)))
 { return iterator(_M_t._M_upper_bound_tr(__x)); }
# 965 "/usr/include/c++/7/bits/stl_multimap.h" 3
      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }


      template<typename _Kt>
 auto
 upper_bound(const _Kt& __x) const
 -> decltype(const_iterator(_M_t._M_upper_bound_tr(__x)))
 { return const_iterator(_M_t._M_upper_bound_tr(__x)); }
# 992 "/usr/include/c++/7/bits/stl_multimap.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }


      template<typename _Kt>
 auto
 equal_range(const _Kt& __x)
 -> decltype(pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)))
 { return pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)); }
# 1019 "/usr/include/c++/7/bits/stl_multimap.h" 3
      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }


      template<typename _Kt>
 auto
 equal_range(const _Kt& __x) const
 -> decltype(pair<const_iterator, const_iterator>(
       _M_t._M_equal_range_tr(__x)))
 {
   return pair<const_iterator, const_iterator>(
       _M_t._M_equal_range_tr(__x));
 }



      template<typename _K1, typename _T1, typename _C1, typename _A1>
 friend bool
 operator==(const multimap<_K1, _T1, _C1, _A1>&,
     const multimap<_K1, _T1, _C1, _A1>&);

      template<typename _K1, typename _T1, typename _C1, typename _A1>
 friend bool
 operator<(const multimap<_K1, _T1, _C1, _A1>&,
    const multimap<_K1, _T1, _C1, _A1>&);
  };
# 1057 "/usr/include/c++/7/bits/stl_multimap.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator==(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
        const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 1074 "/usr/include/c++/7/bits/stl_multimap.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
       const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
        const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
       const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
        const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
        const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline void
    swap(multimap<_Key, _Tp, _Compare, _Alloc>& __x,
  multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }


# 1141 "/usr/include/c++/7/bits/stl_multimap.h" 3
}
# 63 "/usr/include/c++/7/map" 2 3
# 24 "/workspace/acl/lib_acl_cpp/src/acl_stdafx.hpp" 2
# 1 "/usr/include/c++/7/list" 1 3
# 58 "/usr/include/c++/7/list" 3
       
# 59 "/usr/include/c++/7/list" 3




# 1 "/usr/include/c++/7/bits/stl_list.h" 1 3
# 63 "/usr/include/c++/7/bits/stl_list.h" 3
# 1 "/usr/include/c++/7/bits/allocated_ptr.h" 1 3
# 40 "/usr/include/c++/7/bits/allocated_ptr.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Alloc>
    struct __allocated_ptr
    {
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;


      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
      { }


      template<typename _Ptr,
        typename _Req = _Require<is_same<_Ptr, value_type*>>>
      __allocated_ptr(_Alloc& __a, _Ptr __ptr)
      : _M_alloc(std::__addressof(__a)),
 _M_ptr(pointer_traits<pointer>::pointer_to(*__ptr))
      { }


      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }


      ~__allocated_ptr()
      {
 if (_M_ptr != nullptr)
   std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }


      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
 _M_ptr = nullptr;
 return *this;
      }


      value_type* get() { return _S_raw_ptr(_M_ptr); }

    private:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }

      template<typename _Ptr>
 static auto
 _S_raw_ptr(_Ptr __ptr) -> decltype(_S_raw_ptr(__ptr.operator->()))
 { return _S_raw_ptr(__ptr.operator->()); }

      _Alloc* _M_alloc;
      pointer _M_ptr;
    };


  template<typename _Alloc>
    __allocated_ptr<_Alloc>
    __allocate_guarded(_Alloc& __a)
    {
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
    }


}
# 64 "/usr/include/c++/7/bits/stl_list.h" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{
  namespace __detail
  {
 
# 80 "/usr/include/c++/7/bits/stl_list.h" 3
    struct _List_node_base
    {
      _List_node_base* _M_next;
      _List_node_base* _M_prev;

      static void
      swap(_List_node_base& __x, _List_node_base& __y) noexcept;

      void
      _M_transfer(_List_node_base* const __first,
    _List_node_base* const __last) noexcept;

      void
      _M_reverse() noexcept;

      void
      _M_hook(_List_node_base* const __position) noexcept;

      void
      _M_unhook() noexcept;
    };

 
  }




  template<typename _Tp>
    struct _List_node : public __detail::_List_node_base
    {

      __gnu_cxx::__aligned_membuf<_Tp> _M_storage;
      _Tp* _M_valptr() { return _M_storage._M_ptr(); }
      _Tp const* _M_valptr() const { return _M_storage._M_ptr(); }





    };






  template<typename _Tp>
    struct _List_iterator
    {
      typedef _List_iterator<_Tp> _Self;
      typedef _List_node<_Tp> _Node;

      typedef ptrdiff_t difference_type;
      typedef std::bidirectional_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;

      _List_iterator() noexcept
      : _M_node() { }

      explicit
      _List_iterator(__detail::_List_node_base* __x) noexcept
      : _M_node(__x) { }

      _Self
      _M_const_cast() const noexcept
      { return *this; }


      reference
      operator*() const noexcept
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }

      pointer
      operator->() const noexcept
      { return static_cast<_Node*>(_M_node)->_M_valptr(); }

      _Self&
      operator++() noexcept
      {
 _M_node = _M_node->_M_next;
 return *this;
      }

      _Self
      operator++(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _M_node->_M_next;
 return __tmp;
      }

      _Self&
      operator--() noexcept
      {
 _M_node = _M_node->_M_prev;
 return *this;
      }

      _Self
      operator--(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _M_node->_M_prev;
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const noexcept
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const noexcept
      { return _M_node != __x._M_node; }


      __detail::_List_node_base* _M_node;
    };






  template<typename _Tp>
    struct _List_const_iterator
    {
      typedef _List_const_iterator<_Tp> _Self;
      typedef const _List_node<_Tp> _Node;
      typedef _List_iterator<_Tp> iterator;

      typedef ptrdiff_t difference_type;
      typedef std::bidirectional_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;

      _List_const_iterator() noexcept
      : _M_node() { }

      explicit
      _List_const_iterator(const __detail::_List_node_base* __x)
      noexcept
      : _M_node(__x) { }

      _List_const_iterator(const iterator& __x) noexcept
      : _M_node(__x._M_node) { }

      iterator
      _M_const_cast() const noexcept
      { return iterator(const_cast<__detail::_List_node_base*>(_M_node)); }


      reference
      operator*() const noexcept
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }

      pointer
      operator->() const noexcept
      { return static_cast<_Node*>(_M_node)->_M_valptr(); }

      _Self&
      operator++() noexcept
      {
 _M_node = _M_node->_M_next;
 return *this;
      }

      _Self
      operator++(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _M_node->_M_next;
 return __tmp;
      }

      _Self&
      operator--() noexcept
      {
 _M_node = _M_node->_M_prev;
 return *this;
      }

      _Self
      operator--(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _M_node->_M_prev;
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const noexcept
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const noexcept
      { return _M_node != __x._M_node; }


      const __detail::_List_node_base* _M_node;
    };

  template<typename _Val>
    inline bool
    operator==(const _List_iterator<_Val>& __x,
        const _List_const_iterator<_Val>& __y) noexcept
    { return __x._M_node == __y._M_node; }

  template<typename _Val>
    inline bool
    operator!=(const _List_iterator<_Val>& __x,
        const _List_const_iterator<_Val>& __y) noexcept
    { return __x._M_node != __y._M_node; }

namespace __cxx11 {

  template<typename _Tp, typename _Alloc>
    class _List_base
    {
    protected:
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_Tp>::other _Tp_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tp_alloc_traits;
      typedef typename _Tp_alloc_traits::template
 rebind<_List_node<_Tp> >::other _Node_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Node_alloc_type> _Node_alloc_traits;

      static size_t
      _S_distance(const __detail::_List_node_base* __first,
    const __detail::_List_node_base* __last)
      {
 size_t __n = 0;
 while (__first != __last)
   {
     __first = __first->_M_next;
     ++__n;
   }
 return __n;
      }

      struct _List_impl
      : public _Node_alloc_type
      {

 _List_node<size_t> _M_node;




 _List_impl() noexcept
 : _Node_alloc_type(), _M_node()
 { }

 _List_impl(const _Node_alloc_type& __a) noexcept
 : _Node_alloc_type(__a), _M_node()
 { }


 _List_impl(_Node_alloc_type&& __a) noexcept
 : _Node_alloc_type(std::move(__a)), _M_node()
 { }

      };

      _List_impl _M_impl;


      size_t _M_get_size() const { return *_M_impl._M_node._M_valptr(); }

      void _M_set_size(size_t __n) { *_M_impl._M_node._M_valptr() = __n; }

      void _M_inc_size(size_t __n) { *_M_impl._M_node._M_valptr() += __n; }

      void _M_dec_size(size_t __n) { *_M_impl._M_node._M_valptr() -= __n; }

      size_t
      _M_distance(const __detail::_List_node_base* __first,
    const __detail::_List_node_base* __last) const
      { return _S_distance(__first, __last); }


      size_t _M_node_count() const { return *_M_impl._M_node._M_valptr(); }
# 381 "/usr/include/c++/7/bits/stl_list.h" 3
      typename _Node_alloc_traits::pointer
      _M_get_node()
      { return _Node_alloc_traits::allocate(_M_impl, 1); }

      void
      _M_put_node(typename _Node_alloc_traits::pointer __p) noexcept
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }

  public:
      typedef _Alloc allocator_type;

      _Node_alloc_type&
      _M_get_Node_allocator() noexcept
      { return _M_impl; }

      const _Node_alloc_type&
      _M_get_Node_allocator() const noexcept
      { return _M_impl; }

      _List_base()
      : _M_impl()
      { _M_init(); }

      _List_base(const _Node_alloc_type& __a) noexcept
      : _M_impl(__a)
      { _M_init(); }


      _List_base(_List_base&& __x) noexcept
      : _M_impl(std::move(__x._M_get_Node_allocator()))
      { _M_move_nodes(std::move(__x)); }

      _List_base(_List_base&& __x, _Node_alloc_type&& __a)
      : _M_impl(std::move(__a))
      {
 if (__x._M_get_Node_allocator() == _M_get_Node_allocator())
   _M_move_nodes(std::move(__x));
 else
   _M_init();
      }

      void
      _M_move_nodes(_List_base&& __x)
      {
 auto* const __xnode = std::__addressof(__x._M_impl._M_node);
 if (__xnode->_M_next == __xnode)
   _M_init();
 else
   {
     auto* const __node = std::__addressof(_M_impl._M_node);
     __node->_M_next = __xnode->_M_next;
     __node->_M_prev = __xnode->_M_prev;
     __node->_M_next->_M_prev = __node->_M_prev->_M_next = __node;
     _M_set_size(__x._M_get_size());
     __x._M_init();
   }
      }



      ~_List_base() noexcept
      { _M_clear(); }

      void
      _M_clear() noexcept;

      void
      _M_init() noexcept
      {
 this->_M_impl._M_node._M_next = &this->_M_impl._M_node;
 this->_M_impl._M_node._M_prev = &this->_M_impl._M_node;
 _M_set_size(0);
      }
    };
# 502 "/usr/include/c++/7/bits/stl_list.h" 3
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class list : protected _List_base<_Tp, _Alloc>
    {
# 514 "/usr/include/c++/7/bits/stl_list.h" 3
      typedef _List_base<_Tp, _Alloc> _Base;
      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;
      typedef typename _Base::_Tp_alloc_traits _Tp_alloc_traits;
      typedef typename _Base::_Node_alloc_type _Node_alloc_type;
      typedef typename _Base::_Node_alloc_traits _Node_alloc_traits;

    public:
      typedef _Tp value_type;
      typedef typename _Tp_alloc_traits::pointer pointer;
      typedef typename _Tp_alloc_traits::const_pointer const_pointer;
      typedef typename _Tp_alloc_traits::reference reference;
      typedef typename _Tp_alloc_traits::const_reference const_reference;
      typedef _List_iterator<_Tp> iterator;
      typedef _List_const_iterator<_Tp> const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    protected:


      typedef _List_node<_Tp> _Node;

      using _Base::_M_impl;
      using _Base::_M_put_node;
      using _Base::_M_get_node;
      using _Base::_M_get_Node_allocator;
# 568 "/usr/include/c++/7/bits/stl_list.h" 3
      template<typename... _Args>
 _Node*
 _M_create_node(_Args&&... __args)
 {
   auto __p = this->_M_get_node();
   auto& __alloc = _M_get_Node_allocator();
   __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
   _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
     std::forward<_Args>(__args)...);
   __guard = nullptr;
   return __p;
 }


    public:






      list()

      noexcept(is_nothrow_default_constructible<_Node_alloc_type>::value)

      : _Base() { }





      explicit
      list(const allocator_type& __a) noexcept
      : _Base(_Node_alloc_type(__a)) { }
# 612 "/usr/include/c++/7/bits/stl_list.h" 3
      explicit
      list(size_type __n, const allocator_type& __a = allocator_type())
      : _Base(_Node_alloc_type(__a))
      { _M_default_initialize(__n); }
# 625 "/usr/include/c++/7/bits/stl_list.h" 3
      list(size_type __n, const value_type& __value,
    const allocator_type& __a = allocator_type())
      : _Base(_Node_alloc_type(__a))
      { _M_fill_initialize(__n, __value); }
# 652 "/usr/include/c++/7/bits/stl_list.h" 3
      list(const list& __x)
      : _Base(_Node_alloc_traits::
       _S_select_on_copy(__x._M_get_Node_allocator()))
      { _M_initialize_dispatch(__x.begin(), __x.end(), __false_type()); }
# 665 "/usr/include/c++/7/bits/stl_list.h" 3
      list(list&& __x) noexcept
      : _Base(std::move(__x)) { }
# 676 "/usr/include/c++/7/bits/stl_list.h" 3
      list(initializer_list<value_type> __l,
    const allocator_type& __a = allocator_type())
      : _Base(_Node_alloc_type(__a))
      { _M_initialize_dispatch(__l.begin(), __l.end(), __false_type()); }

      list(const list& __x, const allocator_type& __a)
      : _Base(_Node_alloc_type(__a))
      { _M_initialize_dispatch(__x.begin(), __x.end(), __false_type()); }

      list(list&& __x, const allocator_type& __a)
      noexcept(_Node_alloc_traits::_S_always_equal())
      : _Base(std::move(__x), _Node_alloc_type(__a))
      {


 insert(begin(), std::__make_move_if_noexcept_iterator(__x.begin()),
   std::__make_move_if_noexcept_iterator(__x.end()));
      }
# 707 "/usr/include/c++/7/bits/stl_list.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 list(_InputIterator __first, _InputIterator __last,
      const allocator_type& __a = allocator_type())
 : _Base(_Node_alloc_type(__a))
 { _M_initialize_dispatch(__first, __last, __false_type()); }
# 733 "/usr/include/c++/7/bits/stl_list.h" 3
      ~list() = default;
# 744 "/usr/include/c++/7/bits/stl_list.h" 3
      list&
      operator=(const list& __x);
# 758 "/usr/include/c++/7/bits/stl_list.h" 3
      list&
      operator=(list&& __x)
      noexcept(_Node_alloc_traits::_S_nothrow_move())
      {
 constexpr bool __move_storage =
   _Node_alloc_traits::_S_propagate_on_move_assign()
   || _Node_alloc_traits::_S_always_equal();
 _M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 return *this;
      }
# 776 "/usr/include/c++/7/bits/stl_list.h" 3
      list&
      operator=(initializer_list<value_type> __l)
      {
 this->assign(__l.begin(), __l.end());
 return *this;
      }
# 794 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      assign(size_type __n, const value_type& __val)
      { _M_fill_assign(__n, __val); }
# 811 "/usr/include/c++/7/bits/stl_list.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 void
 assign(_InputIterator __first, _InputIterator __last)
 { _M_assign_dispatch(__first, __last, __false_type()); }
# 835 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      assign(initializer_list<value_type> __l)
      { this->_M_assign_dispatch(__l.begin(), __l.end(), __false_type()); }



      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_Base::_M_get_Node_allocator()); }






      iterator
      begin() noexcept
      { return iterator(this->_M_impl._M_node._M_next); }






      const_iterator
      begin() const noexcept
      { return const_iterator(this->_M_impl._M_node._M_next); }






      iterator
      end() noexcept
      { return iterator(&this->_M_impl._M_node); }






      const_iterator
      end() const noexcept
      { return const_iterator(&this->_M_impl._M_node); }






      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }






      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }






      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }






      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }







      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_impl._M_node._M_next); }






      const_iterator
      cend() const noexcept
      { return const_iterator(&this->_M_impl._M_node); }






      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(end()); }






      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(begin()); }







      bool
      empty() const noexcept
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }


      size_type
      size() const noexcept
      { return this->_M_node_count(); }


      size_type
      max_size() const noexcept
      { return _Node_alloc_traits::max_size(_M_get_Node_allocator()); }
# 984 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      resize(size_type __new_size);
# 997 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      resize(size_type __new_size, const value_type& __x);
# 1019 "/usr/include/c++/7/bits/stl_list.h" 3
      reference
      front() noexcept
      { return *begin(); }





      const_reference
      front() const noexcept
      { return *begin(); }





      reference
      back() noexcept
      {
 iterator __tmp = end();
 --__tmp;
 return *__tmp;
      }





      const_reference
      back() const noexcept
      {
 const_iterator __tmp = end();
 --__tmp;
 return *__tmp;
      }
# 1066 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      push_front(const value_type& __x)
      { this->_M_insert(begin(), __x); }


      void
      push_front(value_type&& __x)
      { this->_M_insert(begin(), std::move(__x)); }

      template<typename... _Args>



 void

 emplace_front(_Args&&... __args)
 {
   this->_M_insert(begin(), std::forward<_Args>(__args)...);



 }
# 1102 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      pop_front() noexcept
      { this->_M_erase(begin()); }
# 1116 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      push_back(const value_type& __x)
      { this->_M_insert(end(), __x); }


      void
      push_back(value_type&& __x)
      { this->_M_insert(end(), std::move(__x)); }

      template<typename... _Args>



 void

 emplace_back(_Args&&... __args)
 {
   this->_M_insert(end(), std::forward<_Args>(__args)...);



 }
# 1151 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      pop_back() noexcept
      { this->_M_erase(iterator(this->_M_impl._M_node._M_prev)); }
# 1168 "/usr/include/c++/7/bits/stl_list.h" 3
      template<typename... _Args>
 iterator
 emplace(const_iterator __position, _Args&&... __args);
# 1183 "/usr/include/c++/7/bits/stl_list.h" 3
      iterator
      insert(const_iterator __position, const value_type& __x);
# 1213 "/usr/include/c++/7/bits/stl_list.h" 3
      iterator
      insert(const_iterator __position, value_type&& __x)
      { return emplace(__position, std::move(__x)); }
# 1232 "/usr/include/c++/7/bits/stl_list.h" 3
      iterator
      insert(const_iterator __p, initializer_list<value_type> __l)
      { return this->insert(__p, __l.begin(), __l.end()); }
# 1252 "/usr/include/c++/7/bits/stl_list.h" 3
      iterator
      insert(const_iterator __position, size_type __n, const value_type& __x);
# 1291 "/usr/include/c++/7/bits/stl_list.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 iterator
 insert(const_iterator __position, _InputIterator __first,
        _InputIterator __last);
# 1335 "/usr/include/c++/7/bits/stl_list.h" 3
      iterator

      erase(const_iterator __position) noexcept;
# 1360 "/usr/include/c++/7/bits/stl_list.h" 3
      iterator

      erase(const_iterator __first, const_iterator __last) noexcept



      {
 while (__first != __last)
   __first = erase(__first);
 return __last._M_const_cast();
      }
# 1383 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      swap(list& __x) noexcept
      {
 __detail::_List_node_base::swap(this->_M_impl._M_node,
     __x._M_impl._M_node);

 size_t __xsize = __x._M_get_size();
 __x._M_set_size(this->_M_get_size());
 this->_M_set_size(__xsize);

 _Node_alloc_traits::_S_on_swap(this->_M_get_Node_allocator(),
           __x._M_get_Node_allocator());
      }







      void
      clear() noexcept
      {
 _Base::_M_clear();
 _Base::_M_init();
      }
# 1422 "/usr/include/c++/7/bits/stl_list.h" 3
      void

      splice(const_iterator __position, list&& __x) noexcept



      {
 if (!__x.empty())
   {
     _M_check_equal_allocators(__x);

     this->_M_transfer(__position._M_const_cast(),
         __x.begin(), __x.end());

     this->_M_inc_size(__x._M_get_size());
     __x._M_set_size(0);
   }
      }


      void
      splice(const_iterator __position, list& __x) noexcept
      { splice(__position, std::move(__x)); }
# 1458 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      splice(const_iterator __position, list&& __x, const_iterator __i) noexcept
# 1473 "/usr/include/c++/7/bits/stl_list.h" 3
      {
 iterator __j = __i._M_const_cast();
 ++__j;
 if (__position == __i || __position == __j)
   return;

 if (this != std::__addressof(__x))
   _M_check_equal_allocators(__x);

 this->_M_transfer(__position._M_const_cast(),
     __i._M_const_cast(), __j);

 this->_M_inc_size(1);
 __x._M_dec_size(1);
      }
# 1500 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      splice(const_iterator __position, list& __x, const_iterator __i) noexcept
      { splice(__position, std::move(__x), __i); }
# 1519 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      splice(const_iterator __position, list&& __x, const_iterator __first,
      const_iterator __last) noexcept
# 1539 "/usr/include/c++/7/bits/stl_list.h" 3
      {
 if (__first != __last)
   {
     if (this != std::__addressof(__x))
       _M_check_equal_allocators(__x);

     size_t __n = this->_M_distance(__first._M_node, __last._M_node);
     this->_M_inc_size(__n);
     __x._M_dec_size(__n);

     this->_M_transfer(__position._M_const_cast(),
         __first._M_const_cast(),
         __last._M_const_cast());
   }
      }
# 1569 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      splice(const_iterator __position, list& __x, const_iterator __first,
      const_iterator __last) noexcept
      { splice(__position, std::move(__x), __first, __last); }
# 1586 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      remove(const _Tp& __value);
# 1600 "/usr/include/c++/7/bits/stl_list.h" 3
      template<typename _Predicate>
 void
 remove_if(_Predicate);
# 1614 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      unique();
# 1629 "/usr/include/c++/7/bits/stl_list.h" 3
      template<typename _BinaryPredicate>
 void
 unique(_BinaryPredicate);
# 1643 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      merge(list&& __x);

      void
      merge(list& __x)
      { merge(std::move(__x)); }
# 1668 "/usr/include/c++/7/bits/stl_list.h" 3
      template<typename _StrictWeakOrdering>
 void
 merge(list&& __x, _StrictWeakOrdering __comp);

      template<typename _StrictWeakOrdering>
 void
 merge(list& __x, _StrictWeakOrdering __comp)
 { merge(std::move(__x), __comp); }
# 1687 "/usr/include/c++/7/bits/stl_list.h" 3
      void
      reverse() noexcept
      { this->_M_impl._M_node._M_reverse(); }







      void
      sort();







      template<typename _StrictWeakOrdering>
 void
 sort(_StrictWeakOrdering);

    protected:






      template<typename _Integer>
 void
 _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
 { _M_fill_initialize(static_cast<size_type>(__n), __x); }


      template<typename _InputIterator>
 void
 _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
          __false_type)
 {
   for (; __first != __last; ++__first)

     emplace_back(*__first);



 }



      void
      _M_fill_initialize(size_type __n, const value_type& __x)
      {
 for (; __n; --__n)
   push_back(__x);
      }



      void
      _M_default_initialize(size_type __n)
      {
 for (; __n; --__n)
   emplace_back();
      }


      void
      _M_default_append(size_type __n);
# 1765 "/usr/include/c++/7/bits/stl_list.h" 3
      template<typename _Integer>
 void
 _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
 { _M_fill_assign(__n, __val); }


      template<typename _InputIterator>
 void
 _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
      __false_type);



      void
      _M_fill_assign(size_type __n, const value_type& __val);



      void
      _M_transfer(iterator __position, iterator __first, iterator __last)
      { __position._M_node->_M_transfer(__first._M_node, __last._M_node); }
# 1797 "/usr/include/c++/7/bits/stl_list.h" 3
     template<typename... _Args>
       void
       _M_insert(iterator __position, _Args&&... __args)
       {
  _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
  __tmp->_M_hook(__position._M_node);
  this->_M_inc_size(1);
       }



      void
      _M_erase(iterator __position) noexcept
      {
 this->_M_dec_size(1);
 __position._M_node->_M_unhook();
 _Node* __n = static_cast<_Node*>(__position._M_node);

 _Node_alloc_traits::destroy(_M_get_Node_allocator(), __n->_M_valptr());




 _M_put_node(__n);
      }


      void
      _M_check_equal_allocators(list& __x) noexcept
      {
 if (std::__alloc_neq<typename _Base::_Node_alloc_type>::
     _S_do_it(_M_get_Node_allocator(), __x._M_get_Node_allocator()))
   __builtin_abort();
      }


      const_iterator
      _M_resize_pos(size_type& __new_size) const;


      void
      _M_move_assign(list&& __x, true_type) noexcept
      {
 this->_M_clear();
 if (__x.empty())
   this->_M_init();
 else
   {
     this->_M_impl._M_node._M_next = __x._M_impl._M_node._M_next;
     this->_M_impl._M_node._M_next->_M_prev = &this->_M_impl._M_node;
     this->_M_impl._M_node._M_prev = __x._M_impl._M_node._M_prev;
     this->_M_impl._M_node._M_prev->_M_next = &this->_M_impl._M_node;
     this->_M_set_size(__x._M_get_size());
     __x._M_init();
   }
 std::__alloc_on_move(this->_M_get_Node_allocator(),
        __x._M_get_Node_allocator());
      }

      void
      _M_move_assign(list&& __x, false_type)
      {
 if (__x._M_get_Node_allocator() == this->_M_get_Node_allocator())
   _M_move_assign(std::move(__x), true_type{});
 else


   _M_assign_dispatch(std::__make_move_if_noexcept_iterator(__x.begin()),
        std::__make_move_if_noexcept_iterator(__x.end()),
        __false_type{});
      }

    };
}
# 1882 "/usr/include/c++/7/bits/stl_list.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator==(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
    {

      if (__x.size() != __y.size())
 return false;


      typedef typename list<_Tp, _Alloc>::const_iterator const_iterator;
      const_iterator __end1 = __x.end();
      const_iterator __end2 = __y.end();

      const_iterator __i1 = __x.begin();
      const_iterator __i2 = __y.begin();
      while (__i1 != __end1 && __i2 != __end2 && *__i1 == *__i2)
 {
   ++__i1;
   ++__i2;
 }
      return __i1 == __end1 && __i2 == __end2;
    }
# 1916 "/usr/include/c++/7/bits/stl_list.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator<(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
    { return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end()); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator!=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator<=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Tp, typename _Alloc>
    inline void
    swap(list<_Tp, _Alloc>& __x, list<_Tp, _Alloc>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }







  template<typename _Tp>
    inline ptrdiff_t
    __distance(std::_List_iterator<_Tp> __first,
        std::_List_iterator<_Tp> __last,
        input_iterator_tag __tag)
    {
      typedef std::_List_const_iterator<_Tp> _CIter;
      return std::__distance(_CIter(__first), _CIter(__last), __tag);
    }

  template<typename _Tp>
    inline ptrdiff_t
    __distance(std::_List_const_iterator<_Tp> __first,
        std::_List_const_iterator<_Tp> __last,
        input_iterator_tag)
    {
      typedef std::_List_node<size_t> _Sentinel;
      std::_List_const_iterator<_Tp> __beyond = __last;
      ++__beyond;
      bool __whole = __first == __beyond;
      if (__builtin_constant_p (__whole) && __whole)
 return *static_cast<const _Sentinel*>(__last._M_node)->_M_valptr();

      ptrdiff_t __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }



}
# 64 "/usr/include/c++/7/list" 2 3
# 1 "/usr/include/c++/7/bits/list.tcc" 1 3
# 59 "/usr/include/c++/7/bits/list.tcc" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Tp, typename _Alloc>
    void
    _List_base<_Tp, _Alloc>::
    _M_clear() noexcept
    {
      typedef _List_node<_Tp> _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
      while (__cur != &_M_impl._M_node)
 {
   _Node* __tmp = static_cast<_Node*>(__cur);
   __cur = __tmp->_M_next;
   _Tp* __val = __tmp->_M_valptr();

   _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);



   _M_put_node(__tmp);
 }
    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      typename list<_Tp, _Alloc>::iterator
      list<_Tp, _Alloc>::
      emplace(const_iterator __position, _Args&&... __args)
      {
 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 __tmp->_M_hook(__position._M_const_cast()._M_node);
 this->_M_inc_size(1);
 return iterator(__tmp);
      }


  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::

    insert(const_iterator __position, const value_type& __x)



    {
      _Node* __tmp = _M_create_node(__x);
      __tmp->_M_hook(__position._M_const_cast()._M_node);
      this->_M_inc_size(1);
      return iterator(__tmp);
    }


  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::
    insert(const_iterator __position, size_type __n, const value_type& __x)
    {
      if (__n)
 {
   list __tmp(__n, __x, get_allocator());
   iterator __it = __tmp.begin();
   splice(__position, __tmp);
   return __it;
 }
      return __position._M_const_cast();
    }

  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator, typename>
      typename list<_Tp, _Alloc>::iterator
      list<_Tp, _Alloc>::
      insert(const_iterator __position, _InputIterator __first,
      _InputIterator __last)
      {
 list __tmp(__first, __last, get_allocator());
 if (!__tmp.empty())
   {
     iterator __it = __tmp.begin();
     splice(__position, __tmp);
     return __it;
   }
 return __position._M_const_cast();
      }


  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::

    erase(const_iterator __position) noexcept



    {
      iterator __ret = iterator(__position._M_node->_M_next);
      _M_erase(__position._M_const_cast());
      return __ret;
    }
# 172 "/usr/include/c++/7/bits/list.tcc" 3
  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::const_iterator
    list<_Tp, _Alloc>::
    _M_resize_pos(size_type& __new_size) const
    {
      const_iterator __i;

      const size_type __len = size();
      if (__new_size < __len)
 {
   if (__new_size <= __len / 2)
     {
       __i = begin();
       std::advance(__i, __new_size);
     }
   else
     {
       __i = end();
       ptrdiff_t __num_erase = __len - __new_size;
       std::advance(__i, -__num_erase);
     }
   __new_size = 0;
   return __i;
 }
      else
 __i = end();





      __new_size -= __len;
      return __i;
    }


  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      size_type __i = 0;
      try
 {
   for (; __i < __n; ++__i)
     emplace_back();
 }
      catch(...)
 {
   for (; __i; --__i)
     pop_back();
   throw;
 }
    }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    resize(size_type __new_size)
    {
      const_iterator __i = _M_resize_pos(__new_size);
      if (__new_size)
 _M_default_append(__new_size);
      else
        erase(__i, end());
    }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    resize(size_type __new_size, const value_type& __x)
    {
      const_iterator __i = _M_resize_pos(__new_size);
      if (__new_size)
        insert(end(), __new_size, __x);
      else
        erase(__i, end());
    }
# 264 "/usr/include/c++/7/bits/list.tcc" 3
  template<typename _Tp, typename _Alloc>
    list<_Tp, _Alloc>&
    list<_Tp, _Alloc>::
    operator=(const list& __x)
    {
      if (this != std::__addressof(__x))
 {

   if (_Node_alloc_traits::_S_propagate_on_copy_assign())
     {
              auto& __this_alloc = this->_M_get_Node_allocator();
              auto& __that_alloc = __x._M_get_Node_allocator();
              if (!_Node_alloc_traits::_S_always_equal()
           && __this_alloc != __that_alloc)
         {

    clear();
  }
       std::__alloc_on_copy(__this_alloc, __that_alloc);
            }

   _M_assign_dispatch(__x.begin(), __x.end(), __false_type());
 }
      return *this;
    }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    _M_fill_assign(size_type __n, const value_type& __val)
    {
      iterator __i = begin();
      for (; __i != end() && __n > 0; ++__i, --__n)
        *__i = __val;
      if (__n > 0)
        insert(end(), __n, __val);
      else
        erase(__i, end());
    }

  template<typename _Tp, typename _Alloc>
    template <typename _InputIterator>
      void
      list<_Tp, _Alloc>::
      _M_assign_dispatch(_InputIterator __first2, _InputIterator __last2,
    __false_type)
      {
        iterator __first1 = begin();
        iterator __last1 = end();
        for (; __first1 != __last1 && __first2 != __last2;
      ++__first1, ++__first2)
          *__first1 = *__first2;
        if (__first2 == __last2)
          erase(__first1, __last1);
        else
          insert(__last1, __first2, __last2);
      }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    remove(const value_type& __value)
    {
      iterator __first = begin();
      iterator __last = end();
      iterator __extra = __last;
      while (__first != __last)
 {
   iterator __next = __first;
   ++__next;
   if (*__first == __value)
     {



       if (std::__addressof(*__first) != std::__addressof(__value))
  _M_erase(__first);
       else
  __extra = __first;
     }
   __first = __next;
 }
      if (__extra != __last)
 _M_erase(__extra);
    }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    unique()
    {
      iterator __first = begin();
      iterator __last = end();
      if (__first == __last)
 return;
      iterator __next = __first;
      while (++__next != __last)
 {
   if (*__first == *__next)
     _M_erase(__next);
   else
     __first = __next;
   __next = __first;
 }
    }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::

    merge(list&& __x)



    {


      if (this != std::__addressof(__x))
 {
   _M_check_equal_allocators(__x);

   iterator __first1 = begin();
   iterator __last1 = end();
   iterator __first2 = __x.begin();
   iterator __last2 = __x.end();
   const size_t __orig_size = __x.size();
   try {
     while (__first1 != __last1 && __first2 != __last2)
       if (*__first2 < *__first1)
  {
    iterator __next = __first2;
    _M_transfer(__first1, __first2, ++__next);
    __first2 = __next;
  }
       else
  ++__first1;
     if (__first2 != __last2)
       _M_transfer(__last1, __first2, __last2);

     this->_M_inc_size(__x._M_get_size());
     __x._M_set_size(0);
   }
   catch(...)
     {
       const size_t __dist = std::distance(__first2, __last2);
       this->_M_inc_size(__orig_size - __dist);
       __x._M_set_size(__dist);
       throw;
     }
 }
    }

  template<typename _Tp, typename _Alloc>
    template <typename _StrictWeakOrdering>
      void
      list<_Tp, _Alloc>::

      merge(list&& __x, _StrictWeakOrdering __comp)



      {


 if (this != std::__addressof(__x))
   {
     _M_check_equal_allocators(__x);

     iterator __first1 = begin();
     iterator __last1 = end();
     iterator __first2 = __x.begin();
     iterator __last2 = __x.end();
     const size_t __orig_size = __x.size();
     try
       {
  while (__first1 != __last1 && __first2 != __last2)
    if (__comp(*__first2, *__first1))
      {
        iterator __next = __first2;
        _M_transfer(__first1, __first2, ++__next);
        __first2 = __next;
      }
    else
      ++__first1;
  if (__first2 != __last2)
    _M_transfer(__last1, __first2, __last2);

  this->_M_inc_size(__x._M_get_size());
  __x._M_set_size(0);
       }
     catch(...)
       {
  const size_t __dist = std::distance(__first2, __last2);
  this->_M_inc_size(__orig_size - __dist);
  __x._M_set_size(__dist);
  throw;
       }
   }
      }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    sort()
    {

      if (this->_M_impl._M_node._M_next != &this->_M_impl._M_node
   && this->_M_impl._M_node._M_next->_M_next != &this->_M_impl._M_node)
      {
        list __carry;
        list __tmp[64];
        list * __fill = __tmp;
        list * __counter;
 try
   {
     do
       {
  __carry.splice(__carry.begin(), *this, begin());

  for(__counter = __tmp;
      __counter != __fill && !__counter->empty();
      ++__counter)
    {
      __counter->merge(__carry);
      __carry.swap(*__counter);
    }
  __carry.swap(*__counter);
  if (__counter == __fill)
    ++__fill;
       }
     while ( !empty() );

     for (__counter = __tmp + 1; __counter != __fill; ++__counter)
       __counter->merge(*(__counter - 1));
     swap( *(__fill - 1) );
   }
 catch(...)
   {
     this->splice(this->end(), __carry);
     for (int __i = 0; __i < sizeof(__tmp)/sizeof(__tmp[0]); ++__i)
       this->splice(this->end(), __tmp[__i]);
     throw;
   }
      }
    }

  template<typename _Tp, typename _Alloc>
    template <typename _Predicate>
      void
      list<_Tp, _Alloc>::
      remove_if(_Predicate __pred)
      {
        iterator __first = begin();
        iterator __last = end();
        while (__first != __last)
   {
     iterator __next = __first;
     ++__next;
     if (__pred(*__first))
       _M_erase(__first);
     __first = __next;
   }
      }

  template<typename _Tp, typename _Alloc>
    template <typename _BinaryPredicate>
      void
      list<_Tp, _Alloc>::
      unique(_BinaryPredicate __binary_pred)
      {
        iterator __first = begin();
        iterator __last = end();
        if (__first == __last)
   return;
        iterator __next = __first;
        while (++__next != __last)
   {
     if (__binary_pred(*__first, *__next))
       _M_erase(__next);
     else
       __first = __next;
     __next = __first;
   }
      }

  template<typename _Tp, typename _Alloc>
    template <typename _StrictWeakOrdering>
      void
      list<_Tp, _Alloc>::
      sort(_StrictWeakOrdering __comp)
      {

 if (this->_M_impl._M_node._M_next != &this->_M_impl._M_node
     && this->_M_impl._M_node._M_next->_M_next != &this->_M_impl._M_node)
   {
     list __carry;
     list __tmp[64];
     list * __fill = __tmp;
     list * __counter;
     try
       {
  do
    {
      __carry.splice(__carry.begin(), *this, begin());

      for(__counter = __tmp;
   __counter != __fill && !__counter->empty();
   ++__counter)
        {
   __counter->merge(__carry, __comp);
   __carry.swap(*__counter);
        }
      __carry.swap(*__counter);
      if (__counter == __fill)
        ++__fill;
    }
  while ( !empty() );

  for (__counter = __tmp + 1; __counter != __fill; ++__counter)
    __counter->merge(*(__counter - 1), __comp);
  swap(*(__fill - 1));
       }
     catch(...)
       {
  this->splice(this->end(), __carry);
  for (int __i = 0; __i < sizeof(__tmp)/sizeof(__tmp[0]); ++__i)
    this->splice(this->end(), __tmp[__i]);
  throw;
       }
   }
      }


}
# 65 "/usr/include/c++/7/list" 2 3
# 25 "/workspace/acl/lib_acl_cpp/src/acl_stdafx.hpp" 2
# 1 "/usr/include/c++/7/memory" 1 3
# 46 "/usr/include/c++/7/memory" 3
       
# 47 "/usr/include/c++/7/memory" 3
# 66 "/usr/include/c++/7/memory" 3
# 1 "/usr/include/c++/7/bits/stl_tempbuf.h" 1 3
# 62 "/usr/include/c++/7/bits/stl_tempbuf.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 83 "/usr/include/c++/7/bits/stl_tempbuf.h" 3
  template<typename _Tp>
    pair<_Tp*, ptrdiff_t>
    get_temporary_buffer(ptrdiff_t __len) noexcept
    {
      const ptrdiff_t __max =
 __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
      if (__len > __max)
 __len = __max;

      while (__len > 0)
 {
   _Tp* __tmp = static_cast<_Tp*>(::operator new(__len * sizeof(_Tp),
       std::nothrow));
   if (__tmp != 0)
     return std::pair<_Tp*, ptrdiff_t>(__tmp, __len);
   __len /= 2;
 }
      return std::pair<_Tp*, ptrdiff_t>(static_cast<_Tp*>(0), 0);
    }
# 110 "/usr/include/c++/7/bits/stl_tempbuf.h" 3
  template<typename _Tp>
    inline void
    return_temporary_buffer(_Tp* __p)
    { ::operator delete(__p, std::nothrow); }







  template<typename _ForwardIterator, typename _Tp>
    class _Temporary_buffer
    {

     

    public:
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef pointer iterator;
      typedef ptrdiff_t size_type;

    protected:
      size_type _M_original_len;
      size_type _M_len;
      pointer _M_buffer;

    public:

      size_type
      size() const
      { return _M_len; }


      size_type
      requested_size() const
      { return _M_original_len; }


      iterator
      begin()
      { return _M_buffer; }


      iterator
      end()
      { return _M_buffer + _M_len; }





      _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last);

      ~_Temporary_buffer()
      {
 std::_Destroy(_M_buffer, _M_buffer + _M_len);
 std::return_temporary_buffer(_M_buffer);
      }

    private:

      _Temporary_buffer(const _Temporary_buffer&);

      void
      operator=(const _Temporary_buffer&);
    };


  template<bool>
    struct __uninitialized_construct_buf_dispatch
    {
      template<typename _Pointer, typename _ForwardIterator>
        static void
        __ucr(_Pointer __first, _Pointer __last,
       _ForwardIterator __seed)
        {
   if(__first == __last)
     return;

   _Pointer __cur = __first;
   try
     {
       std::_Construct(std::__addressof(*__first),
         std::move(*__seed));
       _Pointer __prev = __cur;
       ++__cur;
       for(; __cur != __last; ++__cur, ++__prev)
  std::_Construct(std::__addressof(*__cur),
    std::move(*__prev));
       *__seed = std::move(*__prev);
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_construct_buf_dispatch<true>
    {
      template<typename _Pointer, typename _ForwardIterator>
        static void
        __ucr(_Pointer, _Pointer, _ForwardIterator) { }
    };
# 229 "/usr/include/c++/7/bits/stl_tempbuf.h" 3
  template<typename _Pointer, typename _ForwardIterator>
    inline void
    __uninitialized_construct_buf(_Pointer __first, _Pointer __last,
      _ForwardIterator __seed)
    {
      typedef typename std::iterator_traits<_Pointer>::value_type
 _ValueType;

      std::__uninitialized_construct_buf_dispatch<
        __has_trivial_constructor(_ValueType)>::
   __ucr(__first, __last, __seed);
    }

  template<typename _ForwardIterator, typename _Tp>
    _Temporary_buffer<_ForwardIterator, _Tp>::
    _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)
    : _M_original_len(std::distance(__first, __last)),
      _M_len(0), _M_buffer(0)
    {
      try
 {
   std::pair<pointer, size_type> __p(std::get_temporary_buffer<
         value_type>(_M_original_len));
   _M_buffer = __p.first;
   _M_len = __p.second;
   if (_M_buffer)
     std::__uninitialized_construct_buf(_M_buffer, _M_buffer + _M_len,
            __first);
 }
      catch(...)
 {
   std::return_temporary_buffer(_M_buffer);
   _M_buffer = 0;
   _M_len = 0;
   throw;
 }
    }


}
# 67 "/usr/include/c++/7/memory" 2 3
# 1 "/usr/include/c++/7/bits/stl_raw_storage_iter.h" 1 3
# 59 "/usr/include/c++/7/bits/stl_raw_storage_iter.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{






  template <class _OutputIterator, class _Tp>
    class raw_storage_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _OutputIterator _M_iter;

    public:
      explicit
      raw_storage_iterator(_OutputIterator __x)
      : _M_iter(__x) {}

      raw_storage_iterator&
      operator*() { return *this; }

      raw_storage_iterator&
      operator=(const _Tp& __element)
      {
 std::_Construct(std::__addressof(*_M_iter), __element);
 return *this;
      }




      raw_storage_iterator&
      operator=(_Tp&& __element)
      {
 std::_Construct(std::__addressof(*_M_iter), std::move(__element));
 return *this;
      }


      raw_storage_iterator&
      operator++()
      {
 ++_M_iter;
 return *this;
      }

      raw_storage_iterator
      operator++(int)
      {
 raw_storage_iterator __tmp = *this;
 ++_M_iter;
 return __tmp;
      }



      _OutputIterator base() const { return _M_iter; }
    };


}
# 68 "/usr/include/c++/7/memory" 2 3






# 1 "/usr/include/c++/7/ext/concurrence.h" 1 3
# 32 "/usr/include/c++/7/ext/concurrence.h" 3
       
# 33 "/usr/include/c++/7/ext/concurrence.h" 3







namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{







  enum _Lock_policy { _S_single, _S_mutex, _S_atomic };



  static const _Lock_policy __default_lock_policy =



  _S_atomic;
# 67 "/usr/include/c++/7/ext/concurrence.h" 3
  class __concurrence_lock_error : public std::exception
  {
  public:
    virtual char const*
    what() const throw()
    { return "__gnu_cxx::__concurrence_lock_error"; }
  };

  class __concurrence_unlock_error : public std::exception
  {
  public:
    virtual char const*
    what() const throw()
    { return "__gnu_cxx::__concurrence_unlock_error"; }
  };

  class __concurrence_broadcast_error : public std::exception
  {
  public:
    virtual char const*
    what() const throw()
    { return "__gnu_cxx::__concurrence_broadcast_error"; }
  };

  class __concurrence_wait_error : public std::exception
  {
  public:
    virtual char const*
    what() const throw()
    { return "__gnu_cxx::__concurrence_wait_error"; }
  };


  inline void
  __throw_concurrence_lock_error()
  { (throw (__concurrence_lock_error())); }

  inline void
  __throw_concurrence_unlock_error()
  { (throw (__concurrence_unlock_error())); }


  inline void
  __throw_concurrence_broadcast_error()
  { (throw (__concurrence_broadcast_error())); }

  inline void
  __throw_concurrence_wait_error()
  { (throw (__concurrence_wait_error())); }


  class __mutex
  {
  private:

    __gthread_mutex_t _M_mutex = { { 0, 0, 0, 0, 0, 0, 0, { 0, 0 } } };




    __mutex(const __mutex&);
    __mutex& operator=(const __mutex&);

  public:
    __mutex()
    {




    }
# 147 "/usr/include/c++/7/ext/concurrence.h" 3
    void lock()
    {

      if (__gthread_active_p())
 {
   if (__gthread_mutex_lock(&_M_mutex) != 0)
     __throw_concurrence_lock_error();
 }

    }

    void unlock()
    {

      if (__gthread_active_p())
 {
   if (__gthread_mutex_unlock(&_M_mutex) != 0)
     __throw_concurrence_unlock_error();
 }

    }

    __gthread_mutex_t* gthread_mutex(void)
      { return &_M_mutex; }
  };

  class __recursive_mutex
  {
  private:

    __gthread_recursive_mutex_t _M_mutex = { { 0, 0, 0, 0, PTHREAD_MUTEX_RECURSIVE_NP, 0, 0, { 0, 0 } } };




    __recursive_mutex(const __recursive_mutex&);
    __recursive_mutex& operator=(const __recursive_mutex&);

  public:
    __recursive_mutex()
    {




    }
# 202 "/usr/include/c++/7/ext/concurrence.h" 3
    void lock()
    {

      if (__gthread_active_p())
 {
   if (__gthread_recursive_mutex_lock(&_M_mutex) != 0)
     __throw_concurrence_lock_error();
 }

    }

    void unlock()
    {

      if (__gthread_active_p())
 {
   if (__gthread_recursive_mutex_unlock(&_M_mutex) != 0)
     __throw_concurrence_unlock_error();
 }

    }

    __gthread_recursive_mutex_t* gthread_recursive_mutex(void)
    { return &_M_mutex; }
  };




  class __scoped_lock
  {
  public:
    typedef __mutex __mutex_type;

  private:
    __mutex_type& _M_device;

    __scoped_lock(const __scoped_lock&);
    __scoped_lock& operator=(const __scoped_lock&);

  public:
    explicit __scoped_lock(__mutex_type& __name) : _M_device(__name)
    { _M_device.lock(); }

    ~__scoped_lock() throw()
    { _M_device.unlock(); }
  };


  class __cond
  {
  private:

    __gthread_cond_t _M_cond = { { {0}, {0}, {0, 0}, {0, 0}, 0, 0, {0, 0} } };




    __cond(const __cond&);
    __cond& operator=(const __cond&);

  public:
    __cond()
    {




    }
# 280 "/usr/include/c++/7/ext/concurrence.h" 3
    void broadcast()
    {

      if (__gthread_active_p())
 {
   if (__gthread_cond_broadcast(&_M_cond) != 0)
     __throw_concurrence_broadcast_error();
 }

    }

    void wait(__mutex *mutex)
    {

      {
   if (__gthread_cond_wait(&_M_cond, mutex->gthread_mutex()) != 0)
     __throw_concurrence_wait_error();
      }

    }

    void wait_recursive(__recursive_mutex *mutex)
    {

      {
   if (__gthread_cond_wait_recursive(&_M_cond,
         mutex->gthread_recursive_mutex())
       != 0)
     __throw_concurrence_wait_error();
      }

    }
  };



}
# 75 "/usr/include/c++/7/memory" 2 3





# 1 "/usr/include/c++/7/bits/unique_ptr.h" 1 3
# 41 "/usr/include/c++/7/bits/unique_ptr.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{








  template<typename> class auto_ptr;



  template<typename _Tp>
    struct default_delete
    {

      constexpr default_delete() noexcept = default;






      template<typename _Up, typename = typename
        enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }


      void
      operator()(_Tp* __ptr) const
      {
 static_assert(!is_void<_Tp>::value,
        "can't delete pointer to incomplete type");
 static_assert(sizeof(_Tp)>0,
        "can't delete pointer to incomplete type");
 delete __ptr;
      }
    };




  template<typename _Tp>
    struct default_delete<_Tp[]>
    {
    public:

      constexpr default_delete() noexcept = default;
# 101 "/usr/include/c++/7/bits/unique_ptr.h" 3
      template<typename _Up, typename = typename
        enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type>
        default_delete(const default_delete<_Up[]>&) noexcept { }


      template<typename _Up>
      typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
 operator()(_Up* __ptr) const
      {
 static_assert(sizeof(_Tp)>0,
        "can't delete pointer to incomplete type");
 delete [] __ptr;
      }
    };

  template <typename _Tp, typename _Dp>
    class __uniq_ptr_impl
    {
      template <typename _Up, typename _Ep, typename = void>
 struct _Ptr
 {
   using type = _Up*;
 };

      template <typename _Up, typename _Ep>
 struct
 _Ptr<_Up, _Ep, __void_t<typename remove_reference<_Ep>::type::pointer>>
 {
   using type = typename remove_reference<_Ep>::type::pointer;
 };

    public:
      using _DeleterConstraint = enable_if<
        __and_<__not_<is_pointer<_Dp>>,
        is_default_constructible<_Dp>>::value>;

      using pointer = typename _Ptr<_Tp, _Dp>::type;

      __uniq_ptr_impl() = default;
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }

      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 : _M_t(__p, std::forward<_Del>(__d)) { }

      pointer& _M_ptr() { return std::get<0>(_M_t); }
      pointer _M_ptr() const { return std::get<0>(_M_t); }
      _Dp& _M_deleter() { return std::get<1>(_M_t); }
      const _Dp& _M_deleter() const { return std::get<1>(_M_t); }

    private:
      tuple<pointer, _Dp> _M_t;
    };


  template <typename _Tp, typename _Dp = default_delete<_Tp>>
    class unique_ptr
    {
      template <class _Up>
      using _DeleterConstraint =
 typename __uniq_ptr_impl<_Tp, _Up>::_DeleterConstraint::type;

      __uniq_ptr_impl<_Tp, _Dp> _M_t;

    public:
      using pointer = typename __uniq_ptr_impl<_Tp, _Dp>::pointer;
      using element_type = _Tp;
      using deleter_type = _Dp;



      template<typename _Up, typename _Ep>
 using __safe_conversion_up = __and_<
   is_convertible<typename unique_ptr<_Up, _Ep>::pointer, pointer>,
   __not_<is_array<_Up>>
        >;




      template <typename _Up = _Dp,
  typename = _DeleterConstraint<_Up>>
 constexpr unique_ptr() noexcept
 : _M_t()
 { }







      template <typename _Up = _Dp,
  typename = _DeleterConstraint<_Up>>
 explicit
 unique_ptr(pointer __p) noexcept
 : _M_t(__p)
        { }
# 207 "/usr/include/c++/7/bits/unique_ptr.h" 3
      unique_ptr(pointer __p,
   typename conditional<is_reference<deleter_type>::value,
     deleter_type, const deleter_type&>::type __d) noexcept
      : _M_t(__p, __d) { }
# 219 "/usr/include/c++/7/bits/unique_ptr.h" 3
      unique_ptr(pointer __p,
   typename remove_reference<deleter_type>::type&& __d) noexcept
      : _M_t(std::move(__p), std::move(__d))
      { static_assert(!std::is_reference<deleter_type>::value,
        "rvalue deleter bound to reference"); }


      template <typename _Up = _Dp,
  typename = _DeleterConstraint<_Up>>
 constexpr unique_ptr(nullptr_t) noexcept : _M_t() { }




      unique_ptr(unique_ptr&& __u) noexcept
      : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }







      template<typename _Up, typename _Ep, typename = _Require<
               __safe_conversion_up<_Up, _Ep>,
        typename conditional<is_reference<_Dp>::value,
        is_same<_Ep, _Dp>,
        is_convertible<_Ep, _Dp>>::type>>
 unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 : _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 { }



      template<typename _Up, typename = _Require<
        is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
 unique_ptr(auto_ptr<_Up>&& __u) noexcept;



      ~unique_ptr() noexcept
      {
 auto& __ptr = _M_t._M_ptr();
 if (__ptr != nullptr)
   get_deleter()(__ptr);
 __ptr = pointer();
      }
# 275 "/usr/include/c++/7/bits/unique_ptr.h" 3
      unique_ptr&
      operator=(unique_ptr&& __u) noexcept
      {
 reset(__u.release());
 get_deleter() = std::forward<deleter_type>(__u.get_deleter());
 return *this;
      }
# 290 "/usr/include/c++/7/bits/unique_ptr.h" 3
      template<typename _Up, typename _Ep>
        typename enable_if< __and_<
          __safe_conversion_up<_Up, _Ep>,
          is_assignable<deleter_type&, _Ep&&>
          >::value,
          unique_ptr&>::type
 operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 {
   reset(__u.release());
   get_deleter() = std::forward<_Ep>(__u.get_deleter());
   return *this;
 }


      unique_ptr&
      operator=(nullptr_t) noexcept
      {
 reset();
 return *this;
      }




      typename add_lvalue_reference<element_type>::type
      operator*() const
      {
 ;
 return *get();
      }


      pointer
      operator->() const noexcept
      {
 ;
 return get();
      }


      pointer
      get() const noexcept
      { return _M_t._M_ptr(); }


      deleter_type&
      get_deleter() noexcept
      { return _M_t._M_deleter(); }


      const deleter_type&
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }


      explicit operator bool() const noexcept
      { return get() == pointer() ? false : true; }




      pointer
      release() noexcept
      {
 pointer __p = get();
 _M_t._M_ptr() = pointer();
 return __p;
      }







      void
      reset(pointer __p = pointer()) noexcept
      {
 using std::swap;
 swap(_M_t._M_ptr(), __p);
 if (__p != pointer())
   get_deleter()(__p);
      }


      void
      swap(unique_ptr& __u) noexcept
      {
 using std::swap;
 swap(_M_t, __u._M_t);
      }


      unique_ptr(const unique_ptr&) = delete;
      unique_ptr& operator=(const unique_ptr&) = delete;
  };





  template<typename _Tp, typename _Dp>
    class unique_ptr<_Tp[], _Dp>
    {
      template <typename _Up>
      using _DeleterConstraint =
 typename __uniq_ptr_impl<_Tp, _Up>::_DeleterConstraint::type;

      __uniq_ptr_impl<_Tp, _Dp> _M_t;

      template<typename _Up>
 using __remove_cv = typename remove_cv<_Up>::type;


      template<typename _Up>
 using __is_derived_Tp
   = __and_< is_base_of<_Tp, _Up>,
      __not_<is_same<__remove_cv<_Tp>, __remove_cv<_Up>>> >;

    public:
      using pointer = typename __uniq_ptr_impl<_Tp, _Dp>::pointer;
      using element_type = _Tp;
      using deleter_type = _Dp;



      template<typename _Up, typename _Ep,
               typename _UPtr = unique_ptr<_Up, _Ep>,
        typename _UP_pointer = typename _UPtr::pointer,
        typename _UP_element_type = typename _UPtr::element_type>
 using __safe_conversion_up = __and_<
          is_array<_Up>,
          is_same<pointer, element_type*>,
          is_same<_UP_pointer, _UP_element_type*>,
          is_convertible<_UP_element_type(*)[], element_type(*)[]>
        >;


      template<typename _Up>
        using __safe_conversion_raw = __and_<
          __or_<__or_<is_same<_Up, pointer>,
                      is_same<_Up, nullptr_t>>,
                __and_<is_pointer<_Up>,
                       is_same<pointer, element_type*>,
                       is_convertible<
                         typename remove_pointer<_Up>::type(*)[],
                         element_type(*)[]>
                >
          >
        >;




      template <typename _Up = _Dp,
  typename = _DeleterConstraint<_Up>>
 constexpr unique_ptr() noexcept
 : _M_t()
 { }
# 457 "/usr/include/c++/7/bits/unique_ptr.h" 3
      template<typename _Up,
        typename _Vp = _Dp,
        typename = _DeleterConstraint<_Vp>,
        typename = typename enable_if<
                 __safe_conversion_raw<_Up>::value, bool>::type>
 explicit
 unique_ptr(_Up __p) noexcept
 : _M_t(__p)
        { }
# 475 "/usr/include/c++/7/bits/unique_ptr.h" 3
      template<typename _Up,
               typename = typename enable_if<
                 __safe_conversion_raw<_Up>::value, bool>::type>
      unique_ptr(_Up __p,
                 typename conditional<is_reference<deleter_type>::value,
                 deleter_type, const deleter_type&>::type __d) noexcept
      : _M_t(__p, __d) { }
# 491 "/usr/include/c++/7/bits/unique_ptr.h" 3
      template<typename _Up,
               typename = typename enable_if<
                 __safe_conversion_raw<_Up>::value, bool>::type>
      unique_ptr(_Up __p, typename
   remove_reference<deleter_type>::type&& __d) noexcept
      : _M_t(std::move(__p), std::move(__d))
      { static_assert(!is_reference<deleter_type>::value,
        "rvalue deleter bound to reference"); }


      unique_ptr(unique_ptr&& __u) noexcept
      : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }


      template <typename _Up = _Dp,
  typename = _DeleterConstraint<_Up>>
 constexpr unique_ptr(nullptr_t) noexcept : _M_t() { }

      template<typename _Up, typename _Ep, typename = _Require<
        __safe_conversion_up<_Up, _Ep>,
        typename conditional<is_reference<_Dp>::value,
        is_same<_Ep, _Dp>,
        is_convertible<_Ep, _Dp>>::type>>
 unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 : _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 { }


      ~unique_ptr()
      {
 auto& __ptr = _M_t._M_ptr();
 if (__ptr != nullptr)
   get_deleter()(__ptr);
 __ptr = pointer();
      }
# 535 "/usr/include/c++/7/bits/unique_ptr.h" 3
      unique_ptr&
      operator=(unique_ptr&& __u) noexcept
      {
 reset(__u.release());
 get_deleter() = std::forward<deleter_type>(__u.get_deleter());
 return *this;
      }
# 550 "/usr/include/c++/7/bits/unique_ptr.h" 3
      template<typename _Up, typename _Ep>
 typename
 enable_if<__and_<__safe_conversion_up<_Up, _Ep>,
                         is_assignable<deleter_type&, _Ep&&>
                  >::value,
                  unique_ptr&>::type
 operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 {
   reset(__u.release());
   get_deleter() = std::forward<_Ep>(__u.get_deleter());
   return *this;
 }


      unique_ptr&
      operator=(nullptr_t) noexcept
      {
 reset();
 return *this;
      }




      typename std::add_lvalue_reference<element_type>::type
      operator[](size_t __i) const
      {
 ;
 return get()[__i];
      }


      pointer
      get() const noexcept
      { return _M_t._M_ptr(); }


      deleter_type&
      get_deleter() noexcept
      { return _M_t._M_deleter(); }


      const deleter_type&
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }


      explicit operator bool() const noexcept
      { return get() == pointer() ? false : true; }




      pointer
      release() noexcept
      {
 pointer __p = get();
 _M_t._M_ptr() = pointer();
 return __p;
      }







      template <typename _Up,
                typename = _Require<
                  __or_<is_same<_Up, pointer>,
                        __and_<is_same<pointer, element_type*>,
                               is_pointer<_Up>,
                               is_convertible<
                                 typename remove_pointer<_Up>::type(*)[],
                                 element_type(*)[]
                               >
                        >
                  >
               >>
      void
      reset(_Up __p) noexcept
      {
 pointer __ptr = __p;
 using std::swap;
 swap(_M_t._M_ptr(), __ptr);
 if (__ptr != nullptr)
   get_deleter()(__ptr);
      }

      void reset(nullptr_t = nullptr) noexcept
      {
        reset(pointer());
      }


      void
      swap(unique_ptr& __u) noexcept
      {
 using std::swap;
 swap(_M_t, __u._M_t);
      }


      unique_ptr(const unique_ptr&) = delete;
      unique_ptr& operator=(const unique_ptr&) = delete;
    };

  template<typename _Tp, typename _Dp>
    inline


    typename enable_if<__is_swappable<_Dp>::value>::type



    swap(unique_ptr<_Tp, _Dp>& __x,
  unique_ptr<_Tp, _Dp>& __y) noexcept
    { __x.swap(__y); }


  template<typename _Tp, typename _Dp>
    typename enable_if<!__is_swappable<_Dp>::value>::type
    swap(unique_ptr<_Tp, _Dp>&,
  unique_ptr<_Tp, _Dp>&) = delete;


  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator==(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() == __y.get(); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator==(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
    { return !__x; }

  template<typename _Tp, typename _Dp>
    inline bool
    operator==(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept
    { return !__x; }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() != __y.get(); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
    { return (bool)__x; }

  template<typename _Tp, typename _Dp>
    inline bool
    operator!=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept
    { return (bool)__x; }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator<(const unique_ptr<_Tp, _Dp>& __x,
       const unique_ptr<_Up, _Ep>& __y)
    {
      typedef typename
 std::common_type<typename unique_ptr<_Tp, _Dp>::pointer,
                  typename unique_ptr<_Up, _Ep>::pointer>::type _CT;
      return std::less<_CT>()(__x.get(), __y.get());
    }

  template<typename _Tp, typename _Dp>
    inline bool
    operator<(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),
         nullptr); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator<(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,
         __x.get()); }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator<=(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return !(__y < __x); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator<=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    { return !(nullptr < __x); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator<=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    { return !(__x < nullptr); }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator>(const unique_ptr<_Tp, _Dp>& __x,
       const unique_ptr<_Up, _Ep>& __y)
    { return (__y < __x); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator>(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,
         __x.get()); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator>(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),
         nullptr); }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator>=(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return !(__x < __y); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator>=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    { return !(__x < nullptr); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator>=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    { return !(nullptr < __x); }


  template<typename _Tp, typename _Dp>
    struct hash<unique_ptr<_Tp, _Dp>>
    : public __hash_base<size_t, unique_ptr<_Tp, _Dp>>,
    private __poison_hash<typename unique_ptr<_Tp, _Dp>::pointer>
    {
      size_t
      operator()(const unique_ptr<_Tp, _Dp>& __u) const noexcept
      {
 typedef unique_ptr<_Tp, _Dp> _UP;
 return std::hash<typename _UP::pointer>()(__u.get());
      }
    };





  template<typename _Tp>
    struct _MakeUniq
    { typedef unique_ptr<_Tp> __single_object; };

  template<typename _Tp>
    struct _MakeUniq<_Tp[]>
    { typedef unique_ptr<_Tp[]> __array; };

  template<typename _Tp, size_t _Bound>
    struct _MakeUniq<_Tp[_Bound]>
    { struct __invalid_type { }; };


  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }


  template<typename _Tp>
    inline typename _MakeUniq<_Tp>::__array
    make_unique(size_t __num)
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }


  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__invalid_type
    make_unique(_Args&&...) = delete;





}
# 81 "/usr/include/c++/7/memory" 2 3
# 1 "/usr/include/c++/7/bits/shared_ptr.h" 1 3
# 52 "/usr/include/c++/7/bits/shared_ptr.h" 3
# 1 "/usr/include/c++/7/bits/shared_ptr_base.h" 1 3
# 56 "/usr/include/c++/7/bits/shared_ptr_base.h" 3
# 1 "/usr/include/c++/7/bits/refwrap.h" 1 3
# 33 "/usr/include/c++/7/bits/refwrap.h" 3
       
# 34 "/usr/include/c++/7/bits/refwrap.h" 3
# 43 "/usr/include/c++/7/bits/refwrap.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Functor, typename = __void_t<>>
    struct _Maybe_get_result_type
    { };

  template<typename _Functor>
    struct _Maybe_get_result_type<_Functor,
      __void_t<typename _Functor::result_type>>
    { typedef typename _Functor::result_type result_type; };





  template<typename _Functor>
    struct _Weak_result_type_impl
    : _Maybe_get_result_type<_Functor>
    { };


  template<typename _Res, typename... _ArgTypes >
    struct _Weak_result_type_impl<_Res(_ArgTypes...) >
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes >
    struct _Weak_result_type_impl<_Res(_ArgTypes......) >
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...) const>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......) const>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...) volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......) volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...) const volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......) const volatile>
    { typedef _Res result_type; };


  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(&)(_ArgTypes...)>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(&)(_ArgTypes......)>
    { typedef _Res result_type; };


  template<typename _Res, typename... _ArgTypes >
    struct _Weak_result_type_impl<_Res(*)(_ArgTypes...) >
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes >
    struct _Weak_result_type_impl<_Res(*)(_ArgTypes......)
      >
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes
    >
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...)
      >
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes
    >
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......)
      >
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes
    >
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...) const
      >
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes
    >
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......) const
      >
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes
    >
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...) volatile
      >
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes
    >
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......) volatile
      >
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes
    >
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...)
      const volatile >
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes
    >
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......)
      const volatile >
    { typedef _Res result_type; };





  template<typename _Functor>
    struct _Weak_result_type
    : _Weak_result_type_impl<typename remove_cv<_Functor>::type>
    { };


  template<typename _Tp, typename = __void_t<>>
    struct _Refwrap_base_arg1
    { };


  template<typename _Tp>
    struct _Refwrap_base_arg1<_Tp,
         __void_t<typename _Tp::argument_type>>
    {
      typedef typename _Tp::argument_type argument_type;
    };


  template<typename _Tp, typename = __void_t<>>
    struct _Refwrap_base_arg2
    { };


  template<typename _Tp>
    struct _Refwrap_base_arg2<_Tp,
         __void_t<typename _Tp::first_argument_type,
           typename _Tp::second_argument_type>>
    {
      typedef typename _Tp::first_argument_type first_argument_type;
      typedef typename _Tp::second_argument_type second_argument_type;
    };







  template<typename _Tp>
    struct _Reference_wrapper_base
    : _Weak_result_type<_Tp>, _Refwrap_base_arg1<_Tp>, _Refwrap_base_arg2<_Tp>
    { };


  template<typename _Res, typename _T1 >
    struct _Reference_wrapper_base<_Res(_T1) >
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) const>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) volatile>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) const volatile>
    : unary_function<_T1, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2 >
    struct _Reference_wrapper_base<_Res(_T1, _T2) >
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) const>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) volatile>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) const volatile>
    : binary_function<_T1, _T2, _Res>
    { };


  template<typename _Res, typename _T1 >
    struct _Reference_wrapper_base<_Res(*)(_T1) >
    : unary_function<_T1, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2 >
    struct _Reference_wrapper_base<_Res(*)(_T1, _T2) >
    : binary_function<_T1, _T2, _Res>
    { };


  template<typename _Res, typename _T1 >
    struct _Reference_wrapper_base<_Res (_T1::*)() >
    : unary_function<_T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2 >
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2) >
    : binary_function<_T1*, _T2, _Res>
    { };


  template<typename _Res, typename _T1 >
    struct _Reference_wrapper_base<_Res (_T1::*)() const >
    : unary_function<const _T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2 >
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2) const >
    : binary_function<const _T1*, _T2, _Res>
    { };


  template<typename _Res, typename _T1 >
    struct _Reference_wrapper_base<_Res (_T1::*)() volatile >
    : unary_function<volatile _T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2 >
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2) volatile >
    : binary_function<volatile _T1*, _T2, _Res>
    { };


  template<typename _Res, typename _T1 >
    struct _Reference_wrapper_base<_Res (_T1::*)() const volatile >
    : unary_function<const volatile _T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2 >
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2) const volatile >
    : binary_function<const volatile _T1*, _T2, _Res>
    { };






  template<typename _Tp>
    class reference_wrapper
    : public _Reference_wrapper_base<typename remove_cv<_Tp>::type>
    {
      _Tp* _M_data;

    public:
      typedef _Tp type;

      reference_wrapper(_Tp& __indata) noexcept
      : _M_data(std::__addressof(__indata))
      { }

      reference_wrapper(_Tp&&) = delete;

      reference_wrapper(const reference_wrapper&) = default;

      reference_wrapper&
      operator=(const reference_wrapper&) = default;

      operator _Tp&() const noexcept
      { return this->get(); }

      _Tp&
      get() const noexcept
      { return *_M_data; }

      template<typename... _Args>
 typename result_of<_Tp&(_Args&&...)>::type
 operator()(_Args&&... __args) const
 {
   return std::__invoke(get(), std::forward<_Args>(__args)...);
 }
    };



  template<typename _Tp>
    inline reference_wrapper<_Tp>
    ref(_Tp& __t) noexcept
    { return reference_wrapper<_Tp>(__t); }


  template<typename _Tp>
    inline reference_wrapper<const _Tp>
    cref(const _Tp& __t) noexcept
    { return reference_wrapper<const _Tp>(__t); }

  template<typename _Tp>
    void ref(const _Tp&&) = delete;

  template<typename _Tp>
    void cref(const _Tp&&) = delete;


  template<typename _Tp>
    inline reference_wrapper<_Tp>
    ref(reference_wrapper<_Tp> __t) noexcept
    { return ref(__t.get()); }


  template<typename _Tp>
    inline reference_wrapper<const _Tp>
    cref(reference_wrapper<_Tp> __t) noexcept
    { return cref(__t.get()); }




}
# 57 "/usr/include/c++/7/bits/shared_ptr_base.h" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename> class auto_ptr;






  class bad_weak_ptr : public std::exception
  {
  public:
    virtual char const* what() const noexcept;

    virtual ~bad_weak_ptr() noexcept;
  };


  inline void
  __throw_bad_weak_ptr()
  { (throw (bad_weak_ptr())); }

  using __gnu_cxx::_Lock_policy;
  using __gnu_cxx::__default_lock_policy;
  using __gnu_cxx::_S_single;
  using __gnu_cxx::_S_mutex;
  using __gnu_cxx::_S_atomic;


  template<_Lock_policy _Lp>
    class _Mutex_base
    {
    protected:

      enum { _S_need_barriers = 0 };
    };

  template<>
    class _Mutex_base<_S_mutex>
    : public __gnu_cxx::__mutex
    {
    protected:



      enum { _S_need_barriers = 1 };
    };

  template<_Lock_policy _Lp = __default_lock_policy>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }

      virtual
      ~_Sp_counted_base() noexcept
      { }



      virtual void
      _M_dispose() noexcept = 0;


      virtual void
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept = 0;

      void
      _M_add_ref_copy()
      { __gnu_cxx::__atomic_add_dispatch(&_M_use_count, 1); }

      void
      _M_add_ref_lock();

      bool
      _M_add_ref_lock_nothrow();

      void
      _M_release() noexcept
      {

        ;
 if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   {
            ;
     _M_dispose();




     if (_Mutex_base<_Lp>::_S_need_barriers)
       {
  __atomic_thread_fence (4);
       }


            ;
     if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
             -1) == 1)
              {
                ;
         _M_destroy();
              }
   }
      }

      void
      _M_weak_add_ref() noexcept
      { __gnu_cxx::__atomic_add_dispatch(&_M_weak_count, 1); }

      void
      _M_weak_release() noexcept
      {

        ;
 if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count, -1) == 1)
   {
            ;
     if (_Mutex_base<_Lp>::_S_need_barriers)
       {


  __atomic_thread_fence (4);
       }
     _M_destroy();
   }
      }

      long
      _M_get_use_count() const noexcept
      {


        return __atomic_load_n(&_M_use_count, 0);
      }

    private:
      _Sp_counted_base(_Sp_counted_base const&) = delete;
      _Sp_counted_base& operator=(_Sp_counted_base const&) = delete;

      _Atomic_word _M_use_count;
      _Atomic_word _M_weak_count;
    };

  template<>
    inline void
    _Sp_counted_base<_S_single>::
    _M_add_ref_lock()
    {
      if (_M_use_count == 0)
 __throw_bad_weak_ptr();
      ++_M_use_count;
    }

  template<>
    inline void
    _Sp_counted_base<_S_mutex>::
    _M_add_ref_lock()
    {
      __gnu_cxx::__scoped_lock sentry(*this);
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, 1) == 0)
 {
   _M_use_count = 0;
   __throw_bad_weak_ptr();
 }
    }

  template<>
    inline void
    _Sp_counted_base<_S_atomic>::
    _M_add_ref_lock()
    {

      _Atomic_word __count = _M_get_use_count();
      do
 {
   if (__count == 0)
     __throw_bad_weak_ptr();


 }
      while (!__atomic_compare_exchange_n(&_M_use_count, &__count, __count + 1,
       true, 4,
       0));
    }

  template<>
    inline bool
    _Sp_counted_base<_S_single>::
    _M_add_ref_lock_nothrow()
    {
      if (_M_use_count == 0)
 return false;
      ++_M_use_count;
      return true;
    }

  template<>
    inline bool
    _Sp_counted_base<_S_mutex>::
    _M_add_ref_lock_nothrow()
    {
      __gnu_cxx::__scoped_lock sentry(*this);
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, 1) == 0)
 {
   _M_use_count = 0;
   return false;
 }
      return true;
    }

  template<>
    inline bool
    _Sp_counted_base<_S_atomic>::
    _M_add_ref_lock_nothrow()
    {

      _Atomic_word __count = _M_get_use_count();
      do
 {
   if (__count == 0)
     return false;


 }
      while (!__atomic_compare_exchange_n(&_M_use_count, &__count, __count + 1,
       true, 4,
       0));
      return true;
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
        }
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_weak_add_ref() noexcept
    { ++_M_weak_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_weak_release() noexcept
    {
      if (--_M_weak_count == 0)
        _M_destroy();
    }

  template<>
    inline long
    _Sp_counted_base<_S_single>::_M_get_use_count() const noexcept
    { return _M_use_count; }



  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy>
    class __shared_ptr;

  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy>
    class __weak_ptr;

  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy>
    class __enable_shared_from_this;

  template<typename _Tp>
    class shared_ptr;

  template<typename _Tp>
    class weak_ptr;

  template<typename _Tp>
    struct owner_less;

  template<typename _Tp>
    class enable_shared_from_this;

  template<_Lock_policy _Lp = __default_lock_policy>
    class __weak_count;

  template<_Lock_policy _Lp = __default_lock_policy>
    class __shared_count;



  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }

      _Sp_counted_ptr(const _Sp_counted_ptr&) = delete;
      _Sp_counted_ptr& operator=(const _Sp_counted_ptr&) = delete;

    private:
      _Ptr _M_ptr;
    };

  template<>
    inline void
    _Sp_counted_ptr<nullptr_t, _S_single>::_M_dispose() noexcept { }

  template<>
    inline void
    _Sp_counted_ptr<nullptr_t, _S_mutex>::_M_dispose() noexcept { }

  template<>
    inline void
    _Sp_counted_ptr<nullptr_t, _S_atomic>::_M_dispose() noexcept { }

  template<int _Nm, typename _Tp,
    bool __use_ebo = !__is_final(_Tp) && __is_empty(_Tp)>
    struct _Sp_ebo_helper;


  template<int _Nm, typename _Tp>
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
    {
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }

      static _Tp&
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
    };


  template<int _Nm, typename _Tp>
    struct _Sp_ebo_helper<_Nm, _Tp, false>
    {
      explicit _Sp_ebo_helper(const _Tp& __tp) : _M_tp(__tp) { }
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }

      static _Tp&
      _S_get(_Sp_ebo_helper& __eboh)
      { return __eboh._M_tp; }

    private:
      _Tp _M_tp;
    };


  template<typename _Ptr, typename _Deleter, typename _Alloc, _Lock_policy _Lp>
    class _Sp_counted_deleter final : public _Sp_counted_base<_Lp>
    {
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
      {
 typedef _Sp_ebo_helper<0, _Deleter> _Del_base;
 typedef _Sp_ebo_helper<1, _Alloc> _Alloc_base;

      public:
 _Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 : _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 { }

 _Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 _Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }

 _Ptr _M_ptr;
      };

    public:
      using __allocator_type = __alloc_rebind<_Alloc, _Sp_counted_deleter>;


      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, std::move(__d), _Alloc()) { }


      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, std::move(__d), __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }

      virtual void
      _M_destroy() noexcept
      {
 __allocator_type __a(_M_impl._M_alloc());
 __allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 this->~_Sp_counted_deleter();
      }

      virtual void*
      _M_get_deleter(const std::type_info& __ti) noexcept
      {



        return __ti == typeid(_Deleter)
   ? std::__addressof(_M_impl._M_del())
   : nullptr;



      }

    private:
      _Impl _M_impl;
    };



  struct _Sp_make_shared_tag { };

  template<typename _Tp, typename _Alloc, _Lock_policy _Lp>
    class _Sp_counted_ptr_inplace final : public _Sp_counted_base<_Lp>
    {
      class _Impl : _Sp_ebo_helper<0, _Alloc>
      {
 typedef _Sp_ebo_helper<0, _Alloc> _A_base;

      public:
 explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }

 _Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }

 __gnu_cxx::__aligned_buffer<_Tp> _M_storage;
      };

    public:
      using __allocator_type = __alloc_rebind<_Alloc, _Sp_counted_ptr_inplace>;

      template<typename... _Args>
 _Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 : _M_impl(__a)
 {


   allocator_traits<_Alloc>::construct(__a, _M_ptr(),
       std::forward<_Args>(__args)...);
 }

      ~_Sp_counted_ptr_inplace() noexcept { }

      virtual void
      _M_dispose() noexcept
      {
 allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
      }


      virtual void
      _M_destroy() noexcept
      {
 __allocator_type __a(_M_impl._M_alloc());
 __allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 this->~_Sp_counted_ptr_inplace();
      }


      virtual void*
      _M_get_deleter(const std::type_info& __ti) noexcept
      {

 if (__ti == typeid(_Sp_make_shared_tag))
   return const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());

 return nullptr;
      }

    private:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }

      _Impl _M_impl;
    };


  struct __sp_array_delete
  {
    template<typename _Yp>
      void operator()(_Yp* __p) const { delete[] __p; }
  };

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
 __shared_count(_Ptr __p) : _M_pi(0)
 {
   try
     {
       _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
     }
   catch(...)
     {
       delete __p;
       throw;
     }
 }

      template<typename _Ptr>
 __shared_count(_Ptr __p, false_type)
 : __shared_count(__p)
 { }

      template<typename _Ptr>
 __shared_count(_Ptr __p, true_type)
 : __shared_count(__p, __sp_array_delete{}, allocator<void>())
 { }

      template<typename _Ptr, typename _Deleter>
 __shared_count(_Ptr __p, _Deleter __d)
 : __shared_count(__p, std::move(__d), allocator<void>())
 { }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
 __shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 {
   typedef _Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp> _Sp_cd_type;
   try
     {
       typename _Sp_cd_type::__allocator_type __a2(__a);
       auto __guard = std::__allocate_guarded(__a2);
       _Sp_cd_type* __mem = __guard.get();
       ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
       _M_pi = __mem;
       __guard = nullptr;
     }
   catch(...)
     {
       __d(__p);
       throw;
     }
 }

      template<typename _Tp, typename _Alloc, typename... _Args>
 __shared_count(_Sp_make_shared_tag, _Tp*, const _Alloc& __a,
         _Args&&... __args)
 : _M_pi(0)
 {
   typedef _Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp> _Sp_cp_type;
   typename _Sp_cp_type::__allocator_type __a2(__a);
   auto __guard = std::__allocate_guarded(__a2);
   _Sp_cp_type* __mem = __guard.get();
   ::new (__mem) _Sp_cp_type(std::move(__a),
        std::forward<_Args>(__args)...);
   _M_pi = __mem;
   __guard = nullptr;
 }



      template<typename _Tp>
        explicit
 __shared_count(std::auto_ptr<_Tp>&& __r);



      template<typename _Tp, typename _Del>
        explicit
 __shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 {


   if (__r.get() == nullptr)
     return;

   using _Ptr = typename unique_ptr<_Tp, _Del>::pointer;
   using _Del2 = typename conditional<is_reference<_Del>::value,
       reference_wrapper<typename remove_reference<_Del>::type>,
       _Del>::type;
   using _Sp_cd_type
     = _Sp_counted_deleter<_Ptr, _Del2, allocator<void>, _Lp>;
   using _Alloc = allocator<_Sp_cd_type>;
   using _Alloc_traits = allocator_traits<_Alloc>;
   _Alloc __a;
   _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
   _Alloc_traits::construct(__a, __mem, __r.release(),
       __r.get_deleter());
   _M_pi = __mem;
 }


      explicit __shared_count(const __weak_count<_Lp>& __r);


      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
 if (_M_pi != nullptr)
   _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
 if (_M_pi != 0)
   _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 if (__tmp != _M_pi)
   {
     if (__tmp != 0)
       __tmp->_M_add_ref_copy();
     if (_M_pi != 0)
       _M_pi->_M_release();
     _M_pi = __tmp;
   }
 return *this;
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 __r._M_pi = _M_pi;
 _M_pi = __tmp;
      }

      long
      _M_get_use_count() const noexcept
      { return _M_pi != 0 ? _M_pi->_M_get_use_count() : 0; }

      bool
      _M_unique() const noexcept
      { return this->_M_get_use_count() == 1; }

      void*
      _M_get_deleter(const std::type_info& __ti) const noexcept
      { return _M_pi ? _M_pi->_M_get_deleter(__ti) : nullptr; }

      bool
      _M_less(const __shared_count& __rhs) const noexcept
      { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }

      bool
      _M_less(const __weak_count<_Lp>& __rhs) const noexcept
      { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }


      friend inline bool
      operator==(const __shared_count& __a, const __shared_count& __b) noexcept
      { return __a._M_pi == __b._M_pi; }

    private:
      friend class __weak_count<_Lp>;

      _Sp_counted_base<_Lp>* _M_pi;
    };


  template<_Lock_policy _Lp>
    class __weak_count
    {
    public:
      constexpr __weak_count() noexcept : _M_pi(nullptr)
      { }

      __weak_count(const __shared_count<_Lp>& __r) noexcept
      : _M_pi(__r._M_pi)
      {
 if (_M_pi != nullptr)
   _M_pi->_M_weak_add_ref();
      }

      __weak_count(const __weak_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
 if (_M_pi != nullptr)
   _M_pi->_M_weak_add_ref();
      }

      __weak_count(__weak_count&& __r) noexcept
      : _M_pi(__r._M_pi)
      { __r._M_pi = nullptr; }

      ~__weak_count() noexcept
      {
 if (_M_pi != nullptr)
   _M_pi->_M_weak_release();
      }

      __weak_count&
      operator=(const __shared_count<_Lp>& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 if (__tmp != nullptr)
   __tmp->_M_weak_add_ref();
 if (_M_pi != nullptr)
   _M_pi->_M_weak_release();
 _M_pi = __tmp;
 return *this;
      }

      __weak_count&
      operator=(const __weak_count& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 if (__tmp != nullptr)
   __tmp->_M_weak_add_ref();
 if (_M_pi != nullptr)
   _M_pi->_M_weak_release();
 _M_pi = __tmp;
 return *this;
      }

      __weak_count&
      operator=(__weak_count&& __r) noexcept
      {
 if (_M_pi != nullptr)
   _M_pi->_M_weak_release();
 _M_pi = __r._M_pi;
        __r._M_pi = nullptr;
 return *this;
      }

      void
      _M_swap(__weak_count& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 __r._M_pi = _M_pi;
 _M_pi = __tmp;
      }

      long
      _M_get_use_count() const noexcept
      { return _M_pi != nullptr ? _M_pi->_M_get_use_count() : 0; }

      bool
      _M_less(const __weak_count& __rhs) const noexcept
      { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }

      bool
      _M_less(const __shared_count<_Lp>& __rhs) const noexcept
      { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }


      friend inline bool
      operator==(const __weak_count& __a, const __weak_count& __b) noexcept
      { return __a._M_pi == __b._M_pi; }

    private:
      friend class __shared_count<_Lp>;

      _Sp_counted_base<_Lp>* _M_pi;
    };


  template<_Lock_policy _Lp>
    inline
    __shared_count<_Lp>::__shared_count(const __weak_count<_Lp>& __r)
    : _M_pi(__r._M_pi)
    {
      if (_M_pi != nullptr)
 _M_pi->_M_add_ref_lock();
      else
 __throw_bad_weak_ptr();
    }


  template<_Lock_policy _Lp>
    inline
    __shared_count<_Lp>::
    __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t)
    : _M_pi(__r._M_pi)
    {
      if (_M_pi != nullptr)
 if (!_M_pi->_M_add_ref_lock_nothrow())
   _M_pi = nullptr;
    }







  template<typename _Yp_ptr, typename _Tp_ptr>
    struct __sp_compatible_with
    : false_type
    { };

  template<typename _Yp, typename _Tp>
    struct __sp_compatible_with<_Yp*, _Tp*>
    : is_convertible<_Yp*, _Tp*>::type
    { };

  template<typename _Up, size_t _Nm>
    struct __sp_compatible_with<_Up(*)[_Nm], _Up(*)[]>
    : true_type
    { };

  template<typename _Up, size_t _Nm>
    struct __sp_compatible_with<_Up(*)[_Nm], const _Up(*)[]>
    : true_type
    { };

  template<typename _Up, size_t _Nm>
    struct __sp_compatible_with<_Up(*)[_Nm], volatile _Up(*)[]>
    : true_type
    { };

  template<typename _Up, size_t _Nm>
    struct __sp_compatible_with<_Up(*)[_Nm], const volatile _Up(*)[]>
    : true_type
    { };


  template<typename _Up, size_t _Nm, typename _Yp, typename = void>
    struct __sp_is_constructible_arrN
    : false_type
    { };

  template<typename _Up, size_t _Nm, typename _Yp>
    struct __sp_is_constructible_arrN<_Up, _Nm, _Yp, __void_t<_Yp[_Nm]>>
    : is_convertible<_Yp(*)[_Nm], _Up(*)[_Nm]>::type
    { };


  template<typename _Up, typename _Yp, typename = void>
    struct __sp_is_constructible_arr
    : false_type
    { };

  template<typename _Up, typename _Yp>
    struct __sp_is_constructible_arr<_Up, _Yp, __void_t<_Yp[]>>
    : is_convertible<_Yp(*)[], _Up(*)[]>::type
    { };


  template<typename _Tp, typename _Yp>
    struct __sp_is_constructible;


  template<typename _Up, size_t _Nm, typename _Yp>
    struct __sp_is_constructible<_Up[_Nm], _Yp>
    : __sp_is_constructible_arrN<_Up, _Nm, _Yp>::type
    { };


  template<typename _Up, typename _Yp>
    struct __sp_is_constructible<_Up[], _Yp>
    : __sp_is_constructible_arr<_Up, _Yp>::type
    { };


  template<typename _Tp, typename _Yp>
    struct __sp_is_constructible
    : is_convertible<_Yp*, _Tp*>::type
    { };



  template<typename _Tp, _Lock_policy _Lp,
    bool = is_array<_Tp>::value, bool = is_void<_Tp>::value>
    class __shared_ptr_access
    {
    public:
      using element_type = _Tp;

      element_type&
      operator*() const noexcept
      {
 ;
 return *_M_get();
      }

      element_type*
      operator->() const noexcept
      {
 ;
 return _M_get();
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
    };


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr_access<_Tp, _Lp, false, true>
    {
    public:
      using element_type = _Tp;

      element_type*
      operator->() const noexcept
      {
 auto __ptr = static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get();
 ;
 return __ptr;
      }
    };


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr_access<_Tp, _Lp, true, false>
    {
    public:
      using element_type = typename remove_extent<_Tp>::type;


      [[__deprecated__("shared_ptr<T[]>::operator* is absent from C++17")]]
      element_type&
      operator*() const noexcept
      {
 ;
 return *_M_get();
      }

      [[__deprecated__("shared_ptr<T[]>::operator-> is absent from C++17")]]
      element_type*
      operator->() const noexcept
      {
 ;
 return _M_get();
      }


      element_type&
      operator[](ptrdiff_t __i) const
      {
 ;
 ;
 return _M_get()[__i];
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
    };

  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
    : public __shared_ptr_access<_Tp, _Lp>
    {
    public:
      using element_type = typename remove_extent<_Tp>::type;

    private:

      template<typename _Yp>
 using _SafeConv
   = typename enable_if<__sp_is_constructible<_Tp, _Yp>::value>::type;


      template<typename _Yp, typename _Res = void>
 using _Compatible = typename
   enable_if<__sp_compatible_with<_Yp*, _Tp*>::value, _Res>::type;


      template<typename _Yp>
 using _Assignable = _Compatible<_Yp, __shared_ptr&>;


      template<typename _Yp, typename _Del, typename _Res = void,
        typename _Ptr = typename unique_ptr<_Yp, _Del>::pointer>
 using _UniqCompatible = typename enable_if<__and_<
   __sp_compatible_with<_Yp*, _Tp*>, is_convertible<_Ptr, element_type*>
   >::value, _Res>::type;


      template<typename _Yp, typename _Del>
 using _UniqAssignable = _UniqCompatible<_Yp, _Del, __shared_ptr&>;

    public:





      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Yp, typename = _SafeConv<_Yp>>
 explicit
 __shared_ptr(_Yp* __p)
 : _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 {
   static_assert( !is_void<_Yp>::value, "incomplete type" );
   static_assert( sizeof(_Yp) > 0, "incomplete type" );
   _M_enable_shared_from_this_with(__p);
 }

      template<typename _Yp, typename _Deleter, typename = _SafeConv<_Yp>>
 __shared_ptr(_Yp* __p, _Deleter __d)
 : _M_ptr(__p), _M_refcount(__p, std::move(__d))
 {
   static_assert(__is_invocable<_Deleter&, _Yp*&>::value,
       "deleter expression d(p) is well-formed");
   _M_enable_shared_from_this_with(__p);
 }

      template<typename _Yp, typename _Deleter, typename _Alloc,
        typename = _SafeConv<_Yp>>
 __shared_ptr(_Yp* __p, _Deleter __d, _Alloc __a)
 : _M_ptr(__p), _M_refcount(__p, std::move(__d), std::move(__a))
 {
   static_assert(__is_invocable<_Deleter&, _Yp*&>::value,
       "deleter expression d(p) is well-formed");
   _M_enable_shared_from_this_with(__p);
 }

      template<typename _Deleter>
 __shared_ptr(nullptr_t __p, _Deleter __d)
 : _M_ptr(0), _M_refcount(__p, std::move(__d))
 { }

      template<typename _Deleter, typename _Alloc>
        __shared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)
 : _M_ptr(0), _M_refcount(__p, std::move(__d), std::move(__a))
 { }

      template<typename _Yp>
 __shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
       element_type* __p) noexcept
 : _M_ptr(__p), _M_refcount(__r._M_refcount)
 { }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;

      template<typename _Yp, typename = _Compatible<_Yp>>
 __shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 : _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 { }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
 _M_refcount._M_swap(__r._M_refcount);
 __r._M_ptr = 0;
      }

      template<typename _Yp, typename = _Compatible<_Yp>>
 __shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 : _M_ptr(__r._M_ptr), _M_refcount()
 {
   _M_refcount._M_swap(__r._M_refcount);
   __r._M_ptr = 0;
 }

      template<typename _Yp, typename = _Compatible<_Yp>>
 explicit __shared_ptr(const __weak_ptr<_Yp, _Lp>& __r)
 : _M_refcount(__r._M_refcount)
 {


   _M_ptr = __r._M_ptr;
 }


      template<typename _Yp, typename _Del,
        typename = _UniqCompatible<_Yp, _Del>>
 __shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 : _M_ptr(__r.get()), _M_refcount()
 {
   auto __raw = _S_raw_ptr(__r.get());
   _M_refcount = __shared_count<_Lp>(std::move(__r));
   _M_enable_shared_from_this_with(__raw);
 }


    protected:

      template<typename _Tp1, typename _Del,
        typename enable_if<__and_<
   __not_<is_array<_Tp>>, is_array<_Tp1>,
          is_convertible<typename unique_ptr<_Tp1, _Del>::pointer, _Tp*>
        >::value, bool>::type = true>
 __shared_ptr(unique_ptr<_Tp1, _Del>&& __r, __sp_array_delete)
 : _M_ptr(__r.get()), _M_refcount()
 {
   auto __raw = _S_raw_ptr(__r.get());
   _M_refcount = __shared_count<_Lp>(std::move(__r));
   _M_enable_shared_from_this_with(__raw);
 }
    public:




      template<typename _Yp, typename = _Compatible<_Yp>>
 __shared_ptr(auto_ptr<_Yp>&& __r);


      constexpr __shared_ptr(nullptr_t) noexcept : __shared_ptr() { }

      template<typename _Yp>
 _Assignable<_Yp>
 operator=(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 {
   _M_ptr = __r._M_ptr;
   _M_refcount = __r._M_refcount;
   return *this;
 }


      template<typename _Yp>
 _Assignable<_Yp>
 operator=(auto_ptr<_Yp>&& __r)
 {
   __shared_ptr(std::move(__r)).swap(*this);
   return *this;
 }


      __shared_ptr&
      operator=(__shared_ptr&& __r) noexcept
      {
 __shared_ptr(std::move(__r)).swap(*this);
 return *this;
      }

      template<class _Yp>
 _Assignable<_Yp>
 operator=(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 {
   __shared_ptr(std::move(__r)).swap(*this);
   return *this;
 }

      template<typename _Yp, typename _Del>
 _UniqAssignable<_Yp, _Del>
 operator=(unique_ptr<_Yp, _Del>&& __r)
 {
   __shared_ptr(std::move(__r)).swap(*this);
   return *this;
 }

      void
      reset() noexcept
      { __shared_ptr().swap(*this); }

      template<typename _Yp>
 _SafeConv<_Yp>
 reset(_Yp* __p)
 {

   ;
   __shared_ptr(__p).swap(*this);
 }

      template<typename _Yp, typename _Deleter>
 _SafeConv<_Yp>
 reset(_Yp* __p, _Deleter __d)
 { __shared_ptr(__p, std::move(__d)).swap(*this); }

      template<typename _Yp, typename _Deleter, typename _Alloc>
 _SafeConv<_Yp>
 reset(_Yp* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      element_type*
      get() const noexcept
      { return _M_ptr; }

      explicit operator bool() const
      { return _M_ptr == 0 ? false : true; }

      bool
      unique() const noexcept
      { return _M_refcount._M_unique(); }

      long
      use_count() const noexcept
      { return _M_refcount._M_get_use_count(); }

      void
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
      {
 std::swap(_M_ptr, __other._M_ptr);
 _M_refcount._M_swap(__other._M_refcount);
      }

      template<typename _Tp1>
 bool
 owner_before(__shared_ptr<_Tp1, _Lp> const& __rhs) const noexcept
 { return _M_refcount._M_less(__rhs._M_refcount); }

      template<typename _Tp1>
 bool
 owner_before(__weak_ptr<_Tp1, _Lp> const& __rhs) const noexcept
 { return _M_refcount._M_less(__rhs._M_refcount); }


    protected:

      template<typename _Alloc, typename... _Args>
 __shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
       _Args&&... __args)
 : _M_ptr(), _M_refcount(__tag, (_Tp*)0, __a,
    std::forward<_Args>(__args)...)
 {


   void* __p = _M_refcount._M_get_deleter(typeid(__tag));
   _M_ptr = static_cast<_Tp*>(__p);
   _M_enable_shared_from_this_with(_M_ptr);
 }
# 1337 "/usr/include/c++/7/bits/shared_ptr_base.h" 3
      template<typename _Tp1, _Lock_policy _Lp1, typename _Alloc,
        typename... _Args>
 friend __shared_ptr<_Tp1, _Lp1>
 __allocate_shared(const _Alloc& __a, _Args&&... __args);



      __shared_ptr(const __weak_ptr<_Tp, _Lp>& __r, std::nothrow_t)
      : _M_refcount(__r._M_refcount, std::nothrow)
      {
 _M_ptr = _M_refcount._M_get_use_count() ? __r._M_ptr : nullptr;
      }

      friend class __weak_ptr<_Tp, _Lp>;

    private:

      template<typename _Yp>
 using __esft_base_t = decltype(__enable_shared_from_this_base(
       std::declval<const __shared_count<_Lp>&>(),
       std::declval<_Yp*>()));


      template<typename _Yp, typename = void>
 struct __has_esft_base
 : false_type { };

      template<typename _Yp>
 struct __has_esft_base<_Yp, __void_t<__esft_base_t<_Yp>>>
 : __not_<is_array<_Tp>> { };

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
 typename enable_if<__has_esft_base<_Yp2>::value>::type
 _M_enable_shared_from_this_with(_Yp* __p) noexcept
 {
   if (auto __base = __enable_shared_from_this_base(_M_refcount, __p))
     __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
 }

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
 typename enable_if<!__has_esft_base<_Yp2>::value>::type
 _M_enable_shared_from_this_with(_Yp*) noexcept
 { }

      void*
      _M_get_deleter(const std::type_info& __ti) const noexcept
      { return _M_refcount._M_get_deleter(__ti); }

      template<typename _Tp1>
 static _Tp1*
 _S_raw_ptr(_Tp1* __ptr)
 { return __ptr; }

      template<typename _Tp1>
 static auto
 _S_raw_ptr(_Tp1 __ptr) -> decltype(std::__addressof(*__ptr))
 { return std::__addressof(*__ptr); }

      template<typename _Tp1, _Lock_policy _Lp1> friend class __shared_ptr;
      template<typename _Tp1, _Lock_policy _Lp1> friend class __weak_ptr;

      template<typename _Del, typename _Tp1, _Lock_policy _Lp1>
 friend _Del* get_deleter(const __shared_ptr<_Tp1, _Lp1>&) noexcept;

      element_type* _M_ptr;
      __shared_count<_Lp> _M_refcount;
    };



  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator==(const __shared_ptr<_Tp1, _Lp>& __a,
        const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return __a.get() == __b.get(); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator==(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return !__a; }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator==(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return !__a; }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator!=(const __shared_ptr<_Tp1, _Lp>& __a,
        const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return __a.get() != __b.get(); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator!=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return (bool)__a; }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator!=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return (bool)__a; }

  template<typename _Tp, typename _Up, _Lock_policy _Lp>
    inline bool
    operator<(const __shared_ptr<_Tp, _Lp>& __a,
       const __shared_ptr<_Up, _Lp>& __b) noexcept
    {
      using _Tp_elt = typename __shared_ptr<_Tp, _Lp>::element_type;
      using _Up_elt = typename __shared_ptr<_Up, _Lp>::element_type;
      using _Vp = typename common_type<_Tp_elt*, _Up_elt*>::type;
      return less<_Vp>()(__a.get(), __b.get());
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator<(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    {
      using _Tp_elt = typename __shared_ptr<_Tp, _Lp>::element_type;
      return less<_Tp_elt*>()(__a.get(), nullptr);
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator<(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    {
      using _Tp_elt = typename __shared_ptr<_Tp, _Lp>::element_type;
      return less<_Tp_elt*>()(nullptr, __a.get());
    }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator<=(const __shared_ptr<_Tp1, _Lp>& __a,
        const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return !(__b < __a); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator<=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return !(nullptr < __a); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator<=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return !(__a < nullptr); }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator>(const __shared_ptr<_Tp1, _Lp>& __a,
       const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return (__b < __a); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator>(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return nullptr < __a; }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator>(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return __a < nullptr; }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator>=(const __shared_ptr<_Tp1, _Lp>& __a,
        const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return !(__a < __b); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator>=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return !(__a < nullptr); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator>=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return !(nullptr < __a); }

  template<typename _Sp>
    struct _Sp_less : public binary_function<_Sp, _Sp, bool>
    {
      bool
      operator()(const _Sp& __lhs, const _Sp& __rhs) const noexcept
      {
 typedef typename _Sp::element_type element_type;
 return std::less<element_type*>()(__lhs.get(), __rhs.get());
      }
    };

  template<typename _Tp, _Lock_policy _Lp>
    struct less<__shared_ptr<_Tp, _Lp>>
    : public _Sp_less<__shared_ptr<_Tp, _Lp>>
    { };


  template<typename _Tp, _Lock_policy _Lp>
    inline void
    swap(__shared_ptr<_Tp, _Lp>& __a, __shared_ptr<_Tp, _Lp>& __b) noexcept
    { __a.swap(__b); }
# 1543 "/usr/include/c++/7/bits/shared_ptr_base.h" 3
  template<typename _Tp, typename _Tp1, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    static_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
    {
      using _Sp = __shared_ptr<_Tp, _Lp>;
      return _Sp(__r, static_cast<typename _Sp::element_type*>(__r.get()));
    }






  template<typename _Tp, typename _Tp1, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    const_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
    {
      using _Sp = __shared_ptr<_Tp, _Lp>;
      return _Sp(__r, const_cast<typename _Sp::element_type*>(__r.get()));
    }






  template<typename _Tp, typename _Tp1, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    dynamic_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
    {
      using _Sp = __shared_ptr<_Tp, _Lp>;
      if (auto* __p = dynamic_cast<typename _Sp::element_type*>(__r.get()))
 return _Sp(__r, __p);
      return _Sp();
    }
# 1589 "/usr/include/c++/7/bits/shared_ptr_base.h" 3
  template<typename _Tp, _Lock_policy _Lp>
    class __weak_ptr
    {
      template<typename _Yp, typename _Res = void>
 using _Compatible = typename
   enable_if<__sp_compatible_with<_Yp*, _Tp*>::value, _Res>::type;


      template<typename _Yp>
 using _Assignable = _Compatible<_Yp, __weak_ptr&>;

    public:
      using element_type = typename remove_extent<_Tp>::type;

      constexpr __weak_ptr() noexcept
      : _M_ptr(nullptr), _M_refcount()
      { }

      __weak_ptr(const __weak_ptr&) noexcept = default;

      ~__weak_ptr() = default;
# 1625 "/usr/include/c++/7/bits/shared_ptr_base.h" 3
      template<typename _Yp, typename = _Compatible<_Yp>>
 __weak_ptr(const __weak_ptr<_Yp, _Lp>& __r) noexcept
 : _M_refcount(__r._M_refcount)
        { _M_ptr = __r.lock().get(); }

      template<typename _Yp, typename = _Compatible<_Yp>>
 __weak_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 : _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 { }

      __weak_ptr(__weak_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount(std::move(__r._M_refcount))
      { __r._M_ptr = nullptr; }

      template<typename _Yp, typename = _Compatible<_Yp>>
 __weak_ptr(__weak_ptr<_Yp, _Lp>&& __r) noexcept
 : _M_ptr(__r.lock().get()), _M_refcount(std::move(__r._M_refcount))
        { __r._M_ptr = nullptr; }

      __weak_ptr&
      operator=(const __weak_ptr& __r) noexcept = default;

      template<typename _Yp>
 _Assignable<_Yp>
 operator=(const __weak_ptr<_Yp, _Lp>& __r) noexcept
 {
   _M_ptr = __r.lock().get();
   _M_refcount = __r._M_refcount;
   return *this;
 }

      template<typename _Yp>
 _Assignable<_Yp>
 operator=(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 {
   _M_ptr = __r._M_ptr;
   _M_refcount = __r._M_refcount;
   return *this;
 }

      __weak_ptr&
      operator=(__weak_ptr&& __r) noexcept
      {
 _M_ptr = __r._M_ptr;
 _M_refcount = std::move(__r._M_refcount);
 __r._M_ptr = nullptr;
 return *this;
      }

      template<typename _Yp>
 _Assignable<_Yp>
 operator=(__weak_ptr<_Yp, _Lp>&& __r) noexcept
 {
   _M_ptr = __r.lock().get();
   _M_refcount = std::move(__r._M_refcount);
   __r._M_ptr = nullptr;
   return *this;
 }

      __shared_ptr<_Tp, _Lp>
      lock() const noexcept
      { return __shared_ptr<element_type, _Lp>(*this, std::nothrow); }

      long
      use_count() const noexcept
      { return _M_refcount._M_get_use_count(); }

      bool
      expired() const noexcept
      { return _M_refcount._M_get_use_count() == 0; }

      template<typename _Tp1>
 bool
 owner_before(const __shared_ptr<_Tp1, _Lp>& __rhs) const noexcept
 { return _M_refcount._M_less(__rhs._M_refcount); }

      template<typename _Tp1>
 bool
 owner_before(const __weak_ptr<_Tp1, _Lp>& __rhs) const noexcept
 { return _M_refcount._M_less(__rhs._M_refcount); }

      void
      reset() noexcept
      { __weak_ptr().swap(*this); }

      void
      swap(__weak_ptr& __s) noexcept
      {
 std::swap(_M_ptr, __s._M_ptr);
 _M_refcount._M_swap(__s._M_refcount);
      }

    private:

      void
      _M_assign(_Tp* __ptr, const __shared_count<_Lp>& __refcount) noexcept
      {
 if (use_count() == 0)
   {
     _M_ptr = __ptr;
     _M_refcount = __refcount;
   }
      }

      template<typename _Tp1, _Lock_policy _Lp1> friend class __shared_ptr;
      template<typename _Tp1, _Lock_policy _Lp1> friend class __weak_ptr;
      friend class __enable_shared_from_this<_Tp, _Lp>;
      friend class enable_shared_from_this<_Tp>;

      element_type* _M_ptr;
      __weak_count<_Lp> _M_refcount;
    };


  template<typename _Tp, _Lock_policy _Lp>
    inline void
    swap(__weak_ptr<_Tp, _Lp>& __a, __weak_ptr<_Tp, _Lp>& __b) noexcept
    { __a.swap(__b); }

  template<typename _Tp, typename _Tp1>
    struct _Sp_owner_less : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __lhs, const _Tp& __rhs) const noexcept
      { return __lhs.owner_before(__rhs); }

      bool
      operator()(const _Tp& __lhs, const _Tp1& __rhs) const noexcept
      { return __lhs.owner_before(__rhs); }

      bool
      operator()(const _Tp1& __lhs, const _Tp& __rhs) const noexcept
      { return __lhs.owner_before(__rhs); }
    };

  template<>
    struct _Sp_owner_less<void, void>
    {
      template<typename _Tp, typename _Up>
 auto
 operator()(const _Tp& __lhs, const _Up& __rhs) const noexcept
 -> decltype(__lhs.owner_before(__rhs))
 { return __lhs.owner_before(__rhs); }

      using is_transparent = void;
    };

  template<typename _Tp, _Lock_policy _Lp>
    struct owner_less<__shared_ptr<_Tp, _Lp>>
    : public _Sp_owner_less<__shared_ptr<_Tp, _Lp>, __weak_ptr<_Tp, _Lp>>
    { };

  template<typename _Tp, _Lock_policy _Lp>
    struct owner_less<__weak_ptr<_Tp, _Lp>>
    : public _Sp_owner_less<__weak_ptr<_Tp, _Lp>, __shared_ptr<_Tp, _Lp>>
    { };


  template<typename _Tp, _Lock_policy _Lp>
    class __enable_shared_from_this
    {
    protected:
      constexpr __enable_shared_from_this() noexcept { }

      __enable_shared_from_this(const __enable_shared_from_this&) noexcept { }

      __enable_shared_from_this&
      operator=(const __enable_shared_from_this&) noexcept
      { return *this; }

      ~__enable_shared_from_this() { }

    public:
      __shared_ptr<_Tp, _Lp>
      shared_from_this()
      { return __shared_ptr<_Tp, _Lp>(this->_M_weak_this); }

      __shared_ptr<const _Tp, _Lp>
      shared_from_this() const
      { return __shared_ptr<const _Tp, _Lp>(this->_M_weak_this); }


      __weak_ptr<_Tp, _Lp>
      weak_from_this() noexcept
      { return this->_M_weak_this; }

      __weak_ptr<const _Tp, _Lp>
      weak_from_this() const noexcept
      { return this->_M_weak_this; }


    private:
      template<typename _Tp1>
 void
 _M_weak_assign(_Tp1* __p, const __shared_count<_Lp>& __n) const noexcept
 { _M_weak_this._M_assign(__p, __n); }

      friend const __enable_shared_from_this*
      __enable_shared_from_this_base(const __shared_count<_Lp>&,
         const __enable_shared_from_this* __p)
      { return __p; }

      template<typename, _Lock_policy>
 friend class __shared_ptr;

      mutable __weak_ptr<_Tp, _Lp> _M_weak_this;
    };

  template<typename _Tp, _Lock_policy _Lp, typename _Alloc, typename... _Args>
    inline __shared_ptr<_Tp, _Lp>
    __allocate_shared(const _Alloc& __a, _Args&&... __args)
    {
      return __shared_ptr<_Tp, _Lp>(_Sp_make_shared_tag(), __a,
        std::forward<_Args>(__args)...);
    }

  template<typename _Tp, _Lock_policy _Lp, typename... _Args>
    inline __shared_ptr<_Tp, _Lp>
    __make_shared(_Args&&... __args)
    {
      typedef typename std::remove_const<_Tp>::type _Tp_nc;
      return std::__allocate_shared<_Tp, _Lp>(std::allocator<_Tp_nc>(),
           std::forward<_Args>(__args)...);
    }


  template<typename _Tp, _Lock_policy _Lp>
    struct hash<__shared_ptr<_Tp, _Lp>>
    : public __hash_base<size_t, __shared_ptr<_Tp, _Lp>>
    {
      size_t
      operator()(const __shared_ptr<_Tp, _Lp>& __s) const noexcept
      {
 return hash<typename __shared_ptr<_Tp, _Lp>::element_type*>()(
     __s.get());
      }
    };


}
# 53 "/usr/include/c++/7/bits/shared_ptr.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{








  template<typename _Ch, typename _Tr, typename _Tp, _Lock_policy _Lp>
    inline std::basic_ostream<_Ch, _Tr>&
    operator<<(std::basic_ostream<_Ch, _Tr>& __os,
        const __shared_ptr<_Tp, _Lp>& __p)
    {
      __os << __p.get();
      return __os;
    }


  template<typename _Del, typename _Tp, _Lock_policy _Lp>
    inline _Del*
    get_deleter(const __shared_ptr<_Tp, _Lp>& __p) noexcept
    {

      return static_cast<_Del*>(__p._M_get_deleter(typeid(_Del)));



    }
# 92 "/usr/include/c++/7/bits/shared_ptr.h" 3
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
    {
      template<typename... _Args>
 using _Constructible = typename enable_if<
   is_constructible<__shared_ptr<_Tp>, _Args...>::value
 >::type;

      template<typename _Arg>
 using _Assignable = typename enable_if<
   is_assignable<__shared_ptr<_Tp>&, _Arg>::value, shared_ptr&
 >::type;

    public:

      using element_type = typename __shared_ptr<_Tp>::element_type;
# 117 "/usr/include/c++/7/bits/shared_ptr.h" 3
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;







      template<typename _Yp, typename = _Constructible<_Yp*>>
 explicit
 shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p) { }
# 144 "/usr/include/c++/7/bits/shared_ptr.h" 3
      template<typename _Yp, typename _Deleter,
        typename = _Constructible<_Yp*, _Deleter>>
 shared_ptr(_Yp* __p, _Deleter __d)
        : __shared_ptr<_Tp>(__p, std::move(__d)) { }
# 162 "/usr/include/c++/7/bits/shared_ptr.h" 3
      template<typename _Deleter>
 shared_ptr(nullptr_t __p, _Deleter __d)
        : __shared_ptr<_Tp>(__p, std::move(__d)) { }
# 181 "/usr/include/c++/7/bits/shared_ptr.h" 3
      template<typename _Yp, typename _Deleter, typename _Alloc,
        typename = _Constructible<_Yp*, _Deleter, _Alloc>>
 shared_ptr(_Yp* __p, _Deleter __d, _Alloc __a)
 : __shared_ptr<_Tp>(__p, std::move(__d), std::move(__a)) { }
# 201 "/usr/include/c++/7/bits/shared_ptr.h" 3
      template<typename _Deleter, typename _Alloc>
 shared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)
 : __shared_ptr<_Tp>(__p, std::move(__d), std::move(__a)) { }
# 223 "/usr/include/c++/7/bits/shared_ptr.h" 3
      template<typename _Yp>
 shared_ptr(const shared_ptr<_Yp>& __r, element_type* __p) noexcept
 : __shared_ptr<_Tp>(__r, __p) { }
# 234 "/usr/include/c++/7/bits/shared_ptr.h" 3
      template<typename _Yp,
        typename = _Constructible<const shared_ptr<_Yp>&>>
 shared_ptr(const shared_ptr<_Yp>& __r) noexcept
        : __shared_ptr<_Tp>(__r) { }






      shared_ptr(shared_ptr&& __r) noexcept
      : __shared_ptr<_Tp>(std::move(__r)) { }






      template<typename _Yp, typename = _Constructible<shared_ptr<_Yp>>>
 shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 : __shared_ptr<_Tp>(std::move(__r)) { }
# 264 "/usr/include/c++/7/bits/shared_ptr.h" 3
      template<typename _Yp, typename = _Constructible<const weak_ptr<_Yp>&>>
 explicit shared_ptr(const weak_ptr<_Yp>& __r)
 : __shared_ptr<_Tp>(__r) { }


      template<typename _Yp, typename = _Constructible<auto_ptr<_Yp>>>
 shared_ptr(auto_ptr<_Yp>&& __r);




      template<typename _Yp, typename _Del,
        typename = _Constructible<unique_ptr<_Yp, _Del>>>
 shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 : __shared_ptr<_Tp>(std::move(__r)) { }





      template<typename _Yp, typename _Del,
  _Constructible<unique_ptr<_Yp, _Del>, __sp_array_delete>* = 0>
 shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 : __shared_ptr<_Tp>(std::move(__r), __sp_array_delete()) { }






      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;

      template<typename _Yp>
 _Assignable<const shared_ptr<_Yp>&>
 operator=(const shared_ptr<_Yp>& __r) noexcept
 {
   this->__shared_ptr<_Tp>::operator=(__r);
   return *this;
 }


      template<typename _Yp>
 _Assignable<auto_ptr<_Yp>>
 operator=(auto_ptr<_Yp>&& __r)
 {
   this->__shared_ptr<_Tp>::operator=(std::move(__r));
   return *this;
 }


      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
 this->__shared_ptr<_Tp>::operator=(std::move(__r));
 return *this;
      }

      template<class _Yp>
 _Assignable<shared_ptr<_Yp>>
 operator=(shared_ptr<_Yp>&& __r) noexcept
 {
   this->__shared_ptr<_Tp>::operator=(std::move(__r));
   return *this;
 }

      template<typename _Yp, typename _Del>
 _Assignable<unique_ptr<_Yp, _Del>>
 operator=(unique_ptr<_Yp, _Del>&& __r)
 {
   this->__shared_ptr<_Tp>::operator=(std::move(__r));
   return *this;
 }

    private:

      template<typename _Alloc, typename... _Args>
 shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
     _Args&&... __args)
 : __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 { }

      template<typename _Yp, typename _Alloc, typename... _Args>
 friend shared_ptr<_Yp>
 allocate_shared(const _Alloc& __a, _Args&&... __args);


      shared_ptr(const weak_ptr<_Tp>& __r, std::nothrow_t)
      : __shared_ptr<_Tp>(__r, std::nothrow) { }

      friend class weak_ptr<_Tp>;
    };
# 366 "/usr/include/c++/7/bits/shared_ptr.h" 3
  template<typename _Tp, typename _Up>
    inline bool
    operator==(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    { return __a.get() == __b.get(); }

  template<typename _Tp>
    inline bool
    operator==(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return !__a; }

  template<typename _Tp>
    inline bool
    operator==(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return !__a; }

  template<typename _Tp, typename _Up>
    inline bool
    operator!=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    { return __a.get() != __b.get(); }

  template<typename _Tp>
    inline bool
    operator!=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return (bool)__a; }

  template<typename _Tp>
    inline bool
    operator!=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return (bool)__a; }

  template<typename _Tp, typename _Up>
    inline bool
    operator<(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    {
      using _Tp_elt = typename shared_ptr<_Tp>::element_type;
      using _Up_elt = typename shared_ptr<_Up>::element_type;
      using _Vp = typename common_type<_Tp_elt*, _Up_elt*>::type;
      return less<_Vp>()(__a.get(), __b.get());
    }

  template<typename _Tp>
    inline bool
    operator<(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    {
      using _Tp_elt = typename shared_ptr<_Tp>::element_type;
      return less<_Tp_elt*>()(__a.get(), nullptr);
    }

  template<typename _Tp>
    inline bool
    operator<(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    {
      using _Tp_elt = typename shared_ptr<_Tp>::element_type;
      return less<_Tp_elt*>()(nullptr, __a.get());
    }

  template<typename _Tp, typename _Up>
    inline bool
    operator<=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    { return !(__b < __a); }

  template<typename _Tp>
    inline bool
    operator<=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return !(nullptr < __a); }

  template<typename _Tp>
    inline bool
    operator<=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return !(__a < nullptr); }

  template<typename _Tp, typename _Up>
    inline bool
    operator>(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    { return (__b < __a); }

  template<typename _Tp>
    inline bool
    operator>(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return nullptr < __a; }

  template<typename _Tp>
    inline bool
    operator>(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return __a < nullptr; }

  template<typename _Tp, typename _Up>
    inline bool
    operator>=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    { return !(__a < __b); }

  template<typename _Tp>
    inline bool
    operator>=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return !(__a < nullptr); }

  template<typename _Tp>
    inline bool
    operator>=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return !(nullptr < __a); }

  template<typename _Tp>
    struct less<shared_ptr<_Tp>> : public _Sp_less<shared_ptr<_Tp>>
    { };


  template<typename _Tp>
    inline void
    swap(shared_ptr<_Tp>& __a, shared_ptr<_Tp>& __b) noexcept
    { __a.swap(__b); }


  template<typename _Tp, typename _Up>
    inline shared_ptr<_Tp>
    static_pointer_cast(const shared_ptr<_Up>& __r) noexcept
    {
      using _Sp = shared_ptr<_Tp>;
      return _Sp(__r, static_cast<typename _Sp::element_type*>(__r.get()));
    }

  template<typename _Tp, typename _Up>
    inline shared_ptr<_Tp>
    const_pointer_cast(const shared_ptr<_Up>& __r) noexcept
    {
      using _Sp = shared_ptr<_Tp>;
      return _Sp(__r, const_cast<typename _Sp::element_type*>(__r.get()));
    }

  template<typename _Tp, typename _Up>
    inline shared_ptr<_Tp>
    dynamic_pointer_cast(const shared_ptr<_Up>& __r) noexcept
    {
      using _Sp = shared_ptr<_Tp>;
      if (auto* __p = dynamic_cast<typename _Sp::element_type*>(__r.get()))
 return _Sp(__r, __p);
      return _Sp();
    }
# 519 "/usr/include/c++/7/bits/shared_ptr.h" 3
  template<typename _Tp>
    class weak_ptr : public __weak_ptr<_Tp>
    {
      template<typename _Arg>
 using _Constructible = typename enable_if<
   is_constructible<__weak_ptr<_Tp>, _Arg>::value
 >::type;

      template<typename _Arg>
 using _Assignable = typename enable_if<
   is_assignable<__weak_ptr<_Tp>&, _Arg>::value, weak_ptr&
 >::type;

    public:
      constexpr weak_ptr() noexcept = default;

      template<typename _Yp,
        typename = _Constructible<const shared_ptr<_Yp>&>>
 weak_ptr(const shared_ptr<_Yp>& __r) noexcept
 : __weak_ptr<_Tp>(__r) { }

      weak_ptr(const weak_ptr&) noexcept = default;

      template<typename _Yp, typename = _Constructible<const weak_ptr<_Yp>&>>
 weak_ptr(const weak_ptr<_Yp>& __r) noexcept
 : __weak_ptr<_Tp>(__r) { }

      weak_ptr(weak_ptr&&) noexcept = default;

      template<typename _Yp, typename = _Constructible<weak_ptr<_Yp>>>
 weak_ptr(weak_ptr<_Yp>&& __r) noexcept
 : __weak_ptr<_Tp>(std::move(__r)) { }

      weak_ptr&
      operator=(const weak_ptr& __r) noexcept = default;

      template<typename _Yp>
 _Assignable<const weak_ptr<_Yp>&>
 operator=(const weak_ptr<_Yp>& __r) noexcept
 {
   this->__weak_ptr<_Tp>::operator=(__r);
   return *this;
 }

      template<typename _Yp>
 _Assignable<const shared_ptr<_Yp>&>
 operator=(const shared_ptr<_Yp>& __r) noexcept
 {
   this->__weak_ptr<_Tp>::operator=(__r);
   return *this;
 }

      weak_ptr&
      operator=(weak_ptr&& __r) noexcept = default;

      template<typename _Yp>
 _Assignable<weak_ptr<_Yp>>
 operator=(weak_ptr<_Yp>&& __r) noexcept
 {
   this->__weak_ptr<_Tp>::operator=(std::move(__r));
   return *this;
 }

      shared_ptr<_Tp>
      lock() const noexcept
      { return shared_ptr<_Tp>(*this, std::nothrow); }
    };







  template<typename _Tp>
    inline void
    swap(weak_ptr<_Tp>& __a, weak_ptr<_Tp>& __b) noexcept
    { __a.swap(__b); }



  template<typename _Tp = void>
    struct owner_less;


  template<>
    struct owner_less<void> : _Sp_owner_less<void, void>
    { };


  template<typename _Tp>
    struct owner_less<shared_ptr<_Tp>>
    : public _Sp_owner_less<shared_ptr<_Tp>, weak_ptr<_Tp>>
    { };


  template<typename _Tp>
    struct owner_less<weak_ptr<_Tp>>
    : public _Sp_owner_less<weak_ptr<_Tp>, shared_ptr<_Tp>>
    { };




  template<typename _Tp>
    class enable_shared_from_this
    {
    protected:
      constexpr enable_shared_from_this() noexcept { }

      enable_shared_from_this(const enable_shared_from_this&) noexcept { }

      enable_shared_from_this&
      operator=(const enable_shared_from_this&) noexcept
      { return *this; }

      ~enable_shared_from_this() { }

    public:
      shared_ptr<_Tp>
      shared_from_this()
      { return shared_ptr<_Tp>(this->_M_weak_this); }

      shared_ptr<const _Tp>
      shared_from_this() const
      { return shared_ptr<const _Tp>(this->_M_weak_this); }



      weak_ptr<_Tp>
      weak_from_this() noexcept
      { return this->_M_weak_this; }

      weak_ptr<const _Tp>
      weak_from_this() const noexcept
      { return this->_M_weak_this; }


    private:
      template<typename _Tp1>
 void
 _M_weak_assign(_Tp1* __p, const __shared_count<>& __n) const noexcept
 { _M_weak_this._M_assign(__p, __n); }


      friend const enable_shared_from_this*
      __enable_shared_from_this_base(const __shared_count<>&,
         const enable_shared_from_this* __p)
      { return __p; }

      template<typename, _Lock_policy>
 friend class __shared_ptr;

      mutable weak_ptr<_Tp> _M_weak_this;
    };
# 686 "/usr/include/c++/7/bits/shared_ptr.h" 3
  template<typename _Tp, typename _Alloc, typename... _Args>
    inline shared_ptr<_Tp>
    allocate_shared(const _Alloc& __a, _Args&&... __args)
    {
      return shared_ptr<_Tp>(_Sp_make_shared_tag(), __a,
        std::forward<_Args>(__args)...);
    }
# 701 "/usr/include/c++/7/bits/shared_ptr.h" 3
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_Tp>
    make_shared(_Args&&... __args)
    {
      typedef typename std::remove_const<_Tp>::type _Tp_nc;
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
           std::forward<_Args>(__args)...);
    }


  template<typename _Tp>
    struct hash<shared_ptr<_Tp>>
    : public __hash_base<size_t, shared_ptr<_Tp>>
    {
      size_t
      operator()(const shared_ptr<_Tp>& __s) const noexcept
      {
 return std::hash<typename shared_ptr<_Tp>::element_type*>()(__s.get());
      }
    };




}
# 82 "/usr/include/c++/7/memory" 2 3
# 1 "/usr/include/c++/7/bits/shared_ptr_atomic.h" 1 3
# 33 "/usr/include/c++/7/bits/shared_ptr_atomic.h" 3
# 1 "/usr/include/c++/7/bits/atomic_base.h" 1 3
# 33 "/usr/include/c++/7/bits/atomic_base.h" 3
       
# 34 "/usr/include/c++/7/bits/atomic_base.h" 3



# 1 "/usr/include/c++/7/bits/atomic_lockfree_defines.h" 1 3
# 33 "/usr/include/c++/7/bits/atomic_lockfree_defines.h" 3
       
# 34 "/usr/include/c++/7/bits/atomic_lockfree_defines.h" 3
# 38 "/usr/include/c++/7/bits/atomic_base.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{

# 55 "/usr/include/c++/7/bits/atomic_base.h" 3
  typedef enum memory_order
    {
      memory_order_relaxed,
      memory_order_consume,
      memory_order_acquire,
      memory_order_release,
      memory_order_acq_rel,
      memory_order_seq_cst
    } memory_order;

  enum __memory_order_modifier
    {
      __memory_order_mask = 0x0ffff,
      __memory_order_modifier_mask = 0xffff0000,
      __memory_order_hle_acquire = 0x10000,
      __memory_order_hle_release = 0x20000
    };

  constexpr memory_order
  operator|(memory_order __m, __memory_order_modifier __mod)
  {
    return memory_order(__m | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
    return memory_order(__m & int(__mod));
  }


  constexpr memory_order
  __cmpexch_failure_order2(memory_order __m) noexcept
  {
    return __m == memory_order_acq_rel ? memory_order_acquire
      : __m == memory_order_release ? memory_order_relaxed : __m;
  }

  constexpr memory_order
  __cmpexch_failure_order(memory_order __m) noexcept
  {
    return memory_order(__cmpexch_failure_order2(__m & __memory_order_mask)
      | (__m & __memory_order_modifier_mask));
  }

  inline __attribute__((__always_inline__)) void
  atomic_thread_fence(memory_order __m) noexcept
  { __atomic_thread_fence(__m); }

  inline __attribute__((__always_inline__)) void
  atomic_signal_fence(memory_order __m) noexcept
  { __atomic_signal_fence(__m); }


  template<typename _Tp>
    inline _Tp
    kill_dependency(_Tp __y) noexcept
    {
      _Tp __ret(__y);
      return __ret;
    }



  template<typename _IntTp>
    struct __atomic_base;




  template<typename _Tp>
    struct atomic;

  template<typename _Tp>
    struct atomic<_Tp*>;



    typedef bool __atomic_flag_data_type;
# 148 "/usr/include/c++/7/bits/atomic_base.h" 3
  extern "C" {

  struct __atomic_flag_base
  {
    __atomic_flag_data_type _M_i;
  };

  }




  struct atomic_flag : public __atomic_flag_base
  {
    atomic_flag() noexcept = default;
    ~atomic_flag() noexcept = default;
    atomic_flag(const atomic_flag&) = delete;
    atomic_flag& operator=(const atomic_flag&) = delete;
    atomic_flag& operator=(const atomic_flag&) volatile = delete;


    constexpr atomic_flag(bool __i) noexcept
      : __atomic_flag_base{ _S_init(__i) }
    { }

    inline __attribute__((__always_inline__)) bool
    test_and_set(memory_order __m = memory_order_seq_cst) noexcept
    {
      return __atomic_test_and_set (&_M_i, __m);
    }

    inline __attribute__((__always_inline__)) bool
    test_and_set(memory_order __m = memory_order_seq_cst) volatile noexcept
    {
      return __atomic_test_and_set (&_M_i, __m);
    }

    inline __attribute__((__always_inline__)) void
    clear(memory_order __m = memory_order_seq_cst) noexcept
    {
      memory_order __b = __m & __memory_order_mask;
      ;
      ;
      ;

      __atomic_clear (&_M_i, __m);
    }

    inline __attribute__((__always_inline__)) void
    clear(memory_order __m = memory_order_seq_cst) volatile noexcept
    {
      memory_order __b = __m & __memory_order_mask;
      ;
      ;
      ;

      __atomic_clear (&_M_i, __m);
    }

  private:
    static constexpr __atomic_flag_data_type
    _S_init(bool __i)
    { return __i ? 1 : 0; }
  };
# 237 "/usr/include/c++/7/bits/atomic_base.h" 3
  template<typename _ITp>
    struct __atomic_base
    {
    private:
      typedef _ITp __int_type;

      static constexpr int _S_alignment =
 sizeof(_ITp) > alignof(_ITp) ? sizeof(_ITp) : alignof(_ITp);

      alignas(_S_alignment) __int_type _M_i;

    public:
      __atomic_base() noexcept = default;
      ~__atomic_base() noexcept = default;
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;


      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }

      operator __int_type() const noexcept
      { return load(); }

      operator __int_type() const volatile noexcept
      { return load(); }

      __int_type
      operator=(__int_type __i) noexcept
      {
 store(__i);
 return __i;
      }

      __int_type
      operator=(__int_type __i) volatile noexcept
      {
 store(__i);
 return __i;
      }

      __int_type
      operator++(int) noexcept
      { return fetch_add(1); }

      __int_type
      operator++(int) volatile noexcept
      { return fetch_add(1); }

      __int_type
      operator--(int) noexcept
      { return fetch_sub(1); }

      __int_type
      operator--(int) volatile noexcept
      { return fetch_sub(1); }

      __int_type
      operator++() noexcept
      { return __atomic_add_fetch(&_M_i, 1, memory_order_seq_cst); }

      __int_type
      operator++() volatile noexcept
      { return __atomic_add_fetch(&_M_i, 1, memory_order_seq_cst); }

      __int_type
      operator--() noexcept
      { return __atomic_sub_fetch(&_M_i, 1, memory_order_seq_cst); }

      __int_type
      operator--() volatile noexcept
      { return __atomic_sub_fetch(&_M_i, 1, memory_order_seq_cst); }

      __int_type
      operator+=(__int_type __i) noexcept
      { return __atomic_add_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator+=(__int_type __i) volatile noexcept
      { return __atomic_add_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator-=(__int_type __i) noexcept
      { return __atomic_sub_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator-=(__int_type __i) volatile noexcept
      { return __atomic_sub_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator&=(__int_type __i) noexcept
      { return __atomic_and_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator&=(__int_type __i) volatile noexcept
      { return __atomic_and_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator|=(__int_type __i) noexcept
      { return __atomic_or_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator|=(__int_type __i) volatile noexcept
      { return __atomic_or_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator^=(__int_type __i) noexcept
      { return __atomic_xor_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator^=(__int_type __i) volatile noexcept
      { return __atomic_xor_fetch(&_M_i, __i, memory_order_seq_cst); }

      bool
      is_lock_free() const noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_i),
     reinterpret_cast<void *>(-__alignof(_M_i)));
      }

      bool
      is_lock_free() const volatile noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_i),
     reinterpret_cast<void *>(-__alignof(_M_i)));
      }

      inline __attribute__((__always_inline__)) void
      store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
      {
 memory_order __b = __m & __memory_order_mask;
 ;
 ;
 ;

 __atomic_store_n(&_M_i, __i, __m);
      }

      inline __attribute__((__always_inline__)) void
      store(__int_type __i,
     memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 memory_order __b = __m & __memory_order_mask;
 ;
 ;
 ;

 __atomic_store_n(&_M_i, __i, __m);
      }

      inline __attribute__((__always_inline__)) __int_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
 memory_order __b = __m & __memory_order_mask;
 ;
 ;

 return __atomic_load_n(&_M_i, __m);
      }

      inline __attribute__((__always_inline__)) __int_type
      load(memory_order __m = memory_order_seq_cst) const volatile noexcept
      {
 memory_order __b = __m & __memory_order_mask;
 ;
 ;

 return __atomic_load_n(&_M_i, __m);
      }

      inline __attribute__((__always_inline__)) __int_type
      exchange(__int_type __i,
        memory_order __m = memory_order_seq_cst) noexcept
      {
 return __atomic_exchange_n(&_M_i, __i, __m);
      }


      inline __attribute__((__always_inline__)) __int_type
      exchange(__int_type __i,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return __atomic_exchange_n(&_M_i, __i, __m);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__int_type& __i1, __int_type __i2,
       memory_order __m1, memory_order __m2) noexcept
      {
 memory_order __b2 = __m2 & __memory_order_mask;
 memory_order __b1 = __m1 & __memory_order_mask;
 ;
 ;
 ;

 return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 1, __m1, __m2);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__int_type& __i1, __int_type __i2,
       memory_order __m1,
       memory_order __m2) volatile noexcept
      {
 memory_order __b2 = __m2 & __memory_order_mask;
 memory_order __b1 = __m1 & __memory_order_mask;
 ;
 ;
 ;

 return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 1, __m1, __m2);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__int_type& __i1, __int_type __i2,
       memory_order __m = memory_order_seq_cst) noexcept
      {
 return compare_exchange_weak(__i1, __i2, __m,
         __cmpexch_failure_order(__m));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__int_type& __i1, __int_type __i2,
     memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return compare_exchange_weak(__i1, __i2, __m,
         __cmpexch_failure_order(__m));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__int_type& __i1, __int_type __i2,
         memory_order __m1, memory_order __m2) noexcept
      {
 memory_order __b2 = __m2 & __memory_order_mask;
 memory_order __b1 = __m1 & __memory_order_mask;
 ;
 ;
 ;

 return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 0, __m1, __m2);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__int_type& __i1, __int_type __i2,
         memory_order __m1,
         memory_order __m2) volatile noexcept
      {
 memory_order __b2 = __m2 & __memory_order_mask;
 memory_order __b1 = __m1 & __memory_order_mask;

 ;
 ;
 ;

 return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 0, __m1, __m2);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__int_type& __i1, __int_type __i2,
         memory_order __m = memory_order_seq_cst) noexcept
      {
 return compare_exchange_strong(__i1, __i2, __m,
           __cmpexch_failure_order(__m));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__int_type& __i1, __int_type __i2,
   memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return compare_exchange_strong(__i1, __i2, __m,
           __cmpexch_failure_order(__m));
      }

      inline __attribute__((__always_inline__)) __int_type
      fetch_add(__int_type __i,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_add(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_add(__int_type __i,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_add(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_sub(__int_type __i,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_sub(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_sub(__int_type __i,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_sub(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_and(__int_type __i,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_and(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_and(__int_type __i,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_and(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_or(__int_type __i,
        memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_or(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_or(__int_type __i,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_or(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_xor(__int_type __i,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_xor(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_xor(__int_type __i,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_xor(&_M_i, __i, __m); }
    };



  template<typename _PTp>
    struct __atomic_base<_PTp*>
    {
    private:
      typedef _PTp* __pointer_type;

      __pointer_type _M_p;


      constexpr ptrdiff_t
      _M_type_size(ptrdiff_t __d) const { return __d * sizeof(_PTp); }

      constexpr ptrdiff_t
      _M_type_size(ptrdiff_t __d) const volatile { return __d * sizeof(_PTp); }

    public:
      __atomic_base() noexcept = default;
      ~__atomic_base() noexcept = default;
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;


      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }

      operator __pointer_type() const noexcept
      { return load(); }

      operator __pointer_type() const volatile noexcept
      { return load(); }

      __pointer_type
      operator=(__pointer_type __p) noexcept
      {
 store(__p);
 return __p;
      }

      __pointer_type
      operator=(__pointer_type __p) volatile noexcept
      {
 store(__p);
 return __p;
      }

      __pointer_type
      operator++(int) noexcept
      { return fetch_add(1); }

      __pointer_type
      operator++(int) volatile noexcept
      { return fetch_add(1); }

      __pointer_type
      operator--(int) noexcept
      { return fetch_sub(1); }

      __pointer_type
      operator--(int) volatile noexcept
      { return fetch_sub(1); }

      __pointer_type
      operator++() noexcept
      { return __atomic_add_fetch(&_M_p, _M_type_size(1),
      memory_order_seq_cst); }

      __pointer_type
      operator++() volatile noexcept
      { return __atomic_add_fetch(&_M_p, _M_type_size(1),
      memory_order_seq_cst); }

      __pointer_type
      operator--() noexcept
      { return __atomic_sub_fetch(&_M_p, _M_type_size(1),
      memory_order_seq_cst); }

      __pointer_type
      operator--() volatile noexcept
      { return __atomic_sub_fetch(&_M_p, _M_type_size(1),
      memory_order_seq_cst); }

      __pointer_type
      operator+=(ptrdiff_t __d) noexcept
      { return __atomic_add_fetch(&_M_p, _M_type_size(__d),
      memory_order_seq_cst); }

      __pointer_type
      operator+=(ptrdiff_t __d) volatile noexcept
      { return __atomic_add_fetch(&_M_p, _M_type_size(__d),
      memory_order_seq_cst); }

      __pointer_type
      operator-=(ptrdiff_t __d) noexcept
      { return __atomic_sub_fetch(&_M_p, _M_type_size(__d),
      memory_order_seq_cst); }

      __pointer_type
      operator-=(ptrdiff_t __d) volatile noexcept
      { return __atomic_sub_fetch(&_M_p, _M_type_size(__d),
      memory_order_seq_cst); }

      bool
      is_lock_free() const noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_p),
     reinterpret_cast<void *>(-__alignof(_M_p)));
      }

      bool
      is_lock_free() const volatile noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_p),
     reinterpret_cast<void *>(-__alignof(_M_p)));
      }

      inline __attribute__((__always_inline__)) void
      store(__pointer_type __p,
     memory_order __m = memory_order_seq_cst) noexcept
      {
        memory_order __b = __m & __memory_order_mask;

 ;
 ;
 ;

 __atomic_store_n(&_M_p, __p, __m);
      }

      inline __attribute__((__always_inline__)) void
      store(__pointer_type __p,
     memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 memory_order __b = __m & __memory_order_mask;
 ;
 ;
 ;

 __atomic_store_n(&_M_p, __p, __m);
      }

      inline __attribute__((__always_inline__)) __pointer_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
 memory_order __b = __m & __memory_order_mask;
 ;
 ;

 return __atomic_load_n(&_M_p, __m);
      }

      inline __attribute__((__always_inline__)) __pointer_type
      load(memory_order __m = memory_order_seq_cst) const volatile noexcept
      {
 memory_order __b = __m & __memory_order_mask;
 ;
 ;

 return __atomic_load_n(&_M_p, __m);
      }

      inline __attribute__((__always_inline__)) __pointer_type
      exchange(__pointer_type __p,
        memory_order __m = memory_order_seq_cst) noexcept
      {
 return __atomic_exchange_n(&_M_p, __p, __m);
      }


      inline __attribute__((__always_inline__)) __pointer_type
      exchange(__pointer_type __p,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return __atomic_exchange_n(&_M_p, __p, __m);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m1,
         memory_order __m2) noexcept
      {
 memory_order __b2 = __m2 & __memory_order_mask;
 memory_order __b1 = __m1 & __memory_order_mask;
 ;
 ;
 ;

 return __atomic_compare_exchange_n(&_M_p, &__p1, __p2, 0, __m1, __m2);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m1,
         memory_order __m2) volatile noexcept
      {
 memory_order __b2 = __m2 & __memory_order_mask;
 memory_order __b1 = __m1 & __memory_order_mask;

 ;
 ;
 ;

 return __atomic_compare_exchange_n(&_M_p, &__p1, __p2, 0, __m1, __m2);
      }

      inline __attribute__((__always_inline__)) __pointer_type
      fetch_add(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_add(&_M_p, _M_type_size(__d), __m); }

      inline __attribute__((__always_inline__)) __pointer_type
      fetch_add(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_add(&_M_p, _M_type_size(__d), __m); }

      inline __attribute__((__always_inline__)) __pointer_type
      fetch_sub(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_sub(&_M_p, _M_type_size(__d), __m); }

      inline __attribute__((__always_inline__)) __pointer_type
      fetch_sub(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_sub(&_M_p, _M_type_size(__d), __m); }
    };




}
# 34 "/usr/include/c++/7/bits/shared_ptr_atomic.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{







  struct _Sp_locker
  {
    _Sp_locker(const _Sp_locker&) = delete;
    _Sp_locker& operator=(const _Sp_locker&) = delete;


    explicit
    _Sp_locker(const void*) noexcept;
    _Sp_locker(const void*, const void*) noexcept;
    ~_Sp_locker();

  private:
    unsigned char _M_key1;
    unsigned char _M_key2;



  };







  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    atomic_is_lock_free(const __shared_ptr<_Tp, _Lp>* __p)
    {

      return __gthread_active_p() == 0;



    }

  template<typename _Tp>
    inline bool
    atomic_is_lock_free(const shared_ptr<_Tp>* __p)
    { return std::atomic_is_lock_free<_Tp, __default_lock_policy>(__p); }
# 96 "/usr/include/c++/7/bits/shared_ptr_atomic.h" 3
  template<typename _Tp>
    inline shared_ptr<_Tp>
    atomic_load_explicit(const shared_ptr<_Tp>* __p, memory_order)
    {
      _Sp_locker __lock{__p};
      return *__p;
    }

  template<typename _Tp>
    inline shared_ptr<_Tp>
    atomic_load(const shared_ptr<_Tp>* __p)
    { return std::atomic_load_explicit(__p, memory_order_seq_cst); }

  template<typename _Tp, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    atomic_load_explicit(const __shared_ptr<_Tp, _Lp>* __p, memory_order)
    {
      _Sp_locker __lock{__p};
      return *__p;
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    atomic_load(const __shared_ptr<_Tp, _Lp>* __p)
    { return std::atomic_load_explicit(__p, memory_order_seq_cst); }
# 132 "/usr/include/c++/7/bits/shared_ptr_atomic.h" 3
  template<typename _Tp>
    inline void
    atomic_store_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r,
     memory_order)
    {
      _Sp_locker __lock{__p};
      __p->swap(__r);
    }

  template<typename _Tp>
    inline void
    atomic_store(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)
    { std::atomic_store_explicit(__p, std::move(__r), memory_order_seq_cst); }

  template<typename _Tp, _Lock_policy _Lp>
    inline void
    atomic_store_explicit(__shared_ptr<_Tp, _Lp>* __p,
     __shared_ptr<_Tp, _Lp> __r,
     memory_order)
    {
      _Sp_locker __lock{__p};
      __p->swap(__r);
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline void
    atomic_store(__shared_ptr<_Tp, _Lp>* __p, __shared_ptr<_Tp, _Lp> __r)
    { std::atomic_store_explicit(__p, std::move(__r), memory_order_seq_cst); }
# 169 "/usr/include/c++/7/bits/shared_ptr_atomic.h" 3
  template<typename _Tp>
    inline shared_ptr<_Tp>
    atomic_exchange_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r,
        memory_order)
    {
      _Sp_locker __lock{__p};
      __p->swap(__r);
      return __r;
    }

  template<typename _Tp>
    inline shared_ptr<_Tp>
    atomic_exchange(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)
    {
      return std::atomic_exchange_explicit(__p, std::move(__r),
        memory_order_seq_cst);
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    atomic_exchange_explicit(__shared_ptr<_Tp, _Lp>* __p,
        __shared_ptr<_Tp, _Lp> __r,
        memory_order)
    {
      _Sp_locker __lock{__p};
      __p->swap(__r);
      return __r;
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    atomic_exchange(__shared_ptr<_Tp, _Lp>* __p, __shared_ptr<_Tp, _Lp> __r)
    {
      return std::atomic_exchange_explicit(__p, std::move(__r),
        memory_order_seq_cst);
    }
# 218 "/usr/include/c++/7/bits/shared_ptr_atomic.h" 3
  template<typename _Tp>
    bool
    atomic_compare_exchange_strong_explicit(shared_ptr<_Tp>* __p,
         shared_ptr<_Tp>* __v,
         shared_ptr<_Tp> __w,
         memory_order,
         memory_order)
    {
      shared_ptr<_Tp> __x;
      _Sp_locker __lock{__p, __v};
      owner_less<shared_ptr<_Tp>> __less;
      if (*__p == *__v && !__less(*__p, *__v) && !__less(*__v, *__p))
 {
   __x = std::move(*__p);
   *__p = std::move(__w);
   return true;
 }
      __x = std::move(*__v);
      *__v = *__p;
      return false;
    }

  template<typename _Tp>
    inline bool
    atomic_compare_exchange_strong(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,
     shared_ptr<_Tp> __w)
    {
      return std::atomic_compare_exchange_strong_explicit(__p, __v,
   std::move(__w), memory_order_seq_cst, memory_order_seq_cst);
    }

  template<typename _Tp>
    inline bool
    atomic_compare_exchange_weak_explicit(shared_ptr<_Tp>* __p,
       shared_ptr<_Tp>* __v,
       shared_ptr<_Tp> __w,
       memory_order __success,
       memory_order __failure)
    {
      return std::atomic_compare_exchange_strong_explicit(__p, __v,
   std::move(__w), __success, __failure);
    }

  template<typename _Tp>
    inline bool
    atomic_compare_exchange_weak(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,
     shared_ptr<_Tp> __w)
    {
      return std::atomic_compare_exchange_weak_explicit(__p, __v,
   std::move(__w), memory_order_seq_cst, memory_order_seq_cst);
    }

  template<typename _Tp, _Lock_policy _Lp>
    bool
    atomic_compare_exchange_strong_explicit(__shared_ptr<_Tp, _Lp>* __p,
         __shared_ptr<_Tp, _Lp>* __v,
         __shared_ptr<_Tp, _Lp> __w,
         memory_order,
         memory_order)
    {
      __shared_ptr<_Tp, _Lp> __x;
      _Sp_locker __lock{__p, __v};
      owner_less<__shared_ptr<_Tp, _Lp>> __less;
      if (*__p == *__v && !__less(*__p, *__v) && !__less(*__v, *__p))
 {
   __x = std::move(*__p);
   *__p = std::move(__w);
   return true;
 }
      __x = std::move(*__v);
      *__v = *__p;
      return false;
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    atomic_compare_exchange_strong(__shared_ptr<_Tp, _Lp>* __p,
       __shared_ptr<_Tp, _Lp>* __v,
       __shared_ptr<_Tp, _Lp> __w)
    {
      return std::atomic_compare_exchange_strong_explicit(__p, __v,
   std::move(__w), memory_order_seq_cst, memory_order_seq_cst);
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    atomic_compare_exchange_weak_explicit(__shared_ptr<_Tp, _Lp>* __p,
       __shared_ptr<_Tp, _Lp>* __v,
       __shared_ptr<_Tp, _Lp> __w,
       memory_order __success,
       memory_order __failure)
    {
      return std::atomic_compare_exchange_strong_explicit(__p, __v,
   std::move(__w), __success, __failure);
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    atomic_compare_exchange_weak(__shared_ptr<_Tp, _Lp>* __p,
     __shared_ptr<_Tp, _Lp>* __v,
     __shared_ptr<_Tp, _Lp> __w)
    {
      return std::atomic_compare_exchange_weak_explicit(__p, __v,
   std::move(__w), memory_order_seq_cst, memory_order_seq_cst);
    }





}
# 83 "/usr/include/c++/7/memory" 2 3

# 1 "/usr/include/c++/7/backward/auto_ptr.h" 1 3
# 36 "/usr/include/c++/7/backward/auto_ptr.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 47 "/usr/include/c++/7/backward/auto_ptr.h" 3
  template<typename _Tp1>
    struct auto_ptr_ref
    {
      _Tp1* _M_ptr;

      explicit
      auto_ptr_ref(_Tp1* __p): _M_ptr(__p) { }
    } __attribute__ ((__deprecated__));
# 86 "/usr/include/c++/7/backward/auto_ptr.h" 3
  template<typename _Tp>
    class auto_ptr
    {
    private:
      _Tp* _M_ptr;

    public:

      typedef _Tp element_type;







      explicit
      auto_ptr(element_type* __p = 0) throw() : _M_ptr(__p) { }
# 112 "/usr/include/c++/7/backward/auto_ptr.h" 3
      auto_ptr(auto_ptr& __a) throw() : _M_ptr(__a.release()) { }
# 124 "/usr/include/c++/7/backward/auto_ptr.h" 3
      template<typename _Tp1>
        auto_ptr(auto_ptr<_Tp1>& __a) throw() : _M_ptr(__a.release()) { }
# 135 "/usr/include/c++/7/backward/auto_ptr.h" 3
      auto_ptr&
      operator=(auto_ptr& __a) throw()
      {
 reset(__a.release());
 return *this;
      }
# 152 "/usr/include/c++/7/backward/auto_ptr.h" 3
      template<typename _Tp1>
        auto_ptr&
        operator=(auto_ptr<_Tp1>& __a) throw()
        {
   reset(__a.release());
   return *this;
 }
# 170 "/usr/include/c++/7/backward/auto_ptr.h" 3
      ~auto_ptr() { delete _M_ptr; }
# 180 "/usr/include/c++/7/backward/auto_ptr.h" 3
      element_type&
      operator*() const throw()
      {
 ;
 return *_M_ptr;
      }







      element_type*
      operator->() const throw()
      {
 ;
 return _M_ptr;
      }
# 210 "/usr/include/c++/7/backward/auto_ptr.h" 3
      element_type*
      get() const throw() { return _M_ptr; }
# 224 "/usr/include/c++/7/backward/auto_ptr.h" 3
      element_type*
      release() throw()
      {
 element_type* __tmp = _M_ptr;
 _M_ptr = 0;
 return __tmp;
      }
# 239 "/usr/include/c++/7/backward/auto_ptr.h" 3
      void
      reset(element_type* __p = 0) throw()
      {
 if (__p != _M_ptr)
   {
     delete _M_ptr;
     _M_ptr = __p;
   }
      }
# 264 "/usr/include/c++/7/backward/auto_ptr.h" 3
      auto_ptr(auto_ptr_ref<element_type> __ref) throw()
      : _M_ptr(__ref._M_ptr) { }

      auto_ptr&
      operator=(auto_ptr_ref<element_type> __ref) throw()
      {
 if (__ref._M_ptr != this->get())
   {
     delete _M_ptr;
     _M_ptr = __ref._M_ptr;
   }
 return *this;
      }

      template<typename _Tp1>
        operator auto_ptr_ref<_Tp1>() throw()
        { return auto_ptr_ref<_Tp1>(this->release()); }

      template<typename _Tp1>
        operator auto_ptr<_Tp1>() throw()
        { return auto_ptr<_Tp1>(this->release()); }
    } __attribute__ ((__deprecated__));



  template<>
    class auto_ptr<void>
    {
    public:
      typedef void element_type;
    } __attribute__ ((__deprecated__));


  template<_Lock_policy _Lp>
  template<typename _Tp>
    inline
    __shared_count<_Lp>::__shared_count(std::auto_ptr<_Tp>&& __r)
    : _M_pi(new _Sp_counted_ptr<_Tp*, _Lp>(__r.get()))
    { __r.release(); }

  template<typename _Tp, _Lock_policy _Lp>
  template<typename _Tp1, typename>
    inline
    __shared_ptr<_Tp, _Lp>::__shared_ptr(std::auto_ptr<_Tp1>&& __r)
    : _M_ptr(__r.get()), _M_refcount()
    {
     
      static_assert( sizeof(_Tp1) > 0, "incomplete type" );
      _Tp1* __tmp = __r.get();
      _M_refcount = __shared_count<_Lp>(std::move(__r));
      _M_enable_shared_from_this_with(__tmp);
    }

  template<typename _Tp>
  template<typename _Tp1, typename>
    inline
    shared_ptr<_Tp>::shared_ptr(std::auto_ptr<_Tp1>&& __r)
    : __shared_ptr<_Tp>(std::move(__r)) { }

  template<typename _Tp, typename _Dp>
  template<typename _Up, typename>
    inline
    unique_ptr<_Tp, _Dp>::unique_ptr(auto_ptr<_Up>&& __u) noexcept
    : _M_t(__u.release(), deleter_type()) { }



}
# 85 "/usr/include/c++/7/memory" 2 3
# 93 "/usr/include/c++/7/memory" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 113 "/usr/include/c++/7/memory" 3
inline void*
align(size_t __align, size_t __size, void*& __ptr, size_t& __space) noexcept
{
  const auto __intptr = reinterpret_cast<uintptr_t>(__ptr);
  const auto __aligned = (__intptr - 1u + __align) & -__align;
  const auto __diff = __aligned - __intptr;
  if ((__size + __diff) > __space)
    return nullptr;
  else
    {
      __space -= __diff;
      return __ptr = reinterpret_cast<void*>(__aligned);
    }
}



enum class pointer_safety { relaxed, preferred, strict };

inline void
declare_reachable(void*) { }

template <typename _Tp>
  inline _Tp*
  undeclare_reachable(_Tp* __p) { return __p; }

inline void
declare_no_pointers(char*, size_t) { }

inline void
undeclare_no_pointers(char*, size_t) { }

inline pointer_safety
get_pointer_safety() noexcept { return pointer_safety::relaxed; }


}
# 26 "/workspace/acl/lib_acl_cpp/src/acl_stdafx.hpp" 2



# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/malloc.hpp" 1
       
# 50 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/malloc.hpp"

# 50 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/malloc.hpp"
namespace acl {

 void acl_slice_init(void);
# 62 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/malloc.hpp"
 void* acl_new(size_t size, const char* filename,
 const char* funcname, int lineno);
# 73 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/malloc.hpp"
 void acl_delete(void *ptr, const char* filename,
 const char* funcname, int lineno);

}
# 30 "/workspace/acl/lib_acl_cpp/src/acl_stdafx.hpp" 2
# 56 "/workspace/acl/lib_acl_cpp/src/acl_stdafx.hpp"
# 1 "/usr/include/zlib.h" 1 3 4
# 34 "/usr/include/zlib.h" 3 4
# 1 "/usr/include/zconf.h" 1 3 4
# 247 "/usr/include/zconf.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 248 "/usr/include/zconf.h" 2 3 4
     
# 248 "/usr/include/zconf.h" 3 4
    typedef size_t z_size_t;
# 391 "/usr/include/zconf.h" 3 4
typedef unsigned char Byte;

typedef unsigned int uInt;
typedef unsigned long uLong;





   typedef Byte Bytef;

typedef char charf;
typedef int intf;
typedef uInt uIntf;
typedef uLong uLongf;


   typedef void const *voidpc;
   typedef void *voidpf;
   typedef void *voidp;







# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 1 3 4
# 194 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 26 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/limits.h" 2 3 4
# 183 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 160 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 184 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 188 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 1 3 4
# 192 "/usr/include/limits.h" 2 3 4
# 195 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h" 2 3 4
# 419 "/usr/include/zconf.h" 2 3 4
# 429 "/usr/include/zconf.h" 3 4
   typedef unsigned z_crc_t;
# 35 "/usr/include/zlib.h" 2 3 4


extern "C" {
# 81 "/usr/include/zlib.h" 3 4
typedef voidpf (*alloc_func) (voidpf opaque, uInt items, uInt size);
typedef void (*free_func) (voidpf opaque, voidpf address);

struct internal_state;

typedef struct z_stream_s {
    Bytef *next_in;
    uInt avail_in;
    uLong total_in;

    Bytef *next_out;
    uInt avail_out;
    uLong total_out;

    char *msg;
    struct internal_state *state;

    alloc_func zalloc;
    free_func zfree;
    voidpf opaque;

    int data_type;

    uLong adler;
    uLong reserved;
} z_stream;

typedef z_stream *z_streamp;





typedef struct gz_header_s {
    int text;
    uLong time;
    int xflags;
    int os;
    Bytef *extra;
    uInt extra_len;
    uInt extra_max;
    Bytef *name;
    uInt name_max;
    Bytef *comment;
    uInt comm_max;
    int hcrc;
    int done;

} gz_header;

typedef gz_header *gz_headerp;
# 220 "/usr/include/zlib.h" 3 4
extern const char * zlibVersion (void);
# 250 "/usr/include/zlib.h" 3 4
extern int deflate (z_streamp strm, int flush);
# 363 "/usr/include/zlib.h" 3 4
extern int deflateEnd (z_streamp strm);
# 400 "/usr/include/zlib.h" 3 4
extern int inflate (z_streamp strm, int flush);
# 520 "/usr/include/zlib.h" 3 4
extern int inflateEnd (z_streamp strm);
# 611 "/usr/include/zlib.h" 3 4
extern int deflateSetDictionary (z_streamp strm, const Bytef *dictionary, uInt dictLength)

                                                               ;
# 655 "/usr/include/zlib.h" 3 4
extern int deflateGetDictionary (z_streamp strm, Bytef *dictionary, uInt *dictLength)

                                                                ;
# 677 "/usr/include/zlib.h" 3 4
extern int deflateCopy (z_streamp dest, z_streamp source)
                                                      ;
# 695 "/usr/include/zlib.h" 3 4
extern int deflateReset (z_streamp strm);
# 706 "/usr/include/zlib.h" 3 4
extern int deflateParams (z_streamp strm, int level, int strategy)

                                                    ;
# 744 "/usr/include/zlib.h" 3 4
extern int deflateTune (z_streamp strm, int good_length, int max_lazy, int nice_length, int max_chain)



                                                   ;
# 761 "/usr/include/zlib.h" 3 4
extern uLong deflateBound (z_streamp strm, uLong sourceLen)
                                                        ;
# 776 "/usr/include/zlib.h" 3 4
extern int deflatePending (z_streamp strm, unsigned *pending, int *bits)

                                                  ;
# 791 "/usr/include/zlib.h" 3 4
extern int deflatePrime (z_streamp strm, int bits, int value)

                                                ;
# 808 "/usr/include/zlib.h" 3 4
extern int deflateSetHeader (z_streamp strm, gz_headerp head)
                                                          ;
# 885 "/usr/include/zlib.h" 3 4
extern int inflateSetDictionary (z_streamp strm, const Bytef *dictionary, uInt dictLength)

                                                               ;
# 908 "/usr/include/zlib.h" 3 4
extern int inflateGetDictionary (z_streamp strm, Bytef *dictionary, uInt *dictLength)

                                                                ;
# 923 "/usr/include/zlib.h" 3 4
extern int inflateSync (z_streamp strm);
# 942 "/usr/include/zlib.h" 3 4
extern int inflateCopy (z_streamp dest, z_streamp source)
                                                      ;
# 958 "/usr/include/zlib.h" 3 4
extern int inflateReset (z_streamp strm);
# 968 "/usr/include/zlib.h" 3 4
extern int inflateReset2 (z_streamp strm, int windowBits)
                                                      ;
# 982 "/usr/include/zlib.h" 3 4
extern int inflatePrime (z_streamp strm, int bits, int value)

                                                ;
# 1003 "/usr/include/zlib.h" 3 4
extern long inflateMark (z_streamp strm);
# 1031 "/usr/include/zlib.h" 3 4
extern int inflateGetHeader (z_streamp strm, gz_headerp head)
                                                          ;
# 1093 "/usr/include/zlib.h" 3 4
typedef unsigned (*in_func) (void *, unsigned char * *)
                                                                   ;
typedef int (*out_func) (void *, unsigned char *, unsigned);

extern int inflateBack (z_streamp strm, in_func in, void *in_desc, out_func out, void *out_desc)

                                                                      ;
# 1167 "/usr/include/zlib.h" 3 4
extern int inflateBackEnd (z_streamp strm);







extern uLong zlibCompileFlags (void);
# 1228 "/usr/include/zlib.h" 3 4
extern int compress (Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen)
                                                                       ;
# 1243 "/usr/include/zlib.h" 3 4
extern int compress2 (Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen, int level)

                                             ;
# 1259 "/usr/include/zlib.h" 3 4
extern uLong compressBound (uLong sourceLen);






extern int uncompress (Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen)
                                                                         ;
# 1284 "/usr/include/zlib.h" 3 4
extern int uncompress2 (Bytef *dest, uLongf *destLen, const Bytef *source, uLong *sourceLen)
                                                                           ;
# 1301 "/usr/include/zlib.h" 3 4
typedef struct gzFile_s *gzFile;
# 1341 "/usr/include/zlib.h" 3 4
extern gzFile gzdopen (int fd, const char *mode);
# 1364 "/usr/include/zlib.h" 3 4
extern int gzbuffer (gzFile file, unsigned size);
# 1380 "/usr/include/zlib.h" 3 4
extern int gzsetparams (gzFile file, int level, int strategy);
# 1391 "/usr/include/zlib.h" 3 4
extern int gzread (gzFile file, voidp buf, unsigned len);
# 1421 "/usr/include/zlib.h" 3 4
extern z_size_t gzfread (voidp buf, z_size_t size, z_size_t nitems, gzFile file)
                                                  ;
# 1447 "/usr/include/zlib.h" 3 4
extern int gzwrite (gzFile file, voidpc buf, unsigned len)
                                                          ;






extern z_size_t gzfwrite (voidpc buf, z_size_t size, z_size_t nitems, gzFile file)
                                                                    ;
# 1469 "/usr/include/zlib.h" 3 4
extern int gzprintf (gzFile file, const char *format, ...);
# 1484 "/usr/include/zlib.h" 3 4
extern int gzputs (gzFile file, const char *s);







extern char * gzgets (gzFile file, char *buf, int len);
# 1505 "/usr/include/zlib.h" 3 4
extern int gzputc (gzFile file, int c);





extern int gzgetc (gzFile file);
# 1520 "/usr/include/zlib.h" 3 4
extern int gzungetc (int c, gzFile file);
# 1532 "/usr/include/zlib.h" 3 4
extern int gzflush (gzFile file, int flush);
# 1567 "/usr/include/zlib.h" 3 4
extern int gzrewind (gzFile file);
# 1595 "/usr/include/zlib.h" 3 4
extern int gzeof (gzFile file);
# 1610 "/usr/include/zlib.h" 3 4
extern int gzdirect (gzFile file);
# 1631 "/usr/include/zlib.h" 3 4
extern int gzclose (gzFile file);
# 1644 "/usr/include/zlib.h" 3 4
extern int gzclose_r (gzFile file);
extern int gzclose_w (gzFile file);
# 1656 "/usr/include/zlib.h" 3 4
extern const char * gzerror (gzFile file, int *errnum);
# 1672 "/usr/include/zlib.h" 3 4
extern void gzclearerr (gzFile file);
# 1689 "/usr/include/zlib.h" 3 4
extern uLong adler32 (uLong adler, const Bytef *buf, uInt len);
# 1708 "/usr/include/zlib.h" 3 4
extern uLong adler32_z (uLong adler, const Bytef *buf, z_size_t len)
                                                  ;
# 1726 "/usr/include/zlib.h" 3 4
extern uLong crc32 (uLong crc, const Bytef *buf, uInt len);
# 1743 "/usr/include/zlib.h" 3 4
extern uLong crc32_z (uLong adler, const Bytef *buf, z_size_t len)
                                                ;
# 1765 "/usr/include/zlib.h" 3 4
extern int deflateInit_ (z_streamp strm, int level, const char *version, int stream_size)
                                                                           ;
extern int inflateInit_ (z_streamp strm, const char *version, int stream_size)
                                                                           ;
extern int deflateInit2_ (z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)


                                                       ;
extern int inflateInit2_ (z_streamp strm, int windowBits, const char *version, int stream_size)
                                                                            ;
extern int inflateBackInit_ (z_streamp strm, int windowBits, unsigned char *window, const char *version, int stream_size)


                                                          ;
# 1818 "/usr/include/zlib.h" 3 4
struct gzFile_s {
    unsigned have;
    unsigned char *next;
    off64_t pos;
};
extern int gzgetc_ (gzFile file);
# 1840 "/usr/include/zlib.h" 3 4
   extern gzFile gzopen64 (const char *, const char *);
   extern off64_t gzseek64 (gzFile, off64_t, int);
   extern off64_t gztell64 (gzFile);
   extern off64_t gzoffset64 (gzFile);
   extern uLong adler32_combine64 (uLong, uLong, off64_t);
   extern uLong crc32_combine64 (uLong, uLong, off64_t);
# 1873 "/usr/include/zlib.h" 3 4
   extern gzFile gzopen (const char *, const char *);
   extern off_t gzseek (gzFile, off_t, int);
   extern off_t gztell (gzFile);
   extern off_t gzoffset (gzFile);
   extern uLong adler32_combine (uLong, uLong, off_t);
   extern uLong crc32_combine (uLong, uLong, off_t);
# 1889 "/usr/include/zlib.h" 3 4
extern const char * zError (int);
extern int inflateSyncPoint (z_streamp);
extern const z_crc_t * get_crc_table (void);
extern int inflateUndermine (z_streamp, int);
extern int inflateValidate (z_streamp, int);
extern unsigned long inflateCodesUsed (z_streamp);
extern int inflateResetKeep (z_streamp);
extern int deflateResetKeep (z_streamp);






extern int gzvprintf (gzFile file, const char *format, va_list va)

                                                              ;




}
# 57 "/workspace/acl/lib_acl_cpp/src/acl_stdafx.hpp" 2




# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 1
       


# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/acl_cpp_init.hpp" 1
       



# 4 "/workspace/acl/lib_acl_cpp/include/acl_cpp/acl_cpp_init.hpp"
namespace acl
{





 void acl_cpp_init(void);





 const char* acl_cpp_verbose(void);
# 31 "/workspace/acl/lib_acl_cpp/include/acl_cpp/acl_cpp_init.hpp"
}
# 5 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/acl_cpp_test.hpp" 1
       


namespace acl
{
 void test_logger(void);
 void test_snprintf(void);
}
# 6 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/noncopyable.hpp" 1
       


namespace acl {

class noncopyable
{
protected:
 noncopyable() {}
 ~noncopyable() {}
private:
 noncopyable( const noncopyable& );
 const noncopyable& operator=( const noncopyable& );
};

}
# 8 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/singleton.hpp" 1
       

# 1 "/usr/include/assert.h" 1 3 4
# 4 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/singleton.hpp" 2
# 32 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/singleton.hpp"
namespace acl {
# 69 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/singleton.hpp"
class singleton_module : public noncopyable
{
public:
 static void lock()
 {
  get_lock() = true;
 }

 static void unlock()
 {
  get_lock() = false;
 }

 static bool is_locked() {
  return get_lock();
 }
private:
 static bool& get_lock()
 {
  static bool lock_ = false;
  return lock_;
 }
};

template<class T>
class singleton_wrapper : public T
{
public:
 static bool destroyed_;
 ~singleton_wrapper()
 {
  destroyed_ = true;
 }
};

template<class T>
bool singleton_wrapper< T >::destroyed_ = false;
# 129 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/singleton.hpp"
template <class T>
class singleton : public singleton_module
{
public:
 static T& get_instance()
 {
  static singleton_wrapper< T > t;


  
# 138 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/singleton.hpp" 3 4
 (static_cast <bool> (
# 138 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/singleton.hpp"
 !singleton_wrapper< T >::destroyed_
# 138 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/singleton.hpp" 3 4
 ) ? void (0) : __assert_fail (
# 138 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/singleton.hpp"
 "!singleton_wrapper< T >::destroyed_"
# 138 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/singleton.hpp" 3 4
 , "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/singleton.hpp", 138, __extension__ __PRETTY_FUNCTION__))
# 138 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/singleton.hpp"
                                            ;
  use(instance_);
  return static_cast<T &>(t);
 }

 static bool is_destroyed()
 {
  return singleton_wrapper< T >::destroyed_;
 }

private:
 static T& instance_;

 static void use(T const &) {}
};

template<class T>
T& singleton< T >::instance_ = singleton< T >::get_instance();
# 180 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/singleton.hpp"
template <typename T>
struct singleton2
{
private:
 struct object_creator
 {
  object_creator() { singleton2<T>::get_instance(); }
  inline void do_nothing() const {};
 };
 static object_creator create_object;

public:
 typedef T object_type;
 static object_type & get_instance()
 {
  static object_type obj;
  create_object.do_nothing();
  return obj;
 }
};

template <typename T>
typename singleton2<T>::object_creator singleton2<T>::create_object;





}
# 9 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/snprintf.hpp" 1
       



namespace acl {
# 18 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/snprintf.hpp"
 int __attribute__((__format__ (__printf__, (3), (4)))) safe_snprintf(char *buf, size_t size,
 const char *fmt, ...);
# 35 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/snprintf.hpp"
 int safe_vsnprintf(char *buf, size_t size, const char *fmt, va_list ap);

}
# 10 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/dns_service.hpp" 1
       


# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/ipc_service.hpp" 1
       

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/../stdlib/locker.hpp" 1
       


# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 5 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/../stdlib/locker.hpp" 2
# 17 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/../stdlib/locker.hpp"
namespace acl {




class locker : public noncopyable
{
public:





 locker(bool use_mutex = true, bool use_spinlock = false);
 virtual ~locker();







 bool open(const char* file_path);
# 49 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/../stdlib/locker.hpp"
 bool open(int fh);






 bool lock();





 bool try_lock();





 bool unlock();

private:
 pthread_mutex_t* mutex_;
 char* pFile_;



 int fHandle_;
 pthread_mutexattr_t mutex_attr_;

 pthread_spinlock_t* spinlock_;


 bool myFHandle_;

 void init_mutex(bool use_spinlock);
};

class lock_guard : public noncopyable
{
public:
 lock_guard(locker& lk);
 ~lock_guard();

private:
 locker& lk_;
};

}
# 4 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/ipc_service.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/ipc_server.hpp" 1
       

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/../stream/aio_listen_stream.hpp" 1
       

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/../stream/aio_stream.hpp" 1
       
# 10 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/../stream/aio_stream.hpp"
struct ACL_ASTREAM;
struct ACL_VSTREAM;

namespace acl {




class aio_callback : public noncopyable {
public:
 aio_callback(void) {}
 virtual ~aio_callback(void) {};

 virtual void close_callback(void) {}
 virtual bool timeout_callback(void)
 {
  return false;
 }
# 37 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/../stream/aio_stream.hpp"
 virtual bool read_callback(char* data, int len)
 {
  (void) data;
  (void) len;
  return true;
 }






 virtual bool read_wakeup(void)
 {
  return true;
 }





 virtual bool write_callback(void)
 {
  return true;
 }






 virtual bool write_wakeup(void)
 {
  return true;
 }
};

struct AIO_CALLBACK {
 aio_callback* callback;
 bool enable;
};

class aio_handle;
class stream_hook;





class aio_stream : public noncopyable {
public:




 aio_stream(aio_handle* handle);






 void close(bool flush_out = false);







 void add_close_callback(aio_callback* callback);







 void add_timeout_callback(aio_callback* callback);







 int del_close_callback(aio_callback* callback = 
# 123 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/../stream/aio_stream.hpp" 3 4
                                                __null
# 123 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/../stream/aio_stream.hpp"
                                                    );







 int del_timeout_callback(aio_callback* callback = 
# 131 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/../stream/aio_stream.hpp" 3 4
                                                  __null
# 131 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/../stream/aio_stream.hpp"
                                                      );







 int disable_close_callback(aio_callback* callback = 
# 139 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/../stream/aio_stream.hpp" 3 4
                                                    __null
# 139 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/../stream/aio_stream.hpp"
                                                        );







 int disable_timeout_callback(aio_callback* callback = 
# 147 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/../stream/aio_stream.hpp" 3 4
                                                      __null
# 147 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/../stream/aio_stream.hpp"
                                                          );







 int enable_close_callback(aio_callback* callback = 
# 155 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/../stream/aio_stream.hpp" 3 4
                                                   __null
# 155 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/../stream/aio_stream.hpp"
                                                       );







 int enable_timeout_callback(aio_callback* callback = 
# 163 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/../stream/aio_stream.hpp" 3 4
                                                     __null
# 163 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/../stream/aio_stream.hpp"
                                                         );





 ACL_ASTREAM* get_astream(void) const;





 ACL_VSTREAM* get_vstream(void) const;
# 185 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/../stream/aio_stream.hpp"
 int get_socket(void) const;
 int sock_handle(void) const

 {
  return get_socket();
 }
# 199 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/../stream/aio_stream.hpp"
 const char* get_peer(bool full = false) const;
# 208 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/../stream/aio_stream.hpp"
 const char* get_local(bool full = false) const;





 aio_handle& get_handle(void) const;






 void set_handle(aio_handle& handle);
# 231 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/../stream/aio_stream.hpp"
 stream_hook* setup_hook(stream_hook* hook);





 stream_hook* get_hook(void) const;





 stream_hook* remove_hook(void);

protected:
 aio_handle* handle_;
 ACL_ASTREAM* stream_;
 stream_hook* hook_;

 virtual ~aio_stream(void);




 virtual void destroy(void);





 void enable_error(void);

protected:
 enum {

  STATUS_HOOKED_ERROR = 1,
  STATUS_HOOKED_READ = 1 << 1,
  STATUS_HOOKED_WRITE = 1 << 2,
  STATUS_HOOKED_OPEN = 1 << 3,


  STATUS_CONN_OPENED = 1 << 4,
 };
 unsigned status_;
private:
 std::list<AIO_CALLBACK*>* close_callbacks_;
 std::list<AIO_CALLBACK*>* timeout_callbacks_;

 static int close_callback(ACL_ASTREAM*, void*);
 static int timeout_callback(ACL_ASTREAM*, void*);

private:
 std::string ip_peer_;
 std::string ip_local_;

 const char* get_ip(const char* addr, std::string& out);

private:
# 300 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/../stream/aio_stream.hpp"
 static int read_hook(int fd, void *buf, size_t len,
  int timeout, ACL_VSTREAM* stream, void *ctx);
 static int send_hook(int fd, const void *buf, size_t len,
  int timeout, ACL_VSTREAM* stream, void *ctx);

 static int fread_hook(int fd, void *buf, size_t len,
  int timeout, ACL_VSTREAM* stream, void *ctx);
 static int fsend_hook(int fd, const void *buf, size_t len,
  int timeout, ACL_VSTREAM* stream, void *ctx);

};

}
# 4 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/../stream/aio_listen_stream.hpp" 2

namespace acl {

class aio_socket_stream;
class aio_listen_stream;





class aio_accept_callback : public aio_callback {
public:
 aio_accept_callback(void) {}
 virtual ~aio_accept_callback(void) {}
# 26 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/../stream/aio_listen_stream.hpp"
 virtual bool accept_callback(aio_socket_stream* client) = 0;
};







class aio_listen_callback : public aio_callback {
public:
 aio_listen_callback(void) {}
 virtual ~aio_listen_callback(void) {}

 virtual bool listen_callback(aio_listen_stream& ss) = 0;
};







class aio_listen_stream : public aio_stream {
public:




 aio_listen_stream(aio_handle* handle);





 void add_accept_callback(aio_accept_callback* callback);







 void add_listen_callback(aio_listen_callback* callback);






 aio_socket_stream* accept(void);
# 92 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/../stream/aio_listen_stream.hpp"
 bool open(const char* addr, unsigned flag = 0, int qlen = 128);
# 102 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/../stream/aio_listen_stream.hpp"
 bool open(int fd);







 bool open(ACL_VSTREAM* vstream);






 bool open(ACL_ASTREAM* astream);





 const char* get_addr(void) const;




 virtual void destroy(void);

protected:
 virtual ~aio_listen_stream(void);

private:
 bool listen_hooked_;
 char addr_[256];
 std::list<aio_accept_callback*> accept_callbacks_;
 std::list<aio_listen_callback*> listen_callbacks_;

 void enable_listen(void);
 int accept_callback(aio_socket_stream* conn);
 static int listen_callback(ACL_ASTREAM*, void*);
};

}
# 4 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/ipc_server.hpp" 2

namespace acl {

class aio_handle;
class aio_listen_stream;




class ipc_server : private aio_accept_callback
{
public:
 ipc_server();

 virtual ~ipc_server();







 bool open(aio_handle* handle, const char* addr = "127.0.0.1:0");





 const char* get_addr() const;





 aio_listen_stream* get_stream() const;




 aio_handle& get_handle() const;

protected:




 virtual void on_open(const char*addr)
 {
  (void) addr;
 }




 virtual void on_close() {}





 virtual void on_accept(aio_socket_stream* client)
 {
  (void) client;
 }
# 80 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/ipc_server.hpp"
private:
 aio_handle* handle_;
 aio_listen_stream* sstream_;






 virtual bool accept_callback(aio_socket_stream* client);




 virtual void close_callback();




 virtual bool timeout_callback();
};

}
# 6 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/ipc_service.hpp" 2

struct acl_pthread_pool_t;

namespace acl {

class ipc_client;

class ipc_request : public noncopyable
{
public:
 ipc_request();
 virtual ~ipc_request();





 virtual void run(ipc_client* ipc);
# 50 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/ipc_service.hpp"
private:



};

class ipc_service : public ipc_server
{
public:







 ipc_service(int nthread, bool ipc_keep = true);

 virtual ~ipc_service();
# 87 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/ipc_service.hpp"
 ipc_client* peek_conn();





 void push_conn(ipc_client* conn);
protected:



 long long int magic_;






 void request(ipc_request* req);
private:
 bool ipc_keep_;
 acl_pthread_pool_t* thread_pool_;
# 124 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../ipc/ipc_service.hpp"
 locker lock_;
 std::list<ipc_client*> conn_pool_;
};

}
# 5 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/dns_service.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/aio_handle.hpp" 1
       

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp" 1
       







struct ACL_VSTRING;
struct ACL_LINE_STATE;

namespace acl {

class dbuf_pool;





class string {
public:







 string(size_t n, bool bin);
 explicit string(size_t n);
 string(void);






 string(const string& s);






 string(const char* s);






 string(const void* s, size_t n);
# 64 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 string(int fd, size_t max, size_t n, size_t offset = 0);


 ~string(void);
# 77 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 string& set_bin(bool bin);






 string& set_max(int max);





 bool get_bin() const;





 int get_max(void) const;
# 105 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 char operator[](size_t n) const;
# 114 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 char operator[](int n) const;







 char& operator[](size_t n);







 char& operator[](int n);






 string& operator=(const char* s);






 string& operator=(const string& s);






 string& operator=(const string* s);






 string& operator=(const std::string& s);






 string& operator=(const std::string* s);
# 188 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 string& operator=(long long int);
 string& operator=(unsigned long long int);
# 199 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 string& operator=(char n);
# 208 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 string& operator=(unsigned char n);
# 217 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 string& operator=(long n);
# 226 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 string& operator=(unsigned long n);
# 235 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 string& operator=(int n);
# 244 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 string& operator=(unsigned int n);
# 253 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 string& operator=(short n);
# 262 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 string& operator=(unsigned short n);






 string& operator+=(const char* s);






 string& operator+=(const string& s);






 string& operator+=(const string* s);






 string& operator+=(const std::string& s);






 string& operator+=(const std::string* s);
# 316 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 string& operator+=(long long int n);
 string& operator+=(unsigned long long int n);
# 326 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 string& operator+=(long n);







 string& operator+=(unsigned long n);







 string& operator+=(int n);







 string& operator+=(unsigned int n);







 string& operator+=(short n);







 string& operator+=(unsigned short n);







 string& operator+=(char n);







 string& operator+=(unsigned char n);






 string& operator<<(const string& s);






 string& operator<<(const string* s);






 string& operator<<(const std::string& s);






 string& operator<<(const std::string* s);






 string& operator<<(const char* s);
# 435 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 string& operator<<(long long int n);
 string& operator<<(unsigned long long int n);
# 445 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 string& operator<<(long n);







 string& operator<<(unsigned long n);







 string& operator<<(int n);







 string& operator<<(unsigned int n);







 string& operator<<(short n);







 string& operator<<(unsigned short n);







 string& operator<<(char n);







 string& operator<<(unsigned char n);






 size_t operator>>(string* s);






 size_t operator>>(string& s);






 size_t operator>>(std::string* s);






 size_t operator>>(std::string& s);
# 546 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 size_t operator>>(long long int&);
 size_t operator>>(unsigned long long int&);







 size_t operator>>(int& n);






 size_t operator>>(unsigned int& n);






 size_t operator>>(short& n);






 size_t operator>>(unsigned short& n);






 size_t operator>>(char& n);






 size_t operator>>(unsigned char& n);






 bool operator==(const string& s) const;






 bool operator==(const string* s) const;






 bool operator==(const char* s) const;






 bool operator!=(const string& s) const;






 bool operator!=(const string* s) const;






 bool operator!=(const char* s) const;







 bool operator<(const string& s) const;







 bool operator>(const string& s) const;





 size_t hash(void) const;





 operator const char*() const;





 operator const void*() const;





 operator const std::string() const;







 string& push_back(char ch, bool term = true);
 string& push_back(unsigned char ch, bool term = true);





 string& terminate(void);







 bool equal(const string& s, bool case_sensitive = true) const;







 bool begin_with(const char* s, bool case_sensitive = true) const;
 bool begin_with(const char* s, size_t len, bool case_sensitive = true) const;
 bool begin_with(const string& s, bool case_sensitive = true) const;
 bool begin_with(const void* v, size_t len) const;







 bool end_with(const char* s, bool case_sensitive = true) const;
 bool end_with(const char* s, size_t len, bool case_sensitive = true) const;
 bool end_with(const string& s, bool case_sensitive = true) const;
 bool end_with(const void* v, size_t len) const;







 int compare(const string& s) const;







 int compare(const string* s) const;
# 742 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 int compare(const char* s, bool case_sensitive = true) const;
# 753 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 int compare(const void* ptr, size_t len) const;
# 763 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 int ncompare(const char* s, size_t len, bool case_sensitive = true) const;
# 775 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 int rncompare(const char* s, size_t len, bool case_sensitive = true) const;
# 788 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 int find_blank_line(int* left_count = 
# 788 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp" 3 4
                                      __null
# 788 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
                                          , string* buf = 
# 788 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp" 3 4
                                                          __null
# 788 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
                                                              );






 string& find_reset(void);






 int find(char n) const;







 char* find(const char* needle, bool case_sensitive=true) const;







 char* rfind(const char* needle, bool case_sensitive=true) const;
# 827 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 string left(size_t n);
# 836 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 string right(size_t n);
# 846 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 size_t scan_buf(void* buf, size_t size, bool move = false);
# 861 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 bool scan_line(string& out, bool nonl = true, size_t* n = 
# 861 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp" 3 4
                                                          __null
# 861 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
                                                              ,
  bool move = false);






 size_t scan_move();





 char* buf_end(void);





 void* buf() const;





 char* c_str() const;





 size_t length() const;





 size_t size() const;





 size_t capacity() const;





 bool empty() const;





 ACL_VSTRING* vstring(void) const;







 string& set_offset(size_t n);






 string& space(size_t n);
 string& reserve(size_t n);
# 943 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 std::list<string>& split(const char* sep, bool quoted = false);
# 953 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 std::vector<string>& split2(const char* sep, bool quoted = false);
# 962 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 std::pair<string, string>& split_nameval(void);






 string& copy(const char* ptr);







 string& copy(const void* ptr, size_t len);







 string& memmove(const char* src);
# 994 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 string& memmove(const char* src, size_t len);






 string& append(const string& s);






 string& append(const string* s);






 string& append(const char* s);







 string& append(const void* ptr, size_t len);






 string& prepend(const char* s);







 string& prepend(const void* ptr, size_t len);
# 1047 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 string& insert(size_t start, const void* ptr, size_t len);







 string& format(const char* fmt, ...) __attribute__((__format__ (__printf__, (2), (3))));







 string& vformat(const char* fmt, va_list ap);







 string& format_append(const char* fmt, ...) __attribute__((__format__ (__printf__, (2), (3))));







 string& vformat_append(const char* fmt, va_list ap);







 string& replace(char from, char to);







 string& truncate(size_t n);
# 1109 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 string& strip(const char* needle, bool each = false);





 string& trim_left_space();





 string& trim_right_space();





 string& trim_space();





 string& trim_left_line();





 string& trim_right_line();





 string& trim_line();





 string& clear();





 string& lower(void);





 string& upper(void);
# 1174 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 size_t substr(string& out, size_t p = 0, size_t len = 0) const;





 string& base64_encode(void);







 string& base64_encode(const void* ptr, size_t len);







 string& base64_decode(void);







 string& base64_decode(const char* s);
# 1213 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 string& base64_decode(const void* ptr, size_t len);
# 1223 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 string& url_encode(const char* s, dbuf_pool* dbuf = 
# 1223 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp" 3 4
                                                    __null
# 1223 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
                                                        );
# 1232 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 string& url_decode(const char* s, dbuf_pool* dbuf = 
# 1232 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp" 3 4
                                                    __null
# 1232 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
                                                        );







 string& hex_encode(const void* s, size_t len);







 string& hex_decode(const char* s, size_t len);






 string& basename(const char* path);






 string& dirname(const char* path);






 static string& parse_int(int n);






 static string& parse_int(unsigned int n);
# 1286 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 static string& parse_int64(long long int n);






 static string& parse_int64(unsigned long long int n);
# 1302 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
 template<typename T>
 string operator+(T v) {
  string s(*this);
  s += v;
  return s;
 }

private:
 ACL_VSTRING* vbf_;
 char* scan_ptr_;
 std::list<string>* list_tmp_;
 std::vector<string>* vector_tmp_;
 std::pair<string, string>* pair_tmp_;
 ACL_LINE_STATE* line_state_;
 int line_state_offset_;
 bool use_bin_;

 void init(size_t len);
};







template<typename T>
string operator+(T v, const string& rhs) {
 string s;
 s = v;
 s += rhs;
 return s;
}
# 1344 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/../stdlib/string.hpp"
}



namespace std {
template <>
struct hash<acl::string> {
 size_t operator()(const acl::string& key) const {
  return key.hash();
 }
};
}
# 4 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/aio_handle.hpp" 2


struct ACL_AIO;
struct ACL_EVENT;

namespace acl {


typedef enum {
 ENGINE_SELECT,
 ENGINE_POLL,
 ENGINE_KERNEL,
 ENGINE_WINMSG
} aio_handle_type;





class aio_timer_callback;
class aio_delay_free;
class aio_timer_delay_free;

class aio_handle : private noncopyable {
public:
# 41 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/aio_handle.hpp"
 aio_handle(aio_handle_type engine_type = ENGINE_SELECT,
  unsigned int nMsg = 0);






 aio_handle(ACL_AIO* handle);

 virtual ~aio_handle(void);







 void keep_read(bool onoff);





 bool keep_read(void) const;
# 78 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/aio_handle.hpp"
 long long int set_timer(aio_timer_callback* callback,
  long long int delay, unsigned int id = 0);
# 90 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/aio_handle.hpp"
 long long int del_timer(aio_timer_callback* callback);
# 102 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/aio_handle.hpp"
 long long del_timer(aio_timer_callback* callback, unsigned int id);
# 112 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/aio_handle.hpp"
 void delay_free(aio_delay_free* callback);





 ACL_AIO* get_handle(void) const;





 aio_handle_type get_engine_type(void) const;





 int length(void) const;





 bool check(void);





 int last_nready(void) const;




 void stop(void);




 void reset(void);







 void set_dns(const char* addrs, int timeout);
 void dns_add(const char* addrs, int timeout);





 void dns_del(const char* addrs);




 void dns_clear(void);





 size_t dns_size(void) const;





 bool dns_empty(void) const;





 void dns_list(std::vector<std::pair<string, unsigned short> >& out);

public:





 void set_delay_sec(int n);






 void set_delay_usec(int n);





 void set_check_inter(int n);





 void set_rbuf_size(int n);

protected:
 friend class aio_stream;




 void increase(void);




 virtual void on_increase(void) {}




 void decrease(void);




 virtual void on_decrease(void) {}

private:
 ACL_AIO* aio_;
 bool inner_alloc_;
 bool stop_;
 int nstream_;
 aio_handle_type engine_type_;
 aio_timer_delay_free* delay_free_timer_;

 void destroy_timer(aio_timer_callback* callback);
 static void on_timer_callback(int event_type, ACL_EVENT*,
  aio_timer_callback *callback);
};

}
# 6 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/dns_service.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/../stream/aio_delay_free.hpp" 1
       



namespace acl {





class aio_delay_free : public noncopyable {
public:
 aio_delay_free(void);
 virtual ~aio_delay_free(void);







 bool locked(void) const;





 void set_locked(void);




 void unset_locked(void);





 virtual void destroy(void) {}

private:
 bool locked_;
 bool locked_fixed_;
};

}
# 7 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/dns_service.hpp" 2


namespace acl
{

class dns_res
{
public:
 dns_res(const char* domain) : domain_(domain) {}
 ~dns_res() { ips_.clear(); }

 string domain_;
 std::list<string> ips_;
protected:
private:
};

class dns_result_callback
{
public:
 dns_result_callback(const char* domain) : domain_(domain) {}







 virtual void destroy(void) {}
# 46 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/dns_service.hpp"
 virtual void on_result(const char* domain, const dns_res& res) = 0;




 const string& get_domain() const { return (domain_); }
protected:
 virtual ~dns_result_callback() {}
private:
 string domain_;
};

class ipc_client;

class dns_service
 : public ipc_service
 , public aio_delay_free
{
public:
# 73 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/dns_service.hpp"
 dns_service(int nthread = 1, bool win32_gui = false);
 ~dns_service();






 void lookup(dns_result_callback* callback);






 void on_result(const dns_res& res);
protected:




 virtual void on_accept(aio_socket_stream* client);
# 106 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/dns_service.hpp"
private:
 std::list<dns_result_callback*> callbacks_;
};

}
# 11 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/final_tpl.hpp" 1
       


namespace acl {
# 17 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/final_tpl.hpp"
template <typename T>
class identity
{
public:
 typedef T me;
};

template<typename TDerive, typename TProvider>
class final_tpl_base
{
 friend class identity<TDerive>::me;
 friend class identity<TProvider>::me;
private:
 final_tpl_base() {}
 ~final_tpl_base() {}
};
# 47 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/final_tpl.hpp"
template<typename TFinalClass>
class final_tpl : virtual public final_tpl_base<TFinalClass,
 final_tpl<TFinalClass> >
{
public:
 final_tpl() {}
 ~final_tpl() {}
};

}
# 12 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp" 1
       



# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/dbuf_pool.hpp" 1
       




struct ACL_DBUF_POOL;

namespace acl
{







class dbuf_pool
{
public:



 dbuf_pool();





 void destroy();







 void *operator new(size_t size, size_t nblock = 2);




 void operator delete(void* ptr);







 bool dbuf_reset(size_t reserve = 0);
# 59 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/dbuf_pool.hpp"
 void* dbuf_alloc(size_t len);






 void* dbuf_calloc(size_t len);






 char* dbuf_strdup(const char* s);







 char* dbuf_strndup(const char* s, size_t len);







 void* dbuf_memdup(const void* addr, size_t len);






 bool dbuf_free(const void* addr);






 bool dbuf_keep(const void* addr);






 bool dbuf_unkeep(const void* addr);





 ACL_DBUF_POOL *get_dbuf()
 {
  return pool_;
 }

private:
 ACL_DBUF_POOL* pool_;
 size_t mysize_;

public:
 ~dbuf_pool();
};
# 156 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/dbuf_pool.hpp"
class dbuf_guard;




class dbuf_obj
{
public:






 dbuf_obj(dbuf_guard* guard = 
# 170 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/dbuf_pool.hpp" 3 4
                             __null
# 170 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/dbuf_pool.hpp"
                                 );

 virtual ~dbuf_obj() {}






 int pos() const
 {
  return pos_;
 }





 dbuf_guard* get_guard() const
 {
  return guard_;
 }

private:
 friend class dbuf_guard;


 dbuf_guard* guard_;


 int nrefer_;


 int pos_;
};





class dbuf_guard
{
public:






 dbuf_guard(dbuf_pool* dbuf, size_t capacity = 500);







 dbuf_guard(size_t nblock = 2, size_t capacity = 500);




 ~dbuf_guard();






 bool dbuf_reset(size_t reserve = 0);






 void* dbuf_alloc(size_t len)
 {
  return dbuf_->dbuf_alloc(len);
 }






 void* dbuf_calloc(size_t len)
 {
  return dbuf_->dbuf_calloc(len);
 }






 char* dbuf_strdup(const char* s)
 {
  return dbuf_->dbuf_strdup(s);
 }







 char* dbuf_strndup(const char* s, size_t len)
 {
  return dbuf_->dbuf_strndup(s, len);
 }







 void* dbuf_memdup(const void* addr, size_t len)
 {
  return dbuf_->dbuf_memdup(addr, len);
 }






 bool dbuf_free(const void* addr)
 {
  return dbuf_->dbuf_free(addr);
 }






 bool dbuf_keep(const void* addr)
 {
  return dbuf_->dbuf_keep(addr);
 }






 bool dbuf_unkeep(const void* addr)
 {
  return dbuf_->dbuf_unkeep(addr);
 }





 acl::dbuf_pool& get_dbuf() const
 {
  return *dbuf_;
 }
# 341 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/dbuf_pool.hpp"
 int push_back(dbuf_obj* obj);





 size_t size() const
 {
  return size_;
 }






 dbuf_obj* operator[](size_t pos) const;






 dbuf_obj* get(size_t pos) const;





 void set_increment(size_t incr);

public:
 template <typename T>
 T* create()
 {
  T* t = new (dbuf_alloc(sizeof(T))) T();
  (void) push_back(t);
  return t;
 }

 template <typename T, typename P1>
 T* create(P1 p)
 {
  T* t = new (dbuf_alloc(sizeof(T))) T(p);
  (void) push_back(t);
  return t;
 }

 template <typename T, typename P1, typename P2>
 T* create(P1 p1, P2 p2)
 {
  T* t = new (dbuf_alloc(sizeof(T))) T(p1, p2);
  (void) push_back(t);
  return t;
 }

 template <typename T, typename P1, typename P2, typename P3>
 T* create(P1 p1, P2 p2, P3 p3)
 {
  T* t = new (dbuf_alloc(sizeof(T))) T(p1, p2, p3);
  (void) push_back(t);
  return t;
 }

 template <typename T, typename P1, typename P2, typename P3,
   typename P4>
 T* create(P1 p1, P2 p2, P3 p3, P4 p4)
 {
  T* t = new (dbuf_alloc(sizeof(T))) T(p1, p2, p3, p4);
  (void) push_back(t);
  return t;
 }

 template <typename T, typename P1, typename P2, typename P3,
   typename P4, typename P5>
 T* create(P1 p1, P2 p2, P3 p3, P4 p4, P5 p5)
 {
  T* t = new (dbuf_alloc(sizeof(T))) T(p1, p2, p3, p4, p5);
  (void) push_back(t);
  return t;
 }

 template <typename T, typename P1, typename P2, typename P3,
   typename P4, typename P5, typename P6>
 T* create(P1 p1, P2 p2, P3 p3, P4 p4, P5 p5, P6 p6)
 {
  T* t = new (dbuf_alloc(sizeof(T))) T(p1, p2, p3, p4, p5, p6);
  (void) push_back(t);
  return t;
 }

 template <typename T, typename P1, typename P2, typename P3,
   typename P4, typename P5, typename P6, typename P7>
 T* create(P1 p1, P2 p2, P3 p3, P4 p4, P5 p5, P6 p6, P7 p7)
 {
  T* t = new (dbuf_alloc(sizeof(T)))
   T(p1, p2, p3, p4, p5, p6, p7);
  (void) push_back(t);
  return t;
 }

 template <typename T, typename P1, typename P2, typename P3,
   typename P4, typename P5, typename P6, typename P7,
   typename P8>
 T* create(P1 p1, P2 p2, P3 p3, P4 p4, P5 p5, P6 p6, P7 p7, P8 p8)
 {
  T* t = new (dbuf_alloc(sizeof(T)))
   T(p1, p2, p3, p4, p5, p6, p7, p8);
  (void) push_back(t);
  return t;
 }

 template <typename T, typename P1, typename P2, typename P3,
   typename P4, typename P5, typename P6, typename P7,
   typename P8,typename P9>
 T* create(P1 p1, P2 p2, P3 p3, P4 p4, P5 p5, P6 p6, P7 p7,
  P8 p8, P9 p9)
 {
  T* t = new (dbuf_alloc(sizeof(T)))
   T(p1, p2, p3, p4, p5, p6, p7, p8, p9);
  (void) push_back(t);
  return t;
 }

 template <typename T, typename P1, typename P2, typename P3,
   typename P4, typename P5, typename P6, typename P7,
   typename P8, typename P9, typename P10>
 T* create(P1 p1, P2 p2, P3 p3, P4 p4, P5 p5, P6 p6, P7 p7,
  P8 p8, P9 p9, P10 p10)
 {
  T* t = new (dbuf_alloc(sizeof(T)))
   T(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
  (void) push_back(t);
  return t;
 }

private:
 size_t nblock_;
 size_t incr_;

 dbuf_pool* dbuf_;





 struct dbuf_objs_link
 {
  dbuf_obj** objs;
  size_t size;
  size_t capacity;

  struct dbuf_objs_link* next;
 };

 dbuf_objs_link head_;
 dbuf_objs_link* curr_;
 size_t size_;

 void init(size_t capacity);


 void extend_objs();
};
# 594 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/dbuf_pool.hpp"
}
# 6 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/pipe_stream.hpp" 1
       





namespace acl {





class pipe_stream : public noncopyable
{
public:
 pipe_stream() {}
 virtual ~pipe_stream() {}
# 28 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/pipe_stream.hpp"
 virtual int push_pop(const char* in, size_t len,
  string* out, size_t max = 0) = 0;
# 38 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/pipe_stream.hpp"
 virtual int pop_end(string* out, size_t max = 0) = 0;




 virtual void clear() {}
};




class pipe_string : public pipe_stream
{
public:
 pipe_string();
 pipe_string(string& s);
 virtual ~pipe_string();


 virtual int push_pop(const char* in, size_t len,
  string* out, size_t max = 0);
 virtual int pop_end(string* out, size_t max = 0);
 virtual void clear()
 {
  m_pBuf->clear();
  m_pos = 0;
 }

 string& get_buf() const
 {
  return (*m_pBuf);
 }

 char* c_str() const
 {
  return (m_pBuf->c_str());
 }

 size_t length() const
 {
  return (m_pBuf->length());
 }

 bool empty() const
 {
  return (m_pBuf->empty());
 }

private:
 string* m_pBuf;
 string* m_pSavedBufPtr;
 size_t m_pos;
};






class pipe_manager : public noncopyable
{
public:
 pipe_manager();
 ~pipe_manager();






 bool push_back(pipe_stream* stream);






 bool push_front(pipe_stream* stream);
# 126 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/pipe_stream.hpp"
 bool update(const char* src, size_t len, pipe_stream* out = 
# 126 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/pipe_stream.hpp" 3 4
                                                            __null
# 126 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/pipe_stream.hpp"
                                                                );
# 135 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/pipe_stream.hpp"
 bool update_end(pipe_stream* out = 
# 135 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/pipe_stream.hpp" 3 4
                                   __null
# 135 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/pipe_stream.hpp"
                                       );

 pipe_manager& operator<<(const string&);
 pipe_manager& operator<<(const string*);
 pipe_manager& operator<<(const char*);




 pipe_manager& operator<<(long long int);
 pipe_manager& operator<<(unsigned long long int);

 pipe_manager& operator<<(long);
 pipe_manager& operator<<(unsigned long);
 pipe_manager& operator<<(int);
 pipe_manager& operator<<(unsigned int);
 pipe_manager& operator<<(short);
 pipe_manager& operator<<(unsigned short);
 pipe_manager& operator<<(char);
 pipe_manager& operator<<(unsigned char);

 char* c_str() const;
 size_t length() const;
 void clear();

private:
 std::list<pipe_stream*> m_streams;
 string* m_pBuf1, *m_pBuf2;
 pipe_string* m_pPipeStream;
};

}
# 7 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp" 2

struct ACL_JSON_NODE;
struct ACL_JSON;
struct ACL_ITER;
# 19 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
namespace acl {

class string;
class json;




class json_node : public dbuf_obj
{
public:





 const char* tag_name(void) const;






 const char* get_text(void) const;






 json_node* get_obj(void) const;





 const char* get_string(void) const;
# 64 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 const long long int* get_int64(void) const;






 const double *get_double(void) const;





 const bool* get_bool(void) const;





 bool is_string(void) const;





 bool is_number(void) const;





 bool is_double(void) const;





 bool is_bool(void) const;





 bool is_null(void) const;





 bool is_object(void) const;





 bool is_array(void) const;





 const char* get_type(void) const;






 bool set_tag(const char* name);






 bool set_text(const char* text);






 const string& to_string(string* out = 
# 146 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp" 3 4
                                      __null
# 146 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
                                          ) const;
# 157 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node& add_child(json_node* child, bool return_child = false);
# 166 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node& add_child(json_node& child, bool return_child = false);
# 175 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node& add_child(bool as_array = false, bool return_child = false);
 json_node& add_array(bool return_child = false);
# 185 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node& add_child(const char* tag, bool return_child = false);
# 195 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node& add_child(const char* tag, json_node* node,
  bool return_child = false);
# 206 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node& add_child(const char* tag, json_node& node,
  bool return_child = false);
# 218 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node& add_text(const char* tag, const char* value,
  bool return_child = false);
# 233 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node& add_number(const char* tag, long long int value,
  bool return_child = false);
# 245 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node& add_double(const char* tag, double value,
  bool return_child = false);
# 257 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node& add_double(const char* tag, double value, int precision,
  bool return_child = false);
# 268 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node& add_bool(const char* tag, bool value,
  bool return_child = false);
# 278 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node& add_null(const char* tag, bool return_child = false);
# 287 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node& add_array_text(const char* text,
  bool return_child = false);
# 301 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node& add_array_number(long long int value,
  bool return_child = false);
# 312 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node& add_array_double(double value, bool return_child = false);
# 321 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node& add_array_bool(bool value, bool return_child = false);







 json_node& add_array_null(bool return_child = false);





 json_node& get_parent(void) const;
# 344 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node* first_child(void);






 json_node* next_child(void);






 json_node* operator[] (const char* tag);





 int depth(void) const;





 int children_count(void) const;





 int detach(void);







 void clear(void);





 json& get_json(void) const;





 ACL_JSON_NODE* get_json_node(void) const;

private:
 friend class json;
 friend class dbuf_guard;





 json_node(ACL_JSON_NODE* node, json* json_ptr);




 ~json_node(void);





 void set_json_node(ACL_JSON_NODE* node);

private:
 ACL_JSON_NODE* node_me_;
 json* json_;
 dbuf_guard* dbuf_;
 json_node* parent_;
 ACL_ITER* iter_;
 string* buf_;
 json_node* obj_;

 union {



  long long int n;

  bool b;
  double d;
 } node_val_;
};

class json : public pipe_stream, public dbuf_obj
{
public:
# 452 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json(const char* data = 
# 452 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp" 3 4
                        __null
# 452 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
                            , dbuf_guard* dbuf = 
# 452 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp" 3 4
                                                 __null
# 452 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
                                                     );







 json(const json_node& node, dbuf_guard* dbuf = 
# 460 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp" 3 4
                                               __null
# 460 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
                                                   );

 ~json(void);






 json& part_word(bool on);
# 479 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 const char* update(const char* data);





 bool finish(void);






 void reset(void);
# 502 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node* getFirstElementByTagName(const char* tag) const;
# 512 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node* operator[](const char* tag) const;
# 523 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 const std::vector<json_node*>&
  getElementsByTagName(const char* tag) const;
# 544 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 const std::vector<json_node*>&
  getElementsByTags(const char* tags) const;
# 561 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node* getFirstElementByTags(const char* tags) const;






 ACL_JSON* get_json(void) const;
# 581 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node& create_node(const char* tag, const char* value);
# 595 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node& create_node(const char* tag, long long int value);
# 608 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node& create_double(const char* tag, double value, int precision = 4);
# 619 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node& create_node(const char* tag, bool value);
# 629 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node& create_null(const char* tag);
# 639 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node& create_array_text(const char* text);
# 652 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node& create_array_number(long long int value);
# 663 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node& create_array_double(double value);
# 673 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node& create_array_bool(bool value);
# 682 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node& create_array_null(void);
# 692 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node& create_node(bool as_array = false);
 json_node& create_array(void);
# 704 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node& create_node(const char* tag, json_node* node);
# 715 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node& create_node(const char* tag, json_node& node);
# 725 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
 json_node& duplicate_node(const json_node* node);







 json_node& duplicate_node(const json_node& node);





 json_node& get_root(void);







 json_node* first_node(void);







 json_node* next_node(void);






 void build_json(string& out, bool add_space = false) const;







 const string& to_string(string* out = 
# 770 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp" 3 4
                                      __null
# 770 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/json.hpp"
                                          , bool add_space = false) const;





 dbuf_guard* get_dbuf(void) const {
  return dbuf_;
 }



 virtual int push_pop(const char* in, size_t len,
  string* out, size_t max = 0);
 virtual int pop_end(string* out, size_t max = 0);
 virtual void clear(void);

private:

 dbuf_guard* dbuf_;
 dbuf_guard* dbuf_internal_;


 ACL_JSON *json_;

 json_node* root_;

 std::vector<json_node*> nodes_query_;

 string* buf_;
 ACL_ITER* iter_;
};

}
# 13 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/log.hpp" 1
       
# 57 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/log.hpp"
namespace acl {

class string;

class log
{
public:
# 76 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/log.hpp"
 static void open(const char* recipients, const char* procname = "unknown",
  const char* cfg = 
# 77 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/log.hpp" 3 4
                   __null
# 77 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/log.hpp"
                       );




 static void close(void);







 static void debug_init(const char* cfg);






 static void stdout_open(bool onoff);





 static void __attribute__((__format__ (__printf__, (1), (2)))) msg1(const char* fmt, ...);
 static void __attribute__((__format__ (__printf__, (4), (5)))) msg4(const char* fname,
  int line, const char* func, const char* fmt, ...);
 static void __attribute__((__format__ (__printf__, (3), (4)))) msg3(size_t section,
  size_t level, const char* fmt, ...);
 static void __attribute__((__format__ (__printf__, (6), (7)))) msg6(size_t section, size_t level,
  const char* fname, int line, const char* func, const char* fmt, ...);

 static void __attribute__((__format__ (__printf__, (1), (2)))) warn1(const char* fmt, ...);
 static void __attribute__((__format__ (__printf__, (4), (5)))) warn4(const char* fname, int line,
  const char* func, const char* fmt, ...);

 static void __attribute__((__format__ (__printf__, (1), (2)))) error1(const char* fmt, ...);
 static void __attribute__((__format__ (__printf__, (4), (5)))) error4(const char* fname, int line,
  const char* func, const char* fmt, ...);

 static void __attribute__((__format__ (__printf__, (1), (2)))) fatal1(const char* fmt, ...);
 static void __attribute__((__format__ (__printf__, (4), (5)))) fatal4(const char* fname, int line,
  const char* func, const char* fmt, ...);

 static void vmsg2(const char* fmt, va_list ap);
 static void vmsg5(const char* fname, int line, const char* func,
  const char* fmt, va_list ap);
 static void vmsg4(size_t section, size_t level, const char* fmt, va_list ap);
 static void vmsg7(size_t section, size_t level, const char* fname,
  int line, const char* func, const char* fmt, va_list ap);

 static void vwarn2(const char* fmt, va_list ap);
 static void vwarn5(const char* fname, int line, const char* func,
  const char* fmt, va_list ap);

 static void verror2(const char* fmt, va_list ap);
 static void verror5(const char* fname, int line, const char* func,
  const char* fmt, va_list ap);

 static void vfatal2(const char* fmt, va_list ap);
 static void vfatal5(const char* fname, int line, const char* func,
  const char* fmt, va_list ap);




 static void logger_test1(void)
 {





  const char* logfile = "test.log", *procname = "test";
  const char* cfg = "101:2; 102:3; 103:2";


  acl::log::open(logfile, procname, cfg);
# 180 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/log.hpp"
  acl::log::msg4("/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/log.hpp", 180, __FUNCTION__, "error(%s)!", "zsx");

  acl::log::msg6((100 + 1), 1, __FUNCTION__, 182, __FUNCTION__, "hello world11(%s)!", "zsx");
  acl::log::msg6((100 + 2), 3, __FUNCTION__, 183, __FUNCTION__, "hello world12(%s)!", "zsx");
  acl::log::msg6((100 + 3), 2, __FUNCTION__, 184, __FUNCTION__, "hello world13(%s)!", "zsx");



  acl::log::msg6((100 + 1), 3, __FUNCTION__, 188, __FUNCTION__, "hello world21(%s)!", "zsx");




  acl::log::close();
 }
 static void logger_test2(void)
 {
  acl::log::msg4("/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/log.hpp", 197, __FUNCTION__, "logger ok!");
  acl::log::warn4("/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/log.hpp", 198, __FUNCTION__, "logger_warn ok!");
  acl::log::error4("/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/log.hpp", 199, __FUNCTION__, "logger_error ok!");
  acl::log::fatal4("/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/log.hpp", 200, __FUNCTION__, "logger_fatal ok!");
 }
};

}
# 15 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2


# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/util.hpp" 1
       


namespace acl
{





 int last_error(void);





 void set_error(int errnum);






 const char* last_serror(void);







 const char* last_serror(char* buf, size_t size);
# 42 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/util.hpp"
 const char* string_error(int errnum, char* buf, size_t size);

 int strncasecmp_(const char *s1, const char *s2, size_t n);
 void assert_(bool n);
 void meter_time(const char *filename, int line, const char *info);
 long long get_curr_stamp(void);
 double stamp_sub(const struct timeval& from,
  const struct timeval& sub);

}
# 18 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml.hpp" 1
       







struct ACL_TOKEN;
struct ACL_ITER;
# 19 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml.hpp"
namespace acl {

class xml;
class xml_node;
class istream;

class xml_attr : public dbuf_obj
{
public:





 virtual const char* get_name(void) const = 0;






 virtual const char* get_value(void) const = 0;

protected:
 friend class xml_node;

 xml_attr(xml_node* node) : node_(node) {}
 virtual ~xml_attr(void) {}

 xml_node* node_;
};

class xml_node : public dbuf_obj
{
public:





 virtual const char* tag_name(void) const = 0;





 virtual const char* id(void) const = 0;





 virtual const char* text(void) const = 0;






 virtual const char* attr_value(const char* name) const = 0;






 const char* operator[](const char* name) const;






 virtual const xml_attr* first_attr(void) const = 0;






 virtual const xml_attr* next_attr(void) const = 0;







 virtual xml_node& add_attr(const char* name, const char* value) = 0;







 xml_node& add_attr(const char* name, char n);







 xml_node& add_attr(const char* name, int n);







 xml_node& add_attr(const char* name, size_t n);
# 142 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml.hpp"
 xml_node& add_attr(const char* name, long long int n);
# 152 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml.hpp"
 virtual xml_node& set_text(const char* str, bool append = false) = 0;
# 161 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml.hpp"
 virtual xml_node& set_text(istream& in, size_t off = 0,
  size_t len = 0) = 0;
# 172 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml.hpp"
 xml_node& set_text(long long int number);
# 182 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml.hpp"
 virtual xml_node& add_child(xml_node* child,
  bool return_child = false) = 0;
# 192 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml.hpp"
 xml_node& add_child(xml_node& child, bool return_child = false);
# 202 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml.hpp"
 xml_node& add_child(const char* tag, bool return_child = false,
  const char* str = 
# 203 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml.hpp" 3 4
                   __null
# 203 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml.hpp"
                       );
# 213 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml.hpp"
 xml_node& add_child(const char* tag, const char* txt,
  bool return_child = false);
# 228 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml.hpp"
 xml_node& add_child(const char* tag, long long int number,
  bool return_child = false);
# 242 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml.hpp"
 xml_node& add_child(const char* tag, istream& in,
  size_t off = 0, size_t len = 0, bool return_child = false);





 virtual xml_node& get_parent(void) const = 0;






 virtual xml_node& set_parent(xml_node* node) = 0;





 virtual int detach(void) = 0;





 virtual xml_node* first_child(void) = 0;





 virtual xml_node* next_child(void) = 0;





 virtual int depth(void) const = 0;





 virtual bool is_root(void) const = 0;





 virtual int children_count(void) const = 0;







 void clear(void);





 xml& get_xml(void) const;

protected:
 friend class xml;
 friend class dbuf_guard;





 xml_node(xml* xml_ptr);




 virtual ~xml_node(void);

protected:
 xml* xml_;
 std::vector<xml_node*> nodes_tmp_;
 std::vector<xml_attr*> attrs_tmp_;
};

class string;

class xml : public pipe_stream, public dbuf_obj
{
public:




 xml(size_t dbuf_nblock = 2, size_t dbuf_capacity = 100);
 virtual ~xml(void);






 virtual xml& ignore_slash(bool on) = 0;






 virtual xml& xml_decode(bool on) = 0;






 virtual xml& xml_encode(bool on) = 0;






 virtual xml& xml_multi_root(bool on) = 0;
# 378 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml.hpp"
 virtual const char* update(const char* data) = 0;







 virtual bool complete(const char* root_tag) = 0;






 virtual void reset(void) = 0;






 virtual const string& getText(void);
# 410 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml.hpp"
 virtual const std::vector<xml_node*>&
  getElementsByTagName(const char* tag) const = 0;






 virtual xml_node* getFirstElementByTag(const char* tag) const = 0;
# 432 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml.hpp"
 virtual const std::vector<xml_node*>&
  getElementsByTags(const char* tags) const = 0;
# 444 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml.hpp"
 virtual xml_node* getFirstElementByTags(const char* tags) const = 0;
# 454 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml.hpp"
 virtual const std::vector<xml_node*>&
  getElementsByName(const char* value) const = 0;
# 464 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml.hpp"
 virtual const std::vector<xml_node*>& getElementsByAttr(
  const char* name, const char* value) const = 0;







 virtual xml_node* getElementById(const char* id) const = 0;
# 483 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml.hpp"
 virtual xml_node& create_node(const char* tag,
  const char* txt = 
# 484 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml.hpp" 3 4
                   __null
# 484 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml.hpp"
                       ) = 0;
# 496 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml.hpp"
 virtual xml_node& create_node(const char* tag, istream& in,
  size_t off = 0, size_t len = 0) = 0;
# 510 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml.hpp"
 xml_node& create_node(const char* tag, long long int number);







 virtual xml_node& get_root(void) = 0;







 virtual xml_node* first_node(void) = 0;







 virtual xml_node* next_node(void) = 0;





 virtual void build_xml(string& out) const { (void) out; };






 virtual const char* to_string(size_t* len = 
# 547 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml.hpp" 3 4
                                            __null
# 547 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml.hpp"
                                                ) const = 0;





 virtual size_t space(void) const = 0;




 virtual void space_clear(void) = 0;





 virtual size_t node_count(void) const = 0;





 virtual size_t attr_count(void) const = 0;

public:


 virtual int push_pop(const char* in, size_t len,
  string* out, size_t max = 0);
 virtual int pop_end(string* out, size_t max = 0);
 virtual void clear(void);

protected:
 dbuf_guard dbuf_;
 std::vector<xml_node*> elements_;
 string* buf_;


 ACL_TOKEN* m_pTokenTree;

};

}
# 19 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml1.hpp" 1
       







struct ACL_XML;
struct ACL_XML_NODE;
struct ACL_XML_ATTR;
# 20 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml1.hpp"
namespace acl {

class xml1;
class xml1_node;

class xml1_attr : public xml_attr
{
public:



 const char* get_name(void) const;




 const char* get_value(void) const;

protected:
 friend class xml1_node;

 xml1_attr(xml_node* node, ACL_XML_ATTR* attr);
 ~xml1_attr(void) {}

private:
 ACL_XML_ATTR* attr_;
};

class xml1_node : public xml_node
{
public:



 const char* tag_name(void) const;




 const char* id(void) const;




 const char* text(void) const;




 const char* attr_value(const char* name) const;




 const xml_attr* first_attr(void) const;




 const xml_attr* next_attr(void) const;




 xml_node& add_attr(const char* name, const char* value);




 xml_node& set_text(const char* str, bool append = false);




 xml_node& set_text(istream& in, size_t off = 0, size_t len = 0);




 xml_node& add_child(xml_node* child, bool return_child = false);




 int detach(void);




 xml_node& set_parent(xml_node* node);




 xml_node& get_parent(void) const;




 xml_node* first_child(void);




 xml_node* next_child(void);




 int depth(void) const;




 bool is_root(void) const;




 int children_count(void) const;

public:




 ACL_XML_NODE* get_xml_node(void) const;

protected:
 friend class xml1;
 friend class dbuf_guard;






 xml1_node(xml* xml_ptr, ACL_XML_NODE* node);




 ~xml1_node(void);

private:
 ACL_XML_NODE *node_;
 ACL_ITER* child_iter_;
 ACL_ITER* attr_iter_;

 xml_node* parent_;
 xml1_node* parent_internal_;
};

class string;

class xml1 : public xml
{
public:
# 188 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml1.hpp"
 xml1(const char* data = 
# 188 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml1.hpp" 3 4
                        __null
# 188 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml1.hpp"
                            , size_t dbuf_nblock = 2,
  size_t dbuf_capacity = 100);
 ~xml1(void);




 xml& ignore_slash(bool on);




 xml& xml_decode(bool on);




 xml& xml_encode(bool on);




 xml& xml_multi_root(bool on);




 const char* update(const char* data);




 bool complete(const char* root_tag);




 void reset(void);




 const string& getText(void);




 const std::vector<xml_node*>&
  getElementsByTagName(const char* tag) const;




 xml_node* getFirstElementByTag(const char* tag) const;




 const std::vector<xml_node*>& getElementsByTags(const char* tags) const;




 xml_node* getFirstElementByTags(const char* tags) const;




 const std::vector<xml_node*>&
  getElementsByName(const char* value) const;




 const std::vector<xml_node*>& getElementsByAttr(
  const char* name, const char* value) const;




 xml_node* getElementById(const char* id) const;




 xml_node& create_node(const char* tag, const char* text = 
# 273 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml1.hpp" 3 4
                                                          __null
# 273 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml1.hpp"
                                                              );




 xml_node& create_node(const char* tag, istream& in,
  size_t off = 0, size_t len = 0);




 xml_node& get_root(void);




 xml_node* first_node(void);




 xml_node* next_node(void);




 void build_xml(string& out) const;




 const char* to_string(size_t* len = 
# 304 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml1.hpp" 3 4
                                    __null
# 304 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml1.hpp"
                                        ) const;




 size_t space(void) const;




 void space_clear(void);




 size_t node_count(void) const;




 size_t attr_count(void) const;

public:





 ACL_XML* get_xml(void) const
 {
  return xml_;
 }

private:
 ACL_XML *xml_;
 ACL_ITER* iter_;
 xml1_node* root_;
};

}
# 20 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml2.hpp" 1
       






struct ACL_XML2;
struct ACL_XML2_NODE;
struct ACL_XML2_ATTR;

namespace acl {

class xml2;
class xml2_node;

class xml2_attr : public xml_attr
{
public:



 const char* get_name() const;




 const char* get_value() const;

protected:
 friend class xml2_node;

 xml2_attr(xml_node* node, ACL_XML2_ATTR* attr);
 ~xml2_attr(void) {}

private:
 ACL_XML2_ATTR* attr_;
};

class xml2_node : public xml_node
{
public:



 const char* tag_name(void) const;




 const char* id(void) const;




 const char* text(void) const;




 const char* attr_value(const char* name) const;




 const xml_attr* first_attr(void) const;




 const xml_attr* next_attr(void) const;




 xml_node& add_attr(const char* name, const char* value);




 xml_node& set_text(const char* str, bool append = false);




 xml_node& set_text(istream& in, size_t off = 0, size_t len = 0);




 xml_node& add_child(xml_node* child, bool return_child = false);




 int detach(void);




 xml_node& set_parent(xml_node* node);




 xml_node& get_parent(void) const;




 xml_node* first_child(void);




 xml_node* next_child(void);




 int depth(void) const;




 bool is_root(void) const;




 int children_count(void) const;

public:
 void set_xml2_node(ACL_XML2_NODE* node);

 ACL_XML2_NODE* get_xml_node(void) const;

protected:
 friend class xml2;
 friend class dbuf_guard;

 xml2_node(xml* xml_ptr, ACL_XML2_NODE* node);
 ~xml2_node(void);

private:
 ACL_XML2_NODE *node_;
 ACL_ITER* child_iter_;
 ACL_ITER* attr_iter_;

 xml_node* parent_;
 xml2_node* parent_internal_;
};

class fstream;

class xml2 : public xml
{
public:
# 169 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml2.hpp"
 xml2(const char* filepath, size_t max_len, const char* data = 
# 169 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml2.hpp" 3 4
                                                              __null
# 169 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml2.hpp"
                                                                  ,
  size_t init_len = 8192, size_t dbuf_nblock = 2,
  size_t dbuf_capacity = 100);
# 184 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml2.hpp"
 xml2(fstream& fp, size_t max_len, const char* data = 
# 184 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml2.hpp" 3 4
                                                     __null
# 184 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml2.hpp"
                                                         ,
  size_t init_len = 8192, size_t dbuf_nblock = 2,
  size_t dbuf_capacity = 100);
# 204 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml2.hpp"
 xml2(int fd, size_t max_len, const char* data = 
# 204 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml2.hpp" 3 4
                                                __null
# 204 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml2.hpp"
                                                    ,
  size_t init_len = 8192, size_t dbuf_nblock = 2,
  size_t dbuf_capacity = 100);


 ~xml2(void);




 xml& ignore_slash(bool on);




 xml& xml_decode(bool on);




 xml& xml_encode(bool on);




 xml& xml_multi_root(bool on);




 const char* update(const char* data);




 bool complete(const char* root_tag);




 void reset(void);




 const string& getText(void);




 const std::vector<xml_node*>&
  getElementsByTagName(const char* tag) const;




 xml_node* getFirstElementByTag(const char* tag) const;




 const std::vector<xml_node*>&
  getElementsByTags(const char* tags) const;




 xml_node* getFirstElementByTags(const char* tags) const;




 const std::vector<xml_node*>&
  getElementsByName(const char* value) const;




 const std::vector<xml_node*>& getElementsByAttr(
  const char* name, const char* value) const;




 xml_node* getElementById(const char* id) const;




 xml_node& create_node(const char* tag, const char* text = 
# 293 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml2.hpp" 3 4
                                                          __null
# 293 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml2.hpp"
                                                              );




 xml_node& create_node(const char* tag, istream& in,
  size_t off = 0, size_t len = 0);




 xml_node& get_root(void);




 xml_node* first_node(void);




 xml_node* next_node(void);




 void build_xml(string& out) const;




 const char* to_string(size_t* len = 
# 324 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml2.hpp" 3 4
                                    __null
# 324 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/xml2.hpp"
                                        ) const;




 size_t space(void) const;




 void space_clear(void);




 size_t node_count(void) const;




 size_t attr_count(void) const;

public:
 ACL_XML2* get_xml2(void) const
 {
  return xml_;
 }

private:
 ACL_XML2* xml_;
 ACL_ITER* iter_;
 xml2_node* root_;
};

}
# 21 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/zlib_stream.hpp" 1
       



typedef struct z_stream_s z_stream;

namespace acl {





typedef enum
{
 zlib_default = -1,
 zlib_level0 = 0,
 zlib_best_speed = 1,
 zlib_level1 = zlib_best_speed,
 zlib_level2 = 2,
 zlib_level3 = 3,
 zlib_level4 = 4,
 zlib_level5 = 5,
 zlib_level6 = 6,
 zlib_level7 = 7,
 zlib_level8 = 8,
 zlib_best_compress = 9,
 zlib_level9 = zlib_best_compress
} zlib_level_t;





enum
{
 zlib_wbits_8 = 8,
 zlib_wbits_9 = 9,
 zlib_wbits_10 = 10,
 zlib_wbits_11 = 11,
 zlib_wbits_12 = 12,
 zlib_wbits_13 = 13,
 zlib_wbits_14 = 14,
 zlib_wbits_15 = 15,
};




typedef enum
{
 zlib_mlevel_1 = 1,
 zlib_mlevel_2 = 2,
 zlib_mlevel_3 = 3,
 zlib_mlevel_4 = 4,
 zlib_mlevel_5 = 5,
 zlib_mlevel_6 = 6,
 zlib_mlevel_7 = 7,
 zlib_mlevel_8 = 8,
 zlib_mlevel_9 = 9,
} zlib_mlevel_t;





typedef enum
{
 zlib_flush_off = 0,
 zlib_flush_partial = 1,
 zlib_flush_sync = 2,
 zlib_flush_full = 3,
 zlib_flush_finish = 4
} zlib_flush_t;

enum
{
 zlib_flags_zip_begin = 1,
 zlib_flags_zip_end = 1 << 1,
 zlib_flags_unzip_begin = 1 << 2,
 zlib_flags_unzip_end = 1 << 3,
};

class string;

class zlib_stream : public pipe_stream
{
public:
 zlib_stream(void);
 ~zlib_stream(void);
# 100 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/zlib_stream.hpp"
 bool zlib_compress(const char* in, int len, string* out,
  zlib_level_t level = zlib_default);
# 113 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/zlib_stream.hpp"
 bool zlib_uncompress(const char* in, int len, string* out,
  bool have_zlib_header = true, int wsize = 15);
# 136 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/zlib_stream.hpp"
 bool zip_begin(zlib_level_t level = zlib_default,
  int wbits = zlib_wbits_15,
  zlib_mlevel_t mlevel = zlib_mlevel_9);
# 160 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/zlib_stream.hpp"
 bool zip_update(const char* in, int len, string* out,
  zlib_flush_t flag = zlib_flush_off);







 bool zip_finish(string* out);





 bool zip_finished(void) const
 {
  return (zlib_flags_ & zlib_flags_zip_end) ? true : false;
 }





 bool zip_reset(void);
# 193 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/zlib_stream.hpp"
 unsigned crc32_update(unsigned n, const void* buf, size_t dlen);
# 205 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/zlib_stream.hpp"
 bool unzip_begin(bool have_zlib_header = true, int wsize = 15);
# 227 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/zlib_stream.hpp"
 bool unzip_update(const char* in, int len, string* out,
  zlib_flush_t flag = zlib_flush_off);







 bool unzip_finish(string* out);





 bool unzip_finished(void) const
 {
  return (zlib_flags_ & zlib_flags_unzip_end) ? true : false;
 }





 bool unzip_reset(void);





 z_stream* get_zstream(void) const
 {
  return zstream_;
 }




 static void set_loadpath(const char* path);





 static const char* get_loadpath(void);
# 281 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/zlib_stream.hpp"
 static bool zlib_load_once(void);



 bool pipe_zip_begin(zlib_level_t level = zlib_default,
  zlib_flush_t flag = zlib_flush_off);
 bool pipe_unzip_begin(zlib_flush_t flag = zlib_flush_off);



 virtual int push_pop(const char* in, size_t len,
  string* out, size_t max = 0);
 virtual int pop_end(string* out, size_t max = 0);
 virtual void clear(void);

private:
 z_stream* zstream_;
 bool finished_;
 bool is_compress_;
 unsigned zlib_flags_;
 zlib_flush_t flush_;

 bool update(int (*func)(z_stream*, int), zlib_flush_t flag,
  const char* in, int len, string* out);
 bool flush_out(int (*func)(z_stream*, int),
  zlib_flush_t flag, string* out);
};

}
# 22 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/md5.hpp" 1
       



namespace acl {

class istream;

class md5 : public noncopyable
{
public:
 md5(void);
 ~md5(void);







 md5& update(const void* dat, size_t len);





 md5& finish(void);





 md5& reset(void);





 const char* get_digest() const;






 const char* get_string() const;
# 58 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/md5.hpp"
 static const char* md5_digest(const void *dat, size_t dlen,
  const void *key, size_t klen, void* out, size_t size);
# 72 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/md5.hpp"
 static const char* md5_string(const void *dat, size_t dlen,
  const void *key, size_t klen, char* out, size_t size);
# 91 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/md5.hpp"
 static long long int md5_file(const char* path, const void *key,
  size_t klen, char* out, size_t size);
# 110 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/md5.hpp"
 static long long int md5_file(istream& in, const void *key,
  size_t klen, char* out, size_t size);
# 123 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/md5.hpp"
 static const char* hex_encode(const void *in, char* out, size_t size);

private:
 unsigned int buf_[4];
 unsigned int bytes_[2];
 unsigned int in_[16];

 unsigned char digest_[16];
 unsigned char digest_s_[33];
};

}
# 23 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/sha1.hpp" 1
# 24 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/sha1.hpp"
       


namespace acl
{

class sha1 : public noncopyable
{
public:
 sha1();
 virtual ~sha1();




 void reset();




 bool result(unsigned char *message_digest_array);
 bool result2(unsigned *message_digest_array);




 void input(const unsigned char *message_array, unsigned length);
 void input(const char *message_array, unsigned length);
 void input(unsigned char message_element);
 void input(char message_element);
 sha1& operator<<(const char *message_array);
 sha1& operator<<(const unsigned char *message_array);
 sha1& operator<<(const char message_element);
 sha1& operator<<(const unsigned char message_element);

private:



 void process_message_block();




 void pad_message();




 inline unsigned circular_shift(int bits, unsigned word);

 unsigned h_[5];

 unsigned length_low_;
 unsigned length_high_;

 unsigned char message_block_[64];
 int message_block_index_;

 bool computed_;
 bool corrupted_;
};

}
# 24 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/charset_conv.hpp" 1
       





struct ACL_VSTRING;

namespace acl {

class charset_conv : public pipe_stream
{
public:
 charset_conv(void);
 ~charset_conv(void);






 void set_add_invalid(bool onoff);
# 33 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/charset_conv.hpp"
 bool convert(const char* fromCharset, const char* toCharset,
  const char* in, size_t n, string* out);





 const char* serror(void) const;





 void reset(void);
# 56 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/charset_conv.hpp"
 bool update_begin(const char* fromCharset, const char* toCharset);
# 65 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/charset_conv.hpp"
 bool update(const char* in, size_t len, string* out);





 void update_finish(string* out);
# 81 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/charset_conv.hpp"
 static charset_conv* create(const char* fromCharset,
                 const char* toCharset);



 virtual int push_pop(const char* in, size_t len,
  string* out, size_t max = 0);
 virtual int pop_end(string* out, size_t max = 0);
 virtual void clear();

public:

private:
 bool m_addInvalid;
 string m_errmsg;
 string* m_pBuf;
 char m_fromCharset[32];
 char m_toCharset[32];
 void* m_iconv;
 ACL_VSTRING* m_pInBuf;
 ACL_VSTRING* m_pOutBuf;
 const char* m_pUtf8Pre;
};
# 113 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/charset_conv.hpp"
 string strconv(const char* in, size_t len,
 const char* from_charset, const char* to_charset);

}
# 25 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/escape.hpp" 1
       


namespace acl {
class string;

 void escape(const char* in, size_t len, string& out);
 bool unescape(const char* in, size_t len, string& out);

}
# 26 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/url_coder.hpp" 1
       




namespace acl {

class string;

struct URL_NV
{
 char* name;
 char* value;
};

class url_coder : public dbuf_obj
{
public:





 url_coder(bool nocase = true, dbuf_guard* dbuf = 
# 24 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/url_coder.hpp" 3 4
                                                 __null
# 24 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/url_coder.hpp"
                                                     );






 url_coder(const url_coder& coder, dbuf_guard* dbuf = 
# 31 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/url_coder.hpp" 3 4
                                                     __null
# 31 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/url_coder.hpp"
                                                         );

 ~url_coder(void);






 void encode(string& buf, bool clean = true) const;





 const string& to_string(void) const;





 void decode(const char* str);
# 61 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/url_coder.hpp"
 url_coder& set(const char* name, const char* value,
  bool override = true);
 url_coder& set(const char* name, int value, bool override = true);
 url_coder& set(const char* name, bool override, const char* fmt, ...)
  __attribute__((__format__ (__printf__, (4), (5))));
 url_coder& set(const char* name, const char* fmt, va_list ap,
  bool override = true);
# 76 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/url_coder.hpp"
 const char* get(const char* name, bool* found = 
# 76 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/url_coder.hpp" 3 4
                                                __null
# 76 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/url_coder.hpp"
                                                    ) const;







 const char* operator[](const char* name) const;






 const url_coder& operator =(const url_coder& coder);





 const std::vector<URL_NV*>& get_params(void) const
 {
  return params_;
 }






 bool del(const char* name);




 void reset(void);

private:
 bool nocase_;
 dbuf_guard* dbuf_;
 dbuf_guard* dbuf_internal_;
 std::vector<URL_NV*> params_;
 string* buf_;

 void init_dbuf(dbuf_guard* dbuf);
};

}
# 28 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/thread.hpp" 1
       



namespace acl
{




class thread_job : public noncopyable
{
public:
 thread_job(void) {}
 virtual ~thread_job(void) {}





 virtual void* run(void) = 0;






 virtual void init(void) {}
};

template<typename T> class tbox;
class atomic_long;





class thread : public thread_job
{
public:
 thread(void);
 virtual ~thread(void);






 bool start(bool sync = false);
# 58 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/thread.hpp"
 bool wait(void** out = 
# 58 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/thread.hpp" 3 4
                       __null
# 58 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/thread.hpp"
                           );
# 68 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/thread.hpp"
 thread& set_detachable(bool yes);







 thread& set_stacksize(size_t size);





 unsigned long thread_id(void) const;





 static unsigned long thread_self(void);
 static unsigned long self(void)
 {
  return thread_self();
 }

private:
 bool detachable_;
 size_t stack_size_;




 pthread_t thread_;
 unsigned long thread_id_;

 tbox<int>* sync_;
 atomic_long* lock_;

 void* return_arg_;
 static void* thread_run(void* arg);

 void wait_for_running(void);
};

}
# 29 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/thread_pool.hpp" 1
       


struct acl_pthread_pool_t;
struct acl_pthread_pool_attr_t;

namespace acl
{

class thread_job;






class thread_pool : public noncopyable
{
public:
 thread_pool(void);
 virtual ~thread_pool(void);




 void start(void);






 void stop(void);




 void wait(void);







 bool run(thread_job* job);
# 55 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/thread_pool.hpp"
 bool execute(thread_job* job);







 thread_pool& set_stacksize(size_t size);






 thread_pool& set_limit(size_t max);





 size_t get_limit(void) const;






 thread_pool& set_idle(int ttl);






 int threads_count(void) const;





 int task_qlen(void) const;

protected:





 virtual bool thread_on_init(void) { return true; }





 virtual void thread_on_exit(void) {}

private:
 size_t stack_size_;
 size_t threads_limit_;
 int thread_idle_;

 acl_pthread_pool_t* thr_pool_;
 acl_pthread_pool_attr_t* thr_attr_;

 static void thread_run(void* arg);
 static int thread_init(void* arg);
 static void thread_exit(void* arg);
};

}
# 30 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/thread_queue.hpp" 1
       



struct ACL_AQUEUE;

namespace acl
{

class thread_qitem : public noncopyable
{
public:
 thread_qitem() {}
 virtual ~thread_qitem() {}
};

class thread_queue : public noncopyable
{
public:
 thread_queue();
 ~thread_queue();

 bool push(thread_qitem* item);
 thread_qitem* pop(int wait_ms = -1);
 int qlen() const;

private:
 ACL_AQUEUE* queue_;
};
# 128 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/thread_queue.hpp"
}
# 31 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/tbox.hpp" 1
       


# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 5 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/tbox.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/thread_mutex.hpp" 1
       
# 14 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/thread_mutex.hpp"
namespace acl {




class thread_mutex : public noncopyable
{
public:




 thread_mutex(bool recursive = true);
 ~thread_mutex(void);





 bool lock(void);





 bool try_lock(void);





 bool unlock(void);





 pthread_mutex_t* get_mutex(void) const;

private:
 pthread_mutex_t* mutex_;

 pthread_mutexattr_t mutex_attr_;

};

class thread_mutex_guard : public noncopyable
{
public:
 thread_mutex_guard(thread_mutex& mutex);
 ~thread_mutex_guard(void);

private:
 thread_mutex& mutex_;
};

}
# 6 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/tbox.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/thread_cond.hpp" 1
       
# 14 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/thread_cond.hpp"
namespace acl {

class thread_mutex;




class thread_cond : public noncopyable
{
public:





 thread_cond(thread_mutex* mutex = 
# 29 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/thread_cond.hpp" 3 4
                                  __null
# 29 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/thread_cond.hpp"
                                      );
 ~thread_cond(void);
# 43 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/thread_cond.hpp"
 bool wait(long long microseconds = -1, bool locked = false);





 bool notify(void);





 bool notify_all(void);





 thread_mutex& get_mutex(void) const;





 pthread_cond_t* get_cond(void) const;

private:
 thread_mutex* mutex_;
 thread_mutex* mutex_internal_;
 pthread_cond_t* cond_;

 bool block_wait(bool locked);
 bool timed_wait(long long microseconds, bool locked);
};

}
# 7 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/tbox.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/box.hpp" 1
       



namespace acl {

typedef enum {
 BOX_TYPE_MBOX,
 BOX_TYPE_TBOX,
 BOX_TYPE_TBOX_ARRAY,
} box_type_t;

template <typename T>
class box : public noncopyable {
public:
 box(void) {}
 virtual ~box(void) {}

 virtual bool push(T* o, bool notify_first = true) = 0;
 virtual T* pop(int wait_ms = -1, bool* bound = 
# 20 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/box.hpp" 3 4
                                               __null
# 20 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/box.hpp"
                                                   ) = 0;
 virtual bool has_null(void) const = 0;
};

}
# 9 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/tbox.hpp" 2

namespace acl {
# 41 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/tbox.hpp"
template<typename T>
class tbox : public box<T> {
public:





 tbox(bool free_obj = true)
 : size_(0), free_obj_(free_obj), cond_(&lock_) {}

 ~tbox(void)
 {
  clear(free_obj_);
 }





 void clear(bool free_obj = false)
 {
  if (free_obj) {
   for (typename std::list<T*>::iterator it =
    tbox_.begin(); it != tbox_.end(); ++it) {

    delete *it;
   }
  }
  tbox_.clear();
 }
# 81 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/tbox.hpp"
 bool push(T* t, bool notify_first = true)
 {
  if (lock_.lock() == false) {
   abort();
  }
  tbox_.push_back(t);
  size_++;

  if (notify_first) {
   if (cond_.notify() == false) {
    abort();
   }
   if (lock_.unlock() == false) {
    abort();
   }
  } else {
   if (lock_.unlock() == false) {
    abort();
   }
   if (cond_.notify() == false) {
    abort();
   }
  }

  return true;
 }
# 122 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/tbox.hpp"
 T* pop(int wait_ms = -1, bool* found = 
# 122 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/tbox.hpp" 3 4
                                       __null
# 122 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/tbox.hpp"
                                           )
 {
  long long n = ((long long) wait_ms) * 1000;
  bool found_flag;
  if (lock_.lock() == false) {
   abort();
  }
  while (true) {
   T* t = peek(found_flag);
   if (found_flag) {
    if (lock_.unlock() == false) {
     abort();
    }
    if (found) {
     *found = found_flag;
    }
    return t;
   }


   if (!cond_.wait(n, true) && wait_ms >= 0) {
    if (lock_.unlock() == false) {
     abort();
    }
    if (found) {
     *found = false;
    }
    return 
# 149 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/tbox.hpp" 3 4
          __null
# 149 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/tbox.hpp"
              ;
   }
  }
 }






 bool has_null(void) const {
  return true;
 }





 size_t size(void) const
 {
  return size_;
 }

public:
 void lock(void)
 {
  if (lock_.lock() == false) {
   abort();
  }
 }

 void unlock(void)
 {
  if (lock_.unlock() == false) {
   abort();
  }
 }

private:
 std::list<T*> tbox_;
 size_t size_;
 bool free_obj_;
 thread_mutex lock_;
 thread_cond cond_;

 T* peek(bool& found_flag)
 {
  typename std::list<T*>::iterator it = tbox_.begin();
  if (it == tbox_.end()) {
   found_flag = false;
   return 
# 199 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/tbox.hpp" 3 4
         __null
# 199 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/tbox.hpp"
             ;
  }
  found_flag = true;
  size_--;
  T* t = *it;
  tbox_.erase(it);
  return t;
 }
};

}
# 32 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/tbox_array.hpp" 1
       


# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 5 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/tbox_array.hpp" 2





namespace acl {
# 41 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/tbox_array.hpp"
template<typename T>
class tbox_array : public box<T> {
public:





 tbox_array(bool free_obj = true)
 : capacity_(10000)
 , off_curr_(0)
 , off_next_(0)
 , waiters_(0)
 , free_obj_(free_obj)
 , cond_(&lock_)
 {
  array_ = (T**) malloc(sizeof(T*) * capacity_);
 }

 ~tbox_array(void)
 {
  clear(free_obj_);
  free(array_);
 }





 void clear(bool free_obj = false)
 {
  if (free_obj) {
   for (size_t i = off_curr_; i < off_next_; i++) {
    delete array_[i];
   }
  }
 }
# 87 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/tbox_array.hpp"
 bool push(T* t, bool notify_first = false)
 {
  if (lock_.lock() == false) {
   abort();
  }

  if (off_next_ == capacity_) {
   if (off_curr_ >= 10000) {

    size_t n = 0;
    for (size_t i = off_curr_; i < off_next_; i++) {
     array_[n++] = array_[i];
    }





    off_next_ -= off_curr_;
    off_curr_ = 0;
   } else {
    capacity_ += 10000;
    array_ = (T**) realloc(array_, sizeof(T*) * capacity_);
   }
  }
  array_[off_next_++] = t;

  if (notify_first) {
   if (cond_.notify() == false) {
    abort();
   }
   if (lock_.unlock() == false) {
    abort();
   }
  } else {
   if (lock_.unlock() == false) {
    abort();
   }
   if (cond_.notify() == false) {
    abort();
   }
  }

  return true;
 }
# 147 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/tbox_array.hpp"
 T* pop(int wait_ms = -1, bool* found = 
# 147 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/tbox_array.hpp" 3 4
                                       __null
# 147 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/tbox_array.hpp"
                                           )
 {
  long long n = ((long long) wait_ms) * 1000;
  bool found_flag;

  if (lock_.lock() == false) {
   abort();
  }
  while (true) {
   T* t = peek(found_flag);
   if (found_flag) {
    if (lock_.unlock() == false) {
     abort();
    }
    if (found) {
     *found = found_flag;
    }
    return t;
   }


   waiters_++;
   if (!cond_.wait(n, true) && wait_ms >= 0) {
    waiters_--;
    if (lock_.unlock() == false) {
     abort();
    }
    if (found) {
     *found = false;
    }
    return 
# 177 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/tbox_array.hpp" 3 4
          __null
# 177 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/tbox_array.hpp"
              ;
   }
   waiters_--;
  }
 }






 bool has_null(void) const {
  return true;
 }





 size_t size(void) const
 {
  return off_next_ - off_curr_;
 }

public:
 void lock(void)
 {
  if (lock_.lock() == false) {
   abort();
  }
 }

 void unlock(void)
 {
  if (lock_.unlock() == false) {
   abort();
  }
 }

private:
 T** array_;
 size_t capacity_;
 size_t off_curr_;
 size_t off_next_;
 size_t waiters_;
 bool free_obj_;
 thread_mutex lock_;
 thread_cond cond_;

 T* peek(bool& found_flag)
 {
  if (off_curr_ == off_next_) {
   found_flag = false;
   if (off_curr_ > 0) {
    off_curr_ = off_next_ = 0;
   }
   return 
# 233 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/tbox_array.hpp" 3 4
         __null
# 233 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/tbox_array.hpp"
             ;
  }

  found_flag = true;
  T* t = array_[off_curr_++];
  return t;
 }
};

}
# 33 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2


# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/scan_dir.hpp" 1
       


struct ACL_SCAN_DIR;

namespace acl
{

class string;

class scan_dir : public noncopyable
{
public:
 scan_dir(void);
 virtual ~scan_dir(void);
# 24 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/scan_dir.hpp"
 bool open(const char* path, bool recursive = true, bool rmdir_on = false);







 virtual bool rmdir_callback(const char* path);




 void close(void);
# 46 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/scan_dir.hpp"
 const char* next_file(bool full = false);
# 56 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/scan_dir.hpp"
 const char* next_dir(bool full = false);
# 68 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/scan_dir.hpp"
 const char* next(bool full = false, bool* is_file = 
# 68 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/scan_dir.hpp" 3 4
                                                    __null
# 68 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/scan_dir.hpp"
                                                        );
# 77 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/scan_dir.hpp"
 const char* curr_path();






 const char* curr_file(bool full = false);





 size_t dir_count() const;





 size_t file_count() const;
# 143 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/scan_dir.hpp"
 unsigned long long scaned_size() const;
 unsigned long long all_size(int* nfiles = 
# 144 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/scan_dir.hpp" 3 4
                                          __null
# 144 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/scan_dir.hpp"
                                              , int* ndirs = 
# 144 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/scan_dir.hpp" 3 4
                                                             __null
# 144 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/scan_dir.hpp"
                                                                 ) const;
 static unsigned long long all_size(const char* path, bool recursive = true,
  int* nfiles = 
# 146 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/scan_dir.hpp" 3 4
               __null
# 146 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/scan_dir.hpp"
                   , int* ndirs = 
# 146 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/scan_dir.hpp" 3 4
                                  __null
# 146 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/scan_dir.hpp"
                                      );
 unsigned long long remove_all(int* nfiles = 
# 147 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/scan_dir.hpp" 3 4
                                            __null
# 147 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/scan_dir.hpp"
                                                , int* ndirs = 
# 147 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/scan_dir.hpp" 3 4
                                                               __null
# 147 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/scan_dir.hpp"
                                                                   ) const;
 static unsigned long long remove_all(const char* path, bool recursive = true,
  int* nfiles = 
# 149 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/scan_dir.hpp" 3 4
               __null
# 149 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/scan_dir.hpp"
                   , int* ndirs = 
# 149 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/scan_dir.hpp" 3 4
                                  __null
# 149 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/scan_dir.hpp"
                                      );







 static bool get_cwd(string& out);

public:
 ACL_SCAN_DIR* get_scan_dir(void) const
 {
  return scan_;
 }






 void set_rmdir_callback(int (*fn)(ACL_SCAN_DIR*, const char*, void*), void* ctx);

private:
 char* path_;
 ACL_SCAN_DIR* scan_;
 string* path_buf_;
 string* file_buf_;

 static int rmdir_def(ACL_SCAN_DIR* scan, const char* path, void* ctx);
};

}
# 36 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/mbox.hpp" 1
       

# 1 "/usr/include/assert.h" 1 3 4
# 4 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/mbox.hpp" 2


namespace acl {


void* mbox_create(bool mpsc);
void mbox_free(void*, void (*free_fn)(void*));
bool mbox_send(void*, void*);
void* mbox_read(void*, int, bool*);
size_t mbox_nsend(void*);
size_t mbox_nread(void*);
# 49 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/mbox.hpp"
template<typename T>
class mbox : public box<T> {
public:






 mbox(bool free_obj = true, bool mpsc = true)
 : free_obj_(free_obj)
 {
  mbox_ = mbox_create(mpsc);
  
# 62 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/mbox.hpp" 3 4
 (static_cast <bool> (
# 62 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/mbox.hpp"
 mbox_
# 62 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/mbox.hpp" 3 4
 ) ? void (0) : __assert_fail (
# 62 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/mbox.hpp"
 "mbox_"
# 62 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/mbox.hpp" 3 4
 , "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/mbox.hpp", 62, __extension__ __PRETTY_FUNCTION__))
# 62 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/mbox.hpp"
              ;
 }

 ~mbox(void)
 {
  mbox_free(mbox_, free_obj_ ? mbox_free_fn : 
# 67 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/mbox.hpp" 3 4
                                             __null
# 67 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/mbox.hpp"
                                                 );
 }
# 77 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/mbox.hpp"
 bool push(T* t, bool dummy = false)
 {
  (void) dummy;
  return mbox_send(mbox_, t);
 }
# 92 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/mbox.hpp"
 T* pop(int timeout = -1, bool* success = 
# 92 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/mbox.hpp" 3 4
                                         __null
# 92 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/mbox.hpp"
                                             )
 {
  return (T*) mbox_read(mbox_, timeout, success);
 }






 bool has_null(void) const {
  return false;
 }





 size_t push_count(void) const
 {
  return mbox_nsend(mbox_);
 }





 size_t pop_count(void) const
 {
  return mbox_nread(mbox_);
 }

private:
 void* mbox_;
 bool free_obj_;

 static void mbox_free_fn(void* o)
 {
  T* t = (T*) o;
  delete t;
 }
};

}
# 38 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/trigger.hpp" 1
       
# 11 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/trigger.hpp"
namespace acl {




template <typename T>
class trigger_item : public noncopyable
{
public:
 typedef std::map<long long, trigger_item<T>*> trigger_items_t;

 trigger_item(trigger_items_t& items) : items_(items) {}
 ~trigger_item(void) {}





 void add(T* o)
 {
  objs_.push_back(o);
 }







 int del(T* o)
 {
  for (typename std::vector<T*>::iterator it = objs_.begin();
   it != objs_.end(); ++it) {

   if (*it == o) {
    objs_.erase(it);
    return (int) objs_.size();
   }
  }
  return -1;
 }





 std::vector<T*>& get_objs(void)
 {
  return objs_;
 }

private:
 std::vector<T*> objs_;
 trigger_items_t& items_;
};
# 112 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/trigger.hpp"
template <typename T>
class timer_trigger : public noncopyable
{
public:
 typedef std::map<long long, trigger_item<T>*> trigger_items_t;
 typedef typename trigger_items_t::iterator trigger_iter_t;

 timer_trigger(void) {}
 ~timer_trigger(void) {}





 void add(T* o)
 {
  int ttl = o->get_ttl();
  long long key = get_curr_stamp() + ttl;

  trigger_item<T>* item;
  trigger_iter_t it = items_.find(key);
  if (it == items_.end()) {
   item = new trigger_item<T>(items_);
   items_[key] = item;
  } else
   item = it->second;
  item->add(o);
  o->set_key(key);
 }






 int del(T* o)
 {
  long long key = o->get_key();
  trigger_iter_t it = items_.find(key);

  if (it == items_.end())
   return -1;
  if (it->second->del(o) == 0) {
   delete it->second;
   items_.erase(it);
  }
  return (int) items_.size();
 }






 long long trigger(void)
 {
  long long key = get_curr_stamp();
  std::vector<trigger_item<T>*> items;
  trigger_iter_t iter;
  for (iter = items_.begin(); iter != items_.end();) {
   if (iter->first > key)
    break;

   items.push_back(iter->second);
   items_.erase(iter++);
  }

  for (typename std::vector<trigger_item<T>*>::iterator
   it = items.begin(); it != items.end(); ++it) {

   trigger(*it);
   delete *it;
  }

  iter = items_.begin();
  if (iter == items_.end())
   return -1;
  return iter->first;
 }

private:
 trigger_items_t items_;





 void trigger(trigger_item<T>* item)
 {
  std::vector<T*>& objs = item->get_objs();
  for (typename std::vector<T*>::iterator it = objs.begin();
   it != objs.end(); ++it) {

   if (!(*it)->on_trigger())
    continue;

   int ttl = (*it)->get_ttl();
   long long key = get_curr_stamp() + ttl;

   trigger_iter_t iter = items_.find(key);
   if (iter == items_.end()) {
    item = new trigger_item<T>(items_);
    items_[key] = item;
   } else
    item = iter->second;

   item->add(*it);
   (*it)->set_key(key);
  }
 }
};





template <typename T>
class thread_trigger : public thread
{
public:
 thread_trigger(void)
 : delay_(100)
 , stop_(false)
 {
 }

 virtual ~thread_trigger(void) {}





 void add(T* o)
 {
  mbox_.push(o);
 }





 void del(T* o)
 {
  lock_.lock();
  timer_del_.push_back(o);
  lock_.unlock();
 }

 timer_trigger<T>& get_trigger(void)
 {
  return timer_;
 }

private:

 void* run(void)
 {
  while (!stop_) {
   T* o = mbox_.pop(delay_);
   if (o)
    timer_.add(o);

   long long next = timer_.trigger();
   long long curr = get_curr_stamp();
   if (next == -1)
    delay_ = 100;
   else {
    delay_ = next - curr;
    if (delay_ < 0)
     delay_ = 1;
   }

   lock_.lock();
   typename std::vector<T*>::iterator it;
   for (it = timer_del_.begin();
    it != timer_del_.end(); ++it) {

    timer_.del(*it);
   }
   timer_del_.clear();
   lock_.unlock();
  }
  return 
# 294 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/trigger.hpp" 3 4
        __null
# 294 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/trigger.hpp"
            ;
 }

private:
 long long delay_;
 bool stop_;

 timer_trigger<T> timer_;
 mbox<T> mbox_;

 std::vector<T*> timer_del_;
 thread_mutex lock_;
};

}
# 39 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/atomic.hpp" 1
       


namespace acl
{


void* atomic_new(void);
void atomic_free(void*);
void atomic_set(void*, void*);
void* atomic_cas(void*, void*, void*);
void* atomic_xchg(void*, void*);

template<typename T>
class atomic
{
public:
 atomic(T* t)
 {
  atomic_ = atomic_new();
  atomic_set(atomic_, t);
 }

 virtual ~atomic(void)
 {
  atomic_free(atomic_);
 }

 T* cas(T* cmp, T* val)
 {
  return (T*) atomic_cas(atomic_, cmp, val);
 }

 T* xchg(T* val)
 {
  return (T*) atomic_xchg(atomic_, val);
 }

protected:
 void* atomic_;

private:
 atomic(const atomic&);
};

class atomic_long : public atomic<long long>
{
public:
 atomic_long(long long n = 0);
 atomic_long(const atomic_long& n);

 ~atomic_long(void) {}

 void set(long long n);
 long long cas(long long cmp, long long n);
 long long fetch_add(long long n);
 long long add_fetch(long long n);

 operator long long() const
 {
  return n_;
 }

 long long value(void) const
 {
  return n_;
 }

 void operator=(long long n)
 {
  set(n);
 }

 void operator=(const atomic_long& n)
 {
  set(n.n_);
 }

 long long operator++()
 {
  return add_fetch(1);
 }

 long long operator++(int)
 {
  return fetch_add(1);
 }

 long long operator--()
 {
  return add_fetch(-1);
 }

 long long operator--(int)
 {
  return fetch_add(-1);
 }

 long long operator+=(long long n)
 {
  return add_fetch(n);
 }

 long long operator+=(int n)
 {
  return add_fetch(n);
 }

 long long operator-=(long long n)
 {
  return add_fetch(-n);
 }

 long long operator-=(int n)
 {
  return add_fetch(-n);
 }

private:
 long long n_;
};



class atomic_long_test
{
private:
 atomic_long count_;
public:
 atomic_long_test(void) {}
 ~atomic_long_test(void) {}

 void run(void)
 {

  long long n = count_++;
  printf(">>n=%lld\r\n", n);

  n = count_;
  printf(">>n=%lld\r\n", n);

  n = ++count_;
  printf(">>n=%lld\r\n", n);

  n = --count_;
  printf(">>n=%lld\r\n", n);

  n = count_--;
  printf(">>n=%lld\r\n", n);

  n = count_;
  printf(">>n=%lld\r\n", n);

  count_ -= 1;
  n = count_;
  printf(">>n=%lld\r\n", n);

  printf(">>count > 1 ? %s\r\n", count_ >= 1 ? "yes" : "no");
  printf(">>1 > count ? %s\r\n", 1 > count_ ? "yes" : "no");

  int i = 1;
  count_ = i;
  n = count_;
  printf(">>n=%lld\r\n", n);
 }

 class mythread : public thread
 {
 public:
  mythread(atomic_long_test& at) : at_(at) {}
  ~mythread(void) {}
 protected:
  void* run(void)
  {
   for (size_t i = 0; i < 100; i++)
    at_.run();
   return 
# 177 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/atomic.hpp" 3 4
         __null
# 177 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/atomic.hpp"
             ;
  }
 private:
  atomic_long_test& at_;
 };

 static void test(void)
 {
  atomic_long_test at;
  mythread thr1(at), thr2(at), thr3(at);
  thr1.set_detachable(false);
  thr2.set_detachable(false);
  thr3.set_detachable(false);
  thr1.start();
  thr2.start();
  thr3.start();
  thr1.wait();
  thr2.wait();
  thr3.wait();
 }
};

}
# 40 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/bitmap.hpp" 1
       


namespace acl {

class bitmap : public noncopyable
{
public:





 bitmap(const void* buf, size_t len);





 bitmap(size_t len);

 ~bitmap(void);






 bool bit_set(size_t n);






 bool bit_isset(size_t n) const;






 bool bit_unset(size_t n);







 size_t tobuf(void* buf, size_t len) const;







 bool frombuf(const void* buf, size_t len);




 void reset(void);





 size_t size(void) const;




 size_t space(void) const;





 size_t count(void) const;





 bool full(void) const;

public:
 const unsigned char* get_bmp(void) const {
  return bmp_;
 }

 unsigned char* get_bmp(void) {
  return bmp_;
 }

private:
 unsigned char *bmp_;
 size_t size_;
 size_t count_;


 void recount(void);
};

}
# 41 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/diff_object.hpp" 1
       



namespace acl
{

class diff_manager;





class diff_object : public dbuf_obj
{
public:




 diff_object(diff_manager& manager);

 virtual ~diff_object(void) {}





 virtual const char* get_key(void) const = 0;





 virtual const char* get_val(void) const = 0;






 virtual bool operator== (const diff_object& obj) const = 0;







 virtual bool check_range(long long range_from, long long range_to) const
 {
  (void) range_from;
  (void) range_to;
  return false;
 }

protected:
 diff_manager& manager_;
};

}
# 42 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/diff_string.hpp" 1
       



namespace acl
{

class diff_string : public diff_object
{
public:






 diff_string(diff_manager& manager, const char* key, const char* val);





 void set_range(long long range);





 long long get_range(void) const
 {
  return range_;
 }

public:

 const char* get_key(void) const;


 const char* get_val(void) const;


 bool operator== (const diff_object& obj) const;


 bool check_range(long long range_from, long long range_to) const;

private:
 const char* key_;
 const char* val_;
 long long range_;


 ~diff_string(void);
};

}
# 43 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/diff_manager.hpp" 1
       





namespace acl
{

class diff_object;




class diff_manager : public noncopyable
{
public:
 diff_manager(long long range_from = -1, long long range_to = -1);
 ~diff_manager(void);







 dbuf_guard& get_dbuf(void);
# 36 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/diff_manager.hpp"
 void diff_changes(const std::vector<diff_object*>& curr_objs,
  const std::vector<diff_object*>& old_olds);





 const std::vector<diff_object*>& get_new(void) const
 {
  return objs_new_;
 }






 const std::vector<diff_object*>& get_deleted(void) const
 {
  return objs_del_;
 }
# 75 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/diff_manager.hpp"
 const std::vector<std::pair<diff_object*, diff_object*> >&
  get_updated(void) const
 {
  return objs_upd_;
 }





 const std::vector<diff_object*>& get_same(void) const
 {
  return objs_equ_;
 }





 const std::vector<diff_object*>& get_extra_added(void) const
 {
  return objs_new_extra_;
 }





 const std::vector<diff_object*>& get_extra_deleted(void) const
 {
  return objs_del_extra_;
 }





 const std::vector<std::pair<diff_object*, diff_object*> >&
  get_extra_updated(void) const
 {
  return objs_upd_extra_;
 }





 void reset(void);

private:
 dbuf_guard dbuf_;
 long long range_from_;
 long long range_to_;


 std::vector<diff_object*> objs_equ_;




 std::vector<diff_object*> objs_new_;

 std::vector<diff_object*> objs_del_;

 std::vector<std::pair<diff_object*, diff_object*> > objs_upd_;




 std::vector<diff_object*> objs_new_extra_;

 std::vector<diff_object*> objs_del_extra_;

 std::vector<std::pair<diff_object*, diff_object*> > objs_upd_extra_;
};

}
# 44 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/token_tree.hpp" 1
       





struct ACL_TOKEN;
struct ACL_ITER;

namespace acl {

class token_tree;




class token_node : public noncopyable
{
public:




 const char* get_key(void) const;





 void* get_ctx(void) const;





 token_tree* get_tree(void) const
 {
  return tree_;
 }





 ACL_TOKEN* get_token(void) const
 {
  return me_;
 }

private:
 friend class token_tree;

 token_node(void);
 ~token_node(void);

 void set_node(ACL_TOKEN* token, token_tree* tree);

private:
 ACL_TOKEN* me_;
 token_tree* tree_;
 string key_;
 bool dirty_;
};





class token_tree : public noncopyable
{
public:
 token_tree(void);
 ~token_tree(void);







 bool insert(const char* key, void* ctx = 
# 81 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/token_tree.hpp" 3 4
                                         __null
# 81 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/token_tree.hpp"
                                             );






 void* remove(const char* key);






 const token_node* find(const char* key);
# 112 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/token_tree.hpp"
 const token_node* search(const char** text, const char* delimiters = 
# 112 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/token_tree.hpp" 3 4
                                                                     __null
# 112 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/token_tree.hpp"
                                                                         ,
  const char* delimiters_tab = 
# 113 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/token_tree.hpp" 3 4
                              __null
# 113 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stdlib/token_tree.hpp"
                                  );






 static char* create_delimiters_tab(const char* delimiters);





 static void free_delimiters_tab(char* delimiters_tab);





 const token_node* first_node(void);





 const token_node* next_node(void);





 ACL_TOKEN* get_tree(void) const
 {
  return tree_;
 }

private:
 ACL_TOKEN* tree_;
 ACL_ITER* iter_;
 token_node node_;
};

}
# 45 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gsoner.hpp" 1
# 12 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gsoner.hpp"
       
# 21 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gsoner.hpp"
namespace acl
{

class gsoner
{
public:
 gsoner ();
 bool read_file(const char *filepath);
 bool read_multi_file(const std::vector<std::string>& files);
 void parse_code();
 void gen_gson();
 void set_default_required();
 void set_default_optional();
 void set_header_filename(const std::string &filename);
 void set_source_filename(const std::string &filename);

private:
 enum code_parser_status_t
 {
  e_uninit,
  e_comment,
  e_struct_begin,
  e_struct_end,
 };

 struct field_t
 {
  enum type_t
  {
   e_bool,
   e_bool_ptr,
   e_number,
   e_double,
   e_cstr,
   e_ccstr,
   e_string,
   e_list,
   e_vector,
   e_map,
   e_set,
   e_object,
  };

  type_t type_;
  std::string name_;
  bool required_;

  field_t();
  field_t(type_t t, const std::string &name,bool required);

  virtual ~field_t();
 };

 struct parent_obj_t
 {
  enum level_t
  {
   e_error = 0,
   e_public,
   e_protect,
   e_private,
  };
  level_t level_;
  std::string name_;
 };

 struct object_t
 {
  typedef std::list<field_t> fields_t;
  fields_t fields_;
  std::string name_;
  std::list<parent_obj_t> parent_obj_;
  void reset ();
 };

 struct function_code_t
 {
  std::string declare_;
  std::string declare_ptr_;
  std::string declare2_;
  std::string definition_;
  std::string definition_ptr_;
  std::string definition2_;
 };

 parent_obj_t::level_t get_level(std::string str);
 std::string get_node_func (const field_t &field);
 std::string get_gson_func_laber (const field_t &field);
 function_code_t gen_pack_code (const object_t &obj);
 std::string get_unpack_code(const std::string &obj_name,
  const field_t &field)const ;
 std::string get_node_name(const std::string &name);
 std::string next_token(std::string delimiters);
 std::string get_namespace();
 function_code_t gen_unpack_code(const object_t &obj);
 std::string get_static_string(const std::string &str, int &index);
 std::string get_include_files();
 std::string get_filename(const char *filepath);

 bool skip_space_comment();

 bool check_use_namespace();
 bool check_namespace();
 bool check_namespace_end();
 bool check_struct_begin ();
 bool check_struct_end ();
 bool check_include();
 bool check_comment ();
 bool check_function();
 bool check_member();
 bool skip_space ();
 std::pair<bool, std::string> get_function_declare();

 std::string add_4space(const std::string &code);
 void flush();
 void write_header(const std::string &data);
 void write_source(const std::string &data);

 bool check_define();
 bool check_pragma();
 std::list<std::string> get_initializelist ();

 int pos_;
 int max_pos_;
 std::string comment_begin_;
 std::string comment_end_;
 std::string codes_;
 code_parser_status_t status_;
 std::string tab_ ;
 bool required_;
 bool skip_;
 bool default_;
 std::string newname_;
 object_t current_obj_;
 std::map<std::string,object_t> objs_;
 std::list<std::string> namespaces_;
 std::list<std::string> includes_;
 std::list<std::string> files_;
 std::ofstream *gen_header_;
 std::ofstream *gen_source_;
 std::string gen_header_filename_;
 std::string gen_source_filename_;
 std::string default_delimiters_;
};

}
# 47 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp" 1
# 13 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp"
       




# 1 "/usr/include/c++/7/set" 1 3
# 58 "/usr/include/c++/7/set" 3
       
# 59 "/usr/include/c++/7/set" 3


# 1 "/usr/include/c++/7/bits/stl_set.h" 1 3
# 64 "/usr/include/c++/7/bits/stl_set.h" 3

# 64 "/usr/include/c++/7/bits/stl_set.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Key, typename _Compare, typename _Alloc>
    class multiset;
# 91 "/usr/include/c++/7/bits/stl_set.h" 3
  template<typename _Key, typename _Compare = std::less<_Key>,
    typename _Alloc = std::allocator<_Key> >
    class set
    {
# 106 "/usr/include/c++/7/bits/stl_set.h" 3
    public:



      typedef _Key key_type;
      typedef _Key value_type;
      typedef _Compare key_compare;
      typedef _Compare value_compare;
      typedef _Alloc allocator_type;


    private:
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_Key>::other _Key_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Identity<value_type>,
         key_compare, _Key_alloc_type> _Rep_type;
      _Rep_type _M_t;

      typedef __gnu_cxx::__alloc_traits<_Key_alloc_type> _Alloc_traits;

    public:


      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;



      typedef typename _Rep_type::const_iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::const_reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;
# 157 "/usr/include/c++/7/bits/stl_set.h" 3
      set() = default;







      explicit
      set(const _Compare& __comp,
   const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Key_alloc_type(__a)) { }
# 180 "/usr/include/c++/7/bits/stl_set.h" 3
      template<typename _InputIterator>
 set(_InputIterator __first, _InputIterator __last)
 : _M_t()
 { _M_t._M_insert_unique(__first, __last); }
# 197 "/usr/include/c++/7/bits/stl_set.h" 3
      template<typename _InputIterator>
 set(_InputIterator __first, _InputIterator __last,
     const _Compare& __comp,
     const allocator_type& __a = allocator_type())
 : _M_t(__comp, _Key_alloc_type(__a))
 { _M_t._M_insert_unique(__first, __last); }
# 213 "/usr/include/c++/7/bits/stl_set.h" 3
      set(const set&) = default;







      set(set&&) = default;
# 233 "/usr/include/c++/7/bits/stl_set.h" 3
      set(initializer_list<value_type> __l,
   const _Compare& __comp = _Compare(),
   const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Key_alloc_type(__a))
      { _M_t._M_insert_unique(__l.begin(), __l.end()); }


      explicit
      set(const allocator_type& __a)
      : _M_t(_Compare(), _Key_alloc_type(__a)) { }


      set(const set& __x, const allocator_type& __a)
      : _M_t(__x._M_t, _Key_alloc_type(__a)) { }


      set(set&& __x, const allocator_type& __a)
      noexcept(is_nothrow_copy_constructible<_Compare>::value
        && _Alloc_traits::_S_always_equal())
      : _M_t(std::move(__x._M_t), _Key_alloc_type(__a)) { }


      set(initializer_list<value_type> __l, const allocator_type& __a)
      : _M_t(_Compare(), _Key_alloc_type(__a))
      { _M_t._M_insert_unique(__l.begin(), __l.end()); }


      template<typename _InputIterator>
 set(_InputIterator __first, _InputIterator __last,
     const allocator_type& __a)
 : _M_t(_Compare(), _Key_alloc_type(__a))
 { _M_t._M_insert_unique(__first, __last); }






      ~set() = default;
# 287 "/usr/include/c++/7/bits/stl_set.h" 3
      set&
      operator=(const set&) = default;


      set&
      operator=(set&&) = default;
# 305 "/usr/include/c++/7/bits/stl_set.h" 3
      set&
      operator=(initializer_list<value_type> __l)
      {
 _M_t._M_assign_unique(__l.begin(), __l.end());
 return *this;
      }





      key_compare
      key_comp() const
      { return _M_t.key_comp(); }

      value_compare
      value_comp() const
      { return _M_t.key_comp(); }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_t.get_allocator()); }






      iterator
      begin() const noexcept
      { return _M_t.begin(); }






      iterator
      end() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      rbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      rend() const noexcept
      { return _M_t.rend(); }







      iterator
      cbegin() const noexcept
      { return _M_t.begin(); }






      iterator
      cend() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      crbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      crend() const noexcept
      { return _M_t.rend(); }



      bool
      empty() const noexcept
      { return _M_t.empty(); }


      size_type
      size() const noexcept
      { return _M_t.size(); }


      size_type
      max_size() const noexcept
      { return _M_t.max_size(); }
# 430 "/usr/include/c++/7/bits/stl_set.h" 3
      void
      swap(set& __x)
      noexcept(__is_nothrow_swappable<_Compare>::value)
      { _M_t.swap(__x._M_t); }
# 450 "/usr/include/c++/7/bits/stl_set.h" 3
      template<typename... _Args>
 std::pair<iterator, bool>
 emplace(_Args&&... __args)
 { return _M_t._M_emplace_unique(std::forward<_Args>(__args)...); }
# 476 "/usr/include/c++/7/bits/stl_set.h" 3
      template<typename... _Args>
 iterator
 emplace_hint(const_iterator __pos, _Args&&... __args)
 {
   return _M_t._M_emplace_hint_unique(__pos,
          std::forward<_Args>(__args)...);
 }
# 498 "/usr/include/c++/7/bits/stl_set.h" 3
      std::pair<iterator, bool>
      insert(const value_type& __x)
      {
 std::pair<typename _Rep_type::iterator, bool> __p =
   _M_t._M_insert_unique(__x);
 return std::pair<iterator, bool>(__p.first, __p.second);
      }


      std::pair<iterator, bool>
      insert(value_type&& __x)
      {
 std::pair<typename _Rep_type::iterator, bool> __p =
   _M_t._M_insert_unique(std::move(__x));
 return std::pair<iterator, bool>(__p.first, __p.second);
      }
# 535 "/usr/include/c++/7/bits/stl_set.h" 3
      iterator
      insert(const_iterator __position, const value_type& __x)
      { return _M_t._M_insert_unique_(__position, __x); }


      iterator
      insert(const_iterator __position, value_type&& __x)
      { return _M_t._M_insert_unique_(__position, std::move(__x)); }
# 554 "/usr/include/c++/7/bits/stl_set.h" 3
      template<typename _InputIterator>
 void
 insert(_InputIterator __first, _InputIterator __last)
 { _M_t._M_insert_unique(__first, __last); }
# 567 "/usr/include/c++/7/bits/stl_set.h" 3
      void
      insert(initializer_list<value_type> __l)
      { this->insert(__l.begin(), __l.end()); }
# 642 "/usr/include/c++/7/bits/stl_set.h" 3
      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __position)
      { return _M_t.erase(__position); }
# 673 "/usr/include/c++/7/bits/stl_set.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 694 "/usr/include/c++/7/bits/stl_set.h" 3
      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_t.erase(__first, __last); }
# 722 "/usr/include/c++/7/bits/stl_set.h" 3
      void
      clear() noexcept
      { _M_t.clear(); }
# 737 "/usr/include/c++/7/bits/stl_set.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }


      template<typename _Kt>
 auto
 count(const _Kt& __x) const
 -> decltype(_M_t._M_count_tr(__x))
 { return _M_t._M_count_tr(__x); }
# 764 "/usr/include/c++/7/bits/stl_set.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }

      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }


      template<typename _Kt>
 auto
 find(const _Kt& __x)
 -> decltype(iterator{_M_t._M_find_tr(__x)})
 { return iterator{_M_t._M_find_tr(__x)}; }

      template<typename _Kt>
 auto
 find(const _Kt& __x) const
 -> decltype(const_iterator{_M_t._M_find_tr(__x)})
 { return const_iterator{_M_t._M_find_tr(__x)}; }
# 799 "/usr/include/c++/7/bits/stl_set.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }

      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }


      template<typename _Kt>
 auto
 lower_bound(const _Kt& __x)
 -> decltype(iterator(_M_t._M_lower_bound_tr(__x)))
 { return iterator(_M_t._M_lower_bound_tr(__x)); }

      template<typename _Kt>
 auto
 lower_bound(const _Kt& __x) const
 -> decltype(const_iterator(_M_t._M_lower_bound_tr(__x)))
 { return const_iterator(_M_t._M_lower_bound_tr(__x)); }
# 829 "/usr/include/c++/7/bits/stl_set.h" 3
      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }

      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }


      template<typename _Kt>
 auto
 upper_bound(const _Kt& __x)
 -> decltype(iterator(_M_t._M_upper_bound_tr(__x)))
 { return iterator(_M_t._M_upper_bound_tr(__x)); }

      template<typename _Kt>
 auto
 upper_bound(const _Kt& __x) const
 -> decltype(iterator(_M_t._M_upper_bound_tr(__x)))
 { return const_iterator(_M_t._M_upper_bound_tr(__x)); }
# 868 "/usr/include/c++/7/bits/stl_set.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }

      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }


      template<typename _Kt>
 auto
 equal_range(const _Kt& __x)
 -> decltype(pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)))
 { return pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)); }

      template<typename _Kt>
 auto
 equal_range(const _Kt& __x) const
 -> decltype(pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)))
 { return pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)); }



      template<typename _K1, typename _C1, typename _A1>
 friend bool
 operator==(const set<_K1, _C1, _A1>&, const set<_K1, _C1, _A1>&);

      template<typename _K1, typename _C1, typename _A1>
 friend bool
 operator<(const set<_K1, _C1, _A1>&, const set<_K1, _C1, _A1>&);
    };
# 911 "/usr/include/c++/7/bits/stl_set.h" 3
  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator==(const set<_Key, _Compare, _Alloc>& __x,
        const set<_Key, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 928 "/usr/include/c++/7/bits/stl_set.h" 3
  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator<(const set<_Key, _Compare, _Alloc>& __x,
       const set<_Key, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const set<_Key, _Compare, _Alloc>& __x,
        const set<_Key, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator>(const set<_Key, _Compare, _Alloc>& __x,
       const set<_Key, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const set<_Key, _Compare, _Alloc>& __x,
        const set<_Key, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const set<_Key, _Compare, _Alloc>& __x,
        const set<_Key, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline void
    swap(set<_Key, _Compare, _Alloc>& __x, set<_Key, _Compare, _Alloc>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }


# 992 "/usr/include/c++/7/bits/stl_set.h" 3
}
# 62 "/usr/include/c++/7/set" 2 3
# 1 "/usr/include/c++/7/bits/stl_multiset.h" 1 3
# 64 "/usr/include/c++/7/bits/stl_multiset.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Key, typename _Compare, typename _Alloc>
    class set;
# 93 "/usr/include/c++/7/bits/stl_multiset.h" 3
  template <typename _Key, typename _Compare = std::less<_Key>,
     typename _Alloc = std::allocator<_Key> >
    class multiset
    {
# 108 "/usr/include/c++/7/bits/stl_multiset.h" 3
    public:

      typedef _Key key_type;
      typedef _Key value_type;
      typedef _Compare key_compare;
      typedef _Compare value_compare;
      typedef _Alloc allocator_type;

    private:

      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_Key>::other _Key_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Identity<value_type>,
         key_compare, _Key_alloc_type> _Rep_type;

      _Rep_type _M_t;

      typedef __gnu_cxx::__alloc_traits<_Key_alloc_type> _Alloc_traits;

    public:
      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;



      typedef typename _Rep_type::const_iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::const_reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;
# 154 "/usr/include/c++/7/bits/stl_multiset.h" 3
      multiset() = default;







      explicit
      multiset(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Key_alloc_type(__a)) { }
# 176 "/usr/include/c++/7/bits/stl_multiset.h" 3
      template<typename _InputIterator>
 multiset(_InputIterator __first, _InputIterator __last)
 : _M_t()
 { _M_t._M_insert_equal(__first, __last); }
# 192 "/usr/include/c++/7/bits/stl_multiset.h" 3
      template<typename _InputIterator>
 multiset(_InputIterator __first, _InputIterator __last,
   const _Compare& __comp,
   const allocator_type& __a = allocator_type())
 : _M_t(__comp, _Key_alloc_type(__a))
 { _M_t._M_insert_equal(__first, __last); }
# 208 "/usr/include/c++/7/bits/stl_multiset.h" 3
      multiset(const multiset&) = default;
# 217 "/usr/include/c++/7/bits/stl_multiset.h" 3
      multiset(multiset&&) = default;
# 229 "/usr/include/c++/7/bits/stl_multiset.h" 3
      multiset(initializer_list<value_type> __l,
        const _Compare& __comp = _Compare(),
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Key_alloc_type(__a))
      { _M_t._M_insert_equal(__l.begin(), __l.end()); }


      explicit
      multiset(const allocator_type& __a)
      : _M_t(_Compare(), _Key_alloc_type(__a)) { }


      multiset(const multiset& __m, const allocator_type& __a)
      : _M_t(__m._M_t, _Key_alloc_type(__a)) { }


      multiset(multiset&& __m, const allocator_type& __a)
      noexcept(is_nothrow_copy_constructible<_Compare>::value
        && _Alloc_traits::_S_always_equal())
      : _M_t(std::move(__m._M_t), _Key_alloc_type(__a)) { }


      multiset(initializer_list<value_type> __l, const allocator_type& __a)
      : _M_t(_Compare(), _Key_alloc_type(__a))
      { _M_t._M_insert_equal(__l.begin(), __l.end()); }


      template<typename _InputIterator>
 multiset(_InputIterator __first, _InputIterator __last,
   const allocator_type& __a)
 : _M_t(_Compare(), _Key_alloc_type(__a))
 { _M_t._M_insert_equal(__first, __last); }






      ~multiset() = default;
# 283 "/usr/include/c++/7/bits/stl_multiset.h" 3
      multiset&
      operator=(const multiset&) = default;


      multiset&
      operator=(multiset&&) = default;
# 301 "/usr/include/c++/7/bits/stl_multiset.h" 3
      multiset&
      operator=(initializer_list<value_type> __l)
      {
 _M_t._M_assign_equal(__l.begin(), __l.end());
 return *this;
      }





      key_compare
      key_comp() const
      { return _M_t.key_comp(); }

      value_compare
      value_comp() const
      { return _M_t.key_comp(); }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_t.get_allocator()); }






      iterator
      begin() const noexcept
      { return _M_t.begin(); }






      iterator
      end() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      rbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      rend() const noexcept
      { return _M_t.rend(); }







      iterator
      cbegin() const noexcept
      { return _M_t.begin(); }






      iterator
      cend() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      crbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      crend() const noexcept
      { return _M_t.rend(); }



      bool
      empty() const noexcept
      { return _M_t.empty(); }


      size_type
      size() const noexcept
      { return _M_t.size(); }


      size_type
      max_size() const noexcept
      { return _M_t.max_size(); }
# 426 "/usr/include/c++/7/bits/stl_multiset.h" 3
      void
      swap(multiset& __x)
      noexcept(__is_nothrow_swappable<_Compare>::value)
      { _M_t.swap(__x._M_t); }
# 445 "/usr/include/c++/7/bits/stl_multiset.h" 3
      template<typename... _Args>
 iterator
 emplace(_Args&&... __args)
 { return _M_t._M_emplace_equal(std::forward<_Args>(__args)...); }
# 471 "/usr/include/c++/7/bits/stl_multiset.h" 3
      template<typename... _Args>
 iterator
 emplace_hint(const_iterator __pos, _Args&&... __args)
 {
   return _M_t._M_emplace_hint_equal(__pos,
         std::forward<_Args>(__args)...);
 }
# 491 "/usr/include/c++/7/bits/stl_multiset.h" 3
      iterator
      insert(const value_type& __x)
      { return _M_t._M_insert_equal(__x); }


      iterator
      insert(value_type&& __x)
      { return _M_t._M_insert_equal(std::move(__x)); }
# 521 "/usr/include/c++/7/bits/stl_multiset.h" 3
      iterator
      insert(const_iterator __position, const value_type& __x)
      { return _M_t._M_insert_equal_(__position, __x); }


      iterator
      insert(const_iterator __position, value_type&& __x)
      { return _M_t._M_insert_equal_(__position, std::move(__x)); }
# 539 "/usr/include/c++/7/bits/stl_multiset.h" 3
      template<typename _InputIterator>
 void
 insert(_InputIterator __first, _InputIterator __last)
 { _M_t._M_insert_equal(__first, __last); }
# 552 "/usr/include/c++/7/bits/stl_multiset.h" 3
      void
      insert(initializer_list<value_type> __l)
      { this->insert(__l.begin(), __l.end()); }
# 627 "/usr/include/c++/7/bits/stl_multiset.h" 3
      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __position)
      { return _M_t.erase(__position); }
# 658 "/usr/include/c++/7/bits/stl_multiset.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 679 "/usr/include/c++/7/bits/stl_multiset.h" 3
      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_t.erase(__first, __last); }
# 707 "/usr/include/c++/7/bits/stl_multiset.h" 3
      void
      clear() noexcept
      { _M_t.clear(); }
# 719 "/usr/include/c++/7/bits/stl_multiset.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_t.count(__x); }


      template<typename _Kt>
 auto
 count(const _Kt& __x) const -> decltype(_M_t._M_count_tr(__x))
 { return _M_t._M_count_tr(__x); }
# 745 "/usr/include/c++/7/bits/stl_multiset.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }

      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }


      template<typename _Kt>
 auto
 find(const _Kt& __x)
 -> decltype(iterator{_M_t._M_find_tr(__x)})
 { return iterator{_M_t._M_find_tr(__x)}; }

      template<typename _Kt>
 auto
 find(const _Kt& __x) const
 -> decltype(const_iterator{_M_t._M_find_tr(__x)})
 { return const_iterator{_M_t._M_find_tr(__x)}; }
# 780 "/usr/include/c++/7/bits/stl_multiset.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }

      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }


      template<typename _Kt>
 auto
 lower_bound(const _Kt& __x)
 -> decltype(iterator(_M_t._M_lower_bound_tr(__x)))
 { return iterator(_M_t._M_lower_bound_tr(__x)); }

      template<typename _Kt>
 auto
 lower_bound(const _Kt& __x) const
 -> decltype(iterator(_M_t._M_lower_bound_tr(__x)))
 { return iterator(_M_t._M_lower_bound_tr(__x)); }
# 810 "/usr/include/c++/7/bits/stl_multiset.h" 3
      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }

      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }


      template<typename _Kt>
 auto
 upper_bound(const _Kt& __x)
 -> decltype(iterator(_M_t._M_upper_bound_tr(__x)))
 { return iterator(_M_t._M_upper_bound_tr(__x)); }

      template<typename _Kt>
 auto
 upper_bound(const _Kt& __x) const
 -> decltype(iterator(_M_t._M_upper_bound_tr(__x)))
 { return iterator(_M_t._M_upper_bound_tr(__x)); }
# 849 "/usr/include/c++/7/bits/stl_multiset.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }

      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }


      template<typename _Kt>
 auto
 equal_range(const _Kt& __x)
 -> decltype(pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)))
 { return pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)); }

      template<typename _Kt>
 auto
 equal_range(const _Kt& __x) const
 -> decltype(pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)))
 { return pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)); }



      template<typename _K1, typename _C1, typename _A1>
 friend bool
 operator==(const multiset<_K1, _C1, _A1>&,
     const multiset<_K1, _C1, _A1>&);

      template<typename _K1, typename _C1, typename _A1>
 friend bool
 operator< (const multiset<_K1, _C1, _A1>&,
     const multiset<_K1, _C1, _A1>&);
    };
# 894 "/usr/include/c++/7/bits/stl_multiset.h" 3
  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator==(const multiset<_Key, _Compare, _Alloc>& __x,
        const multiset<_Key, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 911 "/usr/include/c++/7/bits/stl_multiset.h" 3
  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator<(const multiset<_Key, _Compare, _Alloc>& __x,
       const multiset<_Key, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const multiset<_Key, _Compare, _Alloc>& __x,
        const multiset<_Key, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator>(const multiset<_Key,_Compare,_Alloc>& __x,
       const multiset<_Key,_Compare,_Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const multiset<_Key, _Compare, _Alloc>& __x,
        const multiset<_Key, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const multiset<_Key, _Compare, _Alloc>& __x,
        const multiset<_Key, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline void
    swap(multiset<_Key, _Compare, _Alloc>& __x,
  multiset<_Key, _Compare, _Alloc>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }


# 977 "/usr/include/c++/7/bits/stl_multiset.h" 3
}
# 63 "/usr/include/c++/7/set" 2 3
# 19 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp" 2

# 19 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp"
namespace acl
{



struct true_type
{
 static const bool value = true;
};

struct false_type
{
 static const bool value = false;
};

template<class T>
struct remove_const
{
 typedef T type;
};

template<class T>
struct remove_const<const T>
{
 typedef T type;
};

template<class T>
struct remove_volatile
{
 typedef T type;
};

template<class T>
struct remove_volatile<volatile T>
{
 typedef T type;
};

template<class T>
struct remove_cv
{
 typedef typename remove_const
  <typename remove_volatile<T>::type>::type type;
};


template<class T>
struct remove_pointer
{
 typedef T type;
};

template<class T>
struct remove_pointer<T *>
{
 typedef T type;
};

template<class T>
struct remove_pointer<T *const>
{
 typedef T type;
};

template<class T>
struct remove_pointer<T *volatile>
{
 typedef T type;
};

template<class T>
struct remove_pointer<T *const volatile>
{
 typedef T type;
};

template<bool ,
 class T = void>
 struct enable_if
{
};

template<class T>
struct enable_if<true, T>
{
 typedef T type;
};


template<class T>
struct _Is_number : false_type
{
};

template<>
struct _Is_number<unsigned short> : true_type
{
};

template<>
struct _Is_number<signed short> : true_type
{
};

template<>
struct _Is_number<unsigned int> : true_type
{
};

template<>
struct _Is_number<signed int> : true_type
{
};

template<>
struct _Is_number<unsigned long> : true_type
{
};

template<>
struct _Is_number<signed long> : true_type
{
};

template<>
struct _Is_number<long long> : true_type
{
};

template<>
struct _Is_number<unsigned long long> : true_type
{
};
# 166 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp"
template<class T>
struct is_number : _Is_number<typename remove_cv<T>::type>
{
};


template<class T>
struct _Is_string : false_type
{
};

template<>
struct _Is_string<std::string> : true_type
{
};

template<>
struct _Is_string<acl::string> : true_type
{
};

template<class T>
struct is_string : _Is_string<typename remove_cv<T>::type>
{
};


template<class T>
struct _Is_double : false_type
{
};

template<>
struct _Is_double<float> : true_type
{
};

template<>
struct _Is_double<double> : true_type
{
};

template<>
struct _Is_double<long double> : true_type
{
};

template <class T>
struct is_double : _Is_double<typename remove_const<T>::type>
{
};


template<class T>
struct _Is_char_ptr : false_type
{
};

template<>
struct _Is_char_ptr<char*> : true_type
{
};

template<class T>
struct is_char_ptr :_Is_char_ptr<typename remove_cv<T>::type>
{
};

template<class T>
struct _Is_bool : false_type
{
};

template<>
struct _Is_bool<bool> : true_type
{
};

template<class T>
struct is_bool : _Is_bool<typename remove_cv<T>::type>
{
};

template<bool T>
struct _Is_object :false_type
{
};

template<>
struct _Is_object<true> : true_type
{
};

template<class T>
struct is_object : _Is_object<
 !is_string<T>::value &&
 !is_double<T>::value &&
 !is_number<T>::value &&
 !is_bool<T>::value &&
 !is_char_ptr<T>::value>
{
};

template <class T>
static inline bool check_nullptr(T&)
{
 return false;
}

template<class T>
static inline bool check_nullptr(T *t)
{
 if (t == 
# 278 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp" 3 4
         __null
# 278 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp"
             )
  return true;
 return false;
}


template<class T>
typename enable_if<is_string<T>::value, const char *>::type
static inline get_value(const T &value)
{
 return value.c_str();
}

template<class T>
typename enable_if<is_string<T>::value, const char *>::type
static inline get_value(const T *value)
{
 return value->c_str();
}


static inline const char *get_value(const char *value)
{
 return value;
}


static inline bool get_value(const bool value)
{
 return value;
}

static inline bool get_value(const bool* value)
{
 return *value;
}


template <class T>
typename enable_if<is_number<T>::value, T>::type
static inline get_value(const T t)
{
 return t;
}



template <class T>
typename enable_if<is_number<T>::value, T>::type
static inline get_value(const T *t)
{
 return *t;
}

template <class T>
typename enable_if<is_double<T>::value, T>::type
static inline get_value(const T &t)
{
 return t;
}

template <class T>
typename enable_if<is_double<T>::value, T>::type
static inline get_value(const T *t)
{
 return *t;
}


template<class T>
typename enable_if<is_object<T>::value, void>::type
static inline add_item(acl::json &json, acl::json_node &node, const T &obj)
{
 if(check_nullptr(obj))
  node.add_array_null();
 else
  node.add_child(gson(json, obj));
}


template<class T>
typename enable_if<is_number<T>::value, void>::type
static inline add_item(acl::json &, acl::json_node &node, T value)
{
 node.add_array_number(get_value(value));
}

template<class T>
typename enable_if<is_number<T>::value, void>::type
static inline add_item(acl::json &, acl::json_node &node, T *value)
{
 if (check_nullptr(value))
  node.add_array_null();
 else
  node.add_array_number(get_value(value));
}

template<class T>
typename enable_if<is_double<T>::value, void>::type
static inline add_item(acl::json &, acl::json_node &node, T value)
{
 node.add_array_double(get_value(value));
}

template<class T>
typename enable_if<is_double<T>::value, void>::type
static inline add_item(acl::json &, acl::json_node &node, T* value)
{
 if(check_nullptr(value))
  node.add_array_null();
 else
  node.add_array_double(get_value(value));
}


template<class T>
typename enable_if<is_bool<T>::value, void>::type
static inline add_item(acl::json &, acl::json_node &node, T *value)
{
 if (check_nullptr(value))
  node.add_array_null();
 else
  node.add_array_bool(get_value(value));
}

template<class T>
typename enable_if<is_bool<T>::value, void>::type
static inline add_item(acl::json &, acl::json_node &node, T value)
{
 node.add_array_bool(get_value(value));
}

template<class T>
typename enable_if<is_string<T>::value, void>::type
static inline add_item(acl::json &, acl::json_node &node, T value)
{
 node.add_array_text(get_value(value));
}

template<class T>
typename enable_if<is_string<T>::value, void>::type
static inline add_item(acl::json &, acl::json_node &node, T *value)
{
 if (check_nullptr(value))
  node.add_array_null();
 else
  node.add_array_text(get_value(value));
}

static inline void add_item(acl::json &, acl::json_node &node, char *value)
{
 if (check_nullptr(value))
  node.add_array_null();
 else
  node.add_array_text(value);
}

template<class T>
static inline acl::json_node &gson(acl::json &json,
 const std::list<T> &objects)
{
 acl::json_node &node = json.create_array();
 for (typename std::list<T>::const_iterator
  itr = objects.begin(); itr != objects.end(); ++itr)
 {
  add_item(json, node, *itr);
 }

 return node;
}
template<class T>
static inline acl::json_node &gson(acl::json &json,
 const std::list<T> *objects)
{
 return gson(json, *objects);
}


template<class T>
static inline acl::json_node &gson(acl::json &json,
 const std::vector<T> &objects)
{
 acl::json_node &node = json.create_array();
 for (typename std::vector<T>::const_iterator
  itr = objects.begin(); itr != objects.end(); ++itr)
 {
  add_item(json, node, *itr);
 }

 return node;
}

template<class T>
static inline acl::json_node &gson(acl::json &json,
 const std::vector<T> *objects)
{
 return gson(json, *objects);
}

template<class T>
static inline acl::json_node &gson(acl::json &json, const std::set<T> *objects)
{
 return gson(json, *objects);
}

template<class T>
static inline acl::json_node &gson(acl::json &json,
 const std::set<T> &objects)
{
 acl::json_node &node = json.create_array();
 for (typename std::set<T>::const_iterator
  itr = objects.begin(); itr != objects.end(); ++itr)
 {
  add_item(json, node, *itr);
 }

 return node;
}


template<class K, class V>
typename enable_if<is_number<V>::value, acl::json_node &>::type
static inline gson(acl::json &json, const std::map<K, V> &objects)
{
 acl::json_node &node = json.create_array();
 for (typename std::map<K, V>::const_iterator
  itr = objects.begin(); itr != objects.end(); ++itr)
 {
  const char *tag = get_value(itr->first);
  if (check_nullptr(itr->second))
   node.add_child(json.create_node().add_null(tag));
  else
   node.add_child(json.create_node()
    .add_number(tag, get_value(itr->second)));
 }

 return node;
}


template<class K, class V>
typename enable_if< is_number<V>::value, acl::json_node &>::type
static inline gson(acl::json &json, const std::map<K, V> *objects)
{
 acl::json_node &node = json.create_array();
 for (typename std::map<K, V>::const_iterator
  itr = objects->begin(); itr != objects->end(); ++itr)
 {
  const char *tag = get_value(itr->first);
  if (check_nullptr(itr->second))
   node.add_child(json.create_node().add_null(tag));
  else
   node.add_child(json.create_node()
    .add_number(tag, get_value(itr->second)));
 }

 return node;
}


template<class K, class V>
typename enable_if<is_double<V>::value, acl::json_node &>::type
static inline gson(acl::json &json, const std::map<K, V> &objects)
{
 acl::json_node &node = json.create_array();
 for (typename std::map<K, V>::const_iterator
  itr = objects.begin(); itr != objects.end(); ++itr)
 {
  const char *tag = get_value(itr->first);
  if (check_nullptr(itr->second))
   node.add_child(json.create_node().add_null(tag));
  else
   node.add_child(json.create_node()
    .add_double(tag, get_value(itr->second)));
 }

 return node;
}

template<class K, class V>
typename enable_if<is_double<V>::value, acl::json_node &>::type
static inline gson(acl::json &json, const std::map<K, V> *objects)
{
 acl::json_node &node = json.create_array();
 for (typename std::map<K, V>::const_iterator
  itr = objects->begin(); itr != objects->end(); ++itr)
 {
  const char *tag = get_value(itr->first);
  if (check_nullptr(itr->second))
   node.add_child(json.create_node().add_null(tag));
  else
   node.add_child(json.create_node()
    .add_double(tag, get_value(itr->second)));
 }

 return node;
}


template<class K, class V>
typename enable_if<is_bool<V>::value, acl::json_node &>::type
static inline gson(acl::json &json, const std::map<K, V> &objects)
{
 acl::json_node &node = json.create_array();
 for (typename std::map<K, V>::const_iterator itr = objects.begin();
  itr != objects.end(); ++itr)
 {
  const char *tag = get_value(itr->first);
  if (check_nullptr(itr->second))
   node.add_child(json.create_node().add_null(tag));
  else
   node.add_child(json.create_node()
    .add_bool(tag, itr->second));
 }

 return node;
}

template<class K, class V>
typename enable_if<is_string<V>::value
 || is_char_ptr<V>::value, acl::json_node &>::type
static inline gson(acl::json &json, const std::map<K, V> & objects)
{
 acl::json_node &node = json.create_array();
 for (typename std::map<K, V>::const_iterator
  itr = objects.begin(); itr != objects.end(); ++itr)
 {
  const char *tag = get_value(itr->first);
  if (check_nullptr(itr->second))
   node.add_child(json.create_node().add_null(tag));
  else
   node.add_child(json.create_node()
    .add_text(tag, get_value(itr->second)));
 }

 return node;
}

template<class K, class V>
typename enable_if<is_string<V>::value
 || is_char_ptr<V>::value, acl::json_node &>::type
static inline gson(acl::json &json, const std::map<K, V*> & objects)
{
 acl::json_node &node = json.create_array();
 for (typename std::map<K, V*>::const_iterator
  itr = objects.begin(); itr != objects.end(); ++itr)
 {
  const char *tag = get_value(itr->first);
  if (check_nullptr(itr->second))
   node.add_child(json.create_node().add_null(tag));
  else
   node.add_child(json.create_node()
    .add_text(tag, get_value(itr->second)));
 }

 return node;
}

template<class T, class V>
typename enable_if<is_object<V>::value, acl::json_node &>::type
static inline gson(acl::json &json, const std::map<T, V> &objects)
{
 acl::json_node &node = json.create_array();
 for (typename std::map<T, V>::const_iterator
  itr = objects.begin(); itr != objects.end(); ++itr)
 {
  const char *tag = get_value(itr->first);
  if (check_nullptr(itr->second))
   node.add_child(json.create_node().add_null(tag));
  else
  {
   acl::json_node &item = gson(json, itr->second);
   node.add_child(json.create_node()
    .add_child(tag, item));
  }
 }

 return node;
}

template<class T, class V>
typename enable_if<is_object<V>::value, acl::json_node &>::type
static inline gson(acl::json &json, const std::map<T, V> *objects)
{
 return gson(json, *objects);
}

template<class T, class V>
typename enable_if<is_object<V>::value, acl::json_node &>::type
static inline gson(acl::json &json, const std::map<T, V*> &objects)
{
 acl::json_node &node = json.create_array();
 for (typename std::map<T, V*>::const_iterator
  itr = objects.begin(); itr != objects.end(); ++itr)
 {
  const char *tag = get_value(itr->first);
  if (check_nullptr(itr->second))
   node.add_child(json.create_node().add_null(tag));
  else
  {
   acl::json_node &item = gson(json, itr->second);
   node.add_child(json.create_node()
    .add_child(tag, item));
  }
 }

 return node;
}

template<class T, class V>
typename enable_if<is_object<V>::value, acl::json_node &>::type
static inline gson(acl::json &json, const std::map<T, V*> *objects)
{
 return gson(json, *objects);
}
# 703 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp"
template<class T>
static inline void del(T **obj)
{
 delete *obj;
 *obj = 
# 707 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp" 3 4
       __null
# 707 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp"
           ;
}

template<class T>
static inline void del(T *obj)
{
 (void) obj;
}


static inline std::pair<bool, std::string>
gson(acl::json_node &node, bool *obj)
{
 if (node.is_bool() == false)
  return std::make_pair(false, "get bool failed");

 *obj = *node.get_bool();
 return std::make_pair(true, "");
}

static inline std::pair<bool, std::string>
gson(acl::json_node &node, bool **obj)
{
 *obj = 
# 730 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp" 3 4
       __null
# 730 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp"
           ;
 if (node.is_bool() == false)
  return std::make_pair(false, "get bool failed");

 *obj = new bool;
 **obj = *node.get_bool();

 return std::make_pair(true, "");
}


template <class T>
typename enable_if<is_double<T>::value,
 std::pair<bool, std::string> >::type
static inline gson(acl::json_node &node, T *obj)
{
 if (node.is_double() == false)
  return std::make_pair(false, "get double failed");

 *obj = static_cast<T>(*node.get_double());
 return std::make_pair(true, "");
}

template <class T>
typename enable_if<is_double<T>::value,
 std::pair<bool, std::string> >::type
static inline gson(acl::json_node &node, T **obj)
{
 *obj = 
# 758 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp" 3 4
       __null
# 758 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp"
           ;
 if (node.is_double() == false)
  return std::make_pair(false, "get double failed");;

 *obj = new T;
 **obj = static_cast<T>(*node.get_double());

 return std::make_pair(true, "");
}


template <class T>
typename enable_if<is_number<T>::value,
  std::pair<bool, std::string> >::type
static inline gson(acl::json_node &node, T *obj)
{
 if (node.is_number() == false)
  return std::make_pair(false, "get number failed");

 *obj = static_cast<T>(*node.get_int64());
 return std::make_pair(true, "");
}

template <class T>
typename enable_if<is_number<T>::value,
  std::pair<bool, std::string> >::type
static inline gson(acl::json_node &node, T **obj)
{
 *obj = 
# 786 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp" 3 4
       __null
# 786 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp"
           ;
 if (node.is_number() == false)
  return std::make_pair(false, "get number failed");;

 *obj = new T;
 **obj = static_cast<T>(*node.get_int64());

 return std::make_pair(true, "");
}


static inline std::pair<bool, std::string>
gson(acl::json_node &node, char **obj)
{
 *obj = 
# 800 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp" 3 4
       __null
# 800 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp"
           ;
 if (node.is_string() == false)
  return std::make_pair(false, "get char * string failed");

 int len = (int) strlen(node.get_string());
 *obj = new char[len + 1];
 memcpy(*obj, node.get_string(), len);
 (*obj)[len] = 0;

 return std::make_pair(true, "");
}

static inline std::pair<bool, std::string>
gson(acl::json_node &node, acl::string &obj)
{
 if (node.is_string() == false)
  return std::make_pair(false, "get string failed");
 obj.clear();
 obj.append(node.get_string());

 return std::make_pair(true, "");
}

static inline std::pair<bool, std::string>
gson(acl::json_node &node, acl::string *obj)
{
 if (node.is_string() == false)
  return std::make_pair(false, "get string failed");
 obj->clear();
 obj->append(node.get_string());
 return std::make_pair(true, "");
}

static inline std::pair<bool, std::string>
gson(acl::json_node &node, acl::string **obj)
{
 *obj = 
# 836 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp" 3 4
       __null
# 836 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp"
           ;
 if (node.is_string() == false)
  return std::make_pair(false, "get string failed");

 *obj = new acl::string;
 (*obj)->append(node.get_string());

 return std::make_pair(true, "");
}

static inline std::pair<bool, std::string>
gson(acl::json_node &node, std::string &obj)
{
 if (node.is_string() == false)
  return std::make_pair(false, "get string failed");
 obj.clear();
 obj.append(node.get_string());
 return std::make_pair(true, "");
}

static inline std::pair<bool, std::string>
gson(acl::json_node &node, std::string *obj)
{
 if (node.is_string() == false)
  return std::make_pair(false, "get string failed");
 obj->clear();
 obj->append(node.get_string());
 return std::make_pair(true, "");
}

static inline std::pair<bool, std::string>
gson(acl::json_node &node, std::string **obj)
{
 *obj = 
# 869 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp" 3 4
       __null
# 869 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp"
           ;
 if (node.is_string() == false)
  return std::make_pair(false, "get string failed");

 *obj = new std::string;
 (*obj)->append(node.get_string());

 return std::make_pair(true, "");
}


template<class T>
static inline std::pair<bool, std::string>
gson(acl::json_node &node, std::list<T> *objs)
{
 std::pair<bool, std::string> result;
 acl::json_node *itr = node.first_child();

 if (itr == 
# 887 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp" 3 4
           __null
# 887 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp"
               )
 {

  objs->clear();
  return std::make_pair(true, "");
 }

 while (itr)
 {




  objs->push_back(T());
  typename std::list<T>::iterator it = objs->end();
  --it;
  result = gson(*itr, &*it);
  if (!result.first)
  {
   break;
  }
  itr = node.next_child();
 }
 if (result.first)
  return result;

 objs->clear();
 return result;
}


template<class T>
static inline std::pair<bool, std::string>
gson(acl::json_node &node, std::list<T*> *objs)
{
 std::pair<bool, std::string> result;
 acl::json_node *itr = node.first_child();

 if (itr == 
# 925 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp" 3 4
           __null
# 925 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp"
               )
 {

  objs->clear();
  return std::make_pair(true, "");
 }

 while (itr)
 {
  T* obj = new T;
  objs->push_back(obj);
  result = gson(*itr, obj);
  if (!result.first)
  {
   break;
  }
  itr = node.next_child();
 }
 if(objs->size())
 {
  delete *objs->begin();
  objs->pop_front();
 }
 return result;
}


template<class T>
std::pair<bool, std::string>
static inline gson(acl::json_node &node, std::vector<T> *objs)
{
 std::pair<bool, std::string> result;
 acl::json_node *itr = node.first_child();

 if (itr == 
# 959 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp" 3 4
           __null
# 959 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp"
               )
 {

  objs->clear();
  return std::make_pair(true, "");
 }

 while (itr)
 {



  objs->push_back(T());
  typename std::vector<T>::iterator it = objs->end();
  --it;
  result = gson(*itr, &*it);
  if (!result.first)
   break;
  itr = node.next_child();
 }
 if(result.first)
  return result;
 objs->clear();
 return result;
}


template<class T>
std::pair<bool, std::string>
static inline gson(acl::json_node &node, std::vector<T*> *objs)
{
 std::pair<bool, std::string> result;
 acl::json_node *itr = node.first_child();

 if (itr == 
# 993 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp" 3 4
           __null
# 993 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp"
               )
 {

  objs->clear();
  return std::make_pair(true, "");
 }

 while (itr)
 {
  T* obj = new T;
  objs->push_back(obj);
  typename std::vector<T*>::iterator it = objs->end();
  --it;
  result = gson(*itr, *it);
  if (!result.first)
  {
   break;
  }
  itr = node.next_child();
 }
 if(result.first)
  return result;

 while(objs->size())
 {
  T *obj = (*objs)[0];
  delete obj;
  objs->pop_back();
 }
 return result;
}


template<class T>
std::pair<bool, std::string>
static inline gson(acl::json_node &node, std::set<T*> *objs)
{
 std::pair<bool, std::string> result;
 acl::json_node *itr = node.first_child();

 if (itr == 
# 1033 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp" 3 4
           __null
# 1033 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp"
               )
 {

  objs->clear();
  return std::make_pair(true, "");
 }

 while (itr)
 {
  T* obj = new T;
  result = gson(*itr, obj);
  if (!result.first)
  {
   delete obj;
   break;
  }
  objs->insert(obj);
  itr = node.next_child();
 }

 if (result.first)
  return result;

 while(objs->size())
 {
  T* obj = *objs->begin();
  objs->erase(objs->begin());
  delete obj;
 }
 return result;
}

template<class T>
std::pair<bool, std::string>
static inline gson(acl::json_node &node, std::set<T> *objs)
{
 std::pair<bool, std::string> result;
 acl::json_node *itr = node.first_child();

 if (itr == 
# 1072 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp" 3 4
           __null
# 1072 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp"
               )
 {

  objs->clear();
  return std::make_pair(true, "");
 }

 while (itr)
 {
  T obj = T();
  result = gson(*itr, &obj);
  if (!result.first)
  {
   break;
  }
  objs->insert(obj);
  itr = node.next_child();
 }

 if (result.first)
  return result;

 objs->clear();
 return result;
}

template <class T>
typename enable_if<is_object<T>::value,
 std::pair<bool, std::string> >::type
static inline gson(acl::json_node &node, T **obj)
{
 *obj = new T();
 std::pair<bool, std::string> result = gson(node, *obj);
 if (result.first == false)
 {
  delete *obj;
  *obj = 
# 1108 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp" 3 4
        __null
# 1108 "/workspace/acl/lib_acl_cpp/include/acl_cpp/serialize/gson_helper.ipp"
            ;
 }

 return result;
}




template<class K, class T>
typename enable_if<
 is_string<T>::value||
 is_bool<T>::value||
 is_number<T>::value||
 is_double<T>::value||
 is_char_ptr<T>::value,
 std::pair<bool, std::string> >::type
static inline expand(acl::json_node &node, std::map<K, T> *objs)
{
 std::pair<bool, std::string> result;
 acl::json_node *itr = node.first_child();
 while (itr)
 {
  T obj;
  result = gson(*itr, &obj);
  if (!result.first)
   break;

  objs->insert(std::make_pair(K(itr->tag_name()), obj));
  itr = node.next_child();
 }

 if (result.first)
  return std::make_pair(true, "");

 for (typename std::map<K, T>::iterator it = objs->begin();
  it != objs->end(); ++it)
 {
  del(&it->second);
 }

 objs->clear();
 return result;
}

template<class K, class T>
typename enable_if <is_object<T>::value ,
 std::pair<bool, std::string > > ::type
static inline expand(acl::json_node &node, std::map<K, T> *objs)
{
 std::pair<bool, std::string> result;
 acl::json_node *itr = node.first_child();

 while (itr && itr->get_obj())
 {
  T obj;
  result = gson(*(itr->get_obj()), &obj);
  if (!result.first)
   break;

  objs->insert(std::make_pair(K(itr->tag_name()), obj));
  itr = node.next_child();
 }

 if (result.first)
  return std::make_pair(true, "");

 for (typename std::map<K, T>::iterator itr2 = objs->begin();
  itr2 != objs->end(); ++itr2)
 {
  del(&itr2->second);
 }

 objs->clear();
 return result;
}


template<class K, class V>
std::pair<bool, std::string>
static inline gson(acl::json_node &node, std::map<K, V> *objs)
{
 std::pair<bool, std::string> result;
 acl::json_node *itr = node.first_child();
 std::string error_string;

 while (itr)
 {
  result = expand(*itr, objs);
  if (result.first == false)
   error_string.append(result.second);
  itr = node.next_child();
 }

 return std::make_pair(!!!objs->empty(), error_string);
}

template<class K, class T>
typename enable_if<
 is_string<T>::value||
 is_bool<T>::value||
 is_number<T>::value||
 is_double<T>::value||
 is_char_ptr<T>::value,
 std::pair<bool, std::string> >::type
static inline expand(acl::json_node &node, std::map<K, T*> *objs)
{
 std::pair<bool, std::string> result;
 acl::json_node *itr = node.first_child();
 while (itr)
 {
  T* obj = new T;
  result = gson(*itr, obj);
  if (!result.first)
   break;

  objs->insert(std::make_pair(K(itr->tag_name()), obj));
  itr = node.next_child();
 }

 if (result.first)
  return std::make_pair(true, "");

 for (typename std::map<K, T*>::iterator it = objs->begin();
  it != objs->end(); ++it)
 {
  del(&it->second);
 }

 objs->clear();
 return result;
}

template<class K, class T>
typename enable_if <is_object<T>::value ,
 std::pair<bool, std::string > > ::type
static inline expand(acl::json_node &node, std::map<K, T*> *objs)
{
 std::pair<bool, std::string> result;
 acl::json_node *itr = node.first_child();

 while (itr && itr->get_obj())
 {
  T* obj = new T;
  result = gson(*(itr->get_obj()), obj);
  if (!result.first)
   break;

  objs->insert(std::make_pair(K(itr->tag_name()), obj));
  itr = node.next_child();
 }

 if (result.first)
  return std::make_pair(true, "");

 for (typename std::map<K, T*>::iterator itr2 = objs->begin();
  itr2 != objs->end(); ++itr2)
 {
  del(&itr2->second);
 }

 objs->clear();
 return result;
}


template<class K, class V>
std::pair<bool, std::string>
static inline gson(acl::json_node &node, std::map<K, V*> *objs)
{
 std::pair<bool, std::string> result;
 acl::json_node *itr = node.first_child();
 std::string error_string;

 while (itr)
 {
  result = expand(*itr, objs);
  if (result.first == false)
   error_string.append(result.second);
  itr = node.next_child();
 }

 return std::make_pair(!!!objs->empty(), error_string);
}

}
# 48 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/memcache.hpp" 1
       


# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/../connpool/connect_client.hpp" 1
       



namespace acl
{

class connect_pool;

class connect_client : public noncopyable
{
public:
 connect_client(void)
 : conn_timeout_(5)
 , rw_timeout_(5)
 , when_(0)
 , pool_(
# 17 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/../connpool/connect_client.hpp" 3 4
        __null
# 17 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/../connpool/connect_client.hpp"
            ) {}

 virtual ~connect_client() {}





 time_t get_when()
 {
  return when_;
 }




 void set_when(time_t when)
 {
  when_ = when;
 }





 virtual bool open() = 0;






 connect_pool* get_pool() const
 {
  return pool_;
 }

public:






 virtual void set_timeout(int conn_timeout, int rw_timeout)
 {
  conn_timeout_ = conn_timeout;
  rw_timeout_ = rw_timeout;
 }

protected:
 int conn_timeout_;
 int rw_timeout_;

 friend class connect_pool;

 time_t when_;
 connect_pool* pool_;

 void set_pool(connect_pool* pool)
 {
  pool_ = pool;
 }
};

}
# 5 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/memcache.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/../mime/rfc2047.hpp" 1
       






namespace acl {

class string;
class mime_code;

struct rfc2047_entry
{
 string* pData;
 string* pCharset;
 char coding;
};

class rfc2047 : public noncopyable
{
public:






 rfc2047(bool strip_sp = true, bool addCrlf = true);
 ~rfc2047(void);







 void decode_update(const char* in, int n);
# 49 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/../mime/rfc2047.hpp"
 bool decode_finish(const char* to_charset, string* out,
  bool addInvalid = true);
# 62 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/../mime/rfc2047.hpp"
 bool encode_update(const char* in, int n, string* out,
  const char* charset = "gb2312", char coding = 'B');






 bool encode_finish(string* out);
# 83 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/../mime/rfc2047.hpp"
 static bool encode(const char* in, int n, string* out,
  const char* charset = "gb2312", char coding = 'B',
  bool addCrlf = true);
# 98 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/../mime/rfc2047.hpp"
 static bool decode(const char* in, int n, string* out,
  const char* to_charset = "gb2312", bool strip_sp = false,
  bool addInvalid = true);





 const std::list<rfc2047_entry*>& get_list(void) const;





 void reset(bool strip_sp = true);




 void debug_rfc2047(void) const;

private:
 std::list<rfc2047_entry*> m_List;
 rfc2047_entry* m_pCurrentEntry;
 mime_code* m_coder;
 int m_status;
 bool m_stripSp;
 bool m_addCrlf;
 char m_lastCh;

public:


 int status_next(const char* s, int n);
 int status_data(const char* s, int n);
 int status_charset(const char* s, int n);
 int status_coding(const char* s, int n);
 int status_equal_question(const char* s, int n);
 int status_question_first(const char* s, int n);
 int status_question_second(const char* s, int n);
 int status_question_equal(const char* s, int n);
};

}
# 7 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/memcache.hpp" 2



namespace acl {

class socket_stream;

typedef class memcache mem_cache;




class memcache : public connect_client
{
public:







 memcache(const char* addr = "127.0.0.1:11211", int conn_timeout = 30,
  int rw_timeout = 10);

 ~memcache();
# 41 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/memcache.hpp"
 memcache& set_prefix(const char* keypre);






 memcache& auto_retry(bool onoff);







 memcache& encode_key(bool onoff);
# 68 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/memcache.hpp"
 bool set(const char* key, size_t klen,
  const void* dat, size_t dlen,
  time_t timeout = 0, unsigned short flags = 0);
# 81 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/memcache.hpp"
 bool set(const char* key, const void* dat, size_t dlen,
  time_t timeout = 0, unsigned short flags = 0);
# 93 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/memcache.hpp"
 bool set(const char* key, size_t klen, time_t timeout = 0);
# 103 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/memcache.hpp"
 bool set(const char* key, time_t timeout = 0);
# 113 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/memcache.hpp"
 bool set_begin(const char* key, size_t dlen,
  time_t timeout = 0, unsigned short flags = 0);
# 124 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/memcache.hpp"
 bool set_data(const void* data, size_t len);
# 135 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/memcache.hpp"
 bool get(const char* key, size_t klen, string& buf,
  unsigned short* flags = 
# 136 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/memcache.hpp" 3 4
                         __null
# 136 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/memcache.hpp"
                             );
# 146 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/memcache.hpp"
 bool get(const char* key, string& buf, unsigned short* flags = 
# 146 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/memcache.hpp" 3 4
                                                               __null
# 146 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/memcache.hpp"
                                                                   );
# 158 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/memcache.hpp"
 int get_begin(const void* key, size_t klen, unsigned short* flags = 
# 158 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/memcache.hpp" 3 4
                                                                    __null
# 158 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/memcache.hpp"
                                                                        );
# 169 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/memcache.hpp"
 int get_begin(const char* key, unsigned short* flags = 
# 169 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/memcache.hpp" 3 4
                                                       __null
# 169 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/memcache.hpp"
                                                           );
# 180 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/memcache.hpp"
 int get_data(void* buf, size_t size);







 bool del(const char* key, size_t klen);






 bool del(const char* key);





 const char* last_serror() const;





 int last_error() const;







 virtual bool open();





 void close();




 void property_list();

private:
 bool set(const string& key, const void* dat, size_t dlen,
  time_t timeout, unsigned short flags);
 bool get(const string& key, string& buf, unsigned short* flags);
 const string& build_key(const char* key, size_t klen);

 string* keypre_;
 rfc2047 coder_;
 bool encode_key_;

 bool opened_;
 bool retry_;
 char* addr_;
 int enum_;
 string ebuf_;
 string kbuf_;

 size_t content_length_;
 size_t length_;

 socket_stream* conn_;
 string req_line_;
 string res_line_;
 bool error_happen(const char* line);
};

}
# 50 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/memcache_pool.hpp" 1
       

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/../connpool/connect_pool.hpp" 1
       





namespace acl
{

class connect_manager;
class connect_client;







class connect_pool : public noncopyable
{
public:







 connect_pool(const char* addr, size_t max, size_t idx = 0);




 virtual ~connect_pool();






 connect_pool& set_timeout(int conn_timeout, int rw_timeout);
# 50 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/../connpool/connect_pool.hpp"
 connect_pool& set_retry_inter(int retry_inter);







 connect_pool& set_idle_ttl(time_t ttl);






 connect_pool& set_check_inter(int n);
# 75 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/../connpool/connect_pool.hpp"
 connect_client* peek(bool on = true);






 void bind_one(connect_client* conn);







 void put(connect_client* conn, bool keep = true);







 int check_idle(time_t ttl, bool exclusive = true);





 void set_alive(bool ok );







 bool aliving();





 const char* get_addr() const
 {
  return addr_;
 }





 size_t get_max() const
 {
  return max_;
 }





 size_t get_count() const
 {
  return count_;
 }





 size_t get_idx() const
 {
  return idx_;
 }





 void reset_statistics(int inter);




 unsigned long long get_total_used() const
 {
  return total_used_;
 }





 unsigned long long get_current_used() const
 {
  return current_used_;
 }

public:
 void set_key(const char* key);
 const char* get_key(void) const
 {
  return key_;
 }

protected:




 virtual connect_client* create_connect() = 0;

 friend class connect_manager;




 void set_delay_destroy();

protected:
 bool alive_;
 bool delay_destroy_;

 int retry_inter_;
 time_t last_dead_;

 char key_[256];
 char addr_[256];
 int conn_timeout_;
 int rw_timeout_;
 size_t idx_;
 size_t max_;
 size_t count_;
 time_t idle_ttl_;
 time_t last_check_;
 int check_inter_;

 locker lock_;
 unsigned long long total_used_;
 unsigned long long current_used_;
 time_t last_;
 std::list<connect_client*> pool_;
};

class connect_guard : public noncopyable
{
public:
 connect_guard(connect_pool& pool)
 : keep_(true), pool_(pool), conn_(
# 223 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/../connpool/connect_pool.hpp" 3 4
                                  __null
# 223 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/../connpool/connect_pool.hpp"
                                      )
 {
 }

 virtual ~connect_guard(void)
 {
  if (conn_)
   pool_.put(conn_, keep_);
 }

 void set_keep(bool keep)
 {
  keep_ = keep;
 }

 connect_client* peek(void)
 {
  conn_ = pool_.peek();
  return conn_;
 }

protected:
 bool keep_;
 connect_pool& pool_;
 connect_client* conn_;
};

}
# 4 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/memcache_pool.hpp" 2



namespace acl
{
# 18 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/memcache_pool.hpp"
class memcache_pool : public connect_pool
{
public:






 memcache_pool(const char* addr, size_t count, size_t idx = 0);
 ~memcache_pool();

protected:

 virtual connect_client* create_connect();
};

}
# 51 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/memcache_manager.hpp" 1
       

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/../connpool/connect_manager.hpp" 1
       







struct ACL_EVENT;

namespace acl
{

class connect_pool;
class connect_monitor;


struct conns_pools {
 std::vector<connect_pool*> pools;
 size_t check_next;
 size_t conns_next;
 conns_pools(void)
 {
  check_next = 0;
  conns_next = 0;
 }
};

struct conn_config {
 string addr;
 size_t count;
 int conn_timeout;
 int rw_timeout;

 conn_config(void) {
  count = 0;
  conn_timeout = 5;
  rw_timeout = 5;
 }
};




class connect_manager : public noncopyable
{
public:
 connect_manager(void);
 virtual ~connect_manager(void);






 void bind_thread(bool yes);
# 72 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/../connpool/connect_manager.hpp"
 void init(const char* default_addr, const char* addr_list,
  size_t count, int conn_timeout = 30, int rw_timeout = 30);
# 84 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/../connpool/connect_manager.hpp"
 void set(const char* addr, size_t count,
  int conn_timeout = 30, int rw_timeout = 30);
# 94 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/../connpool/connect_manager.hpp"
 const conn_config* get_config(const char* addr, bool use_first = false);






 void set_retry_inter(int n);






 void set_idle_ttl(time_t ttl);





 void set_check_inter(int n);






 void remove(const char* addr);
# 132 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/../connpool/connect_manager.hpp"
 connect_pool* get(const char* addr, bool exclusive = true,
  bool restore = false);
# 142 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/../connpool/connect_manager.hpp"
 virtual connect_pool* peek(void);
# 154 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/../connpool/connect_manager.hpp"
 virtual connect_pool* peek(const char* key, bool exclusive = true);




 void lock(void);




 void unlock(void);





 std::vector<connect_pool*>& get_pools(void);







 size_t check_idle(size_t step, size_t* left = 
# 178 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/../connpool/connect_manager.hpp" 3 4
                                              __null
# 178 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/../connpool/connect_manager.hpp"
                                                  );





 size_t size(void) const;






 connect_pool* get_default_pool(void)
 {
  return default_pool_;
 }




 void statistics(void);







 bool start_monitor(connect_monitor* monitor);
# 218 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/../connpool/connect_manager.hpp"
 connect_monitor* stop_monitor(bool graceful = true);






 void set_pools_status(const char* addr, bool alive);

protected:







 virtual connect_pool* create_pool(const char* addr,
  size_t count, size_t idx) = 0;

protected:
 typedef std::vector<connect_pool*> pools_t;
 typedef pools_t::iterator pools_it;
 typedef pools_t::const_iterator pools_cit;

 typedef std::map<unsigned long, conns_pools*> manager_t;
 typedef manager_t::iterator manager_it;
 typedef manager_t::const_iterator manager_cit;

 bool thread_binding_;
 string default_addr_;
 connect_pool* default_pool_;

 std::map<string, conn_config> addrs_;
 manager_t manager_;

 locker lock_;
 int stat_inter_;
 int retry_inter_;
 time_t idle_ttl_;
 int check_inter_;
 connect_monitor* monitor_;


 void set_service_list(const char* addr_list, int count,
  int conn_timeout, int rw_timeout);
 conns_pools& get_pools_by_id(unsigned long id);
 connect_pool* create_pool(const conn_config& cf, size_t idx);
 void create_pools_for(pools_t& pools);

 void remove(pools_t& pools, const char* addr);
 void set_status(pools_t& pools, const char* addr, bool alive);

 unsigned long get_id(void) const;
 void get_key(const char* addr, string& key);
 void get_addr(const char* key, string& addr);
 connect_pool* add_pool(const char* addr);


 static void thread_oninit(void);

 static void thread_onexit(void* ctx);
};

}
# 4 "/workspace/acl/lib_acl_cpp/include/acl_cpp/memcache/memcache_manager.hpp" 2



namespace acl
{




class memcache_manager : public connect_manager
{
public:
 memcache_manager();
 virtual ~memcache_manager();

protected:






 connect_pool* create_pool(const char* addr, size_t count, size_t idx);
};

}
# 52 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/session/session.hpp" 1
       







namespace acl {



typedef enum
{
 TODO_NUL,
 TODO_SET,
 TODO_DEL
} todo_t;

class session_string : public string
{
public:
 session_string(size_t n = 64) : string(n), todo_(TODO_NUL) {}
 session_string(const session_string& ss) : string(ss)
 {
  todo_ = ss.todo_;
 }
 session_string(const string& s) : string(s), todo_(TODO_NUL) {}
 session_string(const char* s) : string(s), todo_(TODO_NUL) {}
 ~session_string() {}

 session_string& operator= (const session_string& ss)
 {
  if (!ss.empty()) {
   this->copy(ss.c_str(), ss.size());
  }
  todo_ = ss.todo_;
  return *this;
 }

 todo_t todo_;
};




class session : public dbuf_obj
{
public:
# 62 "/workspace/acl/lib_acl_cpp/include/acl_cpp/session/session.hpp"
 session(time_t ttl = 0, const char* sid = 
# 62 "/workspace/acl/lib_acl_cpp/include/acl_cpp/session/session.hpp" 3 4
                                          __null
# 62 "/workspace/acl/lib_acl_cpp/include/acl_cpp/session/session.hpp"
                                              );
 virtual ~session(void);




 void reset(void);





 virtual const char* get_sid(void) const
 {
  return sid_.c_str();
 }






 void set_sid(const char* sid);






 virtual bool flush();
# 100 "/workspace/acl/lib_acl_cpp/include/acl_cpp/session/session.hpp"
 virtual bool set(const char* name, const char* value);
# 109 "/workspace/acl/lib_acl_cpp/include/acl_cpp/session/session.hpp"
 virtual bool set(const char* name, const void* value, size_t len);
# 119 "/workspace/acl/lib_acl_cpp/include/acl_cpp/session/session.hpp"
 virtual bool set_delay(const char* name, const void* value, size_t len);
# 129 "/workspace/acl/lib_acl_cpp/include/acl_cpp/session/session.hpp"
 const char* get(const char* name);
# 139 "/workspace/acl/lib_acl_cpp/include/acl_cpp/session/session.hpp"
 virtual const session_string* get_buf(const char* name);
# 150 "/workspace/acl/lib_acl_cpp/include/acl_cpp/session/session.hpp"
 virtual bool del_delay(const char* name);
 virtual bool del(const char* name);
# 161 "/workspace/acl/lib_acl_cpp/include/acl_cpp/session/session.hpp"
 bool set_ttl(time_t ttl, bool delay);







 time_t get_ttl(void) const
 {
  return ttl_;
 }





 virtual bool remove(void) = 0;






 virtual bool get_attrs(std::map<string, session_string>& attrs) = 0;







 virtual bool get_attrs(const std::vector<string>& names,
  std::vector<session_string>& values);






 virtual bool set_attrs(const std::map<string, session_string>& attrs) = 0;

protected:

 virtual bool set_timeout(time_t ttl) = 0;

protected:

 static void serialize(const std::map<string, session_string>& attrs,
  string& out);


 static void deserialize(string& buf,
  std::map<string, session_string>& attrs);


 static void attrs_clear(std::map<string, session_string>& attrs);

protected:
 session_string sid_;
 time_t ttl_;




 bool sid_saved_;
 bool dirty_;
 std::map<string, session_string> attrs_;
 std::map<string, session_string> attrs_cache_;
};

}
# 54 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/session/redis_session.hpp" 1
       







namespace acl
{

class redis;
class redis_client_cluster;

class redis_session : public session
{
public:
 redis_session(redis_client_cluster& cluster,
  time_t ttl = 0, const char* sid = 
# 19 "/workspace/acl/lib_acl_cpp/include/acl_cpp/session/redis_session.hpp" 3 4
                                   __null
# 19 "/workspace/acl/lib_acl_cpp/include/acl_cpp/session/redis_session.hpp"
                                       );
 ~redis_session();


 bool set(const char* name, const char* value);


 bool set(const char* name, const void* value, size_t len);


 const session_string* get_buf(const char* name);


 bool del(const char* name);


 bool remove();


 bool get_attrs(std::map<string, session_string>& attrs);


 bool get_attrs(const std::vector<string>& names,
  std::vector<session_string>& values);


 bool set_attrs(const std::map<string, session_string>& attrs);

protected:

 bool set_timeout(time_t ttl);

private:
 redis_client_cluster& cluster_;
 redis* command_;

 std::map<string, session_string*> buffers_;
};

}
# 55 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/session/memcache_session.hpp" 1
       





namespace acl {

class memcache;




class memcache_session : public session
{
public:
# 29 "/workspace/acl/lib_acl_cpp/include/acl_cpp/session/memcache_session.hpp"
 memcache_session(const char* cache_addr, int conn_timeout = 180,
  int rw_timeout = 300, const char* prefix = 
# 30 "/workspace/acl/lib_acl_cpp/include/acl_cpp/session/memcache_session.hpp" 3 4
                                            __null
# 30 "/workspace/acl/lib_acl_cpp/include/acl_cpp/session/memcache_session.hpp"
                                                ,
  time_t ttl = 0, const char* sid = 
# 31 "/workspace/acl/lib_acl_cpp/include/acl_cpp/session/memcache_session.hpp" 3 4
                                   __null
# 31 "/workspace/acl/lib_acl_cpp/include/acl_cpp/session/memcache_session.hpp"
                                       , bool encode_key = true);
# 43 "/workspace/acl/lib_acl_cpp/include/acl_cpp/session/memcache_session.hpp"
 memcache_session(memcache* cache, bool auto_free = false,
  time_t ttl = 0, const char* sid = 
# 44 "/workspace/acl/lib_acl_cpp/include/acl_cpp/session/memcache_session.hpp" 3 4
                                   __null
# 44 "/workspace/acl/lib_acl_cpp/include/acl_cpp/session/memcache_session.hpp"
                                       );

 ~memcache_session(void);


 bool get_attrs(std::map<string, session_string>& attrs);


 bool set_attrs(const std::map<string, session_string>& attrs);


 bool remove();

protected:

 bool set_timeout(time_t ttl);

private:
 memcache* cache_;
 bool auto_free_;
};

}
# 56 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/net/rfc1035.hpp" 1




       




struct ACL_RFC1035_MESSAGE;

namespace acl {

typedef enum {
 rfc1035_type_null,
 rfc1035_type_a,
 rfc1035_type_aaaa,
 rfc1035_type_mx,
 rfc1035_type_txt,
 rfc1035_type_ptr,
} rfc1035_type_t;

class rfc1035_request {
public:
 rfc1035_request(void);
 ~rfc1035_request(void);

 rfc1035_request& set_name(const char* name);
 rfc1035_request& set_qid(unsigned short id);
 rfc1035_request& set_type(rfc1035_type_t type);

 const char* get_name(void) const {
  return name_;
 }

 unsigned short get_qid(void) const {
  return qid_;
 }

 rfc1035_type_t get_type(void) const {
  return type_;
 }

public:
 size_t build_query(char* buf, size_t size);
 size_t build_query4ptr(const struct in_addr addr, char* buf, size_t size);
 bool parse_request(const void* buf, size_t len);

private:
 char name_[256];
 unsigned short qid_;
 rfc1035_type_t type_;
};

class rfc1035_response {
public:
 rfc1035_response(void);
 ~rfc1035_response(void);

 rfc1035_response& set_name(const char* name);
 rfc1035_response& set_qid(unsigned short id);
 rfc1035_response& set_type(rfc1035_type_t type);
 rfc1035_response& set_ttl(int ttl);

 const char* get_name(void) const {
  return name_;
 }

 unsigned short get_qid(void) const {
  return qid_;
 }

 rfc1035_type_t get_type(void) const {
  return type_;
 }

 int get_ttl(void) const {
  return ttl_;
 }

 const std::vector<string>& get_addrs4a(void) const {
  return addrs4a_;
 }

 const std::vector<string>& get_addrs4aaaa(void) const {
  return addrs4aaaa_;
 }

 const std::vector<string>& get_cnames(void) const {
  return cnames_;
 }

public:
 size_t build_reply(const std::vector<string>& addrs,
  char* buf, size_t size);
 bool parse_reply(const void* buf, size_t len);

private:
 char name_[256];
 unsigned short qid_;
 rfc1035_type_t type_;
 int ttl_;
 std::vector<string> addrs4a_;
 std::vector<string> addrs4aaaa_;
 std::vector<string> cnames_;
};

}
# 58 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/stream.hpp" 1
       





struct ACL_VSTREAM;

namespace acl {




typedef enum {
 time_unit_s,
 time_unit_ms,
 time_unit_us,
 time_unit_ns,
} time_unit_t;

class stream_hook;
class dbuf_pool;

class stream : public noncopyable {
public:
 stream(void);
 virtual ~stream(void) = 0;





 bool close(void);





 bool eof(void) const;




 void clear_eof(void);





 bool opened(void) const;





 ACL_VSTREAM* get_vstream(void) const;
# 66 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/stream.hpp"
 ACL_VSTREAM* unbind(void);
# 75 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/stream.hpp"
 bool set_ctx(void* ctx, const char* key = 
# 75 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/stream.hpp" 3 4
                                          __null
# 75 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/stream.hpp"
                                              , bool replace = true);







 void* get_ctx(const char* key = 
# 83 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/stream.hpp" 3 4
                                __null
# 83 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/stream.hpp"
                                    ) const;







 void* del_ctx(const char* key = 
# 91 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/stream.hpp" 3 4
                                __null
# 91 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/stream.hpp"
                                    );






 void set_rw_timeout(int n);





 void set_time_unit(time_unit_t unit);





 int get_rw_timeout(void) const;
# 120 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/stream.hpp"
 stream_hook* setup_hook(stream_hook* hook);





 stream_hook* get_hook(void) const;





 stream_hook* remove_hook(void);

public:





 string& get_buf(void);





 dbuf_pool& get_dbuf(void);

protected:



 void open_stream(bool is_file = false);




 void reopen_stream(bool is_file = false);

protected:
 stream_hook* hook_;
 ACL_VSTREAM *stream_;
 string* buf_;
 dbuf_pool* dbuf_;

 void* default_ctx_;
 std::map<string, void*>* ctx_table_;

 bool eof_;
 bool opened_;

private:
# 183 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/stream.hpp"
 static int read_hook(int fd, void *buf, size_t len,
  int timeout, ACL_VSTREAM* stream, void *ctx);
 static int send_hook(int fd, const void *buf, size_t len,
  int timeout, ACL_VSTREAM* stream, void *ctx);

 static int fread_hook(int fd, void *buf, size_t len,
  int timeout, ACL_VSTREAM* stream, void *ctx);
 static int fsend_hook(int fd, const void *buf, size_t len,
  int timeout, ACL_VSTREAM* stream, void *ctx);

};

}
# 60 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/istream.hpp" 1
       

# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 4 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/istream.hpp" 2


namespace acl {

class string;






class istream : virtual public stream {
public:
 istream(void) {}
 virtual ~istream(void) {}
# 27 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/istream.hpp"
 int read(void* buf, size_t size, bool loop = true);
# 39 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/istream.hpp"
 bool readtags(void *buf, size_t* inout, const char *tag, size_t len);
# 55 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/istream.hpp"
 bool gets(void* buf, size_t* size_inout, bool nonl = true);
# 66 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/istream.hpp"
 bool read(long long int& n, bool loop = true);
# 75 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/istream.hpp"
 bool read(int& n, bool loop = true);







 bool read(short& n, bool loop = true);






 bool read(char& ch);
# 99 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/istream.hpp"
 bool read(string& s, bool loop = true);
 bool read(string* s, bool loop = true);
# 109 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/istream.hpp"
 bool read(string& s, size_t max, bool loop = true);
 bool read(string* s, size_t max, bool loop = true);
# 125 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/istream.hpp"
 bool gets(string& s, bool nonl = true, size_t max = 0);
 bool gets(string* s, bool nonl = true, size_t max = 0);
# 135 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/istream.hpp"
 bool readtags(string& s, const string& tag);
 bool readtags(string* s, const string& tag);






 int getch(void);






 int ugetch(int ch);






 bool readable(void) const;
# 174 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/istream.hpp"
 bool gets_peek(string& buf, bool nonl = true,
  bool clear = false, int max = 0);
 bool gets_peek(string* buf, bool nonl = true,
  bool clear = false, int max = 0);
# 189 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/istream.hpp"
 bool read_peek(string& buf, bool clear = false);
 bool read_peek(string* buf, bool clear = false);
# 200 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/istream.hpp"
 int read_peek(void* buf, size_t size);
# 214 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/istream.hpp"
 bool readn_peek(string& buf, size_t cnt, bool clear = false);
 bool readn_peek(string* buf, size_t cnt, bool clear = false);





 istream& operator>>(string& s);



 istream& operator>>(long long int& n);

 istream& operator>>(int& n);
 istream& operator>>(short& n);
 istream& operator>>(char& ch);
};

}
# 61 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/ostream.hpp" 1
       




struct iovec;

namespace acl {

class string;






class ostream : virtual public stream , public pipe_stream {
public:
 ostream(void) {}
 virtual ~ostream(void) {}
# 32 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/ostream.hpp"
 int write(const void* data, size_t size, bool loop = true,
  bool buffed = false);
# 43 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/ostream.hpp"
 int sendto(const void* data, size_t size,
  const char* dest_addr, int flags = 0);
# 55 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/ostream.hpp"
 int sendto(const void* data, size_t size,
  const struct sockaddr* dest_addr, int addrlen, int flags = 0);





 bool fflush(void);
# 73 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/ostream.hpp"
 int writev(const struct iovec *v, int count, bool loop = true);







 int vformat(const char* fmt, va_list ap);






 int format(const char* fmt, ...) __attribute__((__format__ (__printf__, (2), (3))));
# 98 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/ostream.hpp"
 int write(long long int n);







 int write(int n);






 int write(short n);






 int write(char ch);







 int write(const string& s, bool loop = true);






 int puts(const char* s);







 ostream& operator<<(const string& s);
 ostream& operator<<(const char* s);



 ostream& operator<<(long long int n);

 ostream& operator<<(int n);
 ostream& operator<<(short n);
 ostream& operator<<(char ch);



 virtual int push_pop(const char* in, size_t len,
  string* out = 
# 157 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/ostream.hpp" 3 4
               __null
# 157 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/ostream.hpp"
                   , size_t max = 0);
 virtual int pop_end(string* out, size_t max = 0)
 {
  (void) out;
  (void) max;
  return (0);
 }

protected:
private:
};

}
# 62 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/fstream.hpp" 1
       




namespace acl {

class string;

class fstream : public istream , public ostream {
public:
 fstream(void);
 virtual ~fstream(void);
# 27 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/fstream.hpp"
 bool open(const char* path, unsigned int oflags, int mode);







 bool open_trunc(const char* path);






 bool create(const char* path);






 bool remove(void);
# 58 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/fstream.hpp"
 bool rename(const char* from_path, const char* to_path);
# 111 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/fstream.hpp"
 void open(int fh, unsigned int oflags, const char* path = 
# 111 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/fstream.hpp" 3 4
                                                          __null
# 111 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/fstream.hpp"
                                                              );
 long long int fseek(long long int offset, int whence);
 long long int ftell(void);
 bool ftruncate(long long int length);
 long long int fsize(void) const;
 static long long int fsize(const char* path);
 int file_handle(void) const;





 const char* file_path(void) const;
# 132 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/fstream.hpp"
 bool lock(bool exclude = true);
# 142 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/fstream.hpp"
 bool try_lock(bool exclude = true);





 bool unlock(void);
};

}
# 63 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/ifstream.hpp" 1
       



namespace acl {

class string;

class ifstream: public fstream {
public:
 ifstream(void) {}
 virtual ~ifstream(void) {}






 bool open_read(const char* path);






 bool load(string* s);
 bool load(string& s);
# 36 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/ifstream.hpp"
 static bool load(const char* path, string* s);
 static bool load(const char* path, string& s);
};

}
# 64 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/ofstream.hpp" 1
       



namespace acl {

class ofstream : public fstream
{
public:
 ofstream(void);
 virtual ~ofstream(void);







 bool open_write(const char* path, bool otrunc = true);






 bool open_append(const char* path);
};

}
# 65 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/socket_stream.hpp" 1
       
# 10 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/socket_stream.hpp"
struct ACL_VSTREAM;

namespace acl {

class socket_stream
 : public istream
 , public ostream
{
public:
 socket_stream(void);
 virtual ~socket_stream(void);
# 31 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/socket_stream.hpp"
 bool open(int fd, bool udp_mode = false);
# 40 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/socket_stream.hpp"
 bool open(ACL_VSTREAM* vstream, bool udp_mode = false);
# 59 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/socket_stream.hpp"
 bool open(const char* addr, int conn_timeout, int rw_timeout,
  time_unit_t unit = time_unit_s);
# 70 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/socket_stream.hpp"
 bool bind_udp(const char* addr, int rw_timeout = -1, unsigned flag = 0);





 bool shutdown_read(void);





 bool shutdown_write(void);





 bool shutdown_readwrite(void);
# 98 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/socket_stream.hpp"
 int sock_handle(void) const;
# 113 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/socket_stream.hpp"
 int unbind_sock(void);






 int sock_type(void) const;
# 129 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/socket_stream.hpp"
 const char* get_peer(bool full = false) const;






 const char* get_peer_ip(void) const;
# 145 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/socket_stream.hpp"
 bool set_peer(const char* addr);
# 154 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/socket_stream.hpp"
 const char* get_local(bool full = false) const;






 const char* get_local_ip(void) const;






 bool set_local(const char* addr);






 bool alive(void) const;






 socket_stream& set_tcp_nodelay(bool on);







 socket_stream& set_tcp_solinger(bool on, int linger);






 socket_stream& set_tcp_sendbuf(int size);






 socket_stream& set_tcp_recvbuf(int size);







 socket_stream& set_tcp_non_blocking(bool on);





 bool get_tcp_nodelay(void);







 int get_tcp_solinger(void);





 int get_tcp_sendbuf(void);





 int get_tcp_recvbuf(void);






 bool get_tcp_non_blocking(void);

private:
 std::string ipbuf_;
 const char* get_ip(const char* addr, std::string& out);
};

}
# 66 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/server_socket.hpp" 1
       







namespace acl {

class socket_stream;

enum {
 OPEN_FLAG_NONE = 0,
 OPEN_FLAG_NONBLOCK = 1,
 OPEN_FLAG_REUSEPORT = 1 << 1,
 OPEN_FLAG_FASTOPEN = 1 << 2,
 OPEN_FLAG_EXCLUSIVE = 1 << 3,
};




class server_socket : public noncopyable {
public:
# 40 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/server_socket.hpp"
 server_socket(unsigned flag, int backlog);






 server_socket(ACL_VSTREAM* sstream);
# 57 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/server_socket.hpp"
 server_socket(int fd);


 server_socket(void);
 ~server_socket(void);
# 71 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/server_socket.hpp"
 bool open(const char* addr);





 bool opened(void) const;





 bool close(void);
# 92 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/server_socket.hpp"
 int unbind(void);
# 103 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/server_socket.hpp"
 socket_stream* accept(int timeout = -1, bool* etimed = 
# 103 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/server_socket.hpp" 3 4
                                                       __null
# 103 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/server_socket.hpp"
                                                           );





 const char* get_addr(void) const
 {
  return addr_.c_str();
 }
# 121 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/server_socket.hpp"
 int sock_handle(void) const

 {
  return fd_;
 }







 void set_tcp_defer_accept(int timeout);

private:
 int backlog_;
 unsigned open_flag_;
 bool unix_sock_;
 string addr_;





 int fd_;
 int fd_local_;

};

}
# 67 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2



# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_timer_callback.hpp" 1
       




namespace acl {

class aio_timer_task;
class aio_handle;




class aio_timer_callback : public aio_delay_free {
public:




 aio_timer_callback(bool keep = false);
 virtual ~aio_timer_callback(void);
# 36 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_timer_callback.hpp"
 virtual void destroy(void) {}





 bool empty(void) const;





 size_t length(void) const;





 void keep_timer(bool on);





 bool keep_timer(void) const;





 int clear(void);

protected:
 friend class aio_handle;







 virtual void timer_callback(unsigned int id) = 0;
# 102 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_timer_callback.hpp"
 long long int present_;
 long long int set_task(unsigned int id, long long int delay);
 long long int del_task(unsigned int id);





 void set_time(void);

private:
 aio_handle* handle_;
 size_t length_;
 std::list<aio_timer_task*> tasks_;
 bool keep_;
 bool destroy_on_unlock_;




 long long int set_task(aio_timer_task* task);
 long long int trigger(void);

};

}
# 71 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_istream.hpp" 1
       






namespace acl {

class aio_istream;
# 25 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_istream.hpp"
class aio_timer_reader : public aio_timer_callback {
public:
 aio_timer_reader(void) : in_(
# 27 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_istream.hpp" 3 4
                             __null
# 27 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_istream.hpp"
                                 ) {}




 virtual void destroy(void)
 {
  delete this;
 }
protected:
 virtual ~aio_timer_reader(void) {}



 virtual void timer_callback(unsigned int id);
private:

 friend class aio_istream;

 aio_istream* in_;

 bool delay_gets_;
 int delay_timeout_;
 bool delay_nonl_;
 int delay_count_;
};





class aio_istream : virtual public aio_stream
{
public:




 aio_istream(aio_handle* handle);
# 75 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_istream.hpp"
 aio_istream(aio_handle* handle, int fd);
# 84 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_istream.hpp"
 void add_read_callback(aio_callback* callback);
# 99 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_istream.hpp"
 int del_read_callback(aio_callback* callback = 
# 99 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_istream.hpp" 3 4
                                               __null
# 99 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_istream.hpp"
                                                   );
# 108 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_istream.hpp"
 int disable_read_callback(aio_callback* callback = 
# 108 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_istream.hpp" 3 4
                                                   __null
# 108 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_istream.hpp"
                                                       );







 int enable_read_callback(aio_callback* callback = 
# 116 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_istream.hpp" 3 4
                                                  __null
# 116 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_istream.hpp"
                                                      );
# 130 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_istream.hpp"
 void gets_await(int timeout = 0, bool nonl = true,
  long long int delay = 0, aio_timer_reader* callback = 
# 131 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_istream.hpp" 3 4
                                                       __null
# 131 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_istream.hpp"
                                                           );




 void gets(int timeout = 0, bool nonl = true,
  long long int delay = 0, aio_timer_reader* callback = 
# 137 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_istream.hpp" 3 4
                                                       __null
# 137 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_istream.hpp"
                                                           )
 {
  gets_await(timeout, nonl, delay, callback);
 }
# 155 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_istream.hpp"
 void read_await(int count = 0, int timeout = 0,
  long long int delay = 0, aio_timer_reader* callback = 
# 156 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_istream.hpp" 3 4
                                                       __null
# 156 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_istream.hpp"
                                                           );




 void read(int count = 0, int timeout = 0,
  long long int delay = 0, aio_timer_reader* callback = 
# 162 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_istream.hpp" 3 4
                                                       __null
# 162 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_istream.hpp"
                                                           )
 {
  read_await(count, timeout, delay, callback);
 }






 void readable_await(int timeout = 0);




 void read_wait(int timeout = 0)
 {
  readable_await(timeout);
 }






 void disable_read(void);





 void keep_read(bool onoff);





 bool keep_read(void) const;






 aio_istream& set_buf_max(int max);





 int get_buf_max(void) const;







 void clear_read_ready(void);

protected:
 virtual ~aio_istream(void);




 virtual void destroy(void);




 void enable_read(void);

private:
 friend class aio_timer_reader;
 aio_timer_reader* timer_reader_;
 std::list<AIO_CALLBACK*> read_callbacks_;

 static int read_callback(ACL_ASTREAM*, void*, char*, int);
 static int read_wakeup(ACL_ASTREAM* stream, void* ctx);
};

}
# 73 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_ostream.hpp" 1
       







struct iovec;

namespace acl {

class aio_ostream;
# 28 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_ostream.hpp"
class aio_timer_writer : public aio_timer_callback {
public:
 aio_timer_writer(void);




 virtual void destroy(void)
 {
  delete this;
 }

protected:
 virtual ~aio_timer_writer(void);




 virtual void timer_callback(unsigned int id);
private:
 friend class aio_ostream;

 aio_ostream* out_;

 acl::string buf_;
};





class aio_ostream : virtual public aio_stream {
public:




 aio_ostream(aio_handle* handle);
# 75 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_ostream.hpp"
 aio_ostream(aio_handle* handle, int fd);
# 84 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_ostream.hpp"
 void add_write_callback(aio_callback* callback);







 int del_write_callback(aio_callback* callback = 
# 92 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_ostream.hpp" 3 4
                                                __null
# 92 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_ostream.hpp"
                                                    );
# 101 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_ostream.hpp"
 int disable_write_callback(aio_callback* callback = 
# 101 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_ostream.hpp" 3 4
                                                    __null
# 101 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_ostream.hpp"
                                                        );







 int enable_write_callback(aio_callback* callback = 
# 109 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_ostream.hpp" 3 4
                                                   __null
# 109 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_ostream.hpp"
                                                       );
# 122 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_ostream.hpp"
 void write_await(const void* data, int len, long long int delay = 0,
  aio_timer_writer* callback = 
# 123 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_ostream.hpp" 3 4
                              __null
# 123 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_ostream.hpp"
                                  );




 void write(const void* data, int len, long long int delay = 0,
  aio_timer_writer* callback = 
# 129 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_ostream.hpp" 3 4
                              __null
# 129 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_ostream.hpp"
                                  )
 {
  write_await(data, len, delay, callback);
 }
# 142 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_ostream.hpp"
 int sendto(const void* data, int len, const char* dest_addr, int flags = 0);
# 153 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_ostream.hpp"
 int sendto(const void* data, int len,
  const struct sockaddr* dest_addr, int addrlen, int flags = 0);







 void writev_await(const struct iovec *iov, int count);




 void writev(const struct iovec *iov, int count)
 {
  writev_await(iov, count);
 }






 void format_await(const char* fmt, ...) __attribute__((__format__ (__printf__, (2), (3))));




 void format(const char* fmt, ...) __attribute__((__format__ (__printf__, (2), (3))))
 {
  va_list ap;
  
# 185 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_ostream.hpp" 3 4
 __builtin_va_start(
# 185 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_ostream.hpp"
 ap
# 185 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_ostream.hpp" 3 4
 ,
# 185 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_ostream.hpp"
 fmt
# 185 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_ostream.hpp" 3 4
 )
# 185 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_ostream.hpp"
                  ;
  vformat_await(fmt, ap);
  
# 187 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_ostream.hpp" 3 4
 __builtin_va_end(
# 187 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_ostream.hpp"
 ap
# 187 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_ostream.hpp" 3 4
 )
# 187 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_ostream.hpp"
           ;
 }







 void vformat_await(const char* fmt, va_list ap);




 void vformat(const char* fmt, va_list ap)
 {
  vformat_await(fmt, ap);
 }






 void writable_await(int timeout = 0);




 void write_wait(int timeout = 0)
 {
  writable_await(timeout);
 }






 void disable_write(void);





 size_t pending_length(void) const;

protected:
 virtual ~aio_ostream(void);




 virtual void destroy(void);




 void enable_write(void);

private:
 friend class aio_timer_writer;
 std::list<aio_timer_writer*>* timer_writers_;
 std::list<AIO_CALLBACK*> write_callbacks_;

 static int write_callback(ACL_ASTREAM*, void*);
 static int write_wakup(ACL_ASTREAM*, void*);
};

}
# 74 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_socket_stream.hpp" 1
       







namespace acl {





class aio_open_callback : public aio_callback {
public:
 aio_open_callback(void) {}
 virtual ~aio_open_callback(void) {}

 virtual bool open_callback(void) = 0;
protected:
private:
};

struct AIO_OPEN_CALLBACK {
 aio_open_callback* callback;
 bool enable;
};

class aio_handle;






class aio_socket_stream : public aio_istream , public aio_ostream {
public:







 aio_socket_stream(aio_handle* handle, ACL_ASTREAM* stream, bool opened = false);
# 56 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_socket_stream.hpp"
 aio_socket_stream(aio_handle* handle, int fd);
# 70 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_socket_stream.hpp"
 static aio_socket_stream* open(aio_handle* handle,
  const char* addr, int timeout);
# 80 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_socket_stream.hpp"
 static aio_socket_stream* bind(aio_handle* handle, const char* addr);





 void add_open_callback(aio_open_callback* callback);







 int del_open_callback(aio_open_callback* callback = 
# 94 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_socket_stream.hpp" 3 4
                                                    __null
# 94 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_socket_stream.hpp"
                                                        );
# 103 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_socket_stream.hpp"
 int disable_open_callback(aio_open_callback* callback = 
# 103 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_socket_stream.hpp" 3 4
                                                        __null
# 103 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_socket_stream.hpp"
                                                            );







 int enable_open_callback(aio_open_callback* callback = 
# 111 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_socket_stream.hpp" 3 4
                                                       __null
# 111 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_socket_stream.hpp"
                                                           );





 bool is_opened(void) const;

protected:
 virtual ~aio_socket_stream(void);




 virtual void destroy(void);




 void enable_open(void);

private:
 std::list<AIO_OPEN_CALLBACK*>* open_callbacks_;

 static int open_callback(ACL_ASTREAM*, void*);
};

}
# 76 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_fstream.hpp" 1
       




namespace acl {

class fstream;




class aio_fstream : public aio_istream , public aio_ostream {
public:




 aio_fstream(aio_handle* handle);




 aio_fstream(aio_handle* handle, int fd, unsigned int oflags = 0600);
# 37 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_fstream.hpp"
 bool open(const char* path, unsigned int oflags, unsigned int mode);
# 46 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_fstream.hpp"
 bool open_trunc(const char* path, unsigned int mode = 0600);
# 55 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/aio_fstream.hpp"
 bool create(const char* path, unsigned int mode = 0600);






 bool open_read(const char* path);







 bool open_write(const char* path);






 bool open_append(const char* path);

protected:
 ~aio_fstream(void);



 virtual void destroy(void);

private:
};

}
# 77 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/stdin_stream.hpp" 1
       



namespace acl {





class stdin_stream : public istream {
public:
 stdin_stream(void);
 ~stdin_stream(void);
};

}
# 78 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/stdout_stream.hpp" 1
       



namespace acl {




class stdout_stream : public ostream {
public:
 stdout_stream(void);
 ~stdout_stream(void);
};

}
# 79 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/sslbase_conf.hpp" 1
       



namespace acl {

class sslbase_io;

class sslbase_conf : public noncopyable {
public:
 sslbase_conf(void) {}
 virtual ~sslbase_conf(void) {}






 virtual sslbase_io* create(bool nblock) = 0;

public:







 virtual bool load_ca(const char* ca_file, const char* ca_path)
 {
  (void) ca_file;
  (void) ca_path;
  return false;
 }
# 43 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/sslbase_conf.hpp"
 virtual bool add_cert(const char* crt_file, const char* key_file,
  const char* key_pass = 
# 44 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/sslbase_conf.hpp" 3 4
                        __null
# 44 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/sslbase_conf.hpp"
                            )
 {
  (void) crt_file;
  (void) key_file;
  (void) key_pass;
  return false;
 }







 virtual bool add_cert(const char* crt_file)
 {
  (void) crt_file;
  return false;
 }
# 71 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/sslbase_conf.hpp"
 virtual bool set_key(const char* key_file, const char* key_pass = 
# 71 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/sslbase_conf.hpp" 3 4
                                                                  __null
# 71 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/sslbase_conf.hpp"
                                                                      )
 {
  (void) key_file;
  (void) key_pass;
  return false;
 }






 virtual void enable_cache(bool on)
 {
  (void) on;
 }
};

}
# 81 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/sslbase_io.hpp" 1
       


# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/stream_hook.hpp" 1
       



namespace acl {
# 14 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/stream_hook.hpp"
class stream_hook : public noncopyable {
public:
 stream_hook(void) {}







 virtual int read(void* buf, size_t len) = 0;







 virtual int send(const void* buf, size_t len) = 0;
# 41 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/stream_hook.hpp"
 virtual bool open(ACL_VSTREAM* s) = 0;






 virtual bool on_close(bool alive) { (void) alive; return true; }




 virtual void destroy(void) {}

protected:
 virtual ~stream_hook(void) {}
};

}
# 5 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/sslbase_io.hpp" 2

struct ACL_VSTREAM;

namespace acl {

class sslbase_conf;
class atomic_long;

class sslbase_io : public stream_hook {
public:







 sslbase_io(sslbase_conf& conf, bool server_side, bool nblock = false);
 virtual ~sslbase_io(void);





 virtual bool handshake(void) = 0;





 void set_non_blocking(bool yes);





 bool is_non_blocking(void) const
 {
  return nblock_;
 }





 bool handshake_ok(void)
 {
  return handshake_ok_;
 }





 void set_sni_host(const char* host);

protected:
 sslbase_conf& base_conf_;
 bool server_side_;
 bool nblock_;
 bool handshake_ok_;
 atomic_long* refers_;
 ACL_VSTREAM* stream_;
 string sni_host_;
};

}
# 82 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/polarssl_conf.hpp" 1
       





namespace acl {




typedef enum {
 POLARSSL_VERIFY_NONE,
 POLARSSL_VERIFY_OPT,
 POLARSSL_VERIFY_REQ
} polarssl_verify_t;

class polarssl_io;






class polarssl_conf : public sslbase_conf {
public:






 polarssl_conf(bool server_side = false,
  polarssl_verify_t verify_mode = POLARSSL_VERIFY_NONE);
 virtual ~polarssl_conf(void);




 bool load_ca(const char* ca_file, const char* ca_path);




 bool add_cert(const char* crt_file, const char* key_file,
  const char* key_pass = 
# 46 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/polarssl_conf.hpp" 3 4
                        __null
# 46 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/polarssl_conf.hpp"
                            );




 bool add_cert(const char* crt_file);




 bool set_key(const char* key_file, const char* key_pass = 
# 56 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/polarssl_conf.hpp" 3 4
                                                          __null
# 56 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/polarssl_conf.hpp"
                                                              );




 void enable_cache(bool on);

public:




 void set_authmode(polarssl_verify_t verify_mode);





 void* get_entropy(void)
 {
  return entropy_;
 }







 bool setup_certs(void* ssl, bool server_side);

public:




 static void set_libpath(const char* path);





 static bool load(void);

public:

 sslbase_io* create(bool nblock);

private:
 friend class polarssl_io;

 bool has_inited_;
 thread_mutex lock_;

 bool server_side_;
 void* entropy_;
 void* cacert_;
 void* pkey_;
 void* cert_chain_;
 void* cache_;
 polarssl_verify_t verify_mode_;

private:
 void init_once(void);
 void free_ca(void);
};

}
# 83 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/polarssl_io.hpp" 1
       



struct ACL_VSTREAM;

namespace acl {

class polarssl_conf;






class polarssl_io : public sslbase_io {
public:







 polarssl_io(polarssl_conf& conf, bool server_side, bool nblock = false);





 void destroy(void);
# 44 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/polarssl_io.hpp"
 bool handshake(void);





 bool check_peer(void);

protected:
 ~polarssl_io(void);




 bool open(ACL_VSTREAM* s);


 bool on_close(bool alive);


 int read(void* buf, size_t len);


 int send(const void* buf, size_t len);

private:
 polarssl_conf& conf_;
 void* ssl_;
 void* ssn_;
 void* rnd_;

private:
 static int sock_read(void *ctx, unsigned char *buf, size_t len);
 static int sock_send(void *ctx, const unsigned char *buf, size_t len);
};

}
# 84 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/mbedtls_conf.hpp" 1
       






namespace acl {




typedef enum {
 MBEDTLS_VERIFY_NONE,
 MBEDTLS_VERIFY_OPT,
 MBEDTLS_VERIFY_REQ
} mbedtls_verify_t;

class mbedtls_io;






class mbedtls_conf : public sslbase_conf {
public:






 mbedtls_conf(bool server_side = false,
  mbedtls_verify_t verify_mode = MBEDTLS_VERIFY_NONE);
 ~mbedtls_conf(void);




 bool load_ca(const char* ca_file, const char* ca_path);




 bool add_cert(const char* crt_file, const char* key_file,
  const char* key_pass = 
# 47 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/mbedtls_conf.hpp" 3 4
                        __null
# 47 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/mbedtls_conf.hpp"
                            );





 bool add_cert(const char* );





 bool set_key(const char* , const char* );




 void enable_cache(bool on);

public:





 bool setup_certs(void* ssl);





 void* get_entropy(void)
 {
  return entropy_;
 }

public:






 static void set_libpath(const char* libmbedcrypto,
  const char* libmbedx509, const char* libmbedtls);





 static void set_libpath(const char* libmbedtls);





 static bool load(void);

public:

 sslbase_io* create(bool nblock);

private:
 friend class mbedtls_io;

 unsigned init_status_;
 unsigned cert_status_;
 thread_mutex lock_;

 bool server_side_;

 void* conf_;
 void* entropy_;
 void* rnd_;
 void* cacert_;
 string crt_file_;
 void* cache_;
 mbedtls_verify_t verify_mode_;
 std::vector<std::pair<void*, void*> > cert_keys_;

private:
 bool init_once(void);
 bool init_rand(void);
 void free_ca(void);
};

}
# 85 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/mbedtls_io.hpp" 1
       



struct ACL_VSTREAM;

namespace acl {

class mbedtls_conf;






class mbedtls_io : public sslbase_io {
public:







 mbedtls_io(mbedtls_conf& conf, bool server_side, bool nblock = false);





 void destroy(void);
# 44 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/mbedtls_io.hpp"
 bool handshake(void);





 bool check_peer(void);

protected:
 ~mbedtls_io(void);




 bool open(ACL_VSTREAM* s);


 bool on_close(bool alive);


 int read(void* buf, size_t len);


 int send(const void* buf, size_t len);

private:
 mbedtls_conf& conf_;
 void* ssl_;
 void* ssn_;
 char* ebf_;

 const char* ssl_strerror(int err);

private:
 static int sock_read(void *ctx, unsigned char *buf, size_t len);
 static int sock_send(void *ctx, const unsigned char *buf, size_t len);
};

}
# 86 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/openssl_conf.hpp" 1
       






namespace acl {

class openssl_io;

class openssl_conf : public sslbase_conf {
public:
 openssl_conf(bool server_side = false, int timeout = 30);
 ~openssl_conf(void);




 bool load_ca(const char* ca_file, const char* ca_path);




 bool add_cert(const char* crt_file, const char* key_file,
  const char* key_pass = 
# 26 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/openssl_conf.hpp" 3 4
                        __null
# 26 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/openssl_conf.hpp"
                            );





 bool add_cert(const char* crt_file);





 bool set_key(const char* key_file, const char* key_pass);




 void enable_cache(bool on);

public:





 static void set_libpath(const char* libcrypto, const char* libssl);





 static bool load(void);

public:

 sslbase_io* create(bool nblock);

public:
 bool setup_certs(void* ssl);

 bool is_server_side(void) const
 {
  return server_side_;
 }

 void* get_ssl_ctx(void) const
 {
  return ssl_ctx_;
 }

private:
 friend class openssl_io;

 bool server_side_;
 void* ssl_ctx_;
 int timeout_;
 string crt_file_;
 unsigned init_status_;
 thread_mutex lock_;

 bool init_once(void);
};

}
# 87 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/stream/openssl_io.hpp" 1
       



struct ACL_VSTREAM;

namespace acl {

class openssl_conf;

class openssl_io : public sslbase_io {
public:
 openssl_io(openssl_conf& conf, bool server_side, bool nblock = false);




 void destroy(void);





 bool handshake(void);

protected:
 ~openssl_io(void);




 bool open(ACL_VSTREAM* s);


 bool on_close(bool alive);


 int read(void* buf, size_t len);


 int send(const void* buf, size_t len);

private:
 openssl_conf& conf_;
 void* ssl_;
};

}
# 88 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/ipc/ipc_client.hpp" 1
       




namespace acl {

typedef struct MSG_HDR
{
 int nMsg;
 int dlen;



 long long int magic;

} MSG_HDR;

typedef enum
{
 IO_WAIT_HDR,
 IO_WAIT_DAT
} io_status;

class aio_handle;
class ipc_adapter;
class aio_socket_stream;
class socket_stream;




class ipc_client : private aio_open_callback
{
public:



 ipc_client(long long int magic = -1);

 virtual ~ipc_client();




 virtual void destroy()
 {
  delete this;
 }




 virtual void on_open() {}




 virtual void on_close() {}







 virtual void on_message(int nMsg, void* data, int dlen);
# 76 "/workspace/acl/lib_acl_cpp/include/acl_cpp/ipc/ipc_client.hpp"
 bool open(aio_handle* handle, const char* addr, int timeout);





 void open(aio_socket_stream* client);







 bool open(const char* addr, int timeout);





 void open(socket_stream* client);




 void wait();




 void close();





 bool active() const;





 void append_message(int nMsg);





 void delete_message(int nMsg);







 void send_message(int nMsg, const void* data, int dlen);





 aio_socket_stream* get_async_stream() const;




 aio_handle& get_handle() const;





 socket_stream* get_sync_stream() const;
protected:






 void trigger(int nMsg, void* data, int dlen);
private:



 long long int magic_;

 char* addr_;
 std::list<int> messages_;

 aio_socket_stream* async_stream_;
 socket_stream* sync_stream_;
 socket_stream* sync_stream_inner_;
 bool closing_;

 io_status status_;
 MSG_HDR hdr_;



 virtual bool read_callback(char* data, int len);
 virtual bool write_callback();
 virtual void close_callback();
 virtual bool timeout_callback();
 virtual bool open_callback();
};

}
# 90 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2


# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/ipc/rpc.hpp" 1
       
# 17 "/workspace/acl/lib_acl_cpp/include/acl_cpp/ipc/rpc.hpp"
namespace acl {

class ipc_client;
class rpc_client;
class rpc_service;

class rpc_request;
struct RPC_DAT
{
 rpc_request* req;
 void* ctx;
};

class rpc_request : public ipc_request
{
public:
 rpc_request(void);
 virtual ~rpc_request(void);

protected:
 friend class rpc_client;
 friend class rpc_service;






 virtual void rpc_onover(void) = 0;
# 55 "/workspace/acl/lib_acl_cpp/include/acl_cpp/ipc/rpc.hpp"
 virtual void rpc_wakeup(void* ctx) { (void) ctx; }

protected:



 virtual void rpc_run(void) = 0;
# 70 "/workspace/acl/lib_acl_cpp/include/acl_cpp/ipc/rpc.hpp"
 void rpc_signal(void* ctx);
# 82 "/workspace/acl/lib_acl_cpp/include/acl_cpp/ipc/rpc.hpp"
 bool cond_wait(int timeout = -1);






 bool cond_wait_timeout() const
 {
  return wait_timedout_;
 }







 bool cond_signal(void);

private:
 RPC_DAT dat_;
 ipc_client* ipc_;
 int cond_count_;
 pthread_mutex_t* lock_;
 pthread_cond_t* cond_;
 bool wait_timedout_;


 virtual void run(ipc_client* ipc);
# 120 "/workspace/acl/lib_acl_cpp/include/acl_cpp/ipc/rpc.hpp"
};



class aio_socket_stream;

class rpc_service : public ipc_service
{
public:







 rpc_service(int nthread, bool ipc_keep = true);

 ~rpc_service(void) {}
# 147 "/workspace/acl/lib_acl_cpp/include/acl_cpp/ipc/rpc.hpp"
 void rpc_fork(rpc_request* req);

private:


 virtual void on_accept(aio_socket_stream* client);
# 164 "/workspace/acl/lib_acl_cpp/include/acl_cpp/ipc/rpc.hpp"
};

}
# 93 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_client.hpp" 1
       



struct HTTP_HDR;
struct HTTP_HDR_RES;
struct HTTP_RES;
struct HTTP_HDR_REQ;
struct HTTP_REQ;

namespace acl {

class string;
class zlib_stream;
class socket_stream;
class ostream;
class istream;
class http_header;






class http_client : public noncopyable
{
public:




 http_client(void);
# 49 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_client.hpp"
 http_client(socket_stream* client, bool is_request = false,
  bool unzip = true, bool stream_fixed = true);

 virtual ~http_client(void);






 void reset(void);
# 69 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_client.hpp"
 bool open(const char* addr, int conn_timeout = 60, int rw_timeout = 60,
  bool unzip = true);






 bool write_head(const http_header& header);
# 88 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_client.hpp"
 bool write_body(const void* data, size_t len);
# 97 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_client.hpp"
 ostream& get_ostream(void) const;
# 106 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_client.hpp"
 istream& get_istream(void) const;
# 115 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_client.hpp"
 socket_stream& get_stream(void) const;






 bool read_head(void);
# 131 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_client.hpp"
 long long int body_length(void) const;
# 148 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_client.hpp"
 bool request_range(long long int& range_from, long long int& range_to);
# 167 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_client.hpp"
 bool response_range(long long int& range_from,
  long long int& range_to, long long int& total);
# 177 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_client.hpp"
 bool get_version(unsigned& major, unsigned& minor) const;





 bool is_keep_alive(void) const;
 bool keep_alive(void) const;






 bool is_server_keep_alive(void) const;






 bool is_client_keep_alive(void) const;






 const char* header_value(const char* name) const;





 void header_disable(const char* name);
# 222 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_client.hpp"
 bool header_update(const char* name, const char* value,
  bool force_add = true);
# 235 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_client.hpp"
 int header_update(const char* name, const char* match,
  const char* to, bool case_sensitive = false);







 int response_status(void) const;





 const char* request_host(void) const;





 int request_port(void) const;





 const char* request_method(void) const;







 const char* request_url(void) const;







 const char* request_path(void) const;







 const char* request_params(void) const;
# 295 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_client.hpp"
 const char* request_param(const char* name) const;






 const char* request_cookie(const char* name) const;
# 324 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_client.hpp"
 int read_body(string& out, bool clean = true, int* real_size = 
# 324 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_client.hpp" 3 4
                                                               __null
# 324 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_client.hpp"
                                                                   );
# 336 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_client.hpp"
 int read_body(char* buf, size_t size);
# 353 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_client.hpp"
 bool body_gets(string& out, bool nonl = true, size_t* size = 
# 353 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_client.hpp" 3 4
                                                             __null
# 353 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_client.hpp"
                                                                 );





 bool body_finish(void) const;





 bool disconnected(void) const;
# 374 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_client.hpp"
 HTTP_HDR_RES* get_respond_head(string* buf);
# 383 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_client.hpp"
 HTTP_HDR_REQ* get_request_head(string* buf);





 void print_header(const char* prompt = 
# 389 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_client.hpp" 3 4
                                       __null
# 389 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_client.hpp"
                                           );






 void fprint_header(ostream& out, const char* prompt = 
# 396 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_client.hpp" 3 4
                                                      __null
# 396 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_client.hpp"
                                                          );






 void sprint_header(string& out, const char* prompt = 
# 403 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_client.hpp" 3 4
                                                     __null
# 403 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_client.hpp"
                                                         );

private:
 socket_stream* stream_;
 bool stream_fixed_;

 HTTP_HDR_RES* hdr_res_;
 struct HTTP_RES* res_;
 HTTP_HDR_REQ* hdr_req_;
 struct HTTP_REQ* req_;
 bool unzip_;
 zlib_stream* zstream_;
 bool is_request_;
 int gzip_header_left_;
 int last_ret_;
 bool head_sent_;
 bool body_finish_;
 bool disconnected_;
 bool chunked_transfer_;
 unsigned gzip_crc32_;
 unsigned gzip_total_in_;
 string* buf_;

 bool read_request_head(void);
 bool read_response_head(void);
 int read_request_body(char* buf, size_t size);
 int read_response_body(char* buf, size_t size);
 int read_request_body(string& out, bool clean, int* real_size);
 int read_response_body(string& out, bool clean, int* real_size);

 HTTP_HDR* get_http_hdr() const;

public:
 bool write_chunk(ostream& out, const void* data, size_t len);
 bool write_chunk_trailer(ostream& out);

 bool write_gzip(ostream& out, const void* data, size_t len);
 bool write_gzip_trailer(ostream& out);
};

}
# 95 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp" 1
       



# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/../http/http_type.hpp" 1
       

namespace acl {

struct HTTP_PARAM
{
 char* name;
 char* value;
};


typedef enum
{
 HTTP_OK,
 HTTP_ERR_DNS,
 HTTP_ERR_CONN,
 HTTP_ERR_REQ,
 HTTP_ERR_READ,
 HTTP_ERR_SEND,
 HTTP_ERR_TIMO,
 HTTP_ERR_READ_HDR,
 HTTP_ERR_READ_BODY,
 HTTP_ERR_INVALID_HDR,
 HTTP_ERR_UNKNOWN,
 HTTP_ERR_REDIRECT_MAX,
} http_status_t;


typedef enum
{
 HTTP_METHOD_UNKNOWN,
 HTTP_METHOD_GET,
 HTTP_METHOD_POST,
 HTTP_METHOD_PUT,
 HTTP_METHOD_CONNECT,
 HTTP_METHOD_PURGE,
 HTTP_METHOD_DELETE,
 HTTP_METHOD_HEAD,
 HTTP_METHOD_OPTION,
 HTTP_METHOD_PROPFIND,
 HTTP_METHOD_PATCH,
 HTTP_METHOD_OTHER,
} http_method_t;

typedef enum
{

 HTTP_REQUEST_NORMAL,


 HTTP_REQUEST_MULTIPART_FORM,


 HTTP_REQUEST_OCTET_STREAM,


 HTTP_REQUEST_TEXT_XML,


 HTTP_REQUEST_TEXT_JSON,


 HTTP_REQUEST_OTHER
} http_request_t;

typedef enum
{

 HTTP_REQ_OK,


 HTTP_REQ_ERR_IO,


 HTTP_REQ_ERR_METHOD
} http_request_error_t;

typedef enum
{
 HTTP_MIME_PARAM,
 HTTP_MIME_FILE
} http_mime_t;

}
# 6 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp" 2

struct HTTP_HDR_RES;
struct HTTP_HDR_REQ;
struct HTTP_HDR_ENTRY;

namespace acl {

class string;
class HttpCookie;




class http_header : public dbuf_obj
{
public:




 http_header(dbuf_guard* dbuf = 
# 26 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp" 3 4
                               __null
# 26 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp"
                                   );
# 45 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp"
 http_header(const char* url, dbuf_guard* dbuf = 
# 45 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp" 3 4
                                                __null
# 45 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp"
                                                    ,
  bool encoding = true);






 http_header(int status, dbuf_guard* dbuf = 
# 53 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp" 3 4
                                           __null
# 53 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp"
                                               );






 http_header(const HTTP_HDR_RES& hdr_res, dbuf_guard* dbuf = 
# 60 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp" 3 4
                                                            __null
# 60 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp"
                                                                );






 http_header(const HTTP_HDR_REQ& hdr_req, dbuf_guard* dbuf = 
# 67 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp" 3 4
                                                            __null
# 67 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp"
                                                                );

 virtual ~http_header(void);




 void reset(void);
# 85 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp"
 http_header& set_proto_version(const char* version);






 http_header& set_request_mode(bool onoff);
# 101 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp"
 http_header& add_entry(const char* name, const char* value,
   bool replace = true);






 const char* get_entry(const char* name) const;
# 128 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp"
 http_header& set_content_length(long long int n);
 long long int get_content_length() const
 {
  return content_length_;
 }
# 147 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp"
 http_header& set_range(long long from, long long to);
# 158 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp"
 http_header& set_range_total(long long total);
# 169 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp"
 void get_range(long long int* from, long long int* to);







 http_header& set_content_type(const char* value);
# 186 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp"
 http_header& set_keep_alive(bool on);




 bool get_keep_alive() const
 {
  return keep_alive_;
 }

 http_header& set_upgrade(const char* value = "websocket");
 const char* get_upgrade(void) const
 {
  return upgrade_;
 }
# 212 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp"
 http_header& add_cookie(const char* name, const char* value,
  const char* domain = 
# 213 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp" 3 4
                      __null
# 213 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp"
                          , const char* path = 
# 213 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp" 3 4
                                               __null
# 213 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp"
                                                   ,
  time_t expires = 0);






 http_header& add_cookie(const HttpCookie* cookie);






 const HttpCookie* get_cookie(const char* name) const;




 static void date_format(char* out, size_t size, time_t t);





 bool is_request(void) const;






 static void uri_unsafe_correct(bool on);
# 257 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp"
 bool build_request(string& buf) const;
# 277 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp"
 http_header& set_url(const char* url, bool encoding = true);






 http_header& set_host(const char* value);





 const char* get_host() const
 {
  return host_[0] == 0 ? 
# 292 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp" 3 4
                        __null 
# 292 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp"
                             : host_;
 }






 http_header& set_method(http_method_t method);







 http_header& set_method(const char* method);






 http_method_t get_method(string* buf = 
# 315 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp" 3 4
                                       __null
# 315 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp"
                                           ) const;







 http_header& accept_gzip(bool on);







 http_header& set_param_override(bool yes);
# 341 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp"
 http_header& add_param(const char* name, const char* value);
 http_header& add_int(const char* name, short value);
 http_header& add_int(const char* name, int value);
 http_header& add_int(const char* name, long value);
 http_header& add_int(const char* name, unsigned short value);
 http_header& add_int(const char* name, unsigned int value);
 http_header& add_int(const char* name, unsigned long value);
 http_header& add_format(const char* name, const char* fmt, ...)
  __attribute__((__format__ (__printf__, (3), (4))));




 http_header& add_int(const char* name, long long int value);
 http_header& add_int(const char* name, unsigned long long int value);


 http_header& set_ws_origin(const char* url);
 http_header& set_ws_key(const void* key, size_t len);
 http_header& set_ws_key(const char* key);
 http_header& set_ws_protocol(const char* proto);
 http_header& set_ws_version(int ver);

 const char* get_ws_origin(void) const
 {
  return ws_origin_;
 }

 const char* get_ws_key(void) const
 {
  return ws_sec_key_;
 }

 const char* get_ws_protocol(void) const
 {
  return ws_sec_proto_;
 }

 int get_ws_version(void) const
 {
  return ws_sec_ver_;
 }

 http_header& set_ws_accept(const char* key);
 const char* get_ws_accept(void) const
 {
  return ws_sec_accept_;
 }
# 397 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp"
 bool redirect(const char* url);







 http_header& set_redirect(unsigned int n = 5);





 unsigned int get_redirect(void) const;




 virtual void redicrect_reset(void) {}
# 427 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_header.hpp"
 bool build_response(string& buf) const;






 http_header& set_status(int status);





 int get_status(void) const
 {
  return status_;
 }






 http_header& set_chunked(bool on);





 bool chunked_transfer(void) const
 {
  return chunked_transfer_;
 }






 http_header& set_cgi_mode(bool on);





 bool is_cgi_mode() const
 {
  return cgi_mode_;
 }






 http_header& set_transfer_gzip(bool on);





 bool is_transfer_gzip() const
 {
  return transfer_gzip_;
 }

private:
 dbuf_guard* dbuf_internal_;
 dbuf_guard* dbuf_;
 bool fixed_;


 char* url_;
 std::list<HTTP_PARAM*> params_;
 bool param_override_;
 std::list<HttpCookie*> cookies_;
 std::list<HTTP_HDR_ENTRY*> entries_;
 http_method_t method_;
 char version_[8];
 char method_s_[64];
 char host_[256];
 bool keep_alive_;
 unsigned int nredirect_;
 bool accept_compress_;
 int status_;
 bool is_request_;
 bool cgi_mode_;






 long long int range_from_;
 long long int range_to_;
 long long int range_total_;
 long long int content_length_;

 bool chunked_transfer_;
 bool transfer_gzip_;

 char* upgrade_;

 char* ws_origin_;
 char* ws_sec_key_;
 char* ws_sec_proto_;
 int ws_sec_ver_;
 char* ws_sec_accept_;

 void init(void);
 void clear(void);
 void build_common(string& buf) const;

 void add_res_cookie(const HTTP_HDR_ENTRY& entry);
 void append_accept_key(const char* sec_key, string& out) const;
 unsigned char* create_ws_key(const void* key, size_t len) const;
};

}
# 96 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_pipe.hpp" 1
       



namespace acl {

class charset_conv;
class pipe_stream;
class pipe_manager;

class http_pipe : public noncopyable
{
public:
 http_pipe(void);
 virtual ~http_pipe(void);
 void set_charset(charset_conv* conv);
 bool set_charset(const char* from, const char* to);
 void append(pipe_stream* ps);
 void reset();
 bool update(const char* in, size_t len);
 bool update_end(void);

 pipe_manager& get_manager(void);
protected:
private:
 pipe_manager manager_;
 charset_conv* conv_;
};

}
# 97 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_request.hpp" 1
       





namespace acl {

class http_client;
class http_pipe;
class socket_stream;
class charset_conv;
class sslbase_conf;
class xml;
class json;




class http_request : public connect_client
{
public:
# 39 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_request.hpp"
 http_request(socket_stream* client, int conn_timeout = 60,
  bool unzip = true, bool stream_fixed = true);
# 50 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_request.hpp"
 http_request(const char* addr, int conn_timeout = 60,
  int rw_timeout = 60, bool unzip = true);

 virtual ~http_request(void);






 http_request& set_unzip(bool on);






 http_request& set_ssl(sslbase_conf* conf);







 http_header& request_header(void);






 http_request& set_local_charset(const char* local_charset);
# 98 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_request.hpp"
 bool request(const void* data, size_t len);





 bool write_head();
# 117 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_request.hpp"
 bool write_body(const void* data, size_t len);
# 127 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_request.hpp"
 int http_status() const;
# 136 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_request.hpp"
 long long int body_length(void) const;





 bool keep_alive(void) const;






 const char* header_value(const char* name) const;





 bool body_finish() const;
# 166 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_request.hpp"
 bool get_body(xml& out, const char* to_charset = 
# 166 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_request.hpp" 3 4
                                                 __null
# 166 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_request.hpp"
                                                     );
# 177 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_request.hpp"
 bool get_body(json& out, const char* to_charset = 
# 177 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_request.hpp" 3 4
                                                  __null
# 177 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_request.hpp"
                                                      );
# 187 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_request.hpp"
 bool get_body(string& out, const char* to_charset = 
# 187 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_request.hpp" 3 4
                                                    __null
# 187 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_request.hpp"
                                                        );
# 200 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_request.hpp"
 int read_body(char* buf, size_t size);
# 220 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_request.hpp"
 int read_body(string& out, bool clean = false, int* real_size = 
# 220 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_request.hpp" 3 4
                                                                __null
# 220 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_request.hpp"
                                                                    );
# 236 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_request.hpp"
 bool body_gets(string& out, bool nonl = true, size_t* size = 
# 236 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_request.hpp" 3 4
                                                             __null
# 236 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_request.hpp"
                                                                 );






 bool support_range(void) const;
# 268 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_request.hpp"
 long long int get_range_from(void) const;
 long long int get_range_to(void) const;
 long long int get_range_max(void) const;







 const std::vector<HttpCookie*>* get_cookies(void) const;
# 287 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_request.hpp"
 const HttpCookie* get_cookie(const char* name,
  bool case_insensitive = true) const;
# 297 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_request.hpp"
 http_client* get_client(void) const;




 void reset(void);

protected:




 virtual bool open();

private:
 char addr_[128];
 bool unzip_;
 sslbase_conf* ssl_conf_;
 char local_charset_[64];
 charset_conv* conv_;
        http_client* client_;
 http_header header_;
 bool cookie_inited_;
 std::vector<HttpCookie*>* cookies_;





 long long int range_from_;
 long long int range_to_;
 long long int range_max_;


 bool need_retry_;

 bool send_request(const void* data, size_t len);
 bool try_open(bool* reuse_conn);
 void close(void);
 void create_cookies(void);
 http_pipe* get_pipe(const char* to_charset);
 void set_charset_conv();
 void check_range(void);
};

}
# 98 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_response.hpp" 1
       




namespace acl {

class http_client;
class http_pipe;
class socket_stream;
class xml;
class json;

class http_response : public noncopyable
{
public:







 http_response(socket_stream* client);
 virtual ~http_response(void);
# 35 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_response.hpp"
 bool read_header();
# 48 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_response.hpp"
 bool get_body(xml& out, const char* to_charset = 
# 48 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_response.hpp" 3 4
                                                 __null
# 48 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_response.hpp"
                                                     );
# 61 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_response.hpp"
 bool get_body(json& out, const char* to_charset = 
# 61 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_response.hpp" 3 4
                                                  __null
# 61 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_response.hpp"
                                                      );
# 71 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_response.hpp"
 bool get_body(string& out, const char* to_charset = 
# 71 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_response.hpp" 3 4
                                                    __null
# 71 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_response.hpp"
                                                        );
# 85 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_response.hpp"
 int read_body(char* buf, size_t size);
# 96 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_response.hpp"
 http_header& response_header(void);
# 114 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_response.hpp"
 bool response(const void* data, size_t len);
# 123 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_response.hpp"
 http_client* get_client(void) const;




 void close(void);

private:
 bool debug_;
 bool header_ok_;
 http_client* client_;
 http_header header_;
 bool head_sent_;
 http_pipe* get_pipe(const char* to_charset);
};

}
# 99 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_service.hpp" 1
       




namespace acl {

class string;




class http_service_request : public http_header
{
public:






 http_service_request(const char* domain, unsigned short port);





 const char* get_domain(void) const;





 unsigned short get_port(void) const;







 virtual void destroy(void) {}
# 55 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_service.hpp"
 virtual const string* get_body(void);







 virtual void on_hdr(const char* addr, const HTTP_HDR_RES* hdr) = 0;
# 75 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_service.hpp"
 virtual void on_body(const char* data, size_t dlen) = 0;






 virtual void on_error(http_status_t errnum) = 0;
protected:
 virtual ~http_service_request(void);
private:
 char* domain_;
 unsigned short port_;
};

class aio_socket_stream;

class http_service : public ipc_service
{
public:
# 107 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_service.hpp"
 http_service(int nthread = 1, int nwait = 1, bool win32_gui = false);
 ~http_service(void);






 void do_request(http_service_request* req);
protected:
# 131 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_service.hpp"
 virtual void on_accept(aio_socket_stream* client);





 virtual void on_open(const char*addr);




 virtual void on_close(void);
private:
 char* addr_;
 int nwait_;
 aio_handle_type handle_type_;
};

}
# 100 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_mime.hpp" 1
       





# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/../mime/mime_attach.hpp" 1
       


# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/../mime/mime_node.hpp" 1
       

# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 4 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/../mime/mime_node.hpp" 2






struct MIME_NODE;

namespace acl {

class pipe_manager;
class ostream;
class ifstream;

class mime_node : public noncopyable
{
public:
# 33 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/../mime/mime_node.hpp"
 mime_node(const char* emailFile, const MIME_NODE* node,
  bool enableDecode = true, const char* toCharset = "gb2312",
  off_t off = 0);
 virtual ~mime_node(void);





 const char* get_name(void) const
 {
  if (m_name.empty())
   return 
# 45 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/../mime/mime_node.hpp" 3 4
         __null
# 45 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/../mime/mime_node.hpp"
             ;
  return m_name.c_str();
 }






 int get_ctype(void) const
 {
  return m_ctype;
 }






 int get_stype(void) const
 {
  return m_stype;
 }





 const char* get_ctype_s(void) const;





 const char* get_stype_s(void) const;





 int get_encoding(void) const
 {
  return m_encoding;
 }





 const char* get_charset(void) const
 {
  return m_charset;
 }





 const char* get_toCharset(void) const
 {
  if (m_toCharset[0])
   return m_toCharset;
  else
   return 
# 108 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/../mime/mime_node.hpp" 3 4
         __null
# 108 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/../mime/mime_node.hpp"
             ;
 }





 off_t get_bodyBegin(void) const
 {
  return m_bodyBegin;
 }





 off_t get_bodyEnd(void) const
 {
  return m_bodyEnd;
 }






 const char* header_value(const char* name) const;





 const std::map<string, string>& get_headers(void) const;






 bool save(pipe_manager& out) const;
# 158 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/../mime/mime_node.hpp"
 bool save(pipe_manager& out, const char* src, int len) const;
# 169 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/../mime/mime_node.hpp"
 bool save(ostream& out, const char* src = 
# 169 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/../mime/mime_node.hpp" 3 4
                                          __null
# 169 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/../mime/mime_node.hpp"
                                              , int len = 0) const;
# 180 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/../mime/mime_node.hpp"
 bool save(const char* outFile, const char* src = 
# 180 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/../mime/mime_node.hpp" 3 4
                                                 __null
# 180 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/../mime/mime_node.hpp"
                                                     , int len = 0) const;
# 191 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/../mime/mime_node.hpp"
 bool save(string& out, const char* src, int len) const;







 mime_node* get_parent(void) const;





 bool has_parent(void) const;






 int parent_ctype(void) const;
 const char* parent_ctype_s(void) const;






 int parent_stype(void) const;
 const char* parent_stype_s(void) const;






 int parent_encoding(void) const;






 char* parent_charset(void) const;





 off_t parent_bodyBegin(void) const;





 off_t parent_bodyEnd(void) const;







 const char* parent_header_value(const char* name) const;

protected:
 bool m_enableDecode;
 string m_name;
 string m_emailFile;
 int m_ctype;
 int m_stype;
 int m_encoding;
 char m_charset[32];
 char m_toCharset[32];
 off_t m_bodyBegin;
 off_t m_bodyEnd;
 std::map<string, string>* m_headers_;
 const MIME_NODE* m_pMimeNode;
 mime_node* m_pParent;
};

}
# 5 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/../mime/mime_attach.hpp" 2



namespace acl {

class mime_attach : public mime_node
{
public:
 mime_attach(const char* emailFile, const MIME_NODE* node,
  bool enableDecode = true, const char* toCharset = "gb2312",
  off_t off = 0);

 virtual ~mime_attach(void);





 const char* get_filename(void) const;

private:
 string m_filename;
};

}
# 8 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_mime.hpp" 2




struct MIME_STATE;
struct MIME_NODE;

namespace acl {
# 28 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_mime.hpp"
class http_mime_node : public mime_attach
{
public:
# 39 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_mime.hpp"
 http_mime_node(const char* path, const MIME_NODE* node,
  bool decodeIt = true, const char* toCharset = "gb2312",
  off_t off = 0);
 ~http_mime_node(void);





 http_mime_t get_mime_type(void) const;






 const char* get_value(void) const;

protected:

private:
 http_mime_t mime_type_;
 char* param_value_;

 void load_param(const char* path);
};







class http_mime : public dbuf_obj
{
public:






 http_mime(const char* boundary, const char* local_charset = "gb2312");
 ~http_mime(void);
# 92 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_mime.hpp"
 void set_saved_path(const char* path);
# 105 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_mime.hpp"
 bool update(const char* data, size_t len);





 const std::list<http_mime_node*>& get_nodes(void) const;







 const http_mime_node* get_node(const char* name) const;

private:
 string boundary_;
 string save_path_;
 off_t off_;
 MIME_STATE* mime_state_;
 std::list<http_mime_node*> mime_nodes_;
 char local_charset_[32];
 bool decode_on_;
 bool parsed_;
};

}
# 101 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpCookie.hpp" 1
       





namespace acl {




class HttpCookie : public dbuf_obj
{
public:







 HttpCookie(const char* name, const char* value, dbuf_guard* dbuf = 
# 22 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpCookie.hpp" 3 4
                                                                   __null
# 22 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpCookie.hpp"
                                                                       );





 HttpCookie(dbuf_guard* dbuf = 
# 28 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpCookie.hpp" 3 4
                              __null
# 28 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpCookie.hpp"
                                  );






 HttpCookie(const HttpCookie* cookie, dbuf_guard* dbuf = 
# 35 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpCookie.hpp" 3 4
                                                        __null
# 35 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpCookie.hpp"
                                                            );




 ~HttpCookie(void);







 bool setCookie(const char* value);




 void destroy();






 HttpCookie& setDomain(const char* domain);






 HttpCookie& setPath(const char* path);
# 76 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpCookie.hpp"
 HttpCookie& setExpires(time_t timeout);






 HttpCookie& setExpires(const char* expires);






 HttpCookie& setMaxAge(int max_age);







 HttpCookie& add(const char* name, const char* value);
# 107 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpCookie.hpp"
 const char* getName(void) const;





 const char* getValue(void) const;





 const char* getExpires(void) const;





 const char* getDomain(void) const;





 const char* getPath(void) const;





 int getMaxAge(void) const;
# 146 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpCookie.hpp"
 const char* getParam(const char* name,
  bool case_insensitive = true) const;






 const std::list<HTTP_PARAM*>& getParams(void) const;

private:
 dbuf_guard* dbuf_internal_;
 dbuf_guard* dbuf_;
 char dummy_[1];
 char* name_;
 char* value_;
 std::list<HTTP_PARAM*> params_;

 bool splitNameValue(char* data, HTTP_PARAM* param);

protected:


};

}
# 102 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServlet.hpp" 1
       






namespace acl {

class session;
class socket_stream;
class HttpServletRequest;
class HttpServletResponse;




class HttpServlet : public noncopyable
{
public:
# 29 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServlet.hpp"
 HttpServlet(socket_stream* stream, session* session);
# 39 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServlet.hpp"
 HttpServlet(socket_stream* stream,
  const char* memcache_addr = "127.0.0.1|11211");

 HttpServlet(void);
 virtual ~HttpServlet(void) = 0;

 session& getSession(void) const
 {
  return *session_;
 }

 socket_stream* getStream(void) const
 {
  return stream_;
 }
# 62 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServlet.hpp"
 HttpServlet& setLocalCharset(const char* charset);






 HttpServlet& setRwTimeout(int rw_timeout);
# 78 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServlet.hpp"
 HttpServlet& setParseBody(bool yes);
# 88 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServlet.hpp"
 HttpServlet& setParseBodyLimit(int length);







 bool start(void);
# 105 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServlet.hpp"
 virtual bool doRun(void);
# 116 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServlet.hpp"
 virtual bool doRun(session& session, socket_stream* stream = 
# 116 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServlet.hpp" 3 4
                                                             __null
# 116 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServlet.hpp"
                                                                 );
# 125 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServlet.hpp"
 virtual bool doRun(const char* memcached_addr, socket_stream* stream);

protected:



 virtual bool doGet(HttpServletRequest&, HttpServletResponse&);




 virtual bool doWebSocket(HttpServletRequest&, HttpServletResponse&);




 virtual bool doWebsocket(HttpServletRequest&, HttpServletResponse&);




 virtual bool doPost(HttpServletRequest&, HttpServletResponse&);




 virtual bool doPut(HttpServletRequest&, HttpServletResponse&);




 virtual bool doPatch(HttpServletRequest&, HttpServletResponse&);




 virtual bool doConnect(HttpServletRequest&, HttpServletResponse&);





 virtual bool doPurge(HttpServletRequest&, HttpServletResponse&);




 virtual bool doDelete(HttpServletRequest&, HttpServletResponse&);




 virtual bool doHead(HttpServletRequest&, HttpServletResponse&);




 virtual bool doOptions(HttpServletRequest&, HttpServletResponse&);




 virtual bool doPropfind(HttpServletRequest&, HttpServletResponse&);





 virtual bool doOther(HttpServletRequest&, HttpServletResponse&,
  const char* method);




 virtual bool doUnknown(HttpServletRequest&, HttpServletResponse&);




 virtual bool doError(HttpServletRequest&, HttpServletResponse&);

protected:
 HttpServletRequest* req_;
 HttpServletResponse* res_;
 bool parse_body_;

private:
 session* session_;
 session* session_ptr_;
 socket_stream* stream_;
 bool first_;
 char local_charset_[32];
 int rw_timeout_;
 int parse_body_limit_;
 bool try_old_ws_;

 void init();
};

}
# 103 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpSession.hpp" 1
       







namespace acl {

class session;




class HttpSession : public dbuf_obj
{
public:




 HttpSession(session& session);
 virtual ~HttpSession(void);
# 34 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpSession.hpp"
 virtual const char* getAttribute(const char* name) const;
# 46 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpSession.hpp"
 virtual const void* getAttribute(const char* name, size_t* size) const;






 virtual bool getAttributes(std::map<string, session_string>& attrs) const;







 virtual bool getAttributes(const std::vector<string>& names,
  std::vector<session_string>& values) const;







 virtual bool setAttribute(const char* name, const char* value);
# 79 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpSession.hpp"
 virtual bool setAttribute(const char* name, const void* value, size_t len);






 virtual bool setAttributes(const std::map<string, session_string>& attrs);






 virtual bool removeAttribute(const char* name);






 virtual bool setMaxAge(time_t ttl);





 virtual bool invalidate(void);






 const char* getSid(void) const;

protected:
 session& session_;
};

}
# 104 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletRequest.hpp" 1
       





# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_ctype.hpp" 1
       






namespace acl {
# 19 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_ctype.hpp"
class http_ctype : public noncopyable
{
public:
 http_ctype(void);
 ~http_ctype(void);






 http_ctype& operator=(const http_ctype& ctype);
# 40 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_ctype.hpp"
 bool parse(const char* cp);






 const char* get_ctype(void) const;





 const char* get_stype(void) const;






 const char* get_bound(void) const;






 const char* get_name(void) const;





 const char* get_charset(void) const;

private:
 char* ctype_;
 char* stype_;
 char* name_;
 char* charset_;
 string* bound_;

 void reset(void);
};

}
# 8 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletRequest.hpp" 2




namespace acl {

class dbuf_guard;
class istream;
class ostream;
class socket_stream;
class http_client;
class http_mime;
class json;
class xml;
class session;
class HttpSession;
class HttpCookie;
class HttpServletResponse;





class HttpServletRequest : public noncopyable
{
public:
# 45 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletRequest.hpp"
 HttpServletRequest(HttpServletResponse& res, session& store,
  socket_stream& stream, const char* charset = 
# 46 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletRequest.hpp" 3 4
                                              __null
# 46 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletRequest.hpp"
                                                  ,
  int body_limit = 102400);
 ~HttpServletRequest(void);







 void setParseBody(bool yes);






 http_method_t getMethod(string* method_s = 
# 63 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletRequest.hpp" 3 4
                                           __null
# 63 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletRequest.hpp"
                                               ) const;





 const std::vector<HttpCookie*>& getCookies(void) const;







 const char* getCookieValue(const char* name) const;






 void setCookie(const char* name, const char* value);







 const char* getHeader(const char* name) const;






 const char* getQueryString(void) const;






 const char* getPathInfo(void) const;






 const char* getRequestUri(void) const;
# 126 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletRequest.hpp"
 HttpSession& getSession(bool create = true, const char* sid = 
# 126 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletRequest.hpp" 3 4
                                                              __null
# 126 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletRequest.hpp"
                                                                  );





 istream& getInputStream(void) const;





 socket_stream& getSocketStream(void) const;
# 148 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletRequest.hpp"
 long long int getContentLength(void) const;
# 162 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletRequest.hpp"
 bool getRange(long long int& range_from, long long int& range_to);
# 172 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletRequest.hpp"
 const char* getContentType(
  bool part = true, http_ctype* ctype = 
# 173 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletRequest.hpp" 3 4
                                       __null
# 173 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletRequest.hpp"
                                           ) const;







 const char* getCharacterEncoding(void) const;





 const char* getLocalCharset(void) const;





 const char* getLocalAddr(void) const;





 unsigned short getLocalPort(void) const;





 const char* getRemoteAddr(void) const;





 unsigned short getRemotePort(void) const;





 const char* getRemoteHost(void) const;





 const char* getUserAgent(void) const;
# 234 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletRequest.hpp"
 const char* getParameter(const char* name,
  bool case_sensitive = false) const;
# 245 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletRequest.hpp"
 http_mime* getHttpMime(void);
# 258 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletRequest.hpp"
 json* getJson(size_t body_limit = 1024000);
# 270 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletRequest.hpp"
 bool getJson(json& out, size_t body_limit = 1024000);
# 282 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletRequest.hpp"
 xml* getXml(size_t body_limit = 1024000);
# 294 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletRequest.hpp"
 bool getXml(xml& out, size_t body_limit = 1024000);
# 306 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletRequest.hpp"
 string* getBody(size_t body_limit = 1024000);
# 317 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletRequest.hpp"
 bool getBody(string& out, size_t body_limit = 1024000);







 http_request_t getRequestType(void) const;





 const char* getRequestReferer(void) const;





 const http_ctype& getHttpCtype(void) const;





 bool isKeepAlive(void) const;





 int getKeepAlive(void) const;







 bool getVersion(unsigned& major, unsigned& minor) const;





 void getAcceptEncoding(std::vector<string>& out) const;






 void setRwTimeout(int rw_timeout);





 http_request_error_t getLastError(void) const;







 http_client* getClient(void) const;






 void fprint_header(ostream& out, const char* prompt);






 void sprint_header(string& out, const char* prompt);

private:
 dbuf_guard* dbuf_internal_;
 dbuf_guard* dbuf_;
 http_request_error_t req_error_;
 char cookie_name_[64];
 HttpServletResponse& res_;
 session& store_;
 HttpSession* http_session_;
 socket_stream& stream_;
 int body_limit_;
 bool body_parsed_;

 std::vector<HttpCookie*> cookies_;
 bool cookies_inited_;
 http_client* client_;
 http_method_t method_;
 bool cgi_mode_;
 http_ctype content_type_;
 char localAddr_[32];
 char remoteAddr_[32];
 char localCharset_[32];
 int rw_timeout_;
 std::vector<HTTP_PARAM*> params_;
 http_request_t request_type_;
 bool parse_body_;
 http_mime* mime_;
 string* body_;
 json* json_;
 xml* xml_;

 bool readHeaderCalled_;
 bool readHeader(string* method_s);

 void add_cookie(char* data);
 void parseParameters(const char* str);
};

}
# 105 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletResponse.hpp" 1
       





namespace acl {

class dbuf_guard;
class string;
class xml;
class json;
class ostream;
class socket_stream;
class http_header;
class http_client;
class HttpCookie;
class HttpServletRequest;





class HttpServletResponse : public noncopyable
{
public:




 HttpServletResponse(socket_stream& stream);
 ~HttpServletResponse(void);
# 41 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletResponse.hpp"
 HttpServletResponse& setContentLength(long long int n);
# 51 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletResponse.hpp"
 HttpServletResponse& setChunkedTransferEncoding(bool on);






 HttpServletResponse& setKeepAlive(bool on);







 HttpServletResponse& setContentType(const char* value);






 HttpServletResponse& setContentEncoding(bool gzip);







 HttpServletResponse& setCharacterEncoding(const char* charset);






 HttpServletResponse& setDateHeader(const char* name, time_t value);






 HttpServletResponse& setHeader(const char* name, const char* value);






 HttpServletResponse& setHeader(const char* name, int value);
# 116 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletResponse.hpp"
 HttpServletResponse& setRange(long long from,
  long long to, long long total);






 HttpServletResponse& setStatus(int status);






 HttpServletResponse& setCgiMode(bool on);






 HttpServletResponse& setRedirect(const char* location, int status = 302);






 HttpServletResponse& addCookie(HttpCookie* cookie);
# 156 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletResponse.hpp"
 HttpServletResponse& addCookie(const char* name, const char* value,
  const char* domain = 
# 157 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletResponse.hpp" 3 4
                      __null
# 157 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletResponse.hpp"
                          , const char* path = 
# 157 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletResponse.hpp" 3 4
                                               __null
# 157 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletResponse.hpp"
                                                   ,
  time_t expires = 0);






 void encodeUrl(string& out, const char* url);





 http_header& getHttpHeader(void) const;
# 184 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletResponse.hpp"
 bool write(const void* data, size_t len);
# 194 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletResponse.hpp"
 bool write(const string& buf);







 bool write(const xml& body, const char* charset = "utf-8");







 bool write(const json& body, const char* charset = "utf-8");
# 220 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletResponse.hpp"
 int format(const char* fmt, ...) __attribute__((__format__ (__printf__, (2), (3))));
# 230 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletResponse.hpp"
 int vformat(const char* fmt, va_list ap);
# 242 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/HttpServletResponse.hpp"
 bool sendHeader(void);






 ostream& getOutputStream(void) const;





 socket_stream& getSocketStream(void) const;





 http_client* getClient() const
 {
  return client_;
 }





 void setHttpServletRequest(HttpServletRequest* request);

private:
 dbuf_guard* dbuf_internal_;
 dbuf_guard* dbuf_;
 socket_stream& stream_;
 HttpServletRequest* request_;
 http_client* client_;
 http_header* header_;
 char charset_[32];
 char content_type_[32];
 bool head_sent_;
};

}
# 106 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_download.hpp" 1
       



namespace acl {

class http_client;
class http_request;
class http_header;

class http_download : public noncopyable
{
public:






 http_download(const char* url, const char* addr = 
# 20 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_download.hpp" 3 4
                                                  __null
# 20 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_download.hpp"
                                                      );
 virtual ~http_download();






 http_header* request_header() const;






 http_request* request() const;
# 53 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_download.hpp"
 bool get(long long int range_from = -1, long long int range_to = -1,
  const char* req_body = 
# 54 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_download.hpp" 3 4
                        __null
# 54 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_download.hpp"
                            , size_t len = 0);
# 65 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_download.hpp"
 bool reset(const char* url = 
# 65 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_download.hpp" 3 4
                             __null
# 65 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_download.hpp"
                                 , const char* addr = 
# 65 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_download.hpp" 3 4
                                                      __null
# 65 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_download.hpp"
                                                          );





 const char* get_url() const;






 const char* get_addr() const;

protected:





 virtual bool on_response(http_client* conn);
# 96 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_download.hpp"
 virtual bool on_length(long long int n);
# 105 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_download.hpp"
 virtual bool on_save(const void* data, size_t len) = 0;

private:
 char* url_;
 char addr_[128];
 http_request* req_;


 bool save_total(const char* body, size_t len);






 bool save_range(const char* body, size_t len,
  long long int range_from, long long int range_to);



 bool save(http_request* req);
};

}
# 107 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_utils.hpp" 1
       



namespace acl {

class http_utils
{
public:
 http_utils() {}
 ~http_utils() {}
# 20 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_utils.hpp"
 static bool get_addr(const char* url, char* addr, size_t size);
# 30 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_utils.hpp"
 static bool get_addr(const char* url, char* domain, size_t size,
  unsigned short* port);
};

class http_url {
public:
 http_url(void);
 ~http_url(void) {}

 bool parse(const char* url);

public:




 const char* get_proto(void) const {
  return proto_;
 }





 const char* get_domain(void) const {
  return domain_.c_str();
 }





 unsigned short get_port(void) const {
  return port_;
 }





 const char* get_url_path(void) const {
  return url_path_.c_str();
 }





 const char* get_url_params(void) const {
  return url_params_.c_str();
 }




 void reset(void);

private:
 char proto_[16];
 string domain_;
 unsigned short port_;
 string url_path_;
 string url_params_;

 bool parse_url_part(const char* url);
 const char* parse_domain(const char* url);
};

}
# 108 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_request_pool.hpp" 1
       



namespace acl
{

class sslbase_conf;
# 18 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_request_pool.hpp"
class http_request_pool : public connect_pool
{
public:






 http_request_pool(const char* addr, size_t count, size_t idx = 0);
 ~http_request_pool();





 void set_ssl(sslbase_conf* ssl_conf);

protected:

 virtual connect_client* create_connect();

private:
 sslbase_conf* ssl_conf_;
};

class http_guard : public connect_guard
{
public:
 http_guard(http_request_pool& pool);
 ~http_guard(void);
};

}
# 109 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_request_manager.hpp" 1
       



namespace acl
{

class sslbase_conf;




class http_request_manager : public acl::connect_manager
{
public:
 http_request_manager();
 virtual ~http_request_manager();





 void set_ssl(sslbase_conf* ssl_conf);

protected:
# 34 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_request_manager.hpp"
 connect_pool* create_pool(const char* addr, size_t count, size_t idx);

private:
 sslbase_conf* ssl_conf_;
};

}
# 110 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/websocket.hpp" 1
# 13 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/websocket.hpp"
       



namespace acl
{

class socket_stream;
class aio_socket_stream;

enum
{
 FRAME_CONTINUATION = 0x00,
 FRAME_TEXT = 0x01,
 FRAME_BINARY = 0x02,
 FRAME_RSV3 = 0x03,
 FRAME_RSV4 = 0x04,
 FRAME_RSV5 = 0x05,
 FRAME_RSV6 = 0x06,
 FRAME_RSV7 = 0x07,
 FRAME_CLOSE = 0x08,
 FRAME_PING = 0x09,
 FRAME_PONG = 0x0A,
 FRAME_CTL_RSVB = 0x0B,
 FRAME_CTL_RSVC = 0x0C,
 FRAME_CTL_RSVD = 0x0D,
 FRAME_CTL_RSVE = 0x0E,
 FRAME_CTL_RSVF = 0x0F,
};

struct frame_header
{
 bool fin;
 bool rsv1;
 bool rsv2;
 bool rsv3;
 unsigned char opcode:4;
 bool mask;
 unsigned long long payload_len;
 unsigned int masking_key;

 frame_header(void) {
  fin = false;
  rsv1 = false;
  rsv2 = false;
  rsv3 = false;
  opcode = FRAME_TEXT;
  mask = false;
  payload_len = 0;
  masking_key = 0;
 }
};

class string;




class websocket : public noncopyable
{
public:




 websocket(socket_stream& client);
 ~websocket(void);




 websocket& reset(void);





 socket_stream& get_stream(void) const
 {
  return client_;
 }






 websocket& set_frame_fin(bool yes);






 websocket& set_frame_rsv1(bool yes);






 websocket& set_frame_rsv2(bool yes);






 websocket& set_frame_rsv3(bool yes);






 websocket& set_frame_opcode(unsigned char type);






 websocket& set_frame_payload_len(unsigned long long len);






 websocket& set_frame_masking_key(unsigned int mask);
# 152 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/websocket.hpp"
 bool send_frame_data(const void* data, size_t len);
 bool send_frame_data(void* data, size_t len);
 bool send_frame_data(const char* str);
 bool send_frame_data(char* str);
# 164 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/websocket.hpp"
 bool send_frame_pong(const void* data, size_t len);
 bool send_frame_pong(void* data, size_t len);
 bool send_frame_pong(const char* str);
 bool send_frame_pong(char* str);
# 176 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/websocket.hpp"
 bool send_frame_ping(const void* data, size_t len);
 bool send_frame_ping(void* data, size_t len);
 bool send_frame_ping(const char* str);
 bool send_frame_ping(char* str);
# 190 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/websocket.hpp"
 bool send_frame_data(aio_socket_stream& conn, void* data, size_t len);
# 199 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/websocket.hpp"
 bool send_frame_text(aio_socket_stream& conn, char* data, size_t len);
# 208 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/websocket.hpp"
 bool send_frame_binary(aio_socket_stream& conn, void* data, size_t len);
# 217 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/websocket.hpp"
 bool send_frame_ping(aio_socket_stream& conn, void* data, size_t len);
# 226 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/websocket.hpp"
 bool send_frame_pong(aio_socket_stream& conn, void* data, size_t len);





 bool read_frame_head(void);
# 241 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/websocket.hpp"
 int read_frame_data(void* buf, size_t size);
# 251 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/websocket.hpp"
 bool peek_frame_head(void);
# 262 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/websocket.hpp"
 int peek_frame_data(char* buf, size_t size);
 int peek_frame_data(string& buf, size_t size);





 bool is_head_finish(void) const;





 bool eof(void);





 const frame_header& get_frame_header(void) const
 {
  return header_;
 }





 bool frame_is_fin(void) const
 {
  return header_.fin;
 }





 bool frame_is_rsv1(void) const
 {
  return header_.rsv1;
 }





 bool frame_is_rsv2(void) const
 {
  return header_.rsv2;
 }





 bool frame_is_rsv3(void) const
 {
  return header_.rsv3;
 }





 unsigned char get_frame_opcode(void) const
 {
  return header_.opcode;
 }





 bool frame_has_mask(void) const
 {
  return header_.mask;
 }





 unsigned long long get_frame_payload_len(void) const
 {
  return header_.payload_len;
 }





 unsigned int get_frame_masking_key(void) const
 {
  return header_.masking_key;
 }





 unsigned long long get_frame_payload_nread(void) const
 {
  return payload_nread_;
 }

private:
 socket_stream& client_;
 struct frame_header header_;
 char* header_buf_;
 size_t header_size_;
 size_t header_len_;
 unsigned long long payload_nread_;
 unsigned long long payload_nsent_;
 bool header_sent_;

 unsigned status_;
 string* peek_buf_;

 void make_frame_header(void);

 void update_head_2bytes(unsigned char ch1, unsigned ch2);
 bool peek_head_2bytes(void);
 bool peek_head_len_2bytes(void);
 bool peek_head_len_8bytes(void);
 bool peek_head_masking_key(void);

};

}
# 111 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/WebSocketServlet.hpp" 1
       





namespace acl
{

class websocket;
class session;
class HttpServletRequest;
class HttpServletResponse;

class WebSocketServlet : public HttpServlet
{
public:
 WebSocketServlet(void);
# 28 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/WebSocketServlet.hpp"
 WebSocketServlet(socket_stream* stream, session* session);
# 38 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/WebSocketServlet.hpp"
 WebSocketServlet(socket_stream* stream,
  const char* memcache_addr = "127.0.0.1:11211");







 virtual ~WebSocketServlet(void);


 bool doRun(void);


 bool doRun(session& session, socket_stream* stream = 
# 53 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/WebSocketServlet.hpp" 3 4
                                                     __null
# 53 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/WebSocketServlet.hpp"
                                                         );


 bool doRun(const char* memcached_addr, socket_stream* stream);







 bool sendBinary(const char *buf, int len);






 bool sendText(const char *text);






 bool sendPong(const char *buffer = 
# 78 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/WebSocketServlet.hpp" 3 4
                                   __null
# 78 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/WebSocketServlet.hpp"
                                       );






 bool sendPing(const char *buffer = 
# 85 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/WebSocketServlet.hpp" 3 4
                                   __null
# 85 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/WebSocketServlet.hpp"
                                       );

protected:



 virtual void onClose(void) {}







 virtual bool onPing(unsigned long long payload_len, bool finish) = 0;







 virtual bool onPong(unsigned long long payload_len, bool finish) = 0;
# 116 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/WebSocketServlet.hpp"
 virtual bool onMessage(unsigned long long payload_len,
   bool text, bool finish) = 0;
# 128 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/WebSocketServlet.hpp"
 int readPayload(void* buf, size_t size);





 websocket* get_websocket(void) const
 {
  return ws_;
 }

private:

 bool doWebSocket(HttpServletRequest&, HttpServletResponse&);

private:
 websocket *ws_;
 int opcode_;
};

}
# 112 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_aclient.hpp" 1
       






struct HTTP_HDR;
struct HTTP_HDR_RES;
struct HTTP_RES;
struct HTTP_HDR_REQ;
struct HTTP_REQ;

struct ACL_ASTREAM_CTX;

namespace acl {

class string;
class aio_handle;
class aio_socket_stream;
class socket_stream;
class zlib_stream;
class websocket;
class sslbase_conf;
class sslbase_io;
class http_header;







class http_aclient : public aio_open_callback
{
public:





 http_aclient(aio_handle& handle, sslbase_conf* ssl_conf = 
# 42 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_aclient.hpp" 3 4
                                                          __null
# 42 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_aclient.hpp"
                                                              );
 virtual ~http_aclient(void);




 virtual void destroy(void) = 0;





 http_header& request_header(void);






 http_aclient& unzip_body(bool on);





 bool is_unzip_body(void) const
 {
  return unzip_;
 }
# 80 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_aclient.hpp"
 http_aclient& set_ssl_conf(sslbase_conf* ssl_conf);





 sslbase_conf* get_ssl_conf(void) const
 {
  return ssl_conf_;
 }
# 98 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_aclient.hpp"
 http_aclient& enable_ssl(bool yes);





 bool is_enable_ssl(void) const
 {
  return ssl_enable_ && ssl_conf_;
 }
# 119 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_aclient.hpp"
 bool open(const char* addr, int conn_timeout, int rw_timeout);




 void close(void);






 bool get_ns_addr(string& out) const;






 bool get_server_addr(string& out) const;





 aio_socket_stream* get_conn(void) const
 {
  return conn_;
 }

protected:





 virtual bool on_connect(void) = 0;




 virtual void on_ns_failed(void) {}




 virtual void on_connect_timeout(void) {}




 virtual void on_connect_failed(void) {}






 virtual bool on_read_timeout(void) { return false; }





 virtual void on_disconnect(void) {};






 virtual bool on_http_res_hdr(const http_header& header)
 {
  (void) header;
  return true;
 }
# 203 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_aclient.hpp"
 virtual bool on_http_res_body(char* data, size_t dlen)
 {
  (void) data;
  (void) dlen;
  return true;
 }






 virtual bool on_http_res_finish(bool success)
 {
  (void) success;
  return true;
 }





 virtual bool on_ws_handshake(void)
 {

  this->ws_read_wait(0);
  return true;
 }





 virtual void on_ws_handshake_failed(int status) { (void) status; }





 virtual bool on_ws_frame_text(void) { return true; }





 virtual bool on_ws_frame_binary(void) { return true; }




 virtual void on_ws_frame_closed(void) {}







 virtual bool on_ws_frame_data(char* data, size_t dlen)
 {
  (void) data;
  (void) dlen;
  return true;
 }





 virtual bool on_ws_frame_finish(void) { return true; }







 virtual void on_ws_frame_ping(string& data)
 {
  (void) data;
 }





 virtual void on_ws_frame_pong(string& data)
 {
  (void) data;
 }

public:






 void send_request(const void* body, size_t len);






 void ws_handshake(const void* key, size_t len);
 void ws_handshake(const char* key = "123456789xxx");





 virtual void ws_handshake_before(http_header& reqhdr)
 {
  (void) reqhdr;
 }
# 330 "/workspace/acl/lib_acl_cpp/include/acl_cpp/http/http_aclient.hpp"
 void ws_read_wait(int timeout = 0);







 bool ws_send_text(char* data, size_t len);







 bool ws_send_binary(void* data, size_t len);







 bool ws_send_ping(void* data, size_t len);







 bool ws_send_pong(void* data, size_t len);

protected:

 bool open_callback(void) { return true; }


 bool timeout_callback(void);


 void close_callback(void);


 bool read_wakeup(void);


 bool read_callback(char* data, int len);

protected:
 unsigned status_;
 int rw_timeout_;
 int gzip_header_left_;
 bool keep_alive_;
 bool unzip_;
 aio_handle& handle_;
 sslbase_conf* ssl_conf_;
 bool ssl_enable_;
 aio_socket_stream* conn_;
 socket_stream* stream_;
 http_header* header_;
 HTTP_HDR_RES* hdr_res_;
 HTTP_RES* http_res_;
 websocket* ws_in_;
 websocket* ws_out_;
 string* buff_;
 zlib_stream* zstream_;
 struct sockaddr_storage ns_addr_;
 struct sockaddr_storage serv_addr_;

 bool handle_connect(const ACL_ASTREAM_CTX* ctx);
 bool handle_ssl_handshake(void);

 bool handle_res_hdr(int status);

 bool handle_res_body(char* data, int dlen);
 bool res_plain(char* data, int dlen);
 bool res_unzip(zlib_stream& zstream, char* data, int dlen);

 bool handle_res_body_finish(char* data, int dlen);
 bool res_plain_finish(char* data, int dlen);
 bool res_unzip_finish(zlib_stream& zstream, char* data, int dlen);

 bool handle_websocket(void);
 bool handle_ws_data(void);
 bool handle_ws_ping(void);
 bool handle_ws_pong(void);
 bool handle_ws_other(void);

private:
 static int connect_callback(const ACL_ASTREAM_CTX* ctx);
 static int http_res_hdr_cllback(int status, void* ctx);
 static int http_res_callback(int status, char* data, int dlen, void* ctx);
};

}
# 113 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/query.hpp" 1
       







namespace acl
{





class query : public noncopyable
{
public:
 query();
 ~query();
# 29 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/query.hpp"
 query& create_sql(const char* sql_fmt, ...) __attribute__((__format__ (__printf__, (2), (3))));
# 38 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/query.hpp"
 query& create(const char* sql);







 query& set_parameter(const char* name, const char *value);







 query& set_parameter(const char* name, char value);







 query& set_parameter(const char* name, short value);







 query& set_parameter(const char* name, int value);
# 79 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/query.hpp"
 query& set_parameter(const char* name, float value, int precision = 8);
# 88 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/query.hpp"
 query& set_parameter(const char* name, double value, int precision = 8);
# 99 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/query.hpp"
 query& set_parameter(const char* name, long long int value);
# 109 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/query.hpp"
 query& set_date(const char* name, time_t value,
  const char* fmt = "%Y-%m-%d %H:%M:%S");







 query& set_format(const char* name, const char* fmt, ...)
  __attribute__((__format__ (__printf__, (3), (4))));
# 128 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/query.hpp"
 query& set_vformat(const char* name, const char* fmt, va_list ap);





 const string& to_string();





 void reset();
# 149 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/query.hpp"
 static const string& escape(const char* in, size_t len, string& out);
# 159 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/query.hpp"
 static const char* to_date(time_t t, string& out,
  const char* fmt = "%Y-%m-%d %H:%M:%S");

private:
 typedef enum
 {
  DB_PARAM_CHAR,
  DB_PARAM_SHORT,
  DB_PARAM_INT32,
  DB_PARAM_INT64,
  DB_PARAM_FLOAT,
  DB_PARAM_DOUBLE,
  DB_PARAM_STR
 } db_param_type;

 struct query_param
 {
  char type;
  int dlen;
  int precision;
  union
  {
   char c;
   short s;
   int n;
   long long int l;
   double d;
   float f;
   char S[1];
  } v;
 };

 std::map<string, query_param*> params_;
 string* sql_buf_;
 string sql_;
 string buf_;

 void del_param(const string& key);
 bool append_key(string& buf, char* key);
};

}
# 115 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/mysql_conf.hpp" 1
       




namespace acl {

class mysql_conf
{
public:







 mysql_conf(const char* dbaddr, const char* dbname);





 mysql_conf(const mysql_conf& conf);

 ~mysql_conf();






 mysql_conf& set_dbuser(const char* dbuser);






 mysql_conf& set_dbpass(const char* dbpass);






 mysql_conf& set_dblimit(size_t dblimit);






 mysql_conf& set_dbflags(unsigned long dbflags);






 mysql_conf& set_auto_commit(bool on);






 mysql_conf& set_conn_timeout(int timeout);






 mysql_conf& set_rw_timeout(int timeout);






 mysql_conf& set_charset(const char* charset);

 const char* get_dbaddr() const
 {
  return dbaddr_;
 }

 const char* get_dbname() const
 {
  return dbname_;
 }

 const char* get_dbkey() const
 {
  return dbkey_;
 }

 const char* get_dbuser() const
 {
  return dbuser_;
 }

 const char* get_dbpass() const
 {
  return dbpass_;
 }

 size_t get_dblimit() const
 {
  return dblimit_;
 }

 unsigned long get_dbflags() const
 {
  return dbflags_;
 }

 bool get_auto_commit() const
 {
  return auto_commit_;
 }

 int get_conn_timeout() const
 {
  return conn_timeout_;
 }

 int get_rw_timeout() const
 {
  return rw_timeout_;
 }

 const char* get_charset() const
 {
  return charset_;
 }

private:
 char* dbaddr_;
 char* dbname_;
 char* dbkey_;
 char* dbuser_;
 char* dbpass_;
 char* charset_;
 size_t dblimit_;
 unsigned long dbflags_;
 bool auto_commit_;
 int conn_timeout_;
 int rw_timeout_;
};

}
# 116 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/pgsql_conf.hpp" 1
       




namespace acl {

class pgsql_conf
{
public:
# 21 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/pgsql_conf.hpp"
 pgsql_conf(const char* dbaddr, const char* dbname);






 pgsql_conf(const pgsql_conf& conf);

 ~pgsql_conf(void);






 pgsql_conf& set_dbuser(const char* dbuser);






 pgsql_conf& set_dbpass(const char* dbpass);






 pgsql_conf& set_dblimit(size_t dblimit);






 pgsql_conf& set_conn_timeout(int timeout);






 pgsql_conf& set_rw_timeout(int timeout);






 pgsql_conf& set_charset(const char* charset);

 const char* get_dbaddr() const
 {
  return dbaddr_;
 }

 const char* get_dbname() const
 {
  return dbname_;
 }

 const char* get_dbkey() const
 {
  return dbkey_;
 }

 const char* get_dbuser() const
 {
  return dbuser_;
 }

 const char* get_dbpass() const
 {
  return dbpass_;
 }

 size_t get_dblimit() const
 {
  return dblimit_;
 }

 int get_conn_timeout() const
 {
  return conn_timeout_;
 }

 int get_rw_timeout() const
 {
  return rw_timeout_;
 }

 const char* get_charset() const
 {
  return charset_;
 }

private:
 char* dbaddr_;
 char* dbname_;
 char* dbkey_;
 char* dbuser_;
 char* dbpass_;
 char* charset_;
 size_t dblimit_;
 int conn_timeout_;
 int rw_timeout_;
};

}
# 117 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_handle.hpp" 1
       
# 10 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_handle.hpp"
namespace acl {




class db_row : public noncopyable
{
public:




 db_row(const std::vector<const char*>& names);
 ~db_row(void);






 const char* field_name(size_t ifield) const;







 const char* field_value(const char* name) const;
# 47 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_handle.hpp"
 const char* operator[](const char* name) const;







 const char* field_value(size_t ifield) const;







 const char* operator[](size_t ifield) const;







 int field_int(size_t ifield, int null_value = 0) const;







 int field_int(const char* name, int null_value = 0) const;
# 92 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_handle.hpp"
 long long int field_int64(size_t ifield,
  long long int null_value = 0) const;
# 106 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_handle.hpp"
 long long int field_int64(const char* name,
  long long int null_value = 0) const;
# 117 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_handle.hpp"
 double field_double(size_t ifield, double null_value = 0.0) const;
# 126 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_handle.hpp"
 double field_double(const char* name, double null_value = 0.0) const;






 const char* field_string(size_t ifield) const;






 const char* field_string(const char* name) const;






 size_t field_length(size_t ifield) const;





 size_t field_length(const char* name) const;






 void push_back(const char* value, size_t len);





 size_t length(void) const;




 void clear(void);

private:

 const std::vector<const char*>& names_;


 std::vector<const char*> values_;


 std::vector<size_t> lengths_;
};




class db_rows : public noncopyable
{
public:
 db_rows();
 virtual ~db_rows();
# 200 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_handle.hpp"
 const std::vector<const db_row*>& get_rows(
  const char* name, const char* value);






 const std::vector<db_row*>& get_rows() const;







 const db_row* operator[](size_t idx) const;





 bool empty() const;





 size_t length() const;

public:

 std::vector<const char*> names_;



 std::vector<db_row*> rows_;


 std::vector<const db_row*> rows_tmp_;


 void* result_tmp_;


 void (*result_free)(void* result);
};

class db_pool;
class query;




class db_handle : public connect_client
{
public:
 db_handle(void);
 virtual ~db_handle(void);







 bool open();







 virtual const char* dbtype() const = 0;





 virtual int get_errno() const
 {
  return -1;
 }





 virtual const char* get_error() const
 {
  return "unkonwn error";
 }






 virtual bool dbopen(const char* charset = 
# 299 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_handle.hpp" 3 4
                                          __null
# 299 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_handle.hpp"
                                              ) = 0;





 virtual bool is_opened() const = 0;





 virtual bool tbl_exists(const char* tbl_name) = 0;





 virtual bool close() = 0;
# 327 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_handle.hpp"
 virtual bool sql_select(const char* sql, db_rows* result = 
# 327 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_handle.hpp" 3 4
                                                           __null
# 327 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_handle.hpp"
                                                               ) = 0;







 virtual bool sql_update(const char* sql) = 0;





 virtual bool begin_transaction() { return false; }





 virtual bool commit() { return false; }





 virtual bool rollback() { return false; }
# 364 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_handle.hpp"
 bool exec_select(query& query, db_rows* result = 
# 364 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_handle.hpp" 3 4
                                                 __null
# 364 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_handle.hpp"
                                                     );
# 373 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_handle.hpp"
 bool exec_update(query& query);
# 385 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_handle.hpp"
 virtual string& escape_string(const char* in, size_t len, string& out);





 virtual int affect_count() const = 0;
# 400 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_handle.hpp"
 const db_rows* get_result() const;
# 409 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_handle.hpp"
 const std::vector<const db_row*>* get_rows(
  const char* name, const char* value);






 const std::vector<db_row*>* get_rows() const;






 const db_row* get_first_row() const;
# 433 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_handle.hpp"
 void free_result();







 const db_row* operator[](size_t idx) const;





 size_t length() const;





 bool empty() const;






 void print_out(size_t max = 0) const;







 db_handle& set_id(const char* id);





 const char* get_id() const
 {
  return id_;
 }






 db_handle& set_when(time_t now);





 time_t get_when() const
 {
  return when_;
 }




 static void set_loadpath(const char* path);





 static const char* get_loadpath();

protected:

 db_rows* result_;


 char* id_;


 time_t when_;
};

}
# 118 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_mysql.hpp" 1
       






typedef struct st_mysql MYSQL;

namespace acl {

class mysql_conf;

class db_mysql : public db_handle
{
public:
# 30 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_mysql.hpp"
 db_mysql(const char* dbaddr, const char* dbname,
  const char* dbuser, const char* dbpass,
  unsigned long dbflags = 0, bool auto_commit = true,
  int conn_timeout = 60, int rw_timeout = 60,
  const char* charset = "utf8");





 db_mysql(const mysql_conf& conf);
 ~db_mysql(void);





 unsigned long mysql_libversion(void) const;





 const char* mysql_client_info(void) const;






 MYSQL* get_conn(void) const
 {
  return conn_;
 }







 static void load(void);
# 80 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_mysql.hpp"
 const char* dbtype(void) const;




 int get_errno(void) const;




 const char* get_error(void) const;




 bool dbopen(const char* charset = 
# 95 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_mysql.hpp" 3 4
                                  __null
# 95 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_mysql.hpp"
                                      );




 bool is_opened(void) const;




 bool close(void);




 bool tbl_exists(const char* tbl_name);




 bool sql_select(const char* sql, db_rows* result = 
# 115 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_mysql.hpp" 3 4
                                                   __null
# 115 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_mysql.hpp"
                                                       );




 bool sql_update(const char* sql);




 int affect_count(void) const;






 bool begin_transaction(void);




 bool commit(void);




 bool rollback(void);

private:
 char* dbaddr_;
 char* dbname_;
 char* dbuser_;
 char* dbpass_;
 string charset_;

 unsigned long dbflags_;
 int conn_timeout_;
 int rw_timeout_;
 bool auto_commit_;
 MYSQL* conn_;

 bool sane_mysql_query(const char* sql);
 void sane_mysql_init(const char* dbaddr, const char* dbname,
  const char* dbuser, const char* dbpass,
  unsigned long dbflags, bool auto_commit,
  int conn_timeout, int rw_timeout,
  const char* charset);
};

}
# 119 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_sqlite.hpp" 1
       






typedef struct sqlite3 sqlite3;
typedef struct sqlite3_stmt sqlite3_stmt;

namespace acl {

class charset_conv;
class sqlite_cursor;

class db_sqlite : public db_handle
{
public:




 db_sqlite(const char* dbfile, const char* charset = "utf-8");
 ~db_sqlite(void);





 const char* version(void) const;
# 40 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_sqlite.hpp"
 bool set_conf(const char* pragma);
# 50 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_sqlite.hpp"
 const char* get_conf(const char* pragma, string& out);






 void show_conf(const char* pragma = 
# 57 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_sqlite.hpp" 3 4
                                    __null
# 57 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_sqlite.hpp"
                                        );





 int affect_total_count(void) const;






 sqlite3* get_conn(void) const
 {
  return db_;
 }






 bool prepare(sqlite_cursor& cursor);






 bool next(sqlite_cursor& cursor, bool* done);
# 101 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_sqlite.hpp"
 int sqlite3_prepare_v2(const char *zSql,
  int nByte, sqlite3_stmt **ppStmt, const char **pzTail);







 int sqlite3_step(sqlite3_stmt *stmt);






 int sqlite3_reset(sqlite3_stmt *pStmt);






 int sqlite3_finalize(sqlite3_stmt *stmt);
# 135 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_sqlite.hpp"
 int sqlite3_bind_blob(sqlite3_stmt *stmt, int iCol,
  const void *value, int n, void(*destory)(void*));
# 145 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_sqlite.hpp"
 int sqlite3_bind_int(sqlite3_stmt *stmt, int iCol, int value);
# 154 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_sqlite.hpp"
 int sqlite3_bind_int64(sqlite3_stmt* stmt, int iCol, long long int value);
# 165 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_sqlite.hpp"
 int sqlite3_bind_text(sqlite3_stmt *stmt, int iCol,
  const char *value, int n, void(*destory)(void*));






 int sqlite3_column_count(sqlite3_stmt *stmt);







 const void *sqlite3_column_blob(sqlite3_stmt *stmt, int iCol);







 int sqlite3_column_int(sqlite3_stmt *stmt, int iCol);







 long long int sqlite3_column_int64(sqlite3_stmt *stmt, int iCol);







 const unsigned char *sqlite3_column_text(sqlite3_stmt *stmt, int iCol);







 int sqlite3_column_bytes(sqlite3_stmt *stmt, int iCol);







 const char *sqlite3_column_name(sqlite3_stmt *stmt, int iCol);
# 231 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_sqlite.hpp"
 int sqlite3_exec(const char *sql,
  int(*callback)(void*,int,char**,char**), void *arg, char **errmsg);





 void sqlite3_free(void* ptr);
# 247 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_sqlite.hpp"
 const char* dbtype(void) const;




 int get_errno(void) const;




 const char* get_error(void) const;




 bool dbopen(const char* charset = 
# 262 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_sqlite.hpp" 3 4
                                  __null
# 262 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_sqlite.hpp"
                                      );




 bool is_opened(void) const;




 bool close(void);




 bool tbl_exists(const char* tbl_name);




 bool sql_select(const char* sql, db_rows* result = 
# 282 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_sqlite.hpp" 3 4
                                                   __null
# 282 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_sqlite.hpp"
                                                       );




 bool sql_update(const char* sql);




 int affect_count(void) const;




 bool begin_transaction(void);




 bool commit(void);




 bool set_busy_timeout(int nMillisecs);


private:

 sqlite3* db_;


 string dbfile_;


 charset_conv* conv_;


 string charset_;


 bool exec_sql(const char* sql, db_rows* result = 
# 324 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_sqlite.hpp" 3 4
                                                 __null
# 324 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_sqlite.hpp"
                                                     );
};

}
# 120 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_pgsql.hpp" 1
       






typedef struct pg_conn PGconn;

namespace acl {

class pgsql_conf;

class db_pgsql : public db_handle
{
public:
 db_pgsql(const pgsql_conf& conf);
 ~db_pgsql(void);

 static void load(void);





 const char* dbtype(void) const;




 int get_errno(void) const;




 const char* get_error(void) const;




 bool dbopen(const char* charset = 
# 41 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_pgsql.hpp" 3 4
                                  __null
# 41 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_pgsql.hpp"
                                      );




 bool is_opened(void) const;




 bool close(void);




 bool tbl_exists(const char* tbl_name);




 bool sql_select(const char* sql, db_rows* result = 
# 61 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_pgsql.hpp" 3 4
                                                   __null
# 61 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_pgsql.hpp"
                                                       );




 bool sql_update(const char* sql);




 int affect_count(void) const;




 bool begin_transaction(void);




 bool commit(void);




 bool rollback(void);

private:
 char* dbaddr_;
 char* dbname_;
 char* dbuser_;
 char* dbpass_;
 string charset_;

 int conn_timeout_;
 int rw_timeout_;

 PGconn* conn_;
 int affect_count_;

 void sane_pgsql_init(const char* dbaddr, const char* dbname,
  const char* dbuser, const char* dbpass, int conn_timeout,
  int rw_timeout, const char* charset);
 void* sane_pgsql_query(const char* sql);
};

}
# 121 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_pool.hpp" 1
       







namespace acl {

class db_handle;
class locker;

class db_pool : public connect_pool
{
public:






 db_pool(const char* dbaddr, size_t count, size_t idx = 0);
 virtual ~db_pool() {};
# 33 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_pool.hpp"
 db_handle* peek_open();





 size_t get_dblimit() const
 {
  return get_max();
 }





 size_t get_dbcount() const
 {
  return get_count();
 }





 void set_idle(int ttl)
 {
  set_idle_ttl(ttl);
 }
};

class db_guard : public connect_guard
{
public:
 db_guard(db_pool& pool) : connect_guard(pool) {}
 ~db_guard(void);
};

}
# 122 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/mysql_pool.hpp" 1
       





namespace acl {

class db_handle;
class mysql_conf;

class mysql_pool : public db_pool
{
public:
# 29 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/mysql_pool.hpp"
 mysql_pool(const char* dbaddr, const char* dbname,
  const char* dbuser, const char* dbpass,
  int dblimit = 64, unsigned long dbflags = 0,
  bool auto_commit = true, int conn_timeout = 60,
  int rw_timeout = 60, const char* charset = "utf8");





 mysql_pool(const mysql_conf& conf);
 ~mysql_pool();

protected:

 connect_client* create_connect();

private:
 mysql_conf* conf_;
};

}
# 123 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/pgsql_pool.hpp" 1
       





namespace acl {

class db_handle;
class pgsql_conf;

class pgsql_pool : public db_pool
{
public:
 pgsql_pool(const pgsql_conf& conf);
 ~pgsql_pool(void);

protected:

 connect_client* create_connect(void);

private:
 pgsql_conf* conf_;
};

}
# 124 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/sqlite_pool.hpp" 1
       





namespace acl {

class db_handle;

class sqlite_pool : public db_pool
{
public:






 sqlite_pool(const char* dbfile, size_t dblimit = 64,
  const char* charset = "utf-8");
 ~sqlite_pool();

protected:

 connect_client* create_connect();

private:

 char* dbfile_;

 char* charset_;
};

}
# 125 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/mysql_manager.hpp" 1
       







namespace acl {

class mysql_conf;

class mysql_manager : public connect_manager
{
public:
 mysql_manager(time_t idle_ttl = 120);
 ~mysql_manager();
# 34 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/mysql_manager.hpp"
 mysql_manager& add(const char* dbaddr, const char* dbname,
  const char* dbuser, const char* dbpass,
  size_t dblimit = 64, unsigned long dbflags = 0,
  bool auto_commit = true, int conn_timeout = 60,
  int rw_timeout = 60, const char* charset = "utf8");






 mysql_manager& add(const mysql_conf& conf);

protected:







 connect_pool* create_pool(const char* addr, size_t count, size_t idx);

private:
 time_t idle_ttl_;
 std::map<string, mysql_conf*> dbs_;
};

}
# 126 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/pgsql_manager.hpp" 1
       







namespace acl {

class pgsql_conf;

class pgsql_manager : public connect_manager
{
public:
 pgsql_manager(time_t idle_ttl = 120);
 ~pgsql_manager();






 pgsql_manager& add(const pgsql_conf& conf);

protected:







 connect_pool* create_pool(const char* addr, size_t count, size_t idx);

private:
 time_t idle_ttl_;
 std::map<string, pgsql_conf*> dbs_;
};

}
# 127 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/sqlite_manager.hpp" 1
       





namespace acl {

class sqlite_manager : public connect_manager
{
public:




 sqlite_manager(const char* charset = "utf-8");
 ~sqlite_manager();






 sqlite_manager& add(const char* dbfile, size_t dblimit);

protected:







 connect_pool* create_pool(const char* addr, size_t count, size_t idx);

private:

 char* dbfile_;
 char* charset_;
 size_t dblimit_;
};

}
# 128 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_service.hpp" 1
       







namespace acl {

typedef enum
{
 DB_OK,
 DB_ERR_OPEN,
 DB_ERR_EXEC_SQL,
} db_status;



class db_rows;

class db_query
{
public:
 db_query(void) {}
 virtual ~db_query(void) {}

 virtual void on_error(db_status status) = 0;
 virtual void on_ok(const db_rows* rows, int affected) = 0;







 virtual void destroy(void) {}
protected:
private:
};



class db_handle;
class aio_socket_stream;





class db_service : public ipc_service
{
public:
# 62 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_service.hpp"
 db_service(size_t dblimit = 100, int nthread = 2, bool win32_gui = false);
 virtual ~db_service(void);






 void sql_select(const char* sql, db_query* query);






 void sql_update(const char* sql, db_query* query);





 void push_back(db_handle* db);
protected:




 virtual db_handle* db_create() = 0;





 virtual void on_accept(aio_socket_stream* client);
# 108 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_service.hpp"
private:

 std::list<db_handle*> dbpool_;


 size_t dblimit_;


 size_t dbsize_;
};

}
# 129 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_service_mysql.hpp" 1
       






namespace acl {

class db_service_mysql : public db_service
{
# 28 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_service_mysql.hpp"
 db_service_mysql(const char* dbaddr, const char* dbname,
  const char* dbuser, const char* dbpass,
  unsigned long dbflags = 0, bool auto_commit = true,
  int conn_timeout = 60, int rw_timeout = 60,
  size_t dblimit = 100, int nthread = 2, bool win32_gui = false);

 ~db_service_mysql(void);

private:

 string dbaddr_;

 string dbname_;

 string dbuser_;

 string dbpass_;

 unsigned long dbflags_;

 bool auto_commit_;

 int conn_timeout_;

 int rw_timeout_;


 virtual db_handle* db_create(void);
};

}
# 130 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_service_sqlite.hpp" 1
       






namespace acl {

class db_service_sqlite : public db_service
{
public:
# 23 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_service_sqlite.hpp"
 db_service_sqlite(const char* dbname, const char* dbfile,
  size_t dblimit = 100, int nthread = 2, bool win32_gui = false);
 ~db_service_sqlite();

private:

 string dbname_;

 string dbfile_;


 virtual db_handle* db_create(void);
};

}
# 131 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/db_cursor.hpp" 1
       





namespace acl
{

class db_cursor : public noncopyable
{
public:
 db_cursor(void) {}
 virtual ~db_cursor(void) {}
};

}
# 132 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/db/sqlite_cursor.hpp" 1
       






struct sqlite3_stmt;

namespace acl
{

class db_row;
class db_sqlite;
class dbuf_guard;

class sqlite_cursor : public db_cursor
{
public:




 sqlite_cursor(query& q);
 ~sqlite_cursor(void);





 const string& get_sql(void) const
 {
  return sql_;
 }





 db_row* get_row(void) const
 {
  return row_;
 }





 void add_column_name(const char* name);





 void add_column_value(long long n);





 void add_column_value(double n);





 void add_column_value(const char* s);




 void create_row(void);




 void clear(void);

private:
 friend class db_sqlite;

 typedef int (*free_sqlite3_stmt_fn)(sqlite3_stmt*);

 string sql_;
 sqlite3_stmt* stmt_;
 free_sqlite3_stmt_fn free_callback;


 std::vector<const char*> names_;

 dbuf_guard* dbuf_;
 db_row* row_;
};

}
# 133 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/hsocket/hspool.hpp" 1
       






struct ACL_HTABLE;

namespace acl {

class hsclient;
class locker;

class hspool : public noncopyable
{
public:
# 27 "/workspace/acl/lib_acl_cpp/include/acl_cpp/hsocket/hspool.hpp"
 hspool(const char* addr_rw, const char* addr_rd = 
# 27 "/workspace/acl/lib_acl_cpp/include/acl_cpp/hsocket/hspool.hpp" 3 4
                                                  __null
# 27 "/workspace/acl/lib_acl_cpp/include/acl_cpp/hsocket/hspool.hpp"
                                                      ,
  bool cache_enable = true, bool retry_enable = true);

 ~hspool();
# 41 "/workspace/acl/lib_acl_cpp/include/acl_cpp/hsocket/hspool.hpp"
 hsclient* peek(const char* dbn, const char* tbl,
  const char* idx, const char* flds, bool readonly = false);





 void put(hsclient* client);
private:
 char* addr_rw_;
 char* addr_rd_;
 bool cache_enable_;
 bool retry_enable_;
 std::list<hsclient*> pool_;
 locker* locker_;
};

}
# 135 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/hsocket/hsclient.hpp" 1
       






# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/hsocket/../hsocket/hsproto.hpp" 1
       






namespace acl {

class string;
class hsrow;

class hsproto : public noncopyable
{
public:
 hsproto(bool cache_enable);
 ~hsproto();
# 30 "/workspace/acl/lib_acl_cpp/include/acl_cpp/hsocket/../hsocket/hsproto.hpp"
 static bool build_open(string& out, int id,
  const char* dbn, const char* tbl,
  const char* idx, const char* flds);
# 47 "/workspace/acl/lib_acl_cpp/include/acl_cpp/hsocket/../hsocket/hsproto.hpp"
 static bool build_get(string& out, int id,
  const char* values[], int num,
  const char* cond = "=", int nlimit = 0, int noffset = 0);
# 60 "/workspace/acl/lib_acl_cpp/include/acl_cpp/hsocket/../hsocket/hsproto.hpp"
 static bool __attribute__((__format__ (__printf__, (4), (5)))) build_get(string& out, int id,
  int nfld, const char* first_value, ...);
# 78 "/workspace/acl/lib_acl_cpp/include/acl_cpp/hsocket/../hsocket/hsproto.hpp"
 static bool build_mod(string& out, int id,
  const char* values[], int num,
  const char* to_values[], int to_num,
  const char* cond = "=", int nlimit = 0, int noffset = 0);
# 95 "/workspace/acl/lib_acl_cpp/include/acl_cpp/hsocket/../hsocket/hsproto.hpp"
 static bool build_del(string& out, int id, const char* values[],
  int num, const char* cond = "=",
  int nlimit = 0, int noffset = 0);
# 108 "/workspace/acl/lib_acl_cpp/include/acl_cpp/hsocket/../hsocket/hsproto.hpp"
 static bool __attribute__((__format__ (__printf__, (4), (5)))) build_del(string& out, int id,
  int nfld, const char* first_value, ...);
# 120 "/workspace/acl/lib_acl_cpp/include/acl_cpp/hsocket/../hsocket/hsproto.hpp"
 static bool build_add(string& out, int id,
  const char* values[], int num);
# 132 "/workspace/acl/lib_acl_cpp/include/acl_cpp/hsocket/../hsocket/hsproto.hpp"
 static bool __attribute__((__format__ (__printf__, (4), (5)))) build_add(string& out, int id,
  int nfld, const char* first_value, ...);
# 153 "/workspace/acl/lib_acl_cpp/include/acl_cpp/hsocket/../hsocket/hsproto.hpp"
 static void build_request(string& out, int id, const char* oper,
  const char* values[], int num,
  const char* limit_offset, char mop,
  const char* to_values[], int to_num);
# 166 "/workspace/acl/lib_acl_cpp/include/acl_cpp/hsocket/../hsocket/hsproto.hpp"
 bool parse_respond(int nfld, string& in,
                int& errnum_out, const char*& serror_out);





 const std::vector<hsrow*>& get();




 void reset();
private:
 bool debugOn_;
 bool cache_enable_;

 int ntoken_;
 char* buf_ptr_;


 std::vector<hsrow*> rows_;



 std::vector<hsrow*> rows_cache_;


 void clear_cache();


 hsrow* get_next_row();
};

}
# 9 "/workspace/acl/lib_acl_cpp/include/acl_cpp/hsocket/hsclient.hpp" 2



struct ACL_ARGV;

namespace acl {

class hsrow;
class hstable;

class hsclient : public noncopyable
{
public:







 hsclient(const char* addr, bool cache_enable = true, bool retry_enable = true);
 ~hsclient();
# 44 "/workspace/acl/lib_acl_cpp/include/acl_cpp/hsocket/hsclient.hpp"
 const std::vector<hsrow*>& get(const char* values[], int num,
  const char* cond = "=", int nlimit = 0, int noffset = 0);
# 54 "/workspace/acl/lib_acl_cpp/include/acl_cpp/hsocket/hsclient.hpp"
 const std::vector<hsrow*>& get(const char* first_value, ...)
  __attribute__((__format__ (__printf__, (2), (3))));
# 72 "/workspace/acl/lib_acl_cpp/include/acl_cpp/hsocket/hsclient.hpp"
 bool mod(const char* values[], int num,
  const char* to_values[], int to_num,
  const char* cond = "=", int nlimit = 0, int noffset = 0);
# 88 "/workspace/acl/lib_acl_cpp/include/acl_cpp/hsocket/hsclient.hpp"
 bool del(const char* values[], int num, const char* cond = "=",
  int nlimit = 0, int noffset = 0);
# 98 "/workspace/acl/lib_acl_cpp/include/acl_cpp/hsocket/hsclient.hpp"
 bool fmt_del(const char* first_value, ...) __attribute__((__format__ (__printf__, (2), (3))));
# 108 "/workspace/acl/lib_acl_cpp/include/acl_cpp/hsocket/hsclient.hpp"
 bool add(const char* values[], int num);
# 117 "/workspace/acl/lib_acl_cpp/include/acl_cpp/hsocket/hsclient.hpp"
 bool fmt_add(const char* first_value, ...) __attribute__((__format__ (__printf__, (2), (3))));





 void debug_enable(bool on);
# 135 "/workspace/acl/lib_acl_cpp/include/acl_cpp/hsocket/hsclient.hpp"
 bool open_tbl(const char* dbn, const char* tbl,
  const char* idx, const char* flds, bool auto_open = true);





 const char* get_addr() const;





 int get_error() const;






 const char* get_serror(int errnum) const;





 const char* get_last_serror() const;





 int get_id() const;
private:
 bool debugOn_;
 char* addr_;
 hsproto proto_;
 bool retry_enable_;
 int id_max_;
 hstable* tbl_curr_;
 string buf_;


 socket_stream stream_;
 std::map<string, hstable*> tables_;

 char cond_def_[2];
 int error_;
 const char* serror_;


 bool open_tbl(const char* dbn, const char* tbl,
  const char* idx, const char* flds, const char* key);



 void close_stream();


 void clear_tables();


 bool query(const char* oper, const char* values[], int num,
  const char* limit_offset, char mop,
  const char* to_values[], int to_num);
 bool chat();
};

}
# 136 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/hsocket/hstable.hpp" 1
       





namespace acl {

class hstable : public noncopyable
{
public:
 hstable(int id, const char* dbn, const char* tbl,
  const char* idx, const char* flds);
 ~hstable();

private:
 friend class hsclient;
 int id_;
 char* dbn_;
 char* tbl_;
 char* idx_;
 char* flds_;
 int nfld_;
 char** values_;
};

}
# 137 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/hsocket/hsrow.hpp" 1
       






namespace acl {

class string;

class hsrow : public noncopyable
{
public:




 hsrow(int ncolum);
 ~hsrow();





 void reset(int ncolum);






 void push_back(const char* value, size_t dlen);





 const std::vector<const char*>& get_row() const;
private:
 std::vector<const char*> row_;
 int ncolum_;
 int icolum_;
 string* colums_;
};

}
# 138 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/hsocket/hserror.hpp" 1
       
# 15 "/workspace/acl/lib_acl_cpp/include/acl_cpp/hsocket/hserror.hpp"
namespace acl {

class hserror
{
public:
 hserror();
 ~hserror();

 static const char* get_serror(int errnum);
};

}
# 139 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/beanstalk/beanstalk.hpp" 1
       
# 11 "/workspace/acl/lib_acl_cpp/include/acl_cpp/beanstalk/beanstalk.hpp"
struct ACL_ARGV;

namespace acl {
# 33 "/workspace/acl/lib_acl_cpp/include/acl_cpp/beanstalk/beanstalk.hpp"
class beanstalk : public noncopyable
{
public:






 beanstalk(const char* addr, int conn_timeout, bool retry = true);
 ~beanstalk();
# 53 "/workspace/acl/lib_acl_cpp/include/acl_cpp/beanstalk/beanstalk.hpp"
 bool use(const char* tube);
# 66 "/workspace/acl/lib_acl_cpp/include/acl_cpp/beanstalk/beanstalk.hpp"
 unsigned long long put(const void* data, size_t len,
  unsigned pri = 1024, unsigned delay = 0, unsigned ttr = 60);
# 79 "/workspace/acl/lib_acl_cpp/include/acl_cpp/beanstalk/beanstalk.hpp"
 unsigned long long format_put(unsigned pri, unsigned delay, unsigned ttr,
  const char* fmt, ...) __attribute__((__format__ (__printf__, (5), (6))));

 unsigned long long vformat_put(const char* fmt, va_list ap,
  unsigned pri = 1024, unsigned delay = 0, unsigned ttr = 60);
# 93 "/workspace/acl/lib_acl_cpp/include/acl_cpp/beanstalk/beanstalk.hpp"
 unsigned long long format_put(const char* fmt, ...) __attribute__((__format__ (__printf__, (2), (3))));
# 104 "/workspace/acl/lib_acl_cpp/include/acl_cpp/beanstalk/beanstalk.hpp"
 unsigned watch(const char* tube);
# 113 "/workspace/acl/lib_acl_cpp/include/acl_cpp/beanstalk/beanstalk.hpp"
 unsigned ignore(const char* tube);







 unsigned ignore_all();
# 136 "/workspace/acl/lib_acl_cpp/include/acl_cpp/beanstalk/beanstalk.hpp"
 unsigned long long reserve(string& buf, int timeout = -1);






 bool delete_id(unsigned long long id);
# 153 "/workspace/acl/lib_acl_cpp/include/acl_cpp/beanstalk/beanstalk.hpp"
 bool release(unsigned long long id, unsigned pri = 1024,
  unsigned delay = 0);
# 163 "/workspace/acl/lib_acl_cpp/include/acl_cpp/beanstalk/beanstalk.hpp"
 bool bury(unsigned long long id, unsigned pri = 1024);
# 173 "/workspace/acl/lib_acl_cpp/include/acl_cpp/beanstalk/beanstalk.hpp"
 bool touch(unsigned long long id);
# 183 "/workspace/acl/lib_acl_cpp/include/acl_cpp/beanstalk/beanstalk.hpp"
 bool open();





 void close();




 void quit();
# 203 "/workspace/acl/lib_acl_cpp/include/acl_cpp/beanstalk/beanstalk.hpp"
 unsigned long long peek(string& buf, unsigned long long id);
# 212 "/workspace/acl/lib_acl_cpp/include/acl_cpp/beanstalk/beanstalk.hpp"
 unsigned long long peek_ready(string& buf);
# 221 "/workspace/acl/lib_acl_cpp/include/acl_cpp/beanstalk/beanstalk.hpp"
 unsigned long long peek_delayed(string& buf);
# 230 "/workspace/acl/lib_acl_cpp/include/acl_cpp/beanstalk/beanstalk.hpp"
 unsigned long long peek_buried(string& buf);
# 239 "/workspace/acl/lib_acl_cpp/include/acl_cpp/beanstalk/beanstalk.hpp"
 int kick(unsigned n);






 bool list_tube_used(string&buf);






 bool list_tubes(string& buf);






 bool list_tubes_watched(string& buf);







 bool pause_tube(const char* tube, unsigned delay);



 const char* get_error() const
 {
  return errbuf_.c_str();
 }

 socket_stream& get_conn()
 {
  return conn_;
 }





 const char* get_addr() const
 {
  return addr_;
 }

private:
 char* addr_;
 int timeout_;
 bool retry_;
 string errbuf_;
 char* tube_used_;
 std::vector<char*> tubes_watched_;
 socket_stream conn_;
 unsigned long long peek_fmt(string& buf, const char* fmt, ...)
  __attribute__((__format__ (__printf__, (3), (4))));
 bool list_tubes_fmt(string& buf, const char* fmt, ...)
  __attribute__((__format__ (__printf__, (3), (4))));

 unsigned ignore_one(const char* tube);
 bool beanstalk_open();
 bool beanstalk_use();
 unsigned beanstalk_watch(const char* tube);
 ACL_ARGV* beanstalk_request(const string& cmdline,
  const void* data = 
# 309 "/workspace/acl/lib_acl_cpp/include/acl_cpp/beanstalk/beanstalk.hpp" 3 4
                    __null
# 309 "/workspace/acl/lib_acl_cpp/include/acl_cpp/beanstalk/beanstalk.hpp"
                        , size_t len = 0);
};

}
# 141 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/beanstalk/beanstalk_pool.hpp" 1
       






namespace acl {

class beanstalk;
class locker;






class beanstalk_pool : public noncopyable
{
public:
 beanstalk_pool();
 ~beanstalk_pool();
# 32 "/workspace/acl/lib_acl_cpp/include/acl_cpp/beanstalk/beanstalk_pool.hpp"
 beanstalk* peek(const char* addr, bool clean_watch = true,
  int conn_timeout = 60);
# 42 "/workspace/acl/lib_acl_cpp/include/acl_cpp/beanstalk/beanstalk_pool.hpp"
 void put(beanstalk* client, bool clean_watch = true,
  bool keep = true);
private:
 locker* lock_;
 typedef std::multimap<string, beanstalk*> bspool;
 typedef bspool::const_iterator pool_cit;
 typedef bspool::iterator pool_it;
 typedef std::pair<pool_it, pool_it> pool_range;

 bspool pool_;
};

}
# 142 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_define.hpp" 1
       
# 144 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_base64.hpp" 1
       

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_code.hpp" 1
       





namespace acl {

class string;

class mime_code : public pipe_stream
{
public:






 mime_code(bool addCrlf, bool addInvalid, const char* encoding_type);
 virtual ~mime_code(void) = 0;





 const char* get_encoding_type(void) const
 {
  return encoding_type_;
 }
# 44 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_code.hpp"
 virtual void encode_update(const char *src, int n,
  string* out);
# 55 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_code.hpp"
 virtual void encode_finish(string* out);
# 70 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_code.hpp"
 virtual void decode_update(const char *src, int n, string* out);
# 80 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_code.hpp"
 virtual void decode_finish(string* out);




 virtual void reset(void);





 virtual void add_crlf(bool on);





 virtual void add_invalid(bool on);






 static void create_decode_tab(const unsigned char *toTab, string *out);
# 113 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_code.hpp"
 void init(const unsigned char* toTab,
  const unsigned char* unTab, unsigned char fillChar);
# 123 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_code.hpp"
 void set_status(bool encoding = true);



 virtual int push_pop(const char* in, size_t len,
  string* out, size_t max = 0);
 virtual int pop_end(string* out, size_t max = 0);
 virtual void clear(void);
# 141 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_code.hpp"
 static mime_code* create(int encoding, bool warn_unsupport = true);

private:
 void encode(string* out);
 void decode(string* out);

 char m_encodeBuf[57];
 int m_encodeCnt;
 char m_decodeBuf[76];
 int m_decodeCnt;
 bool m_addCrLf;
 bool m_addInvalid;
 bool m_encoding;
 const unsigned char *m_toTab;
 const unsigned char *m_unTab;
 unsigned char m_fillChar;
 string* m_pBuf;
 char* encoding_type_;
};

}
# 4 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_base64.hpp" 2



namespace acl {

class mime_base64 : public mime_code
{
public:





 mime_base64(bool addCrlf = false, bool addInvalid = false);
 ~mime_base64(void);
# 27 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_base64.hpp"
 static void encode(const char* in, int n, string* out);







 static void decode(const char* in, int n, string* out);
};

}
# 146 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_body.hpp" 1
       





struct MIME_NODE;

namespace acl {

class pipe_manager;
class ostream;
class pipe_string;
class string;

class mime_body : public mime_node
{
public:
# 32 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_body.hpp"
 mime_body(const char* emailFile, const MIME_NODE* node,
  bool htmlFirst = true, bool enableDecode = true,
  const char* toCharset = "gb2312", off_t off = 0)
  : mime_node(emailFile, node, enableDecode, toCharset, off)
  , m_htmlFirst(htmlFirst)
 {
 }

 ~mime_body(void) {}
# 49 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_body.hpp"
 void set_status(bool htmlFirst)
 {
  m_htmlFirst = htmlFirst;
 }
# 63 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_body.hpp"
 bool save_body(pipe_manager& out, const char* src = 
# 63 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_body.hpp" 3 4
                                                    __null
# 63 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_body.hpp"
                                                        ,
  int len = 0);
# 75 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_body.hpp"
 bool save_body(ostream& out, const char* src = 
# 75 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_body.hpp" 3 4
                                               __null
# 75 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_body.hpp"
                                                   ,
  int len = 0);
# 87 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_body.hpp"
 bool save_body(const char* file_path, const char* src = 
# 87 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_body.hpp" 3 4
                                                        __null
# 87 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_body.hpp"
                                                            ,
  int len = 0);
# 99 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_body.hpp"
 bool save_body(pipe_string& out, const char* src = 
# 99 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_body.hpp" 3 4
                                                   __null
# 99 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_body.hpp"
                                                       ,
  int len = 0);
# 111 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_body.hpp"
 bool save_body(string& out, const char* src = 
# 111 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_body.hpp" 3 4
                                              __null
# 111 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_body.hpp"
                                                  ,
  int len = 0);





 bool html_stype(void) const;

private:
 bool m_htmlFirst;
};

}
# 147 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_head.hpp" 1
       







namespace acl {

typedef struct HEADER
{
 char *name;
 char *value;
} HEADER;

class mime_head : public noncopyable
{
public:
 mime_head(void);
 ~mime_head(void);

 const string& get_boundary(void) const;
 const char* get_ctype(void) const;
 const char* get_stype(void) const;
 const string& sender(void) const;
 const string& from(void) const;
 const string& replyto(void) const;
 const string& returnpath(void) const;
 const string& subject(void) const;
 const std::list<char*>& to_list(void) const;
 const std::list<char*>& cc_list(void) const;
 const std::list<char*>& bcc_list(void) const;
 const std::list<char*>& rcpt_list(void) const;
 const std::list<HEADER*>& header_list(void) const;
 const char* header_value(const char* name) const;
 int header_values(const char* name, std::list<const char*>* values) const;

 mime_head& set_sender(const char*);
 mime_head& set_from(const char*);
 mime_head& set_replyto(const char*);
 mime_head& set_returnpath(const char*);
 mime_head& set_subject(const char*);
 mime_head& add_to(const char*);
 mime_head& add_cc(const char*);
 mime_head& add_bcc(const char*);
 mime_head& add_rcpt(const char*);
 mime_head& add_header(const char*, const char*);
 mime_head& set_type(const char*, const char*);
 mime_head& set_boundary(const char*);

 void build_head(string& buf, bool clean);

 mime_head& reset(void);

protected:
private:
 string* m_boundary;
 std::list<char*>* m_rcpts;
 std::list<char*>* m_tos;
 std::list<char*>* m_ccs;
 std::list<char*>* m_bccs;
 std::list<HEADER*>* m_headers;
 string* m_sender;
 string* m_from;
 string* m_replyto;
 string* m_returnpath;
 string* m_subject;

 string m_ctype;
 string m_stype;
};

}
# 149 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime.hpp" 1
       
# 10 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime.hpp"
struct MIME_STATE;

namespace acl {

class string;
class mime_node;
class mime_attach;
class mime_body;
class mime_image;
class ifstream;
class fstream;

class mime : public noncopyable
{
public:
 mime(void);
 ~mime(void);
# 36 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime.hpp"
 mime& reset(void);




 void primary_head_finish(void);





 bool primary_head_ok(void) const;







 void update_begin(const char* path);
# 71 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime.hpp"
 bool update(const char* data, size_t len);




 void update_end(void);






 bool parse(const char* file_path);






 bool save_as(ostream& out);






 bool save_as(const char* file_path);
# 109 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime.hpp"
 bool save_mail(const char* path, const char* filename,
  bool enableDecode = true, const char* toCharset = "gb2312",
  off_t off = 0);
# 122 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime.hpp"
 mime_body* get_body_node(bool htmlFirst, bool enableDecode = true,
                const char* toCharset = "gb2312", off_t off = 0);
# 132 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime.hpp"
 mime_body* get_plain_body(bool enableDecode = true,
  const char* toCharset = "gb2312", off_t off = 0);
# 142 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime.hpp"
 mime_body* get_html_body(bool enableDecode = true,
  const char* toCharset = "gb2312", off_t off = 0);
# 152 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime.hpp"
 const std::list<mime_node*>& get_mime_nodes(bool enableDecode = true,
  const char* toCharset = "gb2312", off_t off = 0);
# 163 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime.hpp"
 const std::list<mime_attach*>& get_attachments(bool enableDecode = true,
  const char* toCharset = "gb2312", off_t off = 0, bool all = true);
# 173 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime.hpp"
 const std::list<mime_image*>& get_images(bool enableDecode = true,
  const char* toCharset = "gb2312", off_t off = 0);
 mime_image* get_image(const char* cld, bool enableDecode = true,
  const char* toCharset = "gb2312", off_t off = 0);






 void mime_debug(const char* save_path, bool decode = true);
# 193 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime.hpp"
 mime& set_sender(const char* addr)
 {
  m_primaryHeader.set_returnpath(addr);
  return *this;
 }






 mime& set_from(const char* addr)
 {
  m_primaryHeader.set_from(addr);
  return *this;
 }






 mime& set_replyto(const char* addr)
 {
  m_primaryHeader.set_replyto(addr);
  return *this;
 }






 mime& set_returnpath(const char* addr)
 {
  m_primaryHeader.set_returnpath(addr);
  return *this;
 }






 mime& set_subject(const char* s)
 {
  m_primaryHeader.set_subject(s);
  return *this;
 }






 mime& add_to(const char* addr)
 {
  m_primaryHeader.add_to(addr);
  return *this;
 }






 mime& add_cc(const char* addr)
 {
  m_primaryHeader.add_cc(addr);
  return *this;
 }






 mime& add_bcc(const char* addr)
 {
  m_primaryHeader.add_bcc(addr);
  return *this;
 }






 mime& add_rcpt(const char* addr)
 {
  m_primaryHeader.add_rcpt(addr);
  return *this;
 }







 mime& add_header(const char* name, const char* value)
 {
  m_primaryHeader.add_header(name, value);
  return *this;
 }







 mime& set_type(const char* ctype, const char* stype)
 {
  m_primaryHeader.set_type(ctype, stype);
  return *this;
 }






 mime& set_boundary(const char* s)
 {
  m_primaryHeader.set_boundary(s);
  return *this;
 }






 const string& sender(void) const
 {
  return m_primaryHeader.sender();
 }






 const string& from(void) const
 {
  return m_primaryHeader.from();
 }






 const string& replyto(void) const
 {
  return m_primaryHeader.replyto();
 }






 const string& returnpath(void) const
 {
  return m_primaryHeader.returnpath();
 }






 const string& subject(void) const
 {
  return m_primaryHeader.subject();
 }






 const std::list<char*>& to_list(void) const
 {
  return m_primaryHeader.to_list();
 }






 const std::list<char*>& cc_list(void) const
 {
  return m_primaryHeader.cc_list();
 }






 const std::list<char*>& bcc_list(void) const
 {
  return m_primaryHeader.bcc_list();
 }







 const std::list<char*>& rcpt_list(void) const
 {
  return m_primaryHeader.rcpt_list();
 }





 const std::list<HEADER*>& header_list(void) const
 {
  return m_primaryHeader.header_list();
 }






 const char* header_value(const char* name) const
 {
  return m_primaryHeader.header_value(name);
 }







 int header_values(const char* name, std::list<const char*>* values) const
 {
  return m_primaryHeader.header_values(name, values);
 }





 const char* get_ctype(void) const
 {
  return m_primaryHeader.get_ctype();
 }





 const char* get_stype(void) const
 {
  return m_primaryHeader.get_stype();
 }





 const mime_head& primary_header(void) const
 {
  return m_primaryHeader;
 }

private:
 mime_head m_primaryHeader;

 MIME_STATE* m_pMimeState;
 bool m_bPrimaryHeadFinish;
 char* m_pFilePath;
 mime_body* m_pBody;
 std::list<mime_node*>* m_pNodes;
 std::list<mime_attach*>* m_pAttaches;
 std::list<mime_image*>* m_pImages;
};

}
# 150 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_image.hpp" 1
       





namespace acl {

class mime_image : public mime_node
{
public:
 mime_image(const char* emailFile, const MIME_NODE* node,
  bool enableDecode = true, const char* toCharset = "gb2312",
  off_t off = 0)
  : mime_node(emailFile, node, enableDecode, toCharset, off)
 {
 }

 ~mime_image(void) {}

 const char* get_location(void) const;
};

}
# 151 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_quoted_printable.hpp" 1
       





namespace acl {

class string;

class mime_quoted_printable : public mime_code
{
public:





 mime_quoted_printable(bool addCrlf = false, bool addInvalid = false);
 ~mime_quoted_printable(void);
# 36 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_quoted_printable.hpp"
 void encode_update(const char *src, int n, string* out);
# 45 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_quoted_printable.hpp"
 void encode_finish(string* out);
# 59 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_quoted_printable.hpp"
 void decode_update(const char *src, int n, string* out);
# 68 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_quoted_printable.hpp"
 void decode_finish(string* out);
# 77 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_quoted_printable.hpp"
 static void encode(const char* in, int n, string* out);







 static void decode(const char* in, int n, string* out);




 void reset(void);





 void add_crlf(bool on);





 void add_invalid(bool on);

protected:
private:
 void encode(string* out);
 void decode(string* out);

 bool hex_decode(unsigned char first, unsigned char second,
  unsigned int *result);

 char m_encodeBuf[72];
 int m_encodeCnt;
 char m_decodeBuf[144];
 int m_decodeCnt;
 bool m_addCrLf;
 bool m_addInvalid;
};

}
# 153 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_uucode.hpp" 1
       





namespace acl {

class mime_uucode : public mime_code
{
public:





 mime_uucode(bool addCrlf = false, bool addInvalid = false);
 ~mime_uucode(void);
# 27 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_uucode.hpp"
 static void encode(const char* in, int n, string* out);







 static void decode(const char* in, int n, string* out);

protected:
private:
};

}
# 154 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_xxcode.hpp" 1
       





namespace acl {

class mime_xxcode : public mime_code
{
public:





 mime_xxcode(bool addCrlf = false, bool addInvalid = false);
 ~mime_xxcode(void);
# 27 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/mime_xxcode.hpp"
 static void encode(const char* in, int n, string* out);







 static void decode(const char* in, int n, string* out);

protected:
private:
};

}
# 155 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/rfc822.hpp" 1
       







namespace acl {




struct rfc822_addr
{
 char* addr;
 char* comment;
};

typedef enum
{
 tzone_gmt,
 tzone_cst
} tzone_t;

class rfc822 : public noncopyable
{
public:
 rfc822(void);
 ~rfc822(void);







 time_t parse_date(const char *in);
# 47 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/rfc822.hpp"
 void mkdate(time_t t, char* out, size_t size, tzone_t zone = tzone_cst);







 void mkdate_cst(time_t t, char* out, size_t size);







 void mkdate_gmt(time_t t, char* out, size_t size);
# 77 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/rfc822.hpp"
 const std::list<rfc822_addr*>& parse_addrs(const char* in,
  const char* to_charset = "utf-8");
# 88 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mime/rfc822.hpp"
 const rfc822_addr* parse_addr(const char* in,
  const char* to_charset = "utf-8");






 bool check_addr(const char* in);

private:
 std::list<rfc822_addr*> addrs_;

 void reset(void);
};

}
# 157 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/smtp/mail_attach.hpp" 1
       





namespace acl {

class mime_code;
class ostream;




class mail_attach
{
public:






 mail_attach(const char* filepath, const char* content_type,
  const char* charset);
 ~mail_attach();
# 35 "/workspace/acl/lib_acl_cpp/include/acl_cpp/smtp/mail_attach.hpp"
 mail_attach& set_filename(const char* name, const char* charset = 
# 35 "/workspace/acl/lib_acl_cpp/include/acl_cpp/smtp/mail_attach.hpp" 3 4
                                                                  __null
# 35 "/workspace/acl/lib_acl_cpp/include/acl_cpp/smtp/mail_attach.hpp"
                                                                      );







 mail_attach& set_content_id(const char* id);





 const char* get_filepath() const
 {
  return filepath_.c_str();
 }





 const char* get_filename() const
 {
  return filename_.c_str();
 }





 const char* get_content_type() const
 {
  return ctype_.c_str();
 }





 const char* get_content_id() const
 {
  return cid_.c_str();
 }







 bool save_to(mime_code* coder, string& out);







 bool save_to(mime_code* coder, ostream& out);






 void build_header(const char* transfer_encoding, string& out);

private:
 string filepath_;
 string filename_;
 string ctype_;
 string cid_;
 string charset_;

 bool rfc2047_encode(const char* name, const char* charset, string& out);
};

}
# 159 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/smtp/mail_body.hpp" 1
       
# 10 "/workspace/acl/lib_acl_cpp/include/acl_cpp/smtp/mail_body.hpp"
namespace acl {

class mime_code;
class mail_attach;




class mail_body : public noncopyable
{
public:





 mail_body(const char* charset = "utf-8",
  const char* encoding = "base64");
 ~mail_body();





 const string& get_content_type() const
 {
  return content_type_;
 }





 const http_ctype& get_ctype() const
 {
  return ctype_;
 }
# 55 "/workspace/acl/lib_acl_cpp/include/acl_cpp/smtp/mail_body.hpp"
 mail_body& set_html(const char* html, size_t len);
# 64 "/workspace/acl/lib_acl_cpp/include/acl_cpp/smtp/mail_body.hpp"
 mail_body& set_plain(const char* plain, size_t len);
# 75 "/workspace/acl/lib_acl_cpp/include/acl_cpp/smtp/mail_body.hpp"
 mail_body& set_alternative(const char* html, size_t hlen,
  const char* plain, size_t plen);
# 88 "/workspace/acl/lib_acl_cpp/include/acl_cpp/smtp/mail_body.hpp"
 mail_body& set_relative(const char* html, size_t hlen,
  const char* plain, size_t plen,
  const std::vector<mail_attach*>& attachments);






 const char* get_html(size_t& len) const
 {
  len = hlen_;
  return html_;
 }






 const char* get_plain(size_t& len) const
 {
  len = plen_;
  return plain_;
 }





 const std::vector<mail_attach*>* get_attachments() const
 {
  return attachments_;
 }






 bool save_to(ostream& out) const;






 bool save_to(string& out) const;
# 144 "/workspace/acl/lib_acl_cpp/include/acl_cpp/smtp/mail_body.hpp"
 bool save_html(const char* in, size_t len, string& out) const;
# 153 "/workspace/acl/lib_acl_cpp/include/acl_cpp/smtp/mail_body.hpp"
 bool save_plain(const char* in, size_t len, string& out) const;
# 166 "/workspace/acl/lib_acl_cpp/include/acl_cpp/smtp/mail_body.hpp"
 bool save_relative(const char* html, size_t hlen,
  const char* plain, size_t plen,
  const std::vector<mail_attach*>& attachments,
  string& out) const;
# 180 "/workspace/acl/lib_acl_cpp/include/acl_cpp/smtp/mail_body.hpp"
 bool save_alternative(const char* html, size_t hlen,
  const char* plain, size_t plen, string& out) const;

private:
 string charset_;
 string content_type_;
 string transfer_encoding_;
 mime_code* coder_;
 string boundary_;
 http_ctype ctype_;
 int mime_stype_;

 const char* html_;
 size_t hlen_;
 const char* plain_;
 size_t plen_;
 const std::vector<mail_attach*>* attachments_;

 bool build(const char* in, size_t len, const char* content_type,
  const char* charset, mime_code& coder, string& out) const;
 bool build_html(const char* in, size_t len,
  const char* charset, string& out) const;
 bool build_plain(const char* in, size_t len,
  const char* charset, string& out) const;

 void set_content_type(const char* content_type);
};

}
# 160 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/smtp/mail_message.hpp" 1
       







namespace acl {

class dbuf_pool;
struct rfc822_addr;
class mail_attach;
class mail_body;
class ofstream;





class mail_message : public noncopyable
{
public:




 mail_message(const char* charset = "utf-8");
 ~mail_message();







 mail_message& set_auth(const char* user, const char* pass);
# 46 "/workspace/acl/lib_acl_cpp/include/acl_cpp/smtp/mail_message.hpp"
 mail_message& set_from(const char* from, const char* name = 
# 46 "/workspace/acl/lib_acl_cpp/include/acl_cpp/smtp/mail_message.hpp" 3 4
                                                            __null
# 46 "/workspace/acl/lib_acl_cpp/include/acl_cpp/smtp/mail_message.hpp"
                                                                );

 mail_message& set_sender(const char* sender, const char* name = 
# 48 "/workspace/acl/lib_acl_cpp/include/acl_cpp/smtp/mail_message.hpp" 3 4
                                                                __null
# 48 "/workspace/acl/lib_acl_cpp/include/acl_cpp/smtp/mail_message.hpp"
                                                                    );







 mail_message& set_reply_to(const char* reply_to, const char* name = 
# 56 "/workspace/acl/lib_acl_cpp/include/acl_cpp/smtp/mail_message.hpp" 3 4
                                                                    __null
# 56 "/workspace/acl/lib_acl_cpp/include/acl_cpp/smtp/mail_message.hpp"
                                                                        );






 mail_message& set_return_path(const char* return_path);






 mail_message& set_delivered_to(const char* delivered_to);






 mail_message& add_recipients(const char* recipients);






 mail_message& add_to(const char* to);






 mail_message& add_cc(const char* cc);






 mail_message& add_bcc(const char* bcc);







 mail_message& set_subject(const char* subject);







 mail_message& add_header(const char* name, const char* value);






 mail_message& set_body(const mail_body& body);







 mail_message& add_attachment(const char* filepath,
  const char* content_type);







 bool save_to(const char* filepath);






 bool build_header(string& out);





 const char* get_email() const
 {
  return filepath_;
 }





 const char* get_auth_user() const
 {
  return auth_user_;
 }





 const char* get_auth_pass() const
 {
  return auth_pass_;
 }





 const rfc822_addr* get_from() const
 {
  return from_;
 }





 const rfc822_addr* get_sender() const
 {
  return sender_;
 }





 const rfc822_addr* get_reply_to() const
 {
  return reply_to_;
 }





 const rfc822_addr* get_return_path() const
 {
  return return_path_;
 }





 const rfc822_addr* get_delivered_to() const
 {
  return delivered_to_;
 }

 const std::vector<rfc822_addr*>& get_to() const
 {
  return to_list_;
 }





 const std::vector<rfc822_addr*>& get_cc() const
 {
  return cc_list_;
 }





 const std::vector<rfc822_addr*>& get_bcc() const
 {
  return bcc_list_;
 }





 const std::vector<rfc822_addr*>& get_recipients() const
 {
  return recipients_;
 }






 const char* get_header_value(const char* name) const;






 static void create_boundary(const char* id, string& out);

private:
 dbuf_pool* dbuf_;
 char* charset_;
 char* transfer_encoding_;

 char* auth_user_;
 char* auth_pass_;
 rfc822_addr* from_;
 rfc822_addr* sender_;
 rfc822_addr* reply_to_;
 rfc822_addr* return_path_;
 rfc822_addr* delivered_to_;
 std::vector<rfc822_addr*> to_list_;
 std::vector<rfc822_addr*> cc_list_;
 std::vector<rfc822_addr*> bcc_list_;
 std::vector<rfc822_addr*> recipients_;
 char* subject_;
 std::vector<std::pair<char*, char*> > headers_;
 std::vector<mail_attach*> attachments_;
 const mail_body* body_;
 size_t body_len_;
 char* filepath_;

 void add_addrs(const char* in, std::vector<rfc822_addr*>& out);
 bool append_addr(const rfc822_addr& addr, string& out);
 bool append_addr(const char* name, const rfc822_addr& addr,
  string& out);
 bool append_addrs(const char* name,
  const std::vector<rfc822_addr*>& addrs, string& out);
 bool append_message_id(string& out);
 bool append_subject(const char* subject, string& out);
 bool append_date(string& out);
 bool append_header(ofstream& fp);
 bool append_multipart(ofstream& fp);
};

}
# 161 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/smtp/smtp_client.hpp" 1
       







struct SMTP_CLIENT;

namespace acl {

class istream;
class sslbase_conf;
class mail_message;




class smtp_client : public noncopyable
{
public:







 smtp_client(const char* addr, int conn_timeout = 60,
  int rw_timeout = 60);
 ~smtp_client();
# 47 "/workspace/acl/lib_acl_cpp/include/acl_cpp/smtp/smtp_client.hpp"
 bool send(const mail_message& message, const char* email = 
# 47 "/workspace/acl/lib_acl_cpp/include/acl_cpp/smtp/smtp_client.hpp" 3 4
                                                           __null
# 47 "/workspace/acl/lib_acl_cpp/include/acl_cpp/smtp/smtp_client.hpp"
                                                               );
# 59 "/workspace/acl/lib_acl_cpp/include/acl_cpp/smtp/smtp_client.hpp"
 bool send_envelope(const mail_message& message);






 smtp_client& set_ssl(sslbase_conf* ssl_conf);





 int get_code() const;





 const char* get_status() const;
# 89 "/workspace/acl/lib_acl_cpp/include/acl_cpp/smtp/smtp_client.hpp"
 bool write(const char* data, size_t len);







 bool format(const char* fmt, ...);
# 106 "/workspace/acl/lib_acl_cpp/include/acl_cpp/smtp/smtp_client.hpp"
 bool vformat(const char* fmt, va_list ap);
# 115 "/workspace/acl/lib_acl_cpp/include/acl_cpp/smtp/smtp_client.hpp"
 bool open();




 void close();





 bool get_banner();





 bool greet();







 bool auth_login(const char* user, const char* pass);







 bool mail_from(const char* from);







 bool rcpt_to(const char* to);







 bool data_begin();
# 173 "/workspace/acl/lib_acl_cpp/include/acl_cpp/smtp/smtp_client.hpp"
 bool send_email(const char* filepath);






 bool data_end();





 bool quit();





 bool noop();





 bool reset();





 socket_stream& get_stream(void)
 {
  return stream_;
 }

private:
 sslbase_conf* ssl_conf_;
 char* addr_;
 int conn_timeout_;
 int rw_timeout_;
 SMTP_CLIENT* client_;
 socket_stream stream_;
 bool ehlo_;
 bool reuse_;

 bool to_recipients(const std::vector<rfc822_addr*>& recipients);
};

}
# 162 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/event/event_timer.hpp" 1
       




namespace acl
{

class event_task;

class event_timer : public noncopyable
{
public:




 event_timer(bool keep = false);
 virtual ~event_timer();
# 31 "/workspace/acl/lib_acl_cpp/include/acl_cpp/event/event_timer.hpp"
 virtual void destroy(void) {}





 bool empty(void) const
 {
  return tasks_.empty();
 }





 size_t length(void) const
 {
  return length_;
 }





 void keep_timer(bool on);





 bool keep_timer(void) const
 {
  return keep_;
 }





 int clear(void);







 virtual void timer_callback(unsigned int id) = 0;
# 101 "/workspace/acl/lib_acl_cpp/include/acl_cpp/event/event_timer.hpp"
 long long int set_task(unsigned int id, long long int delay);
 long long int del_task(unsigned int id);
# 118 "/workspace/acl/lib_acl_cpp/include/acl_cpp/event/event_timer.hpp"
 long long int trigger(void);
 long long int min_delay(void) const
 {
  return min_delay_;
 }


protected:




 long long int min_delay_;
 long long int present_;


private:
 size_t length_;
 std::list<event_task*> tasks_;
 bool keep_;



 long long int set_task(event_task* task);





 void set_time(void);
};

}
# 164 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/event/event_mutex.hpp" 1
       




namespace acl
{

class event_mutex : public noncopyable
{
public:
 event_mutex(bool recursive = true);
 ~event_mutex(void);

 bool lock(void);
 bool unlock(void);

private:
 bool recursive_;
 unsigned int nested_;




 int in_;
 int out_;

 atomic_long count_;
 unsigned long tid_;
};

}
# 165 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/master/master_base.hpp" 1
       


# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/master/master_conf.hpp" 1
       





struct ACL_XINETD_CFG_PARSER;
struct ACL_CFG_INT_TABLE;
struct ACL_CFG_INT64_TABLE;
struct ACL_CFG_STR_TABLE;
struct ACL_CFG_BOOL_TABLE;

namespace acl {

typedef struct master_int_tbl
{
 const char *name;
 int defval;
 int *target;
 int min;
 int max;
} master_int_tbl;

typedef struct master_str_tbl
{
 const char *name;
 const char *defval;
 char **target;
} master_str_tbl;

typedef struct master_bool_tbl
{
 const char *name;
 int defval;
 int *target;
} master_bool_tbl;

typedef struct master_int64_tbl
{
 const char *name;






 long long int defval;
 long long int *target;
 long long int min;
 long long int max;

} master_int64_tbl;

class master_base;

class master_conf : public noncopyable
{
public:
 master_conf();
 ~master_conf();





 void set_cfg_bool(master_bool_tbl* table);





 void set_cfg_int(master_int_tbl* table);





 void set_cfg_int64(master_int64_tbl* table);





 void set_cfg_str(master_str_tbl* table);





 void load(const char* path);





 const char* get_path(void) const;







 void reset(void);

 ACL_CFG_INT_TABLE* get_int_cfg() const;
 ACL_CFG_INT64_TABLE* get_int64_cfg() const;
 ACL_CFG_STR_TABLE* get_str_cfg() const;
 ACL_CFG_BOOL_TABLE* get_bool_cfg() const;

private:
 char* path_;
 bool cfg_loaded_;

 ACL_XINETD_CFG_PARSER* cfg_;
 ACL_CFG_INT_TABLE* int_cfg_;
 ACL_CFG_INT64_TABLE* int64_cfg_;
 ACL_CFG_STR_TABLE* str_cfg_;
 ACL_CFG_BOOL_TABLE* bool_cfg_;

 master_int_tbl* int_tbl_;
 master_str_tbl* str_tbl_;
 master_bool_tbl* bool_tbl_;
 master_int64_tbl* int64_tbl_;

 void load_str(void);
 void load_bool(void);
 void load_int(void);
 void load_int64(void);
};

}
# 5 "/workspace/acl/lib_acl_cpp/include/acl_cpp/master/master_base.hpp" 2




struct ACL_EVENT;

namespace acl
{

class server_socket;
class event_timer;
class string;

 void master_log_enable(bool yes);
 bool master_log_enabled(void);

class master_base : public noncopyable
{
public:





 master_base& set_cfg_bool(master_bool_tbl* table);






 master_base& set_cfg_int(master_int_tbl* table);






 master_base& set_cfg_int64(master_int64_tbl* table);






 master_base& set_cfg_str(master_str_tbl* table);





 bool daemon_mode(void) const;
# 67 "/workspace/acl/lib_acl_cpp/include/acl_cpp/master/master_base.hpp"
 bool proc_set_timer(event_timer* timer);





 void proc_del_timer(event_timer* timer);

protected:
 bool daemon_mode_;
 bool proc_inited_;
 std::vector<server_socket*> servers_;

 master_base();
 virtual ~master_base();





 virtual void proc_on_listen(server_socket& ss) { (void) ss; }





 virtual void proc_pre_jail() {}





 virtual void proc_on_init() {}




 virtual void proc_on_exit() {}




 virtual bool proc_on_sighup(string&) { return true; }


 master_conf conf_;

protected:

 void set_event(ACL_EVENT* event);





 ACL_EVENT* get_event(void) const
 {
  return event_;
 }

private:
 ACL_EVENT* event_;
};

}
# 167 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/master/master_threads.hpp" 1
       





struct ACL_VSTREAM;
struct ACL_EVENT;
struct ACL_VSTRING;
struct acl_pthread_pool_t;

namespace acl {

class socket_stream;





class master_threads : public master_base
{
public:






 void run_daemon(int argc, char** argv);
# 45 "/workspace/acl/lib_acl_cpp/include/acl_cpp/master/master_threads.hpp"
 bool run_alone(const char* addrs, const char* path = 
# 45 "/workspace/acl/lib_acl_cpp/include/acl_cpp/master/master_threads.hpp" 3 4
                                                     __null
# 45 "/workspace/acl/lib_acl_cpp/include/acl_cpp/master/master_threads.hpp"
                                                         ,
  unsigned int count = 1, int threads_count = 1);





 void thread_enable_read(socket_stream* stream);





 void thread_disable_read(socket_stream* stream);





 const char* get_conf_path(void) const;






 size_t task_qlen(void) const;

public:




 acl_pthread_pool_t* threads_pool(void) const;

protected:

 master_threads();
 virtual ~master_threads();







 virtual bool thread_on_read(socket_stream* stream) = 0;







 virtual bool keep_read(socket_stream* stream)
 {
  (void) stream;
  return true;
 }
# 112 "/workspace/acl/lib_acl_cpp/include/acl_cpp/master/master_threads.hpp"
 virtual bool thread_on_accept(socket_stream* stream)
 {
  (void) stream;
  return true;
 }







 virtual bool thread_on_handshake(socket_stream *stream)
 {
  (void) stream;
  return true;
 }
# 137 "/workspace/acl/lib_acl_cpp/include/acl_cpp/master/master_threads.hpp"
 virtual bool thread_on_timeout(socket_stream* stream)
 {
  (void) stream;
  return false;
 }







 virtual void thread_on_close(socket_stream* stream) { (void) stream; }




 virtual void thread_on_init() {}




 virtual void thread_on_exit() {}
# 173 "/workspace/acl/lib_acl_cpp/include/acl_cpp/master/master_threads.hpp"
 virtual bool proc_exit_timer(size_t nclients, size_t nthreads)
 {
  (void) nclients;
  (void) nthreads;
  return true;
 }

private:
 thread_mutex lock_;

 void push_back(server_socket* ss);
 void run(int argc, char** argv);


 static int service_main(void*, ACL_VSTREAM*);


 static void service_on_listen(void*, ACL_VSTREAM*);


 static int service_on_accept(void*, ACL_VSTREAM*);



 static int service_on_handshake(void*, ACL_VSTREAM*);


 static int service_on_timeout(void*, ACL_VSTREAM*);


 static void service_on_close(void*, ACL_VSTREAM*);


 static void service_pre_jail(void*);


 static void service_init(void*);


 static int service_exit_timer(void*, size_t, size_t);


 static void service_exit(void*);


 static int thread_init(void*);


 static void thread_exit(void*);


 static int service_on_sighup(void*, ACL_VSTRING*);
};

}
# 168 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/master/master_aio.hpp" 1
       







struct ACL_VSTREAM;
struct ACL_VSTRING;

namespace acl {

class aio_handle;
class aio_socket_stream;




class master_aio : public master_base, public aio_accept_callback
{
public:






 void run_daemon(int argc, char** argv);
# 38 "/workspace/acl/lib_acl_cpp/include/acl_cpp/master/master_aio.hpp"
 bool run_alone(const char* addrs, const char* path = 
# 38 "/workspace/acl/lib_acl_cpp/include/acl_cpp/master/master_aio.hpp" 3 4
                                                     __null
# 38 "/workspace/acl/lib_acl_cpp/include/acl_cpp/master/master_aio.hpp"
                                                         ,
  aio_handle_type ht = ENGINE_SELECT);





 aio_handle* get_handle() const;




 void stop();





 const char* get_conf_path(void) const;

protected:
 master_aio();
 virtual ~master_aio();







 virtual bool on_accept(aio_socket_stream* stream) = 0;

private:
 aio_handle* handle_;





 virtual bool accept_callback(aio_socket_stream* client);

private:
 thread_mutex lock_;
 void push_back(server_socket* ss);

private:




 static void service_main(int, void*);



 static void service_on_listen(void*, ACL_VSTREAM*);


 static void service_pre_jail(void*);


 static void service_init(void*);


 static void service_exit(void*);


 static int service_on_sighup(void*, ACL_VSTRING*);
};

}
# 169 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/master/master_proc.hpp" 1
       




struct ACL_VSTREAM;
struct ACL_EVENT;
struct ACL_VSTRING;

namespace acl {

class socket_stream;




class master_proc : public master_base
{
public:






 void run_daemon(int argc, char** argv);
# 36 "/workspace/acl/lib_acl_cpp/include/acl_cpp/master/master_proc.hpp"
 bool run_alone(const char* addrs, const char* path = 
# 36 "/workspace/acl/lib_acl_cpp/include/acl_cpp/master/master_proc.hpp" 3 4
                                                     __null
# 36 "/workspace/acl/lib_acl_cpp/include/acl_cpp/master/master_proc.hpp"
                                                         , int count = 1);





 const char* get_conf_path(void) const;

protected:
 master_proc();
 virtual ~master_proc();






 virtual void on_accept(socket_stream* stream) = 0;

private:

 static void service_main(void*, ACL_VSTREAM *stream);


 static void service_on_listen(void*, ACL_VSTREAM*);


 static void service_pre_jail(void*);


 static void service_init(void*);


 static void service_exit(void*);


 static int service_on_sighup(void*, ACL_VSTRING*);

private:

 static void listen_callback(int event_type, ACL_EVENT*,
  ACL_VSTREAM*, void* context);

private:
 bool stop_;
 int count_limit_;
 int count_;
};

}
# 170 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/master/master_udp.hpp" 1
       






struct ACL_VSTRING;

namespace acl {

class master_udp : public master_base
{
public:






 void run_daemon(int argc, char** argv);
# 31 "/workspace/acl/lib_acl_cpp/include/acl_cpp/master/master_udp.hpp"
 bool run_alone(const char* addrs, const char* path = 
# 31 "/workspace/acl/lib_acl_cpp/include/acl_cpp/master/master_udp.hpp" 3 4
                                                     __null
# 31 "/workspace/acl/lib_acl_cpp/include/acl_cpp/master/master_udp.hpp"
                                                         ,
  unsigned int count = 1);

protected:

 master_udp();
 virtual ~master_udp();





 virtual void on_read(socket_stream* stream) = 0;




 virtual void proc_on_bind(socket_stream&) {}




 virtual void proc_on_unbind(socket_stream&) {}




 virtual void thread_on_init(void) {}





 const std::vector<socket_stream*>& get_sstreams() const
 {
  return sstreams_;
 }





 const char* get_conf_path(void) const;

public:
 void lock(void);
 void unlock(void);

private:
 std::vector<socket_stream*> sstreams_;
 thread_mutex lock_;

 void run(int argc, char** argv);
 void push_back(socket_stream* ss);
 void remove(socket_stream* ss);

private:

 static void service_main(void*, ACL_VSTREAM*);


 static void service_on_bind(void*, ACL_VSTREAM*);


 static void service_on_unbind(void*, ACL_VSTREAM*);


 static void service_pre_jail(void*);


 static void service_init(void*);


 static void service_exit(void*);


 static void thread_init(void*);


 static int service_on_sighup(void*, ACL_VSTRING*);
};

}
# 171 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/master/master_trigger.hpp" 1
       




struct ACL_VSTRING;

namespace acl {




class master_trigger : public master_base
{
public:






 void run_daemon(int argc, char** argv);
# 31 "/workspace/acl/lib_acl_cpp/include/acl_cpp/master/master_trigger.hpp"
 void run_alone(const char* path = 
# 31 "/workspace/acl/lib_acl_cpp/include/acl_cpp/master/master_trigger.hpp" 3 4
                                  __null
# 31 "/workspace/acl/lib_acl_cpp/include/acl_cpp/master/master_trigger.hpp"
                                      , int count = 1, int interval = 1);





 const char* get_conf_path(void) const;

protected:
 master_trigger();
 virtual ~master_trigger();




 virtual void on_trigger() = 0;

private:

 static void service_main(void*);


 static void service_pre_jail(void*);


 static void service_init(void*);


 static void service_exit(void*);


 static int service_on_sighup(void*, ACL_VSTRING*);
};

}
# 172 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2


# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/queue/queue_manager.hpp" 1
       




# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/queue/queue_file.hpp" 1
       
# 12 "/workspace/acl/lib_acl_cpp/include/acl_cpp/queue/queue_file.hpp"
namespace acl {

class fstream;

class queue_file : public noncopyable
{
public:
 queue_file();





 fstream* get_fstream(void) const;






 time_t get_ctime(void) const;







 bool write(const void* data, size_t len);
 int format(const char* fmt, ...) __attribute__((__format__ (__printf__, (2), (3))));
 int vformat(const char* fmt, va_list ap);
# 51 "/workspace/acl/lib_acl_cpp/include/acl_cpp/queue/queue_file.hpp"
 int read(void* buf, size_t len);






 const char* key(void) const
 {
  return m_partName;
 }





 const char* get_filePath(void) const
 {
  return m_filePath.c_str();
 }





 const char* get_home(void) const
 {
  return m_home;
 }





 const char* get_queueName(void) const
 {
  return m_queueName;
 }





 const char* get_queueSub(void) const
 {
  return m_queueSub;
 }





 const char* get_extName(void) const
 {
  return m_extName;
 }





 size_t get_fileSize() const
 {
  return nwriten_;
 }

private:
 friend class queue_manager;

 ~queue_file();
# 132 "/workspace/acl/lib_acl_cpp/include/acl_cpp/queue/queue_file.hpp"
 bool create(const char* home, const char* queueName,
  const char* extName, unsigned width);







 bool open(const char* filePath);
 bool open(const char* home, const char* queueName, const char* queueSub,
  const char* partName, const char* extName);




 void close();





 bool remove();







 bool move_file(const char* queueName, const char* extName);





 void set_queueName(const char* queueName);




 void set_extName(const char* extName);





 bool lock(void);





 bool unlock(void);

private:

 fstream* m_fp;


 string m_filePath;


 char m_home[255];


 char m_queueName[32];


 char m_queueSub[32];


 char m_partName[255];


 char m_extName[32];


 locker m_locker;


 bool m_bLocked;


 bool m_bLockerOpened;


 size_t nwriten_;
};

}
# 7 "/workspace/acl/lib_acl_cpp/include/acl_cpp/queue/queue_manager.hpp" 2

typedef struct ACL_SCAN_DIR ACL_SCAN_DIR;

namespace acl {

class queue_file;

class queue_manager : public noncopyable
{
public:





 queue_manager(const char* home, const char* queueName,
  unsigned sub_width = 2);
 ~queue_manager();





 const char* get_queueName() const;





 const char* get_home() const;







 queue_file* create_file(const char* extName);
# 54 "/workspace/acl/lib_acl_cpp/include/acl_cpp/queue/queue_manager.hpp"
 queue_file* open_file(const char* path, bool no_cache = true);






 bool close_file(queue_file* fp);






 bool delete_file(queue_file* fp);







 bool rename_extname(queue_file* fp, const char* extName);
# 86 "/workspace/acl/lib_acl_cpp/include/acl_cpp/queue/queue_manager.hpp"
 bool move_file(queue_file* fp, const char* queueName, const char* extName);
# 96 "/workspace/acl/lib_acl_cpp/include/acl_cpp/queue/queue_manager.hpp"
 bool move_file(queue_file* fp, queue_manager* toQueue, const char* extName);
# 105 "/workspace/acl/lib_acl_cpp/include/acl_cpp/queue/queue_manager.hpp"
 bool remove(queue_file* fp);






 bool busy(const char* fileName);






 queue_file* cache_find(const char* key);







 bool cache_add(queue_file* fp);






 bool cache_del(const char* key);
# 143 "/workspace/acl/lib_acl_cpp/include/acl_cpp/queue/queue_manager.hpp"
 bool scan_open(bool scanSub = true);




  void scan_close();






 queue_file* scan_next(void);
# 166 "/workspace/acl/lib_acl_cpp/include/acl_cpp/queue/queue_manager.hpp"
 static bool parse_filePath(const char* filePath, acl::string* home,
  string* queueName, string* queueSub,
  string* partName, string* extName);





 static bool parse_fileName(const char* fileName, acl::string* partName,
  string* extName);




 static bool parse_path(const char* path, acl::string* home,
  string* queueName, acl::string* queueSub);







 static unsigned int hash_queueSub(const char* partName, unsigned width);

protected:
private:
 bool cache_check(queue_file* fp);




 ACL_SCAN_DIR* m_scanDir;
 string m_home;
 string m_queueName;
 unsigned sub_width_;

 std::map<string, queue_file*> m_queueList;
 locker m_queueLocker;
};

}
# 175 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2





# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/connpool/connect_monitor.hpp" 1
       





namespace acl
{

class aio_handle;
class check_client;
class connect_manager;
class rpc_service;
class socket_stream;
class aio_socket_stream;

class connect_monitor : public thread
{
public:




 connect_monitor(connect_manager& manager);

 virtual ~connect_monitor();
# 37 "/workspace/acl/lib_acl_cpp/include/acl_cpp/connpool/connect_monitor.hpp"
 connect_monitor& open_rpc_service(int max_threads,
  const char* addr = 
# 38 "/workspace/acl/lib_acl_cpp/include/acl_cpp/connpool/connect_monitor.hpp" 3 4
                    __null
# 38 "/workspace/acl/lib_acl_cpp/include/acl_cpp/connpool/connect_monitor.hpp"
                        );






 connect_monitor& set_check_inter(int n);






 connect_monitor& set_conn_timeout(int n);
# 62 "/workspace/acl/lib_acl_cpp/include/acl_cpp/connpool/connect_monitor.hpp"
 void stop(bool graceful);





 connect_manager& get_manager() const
 {
  return manager_;
 }
# 84 "/workspace/acl/lib_acl_cpp/include/acl_cpp/connpool/connect_monitor.hpp"
 virtual void nio_check(check_client& checker, aio_socket_stream& conn);
# 98 "/workspace/acl/lib_acl_cpp/include/acl_cpp/connpool/connect_monitor.hpp"
 virtual void sio_check(check_client& checker, socket_stream& conn);





 virtual void on_connected(const check_client&, double cost)
 {
  (void) cost;
 }






 virtual void on_timeout(const char* addr, double cost)
 {
  (void) addr;
  (void) cost;
 }






 virtual void on_refused(const char* addr, double cost)
 {
  (void) addr;
  (void) cost;
 }

public:





 void on_open(check_client& checker);

protected:

 virtual void* run();

private:
 bool stop_;
 bool stop_graceful_;
 aio_handle handle_;
 connect_manager& manager_;
 int check_inter_;
 int conn_timeout_;
 rpc_service* rpc_service_;
};

}
# 181 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/connpool/check_client.hpp" 1
       
# 11 "/workspace/acl/lib_acl_cpp/include/acl_cpp/connpool/check_client.hpp"
namespace acl
{

class check_timer;
class aio_socket_stream;




class check_client : public aio_open_callback
{
public:
 check_client(check_timer& timer, const char* addr,
  aio_socket_stream& conn, struct ::timeval& begin);





 aio_socket_stream& get_conn() const
 {
  return conn_;
 }





 const char* get_addr() const
 {
  return addr_.c_str();
 }





 void set_alive(bool yesno);




 void close();

public:





 bool blocked() const
 {
  return blocked_;
 }






 void set_blocked(bool on);

private:

 bool open_callback();
 void close_callback();
 bool timeout_callback();

private:
 ~check_client() {}

private:
 bool blocked_;
 bool aliving_;
 bool timedout_;
 struct ::timeval begin_;
 check_timer& timer_;
 aio_socket_stream& conn_;
 string addr_;
};

}
# 182 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/connpool/tcp_client.hpp" 1
       



namespace acl
{

class socket_stream;
class tcp_sender;
class tcp_reader;
class string;

class tcp_client : public connect_client
{
public:
 tcp_client(const char* addr, int conn_timeout = 10, int rw_timeout = 10);
 virtual ~tcp_client(void);
# 28 "/workspace/acl/lib_acl_cpp/include/acl_cpp/connpool/tcp_client.hpp"
 bool send(const void* data, unsigned int len, string* out = 
# 28 "/workspace/acl/lib_acl_cpp/include/acl_cpp/connpool/tcp_client.hpp" 3 4
                                                            __null
# 28 "/workspace/acl/lib_acl_cpp/include/acl_cpp/connpool/tcp_client.hpp"
                                                                );

protected:

 virtual bool open(void);

private:
 char* addr_;
 int conn_timeout_;
 int rw_timeout_;

 socket_stream* conn_;
 tcp_sender* sender_;
 tcp_reader* reader_;

 bool try_open(bool* reuse_conn);
};

}
# 183 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/connpool/tcp_pool.hpp" 1
       



namespace acl
{

class string;
class connect_client;

class tcp_pool : public connect_pool
{
public:
 tcp_pool(const char* addr, size_t count, size_t idx = 0);
 virtual ~tcp_pool(void);
# 26 "/workspace/acl/lib_acl_cpp/include/acl_cpp/connpool/tcp_pool.hpp"
 bool send(const void* data, unsigned int len, string* out = 
# 26 "/workspace/acl/lib_acl_cpp/include/acl_cpp/connpool/tcp_pool.hpp" 3 4
                                                            __null
# 26 "/workspace/acl/lib_acl_cpp/include/acl_cpp/connpool/tcp_pool.hpp"
                                                                );

protected:

 virtual connect_client* create_connect(void);
};

}
# 184 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/connpool/tcp_manager.hpp" 1
       



namespace acl
{

class connect_pool;

class tcp_manager : public connect_manager
{
public:
 tcp_manager(void);
 virtual ~tcp_manager(void);

protected:

 virtual connect_pool* create_pool(const char*, size_t, size_t);
};

}
# 185 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/connpool/tcp_ipc.hpp" 1
       


namespace acl
{

class tcp_manager;
class tcp_pool;
class string;





class tcp_ipc : public noncopyable
{
public:
 tcp_ipc(void);
 ~tcp_ipc(void);






 tcp_ipc& set_limit(int max);






 tcp_ipc& set_idle(int ttl);






 tcp_ipc& set_conn_timeout(int conn_timeout);






 tcp_ipc& set_rw_timeout(int timeout);





 tcp_manager& get_manager(void) const;






 tcp_ipc& add_addr(const char* addr);
# 69 "/workspace/acl/lib_acl_cpp/include/acl_cpp/connpool/tcp_ipc.hpp"
 tcp_ipc& del_addr(const char* addr);






 bool addr_exist(const char* addr);





 void get_addrs(std::vector<string>& addrs);
# 94 "/workspace/acl/lib_acl_cpp/include/acl_cpp/connpool/tcp_ipc.hpp"
 bool send(const char* addr, const void* data, unsigned int len,
  string* out = 
# 95 "/workspace/acl/lib_acl_cpp/include/acl_cpp/connpool/tcp_ipc.hpp" 3 4
               __null
# 95 "/workspace/acl/lib_acl_cpp/include/acl_cpp/connpool/tcp_ipc.hpp"
                   );
# 107 "/workspace/acl/lib_acl_cpp/include/acl_cpp/connpool/tcp_ipc.hpp"
 size_t broadcast(const void* data, unsigned int len,
  bool exclusive = true, bool check_result = false,
  unsigned* nerr = 
# 109 "/workspace/acl/lib_acl_cpp/include/acl_cpp/connpool/tcp_ipc.hpp" 3 4
                  __null
# 109 "/workspace/acl/lib_acl_cpp/include/acl_cpp/connpool/tcp_ipc.hpp"
                      );

private:
 tcp_manager* manager_;
 int max_;
 int ttl_;
 int conn_timeout_;
 int rw_timeout_;

 bool send(tcp_pool&, const void*, unsigned int, string*);
};

}
# 186 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/connpool/tcp_sender.hpp" 1
       



struct iovec;

namespace acl
{

class socket_stream;




class tcp_sender : public noncopyable
{
public:
 tcp_sender(socket_stream& conn);
 ~tcp_sender(void);







 bool send(const void* data, unsigned int len);





 acl::socket_stream& get_conn(void) const
 {
  return *conn_;
 }

private:
 acl::socket_stream* conn_;
 struct iovec* v2_;
};

}
# 187 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/connpool/tcp_reader.hpp" 1
       


namespace acl
{

class socket_stream;
class string;




class tcp_reader : public noncopyable
{
public:
 tcp_reader(socket_stream& conn);
 ~tcp_reader(void) {}





 bool read(string& out);





 acl::socket_stream& get_conn(void) const
 {
  return *conn_;
 }

private:
 socket_stream* conn_;
};

}
# 188 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client.hpp" 1
       







namespace acl
{

class string;
class dbuf_pool;
class redis_result;
class redis_request;
class redis_command;
class sslbase_conf;
# 27 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client.hpp"
class redis_client : public connect_client
{
public:
# 40 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client.hpp"
 redis_client(const char* addr, int conn_timeout = 60,
  int rw_timeout = 30, bool retry = true);
 virtual ~redis_client(void);







 void set_ssl_conf(sslbase_conf* ssl_conf);





 void set_password(const char* pass);
# 65 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client.hpp"
 void set_db(int dbnum);






 int get_db(void) const
 {
  return dbnum_;
 }





 const char* get_addr(void) const
 {
  return addr_;
 }







 void set_check_addr(bool on);






 bool eof(void) const;





 void close(void);
# 115 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client.hpp"
 socket_stream* get_stream(bool auto_connect = true);
# 124 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client.hpp"
 void set_slice_request(bool on);
# 136 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client.hpp"
 void set_slice_respond(bool on);
# 158 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client.hpp"
 const redis_result* run(dbuf_pool* pool, const string& req,
  size_t nchildren, int* rw_timeout = 
# 159 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client.hpp" 3 4
                                     __null
# 159 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client.hpp"
                                         );







 const redis_result* run(dbuf_pool* pool, const redis_request& req,
  size_t nchildren, int* rw_timeout = 
# 168 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client.hpp" 3 4
                                     __null
# 168 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client.hpp"
                                         );

 const redis_result* run(redis_command* cmd, size_t nchildren,
  int* rw_timeout = 
# 171 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client.hpp" 3 4
                   __null
# 171 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client.hpp"
                       );

protected:


 bool open(void);

protected:
 socket_stream conn_;
 bool check_addr_;
 char* addr_;
 char* pass_;
 bool retry_;
 bool authing_;
 bool slice_req_;
 bool slice_res_;
 int dbnum_;
 sslbase_conf* ssl_conf_;

public:
 redis_result* get_objects(socket_stream& conn,
   dbuf_pool* pool, size_t nobjs);
 redis_result* get_object(socket_stream& conn, dbuf_pool* pool);
 redis_result* get_error(socket_stream& conn, dbuf_pool* pool);
 redis_result* get_status(socket_stream& conn, dbuf_pool* pool);
 redis_result* get_integer(socket_stream& conn, dbuf_pool* pool);
 redis_result* get_string(socket_stream& conn, dbuf_pool* pool);
 redis_result* get_array(socket_stream& conn, dbuf_pool* pool);

private:
 void put_data(dbuf_pool* pool, redis_result* rr,
  const char* data, size_t len);
 bool check_connection(socket_stream& conn);
};

}
# 190 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_pool.hpp" 1
       





namespace acl
{

class sslbase_conf;







class redis_client_pool : public connect_pool
{
public:
# 33 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_pool.hpp"
 redis_client_pool(const char* addr, size_t count, size_t idx = 0);

 virtual ~redis_client_pool(void);
# 44 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_pool.hpp"
 redis_client_pool& set_ssl_conf(sslbase_conf* ssl_conf);






 redis_client_pool& set_password(const char* pass);
# 60 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_pool.hpp"
 redis_client_pool& set_db(int dbnum);






 int get_db(void) const
 {
  return dbnum_;
 }

protected:





 connect_client* create_connect(void);

private:
 char* pass_;
 int dbnum_;
 sslbase_conf* ssl_conf_;
};

}
# 191 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_cluster.hpp" 1
       
# 10 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_cluster.hpp"
namespace acl
{

class sslbase_conf;

class redis_client_pool;
# 24 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_cluster.hpp"
class redis_client_cluster : public connect_manager
{
public:





 redis_client_cluster(int max_slot = 16384);
 virtual ~redis_client_cluster(void);
# 44 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_cluster.hpp"
 redis_client_pool* peek_slot(int slot);
# 56 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_cluster.hpp"
 void set_slot(int slot, const char* addr);
# 71 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_cluster.hpp"
 void set_all_slot(const char* addr, size_t max_conns,
  int conn_timeout = 30, int rw_timeout = 30);
# 82 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_cluster.hpp"
 void clear_slot(int slot);






 int get_max_slot() const
 {
  return max_slot_;
 }
# 101 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_cluster.hpp"
 void set_redirect_max(int max);






 int get_redirect_max() const
 {
  return redirect_max_;
 }
# 126 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_cluster.hpp"
 void set_redirect_sleep(int n);







 int get_redirect_sleep() const
 {
  return redirect_sleep_;
 }
# 146 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_cluster.hpp"
 redis_client_cluster& set_ssl_conf(sslbase_conf* ssl_conf);
# 159 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_cluster.hpp"
 redis_client_cluster& set_password(const char* addr, const char* pass);






 const std::map<string, string>& get_passwords(void) const
 {
  return passwds_;
 }
# 179 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_cluster.hpp"
 const char* get_password(const char* addr) const;







 redis_client* redirect(const char* addr, size_t max_conns);






 redis_client* peek_conn(int slot);

protected:
# 209 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_cluster.hpp"
 connect_pool* create_pool(const char* addr, size_t count, size_t idx);

private:
 int max_slot_;
 const char** slot_addrs_;
 std::vector<char*> addrs_;
 int redirect_max_;
 int redirect_sleep_;
 std::map<string, string> passwds_;
 sslbase_conf* ssl_conf_;

 redis_client* reopen(redis_command& cmd, redis_client* conn);
 redis_client* move(redis_command& cd, redis_client* conn,
   const char* ptr, int nretried);
 redis_client* ask(redis_command& cd, redis_client* conn,
   const char* ptr, int nretried);
 redis_client* cluster_down(redis_command& cd, redis_client* conn,
   const char* ptr, int nretried);

public:
 const redis_result* run(redis_command& cmd, size_t nchild,
   int* timeout = 
# 230 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_cluster.hpp" 3 4
                 __null
# 230 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_cluster.hpp"
                     );
};

}
# 192 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_pipeline.hpp" 1
       





# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp" 1
       






# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_result.hpp" 1
       






namespace acl
{

typedef enum
{
 REDIS_RESULT_UNKOWN,
 REDIS_RESULT_NIL,
 REDIS_RESULT_ERROR,
 REDIS_RESULT_STATUS,
 REDIS_RESULT_INTEGER,
 REDIS_RESULT_STRING,
 REDIS_RESULT_ARRAY,
} redis_result_t;

class string;
class dbuf_pool;
class redis_client;






class redis_result : public noncopyable
{
public:
 redis_result(dbuf_pool* dbuf);







 void *operator new(size_t size, dbuf_pool* pool);
 void operator delete(void* ptr, dbuf_pool* pool);







 redis_result_t get_type(void) const
 {
  return result_type_;
 }
# 67 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_result.hpp"
 size_t get_size(void) const;
# 76 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_result.hpp"
 int get_integer(bool* success = 
# 76 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_result.hpp" 3 4
                                __null
# 76 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_result.hpp"
                                    ) const;
# 85 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_result.hpp"
 long long int get_integer64(bool* success = 
# 85 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_result.hpp" 3 4
                                            __null
# 85 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_result.hpp"
                                                ) const;
# 94 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_result.hpp"
 double get_double(bool* success = 
# 94 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_result.hpp" 3 4
                                  __null
# 94 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_result.hpp"
                                      ) const;







 const char* get_status() const;







 const char* get_error(void) const;
# 123 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_result.hpp"
 const char* get(size_t i, size_t* len = 
# 123 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_result.hpp" 3 4
                                        __null
# 123 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_result.hpp"
                                            ) const;






 const char** gets_argv(void) const
 {
  return (const char**) argv_;
 }






 const size_t* get_lens(void) const
 {
  return lens_;
 }






 size_t get_length(void) const;
# 161 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_result.hpp"
 int argv_to_string(string& buf) const;
 int argv_to_string(char* buf, size_t size) const;
# 171 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_result.hpp"
 const redis_result** get_children(size_t* size) const;
# 181 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_result.hpp"
 const redis_result* get_child(size_t i) const;






 dbuf_pool* get_dbuf(void)
 {
  return dbuf_;
 }






 const string& to_string(string& out) const;

private:
 ~redis_result(void);

 friend class redis_client;
 void clear(void);

 redis_result& set_type(redis_result_t type);
 redis_result& set_size(size_t size);
 redis_result& put(const char* buf, size_t len);
 redis_result& put(const redis_result* rr, size_t idx);

private:
 redis_result_t result_type_;
 dbuf_pool* dbuf_;

 size_t size_;
 size_t idx_;
 const char** argv_;
 size_t* lens_;


 const redis_result** children_;
 size_t children_size_;
 size_t children_idx_;
};

}
# 9 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp" 2



namespace acl
{

class redis_request;
class redis_client;
class redis_client_cluster;
class redis_client_pipeline;
class redis_pipeline_message;






class redis_command : public noncopyable
{
public:






 redis_command(void);
# 44 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp"
 redis_command(redis_client* conn);
# 57 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp"
 redis_command(redis_client_cluster* cluster);

 __attribute__((__deprecated__))
 redis_command(redis_client_cluster* cluster, size_t max_conns);

 redis_command(redis_client_pipeline* pipeline);

 virtual ~redis_command(void);







 void set_check_addr(bool on);
# 86 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp"
 void clear(bool save_slot = false);

 __attribute__((deprecated("Use " "\"clear\"" " instead")))
 void reset(bool save_slot = false);
# 98 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp"
 void set_client(redis_client* conn);
# 108 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp"
 redis_client* get_client(void) const
 {
  return conn_;
 }
# 122 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp"
 const char* get_client_addr(void) const;
# 133 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp"
 void set_cluster(redis_client_cluster* cluster);

 __attribute__((__deprecated__))
 void set_cluster(redis_client_cluster* cluster, size_t max_conns);






 redis_client_cluster* get_cluster(void) const
 {
  return cluster_;
 }






 void set_pipeline(redis_client_pipeline* pipeline);





 redis_client_pipeline* get_pipeline(void) const
 {
  return pipeline_;
 }






 dbuf_pool* get_dbuf(void) const
 {
  return dbuf_;
 }






 redis_result_t result_type(void) const;
# 188 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp"
 const char* result_status(void) const;
# 197 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp"
 const char* result_error(void) const;
# 215 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp"
 size_t result_size(void) const;
# 225 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp"
 int result_number(bool* success = 
# 225 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp" 3 4
                                  __null
# 225 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp"
                                      ) const;
# 235 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp"
 long long int result_number64(bool* success = 
# 235 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp" 3 4
                                              __null
# 235 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp"
                                                  ) const;
# 247 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp"
 const char* get_result(size_t i, size_t* len = 
# 247 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp" 3 4
                                               __null
# 247 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp"
                                                   ) const;
# 256 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp"
 bool eof(void) const;






 const redis_result* get_result(void) const;
# 275 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp"
 const redis_result* result_child(size_t i) const;
# 295 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp"
 const char* result_value(size_t i, size_t* len = 
# 295 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp" 3 4
                                                 __null
# 295 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp"
                                                     ) const;
# 307 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp"
 void set_slice_request(bool on);
# 320 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp"
 void set_slice_respond(bool on);

public:
# 331 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp"
 const redis_result* request(size_t argc, const char* argv[],
  size_t lens[], size_t nchild = 0);







 const redis_result* request(const std::vector<string>& args,
  size_t nchild = 0);

 const string* request_buf(void) const
 {
  return request_buf_;
 }
# 355 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp"
 static void build_request(size_t argc, const char* argv[],
  size_t lens[], string& out);







 void build_request(size_t argc, const char* argv[], size_t lens[]);

protected:
 const redis_result* run(size_t nchild = 0, int* timeout = 
# 367 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp" 3 4
                                                          __null
# 367 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp"
                                                              );

 void clear_request(void);
 const redis_result** scan_keys(const char* cmd, const char* key,
  int& cursor, size_t& size, const char* pattern,
  const size_t* count);
 const redis_result** scan_keys(const char* cmd, const char* key,
  size_t klen, int& cursor, size_t& size, const char* pattern,
  const size_t* count);



 void build(const char* cmd, const char* key,
  const std::map<string, string>& attrs);
 void build(const char* cmd, const char* key, size_t klen,
  const std::map<string, string>& attrs);
 void build(const char* cmd, const char* key,
  const std::map<string, const char*>& attrs);

 void build(const char* cmd, const char* key,
  const std::vector<string>& names,
  const std::vector<string>& values);
 void build(const char* cmd, const char* key, size_t klen,
  const std::vector<string>& names,
  const std::vector<string>& values);
 void build(const char* cmd, const char* key,
  const std::vector<const char*>& names,
  const std::vector<const char*>& values);

 void build(const char* cmd, const char* key,
  const char* names[], const char* values[], size_t argc);
 void build(const char* cmd, const char* key,
  const int names[], const char* values[], size_t argc);
 void build(const char* cmd, const char* key,
  const char* names[], const size_t names_len[],
  const char* values[], const size_t values_len[], size_t argc);
 void build(const char* cmd, const char* key, size_t klen,
  const char* names[], const size_t names_len[],
  const char* values[], const size_t values_len[], size_t argc);



 void build(const char* cmd, const char* key,
  const std::vector<string>& names);
 void build(const char* cmd, const char* key, size_t klen,
  const std::vector<string>& names);
 void build(const char* cmd, const char* key,
  const std::vector<const char*>& names);
 void build(const char* cmd, const char* key,
  const std::vector<int>& names);

 void build(const char* cmd, const char* key,
  const char* names[], size_t argc);
 void build(const char* cmd, const char* key,
  const char* names[], const size_t lens[], size_t argc);
 void build(const char* cmd, const char* key, size_t klen,
  const char* names[], const size_t lens[], size_t argc);
 void build(const char* cmd, const char* key,
  const int names[], size_t argc);



protected:
 int get_number(bool* success = 
# 430 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp" 3 4
                               __null
# 430 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp"
                                   );
 long long int get_number64(bool* success = 
# 431 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp" 3 4
                                           __null
# 431 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_command.hpp"
                                               );
 int get_number(std::vector<int>& out);
 int get_number64(std::vector<long long int>& out);
 bool check_status(const char* success = "OK");

 int get_status(std::vector<bool>& out);
 const char* get_status(void);

 int get_string(string& buf);
 int get_string(string* buf);
 int get_string(char* buf, size_t size);
 int get_strings(std::vector<string>& result);
 int get_strings(std::vector<string>* result);
 int get_strings(std::list<string>& result);
 int get_strings(std::list<string>* result);
 int get_strings(std::map<string, string>& result);
 int get_strings(std::vector<string>& names,
  std::vector<string>& values);
 int get_strings(std::vector<const char*>& names,
  std::vector<const char*>& values);


protected:
 dbuf_pool* dbuf_;

private:
 void init(void);

public:


 void hash_slot(const char* key);
 void hash_slot(const char* key, size_t len);


 int get_slot(void) const {
  return slot_;
 }

 bool is_check_addr(void) const {
  return check_addr_;
 }

protected:
 bool check_addr_;
 char addr_[128];
 redis_client* conn_;
 redis_client_cluster* cluster_;
 redis_client_pipeline* pipeline_;
 int slot_;
 int redirect_max_;
 int redirect_sleep_;

public:
 const char* get_addr(const char* info);
 void set_client_addr(const char* addr);
 void set_client_addr(redis_client& conn);

public:
 redis_request* get_request_obj(void) const {
  return request_obj_;
 }

 string* get_request_buf(void) const {
  return request_buf_;
 }

 bool is_slice_req(void) const {
  return slice_req_;
 }


 redis_pipeline_message& get_pipeline_message(void);

protected:

 bool slice_req_;
 string* request_buf_;
 redis_request* request_obj_;
 size_t argv_size_;
 const char** argv_;
 size_t* argv_lens_;
 size_t argc_;


 void argv_space(size_t n);


 void build_request1(size_t argc, const char* argv[], size_t lens[]);


 void build_request2(size_t argc, const char* argv[], size_t lens[]);

protected:

 bool slice_res_;
 redis_pipeline_message* pipe_msg_;
 const redis_result* result_;


 void logger_result(const redis_result* result);
};

}
# 8 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_pipeline.hpp" 2



namespace acl {

class token_tree;
class redis_client;

typedef enum {
 redis_pipeline_t_cmd,
 redis_pipeline_t_redirect,
  redis_pipeline_t_clusterdonw,
 redis_pipeline_t_stop,
} redis_pipeline_type_t;





class redis_pipeline_message {
public:
 redis_pipeline_message(redis_command* cmd, redis_pipeline_type_t type,
  box<redis_pipeline_message>* box)
 : cmd_(cmd)
 , type_(type)
 , nchild_(0)
 , timeout_(
# 34 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_pipeline.hpp" 3 4
           __null
# 34 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_pipeline.hpp"
               )
 , box_(box)
 , result_(
# 36 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_pipeline.hpp" 3 4
          __null
# 36 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_pipeline.hpp"
              )
 , addr_(
# 37 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_pipeline.hpp" 3 4
        __null
# 37 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_pipeline.hpp"
            )
 , redirect_count_(0)
 , argc_(0)
 , argv_(
# 40 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_pipeline.hpp" 3 4
        __null
# 40 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_pipeline.hpp"
            )
 , lens_(
# 41 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_pipeline.hpp" 3 4
        __null
# 41 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_pipeline.hpp"
            )
 {
  size_ = 10;
  argc_ = 0;
  argv_ = new const char* [size_];
  lens_ = new size_t [size_];
 }

 ~redis_pipeline_message(void) {
  delete box_;
  delete [] argv_;
  delete [] lens_;
 }

 void refer(void) {
  ++refers_;
 }

 void unrefer(void) {
  if (--refers_ == 0) {
   delete this;
  }
 }

 redis_pipeline_message& set_type(redis_pipeline_type_t type) {
  type_ = type;
  return *this;
 }

 redis_pipeline_type_t get_type(void) const {
  return type_;
 }

 redis_command* get_cmd(void) {
  return cmd_;
 }

 void set_option(size_t nchild, int* timeout) {
  nchild_ = nchild;
  timeout_ = timeout;
  result_ = 
# 81 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_pipeline.hpp" 3 4
            __null
# 81 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_pipeline.hpp"
                ;
  addr_ = 
# 82 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_pipeline.hpp" 3 4
            __null
# 82 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_pipeline.hpp"
                ;
  redirect_count_ = 0;
 }

 void set_request(size_t argc, const char** argv, size_t* lens) {
# 95 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_pipeline.hpp"
  if (argc > size_) {
   delete [] argv_;
   delete [] lens_;
   size_ = argc;
   argv_ = new const char* [size_];
   lens_ = new size_t [size_];
  }

  argc_ = argc;
  for (size_t i = 0; i < argc_; i++) {
   argv_[i] = argv[i];
   lens_[i] = lens[i];
  }

 }

 void set_addr(const char* addr) {
  addr_ = addr;
  if (addr) {
   redirect_count_++;
  }
 }

 size_t get_nchild(void) const {
  return nchild_;
 }

 int* get_timeout(void) const {
  return timeout_;
 }

 void push(const redis_result* result) {
  result_ = result;
  box_->push(this, false);
 }

 const redis_result* wait(void) {
  box_->pop();
  return result_;
 }

 const char* get_addr(void) const {
  return addr_;
 }

 size_t get_redirect_count(void) const {
  return redirect_count_;
 }

private:
 redis_command* cmd_;
 redis_pipeline_type_t type_;
 size_t nchild_;
 int* timeout_;
 box<redis_pipeline_message>* box_;

 const redis_result* result_;
 const char* addr_;
 size_t redirect_count_;
 atomic_long refers_;

public:
 size_t size_;
 size_t argc_;
 const char** argv_;
 size_t* lens_;
};

class redis_client_pipeline;





class redis_pipeline_channel : public thread {
public:
 redis_pipeline_channel(redis_client_pipeline& pipeline,
  const char* addr, int conn_timeout, int rw_timeout, bool retry);
 ~redis_pipeline_channel(void);

 bool start_thread(void);
 void stop_thread(void);

public:
 redis_pipeline_channel& set_passwd(const char* passwd);
 const char* get_addr(void) const {
  return addr_.c_str();
 }

protected:

 void* run(void);

private:
 redis_client_pipeline& pipeline_;
 string addr_;
 string buf_;
 redis_client* client_;
 box<redis_pipeline_message>* box_;
 std::vector<redis_pipeline_message*> msgs_;
public:
 void push(redis_pipeline_message* msg);

private:
 bool handle_messages(void);
 bool flush_all(void);
 bool wait_results(void);
 bool wait_one(socket_stream& conn, redis_pipeline_message& msg);
 void all_failed(void);
};
# 213 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_pipeline.hpp"
class redis_client_pipeline : public thread {
public:
 redis_client_pipeline(const char* addr, box_type_t type = BOX_TYPE_MBOX);
 virtual ~redis_client_pipeline(void);


 void start_thread(void);


 void stop_thread(void);

public:

 const redis_result* run(redis_pipeline_message& msg);


 void push(redis_pipeline_message* msg);



 virtual box<redis_pipeline_message>* create_box(void);

public:

 redis_client_pipeline& set_password(const char* passwd);


 redis_client_pipeline& set_timeout(int conn_timeout, int rw_timeout);


 redis_client_pipeline& set_retry(bool on);


 redis_client_pipeline& set_max_slot(int max_slot);


 redis_client_pipeline& set_preconnect(bool yes);


 int get_max_slot(void) const {
  return max_slot_;
 }

protected:

 void* run(void);

private:
 string addr_;
 string passwd_;
 box_type_t box_type_;
 int max_slot_;
 int conn_timeout_;
 int rw_timeout_;
 bool retry_;
 bool preconn_;

 token_tree* channels_;


 box<redis_pipeline_message>* box_;

 std::vector<char*> addrs_;
 const char** slot_addrs_;


 void set_slot(int slot, const char* addr);


 void set_all_slot(void);


 void start_channels(void);


 void stop_channels(void);


 redis_pipeline_channel* start_channel(const char* addr);


 void stop_channel(const char* addr);


 redis_pipeline_channel* get_channel(int slot);


 void redirect(const redis_pipeline_message& msg, int slot);



 void cluster_down(const redis_pipeline_message& msg);
};
# 327 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_client_pipeline.hpp"
}
# 193 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_key.hpp" 1
       







namespace acl {



typedef enum
{
 REDIS_KEY_NONE,
 REDIS_KEY_STRING,
 REDIS_KEY_HASH,
 REDIS_KEY_LIST,
 REDIS_KEY_SET,
 REDIS_KEY_ZSET
} redis_key_t;

class redis_key : virtual public redis_command
{
public:



 redis_key(void);




 redis_key(redis_client* conn);




 redis_key(redis_client_cluster* cluster);

 __attribute__((__deprecated__))
 redis_key(redis_client_cluster* cluster, size_t max_conns);

 redis_key(redis_client_pipeline* pipeline);

 virtual ~redis_key(void);
# 63 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_key.hpp"
 int del_one(const char* key);
 int del_one(const char* key, size_t len);
 int del(const char* key);
 int del(const std::vector<string>& keys);
 int del(const std::vector<const char*>& keys);
 int del(const char* keys[], size_t argc);
 int del(const char* keys[], const size_t lens[], size_t argc);
 int del_keys(const char* first_key, ...);
 int del_keys(const std::vector<string>& keys);
 int del_keys(const std::vector<const char*>& keys);
 int del_keys(const char* keys[], size_t argc);
 int del_keys(const char* keys[], const size_t lens[], size_t argc);
# 91 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_key.hpp"
 int dump(const char* key, size_t len, string& out);
 int dump(const char* key, string& out);
# 104 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_key.hpp"
 bool exists(const char* key, size_t len);
 bool exists(const char* key);
# 125 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_key.hpp"
 int expire(const char* key, size_t len, int n);
 int expire(const char* key, int n);
# 146 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_key.hpp"
 int expireat(const char* key, size_t len, time_t stamp);
 int expireat(const char* key, time_t stamp);
# 175 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_key.hpp"
 int keys_pattern(const char* pattern, std::vector<string>* out);
# 195 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_key.hpp"
 bool migrate(const char* key, size_t len, const char* addr,
  unsigned dest_db, unsigned timeout, const char* options = 
# 196 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_key.hpp" 3 4
                                                           __null
# 196 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_key.hpp"
                                                               );
 bool migrate(const char* key, const char* addr, unsigned dest_db,
  unsigned timeout, const char* options = 
# 198 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_key.hpp" 3 4
                                         __null
# 198 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_key.hpp"
                                             );
 bool migrate(const char* addr, unsigned dest_db, unsigned timeout,
  const std::vector<const char*>& keys, std::vector<size_t>& lens,
  const char* options = 
# 201 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_key.hpp" 3 4
                       __null
# 201 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_key.hpp"
                           );
# 217 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_key.hpp"
 int move(const char* key, size_t len, unsigned dest_db);
 int move(const char* key, unsigned dest_db);
# 230 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_key.hpp"
 int object_refcount(const char* key, size_t len);
 int object_refcount(const char* key);
# 244 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_key.hpp"
 bool object_encoding(const char* key, size_t len, string& out);
 bool object_encoding(const char* key, string& out);
# 257 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_key.hpp"
 int object_idletime(const char* key, size_t len);
 int object_idletime(const char* key);
# 277 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_key.hpp"
 int persist(const char* key, size_t len);
 int persist(const char* key);
# 298 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_key.hpp"
 int pexpire(const char* key, size_t len, int n);
 int pexpire(const char* key, int n);
# 320 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_key.hpp"
 int pexpireat(const char* key, size_t len, long long int n);
 int pexpireat(const char* key, long long int n);
# 344 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_key.hpp"
 long long int pttl(const char* key, size_t len);
 long long int pttl(const char* key);
# 355 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_key.hpp"
 bool randomkey(string& buf);







 bool rename_key(const char* key, const char* newkey);
# 373 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_key.hpp"
 int renamenx(const char* key, const char* newkey);
# 389 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_key.hpp"
 bool restore(const char* key, const char* value, size_t len,
  int ttl, bool replace = false);
# 413 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_key.hpp"
 int ttl(const char* key, size_t len);;
 int ttl(const char* key);
# 426 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_key.hpp"
 redis_key_t type(const char* key, size_t len);
 redis_key_t type(const char* key);
# 454 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_key.hpp"
 int scan(int cursor, std::vector<string>& out,
  const char* pattern = 
# 455 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_key.hpp" 3 4
                       __null
# 455 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_key.hpp"
                           , const size_t* count = 
# 455 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_key.hpp" 3 4
                                                   __null
# 455 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_key.hpp"
                                                       );
};

}
# 195 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp" 1
       
# 10 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp"
namespace acl
{







class redis_hash : virtual public redis_command
{
public:



 redis_hash(void);




 redis_hash(redis_client* conn);




 redis_hash(redis_client_cluster* cluster);

 __attribute__((__deprecated__))
 redis_hash(redis_client_cluster* cluster, size_t max_conns);

 redis_hash(redis_client_pipeline* pipeline);

 virtual ~redis_hash(void);
# 55 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp"
 bool hmset(const char* key, const std::map<string, string>& attrs);
 bool hmset(const char* key, size_t klen,
  const std::map<string, string>& attrs);
 bool hmset(const char* key, const std::map<string, const char*>& attrs);
 bool hmset(const char* key, const std::vector<string>& names,
  const std::vector<string>& values);
 bool hmset(const char* key, size_t klen,
  const std::vector<string>& names,
  const std::vector<string>& values);
 bool hmset(const char* key, const std::vector<const char*>& names,
  const std::vector<const char*>& values);
 bool hmset(const char* key, const char* names[], const char* values[],
  size_t argc);
 bool hmset(const char* key, const char* names[], const size_t names_len[],
  const char* values[], const size_t values_len[], size_t argc);
 bool hmset(const char* key, size_t klen, const char* names[],
  const size_t names_len[], const char* values[],
  const size_t values_len[], size_t argc);
# 119 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp"
 bool hmget(const char* key, const std::vector<string>& names,
  std::vector<string>* result = 
# 120 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp" 3 4
                               __null
# 120 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp"
                                   );
 bool hmget(const char* key, size_t klen,
  const std::vector<string>& names,
  std::vector<string>* result = 
# 123 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp" 3 4
                               __null
# 123 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp"
                                   );
 bool hmget(const char* key, const std::vector<const char*>& names,
  std::vector<string>* result = 
# 125 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp" 3 4
                               __null
# 125 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp"
                                   );

 bool hmget(const char* key, const char* names[], size_t argc,
  std::vector<string>* result = 
# 128 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp" 3 4
                               __null
# 128 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp"
                                   );
 bool hmget(const char* key, const char* names[], const size_t lens[],
  size_t argc, std::vector<string>* result = 
# 130 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp" 3 4
                                            __null
# 130 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp"
                                                );
 bool hmget(const char* key, size_t klen,
  const char* names[], const size_t lens[],
  size_t argc, std::vector<string>* result = 
# 133 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp" 3 4
                                            __null
# 133 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp"
                                                );
# 155 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp"
 int hset(const char* key, const char* name, const char* value);
 int hset(const char* key, const char* name,
  const char* value, size_t value_len);
 int hset(const char* key, const char* name, size_t name_len,
  const char* value, size_t value_len);
 int hset(const char* key, size_t klen, const char* name,
  size_t name_len, const char* value, size_t value_len);
# 183 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp"
 int hsetnx(const char* key, const char* name, const char* value);
 int hsetnx(const char* key, const char* name,
  const char* value, size_t value_len);
 int hsetnx(const char* key, const char* name, size_t name_len,
  const char* value, size_t value_len);
 int hsetnx(const char* key, size_t klen, const char* name,
  size_t name_len, const char* value, size_t value_len);
# 208 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp"
 bool hget(const char* key, const char* name, string& result);
 bool hget(const char* key, const char* name,
  size_t name_len, string& result);
 bool hget(const char* key, size_t klen, const char* name,
  size_t name_len, string& result);
# 229 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp"
 bool hgetall(const char* key, std::map<string, string>& result);
 bool hgetall(const char* key, size_t klen,
  std::map<string, string>& result);
 bool hgetall(const char* key, std::vector<string>& names,
  std::vector<string>& values);
 bool hgetall(const char* key, size_t klen,
  std::vector<string>& names, std::vector<string>& values);
 bool hgetall(const char* key, std::vector<const char*>& names,
  std::vector<const char*>& values);
# 251 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp"
 int hdel(const char* key, const char* first_name);
 int hdel(const char* key, const char* names[], size_t argc);
 int hdel(const char* key, const char* names[],
  const size_t names_len[], size_t argc);
 int hdel(const char* key, size_t klen, const char* names[],
  const size_t names_len[], size_t argc);
 int hdel(const char* key, const std::vector<string>& names);
 int hdel(const char* key, size_t klen, const std::vector<string>& names);
 int hdel(const char* key, const std::vector<const char*>& names);
 int hdel_fields(const char* key, const char* names[], size_t argc);
 int hdel_fields(const char* key, const char* names[],
  const size_t names_len[], size_t argc);
 int hdel_fields(const char* key, size_t klen,
  const char* names[], const size_t names_len[], size_t argc);
 int hdel_fields(const char* key, const std::vector<string>& names);
 int hdel_fields(const char* key, size_t klen,
  const std::vector<string>& names);
 int hdel_fields(const char* key, const std::vector<const char*>& names);
 int hdel_fields(const char* key, const char* first_name, ...);
# 287 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp"
 bool hincrby(const char* key, const char* name,
  long long int inc, long long int* result = 
# 288 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp" 3 4
                                            __null
# 288 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp"
                                                );
# 306 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp"
 bool hincrbyfloat(const char* key, const char* name,
  double inc, double* result = 
# 307 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp" 3 4
                              __null
# 307 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp"
                                  );
# 320 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp"
 bool hkeys(const char* key, std::vector<string>& names);
 bool hkeys(const char* key, size_t klen, std::vector<string>& names);
# 335 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp"
 bool hexists(const char* key, const char* name);
 bool hexists(const char* key, const char* name, size_t name_len);
 bool hexists(const char* key, size_t klen, const char* name, size_t name_len);
# 349 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp"
 bool hvals(const char* key, std::vector<string>& values);
 bool hvals(const char* key, size_t klen, std::vector<string>& values);
# 366 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp"
 int hlen(const char* key);
 int hlen(const char* key, size_t klen);
# 382 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp"
 int hstrlen(const char* key, const char* name, size_t name_len);
 int hstrlen(const char* key, size_t klen, const char* name, size_t name_len);
 int hstrlen(const char* key, const char *name);
# 410 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp"
 int hscan(const char* key, int cursor, std::map<string, string>& out,
  const char* pattern = 
# 411 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp" 3 4
                       __null
# 411 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp"
                           , const size_t* count = 
# 411 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp" 3 4
                                                   __null
# 411 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp"
                                                       );
 int hscan(const char* key, size_t klen, int cursor,
  std::map<string, string>& out, const char* pattern = 
# 413 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp" 3 4
                                                      __null
# 413 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp"
                                                          ,
  const size_t* count = 
# 414 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp" 3 4
                       __null
# 414 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hash.hpp"
                           );
};

}
# 196 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp" 1
       







namespace acl
{





class redis_string : virtual public redis_command
{
public:



 redis_string(void);




 redis_string(redis_client* conn);




 redis_string(redis_client_cluster* cluster);

 redis_string(redis_client_pipeline* pipeline);

 __attribute__((__deprecated__))
 redis_string(redis_client_cluster* cluster, size_t max_conns);

 virtual ~redis_string(void);
# 54 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
 bool set(const char* key, const char* value);
 bool set(const char* key, size_t key_len,
  const char* value, size_t value_len);
# 87 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
 bool set(const char* key, const char* value, int timeout, int flag);
 bool set(const char* key, size_t key_len, const char* value,
  size_t value_len, int timeout, int flag);
# 106 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
 bool setex(const char* key, const char* value, int timeout);
 bool setex(const char* key, size_t key_len, const char* value,
  size_t value_len, int timeout);
# 125 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
 bool psetex(const char* key, const char* value, int timeout);
 bool psetex(const char* key, size_t key_len, const char* value,
  size_t value_len, int timeout);
# 146 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
 int setnx(const char* key, const char* value);
 int setnx(const char* key, size_t key_len,
  const char* value, size_t value_len);
# 162 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
 int append(const char* key, const char* value);
 int append(const char* key, const char* value, size_t size);
# 178 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
 bool get(const char* key, size_t len, string& buf);
 bool get(const char* key, string& buf);
# 189 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
 const redis_result* get(const char* key);
 const redis_result* get(const char* key, size_t len);
# 205 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
 bool getset(const char* key, const char* value, string& buf);
 bool getset(const char* key, size_t key_len, const char* value,
  size_t value_len, string& buf);
# 225 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
 int get_strlen(const char* key);
 int get_strlen(const char* key, size_t key_len);
# 242 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
 int setrange(const char* key, unsigned offset, const char* value);
 int setrange(const char* key, size_t key_len, unsigned offset,
  const char* value, size_t value_len);
# 262 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
 bool getrange(const char* key, int start, int end, string& buf);
 bool getrange(const char* key, size_t key_len,
  int start, int end, string& buf);
# 281 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
 bool setbit_(const char* key, unsigned offset, bool bit);
 bool setbit_(const char* key, size_t len, unsigned offset, bool bit);
# 298 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
 bool getbit(const char* key, unsigned offset, int& bit);
 bool getbit(const char* key, size_t len, unsigned offset, int& bit);
# 311 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
 int bitcount(const char* key);
 int bitcount(const char* key, size_t len);
 int bitcount(const char* key, int start, int end);
 int bitcount(const char* key, size_t len, int start, int end);
# 327 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
 int bitop_and(const char* destkey, const std::vector<string>& keys);
 int bitop_and(const char* destkey, const std::vector<const char*>& keys);
 int bitop_and(const char* destkey, const char* key, ...);
 int bitop_and(const char* destkey, const char* keys[], size_t size);
# 342 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
 int bitop_or(const char* destkey, const std::vector<string>& keys);
 int bitop_or(const char* destkey, const std::vector<const char*>& keys);
 int bitop_or(const char* destkey, const char* key, ...);
 int bitop_or(const char* destkey, const char* keys[], size_t size);
# 357 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
 int bitop_xor(const char* destkey, const std::vector<string>& keys);
 int bitop_xor(const char* destkey, const std::vector<const char*>& keys);
 int bitop_xor(const char* destkey, const char* key, ...);
 int bitop_xor(const char* destkey, const char* keys[], size_t size);
# 372 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
 bool mset(const std::map<string, string>& objs);
 bool mset(const std::vector<string>& keys,
  const std::vector<string>& values);
 bool mset(const char* keys[], const char* values[], size_t argc);
 bool mset(const char* keys[], const size_t keys_len[],
  const char* values[], const size_t values_len[], size_t argc);
# 395 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
 int msetnx(const std::map<string, string>& objs);
 int msetnx(const std::vector<string>& keys,
  const std::vector<string>& values);
 int msetnx(const char* keys[], const char* values[], size_t argc);
 int msetnx(const char* keys[], const size_t keys_len[],
  const char* values[], const size_t values_len[], size_t argc);
# 445 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
 bool mget(const std::vector<string>& keys,
  std::vector<string>* out = 
# 446 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp" 3 4
                            __null
# 446 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
                                );
 bool mget(const std::vector<const char*>& keys,
  std::vector<string>* out = 
# 448 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp" 3 4
                            __null
# 448 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
                                );

 bool mget(std::vector<string>* result, const char* first_key, ...);
 bool mget(const char* keys[], size_t argc,
  std::vector<string>* out = 
# 452 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp" 3 4
                            __null
# 452 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
                                );
 bool mget(const char* keys[], const size_t keys_len[], size_t argc,
  std::vector<string>* out = 
# 454 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp" 3 4
                            __null
# 454 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
                                );
# 474 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
 bool incr(const char* key, long long int* result = 
# 474 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp" 3 4
                                                   __null
# 474 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
                                                       );
# 494 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
 bool incrby(const char* key, long long int inc,
  long long int* result = 
# 495 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp" 3 4
                         __null
# 495 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
                             );
# 515 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
 bool incrbyfloat(const char* key, double inc, double* result = 
# 515 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp" 3 4
                                                               __null
# 515 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
                                                                   );
# 533 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
 bool decr(const char* key, long long int* result = 
# 533 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp" 3 4
                                                   __null
# 533 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
                                                       );
# 550 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
 bool decrby(const char* key, long long int dec,
  long long int* result = 
# 551 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp" 3 4
                         __null
# 551 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_string.hpp"
                             );

private:
 int bitop(const char* op, const char* destkey,
  const std::vector<string>& keys);
 int bitop(const char* op, const char* destkey,
  const std::vector<const char*>& keys);
 int bitop(const char* op, const char* destkey,
  const char* keys[], size_t size);

 bool incoper(const char* cmd, const char* key, long long int* inc,
  long long int* result);

};

}
# 197 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_list.hpp" 1
       





namespace acl
{

class redis_list : virtual public redis_command
{
public:



 redis_list(void);




 redis_list(redis_client* conn);




 redis_list(redis_client_cluster* cluster);

 __attribute__((__deprecated__))
 redis_list(redis_client_cluster* cluster, size_t max_conns);

 redis_list(redis_client_pipeline* pipeline);

 virtual ~redis_list(void);
# 69 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_list.hpp"
 bool blpop(std::pair<string, string>& result, size_t timeout,
  const char* first_key, ...);
 bool blpop(const std::vector<const char*>& keys, size_t timeout,
  std::pair<string, string>& result);
 bool blpop(const std::vector<string>& keys, size_t timeout,
  std::pair<string, string>& result);







 bool brpop(std::pair<string, string>& result, size_t timeout,
  const char* first_key, ...);
 bool brpop(const std::vector<const char*>& keys, size_t timeout,
  std::pair<string, string>& result);
 bool brpop(const std::vector<string>& keys, size_t timeout,
  std::pair<string, string>& result);
# 111 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_list.hpp"
 bool brpoplpush(const char* src, const char* dst, size_t timeout,
  string* buf = 
# 112 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_list.hpp" 3 4
               __null
# 112 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_list.hpp"
                   );
# 128 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_list.hpp"
 bool lindex(const char* key, size_t idx, string& buf);
# 146 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_list.hpp"
 int linsert_before(const char* key, const char* pivot,
  const char* value);
 int linsert_before(const char* key, const char* pivot,
  size_t pivot_len, const char* value, size_t value_len);
# 167 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_list.hpp"
 int linsert_after(const char* key, const char* pivot,
  const char* value);
 int linsert_after(const char* key, const char* pivot,
  size_t pivot_len, const char* value, size_t value_len);
# 180 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_list.hpp"
 int llen(const char* key);
# 196 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_list.hpp"
 int lpop(const char* key, string& buf);
# 212 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_list.hpp"
 int lpush(const char* key, const char* first_value, ...);
 int lpush(const char* key, const char* values[], size_t argc);
 int lpush(const char* key, const std::vector<string>& values);
 int lpush(const char* key, const std::vector<const char*>& values);
 int lpush(const char* key, const char* values[], const size_t lens[],
  size_t argc);
# 236 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_list.hpp"
 int lpushx(const char* key, const char* value);
 int lpushx(const char* key, const char* value, size_t len);
# 287 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_list.hpp"
 bool lrange(const char* key, int start, int end,
  std::vector<string>* result);
# 315 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_list.hpp"
 int lrem(const char* key, int count, const char* value);
 int lrem(const char* key, int count, const char* value, size_t len);
# 335 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_list.hpp"
 bool lset(const char* key, int idx, const char* value);
 bool lset(const char* key, int idx, const char* value, size_t len);
# 354 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_list.hpp"
 bool ltrim(const char* key, int start, int end);
# 370 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_list.hpp"
 int rpop(const char* key, string& buf);
# 389 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_list.hpp"
 bool rpoplpush(const char* src, const char* dst, string* buf = 
# 389 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_list.hpp" 3 4
                                                               __null
# 389 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_list.hpp"
                                                                   );
# 406 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_list.hpp"
 int rpush(const char* key, const char* first_value, ...);
 int rpush(const char* key, const char* values[], size_t argc);
 int rpush(const char* key, const std::vector<string>& values);
 int rpush(const char* key, const std::vector<const char*>& values);
 int rpush(const char* key, const char* values[], const size_t lens[],
  size_t argc);
# 430 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_list.hpp"
 int rpushx(const char* key, const char* value);
 int rpushx(const char* key, const char* value, size_t len);

private:
 int linsert(const char* key, const char* pos, const char* pivot,
  size_t pivot_len, const char* value, size_t value_len);
 int pushx(const char* cmd, const char* key,
  const char* value, size_t len);
 int pop(const char* cmd, const char* key, string& buf);
 bool bpop(const char* cmd, const std::vector<const char*>& keys,
  size_t timeout, std::pair<string, string>& result);
 bool bpop(const char* cmd, const std::vector<string>& keys,
  size_t timeout, std::pair<string, string>& result);
 bool bpop(std::pair<string, string>& result);
};

}
# 198 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_pubsub.hpp" 1
       







namespace acl
{

class redis_pubsub : virtual public redis_command
{
public:



 redis_pubsub(void);




 redis_pubsub(redis_client* conn);




 redis_pubsub(redis_client_cluster* cluster);

 __attribute__((__deprecated__))
 redis_pubsub(redis_client_cluster* cluster, size_t max_conns);

 redis_pubsub(redis_client_pipeline* pipeline);

 virtual ~redis_pubsub(void);
# 57 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_pubsub.hpp"
 int publish(const char* channel, const char* msg, size_t len);
# 74 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_pubsub.hpp"
 int subscribe(const char* first_channel, ...);
 int subscribe(const std::vector<const char*>& channels);
 int subscribe(const std::vector<string>& channels);
# 87 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_pubsub.hpp"
 int unsubscribe(const char* first_channel, ...);
 int unsubscribe(const std::vector<const char*>& channels);
 int unsubscribe(const std::vector<string>& channels);
# 102 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_pubsub.hpp"
 int psubscribe(const char* first_pattern, ...);
 int psubscribe(const std::vector<const char*>& patterns);
 int psubscribe(const std::vector<string>& patterns);
# 115 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_pubsub.hpp"
 int punsubscribe(const char* first_pattern, ...);
 int punsubscribe(const std::vector<const char*>& patterns);
 int punsubscribe(const std::vector<string>& patterns);
# 134 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_pubsub.hpp"
 bool get_message(string& channel, string& msg, string* message_type = 
# 134 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_pubsub.hpp" 3 4
                                                                      __null
# 134 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_pubsub.hpp"
                                                                          ,
  string* pattern = 
# 135 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_pubsub.hpp" 3 4
                   __null
# 135 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_pubsub.hpp"
                       , int timeout = -1);
# 162 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_pubsub.hpp"
 int pubsub_channels(std::vector<string>* channels,
  const char* first_pattern, ...);
 int pubsub_channels(const std::vector<const char*>& patterns,
  std::vector<string>* channels);
 int pubsub_channels(const std::vector<string>& patterns,
  std::vector<string>* channels);
# 182 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_pubsub.hpp"
 int pubsub_numsub(std::map<string, int>& out,
  const char* first_channel, ...);
 int pubsub_numsub(const std::vector<const char*>& channels,
  std::map<string, int>& out);
 int pubsub_numsub(const std::vector<string>& channels,
  std::map<string, int>& out);
# 197 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_pubsub.hpp"
 int pubsub_numpat();

private:
 int subop(const char* cmd, const std::vector<const char*>& channels);
 int subop_result(const char* cmd, const std::vector<const char*>& channels);
 int subop(const char* cmd, const std::vector<string>& channels);
 int subop_result(const char* cmd, const std::vector<string>& channels);
 int check_channel(const redis_result* obj, const char* cmd,
  const char* channel);
 int pubsub_numsub(std::map<string, int>& out);
};

}
# 199 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_transaction.hpp" 1
       







namespace acl
{

class redis_transaction : virtual public redis_command
{
public:



 redis_transaction(void);




 redis_transaction(redis_client* conn);




 redis_transaction(redis_client_cluster* cluster);

 redis_transaction(redis_client_pipeline* pipeline);

 __attribute__((__deprecated__))
 redis_transaction(redis_client_cluster* cluster, size_t max_conns);

 virtual ~redis_transaction(void);
# 50 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_transaction.hpp"
 bool watch(const std::vector<string>& keys);







 bool unwatch(void);
# 67 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_transaction.hpp"
 bool multi(void);
# 79 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_transaction.hpp"
 bool exec(void);







 bool discard(void);
# 103 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_transaction.hpp"
 bool run_cmd(const char* cmd, const char* argv[],
  const size_t lens[], size_t argc);
# 117 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_transaction.hpp"
 bool run_cmd(const char* cmd, const std::vector<string>& args);






 size_t get_size(void) const;
# 136 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_transaction.hpp"
 const redis_result* get_child(size_t i, string* cmd) const;






 const std::vector<string>& get_commands(void) const
 {
  return cmds_;
 }

private:
 std::vector<string> cmds_;
};

}
# 200 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_set.hpp" 1
       







namespace acl
{

class redis_set : virtual public redis_command
{
public:



 redis_set(void);




 redis_set(redis_client* conn);




 redis_set(redis_client_cluster* cluster);

 __attribute__((__deprecated__))
 redis_set(redis_client_cluster* cluster, size_t max_conns);

 redis_set(redis_client_pipeline* pipeline);

 virtual ~redis_set(void);
# 58 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_set.hpp"
 int sadd(const char* key, const char* first_member, ...);
 int sadd(const char* key, const std::vector<const char*>& memsbers);
 int sadd(const char* key, const std::vector<string>& members);
 int sadd(const char* key, const char* argv[], size_t argc);
 int sadd(const char* key, const char* argv[], const size_t lens[],
  size_t argc);
# 76 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_set.hpp"
 bool spop(const char* key, string& buf);
# 92 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_set.hpp"
 int scard(const char* key);
# 127 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_set.hpp"
 int smembers(const char* key, std::vector<string>* members);
# 148 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_set.hpp"
 int smove(const char* src, const char* dst, const char* member);
 int smove(const char* src, const char* dst, const string& member);
 int smove(const char* src, const char* dst,
  const char* member, size_t len);
# 187 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_set.hpp"
 int sdiff(std::vector<string>* members, const char* first_key, ...);
 int sdiff(const std::vector<const char*>& keys,
  std::vector<string>* members);
 int sdiff(const std::vector<string>& keys,
  std::vector<string>* members);
# 206 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_set.hpp"
 int sinter(std::vector<string>* members, const char* first_key, ...);
 int sinter(const std::vector<const char*>& keys,
  std::vector<string>* members);
 int sinter(const std::vector<string>& keys,
  std::vector<string>* members);
# 225 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_set.hpp"
 int sunion(std::vector<string>* members, const char* first_key, ...);
 int sunion(const std::vector<const char*>& keys,
  std::vector<string>* members);
 int sunion(const std::vector<string>& keys,
  std::vector<string>* members);
# 244 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_set.hpp"
 int sdiffstore(const char* dst, const char* first_key, ...);
 int sdiffstore(const char* dst, const std::vector<const char*>& keys);
 int sdiffstore(const char* dst, const std::vector<string>& keys);
# 261 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_set.hpp"
 int sinterstore(const char* dst, const char* first_key, ...);
 int sinterstore(const char* dst, const std::vector<const char*>& keys);
 int sinterstore(const char* dst, const std::vector<string>& keys);
# 278 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_set.hpp"
 int sunionstore(const char* dst, const char* first_key, ...);
 int sunionstore(const char* dst, const std::vector<const char*>& keys);
 int sunionstore(const char* dst, const std::vector<string>& keys);
# 294 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_set.hpp"
 bool sismember(const char* key, const char* member);
 bool sismember(const char* key, const char* member, size_t len);
# 309 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_set.hpp"
 int srandmember(const char* key, string& out);
 int srandmember(const char* key, size_t n, std::vector<string>& out);
# 327 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_set.hpp"
 int srem(const char* key, const char* first_member, ...);
 int srem(const char* key, const std::vector<string>& members);
 int srem(const char* key, const std::vector<const char*>& members);
 int srem(const char* key, const char* members[],
  size_t lens[], size_t argc);
# 357 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_set.hpp"
 int sscan(const char* key, int cursor, std::vector<string>& out,
  const char* pattern = 
# 358 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_set.hpp" 3 4
                       __null
# 358 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_set.hpp"
                           , const size_t* count = 
# 358 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_set.hpp" 3 4
                                                   __null
# 358 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_set.hpp"
                                                       );
};

}
# 201 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 1
       
# 10 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
namespace acl
{

class redis_zset : virtual public redis_command
{
public:



 redis_zset(void);




 redis_zset(redis_client* conn);




 redis_zset(redis_client_cluster* cluster);

 redis_zset(redis_client_pipeline* pipeline);

 __attribute__((__deprecated__))
 redis_zset(redis_client_cluster* cluster, size_t max_conns);

 virtual ~redis_zset(void);
# 58 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
 int zadd(const char* key, const std::map<string, double>& members,
  const std::vector<string>* options = 
# 59 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                                      __null
# 59 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                                          );
 int zadd(const char* key,
  const std::vector<std::pair<string, double> >&members);
 int zadd(const char* key,
  const std::vector<std::pair<const char*, double> >&members);
 int zadd(const char* key, const std::vector<string>& members,
  const std::vector<double>& scores);
 int zadd(const char* key, const std::vector<const char*>& members,
  const std::vector<double>& scores);
 int zadd(const char* key, const char* members[], double scores[],
  size_t size);
 int zadd(const char* key, const char* members[], size_t members_len[],
  double scores[], size_t size);

 int zadd_with_ch_xx(const char* key, const std::map<string, double>& members);
 int zadd_with_ch_nx(const char* key, const std::map<string, double>& members);

 bool zadd_with_incr(const char* key, const char* member, size_t len,
  double score, double* result = 
# 77 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                                __null
# 77 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                                    , const char* option = 
# 77 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                                                           __null
# 77 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                                                               );
 bool zadd_with_incr(const char* key, const char* member,
  double score, double* result = 
# 79 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                                __null
# 79 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                                    , const char* option = 
# 79 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                                                           __null
# 79 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                                                               );
 bool zadd_with_incr_xx(const char* key, const char* member,
  double score, double* result = 
# 81 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                                __null
# 81 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                                    );
 bool zadd_with_incr_nx(const char* key, const char* member,
  double score, double* result = 
# 83 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                                __null
# 83 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                                    );
# 99 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
 int zcard(const char* key);
# 118 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
 int zcount(const char* key, double min, double max);
# 134 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
 bool zincrby(const char* key, double inc, const char* member,
  double* result = 
# 135 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                  __null
# 135 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                      );
 bool zincrby(const char* key, double inc, const char* member,
  size_t len, double* result = 
# 137 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                              __null
# 137 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                                  );
# 187 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
 int zrange(const char* key, int start, int stop,
  std::vector<string>* result);
# 203 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
 int zrange_with_scores(const char* key, int start, int stop,
  std::vector<std::pair<string, double> >& out);
# 232 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
 int zrangebyscore(const char* key, double min, double max,
  std::vector<string>* out, const int* offset = 
# 233 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                                               __null
# 233 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                                                   ,
  const int* count = 
# 234 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                    __null
# 234 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                        );
# 268 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
 int zrangebyscore(const char* key, const char* min, const char* max,
  std::vector<string>* out, const int* offset = 
# 269 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                                               __null
# 269 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                                                   ,
  const int* count = 
# 270 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                    __null
# 270 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                        );
# 279 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
 int zrangebyscore_with_scores(const char* key, double min, double max,
  std::vector<std::pair<string, double> >& out,
  const int* offset = 
# 281 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                     __null
# 281 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                         , const int* count = 
# 281 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                                              __null
# 281 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                                                  );
# 290 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
 int zrangebyscore_with_scores(const char* key, const char* min,
  const char* max, std::vector<std::pair<string, double> >& out,
  const int* offset = 
# 292 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                     __null
# 292 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                         , const int* count = 
# 292 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                                              __null
# 292 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                                                  );
# 302 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
 int zrank(const char* key, const char* member, size_t len);
 int zrank(const char* key, const char* member);
# 312 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
 int zrem(const char* key, const char* first_member, ...);
 int zrem(const char* key, const std::vector<string>& members);
 int zrem(const char* key, const std::vector<const char*>& members);
 int zrem(const char* key, const char* members[], const size_t lens[],
  size_t argc);
# 331 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
 int zremrangebyrank(const char* key, int start, int stop);
# 343 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
 int zremrangebyscore(const char* key, double min, double max);
# 355 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
 int zremrangebyscore(const char* key, const char* min, const char* max);
# 367 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
 int zrevrange(const char* key, int start, int stop,
  std::vector<string>* result);
# 380 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
 int zrevrange_with_scores(const char* key, int start, int stop,
  std::vector<std::pair<string, double> >& out);
# 415 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
 int zrevrangebyscore_with_scores(const char* key, double min,
  double max, std::vector<std::pair<string, double> >& out,
  const int* offset = 
# 417 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                     __null
# 417 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                         , const int* count = 
# 417 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                                              __null
# 417 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                                                  );
 int zrevrangebyscore_with_scores(const char* key, const char* min,
  const char* max, std::vector<std::pair<string, double> >& out,
  const int* offset = 
# 420 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                     __null
# 420 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                         , const int* count = 
# 420 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                                              __null
# 420 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                                                  );
# 430 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
 int zrevrank(const char* key, const char* member, size_t len);
 int zrevrank(const char* key, const char* member);
# 441 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
 bool zscore(const char* key, const char* member, size_t len,
  double& result);
 bool zscore(const char* key, const char* member, double& result);
# 461 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
 int zunionstore(const char* dst, const std::map<string, double>& keys,
  const char* aggregate = "SUM");

 int zunionstore(const char* dst, const std::vector<string>& keys,
  const std::vector<double>* weights = 
# 465 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                                      __null
# 465 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                                          ,
  const char* aggregate = "SUM");







 int zinterstore(const char* dst, const std::map<string, double>& keys,
  const char* aggregate = "SUM");

 int zinterstore(const char* dst, const std::vector<string>& keys,
  const std::vector<double>* weights = 
# 478 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                                      __null
# 478 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                                          ,
  const char* aggregate = "SUM");
# 493 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
 int zscan(const char* key, int cursor,
  std::vector<std::pair<string, double> >& out,
  const char* pattern = 
# 495 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                       __null
# 495 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                           , const size_t* count = 
# 495 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                                                   __null
# 495 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                                                       );
# 517 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
 int zrangebylex(const char* key, const char* min, const char* max,
  std::vector<string>* out, const int* offset = 
# 518 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                                               __null
# 518 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                                                   ,
  const int* count = 
# 519 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                    __null
# 519 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                        );






 int zlexcount(const char* key, const char* min, const char* max);






 int zremrangebylex(const char* key, const char* min, const char* max);

 int zpopmin(const char* key,
  std::vector<std::pair<string, double> >& out, size_t count = 1);
 int zpopmax(const char* key,
  std::vector<std::pair<string, double> >& out, size_t count = 1);
 int bzpopmin(const char* key, size_t timeout, string& member,
  double* score = 
# 540 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                 __null
# 540 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                     );
 int bzpopmax(const char* key, size_t timeout, string& member,
  double* score = 
# 542 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                 __null
# 542 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                     );
 int bzpopmin(const std::vector<string>& keys, size_t timeout,
  string& member, double* score = 
# 544 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                                 __null
# 544 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                                     );
 int bzpopmax(const std::vector<string>& keys, size_t timeout,
  string& member, double* score = 
# 546 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                                 __null
# 546 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                                     );

private:
 int zrange_get(const char* cmd, const char* key, int start,
  int stop, std::vector<string>* result);
 int zrange_get_with_scores(const char* cmd, const char* key, int start,
  int stop, std::vector<std::pair<string, double> >& out);
 int zrangebyscore_get(const char* cmd, const char* key,
  const char* min, const char* max, std::vector<string>* out,
  const int* offset = 
# 555 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                     __null
# 555 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                         , const int* count = 
# 555 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                                              __null
# 555 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                                                  );
 int zrangebyscore_get_with_scores(const char* cmd,
  const char* key, const char* min, const char* max,
  std::vector<std::pair<string, double> >& out,
  const int* offset = 
# 559 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                     __null
# 559 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                         , const int* count = 
# 559 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp" 3 4
                                              __null
# 559 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_zset.hpp"
                                                  );
 int zstore(const char* cmd, const char* dst,
  const std::map<string, double>& keys, const char* aggregate);
 int zstore(const char* cmd, const char* dst, const std::vector<string>& keys,
  const std::vector<double>* weights, const char* aggregate);
 int zpop(const char* cmd, const char* key,
  std::vector<std::pair<string, double> >& out, size_t count);
 int get_with_scores(std::vector<std::pair<string, double> >& out);
 int bzpop(const char* cmd, const char* key, size_t timeout,
  string& member, double* score);
 int bzpop(const char* cmd, const std::vector<string>& keys,
  size_t timeout, string& member, double* score);
 int bzpop_result(string& member, double* score);
};

}
# 202 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_script.hpp" 1
       







namespace acl
{

class redis_script : virtual public redis_command
{
public:



 redis_script(void);




 redis_script(redis_client* conn);




 redis_script(redis_client_cluster* cluster);

 __attribute__((__deprecated__))
 redis_script(redis_client_cluster* cluster, size_t max_conns);

 redis_script(redis_client_pipeline* pipeline);

 virtual ~redis_script(void);



 const redis_result* eval(const char* script,
  const std::vector<string>& keys,
  const std::vector<string>& args);
 const redis_result* eval(const char* script,
  const std::vector<const char*>& keys,
  const std::vector<const char*>& args);

 const redis_result* evalsha(const char* sha1,
  const std::vector<string>& keys,
  const std::vector<string>& args);
 const redis_result* evalsha(const char* sha1,
  const std::vector<const char*>& keys,
  const std::vector<const char*>& args);

 int script_exists(const std::vector<string>& scripts,
  std::vector<bool>& out);
 int script_exists(const std::vector<const char*>& scripts,
  std::vector<bool>& out);

 bool script_flush();
 bool script_load(const string& script, string& out);
 bool script_kill();



 bool eval_status(const char* script,
  const std::vector<string>& keys,
  const std::vector<string>& args,
  const char* success = "OK");
 bool eval_number(const char* script,
  const std::vector<string>& keys,
  const std::vector<string>& args,
  int& out);
 bool eval_number64(const char* script,
  const std::vector<string>& keys,
  const std::vector<string>& args,
  long long int& out);
 int eval_string(const char* script,
  const std::vector<string>& keys,
  const std::vector<string>& args,
  string& out);

 bool evalsha_status(const char* script,
  const std::vector<string>& keys,
  const std::vector<string>& args,
  const char* success = "OK");
 bool evalsha_number(const char* script,
  const std::vector<string>& keys,
  const std::vector<string>& args,
  int& out);
 bool evalsha_number64(const char* script,
  const std::vector<string>& keys,
  const std::vector<string>& args,
  long long int& out);
 int evalsha_string(const char* script,
  const std::vector<string>& keys,
  const std::vector<string>& args,
  string& out);

 int eval_status(const char* script,
  const std::vector<string>& keys,
  const std::vector<string>& args,
  std::vector<bool>& out,
  const char* success = "OK");
 int eval_number(const char* script,
  const std::vector<string>& keys,
  const std::vector<string>& args,
  std::vector<int>& out,
  std::vector<bool>& status);
 long long int eval_number64(const char* script,
  const std::vector<string>& keys,
  const std::vector<string>& args,
  std::vector<long long int>& out,
  std::vector<bool>& status);
 int eval_strings(const char* script,
  const std::vector<string>& keys,
  const std::vector<string>& args,
  std::vector<string>& out);

 int evalsha_status(const char* script,
  const std::vector<string>& keys,
  const std::vector<string>& args,
  std::vector<bool>& out,
  const char* success = "OK");
 int evalsha_number(const char* script,
  const std::vector<string>& keys,
  const std::vector<string>& args,
  std::vector<int>& out,
  std::vector<bool>& status);
 long long int evalsha_number64(const char* script,
  const std::vector<string>& keys,
  const std::vector<string>& args,
  std::vector<long long int>& out,
  std::vector<bool>& status);
 int evalsha_strings(const char* script,
  const std::vector<string>& keys,
  const std::vector<string>& args,
  std::vector<string>& out);

private:
 int eval_status(const char* cmd, const char* script,
  const std::vector<string>& keys,
  const std::vector<string>& args,
  std::vector<bool>& out,
  const char* success = "OK");
 int eval_number(const char* cmd, const char* script,
  const std::vector<string>& keys,
  const std::vector<string>& args,
  std::vector<int>& out,
  std::vector<bool>& status);
 long long int eval_number64(const char* cmd, const char* script,
  const std::vector<string>& keys,
  const std::vector<string>& args,
  std::vector<long long int>& out,
  std::vector<bool>& status);
 int eval_strings(const char* cmd, const char* script,
  const std::vector<string>& keys,
  const std::vector<string>& args,
  std::vector<string>& out);

 const redis_result* eval_cmd(const char* cmd, const char* script,
  const std::vector<string>& keys,
  const std::vector<string>& args);
 const redis_result* eval_cmd(const char* cmd, const char* script,
  const std::vector<const char*>& keys,
  const std::vector<const char*>& args);
};

}
# 203 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_server.hpp" 1
       







namespace acl
{

class redis_server : virtual public redis_command
{
public:



 redis_server(void);




 redis_server(redis_client* conn);




 redis_server(redis_client_cluster* cluster);

 __attribute__((__deprecated__))
 redis_server(redis_client_cluster* cluster, size_t max_conns);

 redis_server(redis_client_pipeline* pipeline);

 virtual ~redis_server(void);
# 46 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_server.hpp"
 bool bgrewriteaof(void);
# 55 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_server.hpp"
 bool bgsave(void);






 bool client_getname(string& buf);






 bool client_kill(const char* addr);






 int client_list(string& buf);







 bool client_setname(const char* name);
# 93 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_server.hpp"
 int config_get(const char* parameter, std::map<string, string>& out);





 bool config_resetstat(void);





 bool config_rewrite(void);







 bool config_set(const char* name, const char* value);





 int dbsize(void);






 bool flushall(void);






 bool flushdb(void);






 int info(string& buf);






 int info(std::map<string, string>& out);





 time_t lastsave(void);






 bool monitor(void);







 bool get_command(string& buf);






 bool save(void);





 void shutdown(bool save_data = true);







 bool slaveof(const char* ip, int port);






 const redis_result* slowlog_get(int number = 0);





 int slowlog_len(void);





 bool slowlog_reset(void);






 bool get_time(time_t& stamp, int& escape);
};

}
# 204 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hyperloglog.hpp" 1
       







namespace acl
{

class redis_hyperloglog : virtual public redis_command
{
public:



 redis_hyperloglog(void);




 redis_hyperloglog(redis_client* conn);




 redis_hyperloglog(redis_client_cluster* cluster);

 __attribute__((__deprecated__))
 redis_hyperloglog(redis_client_cluster* cluster, size_t max_conns);

 redis_hyperloglog(redis_client_pipeline* pipeline);

 virtual ~redis_hyperloglog(void);
# 54 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hyperloglog.hpp"
 int pfadd(const char* key, const char* first_element, ...);
 int pfadd(const char* key, const std::vector<const char*>& elements);
 int pfadd(const char* key, const std::vector<string>& elements);
# 67 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hyperloglog.hpp"
 int pfcount(const char* first_key, ...);
 int pfcount(const std::vector<const char*>& keys);
 int pfcount(const std::vector<string>& keys);
# 85 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_hyperloglog.hpp"
 bool pfmerge(const char* dst, const char* first_src, ...);
 bool pfmerge(const char* dst, const std::vector<const char*>& keys);
 bool pfmerge(const char* dst, const std::vector<string>& keys);
};

}
# 205 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_connection.hpp" 1
       





namespace acl
{

class redis_client;







class redis_connection : virtual public redis_command
{
public:



 redis_connection(void);




 redis_connection(redis_client* conn);




 redis_connection(redis_client_cluster* cluster);

 __attribute__((__deprecated__))
 redis_connection(redis_client_cluster* cluster, size_t max_conns);

 redis_connection(redis_client_pipeline* pipeline);

 virtual ~redis_connection(void);
# 53 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_connection.hpp"
 bool auth(const char* passwd);
# 63 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_connection.hpp"
 bool select(int dbnum);







 bool ping();







 bool echo(const char* s);







 bool quit();
};

}
# 206 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_cluster.hpp" 1
       
# 11 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_cluster.hpp"
namespace acl
{

class redis_result;
class redis_node;
class redis_slot;

class redis_cluster : virtual public redis_command
{
public:



 redis_cluster(void);




 redis_cluster(redis_client* conn);




 redis_cluster(redis_client_cluster* cluster);

 __attribute__((__deprecated__))
 redis_cluster(redis_client_cluster* cluster, size_t max_conns);

 redis_cluster(redis_client_pipeline* pipeline);

 virtual ~redis_cluster(void);
# 57 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_cluster.hpp"
 bool cluster_addslots(int first, ...);
 bool cluster_addslots(const int slot_list[], size_t n);
 bool cluster_addslots(const std::vector<int>& slot_list);
# 75 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_cluster.hpp"
 bool cluster_delslots(int first, ...);
 bool cluster_delslots(const int slot_list[], size_t n);
 bool cluster_delslots(const std::vector<int>& slot_list);
# 91 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_cluster.hpp"
 int cluster_getkeysinslot(size_t slot, size_t max, std::list<string>& result);
# 104 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_cluster.hpp"
 bool cluster_meet(const char* ip, int port);
# 115 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_cluster.hpp"
 bool cluster_reset();
 bool cluster_reset_hard();
 bool cluster_reset_soft();
# 130 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_cluster.hpp"
 bool cluster_setslot_importing(size_t slot, const char* src_node);
# 143 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_cluster.hpp"
 bool cluster_setslot_migrating(size_t slot, const char* dst_node);
# 153 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_cluster.hpp"
 bool cluster_setslot_stable(size_t slot);
# 166 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_cluster.hpp"
 bool cluster_setslot_node(size_t slot, const char* node);
# 176 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_cluster.hpp"
 int cluster_count_failure_reports(const char* node);
# 186 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_cluster.hpp"
 bool cluster_failover();
# 196 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_cluster.hpp"
 bool cluster_failover_force();
# 206 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_cluster.hpp"
 bool cluster_failover_takeover();
# 216 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_cluster.hpp"
 bool cluster_info(std::map<string, string>& result);







 bool cluster_saveconfig();
# 234 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_cluster.hpp"
 int cluster_countkeysinslot(size_t slot);
# 244 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_cluster.hpp"
 bool cluster_forget(const char* node);
# 254 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_cluster.hpp"
 int cluster_keyslot(const char* key);
# 264 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_cluster.hpp"
 bool cluster_replicate(const char* node);

 bool cluster_set_config_epoch(const char* epoch);
# 277 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_cluster.hpp"
 const std::vector<redis_slot*>* cluster_slots();
# 288 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_cluster.hpp"
 const std::map<string, redis_node*>* cluster_nodes();
# 298 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_cluster.hpp"
 const std::vector<redis_node*>* cluster_slaves(const char* node);

private:
 std::vector<redis_slot*> slots_;

 redis_slot* get_slot_master(const redis_result* rr);
 redis_slot* get_slot(const redis_result* rr,
  size_t slot_max, size_t slot_min);
 void free_slots();

private:
 std::map<string, redis_node*> masters_;

 redis_node* get_node(string& line);
 void add_slot_range(redis_node* node, char* slots);
 void free_masters();
 redis_node* get_slave(const std::vector<string>& tokens);

private:
 std::vector<redis_node*> slaves_;
 void free_slaves();
};

}
# 207 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_slot.hpp" 1
       





namespace acl
{

class redis_slot
{
public:
# 26 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_slot.hpp"
 redis_slot(size_t slot_min, size_t slot_max,
  const char* ip, int port);
 redis_slot(const redis_slot& node);

 ~redis_slot(void);







 redis_slot& add_slave(redis_slot* node);






 const std::vector<redis_slot*>& get_slaves() const
 {
  return slaves_;
 }






 const char* get_ip(void) const
 {
  return ip_;
 }






 int get_port(void) const
 {
  return port_;
 }






 size_t get_slot_min(void) const
 {
  return slot_min_;
 }






 size_t get_slot_max(void) const
 {
  return slot_max_;
 }

private:
 size_t slot_min_;
 size_t slot_max_;
 char ip_[128];
 int port_;

 std::vector<redis_slot*> slaves_;
};

}
# 208 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_node.hpp" 1
       
# 10 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_node.hpp"
namespace acl
{






class redis_node : public noncopyable
{
public:




 redis_node(void);
 ~redis_node(void);
# 35 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_node.hpp"
 redis_node& set_id(const char* id);
# 44 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_node.hpp"
 redis_node& set_addr(const char* addr);







 redis_node& set_type(const char* type);







 redis_node& set_myself(bool yesno);
# 69 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_node.hpp"
 redis_node& set_master(const redis_node* master);







 redis_node& set_handshaking(bool yesno);







 redis_node& set_connected(bool yesno);
# 94 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_node.hpp"
 redis_node& set_master_id(const char* id);
# 103 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_node.hpp"
 bool add_slave(redis_node* slave);
# 115 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_node.hpp"
 redis_node* remove_slave(const char* id);







 void clear_slaves(bool free_all = false);
# 133 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_node.hpp"
 void add_slot_range(size_t min, size_t max);






 const std::vector<std::pair<size_t, size_t> >& get_slots() const;






 const char* get_type() const
 {
  return type_.c_str();
 }






 bool is_myself() const
 {
  return myself_;
 }






 bool is_handshaking() const
 {
  return handshaking_;
 }






 bool is_connected() const
 {
  return connected_;
 }






 const redis_node* get_master() const
 {
  return master_;
 }






 const char* get_master_id() const
 {
  return master_id_.c_str();
 }






 const std::vector<redis_node*>* get_slaves() const
 {
  return &slaves_;
 }






 bool is_master() const
 {
  return master_ == this;
 }






 const char* get_id() const
 {
  return id_.c_str();
 }






 const char* get_addr() const
 {
  return addr_.c_str();
 }






 const char* get_addr_info() const
 {
  return addr_info_.c_str();
 }

private:
 string id_;
 string addr_;
 string addr_info_;
 string type_;
 bool myself_;
 bool handshaking_;
 bool connected_;
 const redis_node* master_;
 string master_id_;
 std::vector<redis_node*> slaves_;
 std::vector<std::pair<size_t, size_t> > slots_;
};

}
# 209 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_geo.hpp" 1
       
# 10 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_geo.hpp"
namespace acl
{







enum
{
 GEO_UNIT_FT,
 GEO_UNIT_M,
 GEO_UNIT_MI,
 GEO_UNIT_KM,
};

enum
{
 GEO_WITH_COORD = 1 << 0,
 GEO_WITH_DIST = 1 << 1,
 GEO_WITH_HASH = 1 << 2,
};

enum
{
 GEO_SORT_NONE,
 GEO_SORT_ASC,
 GEO_SORT_DESC,
};

class geo_member
{
public:
 geo_member(const char* name);
 geo_member(const geo_member& member);
 ~geo_member(void);

 void set_name(const char* name);
 const char* get_name() const
 {
  return name_.c_str();
 }

 void set_dist(double dist);
 double get_dist() const
 {
  return dist_;
 }





 void set_hash(long long int hash);
 long long int get_hash() const

 {
  return hash_;
 }

 void set_coordinate(double longitude, double latitude);
 double get_longitude() const
 {
  return longitude_;
 }

 double get_latitude() const
 {
  return latitude_;
 }

private:
 string name_;
 double dist_;



 long long int hash_;


 double longitude_;
 double latitude_;
};

class redis_geo : virtual public redis_command
{
public:



 redis_geo();




 redis_geo(redis_client* conn);




 redis_geo(redis_client_cluster* cluster);

 __attribute__((__deprecated__))
 redis_geo(redis_client_cluster* cluster, size_t max_conns);

 redis_geo(redis_client_pipeline* pipeline);

 virtual ~redis_geo();
# 141 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_geo.hpp"
 int geoadd(const char* key, const char* member,
  double longitude, double latitude);
# 168 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_geo.hpp"
 int geoadd(const char* key, size_t size, const char* members[],
  const double longitudes[], const double latitudes[]);
# 196 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_geo.hpp"
 int geoadd(const char* key, const std::vector<string>& members,
  const std::vector<double>& longitudes,
  const std::vector<double>& latitudes);
# 212 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_geo.hpp"
 bool geohash(const char* key, const std::vector<string>& members,
  std::vector<string>& results);
# 227 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_geo.hpp"
 bool geohash(const char* key, const char* member, string& result);
# 241 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_geo.hpp"
 bool geopos(const char* key, const std::vector<string>& members,
  std::vector<std::pair<double, double> >& results);
# 257 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_geo.hpp"
 bool geopos(const char* key, const char* member,
  std::pair<double, double>& result);
# 274 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_geo.hpp"
 double geodist(const char* key, const char* member1,
  const char* member2, int unit = GEO_UNIT_M);
# 298 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_geo.hpp"
 const std::vector<geo_member>& georadius(const char* key,
  double longitude, double latitude, double radius,
  int unit = GEO_UNIT_M,
  int with = GEO_WITH_COORD | GEO_WITH_DIST,
  int sort = GEO_SORT_ASC);
# 323 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_geo.hpp"
 const std::vector<geo_member>& georadiusbymember(const char* key,
  const char* member, double radius,
  int unit = GEO_UNIT_M,
  int with = GEO_WITH_COORD | GEO_WITH_DIST,
  int sort = GEO_SORT_ASC);

private:
 std::vector<geo_member> positions_;

 void add_one_pos(const redis_result& rr);
 static const char* get_unit(int unit);
};

}
# 210 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_slave.hpp" 1
       





namespace acl
{

class redis_slave
{
public:
 redis_slave(void);
 ~redis_slave(void) {}

 string name_;
 string ip_;
 int port_;
 string runid_;
 string flags_;
 unsigned link_pending_commands_;
 unsigned link_refcount_;
 unsigned last_ping_sent_;
 unsigned last_ok_ping_reply_;
 unsigned last_ping_reply_;
 unsigned down_after_milliseconds_;
 unsigned info_refresh_;
 string role_reported_;
 time_t role_reported_time_;
 time_t master_link_down_time_;
 string master_link_status_;
 string master_host_;
 int master_port_;
 unsigned slave_priority_;
 unsigned long slave_repl_offset_;
};

}
# 211 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_master.hpp" 1
       





namespace acl
{

class redis_master
{
public:
 redis_master(void);
 ~redis_master(void) {}

 string name_;
 string ip_;
 int port_;
 string runid_;
 string flags_;
 unsigned link_pending_commands_;
 unsigned link_refcount_;
 unsigned last_ping_sent_;
 unsigned last_ok_ping_reply_;
 unsigned last_ping_reply_;
 unsigned down_after_milliseconds_;
 unsigned info_refresh_;
 string role_reported_;
 time_t role_reported_time_;
 time_t config_epoch_;
 unsigned num_slaves_;
 unsigned num_other_sentinels_;
 unsigned quorum_;
 unsigned failover_timeout_;
 unsigned parallel_syncs_;
};

}
# 212 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_sentinel.hpp" 1
       
# 10 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_sentinel.hpp"
namespace acl
{

class redis_sentinel : virtual public redis_command
{
public:
 redis_sentinel(void);
 redis_sentinel(redis_client* conn);
 virtual ~redis_sentinel(void);

 bool sentinel_master(const char* name, redis_master& out);
 bool sentinel_masters(std::vector<redis_master>& out);
 bool sentinel_slaves(const char* master_name,
  std::vector<redis_slave>& out);

 bool sentinel_get_master_addr_by_name(const char* master_name,
  string& ip, int& port);
 int sentinel_reset(const char* pattern);
 bool sentinel_failover(const char* master_name);

 bool sentinel_flushconfig(void);
 bool sentinel_remove(const char* master_name);
 bool sentinel_monitor(const char* master_name, const char* ip,
  int port, int quorum);
 bool sentinel_set(const char* master_name, const char* name,
  const char* value);
 bool sentinel_set(const char* master_name, const char* name,
  unsigned value);
};

}
# 213 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_role.hpp" 1
       
# 10 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_role.hpp"
namespace acl
{

class redis_client;
class redis_result;

class redis_role4slave
{
public:
 redis_role4slave(void) : port_(0), off_(0) {}
 ~redis_role4slave(void) {}

 void set_ip(const char* ip)
 {
  ip_ = ip;
 }
 void set_port(int port)
 {
  port_ = port;
 }
 void set_status(const char* status)
 {
  status_ = status;
 }
 void set_offset(long long off)
 {
  off_ = off;
 }
 const char* get_ip(void) const
 {
  return ip_.c_str();
 }
 int get_port(void) const
 {
  return port_;
 }
 const char* get_status(void) const
 {
  return status_.c_str();
 }
 long long get_offset(void) const
 {
  return off_;
 }

private:
 string ip_;
 int port_;
 long long off_;
 string status_;
};

class redis_role4master
{
public:
 redis_role4master(void) : off_(0) {}
 ~redis_role4master(void) {}

 void set_offset(long long off)
 {
  off_ = off;
 }
 long long get_offset(void) const
 {
  return off_;
 }
 void add_slave(const redis_role4slave& slave)
 {
  slaves_.push_back(slave);
 }
 const std::vector<redis_role4slave>& get_slaves(void) const
 {
  return slaves_;
 }

private:
 long long off_;
 std::vector<redis_role4slave> slaves_;
};

class redis_role : virtual public redis_command
{
public:
 redis_role(void);
 redis_role(redis_client* conn);
 virtual ~redis_role(void) {}

 bool role(void);
 const redis_role4master& get_role4master(void) const
 {
  return role4master_;
 }
 const redis_role4slave& get_role4slave(void) const
 {
  return role4slave_;
 }

 const char* get_role_name(void) const
 {
  return role_name_.c_str();
 }

private:
 string role_name_;
 std::vector<string> masters_;
 redis_role4master role4master_;
 redis_role4slave role4slave_;

 bool role_sentinel(const redis_result** a, size_t n);
 bool role_master(const redis_result** a, size_t n);
 bool role_slave(const redis_result** a, size_t n);

 bool add_one_slave(const redis_result* a, redis_role4master& out);
};

}
# 214 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_stream.hpp" 1
       






namespace acl
{

struct redis_stream_field
{
 string name;
 string value;
};

struct redis_stream_message
{
 string id;
 std::vector<redis_stream_field> fields;
};

struct redis_stream_messages
{
 string key;
 std::vector<redis_stream_message> messages;

 bool empty(void) const
 {
  return messages.empty();
 }

 size_t size(void) const
 {
  return messages.size();
 }
};

struct redis_xinfo_consumer
{
 string name;
 size_t pending;
 size_t idle;

 redis_xinfo_consumer(void)
 {
  pending = 0;
  idle = 0;
 }
};

struct redis_xinfo_group
{
 string name;
 string last_delivered_id;
 size_t consumers;
 size_t pending;

 redis_xinfo_group(void)
 {
  consumers = 0;
  pending = 0;
 }
};

struct redis_stream_info
{
 size_t length;
 size_t radix_tree_keys;
 size_t radix_tree_nodes;
 size_t groups;
 string last_generated_id;
 redis_stream_message first_entry;
 redis_stream_message last_entry;

 redis_stream_info(void)
 {
  length = 0;
  radix_tree_keys = 0;
  radix_tree_nodes = 0;
  groups = 0;
 }
};

struct redis_pending_consumer
{
 string name;
 size_t pending_number;

 redis_pending_consumer(void)
 {
  pending_number = 0;
 }
};

struct redis_pending_summary
{
 string smallest_id;
 string greatest_id;
 std::vector<redis_pending_consumer> consumers;

 bool empty(void) const
 {
  return consumers.empty();
 }

 size_t size(void) const
 {
  return consumers.size();
 }
};

struct redis_pending_message
{
 string id;
 string consumer;
 unsigned long long elapsed;
 size_t delivered;

 redis_pending_message(void)
 {
  elapsed = 0;
  delivered = 0;
 }
};

struct redis_pending_detail
{
 std::map<string, redis_pending_message> messages;

 bool empty(void) const
 {
  return messages.empty();
 }

 size_t size(void) const
 {
  return messages.size();
 }
};

class redis_stream : virtual public redis_command
{
public:
 redis_stream(void);
 redis_stream(redis_client* conn);
 redis_stream(redis_client_cluster* cluster);
 redis_stream(redis_client_pipeline* pipeline);

 __attribute__((__deprecated__))
 redis_stream(redis_client_cluster* cluster, size_t max_conns);

 virtual ~redis_stream(void);
# 174 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_stream.hpp"
 bool xadd(const char* key, const std::map<string, string>& fields,
  string& result, const char* id = "*");
 bool xadd(const char* key, const std::vector<string>& names,
  const std::vector<string>& values,
  string& result, const char* id = "*");
 bool xadd(const char* key, const std::vector<const char*>& names,
  const std::vector<const char*>& values, string& result,
  const char* id = "*");
 bool xadd(const char* key, const char* names[], const size_t names_len[],
  const char* values[], const size_t values_len[], size_t argc,
  string& result, const char* id = "*");
 bool xadd_with_maxlen(const char* key, size_t maxlen,
  const std::map<string, string>& fields, string& result,
  const char* id = "*");







 int xlen(const char* key);
# 206 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_stream.hpp"
 int xdel(const char* key, const char* id);
# 216 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_stream.hpp"
 int xdel(const char* key, const std::vector<string>& ids);
 int xdel(const char* key, const std::vector<const char*>& ids);
# 229 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_stream.hpp"
 int xtrim(const char* key, size_t maxlen, bool tilde = false);
# 246 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_stream.hpp"
 bool xread(redis_stream_messages& messages,
  const std::map<string, string>& streams,
  size_t count = 1000, ssize_t block = 0);
# 279 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_stream.hpp"
 bool xreadgroup(redis_stream_messages& messages, const char* group,
  const char* consumer, const std::map<string, string>& streams,
  size_t count = 1000, ssize_t block = 0, bool noack = false);
# 293 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_stream.hpp"
 bool xreadgroup_with_noack(redis_stream_messages& messages,
  const char* group, const char* consumer,
  const std::map<string, string>& streams,
  size_t count = 1000, ssize_t block = 0);
# 309 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_stream.hpp"
 bool xrange(redis_stream_messages& messages, const char* key,
  const char* start = "-", const char* end = "+",
  size_t count = 1000);
# 324 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_stream.hpp"
 bool xrevrange(redis_stream_messages& messages, const char* key,
  const char* start = "+", const char* end = "-",
  size_t count = 1000);
# 347 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_stream.hpp"
 bool xclaim(std::vector<redis_stream_message>& messages,
  const char* key, const char* group, const char* consumer,
  long min_idle_time, const std::vector<string>& ids,
  size_t idle = 0, long long time_ms = -1,
  int retry_count = -1, bool force = false);




 bool xclaim_with_justid(std::vector<string>& messages_ids,
  const char* key, const char* group, const char* consumer,
  long min_idle_time, const std::vector<string>& ids,
  size_t idle = 0, long long time_ms = -1,
  int retry_count = -1, bool force = false);
# 372 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_stream.hpp"
 int xack(const char* key, const char* group, const char* id);
# 382 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_stream.hpp"
 int xack(const char* key, const char* group,
  const std::vector<string>& ids);
 int xack(const char* key, const char* group,
  const std::vector<const char*>& ids);
 int xack(const char* key, const char* group,
  const std::list<string>& ids, size_t size);
 int xack(const char* key, const char* group,
  const std::list<const char*>& ids, size_t size);
# 400 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_stream.hpp"
 bool xpending_summary(const char* key, const char* group,
  redis_pending_summary& result);
# 414 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_stream.hpp"
 bool xpending_detail(redis_pending_detail& result,
  const char* key, const char* group,
  const char* start_id = "-", const char* end_id = "+",
  size_t count = 1, const char* consumer = 
# 417 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_stream.hpp" 3 4
                                          __null
# 417 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_stream.hpp"
                                              );
# 426 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_stream.hpp"
 bool xgroup_help(std::vector<string>& result);
# 439 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_stream.hpp"
 bool xgroup_create(const char* key, const char* group,
  const char* id = "$", bool mkstream = true);
# 452 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_stream.hpp"
 int xgroup_destroy(const char* key, const char* group);
 bool xgroup_setid(const char* key, const char* group,
  const char* id = "$");
# 465 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_stream.hpp"
 int xgroup_delconsumer(const char* key, const char* group,
  const char* consumer);
# 475 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_stream.hpp"
 bool xinfo_help(std::vector<string>& result);
# 485 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_stream.hpp"
 bool xinfo_consumers(const char* key, const char* group,
  std::map<string, redis_xinfo_consumer>& result);







 bool xinfo_groups(const char* key,
  std::map<string, redis_xinfo_group>& result);
# 505 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis_stream.hpp"
 bool xinfo_stream(const char* key, redis_stream_info& result);



private:
 void build(const char* cmd, const char* key, const char* id,
  const std::map<string, string>& fields);
 void build(const char* cmd, const char* key, const char* id,
  const std::vector<string>& names,
  const std::vector<string>& values);
 void build(const char* cmd, const char* key, const char* id,
  const std::vector<const char*>& names,
  const std::vector<const char*>& values);
 void build(const char* cmd, const char* key, const char* id,
  const char* names[], const size_t names_len[],
  const char* values[], const size_t values_len[], size_t argc);
 void build(const std::map<string, string>& streams, size_t i,
  size_t count, ssize_t block, bool noack = false);
 void xread_build(const std::map<string, string>& streams,
  size_t count, ssize_t block);
 void xreadgroup_build(const char* group, const char* consumer,
  const std::map<string, string>& streams,
  size_t count, ssize_t block, bool noack);
 bool get_results(redis_stream_messages& messages);
 bool get_messages(const redis_result& rr, redis_stream_messages& messages);
 bool get_one_message(const redis_result& rr, redis_stream_message& message);
 bool range(redis_stream_messages& messages, const char* cmd,
       const char* key, const char* start, const char* end, size_t count);

 bool get_one_consumer(const redis_result& rr, redis_xinfo_consumer& consumer);
 bool get_one_group(const redis_result& rr, redis_xinfo_group& group);
 bool get_pending_consumer(const redis_result& rr,
  redis_pending_consumer& consumer);
 bool get_pending_message(const redis_result& rr,
  redis_pending_message& message);

 void xclaim_build(const char* key, const char* group,
  const char* consumer, long min_idle_time,
  const std::vector<string>& ids, size_t idle, long long time_ms,
  int retry_count, bool force, bool justid);

};

}
# 215 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis.hpp" 1
       
# 21 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis.hpp"
namespace acl
{







class redis
: public redis_connection
, public redis_hash
, public redis_hyperloglog
, public redis_key
, public redis_list
, public redis_pubsub
, public redis_script
, public redis_server
, public redis_set
, public redis_string
, public redis_transaction
, public redis_zset
, public redis_cluster
, public redis_geo
, public redis_stream
{
public:






 redis(redis_client* conn = 
# 54 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis.hpp" 3 4
                           __null
# 54 "/workspace/acl/lib_acl_cpp/include/acl_cpp/redis/redis.hpp"
                               );







 redis(redis_client_cluster* cluster);







 redis(redis_client_pipeline* pipeline);

 __attribute__((__deprecated__))
 redis(redis_client_cluster* cluster, size_t max_conns);

 ~redis(void) {}
};

}
# 216 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/disque/disque.hpp" 1
       
# 10 "/workspace/acl/lib_acl_cpp/include/acl_cpp/disque/disque.hpp"
namespace acl
{

typedef class redis_client disque_client;
typedef class redis_client_pool disque_client_pool;
typedef class redis_client_cluster disque_client_cluster;
class disque_cond;
class disque_node;
class disque_job;




class disque : virtual public redis_command
{
public:



 disque();




 disque(redis_client* conn);




 disque(redis_client_cluster* cluster);

 __attribute__((__deprecated__))
 disque(redis_client_cluster* cluster, size_t max_conns);

 virtual ~disque();
# 71 "/workspace/acl/lib_acl_cpp/include/acl_cpp/disque/disque.hpp"
 const char* addjob(const char* name, const char* job,
  int timeout, const std::map<string, int>* args = 
# 72 "/workspace/acl/lib_acl_cpp/include/acl_cpp/disque/disque.hpp" 3 4
                                                  __null
# 72 "/workspace/acl/lib_acl_cpp/include/acl_cpp/disque/disque.hpp"
                                                      );
 const char* addjob(const char* name, const string& job,
  int timeout, const std::map<string, int>* args = 
# 74 "/workspace/acl/lib_acl_cpp/include/acl_cpp/disque/disque.hpp" 3 4
                                                  __null
# 74 "/workspace/acl/lib_acl_cpp/include/acl_cpp/disque/disque.hpp"
                                                      );
 const char* addjob(const char* name, const void* job, size_t job_len,
  int timeout, const std::map<string, int>* args = 
# 76 "/workspace/acl/lib_acl_cpp/include/acl_cpp/disque/disque.hpp" 3 4
                                                  __null
# 76 "/workspace/acl/lib_acl_cpp/include/acl_cpp/disque/disque.hpp"
                                                      );
# 93 "/workspace/acl/lib_acl_cpp/include/acl_cpp/disque/disque.hpp"
 const char* addjob(const char* name, const char* job,
  int timeout, const disque_cond* cond);
 const char* addjob(const char* name, const string& job,
  int timeout, const disque_cond* cond);
 const char* addjob(const char* name, const void* job, size_t job_len,
  int timeout, const disque_cond* cond);
# 114 "/workspace/acl/lib_acl_cpp/include/acl_cpp/disque/disque.hpp"
 const std::vector<disque_job*>* getjob(const std::vector<string>& names,
  size_t timeout, size_t count);
 const std::vector<disque_job*>* getjob(const char* name,
  size_t timeout, size_t count);
# 133 "/workspace/acl/lib_acl_cpp/include/acl_cpp/disque/disque.hpp"
 int ackjob(const std::vector<string>& job_ids);
# 148 "/workspace/acl/lib_acl_cpp/include/acl_cpp/disque/disque.hpp"
 int fastack(const std::vector<string>& job_ids);
# 163 "/workspace/acl/lib_acl_cpp/include/acl_cpp/disque/disque.hpp"
 const std::vector<disque_job*>* qpeek(const char* name, int count);
# 173 "/workspace/acl/lib_acl_cpp/include/acl_cpp/disque/disque.hpp"
 int qlen(const char* name);
# 184 "/workspace/acl/lib_acl_cpp/include/acl_cpp/disque/disque.hpp"
 const disque_job* show(const char* job_id);
# 195 "/workspace/acl/lib_acl_cpp/include/acl_cpp/disque/disque.hpp"
 int enqueue(const std::vector<string>& job_ids);
# 206 "/workspace/acl/lib_acl_cpp/include/acl_cpp/disque/disque.hpp"
 int dequeue(const std::vector<string>& job_ids);
# 219 "/workspace/acl/lib_acl_cpp/include/acl_cpp/disque/disque.hpp"
 int deljob(const std::vector<string>& job_ids);
# 229 "/workspace/acl/lib_acl_cpp/include/acl_cpp/disque/disque.hpp"
 bool info(std::map<string, string>& out);
# 238 "/workspace/acl/lib_acl_cpp/include/acl_cpp/disque/disque.hpp"
 const std::vector<disque_node*>* hello();

private:
 int jobs_bat(const std::vector<string>& job_ids, const char* cmd);

private:
 disque_job* job_;
 std::vector<disque_job*> jobs_;

 const std::vector<disque_job*>* get_jobs(const char* name);
 void free_jobs();

private:
 int version_;
 string myid_;
 std::vector<disque_node*> nodes_;

 disque_node* create_node(const redis_result* rr);
 void free_nodes();
};

}
# 218 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/disque/disque_cond.hpp" 1
       





namespace acl
{




class disque_cond : public noncopyable
{
public:
 disque_cond();
 ~disque_cond();

 int get_replicate() const
 {
  return replicate_;
 }

 int get_delay() const
 {
  return delay_;
 }

 int get_retry() const
 {
  return retry_;
 }

 int get_ttl() const
 {
  return ttl_;
 }

 int get_maxlen() const
 {
  return maxlen_;
 }

 bool is_async() const
 {
  return async_;
 }

 disque_cond& set_replicate(int n);
 disque_cond& set_delay(int n);
 disque_cond& set_retry(int n);
 disque_cond& set_ttl(int n);
 disque_cond& set_maxlen(int n);
 disque_cond& set_async(bool on);

private:
 int replicate_;
 int delay_;
 int retry_;
 int ttl_;
 int maxlen_;
 bool async_;
};

}
# 219 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/disque/disque_job.hpp" 1
       







namespace acl
{

class redis_result;




class disque_job : public noncopyable
{
public:
 disque_job();
 ~disque_job();






 const char* get_id() const
 {
  return id_.c_str();
 }






 const char* get_queue() const
 {
  return queue_.c_str();
 }






 const string& get_body() const
 {
  return body_;
 }

 void set_id(const char* id);
 void set_queue(const char* name);
 void set_body(const char* job, size_t len);



 bool init(const redis_result& rr);

 const char* get_state() const
 {
  return state_.c_str();
 }

 int get_repl() const
 {
  return repl_;
 }

 int get_ttl() const
 {
  return ttl_;
 }

 long long int get_ctime() const
 {
  return ctime_;
 }

 int get_delay() const
 {
  return delay_;
 }

 int get_retry() const
 {
  return retry_;
 }

 const std::vector<string>& get_nodes_delivered() const
 {
  return nodes_delivered_;
 }

 const std::vector<string>& get_nodes_confirmed() const
 {
  return nodes_confirmed_;
 }

 int get_next_requeue_within() const
 {
  return next_requeue_within_;
 }

 int get_next_awake_within() const
 {
  return next_awake_within_;
 }

private:
 string id_;
 string queue_;
 string state_;
 int repl_;
 int ttl_;
 long long int ctime_;
 int delay_;
 int retry_;
 std::vector<string> nodes_delivered_;
 std::vector<string> nodes_confirmed_;
 int next_requeue_within_;
 int next_awake_within_;
 string body_;

 void set_nodes_delivered(const redis_result& rr);
 void set_nodes_confirmed(const redis_result& rr);
 void set_nodes(const redis_result& rr, std::vector<string>& out);
};

}
# 220 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/disque/disque_node.hpp" 1
       





namespace acl
{

class disque_node
{
public:
 disque_node() : port_(0), priority_(0) {}
 ~disque_node() {}

 void set_id(const char* id)
 {
  id_ = id;
 }

 void set_ip(const char* ip)
 {
  ip_ = ip;
 }

 void set_port(int port)
 {
  port_ = port;
 }

 void set_priority(int n)
 {
  priority_ = n;
 }

 const char* get_id() const
 {
  return id_.c_str();
 }

 const char* get_ip() const
 {
  return ip_.c_str();
 }

 int get_port() const
 {
  return port_;
 }

 int get_priority() const
 {
  return priority_;
 }

private:
 string id_;
 string ip_;
 int port_;
 int priority_;
};

}
# 221 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2

# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_message.hpp" 1
       


# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_header.hpp" 1
       



namespace acl {




typedef enum {
 MQTT_RESERVED_MIN = 0,
 MQTT_CONNECT = 1,
 MQTT_CONNACK = 2,
 MQTT_PUBLISH = 3,
 MQTT_PUBACK = 4,
 MQTT_PUBREC = 5,
 MQTT_PUBREL = 6,
 MQTT_PUBCOMP = 7,
 MQTT_SUBSCRIBE = 8,
 MQTT_SUBACK = 9,
 MQTT_UNSUBSCRIBE = 10,
 MQTT_UNSUBACK = 11,
 MQTT_PINGREQ = 12,
 MQTT_PINGRESP = 13,
 MQTT_DISCONNECT = 14,
 MQTT_RESERVED_MAX = 15,
} mqtt_type_t;

typedef enum {
 MQTT_NONE,
 MQTT_NEED,
 MQTT_MAYBE,
} mqtt_option_t;




typedef enum {
 MQTT_QOS0 = 0x0,
 MQTT_QOS1 = 0x1,
 MQTT_QOS2 = 0x2,
} mqtt_qos_t;

struct mqtt_constrain {
 mqtt_type_t type;
 unsigned char flags:4;
 mqtt_option_t id;
 mqtt_option_t payload;
 const char* desc;
};






const char* mqtt_type_desc(mqtt_type_t type);






const char* mqtt_qos_desc(mqtt_qos_t qos);

class string;




class mqtt_header {
public:




 mqtt_header(mqtt_type_t type);





 mqtt_header(const mqtt_header& header);

 virtual ~mqtt_header(void);

public:






 bool build_header(string& out);
# 107 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_header.hpp"
 int update(const char* data, int dlen);





 bool finished(void) const {
  return finished_;
 }




 void reset(void);

public:





 mqtt_header& set_type(mqtt_type_t type);






 mqtt_header& set_header_flags(char flags);






 mqtt_header& set_remaing_length(unsigned len);






 mqtt_header& set_qos(mqtt_qos_t qos);






 mqtt_header& set_dup(bool yes);






 mqtt_header& set_remain(bool yes);





 mqtt_type_t get_type(void) const {
  return type_;
 }





 unsigned char get_header_flags(void) const {
  return hflags_;
 }





 unsigned get_remaining_length(void) const {
  return dlen_;
 }





 mqtt_qos_t get_qos(void) const;





 bool is_dup(void) const;





 bool is_remain(void) const;

private:
 unsigned status_;
 bool finished_;

 mqtt_type_t type_;
 unsigned char hflags_:4;
 unsigned dlen_;

 char hbuf_[4];
 unsigned hlen_;

public:



 int update_header_type(const char* data, int dlen);
 int update_header_len(const char* data, int dlen);
};

}
# 5 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_message.hpp" 2

namespace acl {







class mqtt_message {
public:




 mqtt_message(mqtt_type_t type);
# 30 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_message.hpp"
 mqtt_message(const mqtt_header& header);




 virtual ~mqtt_message(void);

public:






 virtual bool to_string(string& out) = 0;
# 59 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_message.hpp"
 virtual int update(const char* data, int dlen) = 0;






 virtual bool finished(void) const {
  return false;
 }






 mqtt_header& get_header(void) {
  return header_;
 }






 const mqtt_header& get_header(void) const {
  return header_;
 }

public:







 static mqtt_message* create_message(const mqtt_header& header);

protected:
 mqtt_header header_;


 void pack_add(unsigned char ch, string& out);


 void pack_add(unsigned short n, string& out);


 void pack_add(const string& s, string& out);


 bool unpack_short(const char* data, size_t len, unsigned short& out);
};

}
# 223 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_ack.hpp" 1
       



namespace acl {




class mqtt_ack : public mqtt_message {
public:




 mqtt_ack(mqtt_type_t type);





 mqtt_ack(const mqtt_header& header);

 virtual ~mqtt_ack(void);





 void set_pkt_id(unsigned short id);





 unsigned short get_pkt_id(void) const {
  return pkt_id_;
 }

protected:

 bool to_string(string& out);


 int update(const char* data, int dlen);


 bool finished(void) const {
  return finished_;
 }

public:

 int update_header_var(const char* data, int dlen);

private:
 unsigned status_;
 bool finished_;
 char hbuf_[2];
 unsigned hlen_;

 unsigned short pkt_id_;
};

}
# 224 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_connect.hpp" 1
       



namespace acl {

typedef enum {
 CONNECT_ACCEPTED = 0x00,
 CONNECT_INVALID_VERSION = 0x01,
 CONNECT_INVALID_CID = 0x02,
 CONNECT_NOT_AVAIL = 0x03,
 CONNECT_LOGIN_FAILED = 0x04,
 CONNECT_NO_AUTHORITY = 0x05,
} mqtt_conn_status_t;




class mqtt_connect : public mqtt_message {
public:




 mqtt_connect(void);





 mqtt_connect(const mqtt_header& header);

 ~mqtt_connect(void);

protected:

 bool to_string(string& out);


 int update(const char* data, int dlen);


 bool finished(void) const {
  return finished_;
 }

public:
 void set_keep_alive(unsigned short keep_alive);
 void set_cid(const char* cid);
 void set_username(const char* name);
 void set_passwd(const char* passwd);
 void set_will_qos(mqtt_qos_t qos);
 void set_will_topic(const char* topic);
 void set_will_msg(const char* msg);
 void clean_session(void);

 unsigned short get_keep_alive(void) const {
  return keep_alive_;
 }

 const char* get_cid(void) const {
  return cid_.empty() ? 
# 62 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_connect.hpp" 3 4
                       __null 
# 62 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_connect.hpp"
                            : cid_.c_str();;
 }

 const char* get_username(void) const {
  return username_.empty() ? 
# 66 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_connect.hpp" 3 4
                            __null 
# 66 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_connect.hpp"
                                 : username_.c_str();
 }

 const char* get_passwd(void) const {
  return passwd_.empty() ? 
# 70 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_connect.hpp" 3 4
                          __null 
# 70 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_connect.hpp"
                               : passwd_.c_str();
 }

 mqtt_qos_t get_will_qos(void) const {
  return will_qos_;
 }

 const char* get_will_topic(void) const {
  return will_topic_.empty() ? 
# 78 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_connect.hpp" 3 4
                              __null 
# 78 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_connect.hpp"
                                   : will_topic_.c_str();
 }

 const char* get_will_msg(void) const {
  return will_msg_.empty() ? 
# 82 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_connect.hpp" 3 4
                            __null 
# 82 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_connect.hpp"
                                 : will_msg_.c_str();
 }

 bool has_session(void) const;

private:
 unsigned status_;
 bool finished_;
 char buff_[10];
 int dlen_;

 mqtt_qos_t will_qos_;
 unsigned char conn_flags_;
 unsigned short keep_alive_;

 string cid_;
 string username_;
 string passwd_;
 string will_topic_;
 string will_msg_;

public:



 int update_header_var(const char* data, int dlen);
 int update_cid_len(const char* data, int dlen);
 int update_cid_val(const char* data, int dlen);
 int update_username_len(const char* data, int dlen);
 int update_username_val(const char* data, int dlen);
 int update_passwd_len(const char* data, int dlen);
 int update_passwd_val(const char* data, int dlen);
 int update_will_topic_len(const char* data, int dlen);
 int update_will_topic_val(const char* data, int dlen);
 int update_will_msg_len(const char* data, int dlen);
 int update_will_msg_val(const char* data, int dlen);
};

}
# 225 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_connack.hpp" 1
       



namespace acl {




enum {
 MQTT_CONNACK_OK = 0x00,
 MQTT_CONNACK_ERR_VER = 0x01,
 MQTT_CONNACK_ERR_CID = 0x02,
 MQTT_CONNACK_ERR_SVR = 0x03,
 MQTT_CONNACK_ERR_AUTH = 0x04,
 MQTT_CONNACK_ERR_DENY = 0x05,
};




class mqtt_connack : public mqtt_message {
public:




 mqtt_connack(void);





 mqtt_connack(const mqtt_header& header);

 ~mqtt_connack(void);






 mqtt_connack& set_session(bool on);






 mqtt_connack& set_connack_code(unsigned char code);





 bool get_session(void) const {
  return session_;
 }





 unsigned char get_connack_code(void) const {
  return connack_code_;
 }

protected:

 bool to_string(string& out);


 int update(const char* data, int dlen);


 bool finished(void) const {
  return finished_;
 }

public:






 int update_header_var(const char* data, int dlen);

private:
 unsigned status_;
 bool finished_;
 char buff_[2];
 int dlen_;

 bool session_;
 unsigned char conn_flags_;
 unsigned char connack_code_;
};

}
# 226 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_disconnect.hpp" 1
       



namespace acl {




class mqtt_disconnect : public mqtt_message {
public:




 mqtt_disconnect(void);





 mqtt_disconnect(const mqtt_header& header);

 ~mqtt_disconnect(void);

protected:

 bool to_string(string& out);


 int update(const char*, int dlen) {
  return dlen;
 }


 bool finished(void) const {
  return true;
 }
};

}
# 227 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_pingreq.hpp" 1
       



namespace acl {




class mqtt_pingreq : public mqtt_message {
public:




 mqtt_pingreq(void);





 mqtt_pingreq(const mqtt_header& header);

 ~mqtt_pingreq(void);

protected:

 bool to_string(string& out);


 int update(const char*, int dlen) {
  return dlen;
 }


 bool finished(void) const {
  return true;
 }
};

}
# 228 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_pingresp.hpp" 1
       



namespace acl {




class mqtt_pingresp : public mqtt_message {
public:




 mqtt_pingresp(void);





 mqtt_pingresp(const mqtt_header& header);

 ~mqtt_pingresp(void);

protected:

 bool to_string(string& out);


 int update(const char*, int dlen) {
  return dlen;
 }

 bool finished(void) const {
  return true;
 }
};

}
# 229 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_publish.hpp" 1
       



namespace acl {




class mqtt_publish : public mqtt_message {
public:




 mqtt_publish(void);





 mqtt_publish(const mqtt_header& header);

 ~mqtt_publish(void);






 mqtt_publish& set_topic(const char* topic);






 mqtt_publish& set_pkt_id(unsigned short id);







 mqtt_publish& set_payload(unsigned len, const char* data = 
# 46 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_publish.hpp" 3 4
                                                           __null
# 46 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_publish.hpp"
                                                               );





 const char* get_topic(void) const {
  return topic_.c_str();
 }





 unsigned short get_pkt_id(void) const {
  return pkt_id_;
 }





 unsigned get_payload_len(void) const {
  return payload_len_;
 }





 const string& get_payload(void) const {
  return payload_;
 }

protected:

 bool to_string(string& out);


 int update(const char* data, int dlen);


 bool finished(void) const {
  return finished_;
 }

public:



 int update_header_var(const char* data, int dlen);
 int update_topic_len(const char* data, int dlen);
 int update_topic_val(const char* data, int dlen);
 int update_pktid(const char* data, int dlen);
 int update_payload(const char* data, int dlen);

private:
 unsigned status_;
 bool finished_;
 char buff_[2];
 int dlen_;
 unsigned hlen_var_;

 string topic_;
 unsigned short pkt_id_;
 unsigned payload_len_;
 string payload_;
};

}
# 230 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_puback.hpp" 1
       



namespace acl {




class mqtt_puback : public mqtt_ack {
public:




 mqtt_puback(void);





 mqtt_puback(const mqtt_header& header);

 ~mqtt_puback(void);
};

}
# 231 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_pubrec.hpp" 1
       



namespace acl {




class mqtt_pubrec : public mqtt_ack {
public:




 mqtt_pubrec(void);





 mqtt_pubrec(const mqtt_header& header);

 ~mqtt_pubrec(void);
};

}
# 232 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_pubrel.hpp" 1
       



namespace acl {




class mqtt_pubrel : public mqtt_ack {
public:




 mqtt_pubrel(void);





 mqtt_pubrel(const mqtt_header& header);

 ~mqtt_pubrel(void);
};

}
# 233 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_pubcomp.hpp" 1
       



namespace acl {




class mqtt_pubcomp : public mqtt_ack {
public:




 mqtt_pubcomp(void);





 mqtt_pubcomp(const mqtt_header& header);

 ~mqtt_pubcomp(void);
};

}
# 234 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_subscribe.hpp" 1
       



namespace acl {




class mqtt_subscribe : public mqtt_message {
public:




 mqtt_subscribe(void);





 mqtt_subscribe(const mqtt_header& header);

 ~mqtt_subscribe(void);






 mqtt_subscribe& set_pkt_id(unsigned short id);







 mqtt_subscribe& add_topic(const char* topic, mqtt_qos_t qos);





 unsigned short get_pkt_id(void) const {
  return pkt_id_;
 }





 const std::vector<string>& get_topics(void) const {
  return topics_;
 }





 const std::vector<mqtt_qos_t>& get_qoses(void) const {
  return qoses_;
 }

protected:

 bool to_string(string& out);


 int update(const char* data, int dlen);


 bool finished(void) const {
  return finished_;
 }

public:


 int update_header_var(const char* data, int dlen);
 int update_topic_len(const char* data, int dlen);
 int update_topic_val(const char* data, int dlen);
 int update_topic_qos(const char* data, int dlen);

private:
 unsigned status_;
 bool finished_;
 char buff_[2];
 unsigned dlen_;

 unsigned short pkt_id_;
 std::vector<string> topics_;
 std::vector<mqtt_qos_t> qoses_;

 unsigned body_len_;
 unsigned nread_;

 string topic_;
};

}
# 235 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_suback.hpp" 1
       




namespace acl {




class mqtt_suback : public mqtt_message {
public:




 mqtt_suback(void);





 mqtt_suback(const mqtt_header& header);

 ~mqtt_suback(void);






 mqtt_suback& set_pkt_id(unsigned short id);






 mqtt_suback& add_topic_qos(mqtt_qos_t qos);






 mqtt_suback& add_topic_qos(const std::vector<mqtt_qos_t>& qoses);





 unsigned short get_pkt_id(void) const {
  return pkt_id_;
 }





 const std::vector<mqtt_qos_t>& get_qoses(void) const {
  return qoses_;
 }

protected:

 bool to_string(string& out);


 int update(const char* data, int dlen);


 bool finished(void) const {
  return finished_;
 }

public:


 int update_header_var(const char* data, int dlen);
 int update_topic_qos(const char* data, int dlen);

private:
 unsigned status_;
 bool finished_;
 char buff_[2];
 unsigned dlen_;

 unsigned short pkt_id_;
 std::vector<mqtt_qos_t> qoses_;

 unsigned body_len_;
 unsigned nread_;
};

}
# 236 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_unsubscribe.hpp" 1
       



namespace acl {




class mqtt_unsubscribe : public mqtt_message {
public:




 mqtt_unsubscribe(void);





 mqtt_unsubscribe(const mqtt_header& header);

 ~mqtt_unsubscribe(void);






 mqtt_unsubscribe& set_pkt_id(unsigned short id);






 mqtt_unsubscribe& add_topic(const char* topic);





 const std::vector<string>& get_topics(void) const {
  return topics_;
 }

protected:

 bool to_string(string& out);


 int update(const char* data, int dlen);


 bool finished(void) const {
  return finished_;
 }

public:


 int update_header_var(const char* data, int dlen);
 int update_topic_len(const char* data, int dlen);
 int update_topic_val(const char* data, int dlen);

private:
 unsigned status_;
 bool finished_;
 char buff_[2];
 unsigned dlen_;

 unsigned short pkt_id_;
 std::vector<string> topics_;

 unsigned body_len_;
 unsigned nread_;

 string topic_;
};

}
# 237 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_unsuback.hpp" 1
       



namespace acl {




class mqtt_unsuback : public mqtt_ack {
public:




 mqtt_unsuback(void);





 mqtt_unsuback(const mqtt_header& header);

 ~mqtt_unsuback(void);
};

}
# 238 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_client.hpp" 1
       





namespace acl {

class mqtt_header;
class mqtt_message;




class mqtt_client : public connect_client {
public:







 mqtt_client(const char* addr, int conn_timeout = 10, int rw_timeout = 10);






 mqtt_client(acl::socket_stream& conn);

 ~mqtt_client(void);
# 42 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_client.hpp"
 bool send(mqtt_message& message);






 mqtt_message* get_message(void);

public:





 bool read_header(mqtt_header& header);







 bool read_message(const mqtt_header& header, mqtt_message& body);





 socket_stream* sock_stream(void) const {
  return conn_;
 }

protected:

 bool open(void);

private:
 string addr_;
 int conn_timeout_;
 int rw_timeout_;

 socket_stream* conn_;
 socket_stream* conn_internal_;
};

}
# 239 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 1 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_aclient.hpp" 1
       




namespace acl {

class sslbase_conf;
class mqtt_header;
class mqtt_message;




class mqtt_aclient : public aio_open_callback {
public:





 mqtt_aclient(aio_handle& handle, sslbase_conf* ssl_conf = 
# 22 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_aclient.hpp" 3 4
                                                          __null
# 22 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_aclient.hpp"
                                                              );





 virtual void destroy(void) = 0;





 sslbase_conf* get_ssl_conf(void) const {
  return ssl_conf_;
 }
# 48 "/workspace/acl/lib_acl_cpp/include/acl_cpp/mqtt/mqtt_aclient.hpp"
 bool open(const char* addr, int conn_timeout, int rw_timeout);







 bool open(aio_socket_stream* conn);




 void close(void);





 aio_socket_stream* get_conn(void) const {
  return conn_;
 }






 void set_host(const char* host);

public:






 bool send(mqtt_message& message);

public:





 bool get_ns_addr(string& out) const;






 bool get_server_addr(string& out) const;

protected:

 virtual ~mqtt_aclient(void);


 bool open_callback(void) { return true; }


 bool timeout_callback(void);


 void close_callback(void);


 bool read_wakeup(void);


 bool read_callback(char* data, int len);

protected:

 bool message_await(void);


 virtual void on_ns_failed(void) {}


 virtual void on_connect_timeout(void) {}


 virtual void on_connect_failed(void) {}


 virtual bool on_read_timeout(void) { return false; }


 virtual void on_disconnect(void) {};


 virtual bool on_open(void) = 0;


 virtual bool on_header(const mqtt_header&) { return true; };


 virtual bool on_body(const mqtt_message&) = 0;

private:
 aio_handle& handle_;
 sslbase_conf* ssl_conf_;
 aio_socket_stream* conn_;
 int rw_timeout_;
 string host_;
 struct sockaddr_storage ns_addr_;
 struct sockaddr_storage serv_addr_;
 mqtt_header* header_;
 mqtt_message* body_;



 bool open_done(void);


 bool handle_ssl_handshake(void);


 int handle_data(char* data, int len);


 bool handle_connect(const ACL_ASTREAM_CTX* ctx);


 static int connect_callback(const ACL_ASTREAM_CTX* ctx);
};

}
# 240 "/workspace/acl/lib_acl_cpp/include/acl_cpp/lib_acl.hpp" 2
# 62 "/workspace/acl/lib_acl_cpp/src/acl_stdafx.hpp" 2
# 2 "/workspace/acl/lib_acl_cpp/src/stream/ostream.cpp" 2




namespace acl {

int ostream::write(const void* data, size_t size, bool loop ,
 bool buffed )
{
 int ret;
 if (loop) {
  if (buffed) {
   ret = acl_vstream_buffed_writen(stream_, data, size);
  } else {
   ret = acl_vstream_writen(stream_, data, size);
  }
 } else {
  ret = acl_vstream_write(stream_, data, (int) size);
 }

 if (ret == (-1)) {
  eof_ = true;
 }
 return ret;
}

int ostream::sendto(const void* data, size_t len, const char* dest_addr, int flags)
{
 ACL_SOCKADDR sa;
 size_t addrlen = acl_sane_pton(dest_addr, (struct sockaddr*) &sa);
 if (addrlen == 0) {
  acl::log::error4("/workspace/acl/lib_acl_cpp/src/stream/ostream.cpp", 33, __FUNCTION__, "invalid dest_addr=%s", dest_addr);
  return -1;
 }

 return sendto(data, len, (const struct sockaddr*) &sa, (int) addrlen, flags);
}

int ostream::sendto(const void* data, size_t len,
 const struct sockaddr* dest_addr, int addrlen, int flags)
{
 
# 43 "/workspace/acl/lib_acl_cpp/src/stream/ostream.cpp" 3 4
(static_cast <bool> (
# 43 "/workspace/acl/lib_acl_cpp/src/stream/ostream.cpp"
stream_
# 43 "/workspace/acl/lib_acl_cpp/src/stream/ostream.cpp" 3 4
) ? void (0) : __assert_fail (
# 43 "/workspace/acl/lib_acl_cpp/src/stream/ostream.cpp"
"stream_"
# 43 "/workspace/acl/lib_acl_cpp/src/stream/ostream.cpp" 3 4
, "/workspace/acl/lib_acl_cpp/src/stream/ostream.cpp", 43, __extension__ __PRETTY_FUNCTION__))
# 43 "/workspace/acl/lib_acl_cpp/src/stream/ostream.cpp"
                   ;
 int fd = ((stream_)->fd.sock);




 return (int) ::sendto(fd, data, len, flags, dest_addr, (socklen_t) addrlen);

}

bool ostream::fflush(void)
{
 if (acl_vstream_fflush(stream_) == (-1)) {
  return false;
 } else {
  return true;
 }
}

int ostream::writev(const struct iovec *v, int count, bool loop )
{
 int ret;
 if (loop) {
  ret = acl_vstream_writevn(stream_, v, count);
 } else {
  ret = acl_vstream_writev(stream_, v, count);
 }

 if (ret == (-1)) {
  eof_ = true;
 }
 return ret;
}

int ostream::vformat(const char* fmt, va_list ap)
{
 int ret = acl_vstream_vfprintf(stream_, fmt, ap);
 if (ret == (-1)) {
  eof_ = true;
 }
 return ret;
}

int ostream::write(long long int n)
{
 return write(&n, sizeof(n), true);
}

int ostream::write(int n)
{
 return write(&n, sizeof(n), true);
}

int ostream::write(short n)
{
 return write(&n, sizeof(n), true);
}

int ostream::write(char ch)
{
 return write(&ch, sizeof(ch), false);
}

int ostream::write(const acl::string& s, bool loop )
{
 return write(s.c_str(), s.length(), loop);
}

int ostream::format(const char* fmt, ...)
{
 va_list ap;

 
# 115 "/workspace/acl/lib_acl_cpp/src/stream/ostream.cpp" 3 4
__builtin_va_start(
# 115 "/workspace/acl/lib_acl_cpp/src/stream/ostream.cpp"
ap
# 115 "/workspace/acl/lib_acl_cpp/src/stream/ostream.cpp" 3 4
,
# 115 "/workspace/acl/lib_acl_cpp/src/stream/ostream.cpp"
fmt
# 115 "/workspace/acl/lib_acl_cpp/src/stream/ostream.cpp" 3 4
)
# 115 "/workspace/acl/lib_acl_cpp/src/stream/ostream.cpp"
                 ;
 int ret = vformat(fmt, ap);
 
# 117 "/workspace/acl/lib_acl_cpp/src/stream/ostream.cpp" 3 4
__builtin_va_end(
# 117 "/workspace/acl/lib_acl_cpp/src/stream/ostream.cpp"
ap
# 117 "/workspace/acl/lib_acl_cpp/src/stream/ostream.cpp" 3 4
)
# 117 "/workspace/acl/lib_acl_cpp/src/stream/ostream.cpp"
          ;
 return ret;
}

int ostream::puts(const char* s)
{
 return format("%s\r\n", s);
}

ostream& ostream::operator<<(const acl::string& s)
{
 (void) write(s.c_str(), s.length(), true);
 return *this;
}

ostream& ostream::operator<<(const char* s)
{
 (void) write(s, strlen(s), true);
 return *this;
}

ostream& ostream::operator<<(long long int n)
{
 (void) write(&n, sizeof(n), true);
 return *this;
}

ostream& ostream::operator<<(int n)
{
 (void) write(&n, sizeof(n), true);
 return *this;
}

ostream& ostream::operator<<(short n)
{
 (void) write(&n, sizeof(n), true);
 return *this;
}

ostream& ostream::operator<<(char ch)
{
 (void) write(&ch, sizeof(ch), false);
 return *this;
}

int ostream::push_pop(const char* in, size_t len,
 string* out __attribute__ ((__unused__)), size_t max __attribute__ ((__unused__)))
{
 if (in == 
# 165 "/workspace/acl/lib_acl_cpp/src/stream/ostream.cpp" 3 4
          __null 
# 165 "/workspace/acl/lib_acl_cpp/src/stream/ostream.cpp"
               || len == 0) {
  return 0;
 }
 if ((size_t) write(in, len) != len) {
  return -1;
 }
 if (out == 
# 171 "/workspace/acl/lib_acl_cpp/src/stream/ostream.cpp" 3 4
           __null
# 171 "/workspace/acl/lib_acl_cpp/src/stream/ostream.cpp"
               ) {
  return 0;
 }
 if (max > 0 && len > max) {
  len = max;
 }
 out->append(in, len);
 return (int) len;
}

}
