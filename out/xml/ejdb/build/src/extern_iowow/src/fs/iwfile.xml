<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iowow/src/fs/iwfile.c"><comment type="block" format="doxygen">/**************************************************************************************************
 * IOWOW library
 *
 * MIT License
 *
 * Copyright (c) 2012-2022 Softmotions Ltd &lt;info@softmotions.com&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *************************************************************************************************/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwcfg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log/iwlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform/iwp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwfile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>O_CLOEXEC</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_CLOEXEC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libiberty/libiberty.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strndup</name></cpp:macro> <cpp:value>xstrndup</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>IWFS_FILE_IMPL</name> <block>{
  <decl_stmt><decl><type><name>HANDLE</name></type> <name>fh</name></decl>;</decl_stmt>               <comment type="block" format="doxygen">/**&lt; File handle. */</comment>
  <decl_stmt><decl><type><name>iwfs_openstatus</name></type> <name>ostatus</name></decl>;</decl_stmt> <comment type="block" format="doxygen">/**&lt; File open status. */</comment>
  <decl_stmt><decl><type><name>IWFS_FILE_OPTS</name></type>  <name>opts</name></decl>;</decl_stmt>    <comment type="block" format="doxygen">/**&lt; File open options. */</comment>
}</block></struct></type> <name>IWF</name>;</typedef>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_iwfs_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_FILE</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>siz</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>IWF</name> <modifier>*</modifier></type><name>impl</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>impl</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_STATE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>impl</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>omode</name></name> <operator>&amp;</operator> <name>IWFS_OWRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_READONLY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwp_pwrite</name><argument_list>(<argument><expr><name><name>impl</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>siz</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name> <operator>&amp;&amp;</operator> <name><name>impl</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>dlsnr</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>impl</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>dlsnr</name><operator>-&gt;</operator><name>onwrite</name></name><argument_list>(<argument><expr><name><name>impl</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>dlsnr</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>siz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_iwfs_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_FILE</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>siz</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>IWF</name> <modifier>*</modifier></type><name>impl</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>impl</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_STATE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>iwp_pread</name><argument_list>(<argument><expr><name><name>impl</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>siz</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_iwfs_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_FILE</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name> <operator>||</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWF</name> <modifier>*</modifier></type><name>impl</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FILE_OPTS</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><operator>&amp;</operator><name><name>impl</name><operator>-&gt;</operator><name>opts</name></name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
  <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>path</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>opts</name><operator>-&gt;</operator><name>omode</name></name> <operator>&amp;</operator> <name>IWFS_OUNLINK</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>lock_mode</name></name> <operator>!=</operator> <name>IWP_NOLOCK</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>iwp_unlock</name><argument_list>(<argument><expr><name><name>impl</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>iwp_closefh</name><argument_list>(<argument><expr><name><name>impl</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>opts</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_iwfs_sync</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_FILE</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>iwfs_sync_flags</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_STATE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>IWF</name> <modifier>*</modifier></type><name>impl</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>IWFS_FDATASYNC</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__APPLE__</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>impl</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>, <argument><expr><name>F_FULLFSYNC</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if_stmt><if>if <condition>(<expr><call><name>iwp_fdatasync</name><argument_list>(<argument><expr><name><name>impl</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>iwp_fsync</name><argument_list>(<argument><expr><name><name>impl</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>impl</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>dlsnr</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>impl</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>dlsnr</name><operator>-&gt;</operator><name>onsynced</name></name><argument_list>(<argument><expr><name><name>impl</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>dlsnr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_iwfs_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_FILE</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>IWFS_FILE_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>IWF</name> <modifier>*</modifier></type><name>impl</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>is_open</name></name> <operator>=</operator> <operator>(</operator><name>impl</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>is_open</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>ostatus</name></name> <operator>=</operator> <name><name>impl</name><operator>-&gt;</operator><name>ostatus</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>opts</name></name> <operator>=</operator> <name><name>impl</name><operator>-&gt;</operator><name>opts</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>fh</name></name> <operator>=</operator> <name><name>impl</name><operator>-&gt;</operator><name>fh</name></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_iwfs_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_FILE</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>siz</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>noff</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>IWF</name> <modifier>*</modifier></type><name>impl</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>impl</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_STATE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>impl</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>omode</name></name> <operator>&amp;</operator> <name>IWFS_OWRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_READONLY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwp_copy_bytes</name><argument_list>(<argument><expr><name><name>impl</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>siz</name></expr></argument>, <argument><expr><name>noff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name> <operator>&amp;&amp;</operator> <name><name>impl</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>dlsnr</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>impl</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>dlsnr</name><operator>-&gt;</operator><name>oncopy</name></name><argument_list>(<argument><expr><name><name>impl</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>dlsnr</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>siz</name></expr></argument>, <argument><expr><name>noff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwfs_file_open</name><parameter_list>(<parameter><decl><type><name>IWFS_FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWFS_FILE_OPTS</name> <modifier>*</modifier></type><name>_opts</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name> <operator>||</operator> <operator>!</operator><name>_opts</name> <operator>||</operator> <operator>!</operator><name><name>_opts</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>IWFS_FILE_OPTS</name> <modifier>*</modifier></type><name>opts</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWF</name> <modifier>*</modifier></type><name>impl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWP_FILE_STAT</name></type> <name>fstat</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwfs_omode</name></type> <name>omode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwfs_file_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>write</name></name> <operator>=</operator> <name>_iwfs_write</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>read</name></name> <operator>=</operator> <name>_iwfs_read</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>close</name></name> <operator>=</operator> <name>_iwfs_close</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sync</name></name> <operator>=</operator> <name>_iwfs_sync</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>_iwfs_state</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>copy</name></name> <operator>=</operator> <name>_iwfs_copy</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>impl</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>impl</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IWF</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>impl</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>impl</name><operator>-&gt;</operator><name>opts</name></name> <operator>=</operator> <operator>*</operator><name>_opts</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>opts</name> <operator>=</operator> <operator>&amp;</operator><name><name>impl</name><operator>-&gt;</operator><name>opts</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>dlsnr</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>IWDLSNR</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name><name>opts</name><operator>-&gt;</operator><name>dlsnr</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(  <expr><operator>!</operator><name><name>l</name><operator>-&gt;</operator><name>onopen</name></name> <operator>||</operator> <operator>!</operator><name><name>l</name><operator>-&gt;</operator><name>onclosing</name></name> <operator>||</operator> <operator>!</operator><name><name>l</name><operator>-&gt;</operator><name>oncopy</name></name> <operator>||</operator> <operator>!</operator><name><name>l</name><operator>-&gt;</operator><name>onresize</name></name>
       <operator>||</operator> <operator>!</operator><name><name>l</name><operator>-&gt;</operator><name>onset</name></name> <operator>||</operator> <operator>!</operator><name><name>l</name><operator>-&gt;</operator><name>onsynced</name></name> <operator>||</operator> <operator>!</operator><name><name>l</name><operator>-&gt;</operator><name>onwrite</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_ecode_error2</name><argument_list>(<argument><expr><name>IW_ERROR_INVALID_ARGS</name></expr></argument>, <argument><expr><literal type="string">"Invalid 'opts-&gt;dlsnr' specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>omode</name></name> <operator>&amp;</operator> <name>IWFS_OTMP</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>iwp_allocate_tmpfile_path</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name><name>_opts</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>MAXPATHLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>lock_mode</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>lock_mode</name></name> <operator>=</operator> <name>IWFS_DEFAULT_LOCKMODE</name></expr>;</expr_stmt> <comment type="line">// -V1048</comment>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>omode</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>omode</name></name> <operator>=</operator> <name>IWFS_DEFAULT_OMODE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>filemode</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>filemode</name></name> <operator>=</operator> <name>IWFS_DEFAULT_FILEMODE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>omode</name></name> <operator>|=</operator> <name>IWFS_OREAD</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>omode</name></name> <operator>&amp;</operator> <name>IWFS_OTMP</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>omode</name></name> <operator>|=</operator> <name>IWFS_OTRUNC</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>lock_mode</name></name> <operator>|=</operator> <name>IWP_WLOCK</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>omode</name></name> <operator>&amp;</operator> <name>IWFS_OTRUNC</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>omode</name></name> <operator>|=</operator> <name>IWFS_OWRITE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>omode</name></name> <operator>|=</operator> <name>IWFS_OCREATE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>omode</name></name> <operator>&amp;</operator> <name>IWFS_OUNLINK</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>omode</name></name> <operator>|=</operator> <name>IWFS_OWRITE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>opts</name><operator>-&gt;</operator><name>omode</name></name> <operator>&amp;</operator> <name>IWFS_OCREATE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>opts</name><operator>-&gt;</operator><name>omode</name></name> <operator>&amp;</operator> <name>IWFS_OTRUNC</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>omode</name></name> <operator>|=</operator> <name>IWFS_OWRITE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>omode</name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>omode</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>opts</name><operator>-&gt;</operator><name>omode</name></name> <operator>&amp;</operator> <name>IWFS_OWRITE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>opts</name><operator>-&gt;</operator><name>lock_mode</name></name> <operator>&amp;</operator> <name>IWP_WLOCK</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>lock_mode</name></name> <operator>&amp;=</operator> <operator>~</operator><name>IWP_WLOCK</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_fstat</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fstat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>opts</name><operator>-&gt;</operator><name>omode</name></name> <operator>&amp;</operator> <name>IWFS_OTRUNC</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>impl</name><operator>-&gt;</operator><name>ostatus</name></name> <operator>=</operator> <name>IWFS_OPEN_EXISTING</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>impl</name><operator>-&gt;</operator><name>ostatus</name></name> <operator>=</operator> <name>IWFS_OPEN_NEW</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>mode</name> <operator>=</operator> <name>O_RDONLY</name> <operator>|</operator> <name>O_CLOEXEC</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>omode</name> <operator>&amp;</operator> <name>IWFS_OWRITE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>mode</name> <operator>=</operator> <name>O_RDWR</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>omode</name> <operator>&amp;</operator> <name>IWFS_OCREATE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>O_CREAT</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>omode</name> <operator>&amp;</operator> <name>IWFS_OTRUNC</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>O_TRUNC</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
  <expr_stmt><expr><name><name>impl</name><operator>-&gt;</operator><name>fh</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>filemode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>INVALIDHANDLE</name><argument_list>(<argument><expr><name><name>impl</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_NOT_EXISTS</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>DWORD</name></type> <name>womode</name> <init>= <expr><name>GENERIC_READ</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DWORD</name></type> <name>wcmode</name> <init>= <expr><name>OPEN_EXISTING</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>omode</name> <operator>&amp;</operator> <name>IWFS_OWRITE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>womode</name> <operator>|=</operator> <name>GENERIC_WRITE</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>omode</name> <operator>&amp;</operator> <name>IWFS_OTRUNC</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>wcmode</name> <operator>=</operator> <name>CREATE_ALWAYS</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>omode</name> <operator>&amp;</operator> <name>IWFS_OCREATE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>wcmode</name> <operator>=</operator> <name>OPEN_ALWAYS</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>DWORD</name></type> <name>smode</name> <init>= <expr><name>FILE_SHARE_READ</name> <operator>|</operator> <name>FILE_SHARE_WRITE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DWORD</name></type> <name>flags</name> <init>= <expr><name>FILE_ATTRIBUTE_NORMAL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>omode</name></name> <operator>&amp;</operator> <name>IWFS_OUNLINK</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>smode</name> <operator>|=</operator> <name>FILE_SHARE_DELETE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FILE_FLAG_DELETE_ON_CLOSE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>impl</name><operator>-&gt;</operator><name>fh</name></name> <operator>=</operator> <call><name>CreateFile</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>womode</name></expr></argument>, <argument><expr><name>smode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>wcmode</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>INVALIDHANDLE</name><argument_list>(<argument><expr><name><name>impl</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>err</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ERROR_FILE_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_NOT_EXISTS</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_werror</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>lock_mode</name></name> <operator>!=</operator> <name>IWP_NOLOCK</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_flock</name><argument_list>(<argument><expr><name><name>impl</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>lock_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>impl</name><operator>-&gt;</operator><name>ostatus</name></name> <operator>=</operator> <name>IWFS_OPEN_FAIL</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>opts</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>impl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwfs_file_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>iw_init</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
