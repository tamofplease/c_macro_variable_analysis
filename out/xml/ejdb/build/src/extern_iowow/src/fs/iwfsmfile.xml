<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iowow/src/fs/iwfsmfile.c"><comment type="block" format="doxygen">/**************************************************************************************************
 * IOWOW library
 *
 * MIT License
 *
 * Copyright (c) 2012-2022 Softmotions Ltd &lt;info@softmotions.com&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *************************************************************************************************/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwfsmfile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwavl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwbits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwcfg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<function_decl><type><name>void</name></type> <name>iwfs_fsmdbg_dump_fsm_tree</name><parameter_list>(<parameter><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * Free-space blocks-tree key.
 */</comment>
<struct>struct <name>bkey</name> <block>{
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>off</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>bkey_node</name> <block>{
  <decl_stmt><decl><type><name><name>struct</name> <name>bkey</name></name></type>       <name>key</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwavl_node</name></name></type> <name>node</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BKEY</name><parameter_list>(<parameter><type><name>nptr_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>iwavl_entry(nptr_, struct bkey_node, node)-&gt;key</cpp:value></cpp:define>

<comment type="block" format="doxygen">/** Additional options for `_fsm_set_bit_status_lw` routine */</comment>
<typedef>typedef <type><name>uint8_t</name></type> <name>fsm_bmopts_t</name>;</typedef>

<comment type="block" format="doxygen">/** No options. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSM_BM_NONE</name></cpp:macro> <cpp:value>((fsm_bmopts_t) 0x00U)</cpp:value></cpp:define>

<comment type="block" format="doxygen">/** Do not modify bitmap. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSM_BM_DRY_RUN</name></cpp:macro> <cpp:value>((fsm_bmopts_t) 0x01U)</cpp:value></cpp:define>

<comment type="block" format="doxygen">/** Perform strict checking of bitmap consistency */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSM_BM_STRICT</name></cpp:macro> <cpp:value>((fsm_bmopts_t) 0x02U)</cpp:value></cpp:define>

<comment type="block">/* Maximum size of block: 1Mb */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSM_MAX_BLOCK_POW</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<comment type="block">/* Maximum number of records used in allocation statistics */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSM_MAX_STATS_COUNT</name></cpp:macro> <cpp:value>0x0000ffff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSM_ENSURE_OPEN</name><parameter_list>(<parameter><type><name>impl_</name></type></parameter>)</parameter_list></cpp:macro>                                                                          \
  <cpp:value>if (!(impl_) || !(impl_)-&gt;f) return IW_ERROR_INVALID_STATE;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSM_ENSURE_OPEN2</name><parameter_list>(<parameter><type><name>f_</name></type></parameter>)</parameter_list></cpp:macro>                                                                             \
  <cpp:value>if (!(f_) || !(f_)-&gt;impl) return IW_ERROR_INVALID_STATE;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSMBK_OFFSET</name><parameter_list>(<parameter><type><name>b_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((b_)-&gt;off)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSMBK_LENGTH</name><parameter_list>(<parameter><type><name>b_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((b_)-&gt;len)</cpp:value></cpp:define>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////////////////////////</comment>

<struct>struct <name>fsm</name> <block>{
  <decl_stmt><decl><type><name>IWFS_EXT</name></type>  <name>pool</name></decl>;</decl_stmt>                 <comment type="block" format="doxygen">/**&lt; Underlying rwl file. */</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type>  <name>bmlen</name></decl>;</decl_stmt>                <comment type="block" format="doxygen">/**&lt; Free-space bitmap block length in bytes. */</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type>  <name>bmoff</name></decl>;</decl_stmt>                <comment type="block" format="doxygen">/**&lt; Free-space bitmap block offset in bytes. */</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type>  <name>lfbkoff</name></decl>;</decl_stmt>              <comment type="block" format="doxygen">/**&lt; Offset in blocks of free block chunk with the largest offset. */</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type>  <name>lfbklen</name></decl>;</decl_stmt>              <comment type="block" format="doxygen">/**&lt; Length in blocks of free block chunk with the largest offset. */</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type>  <name>crzsum</name></decl>;</decl_stmt>               <comment type="block" format="doxygen">/**&lt; Cumulative sum all allocated blocks */</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type>  <name>crzvar</name></decl>;</decl_stmt>               <comment type="block" format="doxygen">/**&lt; Record sizes standard variance (deviation^2 * N) */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type>  <name>hdrlen</name></decl>;</decl_stmt>               <comment type="block" format="doxygen">/**&lt; Length of custom file header */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type>  <name>crznum</name></decl>;</decl_stmt>               <comment type="block" format="doxygen">/**&lt; Number of all allocated continuous areas acquired by `allocate` */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type>  <name>fsmnum</name></decl>;</decl_stmt>               <comment type="block" format="doxygen">/**&lt; Number of records in fsm */</comment>
  <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>                    <comment type="block" format="doxygen">/**&lt; Self reference. */</comment>
  <decl_stmt><decl><type><name>IWDLSNR</name>  <modifier>*</modifier></type><name>dlsnr</name></decl>;</decl_stmt>                <comment type="block" format="doxygen">/**&lt; Data events listener */</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwavl_node</name></name> <modifier>*</modifier></type><name>root</name></decl>;</decl_stmt>        <comment type="block" format="doxygen">/**&lt; Free-space tree */</comment>
  <decl_stmt><decl><type><name>pthread_rwlock_t</name>  <modifier>*</modifier></type><name>ctlrwlk</name></decl>;</decl_stmt>     <comment type="block" format="doxygen">/**&lt; Methods RW lock */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>aunit</name></decl>;</decl_stmt>                   <comment type="block" format="doxygen">/**&lt; System allocation unit size.
                                       - Page size on *NIX
                                       - Minimal allocation unit for WIN32 */</comment>
  <decl_stmt><decl><type><name>iwfs_fsm_openflags</name></type> <name>oflags</name></decl>;</decl_stmt>      <comment type="block" format="doxygen">/**&lt; Operation mode flags. */</comment>
  <decl_stmt><decl><type><name>iwfs_omode</name></type> <name>omode</name></decl>;</decl_stmt>               <comment type="block" format="doxygen">/**&lt; Open mode. */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type>    <name>bpow</name></decl>;</decl_stmt>                <comment type="block" format="doxygen">/**&lt; Block size power for 2 */</comment>
  <decl_stmt><decl><type><name>bool</name></type>       <name>mmap_all</name></decl>;</decl_stmt>            <comment type="block" format="doxygen">/**&lt; Mmap all file data */</comment>
  <decl_stmt><decl><type><name>iwfs_ext_mmap_opts_t</name></type> <name>mmap_opts</name></decl>;</decl_stmt> <comment type="block" format="doxygen">/**&lt; Defaul mmap options used in `add_mmap` */</comment>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_ensure_size_lw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////////////////////////</comment>

<function><type><name>IW_INLINE</name> <name>int</name></type> <name>_fsm_cmp_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bkey</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bkey</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>(</operator><operator>(</operator><call><name>FSMBK_LENGTH</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>FSMBK_LENGTH</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <operator>(</operator><call><name>FSMBK_LENGTH</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>FSMBK_LENGTH</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><operator>(</operator><operator>(</operator><call><name>FSMBK_OFFSET</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>FSMBK_OFFSET</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <operator>(</operator><call><name>FSMBK_OFFSET</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>FSMBK_OFFSET</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>int</name></type> <name>_fsm_cmp_node</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwavl_node</name></name> <modifier>*</modifier></type><name>an</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwavl_node</name></name> <modifier>*</modifier></type><name>bn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bkey</name></name> <modifier>*</modifier></type><name>ak</name> <init>= <expr><operator>&amp;</operator><call><name>BKEY</name><argument_list>(<argument><expr><name>an</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bkey</name></name> <modifier>*</modifier></type><name>bk</name> <init>= <expr><operator>&amp;</operator><call><name>BKEY</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>_fsm_cmp_key</name><argument_list>(<argument><expr><name>ak</name></expr></argument>, <argument><expr><name>bk</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>int</name></type> <name>_fsm_cmp_ctx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwavl_node</name></name> <modifier>*</modifier></type><name>bn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bkey</name></name> <modifier>*</modifier></type><name>ak</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bkey</name></name> <modifier>*</modifier></type><name>bk</name> <init>= <expr><operator>&amp;</operator><call><name>BKEY</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>_fsm_cmp_key</name><argument_list>(<argument><expr><name>ak</name></expr></argument>, <argument><expr><name>bk</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>iwrc</name></type> <name>_fsm_ctrl_wlock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><ternary><condition><expr><name><name>fsm</name><operator>-&gt;</operator><name>ctlrwlk</name></name></expr> ?</condition><then> <expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>ctlrwlk</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><ternary><condition><expr><name>rci</name></expr> ?</condition><then> <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>iwrc</name></type> <name>_fsm_ctrl_rlock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><ternary><condition><expr><name><name>fsm</name><operator>-&gt;</operator><name>ctlrwlk</name></name></expr> ?</condition><then> <expr><call><name>pthread_rwlock_rdlock</name><argument_list>(<argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>ctlrwlk</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><ternary><condition><expr><name>rci</name></expr> ?</condition><then> <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>iwrc</name></type> <name>_fsm_ctrl_unlock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><ternary><condition><expr><name><name>fsm</name><operator>-&gt;</operator><name>ctlrwlk</name></name></expr> ?</condition><then> <expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>ctlrwlk</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><ternary><condition><expr><name>rci</name></expr> ?</condition><then> <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>iwrc</name></type> <name>_fsm_bmptr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>bmptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>bmptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <comment type="line">// get mmap pointer without locked</comment>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name><name>fsm</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>probe_mmap</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>fsm</name><operator>-&gt;</operator><name>mmap_all</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>fsm</name><operator>-&gt;</operator><name>mmap_all</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name> <operator>+</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>IWFS_ERROR_NOT_MMAPED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>bmptr</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>mm</name> <operator>+</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>IWFS_ERROR_NOT_MMAPED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>bmptr</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator> <name>mm</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>WUR</name> <name>iwrc</name></type> <name>_fsm_init_bkey_node</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bkey_node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>offset_blk</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>len_blk</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>offset_blk</name> <operator>&gt;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>len_blk</name> <operator>&gt;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_OVERFLOW</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>off</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name>offset_blk</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>len</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name>len_blk</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>iwrc</name></type> <name>_fsm_init_bkey</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bkey</name></name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>offset_blk</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>len_blk</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>offset_blk</name> <operator>&gt;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>len_blk</name> <operator>&gt;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_OVERFLOW</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name>offset_blk</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name>len_blk</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>_fsm_del_fbk2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iwavl_node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>iwavl_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><operator>--</operator><name><name>fsm</name><operator>-&gt;</operator><name>fsmnum</name></name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>bkey_node</name></name> <modifier>*</modifier></type><name>bk</name> <init>= <expr><call><name>iwavl_entry</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr>struct <name>bkey_node</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>bk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>off</name></name> <operator>==</operator> <name><name>fsm</name><operator>-&gt;</operator><name>lfbkoff</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>lfbkoff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>lfbklen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>_fsm_del_fbk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>offset_blk</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>length_blk</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>bkey</name></name></type> <name>bkey</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_fsm_init_bkey</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bkey</name></expr></argument>, <argument><expr><name>offset_blk</name></expr></argument>, <argument><expr><name>length_blk</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>iwavl_node</name></name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>iwavl_lookup</name><argument_list>(<argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bkey</name></expr></argument>, <argument><expr><name>_fsm_cmp_ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_fsm_del_fbk2</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>iwrc</name></type> <name>_fsm_put_fbk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>offset_blk</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>length_blk</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>bkey_node</name></name> <modifier>*</modifier></type><name>bk</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCB</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name>bk</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>bk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_fsm_init_bkey_node</name><argument_list>(<argument><expr><name>bk</name></expr></argument>, <argument><expr><name>offset_blk</name></expr></argument>, <argument><expr><name>length_blk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>iwavl_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bk</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>_fsm_cmp_node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>++</operator><name><name>fsm</name><operator>-&gt;</operator><name>fsmnum</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>offset_blk</name> <operator>+</operator> <name>length_blk</name> <operator>&gt;=</operator> <name><name>fsm</name><operator>-&gt;</operator><name>lfbkoff</name></name> <operator>+</operator> <name><name>fsm</name><operator>-&gt;</operator><name>lfbklen</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>lfbkoff</name></name> <operator>=</operator> <name>offset_blk</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>lfbklen</name></name> <operator>=</operator> <name>length_blk</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>IW_INLINE</name> <specifier>const</specifier> struct <name>iwavl_node</name><operator>*</operator> <macro><name>_fsm_find_matching_fblock_lw</name><argument_list>(
  <argument>struct fsm     *fsm</argument>,
  <argument>uint64_t        offset_blk</argument>,
  <argument>uint64_t        length_blk</argument>,
  <argument>iwfs_fsm_aflags opts</argument>
  )</argument_list></macro> <block>{
  struct <expr><name>bkey</name> <name>bk</name></expr>;
  <expr><specifier>const</specifier> struct <name>iwavl_node</name> <operator>*</operator><name>ub</name></expr>, <expr><operator>*</operator><name>lb</name></expr>;
  <if_stmt><if>if <condition>(<expr><call><name>_fsm_init_bkey</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bk</name></expr></argument>, <argument><expr><name>offset_blk</name></expr></argument>, <argument><expr><name>length_blk</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  <expr_stmt/></block_content></block></if></if_stmt>}</block>

  <call><name>iwavl_lookup_bounds</name><argument_list>(<argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bk</name></expr></argument>, <argument><expr><name>_fsm_cmp_ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>bkey</name></name> <modifier>*</modifier></type><name>uk</name> <init>= <expr><ternary><condition><expr><name>ub</name></expr> ?</condition><then> <expr><operator>&amp;</operator><call><name>BKEY</name><argument_list>(<argument><expr><name>ub</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>bkey</name></name> <modifier>*</modifier></type><name>lk</name> <init>= <expr><ternary><condition><expr><name>lb</name></expr> ?</condition><then> <expr><operator>&amp;</operator><call><name>BKEY</name><argument_list>(<argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>lklength</name> <init>= <expr><ternary><condition><expr><name>lk</name></expr> ?</condition><then> <expr><call><name>FSMBK_LENGTH</name><argument_list>(<argument><expr><name>lk</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>uklength</name> <init>= <expr><ternary><condition><expr><name>uk</name></expr> ?</condition><then> <expr><call><name>FSMBK_LENGTH</name><argument_list>(<argument><expr><name>uk</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>lklength</name> <operator>==</operator> <name>length_blk</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>lb</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>uklength</name> <operator>==</operator> <name>length_blk</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>ub</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>lklength</name> <operator>&gt;</operator> <name>length_blk</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>lb</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>uklength</name> <operator>&gt;</operator> <name>length_blk</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>ub</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}

<comment type="block" format="doxygen">/**
 * @brief Set the allocation bits in the fsm bitmap.
 *
 * @param fms
 * @param offset_bits Bit offset in the bitmap.
 * @param length_bits Number of bits to set
 * @param bit_status  If `1` bits will be set to `1` otherwise `0`
 * @param opts        Operation options
 */</comment>
static <function><type><name>iwrc</name></type> <name>_fsm_set_bit_status_lw</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>fsm</name></name>        <modifier>*</modifier></type><name>fsm</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type>     <name>offset_bits</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type>     <name>length_bits_</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>int</name></type>          <name>bit_status</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>fsm_bmopts_t</name></type> <name>opts</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>register</specifier> <name>int64_t</name></type> <name>length_bits</name> <init>= <expr><name>length_bits_</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>register</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"/><name>set_mask</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>bend</name> <init>= <expr><name>offset_bits</name> <operator>+</operator> <name>length_bits</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>set_bits</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>bend</name> <operator>&lt;</operator> <name>offset_bits</name></expr>)</condition> <block>{<block_content> <comment type="line">// overflow</comment>
    <return>return <expr><name>IW_ERROR_OUT_OF_BOUNDS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>&gt;=</operator> <name>offset_bits</name> <operator>+</operator> <name>length_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>&lt;</operator> <name>offset_bits</name> <operator>+</operator> <name>length_bits</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IWFS_ERROR_FSM_SEGMENTATION</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>fsm</name><operator>-&gt;</operator><name>mmap_all</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>probe_mmap</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name> <operator>+</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>IWFS_ERROR_NOT_MMAPED</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>mm</name> <operator>+=</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>probe_mmap</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>IWFS_ERROR_NOT_MMAPED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator> <name>mm</name><operator>)</operator> <operator>+</operator> <name>offset_bits</name> <operator>/</operator> <literal type="number">64</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>set_bits</name> <operator>=</operator> <literal type="number">64</literal> <operator>-</operator> <operator>(</operator><name>offset_bits</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt> <comment type="line">// NOLINT</comment>
  <expr_stmt><expr><name>set_mask</name> <operator>=</operator> <operator>(</operator><operator>~</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>offset_bits</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>IW_BIGENDIAN</name></cpp:ifdef>
  <while>while <condition>(<expr><name>length_bits</name> <operator>-</operator> <name>set_bits</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>pv</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pv</name> <operator>=</operator> <call><name>IW_ITOHLL</name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>bit_status</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opts</name> <operator>&amp;</operator> <name>FSM_BM_STRICT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>pv</name> <operator>&amp;</operator> <name>set_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWFS_ERROR_FSM_SEGMENTATION</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opts</name> <operator>&amp;</operator> <name>FSM_BM_DRY_RUN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pv</name> <operator>|=</operator> <name>set_mask</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opts</name> <operator>&amp;</operator> <name>FSM_BM_STRICT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>pv</name> <operator>&amp;</operator> <name>set_mask</name><operator>)</operator> <operator>!=</operator> <name>set_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWFS_ERROR_FSM_SEGMENTATION</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opts</name> <operator>&amp;</operator> <name>FSM_BM_DRY_RUN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pv</name> <operator>&amp;=</operator> <operator>~</operator><name>set_mask</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>length_bits</name> <operator>-=</operator> <name>set_bits</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>set_bits</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>set_mask</name> <operator>=</operator> <operator>~</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>length_bits</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>pv</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pv</name> <operator>=</operator> <call><name>IW_ITOHLL</name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>set_mask</name> <operator>&amp;=</operator> <ternary><condition><expr><operator>(</operator><name>bend</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>bend</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><operator>~</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>bit_status</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opts</name> <operator>&amp;</operator> <name>FSM_BM_STRICT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>pv</name> <operator>&amp;</operator> <name>set_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWFS_ERROR_FSM_SEGMENTATION</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opts</name> <operator>&amp;</operator> <name>FSM_BM_DRY_RUN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pv</name> <operator>|=</operator> <name>set_mask</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opts</name> <operator>&amp;</operator> <name>FSM_BM_STRICT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>pv</name> <operator>&amp;</operator> <name>set_mask</name><operator>)</operator> <operator>!=</operator> <name>set_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWFS_ERROR_FSM_SEGMENTATION</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opts</name> <operator>&amp;</operator> <name>FSM_BM_DRY_RUN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pv</name> <operator>&amp;=</operator> <operator>~</operator><name>set_mask</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <while>while <condition>(<expr><name>length_bits</name> <operator>-</operator> <name>set_bits</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>bit_status</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opts</name> <operator>&amp;</operator> <name>FSM_BM_STRICT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>&amp;</operator> <name>set_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWFS_ERROR_FSM_SEGMENTATION</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opts</name> <operator>&amp;</operator> <name>FSM_BM_DRY_RUN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>p</name> <operator>|=</operator> <name>set_mask</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opts</name> <operator>&amp;</operator> <name>FSM_BM_STRICT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>&amp;</operator> <name>set_mask</name><operator>)</operator> <operator>!=</operator> <name>set_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWFS_ERROR_FSM_SEGMENTATION</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opts</name> <operator>&amp;</operator> <name>FSM_BM_DRY_RUN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>p</name> <operator>&amp;=</operator> <operator>~</operator><name>set_mask</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>length_bits</name> <operator>-=</operator> <name>set_bits</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>set_bits</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>set_mask</name> <operator>=</operator> <operator>~</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>length_bits</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>set_mask</name> <operator>&amp;=</operator> <ternary><condition><expr><operator>(</operator><name>bend</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>bend</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><operator>~</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>bit_status</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opts</name> <operator>&amp;</operator> <name>FSM_BM_STRICT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>&amp;</operator> <name>set_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWFS_ERROR_FSM_SEGMENTATION</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opts</name> <operator>&amp;</operator> <name>FSM_BM_DRY_RUN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>p</name> <operator>|=</operator> <name>set_mask</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opts</name> <operator>&amp;</operator> <name>FSM_BM_STRICT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>&amp;</operator> <name>set_mask</name><operator>)</operator> <operator>!=</operator> <name>set_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWFS_ERROR_FSM_SEGMENTATION</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opts</name> <operator>&amp;</operator> <name>FSM_BM_DRY_RUN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>p</name> <operator>&amp;=</operator> <operator>~</operator><name>set_mask</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name> <operator>&amp;&amp;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>dlsnr</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>so</name> <init>= <expr><name>offset_bits</name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>lb</name> <init>= <expr><name>length_bits_</name> <operator>+</operator> <name>offset_bits</name> <operator>%</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>dl</name> <init>= <expr><name>lb</name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>lb</name> <operator>%</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>++</operator><name>dl</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>dlsnr</name><operator>-&gt;</operator><name>onwrite</name></name><argument_list>(<argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>dlsnr</name></name></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name> <operator>+</operator> <name>so</name></expr></argument>, <argument><expr><name>mm</name> <operator>+</operator> <name>so</name></expr></argument>, <argument><expr><name>dl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 *  @brief Allocate a continuous segment of blocks with page aligned offset.
 *
 *  @param fsm `struct fsm`
 *  @param length_blk Desired segment length in blocks.
 *  @param [in,out] offset_blk Allocated segment offset in blocks will be stored into.
                    It also specified the desired segment offset to provide
 *                  allocation locality.
 *  @param [out] olength_blk Assigned segment length in blocks.
 *  @param  max_offset_blk Maximal offset of allocated block.
 *  @param opts Allocation options.
 */</comment>
<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_blk_allocate_aligned_lw</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>fsm</name></name>           <modifier>*</modifier></type><name>fsm</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type>        <name>length_blk</name></decl></parameter>,
  <parameter><decl><type><name>uint64_t</name>             <modifier>*</modifier></type><name>offset_blk</name></decl></parameter>,
  <parameter><decl><type><name>uint64_t</name>             <modifier>*</modifier></type><name>olength_blk</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type>        <name>max_offset_blk</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>iwfs_fsm_aflags</name></type> <name>opts</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>fsm_bmopts_t</name></type> <name>bopts</name> <init>= <expr><name>FSM_BM_NONE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>aunit_blk</name> <init>= <expr><operator>(</operator><name><name>fsm</name><operator>-&gt;</operator><name>aunit</name></name> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fsm</name> <operator>&amp;&amp;</operator> <name>length_blk</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>fsm</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>IWFSM_STRICT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>bopts</name> <operator>|=</operator> <name>FSM_BM_STRICT</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>olength_blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>offset_blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="block">/* First attempt */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwavl_node</name></name> <modifier>*</modifier></type><name>nn</name> <init>= <expr><call><name>_fsm_find_matching_fblock_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>length_blk</name> <operator>+</operator> <name>aunit_blk</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nn</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>nn</name> <operator>=</operator> <call><name>_fsm_find_matching_fblock_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>length_blk</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nn</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>IWFS_ERROR_NO_FREE_SPACE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>bkey</name></name> <modifier>*</modifier></type><name>nk</name> <init>= <expr><operator>&amp;</operator><call><name>BKEY</name><argument_list>(<argument><expr><name>nn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>akoff</name> <init>= <expr><call><name>FSMBK_OFFSET</name><argument_list>(<argument><expr><name>nk</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>aklen</name> <init>= <expr><call><name>FSMBK_LENGTH</name><argument_list>(<argument><expr><name>nk</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>noff</name> <init>= <expr><call><name>IW_ROUNDUP</name><argument_list>(<argument><expr><name>akoff</name></expr></argument>, <argument><expr><name>aunit_blk</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>noff</name> <operator>&lt;=</operator> <name>max_offset_blk</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>noff</name> <operator>&lt;</operator> <name>aklen</name> <operator>+</operator> <name>akoff</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>aklen</name> <operator>-</operator> <operator>(</operator><name>noff</name> <operator>-</operator> <name>akoff</name><operator>)</operator> <operator>&gt;=</operator> <name>length_blk</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_fsm_del_fbk</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>akoff</name></expr></argument>, <argument><expr><name>aklen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>aklen</name> <operator>=</operator> <name>aklen</name> <operator>-</operator> <operator>(</operator><name>noff</name> <operator>-</operator> <name>akoff</name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>noff</name> <operator>&gt;</operator> <name>akoff</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_fsm_put_fbk</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>akoff</name></expr></argument>, <argument><expr><name>noff</name> <operator>-</operator> <name>akoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>aklen</name> <operator>&gt;</operator> <name>length_blk</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_fsm_put_fbk</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>noff</name> <operator>+</operator> <name>length_blk</name></expr></argument>, <argument><expr><name>aklen</name> <operator>-</operator> <name>length_blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>offset_blk</name> <operator>=</operator> <name>noff</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>olength_blk</name> <operator>=</operator> <name>length_blk</name></expr>;</expr_stmt>
    <return>return <expr><call><name>_fsm_set_bit_status_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>noff</name></expr></argument>, <argument><expr><name>length_blk</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bopts</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>aklen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>akoff</name> <operator>=</operator> <name>UINT64_MAX</name></expr>;</expr_stmt>

  <comment type="line">// full scan</comment>
  <for>for <control>(<init><decl><type><name><name>struct</name> <name>iwavl_node</name></name> <modifier>*</modifier><name>n</name></type> <init>= <expr><call><name>iwavl_first_in_order</name><argument_list>(<argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>n</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <call><name>iwavl_next_in_order</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>bkey</name></name> <modifier>*</modifier></type><name>k</name> <init>= <expr><operator>&amp;</operator><call><name>BKEY</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>koff</name> <init>= <expr><call><name>FSMBK_OFFSET</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>klen</name> <init>= <expr><call><name>FSMBK_LENGTH</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>koff</name> <operator>&lt;</operator> <name>akoff</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>noff</name> <operator>=</operator> <call><name>IW_ROUNDUP</name><argument_list>(<argument><expr><name>koff</name></expr></argument>, <argument><expr><name>aunit_blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>noff</name> <operator>&lt;=</operator> <name>max_offset_blk</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>noff</name> <operator>&lt;</operator> <name>klen</name> <operator>+</operator> <name>koff</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>klen</name> <operator>-</operator> <operator>(</operator><name>noff</name> <operator>-</operator> <name>koff</name><operator>)</operator> <operator>&gt;=</operator> <name>length_blk</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>akoff</name> <operator>=</operator> <name>koff</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>aklen</name> <operator>=</operator> <name>klen</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>akoff</name> <operator>==</operator> <name>UINT64_MAX</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IWFS_ERROR_NO_FREE_SPACE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>_fsm_del_fbk</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>akoff</name></expr></argument>, <argument><expr><name>aklen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>noff</name> <operator>=</operator> <call><name>IW_ROUNDUP</name><argument_list>(<argument><expr><name>akoff</name></expr></argument>, <argument><expr><name>aunit_blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>aklen</name> <operator>=</operator> <name>aklen</name> <operator>-</operator> <operator>(</operator><name>noff</name> <operator>-</operator> <name>akoff</name><operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>noff</name> <operator>&gt;</operator> <name>akoff</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_fsm_put_fbk</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>akoff</name></expr></argument>, <argument><expr><name>noff</name> <operator>-</operator> <name>akoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>aklen</name> <operator>&gt;</operator> <name>length_blk</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_fsm_put_fbk</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>noff</name> <operator>+</operator> <name>length_blk</name></expr></argument>, <argument><expr><name>aklen</name> <operator>-</operator> <name>length_blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>offset_blk</name> <operator>=</operator> <name>noff</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>olength_blk</name> <operator>=</operator> <name>length_blk</name></expr>;</expr_stmt>
  <return>return <expr><call><name>_fsm_set_bit_status_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>noff</name></expr></argument>, <argument><expr><name>length_blk</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bopts</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_fsm_node_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwavl_node</name></name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name><name>struct</name> <name>iwavl_node</name></name> <modifier>*</modifier><name>n</name></type> <init>= <expr><call><name>iwavl_first_in_postorder</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</init>
       <condition><expr><name>n</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>p</name> <operator>=</operator> <call><name>iwavl_get_parent</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>,</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition>
       <incr><expr><name>n</name> <operator>=</operator> <call><name>iwavl_next_in_postorder</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>bkey_node</name></name> <modifier>*</modifier></type><name>bk</name> <init>= <expr><call><name>iwavl_entry</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr>struct <name>bkey_node</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief Load existing bitmap area into free-space search tree.
 * @param fsm  `struct fsm`
 * @param bm    Bitmap area start ptr
 * @param len   Bitmap area length in bytes.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_fsm_load_fsm_lw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bm</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>cbnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fbklength</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fbkoffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>_fsm_node_destroy</name><argument_list>(<argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>fsmnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>uint64_t</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>b</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><specifier>register</specifier> <name>uint8_t</name></type> <name>bb</name> <init>= <expr><name><name>bm</name><index>[<expr><name>b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>bb</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>fbklength</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>cbnum</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bb</name> <operator>==</operator> <literal type="number">0xffU</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>fbklength</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>fbkoffset</name> <operator>=</operator> <name>cbnum</name> <operator>-</operator> <name>fbklength</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>_fsm_put_fbk</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>fbkoffset</name></expr></argument>, <argument><expr><name>fbklength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fbklength</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>cbnum</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><operator>++</operator><name>cbnum</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>bb</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>fbklength</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>fbkoffset</name> <operator>=</operator> <name>cbnum</name> <operator>-</operator> <name>fbklength</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>_fsm_put_fbk</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>fbkoffset</name></expr></argument>, <argument><expr><name>fbklength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>fbklength</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><operator>++</operator><name>fbklength</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name>fbklength</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>fbkoffset</name> <operator>=</operator> <name>len</name> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <name>fbklength</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_fsm_put_fbk</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>fbkoffset</name></expr></argument>, <argument><expr><name>fbklength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief Flush a current `iwfsmfile` metadata into the file header.
 * @param fsm
 * @param is_sync If `1` perform mmap sync.
 * @return
 */</comment>
<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_write_meta_lw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>llv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>wlen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>sp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>lv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>hdr</name><index>[<expr><name>IWFSM_CUSTOM_HDR_DATA_OFFSET</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

  <comment type="block">/*
      [FSM_CTL_MAGICK u32][block pow u8]
      [bmoffset u64][bmlength u64]
      [u64 crzsum][u32 crznum][u64 crszvar][u256 reserved]
      [custom header size u32][custom header data...]
      [fsm data...]
   */</comment>

  <comment type="block">/* magic */</comment>
  <expr_stmt><expr><name>lv</name> <operator>=</operator> <call><name>IW_HTOIL</name><argument_list>(<argument><expr><name>IWFSM_MAGICK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sp</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <name>IWFSM_CUSTOM_HDR_DATA_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hdr</name> <operator>+</operator> <name>sp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>sp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <comment type="block">/* block pow */</comment>
  <expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"sizeof(fms-&gt;bpow) == 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sp</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <name>IWFSM_CUSTOM_HDR_DATA_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hdr</name> <operator>+</operator> <name>sp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>sp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <comment type="block">/* fsm bitmap block offset */</comment>
  <expr_stmt><expr><name>llv</name> <operator>=</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>llv</name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sp</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <name>IWFSM_CUSTOM_HDR_DATA_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hdr</name> <operator>+</operator> <name>sp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>llv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>sp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <comment type="block">/* fsm bitmap block length */</comment>
  <expr_stmt><expr><name>llv</name> <operator>=</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>llv</name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sp</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <name>IWFSM_CUSTOM_HDR_DATA_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hdr</name> <operator>+</operator> <name>sp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>llv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>sp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <comment type="block">/* Cumulative sum of record sizes acquired by `allocate` */</comment>
  <expr_stmt><expr><name>llv</name> <operator>=</operator> <name><name>fsm</name><operator>-&gt;</operator><name>crzsum</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>llv</name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sp</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <name>IWFSM_CUSTOM_HDR_DATA_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hdr</name> <operator>+</operator> <name>sp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>llv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>sp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <comment type="block">/* Cumulative number of records acquired by `allocated` */</comment>
  <expr_stmt><expr><name>lv</name> <operator>=</operator> <name><name>fsm</name><operator>-&gt;</operator><name>crznum</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>lv</name> <operator>=</operator> <call><name>IW_HTOIL</name><argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sp</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <name>IWFSM_CUSTOM_HDR_DATA_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hdr</name> <operator>+</operator> <name>sp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>sp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <comment type="block">/* Record sizes standard variance (deviation^2 * N) */</comment>
  <expr_stmt><expr><name>llv</name> <operator>=</operator> <name><name>fsm</name><operator>-&gt;</operator><name>crzvar</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>llv</name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sp</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <name>IWFSM_CUSTOM_HDR_DATA_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hdr</name> <operator>+</operator> <name>sp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>llv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>sp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <comment type="block">/* Reserved */</comment>
  <expr_stmt><expr><name>sp</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

  <comment type="block">/* Size of header */</comment>
  <expr_stmt><expr><name>lv</name> <operator>=</operator> <name><name>fsm</name><operator>-&gt;</operator><name>hdrlen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>lv</name> <operator>=</operator> <call><name>IW_HTOIL</name><argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sp</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <name>IWFSM_CUSTOM_HDR_DATA_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hdr</name> <operator>+</operator> <name>sp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>sp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sp</name> <operator>==</operator> <name>IWFSM_CUSTOM_HDR_DATA_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>fsm</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>IWFSM_CUSTOM_HDR_DATA_OFFSET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wlen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief Search for the first next set bit position
 *        starting from the specified offset bit (INCLUDED).
 */</comment>
<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>_fsm_find_next_set_bit</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name>   <modifier>*</modifier></type><name>addr</name></decl></parameter>,
  <parameter><decl><type><specifier>register</specifier> <name>uint64_t</name></type> <name>offset_bit</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type>    <name>max_offset_bit</name></decl></parameter>,
  <parameter><decl><type><name>int</name>              <modifier>*</modifier></type><name>found</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>register</specifier> <name>uint64_t</name></type> <name>bit</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>addr</name> <operator>+</operator> <name>offset_bit</name> <operator>/</operator> <literal type="number">64</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>offset_bit</name> <operator>&gt;=</operator> <name>max_offset_bit</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>bit</name> <operator>=</operator> <name>offset_bit</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>offset_bit</name> <operator>-=</operator> <name>bit</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <name>max_offset_bit</name> <operator>-</operator> <name>offset_bit</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>IW_BIGENDIAN</name></cpp:ifdef>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>pv</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>bit</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pv</name> <operator>=</operator> <call><name>IW_ITOHLL</name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>bit</name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pv</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pv</name> <operator>=</operator> <call><name>iwbits_find_first_sbit64</name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pv</name> <operator>&gt;=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><name>offset_bit</name> <operator>+</operator> <name>pv</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>offset_bit</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><name>size</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><literal type="number">64</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pv</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pv</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><name>offset_bit</name> <operator>+</operator> <call><name>iwbits_find_first_sbit64</name><argument_list>(<argument><expr><call><name>IW_ITOHLL</name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>offset_bit</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>size</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>pv</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pv</name> <operator>=</operator> <call><name>IW_ITOHLL</name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <name>size</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pv</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return <expr><name>offset_bit</name> <operator>+</operator> <call><name>iwbits_find_first_sbit64</name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><specifier>register</specifier> <name>uint64_t</name></type> <name>tmp</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>bit</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>bit</name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>iwbits_find_first_sbit64</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&gt;=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><name>offset_bit</name> <operator>+</operator> <name>tmp</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>offset_bit</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><name>size</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><literal type="number">64</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><name>offset_bit</name> <operator>+</operator> <call><name>iwbits_find_first_sbit64</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>offset_bit</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>size</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <name>size</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return <expr><name>offset_bit</name> <operator>+</operator> <call><name>iwbits_find_first_sbit64</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief Search for the first previous set bit position
 *        starting from the specified offset_bit (EXCLUDED).
 */</comment>
<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>_fsm_find_prev_set_bit</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name>   <modifier>*</modifier></type><name>addr</name></decl></parameter>,
  <parameter><decl><type><specifier>register</specifier> <name>uint64_t</name></type> <name>offset_bit</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type>    <name>min_offset_bit</name></decl></parameter>,
  <parameter><decl><type><name>int</name>              <modifier>*</modifier></type><name>found</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>register</specifier> <name>uint64_t</name></type> <name>tmp</name></decl>, <decl><type ref="prev"/><name>bit</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>min_offset_bit</name> <operator>&gt;=</operator> <name>offset_bit</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <name>offset_bit</name> <operator>-</operator> <name>min_offset_bit</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>bit</name> <operator>=</operator> <name>offset_bit</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <name>addr</name> <operator>+</operator> <name>offset_bit</name> <operator>/</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>IW_BIGENDIAN</name></cpp:ifdef>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>pv</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>bit</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pv</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pv</name> <operator>=</operator> <operator>(</operator><call><name>iwbits_reverse_64</name><argument_list>(<argument><expr><call><name>IW_ITOHLL</name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <name>bit</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pv</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pv</name> <operator>=</operator> <call><name>iwbits_find_first_sbit64</name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pv</name> <operator>&gt;=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>offset_bit</name> <operator>&gt;</operator> <name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><ternary><condition><expr><name>offset_bit</name> <operator>&gt;</operator> <name>pv</name></expr> ?</condition><then> <expr><name>offset_bit</name> <operator>-</operator> <name>pv</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>offset_bit</name> <operator>-=</operator> <name>bit</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>size</name> <operator>-=</operator> <name>bit</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><name>size</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><literal type="number">64</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><operator>--</operator><name>p</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pv</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>iwbits_find_first_sbit64</name><argument_list>(<argument><expr><call><name>iwbits_reverse_64</name><argument_list>(<argument><expr><call><name>IW_ITOHLL</name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>offset_bit</name> <operator>&gt;</operator> <name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><ternary><condition><expr><name>offset_bit</name> <operator>&gt;</operator> <name>tmp</name></expr> ?</condition><then> <expr><name>offset_bit</name> <operator>-</operator> <name>tmp</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>offset_bit</name> <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>pv</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>--</operator><name>p</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>iwbits_reverse_64</name><argument_list>(<argument><expr><call><name>IW_ITOHLL</name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>size</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if <condition>(<expr><name>bit</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><call><name>iwbits_reverse_64</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <name>bit</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>iwbits_find_first_sbit64</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&gt;=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>offset_bit</name> <operator>&gt;</operator> <name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><ternary><condition><expr><name>offset_bit</name> <operator>&gt;</operator> <name>tmp</name></expr> ?</condition><then> <expr><name>offset_bit</name> <operator>-</operator> <name>tmp</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>offset_bit</name> <operator>-=</operator> <name>bit</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>size</name> <operator>-=</operator> <name>bit</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><name>size</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><literal type="number">64</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><operator>--</operator><name>p</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>iwbits_find_first_sbit64</name><argument_list>(<argument><expr><call><name>iwbits_reverse_64</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>offset_bit</name> <operator>&gt;</operator> <name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><ternary><condition><expr><name>offset_bit</name> <operator>&gt;</operator> <name>tmp</name></expr> ?</condition><then> <expr><name>offset_bit</name> <operator>-</operator> <name>tmp</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>offset_bit</name> <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>iwbits_reverse_64</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>--</operator><name>p</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>size</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>tmp2</name></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>iwbits_find_first_sbit64</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>offset_bit</name> <operator>&gt;</operator> <name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><name>offset_bit</name> <operator>&gt;</operator> <name>tmp2</name></expr> ?</condition><then> <expr><name>offset_bit</name> <operator>-</operator> <name>tmp2</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief Return a previously allocated blocks
 *        back into the free-blocks pool.
 *
 * @param fms `struct fsm`
 * @param offset_blk Starting block number of the specified range.
 * @param length_blk Range size in blocks.
 */</comment>
<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_blk_deallocate_lw</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>fsm</name></name>    <modifier>*</modifier></type><name>fsm</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>offset_blk</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>length_blk</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>bmptr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>right</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>hasleft</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>hasright</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>key_offset</name> <init>= <expr><name>offset_blk</name></expr></init></decl>, <decl><type ref="prev"/><name>key_length</name> <init>= <expr><name>length_blk</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>rm_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>rm_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>lfbkoff</name> <init>= <expr><name><name>fsm</name><operator>-&gt;</operator><name>lfbkoff</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>end_offset_blk</name> <init>= <expr><name>offset_blk</name> <operator>+</operator> <name>length_blk</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>fsm_bmopts_t</name></type> <name>bopts</name> <init>= <expr><name>FSM_BM_NONE</name></expr></init></decl>;</decl_stmt>


  <if_stmt><if>if <condition>(<expr><name><name>fsm</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>IWFSM_STRICT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>bopts</name> <operator>|=</operator> <name>FSM_BM_STRICT</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_fsm_set_bit_status_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>offset_blk</name></expr></argument>, <argument><expr><name>length_blk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_fsm_bmptr</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bmptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Merge with neighborhoods */</comment>
  <expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>_fsm_find_prev_set_bit</name><argument_list>(<argument><expr><name>bmptr</name></expr></argument>, <argument><expr><name>offset_blk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hasleft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>lfbkoff</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>lfbkoff</name> <operator>==</operator> <name>end_offset_blk</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>right</name> <operator>=</operator> <name>lfbkoff</name> <operator>+</operator> <name><name>fsm</name><operator>-&gt;</operator><name>lfbklen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>hasright</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>maxoff</name> <init>= <expr><ternary><condition><expr><name>lfbkoff</name></expr> ?</condition><then> <expr><name>lfbkoff</name></expr> </then><else>: <expr><operator>(</operator><name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>right</name> <operator>=</operator> <call><name>_fsm_find_next_set_bit</name><argument_list>(<argument><expr><name>bmptr</name></expr></argument>, <argument><expr><name>end_offset_blk</name></expr></argument>, <argument><expr><name>maxoff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hasright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>hasleft</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>offset_blk</name> <operator>&gt;</operator> <name>left</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>left</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>rm_offset</name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>rm_length</name> <operator>=</operator> <name>offset_blk</name> <operator>-</operator> <name>left</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>_fsm_del_fbk</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>rm_offset</name></expr></argument>, <argument><expr><name>rm_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>key_offset</name> <operator>=</operator> <name>rm_offset</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>key_length</name> <operator>+=</operator> <name>rm_length</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>offset_blk</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* zero start */</comment>
    <expr_stmt><expr><name>rm_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>rm_length</name> <operator>=</operator> <name>offset_blk</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_fsm_del_fbk</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>rm_offset</name></expr></argument>, <argument><expr><name>rm_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>key_offset</name> <operator>=</operator> <name>rm_offset</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>key_length</name> <operator>+=</operator> <name>rm_length</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>hasright</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>right</name> <operator>&gt;</operator> <name>end_offset_blk</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rm_offset</name> <operator>=</operator> <name>end_offset_blk</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rm_length</name> <operator>=</operator> <name>right</name> <operator>-</operator> <name>end_offset_blk</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_fsm_del_fbk</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>rm_offset</name></expr></argument>, <argument><expr><name>rm_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>key_length</name> <operator>+=</operator> <name>rm_length</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_fsm_put_fbk</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>key_offset</name></expr></argument>, <argument><expr><name>key_length</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief Initialize a new free-space bitmap area.
 *
 * If bitmap exists, its content will be moved into newly created area.
 * Blocks from the previous bitmap are will disposed and deallocated.
 *
 * @param fsm `struct fsm
 * @param bmoff Byte offset of the new bitmap. Value must be page aligned.
 * @param bmlen Byte length of the new bitmap. Value must be page aligned.
                Its length must not be lesser than length of old bitmap.
 */</comment>
<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_init_lw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>bmoff</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>bmlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mm2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sp</name></decl>, <decl><type ref="prev"/><name>sp2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>old_bmoff</name></decl>, <decl><type ref="prev"/><name>old_bmlen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_EXT</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>bmlen</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><name>bmoff</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><name>bmoff</name> <operator>&amp;</operator> <operator>(</operator><name><name>fsm</name><operator>-&gt;</operator><name>aunit</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IWFS_ERROR_RANGE_NOT_ALIGNED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>bmlen</name> <operator>&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_INVALID_ARGS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_ecode_error</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"Length of the newly initiated bitmap area (bmlen): %"</literal> <name>PRIu64</name>
                      <literal type="string">" must not be lesser than the current bitmap area length %"</literal> <name>PRIu64</name> <literal type="string">""</literal></expr></argument>,
                      <argument><expr><name>bmlen</name></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>bmlen</name> <operator>*</operator> <literal type="number">8</literal> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>bmoff</name> <operator>+</operator> <name>bmlen</name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_INVALID_ARGS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_ecode_error</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"Length of the newly initiated bitmap area (bmlen): %"</literal> <name>PRIu64</name>
                      <literal type="string">" is not enough to handle bitmap itself and the file header area."</literal></expr></argument>,
                      <argument><expr><name>bmlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_fsm_ensure_size_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>bmoff</name> <operator>+</operator> <name>bmlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>fsm</name><operator>-&gt;</operator><name>mmap_all</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// get mmap area without locking, since we ensured what pool file will not be remapped</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pool</name><operator>-&gt;</operator><name>probe_mmap</name></name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&lt;</operator> <name>bmoff</name> <operator>+</operator> <name>bmlen</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>IWFS_ERROR_NOT_MMAPED</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>mm</name> <operator>+=</operator> <name>bmoff</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// get mmap area without locking, since we ensured what pool file will not be remapped</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pool</name><operator>-&gt;</operator><name>probe_mmap</name></name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>bmoff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&lt;</operator> <name>bmlen</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>IWFS_ERROR_NOT_MMAPED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* We have an old active bitmap. Lets copy its content to the new location.*/</comment>
    <if_stmt><if>if <condition>(<expr><call><name>IW_RANGES_OVERLAP</name><argument_list>(<argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name> <operator>+</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name></expr></argument>, <argument><expr><name>bmoff</name></expr></argument>, <argument><expr><name>bmoff</name> <operator>+</operator> <name>bmlen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_ecode_error2</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"New and old bitmap areas are overlaped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>fsm</name><operator>-&gt;</operator><name>mmap_all</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>mm2</name> <operator>=</operator> <name>mm</name> <operator>-</operator> <name>bmoff</name> <operator>+</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pool</name><operator>-&gt;</operator><name>probe_mmap</name></name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>sp2</name> <operator>&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWFS_ERROR_NOT_MMAPED</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>iwlog_ecode_error2</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"Old bitmap area is not mmaped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>rc</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><operator>(</operator><name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name> <operator>-</operator> <name>bmlen</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>fsm</name><operator>-&gt;</operator><name>dlsnr</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>dlsnr</name><operator>-&gt;</operator><name>onwrite</name></name><argument_list>(<argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>dlsnr</name></name></expr></argument>, <argument><expr><name>bmoff</name></expr></argument>, <argument><expr><name>mm2</name></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mm</name></expr></argument>, <argument><expr><name>mm2</name></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>bmlen</name> <operator>&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mm</name> <operator>+</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bmlen</name> <operator>-</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>fsm</name><operator>-&gt;</operator><name>dlsnr</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>dlsnr</name><operator>-&gt;</operator><name>onset</name></name><argument_list>(<argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>dlsnr</name></name></expr></argument>, <argument><expr><name>bmoff</name> <operator>+</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bmlen</name> <operator>-</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>mm2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bmlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>fsm</name><operator>-&gt;</operator><name>dlsnr</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>dlsnr</name><operator>-&gt;</operator><name>onset</name></name><argument_list>(<argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>dlsnr</name></name></expr></argument>, <argument><expr><name>bmoff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bmlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Backup the previous bitmap range */</comment>
  <expr_stmt><expr><name>old_bmlen</name> <operator>=</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>old_bmoff</name> <operator>=</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name> <operator>=</operator> <name>bmoff</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name> <operator>=</operator> <name>bmlen</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>rollback</name></expr></argument>, <argument><expr><call><name>_fsm_set_bit_status_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>(</operator><name>bmoff</name> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>bmlen</name> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>FSM_BM_NONE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>old_bmlen</name></expr>)</condition> <block>{<block_content> <comment type="block">/* First time initialization */</comment>
    <comment type="block">/* Header allocation */</comment>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>rollback</name></expr></argument>, <argument><expr><call><name>_fsm_set_bit_status_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>fsm</name><operator>-&gt;</operator><name>hdrlen</name></name> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>FSM_BM_NONE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Reload fsm tree */</comment>
  <expr_stmt><expr><call><name>_fsm_load_fsm_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>bmlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Flush new meta */</comment>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>rollback</name></expr></argument>, <argument><expr><call><name>_fsm_write_meta_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>rollback</name></expr></argument>, <argument><expr><call><name><name>pool</name><operator>-&gt;</operator><name>sync</name></name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>IWFS_FDATASYNC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>old_bmlen</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* Now we are save to deallocate the old bitmap */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_fsm_blk_deallocate_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>(</operator><name>old_bmoff</name> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>old_bmlen</name> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fsm</name><operator>-&gt;</operator><name>mmap_all</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>pool</name><operator>-&gt;</operator><name>remove_mmap</name></name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>old_bmoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>

<label><name>rollback</name>:</label>
  <comment type="block">/* try to rollback previous bitmap state */</comment>
  <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name> <operator>=</operator> <name>old_bmoff</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name> <operator>=</operator> <name>old_bmlen</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>old_bmlen</name> <operator>&amp;&amp;</operator> <name>mm2</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_fsm_load_fsm_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>mm2</name></expr></argument>, <argument><expr><name>old_bmlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name><name>pool</name><operator>-&gt;</operator><name>sync</name></name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>IWFS_FDATASYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief Resize bitmap area.
 * @param fsm `structfsm
 * @param size New size of bitmap area in bytes.
 */</comment>
<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_resize_fsm_bitmap_lw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>bmoffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>bmlen</name></decl>, <decl><type ref="prev"/><name>sp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_EXT</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name> <operator>&gt;=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>bmlen</name> <operator>=</operator> <call><name>IW_ROUNDUP</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>aunit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* align to the system page size. */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_fsm_blk_allocate_aligned_lw</name><argument_list>(
    <argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>(</operator><name>bmlen</name> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>bmoffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>, <argument><expr><name>UINT64_MAX</name></expr></argument>,
    <argument><expr><name>IWFSM_ALLOC_NO_STATS</name> <operator>|</operator> <name>IWFSM_ALLOC_NO_EXTEND</name> <operator>|</operator> <name>IWFSM_ALLOC_NO_OVERALLOCATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>bmoffset</name> <operator>=</operator> <name>bmoffset</name> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>bmlen</name> <operator>=</operator> <name>sp</name> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rc</name> <operator>==</operator> <name>IWFS_ERROR_NO_FREE_SPACE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>bmoffset</name> <operator>=</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>bmoffset</name> <operator>=</operator> <call><name>IW_ROUNDUP</name><argument_list>(<argument><expr><name>bmoffset</name></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>aunit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fsm</name><operator>-&gt;</operator><name>mmap_all</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pool</name><operator>-&gt;</operator><name>add_mmap</name></name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>bmoffset</name></expr></argument>, <argument><expr><name>bmlen</name></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>mmap_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_fsm_init_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>bmoffset</name></expr></argument>, <argument><expr><name>bmlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>fsm</name><operator>-&gt;</operator><name>mmap_all</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>pool</name><operator>-&gt;</operator><name>remove_mmap</name></name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>bmoffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief Allocate a continuous segment of blocks.
 *
 * @param fsm `struct fsm
 * @param length_blk Desired segment length in blocks.
 * @param [in,out] offset_blk Allocated segment offset in blocks will be stored into.
 *                It also specified the desired segment offset to provide allocation locality.
 * @param [out] olength_blk Assigned segment length in blocks.
 * @param opts
 */</comment>
<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_blk_allocate_lw</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>fsm</name></name>     <modifier>*</modifier></type><name>fsm</name></decl></parameter>,
  <parameter><decl><type><name>uint64_t</name></type>        <name>length_blk</name></decl></parameter>,
  <parameter><decl><type><name>uint64_t</name>       <modifier>*</modifier></type><name>offset_blk</name></decl></parameter>,
  <parameter><decl><type><name>uint64_t</name>       <modifier>*</modifier></type><name>olength_blk</name></decl></parameter>,
  <parameter><decl><type><name>iwfs_fsm_aflags</name></type> <name>opts</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwavl_node</name></name> <modifier>*</modifier></type><name>nn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>fsm_bmopts_t</name></type> <name>bopts</name> <init>= <expr><name>FSM_BM_NONE</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>opts</name> <operator>&amp;</operator> <name>IWFSM_ALLOC_PAGE_ALIGNED</name></expr>)</condition> <block>{<block_content>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_fsm_blk_allocate_aligned_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>length_blk</name></expr></argument>, <argument><expr><name>offset_blk</name></expr></argument>, <argument><expr><name>olength_blk</name></expr></argument>, <argument><expr><name>UINT64_MAX</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>IWFS_ERROR_NO_FREE_SPACE</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>opts</name> <operator>&amp;</operator> <name>IWFSM_ALLOC_NO_EXTEND</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>IWFS_ERROR_NO_FREE_SPACE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_fsm_resize_fsm_bitmap_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>opts</name> <operator>&amp;</operator> <name>IWFSM_SOLID_ALLOCATED_SPACE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>bs</name> <init>= <expr><operator>*</operator><name>offset_blk</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>bl</name> <init>= <expr><operator>*</operator><name>olength_blk</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_fsm_ensure_size_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>(</operator><name>bs</name> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>bl</name> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>olength_blk</name> <operator>=</operator> <name>length_blk</name></expr>;</expr_stmt>

<label><name>start</name>:</label>
  <expr_stmt><expr><name>nn</name> <operator>=</operator> <operator>(</operator>struct <name>iwavl_node</name><operator>*</operator><operator>)</operator> <call><name>_fsm_find_matching_fblock_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>*</operator><name>offset_blk</name></expr></argument>, <argument><expr><name>length_blk</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>nn</name></expr>)</condition> <block>{<block_content> <comment type="block">/* use existing free space block */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bkey</name></name> <modifier>*</modifier></type><name>nk</name> <init>= <expr><operator>&amp;</operator><call><name>BKEY</name><argument_list>(<argument><expr><name>nn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>nlength</name> <init>= <expr><call><name>FSMBK_LENGTH</name><argument_list>(<argument><expr><name>nk</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>offset_blk</name> <operator>=</operator> <call><name>FSMBK_OFFSET</name><argument_list>(<argument><expr><name>nk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>_fsm_del_fbk2</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>nn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>nlength</name> <operator>&gt;</operator> <name>length_blk</name></expr>)</condition> <block>{<block_content> <comment type="block">/* re-save rest of free-space */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>opts</name> <operator>&amp;</operator> <name>IWFSM_ALLOC_NO_OVERALLOCATE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>crznum</name></name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* todo use lognormal distribution? */</comment>
        <decl_stmt><decl><type><name>double_t</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double_t</name><operator>)</operator> <name><name>fsm</name><operator>-&gt;</operator><name>crzsum</name></name> <operator>/</operator> <operator>(</operator><name>double_t</name><operator>)</operator> <name><name>fsm</name><operator>-&gt;</operator><name>crznum</name></name><operator>)</operator>        <comment type="block">/*avg*/</comment>
                     <operator>-</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><name>nlength</name> <operator>-</operator> <name>length_blk</name><operator>)</operator></expr></init></decl>;</decl_stmt>                       <comment type="block">/*rest blk size*/</comment>
        <decl_stmt><decl><type><name>double_t</name></type> <name>s</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double_t</name><operator>)</operator> <name><name>fsm</name><operator>-&gt;</operator><name>crzvar</name></name> <operator>/</operator> <operator>(</operator><name>double_t</name><operator>)</operator> <name><name>fsm</name><operator>-&gt;</operator><name>crznum</name></name><operator>)</operator> <operator>*</operator> <literal type="number">6.0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* blk size dispersion * 6 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>d</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>d</name> <operator>*</operator> <name>d</name> <operator>&gt;</operator> <name>s</name><operator>)</operator></expr>)</condition> <block>{<block_content>
          <comment type="block">/* its better to attach rest of block to
             the record */</comment>
          <expr_stmt><expr><operator>*</operator><name>olength_blk</name> <operator>=</operator> <name>nlength</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>_fsm_put_fbk</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>offset_blk</name> <operator>+</operator> <name>length_blk</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>nlength</name> <operator>-</operator> <name>length_blk</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>_fsm_put_fbk</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>offset_blk</name> <operator>+</operator> <name>length_blk</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>nlength</name> <operator>-</operator> <name>length_blk</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>opts</name> <operator>&amp;</operator> <name>IWFSM_ALLOC_NO_EXTEND</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>IWFS_ERROR_NO_FREE_SPACE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_fsm_resize_fsm_bitmap_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>start</name>;</goto>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>fsm</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>IWFSM_STRICT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>bopts</name> <operator>|=</operator> <name>FSM_BM_STRICT</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_fsm_set_bit_status_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>*</operator><name>offset_blk</name></expr></argument>, <argument><expr><operator>*</operator><name>olength_blk</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>opts</name> <operator>&amp;</operator> <name>IWFSM_ALLOC_NO_STATS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>double_t</name></type> <name>avg</name></decl>;</decl_stmt>
    <comment type="block">/* Update allocation statistics */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>fsm</name><operator>-&gt;</operator><name>crznum</name></name> <operator>&gt;</operator> <name>FSM_MAX_STATS_COUNT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>crznum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>crzsum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>crzvar</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>++</operator><name><name>fsm</name><operator>-&gt;</operator><name>crznum</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>crzsum</name></name> <operator>+=</operator> <name>length_blk</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>avg</name> <operator>=</operator> <operator>(</operator><name>double_t</name><operator>)</operator> <name><name>fsm</name><operator>-&gt;</operator><name>crzsum</name></name> <operator>/</operator> <operator>(</operator><name>double_t</name><operator>)</operator> <name><name>fsm</name><operator>-&gt;</operator><name>crznum</name></name></expr>;</expr_stmt> <comment type="block">/* average */</comment>
    <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>crzvar</name></name>
      <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>double_t</name><operator>)</operator> <name>length_blk</name> <operator>-</operator> <name>avg</name><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name>double_t</name><operator>)</operator> <name>length_blk</name> <operator>-</operator> <name>avg</name><operator>)</operator> <operator>+</operator> <literal type="number">0.5L</literal><operator>)</operator></expr>;</expr_stmt> <comment type="block">/* variance */</comment>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>opts</name> <operator>&amp;</operator> <name>IWFSM_SOLID_ALLOCATED_SPACE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>bs</name> <init>= <expr><operator>*</operator><name>offset_blk</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>bl</name> <init>= <expr><operator>*</operator><name>olength_blk</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_fsm_ensure_size_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>(</operator><name>bs</name> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>bl</name> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>opts</name> <operator>&amp;</operator> <name>IWFSM_SYNC_BMAP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>bmptr</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_fsm_bmptr</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bmptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>IWFS_EXT</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pool</name><operator>-&gt;</operator><name>sync_mmap</name></name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name></expr></argument>, <argument><expr><name>IWFS_SYNCDEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief Remove all free blocks from the and of file and trim its size.
 */</comment>
<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_trim_tail_lw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>hasleft</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>length</name></decl>, <decl><type ref="prev"/><name>lastblk</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bmptr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_EXT_STATE</name></type> <name>fstate</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fsm</name><operator>-&gt;</operator><name>omode</name></name> <operator>&amp;</operator> <name>IWFS_OWRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* find free space for fsm with lesser offset than actual */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_fsm_blk_allocate_aligned_lw</name><argument_list>(
    <argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>(</operator><name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><operator>(</operator><name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator></expr></argument>,
    <argument><expr><name>IWFSM_ALLOC_NO_EXTEND</name> <operator>|</operator> <name>IWFSM_ALLOC_NO_OVERALLOCATE</name> <operator>|</operator> <name>IWFSM_ALLOC_NO_STATS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>rc</name> <operator>!=</operator> <name>IWFS_ERROR_NO_FREE_SPACE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>offset</name> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator> <operator>&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>offset</name> <operator>=</operator> <name>offset</name> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>length</name> <operator>=</operator> <name>length</name> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>offset</name> <operator>!=</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>add_mmap</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>mmap_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_fsm_init_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="block">/* shoud never be reached */</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_fsm_blk_deallocate_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_fsm_bmptr</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bmptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// -V519</comment>

  <expr_stmt><expr><name>lastblk</name> <operator>=</operator> <operator>(</operator><name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name> <operator>+</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>_fsm_find_prev_set_bit</name><argument_list>(<argument><expr><name>bmptr</name></expr></argument>, <argument><expr><operator>(</operator><name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><name>lastblk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hasleft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>hasleft</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>lastblk</name> <operator>=</operator> <name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>state</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fstate</name><operator>.</operator><name>fsize</name></name> <operator>&gt;</operator> <operator>(</operator><name>lastblk</name> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>truncate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>lastblk</name> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_init_impl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWFS_FSM_OPTS</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>oflags</name></name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>oflags</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>aunit</name></name> <operator>=</operator> <call><name>iwp_alloc_unit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>bpow</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>mmap_all</name></name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>mmap_all</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>  <comment type="line">// 64bit block</comment>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name> <operator>&gt;</operator> <name>FSM_MAX_BLOCK_POW</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IWFS_ERROR_INVALID_BLOCK_SIZE</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator> <operator>&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>aunit</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IWFS_ERROR_PLATFORM_PAGE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_init_locks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWFS_FSM_OPTS</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>IWFSM_NOLOCKS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>ctlrwlk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>ctlrwlk</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>fsm</name><operator>-&gt;</operator><name>ctlrwlk</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fsm</name><operator>-&gt;</operator><name>ctlrwlk</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><call><name>pthread_rwlock_init</name><argument_list>(<argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>ctlrwlk</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>ctlrwlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>ctlrwlk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_destroy_locks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fsm</name><operator>-&gt;</operator><name>ctlrwlk</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><call><name>pthread_rwlock_destroy</name><argument_list>(<argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>ctlrwlk</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>ctlrwlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>ctlrwlk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_read_meta_lr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>lv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>llv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sp</name></decl>, <decl><type ref="prev"/><name>rp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>hdr</name><index>[<expr><name>IWFSM_CUSTOM_HDR_DATA_OFFSET</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

  <comment type="block">/*
      [FSM_CTL_MAGICK u32][block pow u8]
      [bmoffset u64][bmlength u64]
      [u64 crzsum][u32 crznum][u64 crszvar][u256 reserved]
      [custom header size u32][custom header data...]
      [fsm data...]
   */</comment>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>IWFSM_CUSTOM_HDR_DATA_OFFSET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Magic */</comment>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><name>hdr</name> <operator>+</operator> <name>rp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// -V512</comment>
  <expr_stmt><expr><name>lv</name> <operator>=</operator> <call><name>IW_ITOHL</name><argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>lv</name> <operator>!=</operator> <name>IWFSM_MAGICK</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWFS_ERROR_INVALID_FILEMETA</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_ecode_error2</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"Invalid file magic number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <comment type="block">/* Block pow */</comment>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr></argument>, <argument><expr><name>hdr</name> <operator>+</operator> <name>rp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name> <operator>&gt;</operator> <name>FSM_MAX_BLOCK_POW</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWFS_ERROR_INVALID_FILEMETA</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_ecode_error</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"Invalid file blocks pow: %u"</literal></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator> <operator>&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>aunit</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWFS_ERROR_PLATFORM_PAGE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_ecode_error</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"Block size: %u must not be greater than system page size: %zu"</literal></expr></argument>,
                      <argument><expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>aunit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Free-space bitmap offset */</comment>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>llv</name></expr></argument>, <argument><expr><name>hdr</name> <operator>+</operator> <name>rp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>llv</name> <operator>=</operator> <call><name>IW_ITOHLL</name><argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name> <operator>=</operator> <name>llv</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <comment type="block">/* Free-space bitmap length */</comment>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>llv</name></expr></argument>, <argument><expr><name>hdr</name> <operator>+</operator> <name>rp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>llv</name> <operator>=</operator> <call><name>IW_ITOHLL</name><argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name> <operator>=</operator> <name>llv</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>llv</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWFS_ERROR_INVALID_FILEMETA</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_ecode_error</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"Free-space bitmap length is not 64bit aligned: %"</literal> <name>PRIuMAX</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <comment type="block">/* Cumulative sum of record sizes acquired by `allocate` */</comment>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>llv</name></expr></argument>, <argument><expr><name>hdr</name> <operator>+</operator> <name>rp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>llv</name> <operator>=</operator> <call><name>IW_ITOHLL</name><argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>crzsum</name></name> <operator>=</operator> <name>llv</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <comment type="block">/* Cumulative number of records acquired by `allocated` */</comment>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><name>hdr</name> <operator>+</operator> <name>rp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>lv</name> <operator>=</operator> <call><name>IW_ITOHL</name><argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>crznum</name></name> <operator>=</operator> <name>lv</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <comment type="block">/* Record sizes standard variance (deviation^2 * N) */</comment>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>llv</name></expr></argument>, <argument><expr><name>hdr</name> <operator>+</operator> <name>rp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>llv</name> <operator>=</operator> <call><name>IW_ITOHLL</name><argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>crzvar</name></name> <operator>=</operator> <name>llv</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <comment type="block">/* Reserved */</comment>
  <expr_stmt><expr><name>rp</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

  <comment type="block">/* Header size */</comment>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><name>hdr</name> <operator>+</operator> <name>rp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>lv</name> <operator>=</operator> <call><name>IW_ITOHL</name><argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>hdrlen</name></name> <operator>=</operator> <name>lv</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rp</name> <operator>==</operator> <name>IWFSM_CUSTOM_HDR_DATA_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_init_new_lw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWFS_FSM_OPTS</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>FSM_ENSURE_OPEN</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>bmlen</name></decl>, <decl><type ref="prev"/><name>bmoff</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_EXT</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>aunit</name></name> <operator>&amp;&amp;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>hdrlen</name></name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>hdrlen</name></name> <operator>+</operator> <name>IWFSM_CUSTOM_HDR_DATA_OFFSET</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>hdrlen</name></name> <operator>=</operator> <call><name>IW_ROUNDUP</name><argument_list>(<argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>hdrlen</name></name></expr></argument>, <argument><expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>bmlen</name> <operator>=</operator> <ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>bmlen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>IW_ROUNDUP</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>bmlen</name></name></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>aunit</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>fsm</name><operator>-&gt;</operator><name>aunit</name></name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name>bmoff</name> <operator>=</operator> <call><name>IW_ROUNDUP</name><argument_list>(<argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>hdrlen</name></name></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>aunit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>fsm</name><operator>-&gt;</operator><name>mmap_all</name></name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* mmap whole file */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pool</name><operator>-&gt;</operator><name>add_mmap</name></name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIZE_T_MAX</name></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>mmap_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="block">/* mmap header */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pool</name><operator>-&gt;</operator><name>add_mmap</name></name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>hdrlen</name></name></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>mmap_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* mmap the fsm bitmap index */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pool</name><operator>-&gt;</operator><name>add_mmap</name></name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>bmoff</name></expr></argument>, <argument><expr><name>bmlen</name></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>mmap_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><call><name>_fsm_init_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>bmoff</name></expr></argument>, <argument><expr><name>bmlen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_init_existing_lw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>FSM_ENSURE_OPEN</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_EXT</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_fsm_read_meta_lr</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>fsm</name><operator>-&gt;</operator><name>mmap_all</name></name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* mmap the whole file */</comment>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name><name>pool</name><operator>-&gt;</operator><name>add_mmap</name></name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIZE_T_MAX</name></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>mmap_opts</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name><name>pool</name><operator>-&gt;</operator><name>probe_mmap</name></name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name> <operator>+</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWFS_ERROR_NOT_MMAPED</name></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>mm</name> <operator>+=</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="block">/* mmap the header of file */</comment>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name><name>pool</name><operator>-&gt;</operator><name>add_mmap</name></name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>hdrlen</name></name></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>mmap_opts</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* mmap the fsm bitmap index */</comment>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name><name>pool</name><operator>-&gt;</operator><name>add_mmap</name></name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>mmap_opts</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name><name>pool</name><operator>-&gt;</operator><name>probe_mmap</name></name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWFS_ERROR_NOT_MMAPED</name></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>_fsm_load_fsm_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief Check if all blocks within the specified range have been `allocated`.
 *
 * @param fsm `struct fsm`
 * @param offset_blk Starting block number of the specified range.
 * @param length_blk Range size in blocks.
 * @param [out] ret Checking result.
 */</comment>
<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_is_fully_allocated_lr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>offset_blk</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>length_blk</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>end</name> <init>= <expr><name>offset_blk</name> <operator>+</operator> <name>length_blk</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>length_blk</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>end</name> <operator>&lt;</operator> <name>offset_blk</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>end</name> <operator>&gt;</operator> <operator>(</operator><name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_fsm_set_bit_status_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>offset_blk</name></expr></argument>, <argument><expr><name>length_blk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FSM_BM_DRY_RUN</name> <operator>|</operator> <name>FSM_BM_STRICT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>IWFS_ERROR_FSM_SEGMENTATION</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************************************
*                                  Public API *
*************************************************************************************************/</comment>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_FSM</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>siz</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>FSM_ENSURE_OPEN2</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_fsm_ctrl_rlock</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>fsm</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>IWFSM_STRICT</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>allocated</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_fsm_is_fully_allocated_lr</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>,
                                    <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>off</name> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr></argument>,
                                    <argument><expr><call><name>IW_ROUNDUP</name><argument_list>(<argument><expr><name>siz</name></expr></argument>, <argument><expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr></argument>,
                                    <argument><expr><operator>&amp;</operator><name>allocated</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>allocated</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWFS_ERROR_FSM_SEGMENTATION</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>siz</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>siz</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>_fsm_ctrl_unlock</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_FSM</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>siz</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>FSM_ENSURE_OPEN2</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_fsm_ctrl_rlock</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>fsm</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>IWFSM_STRICT</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>allocated</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_fsm_is_fully_allocated_lr</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>off</name> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr></argument>,
                                    <argument><expr><call><name>IW_ROUNDUP</name><argument_list>(<argument><expr><name>siz</name></expr></argument>, <argument><expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr></argument>,
                                    <argument><expr><operator>&amp;</operator><name>allocated</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>allocated</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWFS_ERROR_FSM_SEGMENTATION</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>siz</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>siz</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>_fsm_ctrl_unlock</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_sync</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_FSM</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>iwfs_sync_flags</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>FSM_ENSURE_OPEN2</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_fsm_ctrl_rlock</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_fsm_write_meta_lw</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>f</name><operator>-&gt;</operator><name>impl</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>sync</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>impl</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_fsm_ctrl_unlock</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_FSM</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name> <operator>||</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_fsm_ctrl_wlock</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>fsm</name><operator>-&gt;</operator><name>root</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fsm</name><operator>-&gt;</operator><name>omode</name></name> <operator>&amp;</operator> <name>IWFS_OWRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fsm</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>IWFSM_NO_TRIM_ON_CLOSE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_fsm_trim_tail_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_fsm_write_meta_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fsm</name><operator>-&gt;</operator><name>dlsnr</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>sync</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>IWFS_SYNCDEFAULT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_fsm_node_destroy</name><argument_list>(<argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_fsm_ctrl_unlock</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_fsm_destroy_locks</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>iwrc</name></type> <name>_fsm_ensure_size_lw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name><name>fsm</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>ensure_size</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_ensure_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_FSM</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>FSM_ENSURE_OPEN2</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_fsm_ctrl_rlock</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>impl</name><operator>-&gt;</operator><name>bmoff</name></name> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>impl</name><operator>-&gt;</operator><name>bmlen</name></name> <operator>&gt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWFS_ERROR_RESIZE_FAIL</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_fsm_ensure_size_lw</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_fsm_ctrl_unlock</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_add_mmap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_FSM</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>, <parameter><decl><type><name>iwfs_ext_mmap_opts_t</name></type> <name>opts</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>FSM_ENSURE_OPEN2</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>impl</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>add_mmap</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>impl</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_remap_all</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_FSM</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>FSM_ENSURE_OPEN2</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>impl</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>remap_all</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>impl</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>_fsm_acquire_mmap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_FSM</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>mm</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>impl</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>impl</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>_fsm_release_mmap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_FSM</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>impl</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>release_mmap</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>impl</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_probe_mmap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_FSM</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>mm</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>FSM_ENSURE_OPEN2</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>impl</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>probe_mmap</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>impl</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_remove_mmap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_FSM</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>FSM_ENSURE_OPEN2</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>impl</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>remove_mmap</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>impl</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_sync_mmap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_FSM</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>iwfs_sync_flags</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>FSM_ENSURE_OPEN2</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>f</name><operator>-&gt;</operator><name>impl</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>sync_mmap</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>impl</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_allocate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_FSM</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>off_t</name> <modifier>*</modifier></type><name>oaddr</name></decl></parameter>, <parameter><decl><type><name>off_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter>, <parameter><decl><type><name>iwfs_fsm_aflags</name></type> <name>opts</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>FSM_ENSURE_OPEN2</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>sbnum</name></decl>, <decl><type ref="prev"/><name>nlen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fsm</name><operator>-&gt;</operator><name>omode</name></name> <operator>&amp;</operator> <name>IWFS_OWRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_READONLY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Required blocks number */</comment>
  <expr_stmt><expr><name>sbnum</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <operator>*</operator><name>oaddr</name> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>IW_ROUNDUP</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_fsm_ctrl_wlock</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_fsm_blk_allocate_lw</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>len</name> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nlen</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <operator>(</operator><name>nlen</name> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>oaddr</name> <operator>=</operator> <operator>(</operator><name>sbnum</name> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_fsm_ctrl_unlock</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_reallocate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_FSM</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>nlen</name></decl></parameter>, <parameter><decl><type><name>off_t</name> <modifier>*</modifier></type><name>oaddr</name></decl></parameter>, <parameter><decl><type><name>off_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter>, <parameter><decl><type><name>iwfs_fsm_aflags</name></type> <name>opts</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>FSM_ENSURE_OPEN2</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fsm</name><operator>-&gt;</operator><name>omode</name></name> <operator>&amp;</operator> <name>IWFS_OWRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_READONLY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>oaddr</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>olen</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IWFS_ERROR_RANGE_NOT_ALIGNED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>sp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>nlen_blk</name> <init>= <expr><call><name>IW_ROUNDUP</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>nlen</name></expr></argument>, <argument><expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>olen_blk</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <operator>*</operator><name>olen</name> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>oaddr_blk</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <operator>*</operator><name>oaddr</name> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>naddr_blk</name> <init>= <expr><name>oaddr_blk</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>nlen_blk</name> <operator>==</operator> <name>olen_blk</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_fsm_ctrl_wlock</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>nlen_blk</name> <operator>&lt;</operator> <name>olen_blk</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_fsm_blk_deallocate_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>oaddr_blk</name> <operator>+</operator> <name>nlen_blk</name></expr></argument>, <argument><expr><name>olen_blk</name> <operator>-</operator> <name>nlen_blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>oaddr</name> <operator>=</operator> <name>oaddr_blk</name> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>nlen_blk</name> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_fsm_blk_allocate_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>nlen_blk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>naddr_blk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>naddr_blk</name> <operator>!=</operator> <name>oaddr_blk</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><operator>*</operator><name>oaddr</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>*</operator><name>olen</name></expr></argument>, <argument><expr><name>naddr_blk</name> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_fsm_blk_deallocate_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>oaddr_blk</name></expr></argument>, <argument><expr><name>olen_blk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>oaddr</name> <operator>=</operator> <name>naddr_blk</name> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>sp</name> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_fsm_ctrl_unlock</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_deallocate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_FSM</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>FSM_ENSURE_OPEN2</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>off_t</name></type> <name>offset_blk</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>addr</name> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>off_t</name></type> <name>length_blk</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>len</name> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fsm</name><operator>-&gt;</operator><name>omode</name></name> <operator>&amp;</operator> <name>IWFS_OWRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_READONLY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IWFS_ERROR_RANGE_NOT_ALIGNED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_fsm_ctrl_wlock</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(  <expr><call><name>IW_RANGES_OVERLAP</name><argument_list>(<argument><expr><name>offset_blk</name></expr></argument>, <argument><expr><name>offset_blk</name> <operator>+</operator> <name>length_blk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>fsm</name><operator>-&gt;</operator><name>hdrlen</name></name> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator></expr></argument>)</argument_list></call>
     <operator>||</operator> <call><name>IW_RANGES_OVERLAP</name><argument_list>(<argument><expr><name>offset_blk</name></expr></argument>, <argument><expr><name>offset_blk</name> <operator>+</operator> <name>length_blk</name></expr></argument>, <argument><expr><operator>(</operator><name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator></expr></argument>,
                          <argument><expr><operator>(</operator><name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">// Deny deallocations in header or free-space bitmap itself</comment>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_fsm_ctrl_unlock</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>IWFS_ERROR_FSM_SEGMENTATION</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_fsm_blk_deallocate_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>offset_blk</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>length_blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_fsm_ctrl_unlock</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_check_allocation_status</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_FSM</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>allocated</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>addr</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><name>len</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IWFS_ERROR_RANGE_NOT_ALIGNED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_fsm_ctrl_rlock</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>off_t</name></type> <name>offset_blk</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>addr</name> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>off_t</name></type> <name>length_blk</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>len</name> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(  <expr><call><name>IW_RANGES_OVERLAP</name><argument_list>(<argument><expr><name>offset_blk</name></expr></argument>, <argument><expr><name>offset_blk</name> <operator>+</operator> <name>length_blk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>fsm</name><operator>-&gt;</operator><name>hdrlen</name></name> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator></expr></argument>)</argument_list></call>
     <operator>||</operator> <call><name>IW_RANGES_OVERLAP</name><argument_list>(<argument><expr><name>offset_blk</name></expr></argument>, <argument><expr><name>offset_blk</name> <operator>+</operator> <name>length_blk</name></expr></argument>, <argument><expr><operator>(</operator><name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator></expr></argument>,
                          <argument><expr><operator>(</operator><name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_fsm_ctrl_unlock</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>IWFS_ERROR_FSM_SEGMENTATION</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_fsm_set_bit_status_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>offset_blk</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>length_blk</name></expr></argument>,
                              <argument><expr><ternary><condition><expr><name>allocated</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>, <argument><expr><name>FSM_BM_DRY_RUN</name> <operator>|</operator> <name>FSM_BM_STRICT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_fsm_ctrl_unlock</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_writehdr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_FSM</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>siz</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>FSM_ENSURE_OPEN2</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>siz</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>IWFSM_CUSTOM_HDR_DATA_OFFSET</name> <operator>+</operator> <name>off</name> <operator>+</operator> <name>siz</name><operator>)</operator> <operator>&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>hdrlen</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_OUT_OF_BOUNDS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>fsm</name><operator>-&gt;</operator><name>dlsnr</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>dlsnr</name><operator>-&gt;</operator><name>onwrite</name></name><argument_list>(<argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>dlsnr</name></name></expr></argument>, <argument><expr><name>IWFSM_CUSTOM_HDR_DATA_OFFSET</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>siz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>mm</name> <operator>+</operator> <name>IWFSM_CUSTOM_HDR_DATA_OFFSET</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>siz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>release_mmap</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_readhdr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_FSM</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>siz</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>FSM_ENSURE_OPEN2</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>siz</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>IWFSM_CUSTOM_HDR_DATA_OFFSET</name> <operator>+</operator> <name>off</name> <operator>+</operator> <name>siz</name><operator>)</operator> <operator>&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>hdrlen</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_OUT_OF_BOUNDS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>mm</name> <operator>+</operator> <name>IWFSM_CUSTOM_HDR_DATA_OFFSET</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>siz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>release_mmap</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_FSM</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>iwfs_fsm_clrfalgs</name></type> <name>clrflags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>FSM_ENSURE_OPEN2</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>bmoff</name></decl>, <decl><type ref="prev"/><name>bmlen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_fsm_ctrl_wlock</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>bmlen</name> <operator>=</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bmlen</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fsm</name><operator>-&gt;</operator><name>mmap_all</name></name> <operator>&amp;&amp;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>remove_mmap</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>bmoff</name> <operator>=</operator> <call><name>IW_ROUNDUP</name><argument_list>(<argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>hdrlen</name></name></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>aunit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fsm</name><operator>-&gt;</operator><name>mmap_all</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>add_mmap</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>bmoff</name></expr></argument>, <argument><expr><name>bmlen</name></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>mmap_opts</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_fsm_init_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>bmoff</name></expr></argument>, <argument><expr><name>bmlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>clrflags</name> <operator>&amp;</operator> <name>IWFSM_CLEAR_TRIM</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_fsm_trim_tail_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_fsm_ctrl_unlock</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_extfile</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_FSM</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>IWFS_EXT</name> <modifier>*</modifier><modifier>*</modifier></type><name>ext</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>FSM_ENSURE_OPEN2</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ext</name> <operator>=</operator> <operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>impl</name><operator>-&gt;</operator><name>pool</name></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fsm_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_FSM</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>IWFS_FSM_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>FSM_ENSURE_OPEN2</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_fsm_ctrl_rlock</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>state</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>exfile</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>block_size</name></name> <operator>=</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>oflags</name></name> <operator>=</operator> <name><name>fsm</name><operator>-&gt;</operator><name>oflags</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>hdrlen</name></name> <operator>=</operator> <name><name>fsm</name><operator>-&gt;</operator><name>hdrlen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>blocks_num</name></name> <operator>=</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>free_segments_num</name></name> <operator>=</operator> <name><name>fsm</name><operator>-&gt;</operator><name>fsmnum</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>avg_alloc_size</name></name> <operator>=</operator> <ternary><condition><expr><name><name>fsm</name><operator>-&gt;</operator><name>crznum</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>double_t</name><operator>)</operator> <name><name>fsm</name><operator>-&gt;</operator><name>crzsum</name></name> <operator>/</operator> <operator>(</operator><name>double_t</name><operator>)</operator> <name><name>fsm</name><operator>-&gt;</operator><name>crznum</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>alloc_dispersion</name></name> <operator>=</operator> <ternary><condition><expr><name><name>fsm</name><operator>-&gt;</operator><name>crznum</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>double_t</name><operator>)</operator> <name><name>fsm</name><operator>-&gt;</operator><name>crzvar</name></name> <operator>/</operator> <operator>(</operator><name>double_t</name><operator>)</operator> <name><name>fsm</name><operator>-&gt;</operator><name>crznum</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_fsm_ctrl_unlock</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwfs_fsmfile_open</name><parameter_list>(<parameter><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWFS_FSM_OPTS</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f</name> <operator>&amp;&amp;</operator> <name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_EXT_STATE</name></type> <name>fstate</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name><name>opts</name><operator>-&gt;</operator><name>exfile</name><operator>.</operator><name>file</name><operator>.</operator><name>path</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwfs_fsmfile_init</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>write</name></name> <operator>=</operator> <name>_fsm_write</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>read</name></name> <operator>=</operator> <name>_fsm_read</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>close</name></name> <operator>=</operator> <name>_fsm_close</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sync</name></name> <operator>=</operator> <name>_fsm_sync</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>_fsm_state</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>ensure_size</name></name> <operator>=</operator> <name>_fsm_ensure_size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>add_mmap</name></name> <operator>=</operator> <name>_fsm_add_mmap</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>remap_all</name></name> <operator>=</operator> <name>_fsm_remap_all</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>acquire_mmap</name></name> <operator>=</operator> <name>_fsm_acquire_mmap</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>probe_mmap</name></name> <operator>=</operator> <name>_fsm_probe_mmap</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>release_mmap</name></name> <operator>=</operator> <name>_fsm_release_mmap</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>remove_mmap</name></name> <operator>=</operator> <name>_fsm_remove_mmap</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sync_mmap</name></name> <operator>=</operator> <name>_fsm_sync_mmap</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>allocate</name></name> <operator>=</operator> <name>_fsm_allocate</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>reallocate</name></name> <operator>=</operator> <name>_fsm_reallocate</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>deallocate</name></name> <operator>=</operator> <name>_fsm_deallocate</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>check_allocation_status</name></name> <operator>=</operator> <name>_fsm_check_allocation_status</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>writehdr</name></name> <operator>=</operator> <name>_fsm_writehdr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>readhdr</name></name> <operator>=</operator> <name>_fsm_readhdr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>clear</name></name> <operator>=</operator> <name>_fsm_clear</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>extfile</name></name> <operator>=</operator> <name>_fsm_extfile</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fsm</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>dlsnr</name></name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>exfile</name><operator>.</operator><name>file</name><operator>.</operator><name>dlsnr</name></name></expr>;</expr_stmt> <comment type="line">// Copy data changes listener address</comment>
  <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>mmap_opts</name></name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>mmap_opts</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>IWFS_EXT_OPTS</name></type> <name>rwl_opts</name> <init>= <expr><name><name>opts</name><operator>-&gt;</operator><name>exfile</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>rwl_opts</name><operator>.</operator><name>use_locks</name></name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>opts</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>IWFSM_NOLOCKS</name><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_fsm_init_impl</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_fsm_init_locks</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwfs_exfile_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rwl_opts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>state</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fstate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>omode</name></name> <operator>=</operator> <name><name>fstate</name><operator>.</operator><name>file</name><operator>.</operator><name>opts</name><operator>.</operator><name>omode</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>fstate</name><operator>.</operator><name>file</name><operator>.</operator><name>ostatus</name></name> <operator>&amp;</operator> <name>IWFS_OPEN_NEW</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_fsm_init_new_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_fsm_init_existing_lw</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_fsm_destroy_locks</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// we are not locked</comment>
      <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_fsm_close</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_fsmfile_ecodefn</name><parameter_list>(<parameter><decl><type><name>locale_t</name></type> <name>locale</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ecode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>ecode</name> <operator>&gt;</operator> <name>_IWFS_FSM_ERROR_START</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ecode</name> <operator>&lt;</operator> <name>_IWFS_FSM_ERROR_END</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <switch>switch <condition>(<expr><name>ecode</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>IWFS_ERROR_NO_FREE_SPACE</name></expr>:</case>
      <return>return <expr><literal type="string">"No free space. (IWFS_ERROR_NO_FREE_SPACE)"</literal></expr>;</return>
    <case>case <expr><name>IWFS_ERROR_INVALID_BLOCK_SIZE</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid block size specified. (IWFS_ERROR_INVALID_BLOCK_SIZE)"</literal></expr>;</return>
    <case>case <expr><name>IWFS_ERROR_RANGE_NOT_ALIGNED</name></expr>:</case>
      <return>return <expr><literal type="string">"Specified range/offset is not aligned with page/block. "</literal>
             <literal type="string">"(IWFS_ERROR_RANGE_NOT_ALIGNED)"</literal></expr>;</return>
    <case>case <expr><name>IWFS_ERROR_FSM_SEGMENTATION</name></expr>:</case>
      <return>return <expr><literal type="string">"Free-space map segmentation error. (IWFS_ERROR_FSM_SEGMENTATION)"</literal></expr>;</return>
    <case>case <expr><name>IWFS_ERROR_INVALID_FILEMETA</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid file metadata. (IWFS_ERROR_INVALID_FILEMETA)"</literal></expr>;</return>
    <case>case <expr><name>IWFS_ERROR_PLATFORM_PAGE</name></expr>:</case>
      <return>return <expr><literal type="string">"The block size incompatible with platform page size, data "</literal>
             <literal type="string">"migration required. (IWFS_ERROR_PLATFORM_PAGE)"</literal></expr>;</return>
    <case>case <expr><name>IWFS_ERROR_RESIZE_FAIL</name></expr>:</case>
      <return>return <expr><literal type="string">"Failed to resize file, "</literal>
             <literal type="string">"conflicting with free-space map location (IWFS_ERROR_RESIZE_FAIL)"</literal></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwfs_fsmfile_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_fsmfile_initialized</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iw_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_fsmfile_initialized</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="line">// initialized already</comment>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>iwlog_register_ecodefn</name><argument_list>(<argument><expr><name>_fsmfile_ecodefn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************************************
*                                      Debug API                                                *
*************************************************************************************************/</comment>

<function><type><name>uint64_t</name></type> <name>iwfs_fsmdbg_number_of_free_areas</name><parameter_list>(<parameter><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>fsm</name><operator>-&gt;</operator><name>fsmnum</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>iwfs_fsmdbg_find_next_set_bit</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>offset_bit</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>max_offset_bit</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>found</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_fsm_find_next_set_bit</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>offset_bit</name></expr></argument>, <argument><expr><name>max_offset_bit</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>iwfs_fsmdbg_find_prev_set_bit</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>offset_bit</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>min_offset_bit</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>found</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_fsm_find_prev_set_bit</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>offset_bit</name></expr></argument>, <argument><expr><name>min_offset_bit</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwfs_fsmdbg_dump_fsm_tree</name><parameter_list>(<parameter><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FSM TREE: %s\n"</literal></expr></argument>, <argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fsm</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"NONE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name><name>struct</name> <name>iwavl_node</name></name> <modifier>*</modifier><name>n</name></type> <init>= <expr><call><name>iwavl_first_in_order</name><argument_list>(<argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>n</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <call><name>iwavl_next_in_order</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>bkey</name></name> <modifier>*</modifier></type><name>k</name> <init>= <expr><operator>&amp;</operator><call><name>BKEY</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>koff</name> <init>= <expr><call><name>FSMBK_OFFSET</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>klen</name> <init>= <expr><call><name>FSMBK_LENGTH</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"[%"</literal> <name>PRIu64</name> <literal type="string">" %"</literal> <name>PRIu64</name> <literal type="string">"]\n"</literal></expr></argument>, <argument><expr><name>koff</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>byte_to_binary</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>b</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>z</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>z</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>z</name> <operator>&lt;=</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>z</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <name>z</name><operator>)</operator> <operator>==</operator> <name>z</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"1"</literal></expr> </then><else>: <expr><literal type="string">"0"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwfs_fsmdb_dump_fsm_bitmap</name><parameter_list>(<parameter><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>fsm</name><operator>-&gt;</operator><name>mmap_all</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>probe_mmap</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&lt;=</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWFS_ERROR_NOT_MMAPED</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>mm</name> <operator>+=</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>sp</name> <operator>=</operator> <name>sp</name> <operator>-</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>probe_mmap</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>fsm</name><operator>-&gt;</operator><name>hdrlen</name></name> <operator>&gt;&gt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <comment type="line">// if (impl-&gt;bmoff == impl-&gt;aunit) {</comment>
  <comment type="line">//   i += ((impl-&gt;bmlen &gt;&gt; impl-&gt;bpow) &gt;&gt; 3);</comment>
  <comment type="line">// }</comment>
  <for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sp</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>b</name> <init>= <expr><operator>*</operator><operator>(</operator><name>mm</name> <operator>+</operator> <name>i</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>byte_to_binary</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwfs_fsmdbg_state</name><parameter_list>(<parameter><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>IWFS_FSMDBG_STATE</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>FSM_ENSURE_OPEN2</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>fsm</name></name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_fsm_ctrl_rlock</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>pool</name><operator>.</operator><name>state</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fsm</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>exfile</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>block_size</name></name> <operator>=</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bpow</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>oflags</name></name> <operator>=</operator> <name><name>fsm</name><operator>-&gt;</operator><name>oflags</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>hdrlen</name></name> <operator>=</operator> <name><name>fsm</name><operator>-&gt;</operator><name>hdrlen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>blocks_num</name></name> <operator>=</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>free_segments_num</name></name> <operator>=</operator> <name><name>fsm</name><operator>-&gt;</operator><name>fsmnum</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>avg_alloc_size</name></name> <operator>=</operator> <ternary><condition><expr><name><name>fsm</name><operator>-&gt;</operator><name>crznum</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>double_t</name><operator>)</operator> <name><name>fsm</name><operator>-&gt;</operator><name>crzsum</name></name> <operator>/</operator> <operator>(</operator><name>double_t</name><operator>)</operator> <name><name>fsm</name><operator>-&gt;</operator><name>crznum</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>alloc_dispersion</name></name> <operator>=</operator> <ternary><condition><expr><name><name>fsm</name><operator>-&gt;</operator><name>crznum</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>double_t</name><operator>)</operator> <name><name>fsm</name><operator>-&gt;</operator><name>crzvar</name></name> <operator>/</operator> <operator>(</operator><name>double_t</name><operator>)</operator> <name><name>fsm</name><operator>-&gt;</operator><name>crznum</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>bmoff</name></name> <operator>=</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmoff</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>bmlen</name></name> <operator>=</operator> <name><name>fsm</name><operator>-&gt;</operator><name>bmlen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>lfbkoff</name></name> <operator>=</operator> <name><name>fsm</name><operator>-&gt;</operator><name>lfbkoff</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>lfbklen</name></name> <operator>=</operator> <name><name>fsm</name><operator>-&gt;</operator><name>lfbklen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_fsm_ctrl_unlock</name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
</unit>
