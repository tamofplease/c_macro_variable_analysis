<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iowow/src/fs/tests/iwfs_test1.c"><comment type="line">//</comment>
<comment type="block" format="doxygen">/**************************************************************************************************
 * IOWOW library
 *
 * MIT License
 *
 * Copyright (c) 2012-2022 Softmotions Ltd &lt;info@softmotions.com&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *************************************************************************************************/</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iowow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log/iwlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/iwexfile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/iwutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwcfg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CUnit/Basic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNLINK</name><parameter_list>()</parameter_list></cpp:macro> \
  <cpp:value>unlink("iwfs_exfile_test1.dat"); \
  unlink("iwfs_exfile_test1_2.dat"); \
  unlink("test_mmap1.dat"); \
  unlink("test_fibo_inc.dat")</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>init_suite</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>iw_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNLINK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clean_suite</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>UNLINK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwfs_exfile_test1</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_EXT</name></type> <name>ef</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><literal type="string">"iwfs_exfile_test1.dat"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_EXT_OPTS</name></type> <name>opts</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>file</name>        <operator>=</operator> <block>{
      <expr><operator>.</operator><name>path</name>      <operator>=</operator> <name>path</name></expr>,
      <expr><operator>.</operator><name>lock_mode</name> <operator>=</operator> <name>IWP_WLOCK</name></expr>,
      <expr><operator>.</operator><name>omode</name>     <operator>=</operator> <name>IWFS_DEFAULT_OMODE</name> <operator>|</operator> <name>IWFS_OTRUNC</name></expr>
    }</block></expr>,
    <expr><operator>.</operator><name>use_locks</name>   <operator>=</operator> <literal type="number">1</literal></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>iwfs_exfile_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>data</name><index>[]</index></name> <init>= <expr><literal type="string">"b069a540-bc92-49ba-95e9-d1a2ee9e8c8f"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sp</name></decl>, <decl><type ref="prev"/><name>sp2</name></decl>;</decl_stmt>

  <comment type="line">// iwrc(*write)(struct IWFS_EXT* f, off_t off, const void *buf, size_t siz,</comment>
  <comment type="line">// size_t *sp);</comment>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>ef</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>ef</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>IWP_FILE_STAT</name></type> <name>fstat</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>iwp_fstat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fstat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>fstat</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><call><name>iwp_alloc_unit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>ef</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>ef</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Now reopen the file</comment>

  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>file</name><operator>.</operator><name>omode</name></name> <operator>=</operator> <name>IWFS_OREAD</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>iwfs_exfile_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>rdata</name><index>[<expr><literal type="number">37</literal></expr>]</index></name></decl>;</decl_stmt>
  <comment type="line">// iwrc(*read)(struct IWFS_EXT* f, off_t off, void *buf, size_t siz, size_t</comment>
  <comment type="line">// *sp);</comment>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>ef</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rdata</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>sp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name>rdata</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>ef</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>IW_ERROR_READONLY</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>ps</name> <init>= <expr><call><name>iwp_alloc_unit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>ef</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><name>ps</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>rdata</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>sp2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>ef</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwfs_exfile_test1_2</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_EXT</name></type> <name>f</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><literal type="string">"exfile_test1_2-"</literal></expr></init></decl>;</decl_stmt> <comment type="line">// Temp file prefix</comment>
  <decl_stmt><decl><type><name>IWFS_EXT_OPTS</name></type> <name>opts</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>file</name>    <operator>=</operator> <block>{
      <expr><operator>.</operator><name>path</name>  <operator>=</operator> <name>path</name></expr>,
      <expr><operator>.</operator><name>omode</name> <operator>=</operator> <name>IWFS_OTMP</name> <operator>|</operator> <name>IWFS_OUNLINK</name></expr>
    }</block></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwfs_exfile_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>IWFS_EXT_STATE</name></type> <name>state</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>f</name><operator>.</operator><name>state</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tpath</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>file</name><operator>.</operator><name>opts</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nTmp file: %s\n"</literal></expr></argument>, <argument><expr><name>tpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>IWP_FILE_STAT</name></type> <name>fstat</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_fstat</name><argument_list>(<argument><expr><name>tpath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fstat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>f</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fstat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fstat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_fstat</name><argument_list>(<argument><expr><name>tpath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fstat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>IW_ERROR_NOT_EXISTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_fibo_inc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><literal type="string">"test_fibo_inc.dat"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_EXT</name></type> <name>ef</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_EXT_OPTS</name></type> <name>opts</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>file</name>        <operator>=</operator> <block>{
      <expr><operator>.</operator><name>path</name>      <operator>=</operator> <name>path</name></expr>,
      <expr><operator>.</operator><name>lock_mode</name> <operator>=</operator> <name>IWP_WLOCK</name></expr>,
      <expr><operator>.</operator><name>omode</name>     <operator>=</operator> <name>IWFS_DEFAULT_OMODE</name> <operator>|</operator> <name>IWFS_OTRUNC</name></expr>
    }</block></expr>,
    <expr><operator>.</operator><name>use_locks</name>   <operator>=</operator> <literal type="number">0</literal></expr>,
    <expr><operator>.</operator><name>rspolicy</name>    <operator>=</operator> <name>iw_exfile_szpolicy_fibo</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>wd</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>iwfs_exfile_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// iwrc(*write)(struct IWFS_EXT* f, off_t off, const void *buf, size_t siz,</comment>
  <comment type="line">// size_t *sp);</comment>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>ef</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>wd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>psize</name> <init>= <expr><call><name>iwp_alloc_unit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWP_FILE_STAT</name></type> <name>fstat</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>iwp_fstat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fstat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name><name>fstat</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>psize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>ef</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><name><name>fstat</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>iwp_fstat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fstat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name><name>fstat</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>psize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>ef</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><name><name>fstat</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>iwp_fstat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fstat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name><name>fstat</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>psize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>ef</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><name><name>fstat</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>iwp_fstat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fstat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name><name>fstat</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>*</operator> <name>psize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>ef</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_mmap1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>psize</name> <init>= <expr><call><name>iwp_alloc_unit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dsize</name> <init>= <expr><name>psize</name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>dsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cdata</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>dsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><literal type="string">"test_mmap1.dat"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_EXT</name></type> <name>ef</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_EXT_OPTS</name></type> <name>opts</name> <init>= <expr><block>{ <expr><operator>.</operator><name>file</name> <operator>=</operator> <block>{ <expr><operator>.</operator><name>path</name> <operator>=</operator> <name>path</name></expr>, <expr><operator>.</operator><name>omode</name> <operator>=</operator> <name>IWFS_OTRUNC</name></expr> }</block></expr>, <expr><operator>.</operator><name>use_locks</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dsize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>iwu_rand_range</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwfs_exfile_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>ef</name><operator>.</operator><name>add_mmap</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>psize</name></expr></argument>, <argument><expr><name>psize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>ef</name><operator>.</operator><name>add_mmap</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><name>psize</name></expr></argument>, <argument><expr><name>psize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>ef</name><operator>.</operator><name>add_mmap</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>psize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>ef</name><operator>.</operator><name>add_mmap</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><name>psize</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>psize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>IWFS_ERROR_MMAP_OVERLAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IW_32</name></cpp:ifndef>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>ef</name><operator>.</operator><name>add_mmap</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>psize</name></expr></argument>, <argument><expr><name>UINT64_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>ef</name><operator>.</operator><name>add_mmap</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>psize</name></expr></argument>, <argument><expr><name>UINT32_MAX</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>ef</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><name>psize</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>psize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>psize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>ef</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><name>psize</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>cdata</name></expr></argument>, <argument><expr><name>psize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>psize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>cdata</name></expr></argument>, <argument><expr><name>psize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dsize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>iwu_rand_range</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// iwrc(*remove_mmap)(struct IWFS_EXT* f, off_t off);</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>ef</name><operator>.</operator><name>remove_mmap</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><name>psize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>ef</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><name>psize</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>psize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>psize</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>ef</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><name>psize</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>cdata</name></expr></argument>, <argument><expr><name>psize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>psize</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>cdata</name></expr></argument>, <argument><expr><name>psize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>ef</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><name>psize</name> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>dsize</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>ef</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><name>psize</name> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><name>cdata</name></expr></argument>, <argument><expr><name>dsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>dsize</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>cdata</name></expr></argument>, <argument><expr><name>psize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dsize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>iwu_rand_range</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>ef</name><operator>.</operator><name>remove_mmap</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>ef</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><name>psize</name> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>dsize</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>ef</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><name>psize</name> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><name>cdata</name></expr></argument>, <argument><expr><name>dsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>dsize</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>cdata</name></expr></argument>, <argument><expr><name>psize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dsize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>iwu_rand_range</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>ef</name><operator>.</operator><name>remove_mmap</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>psize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>ef</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><name>psize</name> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>dsize</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>ef</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><name>psize</name> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><name>cdata</name></expr></argument>, <argument><expr><name>dsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>dsize</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>cdata</name></expr></argument>, <argument><expr><name>psize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dsize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>iwu_rand_range</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>ef</name><operator>.</operator><name>remove_mmap</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>psize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>ef</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><name>psize</name> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>dsize</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>ef</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>, <argument><expr><name>psize</name> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><name>cdata</name></expr></argument>, <argument><expr><name>dsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>dsize</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>cdata</name></expr></argument>, <argument><expr><name>psize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>ef</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ef</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>CU_pSuite</name></type> <name>pSuite</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Initialize the CUnit test registry */</comment>
  <if_stmt><if>if <condition>(<expr><name>CUE_SUCCESS</name> <operator>!=</operator> <call><name>CU_initialize_registry</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Add a suite to the registry */</comment>
  <expr_stmt><expr><name>pSuite</name> <operator>=</operator> <call><name>CU_add_suite</name><argument_list>(<argument><expr><literal type="string">"iwfs_test1"</literal></expr></argument>, <argument><expr><name>init_suite</name></expr></argument>, <argument><expr><name>clean_suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pSuite</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CU_cleanup_registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Add the tests to the suite */</comment>
  <if_stmt><if>if <condition>(  <expr><operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>CU_add_test</name><argument_list>(<argument><expr><name>pSuite</name></expr></argument>, <argument><expr><literal type="string">"iwfs_exfile_test1"</literal></expr></argument>, <argument><expr><name>iwfs_exfile_test1</name></expr></argument>)</argument_list></call><operator>)</operator>
     <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>CU_add_test</name><argument_list>(<argument><expr><name>pSuite</name></expr></argument>, <argument><expr><literal type="string">"iwfs_exfile_test1_2"</literal></expr></argument>, <argument><expr><name>iwfs_exfile_test1_2</name></expr></argument>)</argument_list></call><operator>)</operator>
     <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>CU_add_test</name><argument_list>(<argument><expr><name>pSuite</name></expr></argument>, <argument><expr><literal type="string">"test_fibo_inc"</literal></expr></argument>, <argument><expr><name>test_fibo_inc</name></expr></argument>)</argument_list></call><operator>)</operator>
     <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>CU_add_test</name><argument_list>(<argument><expr><name>pSuite</name></expr></argument>, <argument><expr><literal type="string">"test_mmap1"</literal></expr></argument>, <argument><expr><name>test_mmap1</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CU_cleanup_registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Run all tests using the CUnit Basic interface */</comment>
  <expr_stmt><expr><call><name>CU_basic_set_mode</name><argument_list>(<argument><expr><name>CU_BRM_VERBOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_basic_run_tests</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>CU_get_number_of_failures</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CU_cleanup_registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
