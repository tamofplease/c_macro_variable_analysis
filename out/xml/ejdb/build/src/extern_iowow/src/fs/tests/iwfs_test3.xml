<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iowow/src/fs/tests/iwfs_test3.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iowow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log/iwlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/iwfsmfile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/iwutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwcfg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CUnit/Basic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kbtree.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NRECS</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RECSZ</name></cpp:macro> <cpp:value>(10 * 1024)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNLINK</name><parameter_list>()</parameter_list></cpp:macro> \
  <cpp:value>unlink("test_fsm_stress.data"); \
  unlink("test_fsm_stress1.fsm"); \
  unlink("test_fsm_stress2.fsm")</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>SREC</name> <block>{
  <decl_stmt><decl><type><name>int</name></type>   <name>id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>off_t</name></type> <name>addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>off_t</name></type> <name>rsz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>off_t</name></type> <name>alc_addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>off_t</name></type> <name>alc_len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>  <name>freed</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>  <name>reallocated</name></decl>;</decl_stmt>
}</block></struct></type> <name>SREC</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_srec_cmp</name><parameter_list>(<parameter><type><name>r1</name></type></parameter>, <parameter><type><name>r2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((r1).id - (r2).id)</cpp:value></cpp:define>

<macro><name>KBTREE_INIT</name><argument_list>(<argument>rt</argument>, <argument>SREC</argument>, <argument>_srec_cmp</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fstress1</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>kbtree_t</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>rt</name></expr>;</expr_stmt>

<function><type><name>int</name></type> <name>init_suite</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>UNLINK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>iw_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rt</name> <operator>=</operator> <call><name>kb_init</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name>KB_DEFAULT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>off_t</name></type> <name>addr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>ts</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_current_time_ms</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>IW_SWAB64</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ts</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwu_rand_seed</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Generating stress data file: test_fsm_stress1.data, random seed: %"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>fstress1</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"test_fsm_stress.data"</literal></expr></argument>, <argument><expr><literal type="string">"w+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>RECSZ</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NRECS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rsz</name> <init>= <expr><call><name>iwu_rand_range</name><argument_list>(<argument><expr><name>RECSZ</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rsz</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rsz</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>rsz</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal> <operator>+</operator> <call><name>iwu_rand_range</name><argument_list>(<argument><expr><literal type="number">95</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fstress1</name></expr></argument>, <argument><expr><literal type="string">"%08d:%s\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SREC</name></type> <name>rec</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>id</name>    <operator>=</operator> <name>i</name></expr>,
      <expr><operator>.</operator><name>addr</name>  <operator>=</operator> <name>addr</name></expr>,
      <expr><operator>.</operator><name>rsz</name>   <operator>=</operator> <name>rsz</name></expr>,
      <expr><operator>.</operator><name>freed</name> <operator>=</operator> <name>false</name></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>addr</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>rsz</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>kb_putp</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name>rt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clean_suite</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>fstress1</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fstress1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fstress1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>kb_destroy</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNLINK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_stress</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpow</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>mmap_all</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWFS_FSM</name></type> <name>fsm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM_OPTS</name></type> <name>opts</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>exfile</name>    <operator>=</operator> <block>{
      <expr><operator>.</operator><name>file</name>    <operator>=</operator> <block>{
        <expr><operator>.</operator><name>path</name>  <operator>=</operator> <name>path</name></expr>,
        <expr><operator>.</operator><name>omode</name> <operator>=</operator> <name>IWFS_OTRUNC</name></expr>
      }</block></expr>
    }</block></expr>,
    <expr><operator>.</operator><name>hdrlen</name>    <operator>=</operator> <literal type="number">62</literal></expr>,
    <expr><operator>.</operator><name>bpow</name>      <operator>=</operator> <name>bpow</name></expr>,
    <expr><operator>.</operator><name>oflags</name>    <operator>=</operator> <name>IWFSM_STRICT</name></expr>,
    <expr><operator>.</operator><name>mmap_all</name>  <operator>=</operator> <name>mmap_all</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwfs_fsmfile_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nRunning allocations...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>RECSZ</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NRECS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>sp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SREC</name></type> <name>k</name> <init>= <expr><block>{ <expr><operator>.</operator><name>id</name> <operator>=</operator> <name>i</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>iwfs_fsm_aflags</name></type> <name>aflags</name> <init>= <expr><name>IWFSM_SOLID_ALLOCATED_SPACE</name> <operator>|</operator> <name>IWFSM_ALLOC_NO_OVERALLOCATE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>rop</name> <init>= <expr><call><name>iwu_rand_u32</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>rop</name> <operator>%</operator> <literal type="number">3</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name>rop</name> <operator>%</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>k</name><operator>.</operator><name>id</name></name> <operator>=</operator> <call><name>iwu_rand_range</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SREC</name> <modifier>*</modifier></type><name>pr</name> <init>= <expr><call><name>kb_getp</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name>rt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>CU_ASSERT_PTR_NOT_NULL_FATAL</name><argument_list>(<argument><expr><name>pr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pr</name><operator>-&gt;</operator><name>freed</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rop</name> <operator>%</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <comment type="line">// deallocate previous</comment>
          <comment type="line">//fprintf(stderr, "%05d D %ld:%ld\n", pr-&gt;id, pr-&gt;alc_addr, pr-&gt;alc_len);</comment>
          <expr_stmt><expr><name><name>pr</name><operator>-&gt;</operator><name>freed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>deallocate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><name><name>pr</name><operator>-&gt;</operator><name>alc_addr</name></name></expr></argument>, <argument><expr><name><name>pr</name><operator>-&gt;</operator><name>alc_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>pr</name><operator>-&gt;</operator><name>reallocated</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>rop</name> <operator>%</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <comment type="line">// reallocate previous</comment>
          <comment type="line">//fprintf(stderr, "%05d R %ld:%ld\n", pr-&gt;id, pr-&gt;alc_addr, pr-&gt;alc_len);</comment>
          <expr_stmt><expr><name><name>pr</name><operator>-&gt;</operator><name>reallocated</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>uint32_t</name></type> <name>nlen</name> <init>= <expr><call><name>iwu_rand_range</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>pr</name><operator>-&gt;</operator><name>rsz</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>nlen</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>nlen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>reallocate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pr</name><operator>-&gt;</operator><name>alc_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pr</name><operator>-&gt;</operator><name>alc_len</name></name></expr></argument>, <argument><expr><name>IWFSM_SOLID_ALLOCATED_SPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>pr</name><operator>-&gt;</operator><name>alc_len</name></name> <operator>&gt;</operator> <name><name>pr</name><operator>-&gt;</operator><name>rsz</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><name><name>pr</name><operator>-&gt;</operator><name>alc_addr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rsz</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rsz</name></name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>off_t</name></type> <name>wsz</name> <init>= <expr><name><name>pr</name><operator>-&gt;</operator><name>alc_len</name></name> <operator>-</operator> <name><name>pr</name><operator>-&gt;</operator><name>rsz</name></name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>wsz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
              <decl_stmt><decl><type><name>int</name></type> <name>wc</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name>wsz</name></expr></argument>, <argument><expr><name><name>pr</name><operator>-&gt;</operator><name>rsz</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><name><name>pr</name><operator>-&gt;</operator><name>alc_addr</name></name> <operator>+</operator> <name><name>pr</name><operator>-&gt;</operator><name>alc_len</name></name> <operator>-</operator> <name>wsz</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>wc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>wc</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>wsz</name> <operator>-=</operator> <name>wc</name></expr>;</expr_stmt>
            </block_content>}</block></while>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>k</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SREC</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>kb_getp</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name>rt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_PTR_NOT_NULL_FATAL</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>fstress1</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>rsz</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>fstress1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>rsz</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>rsz</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>alc_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>alc_len</name></name></expr></argument>, <argument><expr><name>aflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//fprintf(stderr, "%05d A %ld:%ld\n", i, r-&gt;alc_addr, r-&gt;alc_len);</comment>
    <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_TRUE_FATAL</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>alc_len</name></name> <operator>&gt;=</operator> <name><name>r</name><operator>-&gt;</operator><name>rsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>alc_addr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>rsz</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>rsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>alc_len</name></name> <operator>&gt;</operator> <name><name>r</name><operator>-&gt;</operator><name>rsz</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>off_t</name></type> <name>wsz</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>alc_len</name></name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>rsz</name></name></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><name>wsz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>wc</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name>wsz</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>rsz</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>alc_addr</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>alc_len</name></name> <operator>-</operator> <name>wsz</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>wc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>wc</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>wsz</name> <operator>-=</operator> <name>wc</name></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><call><name><name>fsm</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Checking data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>exfile</name><operator>.</operator><name>file</name><operator>.</operator><name>omode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwfs_fsmfile_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf2</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>RECSZ</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NRECS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>sp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SREC</name></type> <name>k</name> <init>= <expr><block>{ <expr><operator>.</operator><name>id</name> <operator>=</operator> <name>i</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SREC</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>kb_getp</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name>rt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_PTR_NOT_NULL_FATAL</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>freed</name></name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_TRUE</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>alc_len</name></name> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>*</operator> <name>RECSZ</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>fstress1</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>rsz</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>fstress1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>rsz</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>off_t</name></type> <name>rn</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>rsz</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>alc_len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>alc_len</name></name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>rsz</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CU_ASSERT_TRUE_FATAL</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>reallocated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 20736</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>alc_addr</name></name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>rn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rn</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ri</name> <init>= <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>rn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>ri</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>rn</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>alc_len</name></name></expr>)</condition> <block>{<block_content>
      <while>while <condition>(<expr><name>rn</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>alc_len</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>off_t</name></type> <name>rz</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>alc_len</name></name> <operator>-</operator> <name>rn</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>rsz</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>alc_addr</name></name> <operator>+</operator> <name>rn</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>rz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ri</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>rz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>ri</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rn</name> <operator>+=</operator> <name>rz</name></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><call><name><name>fsm</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_stress1</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>test_stress</name><argument_list>(<argument><expr><literal type="string">"test_fsm_stress1.fsm"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_stress2</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>test_stress</name><argument_list>(<argument><expr><literal type="string">"test_fsm_stress2.fsm"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>CU_pSuite</name></type> <name>pSuite</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Initialize the CUnit test registry */</comment>
  <if_stmt><if>if <condition>(<expr><name>CUE_SUCCESS</name> <operator>!=</operator> <call><name>CU_initialize_registry</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Add a suite to the registry */</comment>
  <expr_stmt><expr><name>pSuite</name> <operator>=</operator> <call><name>CU_add_suite</name><argument_list>(<argument><expr><literal type="string">"iwfs_test3"</literal></expr></argument>, <argument><expr><name>init_suite</name></expr></argument>, <argument><expr><name>clean_suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pSuite</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CU_cleanup_registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Add the tests to the suite */</comment>
  <if_stmt><if>if <condition>(  <expr><operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>CU_add_test</name><argument_list>(<argument><expr><name>pSuite</name></expr></argument>, <argument><expr><literal type="string">"test_stress1"</literal></expr></argument>, <argument><expr><name>test_stress1</name></expr></argument>)</argument_list></call><operator>)</operator>
     <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>CU_add_test</name><argument_list>(<argument><expr><name>pSuite</name></expr></argument>, <argument><expr><literal type="string">"test_stress2"</literal></expr></argument>, <argument><expr><name>test_stress2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CU_cleanup_registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Run all tests using the CUnit Basic interface */</comment>
  <expr_stmt><expr><call><name>CU_basic_set_mode</name><argument_list>(<argument><expr><name>CU_BRM_VERBOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_basic_run_tests</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>CU_get_number_of_failures</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CU_cleanup_registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
