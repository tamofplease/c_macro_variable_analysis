<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iowow/src/fs/iwexfile.c"><comment type="block" format="doxygen">/**************************************************************************************************
 * IOWOW library
 *
 * MIT License
 *
 * Copyright (c) 2012-2022 Softmotions Ltd &lt;info@softmotions.com&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *************************************************************************************************/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwcfg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwexfile.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32/mman/mman.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct_decl>struct <name>MMAPSLOT</name>;</struct_decl>
<typedef>typedef <type><struct>struct <name>IWFS_EXT_IMPL</name> <block>{
  <decl_stmt><decl><type><name>IWFS_FILE</name></type> <name>file</name></decl>;</decl_stmt>            <comment type="block" format="doxygen">/**&lt; Underlying file */</comment>
  <decl_stmt><decl><type><name>IWDLSNR</name>  <modifier>*</modifier></type><name>dlsnr</name></decl>;</decl_stmt>           <comment type="block" format="doxygen">/**&lt; Data events listener */</comment>
  <decl_stmt><decl><type><name>pthread_rwlock_t</name> <modifier>*</modifier></type><name>rwlock</name></decl>;</decl_stmt>  <comment type="block" format="doxygen">/**&lt; Thread RW lock */</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>MMAPSLOT</name></name>  <modifier>*</modifier></type><name>mmslots</name></decl>;</decl_stmt> <comment type="block" format="doxygen">/**&lt; Memory mapping slots */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>rspolicy_ctx</name></decl>;</decl_stmt>        <comment type="block" format="doxygen">/**&lt; Custom opaque data for policy functions */</comment>
  <decl_stmt><decl><type><name>IW_EXT_RSPOLICY</name></type> <name>rspolicy</name></decl>;</decl_stmt>  <comment type="block" format="doxygen">/**&lt; File resize policy function ptr */</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>fsize</name></decl>;</decl_stmt>            <comment type="block" format="doxygen">/**&lt; Current file size */</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>maxoff</name></decl>;</decl_stmt>           <comment type="block" format="doxygen">/**&lt; Maximum allowed file offset. Unlimited if zero.
                                  If maximum offset is reached `IWFS_ERROR_MAXOFF` will be reported. */</comment>
  <decl_stmt><decl><type><name>size_t</name></type>     <name>psize</name></decl>;</decl_stmt>          <comment type="block" format="doxygen">/**&lt; System page size */</comment>
  <decl_stmt><decl><type><name>HANDLE</name></type>     <name>fh</name></decl>;</decl_stmt>             <comment type="block" format="doxygen">/**&lt; File handle */</comment>
  <decl_stmt><decl><type><name>iwfs_omode</name></type> <name>omode</name></decl>;</decl_stmt>          <comment type="block" format="doxygen">/**&lt; File open mode */</comment>
  <decl_stmt><decl><type><name>bool</name></type>       <name>use_locks</name></decl>;</decl_stmt>      <comment type="block" format="doxygen">/**&lt; Use rwlocks to guard method access */</comment>
}</block></struct></type> <name>EXF</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MMAPSLOT</name> <block>{
  <decl_stmt><decl><type><name>off_t</name></type>  <name>off</name></decl>;</decl_stmt>    <comment type="block" format="doxygen">/**&lt; Offset to a memory mapped region */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>    <comment type="block" format="doxygen">/**&lt; Actual size of memory mapped region. */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>maxlen</name></decl>;</decl_stmt> <comment type="block" format="doxygen">/**&lt; Maximum length of memory mapped region */</comment>
  <decl_stmt><decl><type><name>iwfs_ext_mmap_opts_t</name></type> <name>mmopts</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>MMAPSLOT</name></name>     <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>  <comment type="block" format="doxygen">/**&lt; Previous mmap slot. */</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>MMAPSLOT</name></name>     <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>  <comment type="block" format="doxygen">/**&lt; Next mmap slot. */</comment>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mmap</name></decl>;</decl_stmt>              <comment type="block" format="doxygen">/**&lt; Pointer to a mmaped address space
                                   in the case if file data is memory mapped. */</comment>
}</block></struct></type> <name>MMAPSLOT</name>;</typedef>

<function><type><name>IW_INLINE</name> <name>iwrc</name></type> <name>_exfile_wlock</name><parameter_list>(<parameter><decl><type><name>IWFS_EXT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>IWFS_EXT_IMPL</name></name> <modifier>*</modifier></type><name>impl</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>impl</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>impl</name><operator>-&gt;</operator><name>use_locks</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>impl</name><operator>-&gt;</operator><name>rwlock</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><name><name>impl</name><operator>-&gt;</operator><name>rwlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><ternary><condition><expr><name>rv</name></expr> ?</condition><then> <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>IW_ERROR_INVALID_STATE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>iwrc</name></type> <name>_exfile_rlock</name><parameter_list>(<parameter><decl><type><name>IWFS_EXT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>IWFS_EXT_IMPL</name></name> <modifier>*</modifier></type><name>impl</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>impl</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>impl</name><operator>-&gt;</operator><name>use_locks</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>impl</name><operator>-&gt;</operator><name>rwlock</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><call><name>pthread_rwlock_rdlock</name><argument_list>(<argument><expr><name><name>impl</name><operator>-&gt;</operator><name>rwlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><ternary><condition><expr><name>rv</name></expr> ?</condition><then> <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>IW_ERROR_INVALID_STATE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>iwrc</name></type> <name>_exfile_unlock</name><parameter_list>(<parameter><decl><type><name>IWFS_EXT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>IWFS_EXT_IMPL</name></name> <modifier>*</modifier></type><name>impl</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>impl</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>impl</name><operator>-&gt;</operator><name>use_locks</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>impl</name><operator>-&gt;</operator><name>rwlock</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><name><name>impl</name><operator>-&gt;</operator><name>rwlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><ternary><condition><expr><name>rv</name></expr> ?</condition><then> <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>IW_ERROR_INVALID_STATE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>iwrc</name></type> <name>_exfile_unlock2</name><parameter_list>(<parameter><decl><type><name>EXF</name> <modifier>*</modifier></type><name>impl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>impl</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>impl</name><operator>-&gt;</operator><name>use_locks</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>impl</name><operator>-&gt;</operator><name>rwlock</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><name><name>impl</name><operator>-&gt;</operator><name>rwlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><ternary><condition><expr><name>rv</name></expr> ?</condition><then> <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>IW_ERROR_INVALID_STATE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_exfile_destroylocks</name><parameter_list>(<parameter><decl><type><name>EXF</name> <modifier>*</modifier></type><name>impl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>impl</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_STATE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>impl</name><operator>-&gt;</operator><name>rwlock</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><call><name>pthread_rwlock_destroy</name><argument_list>(<argument><expr><name><name>impl</name><operator>-&gt;</operator><name>rwlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>impl</name><operator>-&gt;</operator><name>rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>impl</name><operator>-&gt;</operator><name>rwlock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><name>rv</name></expr> ?</condition><then> <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_exfile_initmmap_slot_lw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_EXT</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>MMAPSLOT</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f</name> <operator>&amp;&amp;</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>nlen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EXF</name> <modifier>*</modifier></type><name>impl</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>&gt;=</operator> <name><name>impl</name><operator>-&gt;</operator><name>fsize</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>nlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>nlen</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>maxlen</name></name></expr></argument>, <argument><expr><name><name>impl</name><operator>-&gt;</operator><name>fsize</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>nlen</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>  <comment type="line">// unmap me first</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mmopts</name></name> <operator>&amp;</operator> <name>IWFS_MMAP_PRIVATE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>msync</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mmap</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mmap</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>nlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mmopts</name></name> <operator>&amp;</operator> <name>IWFS_MMAP_PRIVATE</name><operator>)</operator></expr>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MAP_NORESERVE</name></cpp:ifdef>
                ?</condition><then> <expr><ternary><condition><expr><operator>(</operator><name>MAP_PRIVATE</name> <operator>+</operator> <name>MAP_NORESERVE</name><operator>)</operator></expr>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                ?</condition><then> <expr><name>MAP_PRIVATE</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                </then><else>: <expr><name>MAP_SHARED</name></expr></else></ternary></expr></then></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>prot</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>impl</name><operator>-&gt;</operator><name>omode</name></name> <operator>&amp;</operator> <name>IWFS_OWRITE</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>PROT_WRITE</name> <operator>+</operator> <name>PROT_READ</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>PROT_READ</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>nlen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mmap</name></name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mmap</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>prot</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name><name>impl</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// -V774</comment>
    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mmap</name></name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MADV_RANDOM</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mmopts</name></name> <operator>&amp;</operator> <name>IWFS_MMAP_RANDOM</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>MADV_RANDOM</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MADV_DONTFORK</name></cpp:ifdef>
    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>MADV_DONTFORK</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><name>flags</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>madvise</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mmap</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_exfile_initmmap_lw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_EXT</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EXF</name> <modifier>*</modifier></type><name>impl</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>impl</name><operator>-&gt;</operator><name>fsize</name></name> <operator>&amp;</operator> <operator>(</operator><name><name>impl</name><operator>-&gt;</operator><name>psize</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>MMAPSLOT</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>impl</name><operator>-&gt;</operator><name>mmslots</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_exfile_initmmap_slot_lw</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_exfile_truncate_lw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_EXT</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f</name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EXF</name> <modifier>*</modifier></type><name>impl</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwfs_omode</name></type> <name>omode</name> <init>= <expr><name><name>impl</name><operator>-&gt;</operator><name>omode</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>old_size</name> <init>= <expr><name><name>impl</name><operator>-&gt;</operator><name>fsize</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>rsh</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>IW_ROUNDUP</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>impl</name><operator>-&gt;</operator><name>psize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>old_size</name> <operator>==</operator> <name>size</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>old_size</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>omode</name> <operator>&amp;</operator> <name>IWFS_OWRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>IW_ERROR_READONLY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>impl</name><operator>-&gt;</operator><name>maxoff</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>size</name> <operator>&gt;</operator> <name><name>impl</name><operator>-&gt;</operator><name>maxoff</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>IWFS_ERROR_MAXOFF</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>impl</name><operator>-&gt;</operator><name>dlsnr</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>impl</name><operator>-&gt;</operator><name>dlsnr</name><operator>-&gt;</operator><name>onresize</name></name><argument_list>(<argument><expr><name><name>impl</name><operator>-&gt;</operator><name>dlsnr</name></name></expr></argument>, <argument><expr><name>old_size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>truncfail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rsh</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>impl</name><operator>-&gt;</operator><name>fsize</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name>size</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_fallocate</name><argument_list>(<argument><expr><name><name>impl</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>truncfail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_exfile_initmmap_lw</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>old_size</name> <operator>&gt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>omode</name> <operator>&amp;</operator> <name>IWFS_OWRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>IW_ERROR_READONLY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>impl</name><operator>-&gt;</operator><name>dlsnr</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>impl</name><operator>-&gt;</operator><name>dlsnr</name><operator>-&gt;</operator><name>onresize</name></name><argument_list>(<argument><expr><name><name>impl</name><operator>-&gt;</operator><name>dlsnr</name></name></expr></argument>, <argument><expr><name>old_size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>truncfail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rsh</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>impl</name><operator>-&gt;</operator><name>fsize</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name>size</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_exfile_initmmap_lw</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>truncfail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_ftruncate</name><argument_list>(<argument><expr><name><name>impl</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>truncfail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>

<label><name>truncfail</name>:</label>
  <expr_stmt><expr><name><name>impl</name><operator>-&gt;</operator><name>fsize</name></name> <operator>=</operator> <name>old_size</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_exfile_initmmap_lw</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_exfile_ensure_size_lw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_EXT</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>EXF</name> <modifier>*</modifier></type><name>impl</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>impl</name> <operator>&amp;&amp;</operator> <name><name>impl</name><operator>-&gt;</operator><name>rspolicy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>impl</name><operator>-&gt;</operator><name>fsize</name></name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>off_t</name></type> <name>nsz</name> <init>= <expr><call><name><name>impl</name><operator>-&gt;</operator><name>rspolicy</name></name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><name><name>impl</name><operator>-&gt;</operator><name>fsize</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>impl</name><operator>-&gt;</operator><name>rspolicy_ctx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>nsz</name> <operator>&lt;</operator> <name>sz</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>nsz</name> <operator>&amp;</operator> <operator>(</operator><name><name>impl</name><operator>-&gt;</operator><name>psize</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IWFS_ERROR_RESIZE_POLICY_FAIL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>impl</name><operator>-&gt;</operator><name>maxoff</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>nsz</name> <operator>&gt;</operator> <name><name>impl</name><operator>-&gt;</operator><name>maxoff</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>nsz</name> <operator>=</operator> <name><name>impl</name><operator>-&gt;</operator><name>maxoff</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nsz</name> <operator>&lt;</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>IWFS_ERROR_MAXOFF</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>_exfile_truncate_lw</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>nsz</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_exfile_sync</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_EXT</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>iwfs_sync_flags</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_exfile_rlock</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>EXF</name> <modifier>*</modifier></type><name>impl</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>mflags</name> <init>= <expr><name>MS_SYNC</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MMAPSLOT</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>impl</name><operator>-&gt;</operator><name>mmslots</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(  <expr><name><name>s</name><operator>-&gt;</operator><name>mmap</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mmap</name></name> <operator>!=</operator> <name>MAP_FAILED</name><operator>)</operator>
       <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mmopts</name></name> <operator>&amp;</operator> <name>IWFS_MMAP_PRIVATE</name><operator>)</operator>
       <operator>&amp;&amp;</operator> <operator>(</operator><call><name>msync</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mmap</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>mflags</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>impl</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>sync</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>impl</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_exfile_unlock2</name><argument_list>(<argument><expr><name>impl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_exfile_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_EXT</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>siz</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>MMAPSLOT</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EXF</name> <modifier>*</modifier></type><name>impl</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>off_t</name></type> <name>end</name> <init>= <expr><name>off</name> <operator>+</operator> <name>siz</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>off_t</name></type> <name>wp</name> <init>= <expr><name>siz</name></expr></init></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>off</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>end</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_OUT_OF_BOUNDS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>impl</name><operator>-&gt;</operator><name>maxoff</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>off</name> <operator>+</operator> <name>siz</name> <operator>&gt;</operator> <name><name>impl</name><operator>-&gt;</operator><name>maxoff</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IWFS_ERROR_MAXOFF</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_exfile_rlock</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;</operator> <name><name>impl</name><operator>-&gt;</operator><name>fsize</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_exfile_unlock2</name><argument_list>(<argument><expr><name>impl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_exfile_wlock</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;</operator> <name><name>impl</name><operator>-&gt;</operator><name>fsize</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_exfile_ensure_size_lw</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>impl</name><operator>-&gt;</operator><name>mmslots</name></name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <name>wp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>||</operator> <operator>(</operator><name>wp</name> <operator>+</operator> <name>off</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>off</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>&gt;</operator> <name>off</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>-</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>impl</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>impl</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name>buf</name> <operator>+</operator> <operator>(</operator><name>siz</name> <operator>-</operator> <name>wp</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>len</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>wp</name> <operator>=</operator> <name>wp</name> <operator>-</operator> <operator>*</operator><name>sp</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>off</name> <operator>=</operator> <name>off</name> <operator>+</operator> <operator>*</operator><name>sp</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>wp</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>&lt;=</operator> <name>off</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>off</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>impl</name><operator>-&gt;</operator><name>dlsnr</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>impl</name><operator>-&gt;</operator><name>dlsnr</name><operator>-&gt;</operator><name>onwrite</name></name><argument_list>(<argument><expr><name><name>impl</name><operator>-&gt;</operator><name>dlsnr</name></name></expr></argument>, <argument><expr><name>off</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name>buf</name> <operator>+</operator> <operator>(</operator><name>siz</name> <operator>-</operator> <name>wp</name><operator>)</operator></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mmap</name></name> <operator>+</operator> <operator>(</operator><name>off</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>off</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name>buf</name> <operator>+</operator> <operator>(</operator><name>siz</name> <operator>-</operator> <name>wp</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>wp</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>off</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>wp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>impl</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>impl</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name>buf</name> <operator>+</operator> <operator>(</operator><name>siz</name> <operator>-</operator> <name>wp</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>wp</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>wp</name> <operator>=</operator> <name>wp</name> <operator>-</operator> <operator>*</operator><name>sp</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <name>siz</name> <operator>-</operator> <name>wp</name></expr>;</expr_stmt>
<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_exfile_unlock2</name><argument_list>(<argument><expr><name>impl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_exfile_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_EXT</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>siz</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>MMAPSLOT</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EXF</name> <modifier>*</modifier></type><name>impl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>off_t</name></type> <name>end</name> <init>= <expr><name>off</name> <operator>+</operator> <name>siz</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>off_t</name></type> <name>rp</name> <init>= <expr><name>siz</name></expr></init></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>off</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>end</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_OUT_OF_BOUNDS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_exfile_rlock</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>impl</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>impl</name><operator>-&gt;</operator><name>mmslots</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;</operator> <name><name>impl</name><operator>-&gt;</operator><name>fsize</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>siz</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>impl</name><operator>-&gt;</operator><name>fsize</name></name> <operator>-</operator> <name>off</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>rp</name> <operator>=</operator> <name>siz</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <name>rp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>||</operator> <operator>(</operator><name>rp</name> <operator>+</operator> <name>off</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>off</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>&gt;</operator> <name>off</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>-</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>impl</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>impl</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>buf</name> <operator>+</operator> <operator>(</operator><name>siz</name> <operator>-</operator> <name>rp</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>len</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rp</name> <operator>=</operator> <name>rp</name> <operator>-</operator> <operator>*</operator><name>sp</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>off</name> <operator>=</operator> <name>off</name> <operator>+</operator> <operator>*</operator><name>sp</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rp</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>&lt;=</operator> <name>off</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>off</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>buf</name> <operator>+</operator> <operator>(</operator><name>siz</name> <operator>-</operator> <name>rp</name><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mmap</name></name> <operator>+</operator> <operator>(</operator><name>off</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>off</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rp</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>off</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>rp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>impl</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>impl</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>buf</name> <operator>+</operator> <operator>(</operator><name>siz</name> <operator>-</operator> <name>rp</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>rp</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rp</name> <operator>=</operator> <name>rp</name> <operator>-</operator> <operator>*</operator><name>sp</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <name>siz</name> <operator>-</operator> <name>rp</name></expr>;</expr_stmt>
<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_exfile_unlock2</name><argument_list>(<argument><expr><name>impl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_exfile_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_EXT</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>IWFS_EXT_STATE</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_exfile_rlock</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>EXF</name> <modifier>*</modifier></type><name>xf</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>xf</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>state</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xf</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>fsize</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>impl</name><operator>-&gt;</operator><name>fsize</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_exfile_unlock</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_exfile_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_EXT</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>siz</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>noff</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_exfile_rlock</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>EXF</name> <modifier>*</modifier></type><name>impl</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MMAPSLOT</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>impl</name><operator>-&gt;</operator><name>mmslots</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>mmap</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <name>noff</name> <operator>+</operator> <name>siz</name><operator>)</operator></expr>)</condition> <block>{<block_content> <comment type="line">// fully mmaped file</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_exfile_ensure_size_lw</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>noff</name> <operator>+</operator> <name>siz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>impl</name><operator>-&gt;</operator><name>dlsnr</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>impl</name><operator>-&gt;</operator><name>dlsnr</name><operator>-&gt;</operator><name>onwrite</name></name><argument_list>(<argument><expr><name><name>impl</name><operator>-&gt;</operator><name>dlsnr</name></name></expr></argument>, <argument><expr><name>noff</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mmap</name></name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>siz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mmap</name></name> <operator>+</operator> <name>noff</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mmap</name></name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>siz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>impl</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>impl</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>siz</name></expr></argument>, <argument><expr><name>noff</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_exfile_unlock</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_exfile_remove_mmap_lw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_EXT</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EXF</name> <modifier>*</modifier></type><name>impl</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MMAPSLOT</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>impl</name><operator>-&gt;</operator><name>mmslots</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>==</operator> <name>off</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWFS_ERROR_NOT_MMAPED</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>impl</name><operator>-&gt;</operator><name>mmslots</name></name> <operator>==</operator> <name>s</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>impl</name><operator>-&gt;</operator><name>mmslots</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>impl</name><operator>-&gt;</operator><name>mmslots</name><operator>-&gt;</operator><name>prev</name></name> <operator>==</operator> <name>s</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>impl</name><operator>-&gt;</operator><name>mmslots</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mmap</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_exfile_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_EXT</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name> <operator>||</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_exfile_wlock</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>EXF</name> <modifier>*</modifier></type><name>impl</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>impl</name><operator>-&gt;</operator><name>dlsnr</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>impl</name><operator>-&gt;</operator><name>dlsnr</name><operator>-&gt;</operator><name>onclosing</name></name><argument_list>(<argument><expr><name><name>impl</name><operator>-&gt;</operator><name>dlsnr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>MMAPSLOT</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>impl</name><operator>-&gt;</operator><name>mmslots</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_exfile_remove_mmap_lw</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>impl</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>impl</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>impl</name><operator>-&gt;</operator><name>rspolicy</name></name></expr>)</condition> <block>{<block_content>  <comment type="line">// dispose resize policy function</comment>
    <expr_stmt><expr><call><name><name>impl</name><operator>-&gt;</operator><name>rspolicy</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>impl</name><operator>-&gt;</operator><name>fsize</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>impl</name><operator>-&gt;</operator><name>rspolicy_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_exfile_unlock2</name><argument_list>(<argument><expr><name>impl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_exfile_destroylocks</name><argument_list>(<argument><expr><name>impl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>impl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_exfile_ensure_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_EXT</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_exfile_rlock</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>impl</name><operator>-&gt;</operator><name>fsize</name></name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>_exfile_unlock2</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_exfile_unlock2</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_exfile_wlock</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_exfile_ensure_size_lw</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_exfile_unlock2</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_exfile_truncate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_EXT</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_exfile_wlock</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_exfile_truncate_lw</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_exfile_unlock</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_exfile_add_mmap_lw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_EXT</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>, <parameter><decl><type><name>iwfs_ext_mmap_opts_t</name></type> <name>mmopts</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MMAPSLOT</name> <modifier>*</modifier></type><name>ns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EXF</name> <modifier>*</modifier></type><name>impl</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>off</name> <operator>&amp;</operator> <operator>(</operator><name><name>impl</name><operator>-&gt;</operator><name>psize</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_NOT_ALIGNED</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>OFF_T_MAX</name> <operator>-</operator> <name>off</name> <operator>&lt;</operator> <name>maxlen</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>maxlen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>OFF_T_MAX</name> <operator>-</operator> <name>off</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>IW_ROUNDUP</name><argument_list>(<argument><expr><name>maxlen</name></expr></argument>, <argument><expr><name><name>impl</name><operator>-&gt;</operator><name>psize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>&lt;</operator> <name>maxlen</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>OFF_T_MAX</name> <operator>-</operator> <name>off</name> <operator>&lt;</operator> <name>tmp</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>maxlen</name> <operator>=</operator> <call><name>IW_ROUNDOWN</name><argument_list>(<argument><expr><name>maxlen</name></expr></argument>, <argument><expr><name><name>impl</name><operator>-&gt;</operator><name>psize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>maxlen</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>maxlen</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_OUT_OF_BOUNDS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>maxlen</name> <operator>&amp;</operator> <operator>(</operator><name><name>impl</name><operator>-&gt;</operator><name>psize</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ns</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ns</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ns</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>maxlen</name></name> <operator>=</operator> <name>maxlen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>mmopts</name></name> <operator>=</operator> <name>mmopts</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_exfile_initmmap_slot_lw</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>impl</name><operator>-&gt;</operator><name>mmslots</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>ns</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>impl</name><operator>-&gt;</operator><name>mmslots</name></name> <operator>=</operator> <name>ns</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>MMAPSLOT</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>impl</name><operator>-&gt;</operator><name>mmslots</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>off_t</name></type> <name>e1</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>maxlen</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>off_t</name></type> <name>e2</name> <init>= <expr><name><name>ns</name><operator>-&gt;</operator><name>off</name></name> <operator>+</operator> <name><name>ns</name><operator>-&gt;</operator><name>maxlen</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>IW_RANGES_OVERLAP</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name><name>ns</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWFS_ERROR_MMAP_OVERLAP</name></expr>;</expr_stmt>
        <goto>goto <name>finish</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>ns</name><operator>-&gt;</operator><name>off</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>  <comment type="line">// insert before</comment>
      <expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>ns</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>ns</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name><name>impl</name><operator>-&gt;</operator><name>mmslots</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>impl</name><operator>-&gt;</operator><name>mmslots</name></name> <operator>=</operator> <name>ns</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// insert at the end</comment>
      <expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>impl</name><operator>-&gt;</operator><name>mmslots</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>ns</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>ns</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>ns</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>impl</name><operator>-&gt;</operator><name>mmslots</name></name> <operator>==</operator> <name>ns</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>impl</name><operator>-&gt;</operator><name>mmslots</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_exfile_add_mmap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_EXT</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>, <parameter><decl><type><name>iwfs_ext_mmap_opts_t</name></type> <name>mmopts</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f</name> <operator>&amp;&amp;</operator> <name>off</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_exfile_wlock</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_exfile_add_mmap_lw</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><name>mmopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_exfile_unlock</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>_exfile_acquire_mmap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_EXT</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>mm</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f</name> <operator>&amp;&amp;</operator> <name>mm</name> <operator>&amp;&amp;</operator> <name>off</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_exfile_rlock</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IW_UNLIKELY</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>mm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>sp</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>MMAPSLOT</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name><operator>-&gt;</operator><name>mmslots</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>==</operator> <name>off</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>mm</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mmap</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>sp</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><operator>*</operator><name>mm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>sp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>IWFS_ERROR_NOT_MMAPED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>_exfile_probe_mmap_lr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_EXT</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>mm</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f</name> <operator>&amp;&amp;</operator> <name>mm</name> <operator>&amp;&amp;</operator> <name>off</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>sp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>mm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EXF</name> <modifier>*</modifier></type><name>impl</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MMAPSLOT</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>impl</name><operator>-&gt;</operator><name>mmslots</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>==</operator> <name>off</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWFS_ERROR_NOT_MMAPED</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><name>mm</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mmap</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>sp</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>mm</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWFS_ERROR_NOT_MMAPED</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>_exfile_probe_mmap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_EXT</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>mm</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_exfile_rlock</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_exfile_probe_mmap_lr</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_exfile_unlock</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>_exfile_release_mmap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_EXT</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>_exfile_unlock</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_exfile_remove_mmap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_EXT</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f</name> <operator>&amp;&amp;</operator> <name>off</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_exfile_wlock</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_exfile_remove_mmap_lw</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_exfile_unlock</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_exfile_sync_mmap_lr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_EXT</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>iwfs_sync_flags</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f</name> <operator>&amp;&amp;</operator> <name>off</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EXF</name> <modifier>*</modifier></type><name>impl</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>mflags</name> <init>= <expr><name>MS_SYNC</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MMAPSLOT</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>impl</name><operator>-&gt;</operator><name>mmslots</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>off</name></name> <operator>==</operator> <name>off</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWFS_ERROR_NOT_MMAPED</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mmap</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mmap</name></name> <operator>!=</operator> <name>MAP_FAILED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(  <expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mmopts</name></name> <operator>&amp;</operator> <name>IWFS_MMAP_PRIVATE</name><operator>)</operator>
           <operator>&amp;&amp;</operator> <operator>(</operator><call><name>msync</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mmap</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>mflags</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWFS_ERROR_NOT_MMAPED</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_exfile_sync_mmap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_EXT</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>iwfs_sync_flags</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_exfile_rlock</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_exfile_sync_mmap_lr</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_exfile_unlock</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_exfile_remap_all</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWFS_EXT</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_exfile_wlock</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_exfile_initmmap_lw</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_exfile_unlock</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>off_t</name></type> <name>_exfile_default_szpolicy</name><parameter_list>(<parameter><decl><type><name>off_t</name></type> <name>nsize</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>csize</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>IWFS_EXT</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>nsize</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>IW_ROUNDUP</name><argument_list>(<argument><expr><name>nsize</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>impl</name><operator>-&gt;</operator><name>psize</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>off_t</name></type> <name>iw_exfile_szpolicy_fibo</name><parameter_list>(<parameter><decl><type><name>off_t</name></type> <name>nsize</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>csize</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>IWFS_EXT</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <struct>struct <name>_FIBO_CTX</name> <block>{
    <decl_stmt><decl><type><name>off_t</name></type> <name>prev_sz</name></decl>;</decl_stmt>
  }</block> <decl><modifier>*</modifier><name>ctx</name> <init>= <expr><operator>*</operator><name>_ctx</name></expr></init></decl>;</struct>
  <if_stmt><if>if <condition>(<expr><name>nsize</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>_ctx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>_ctx</name> <operator>=</operator> <name>ctx</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>_exfile_default_szpolicy</name><argument_list>(<argument><expr><name>nsize</name></expr></argument>, <argument><expr><name>csize</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>_ctx</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>res</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>csize</name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>prev_sz</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>nsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>IW_ROUNDUP</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>impl</name><operator>-&gt;</operator><name>psize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;</operator> <name>OFF_T_MAX</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>OFF_T_MAX</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>prev_sz</name></name> <operator>=</operator> <name>csize</name></expr>;</expr_stmt>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>off_t</name></type> <name>iw_exfile_szpolicy_mul</name><parameter_list>(<parameter><decl><type><name>off_t</name></type> <name>nsize</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>csize</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>IWFS_EXT</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IW_RNUM</name> <modifier>*</modifier></type><name>mul</name> <init>= <expr><operator>*</operator><name>_ctx</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>nsize</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mul</name> <operator>||</operator> <operator>!</operator><name><name>mul</name><operator>-&gt;</operator><name>dn</name></name> <operator>||</operator> <operator>(</operator><name><name>mul</name><operator>-&gt;</operator><name>n</name></name> <operator>&lt;</operator> <name><name>mul</name><operator>-&gt;</operator><name>dn</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error2</name><argument_list>(
      <argument><expr><literal type="string">"Invalid iw_exfile_szpolicy_mul context arguments, fallback to the "</literal>
      <literal type="string">"default resize policy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>_exfile_default_szpolicy</name><argument_list>(<argument><expr><name>nsize</name></expr></argument>, <argument><expr><name>csize</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>_ctx</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>ret</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>nsize</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ret</name> <operator>/=</operator> <name><name>mul</name><operator>-&gt;</operator><name>dn</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>*=</operator> <name><name>mul</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>IW_ROUNDUP</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>impl</name><operator>-&gt;</operator><name>psize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <name>OFF_T_MAX</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>OFF_T_MAX</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_exfile_initlocks</name><parameter_list>(<parameter><decl><type><name>IWFS_EXT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f</name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>impl</name><operator>-&gt;</operator><name>rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>EXF</name> <modifier>*</modifier></type><name>impl</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>impl</name><operator>-&gt;</operator><name>use_locks</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>impl</name><operator>-&gt;</operator><name>rwlock</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>impl</name><operator>-&gt;</operator><name>rwlock</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>impl</name><operator>-&gt;</operator><name>rwlock</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><call><name>pthread_rwlock_init</name><argument_list>(<argument><expr><name><name>impl</name><operator>-&gt;</operator><name>rwlock</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rv</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>impl</name><operator>-&gt;</operator><name>rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>impl</name><operator>-&gt;</operator><name>rwlock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwfs_exfile_open</name><parameter_list>(<parameter><decl><type><name>IWFS_EXT</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWFS_EXT_OPTS</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name><name>opts</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>path</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwfs_exfile_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>close</name></name> <operator>=</operator> <name>_exfile_close</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>read</name></name> <operator>=</operator> <name>_exfile_read</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>write</name></name> <operator>=</operator> <name>_exfile_write</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sync</name></name> <operator>=</operator> <name>_exfile_sync</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>_exfile_state</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>copy</name></name> <operator>=</operator> <name>_exfile_copy</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>ensure_size</name></name> <operator>=</operator> <name>_exfile_ensure_size</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>truncate</name></name> <operator>=</operator> <name>_exfile_truncate</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>truncate_unsafe</name></name> <operator>=</operator> <name>_exfile_truncate_lw</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>add_mmap</name></name> <operator>=</operator> <name>_exfile_add_mmap</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>add_mmap_unsafe</name></name> <operator>=</operator> <name>_exfile_add_mmap_lw</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>remove_mmap</name></name> <operator>=</operator> <name>_exfile_remove_mmap</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>remove_mmap_unsafe</name></name> <operator>=</operator> <name>_exfile_remove_mmap_lw</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>probe_mmap</name></name> <operator>=</operator> <name>_exfile_probe_mmap</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>probe_mmap_unsafe</name></name> <operator>=</operator> <name>_exfile_probe_mmap_lr</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sync_mmap</name></name> <operator>=</operator> <name>_exfile_sync_mmap</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sync_mmap_unsafe</name></name> <operator>=</operator> <name>_exfile_sync_mmap_lr</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>acquire_mmap</name></name> <operator>=</operator> <name>_exfile_acquire_mmap</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>release_mmap</name></name> <operator>=</operator> <name>_exfile_release_mmap</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>remap_all</name></name> <operator>=</operator> <name>_exfile_remap_all</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>EXF</name> <modifier>*</modifier></type><name>impl</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EXF</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>impl</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>impl</name><operator>-&gt;</operator><name>dlsnr</name></name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>dlsnr</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>impl</name><operator>-&gt;</operator><name>psize</name></name> <operator>=</operator> <call><name>iwp_alloc_unit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>impl</name><operator>-&gt;</operator><name>rspolicy</name></name> <operator>=</operator> <ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>rspolicy</name></name></expr> ?</condition><then> <expr><name><name>opts</name><operator>-&gt;</operator><name>rspolicy</name></name></expr> </then><else>: <expr><name>_exfile_default_szpolicy</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>impl</name><operator>-&gt;</operator><name>rspolicy_ctx</name></name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>rspolicy_ctx</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>impl</name><operator>-&gt;</operator><name>use_locks</name></name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>use_locks</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>maxoff</name></name> <operator>&gt;=</operator> <name><name>impl</name><operator>-&gt;</operator><name>psize</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>impl</name><operator>-&gt;</operator><name>maxoff</name></name> <operator>=</operator> <call><name>IW_ROUNDOWN</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>maxoff</name></name></expr></argument>, <argument><expr><name><name>impl</name><operator>-&gt;</operator><name>psize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_exfile_initlocks</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwfs_file_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>impl</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>IWFS_FILE_STATE</name></type> <name>fstate</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>impl</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>state</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>impl</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>IWP_FILE_STAT</name></type> <name>fstat</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_fstat</name><argument_list>(<argument><expr><name><name>fstate</name><operator>.</operator><name>opts</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fstat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>impl</name><operator>-&gt;</operator><name>fsize</name></name> <operator>=</operator> <name><name>fstat</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>impl</name><operator>-&gt;</operator><name>omode</name></name> <operator>=</operator> <name><name>fstate</name><operator>.</operator><name>opts</name><operator>.</operator><name>omode</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>impl</name><operator>-&gt;</operator><name>fh</name></name> <operator>=</operator> <name><name>fstate</name><operator>.</operator><name>fh</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>impl</name><operator>-&gt;</operator><name>fsize</name></name> <operator>&lt;</operator> <name><name>opts</name><operator>-&gt;</operator><name>initial_size</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_exfile_truncate_lw</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>initial_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>impl</name><operator>-&gt;</operator><name>fsize</name></name> <operator>&amp;</operator> <operator>(</operator><name><name>impl</name><operator>-&gt;</operator><name>psize</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>  <comment type="line">// not a page aligned</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_exfile_truncate_lw</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>impl</name><operator>-&gt;</operator><name>fsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_exfile_destroylocks</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>impl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_exfile_ecodefn</name><parameter_list>(<parameter><decl><type><name>locale_t</name></type> <name>locale</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ecode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>ecode</name> <operator>&gt;</operator> <name>_IWFS_EXT_ERROR_START</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ecode</name> <operator>&lt;</operator> <name>_IWFS_EXT_ERROR_END</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <switch>switch <condition>(<expr><name>ecode</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>IWFS_ERROR_MMAP_OVERLAP</name></expr>
      :</case> <return>return <expr><literal type="string">"Region is mmaped already, mmaping overlaps. "</literal>
             <literal type="string">"(IWFS_ERROR_MMAP_OVERLAP)"</literal></expr>;</return>
    <case>case <expr><name>IWFS_ERROR_NOT_MMAPED</name></expr>:</case>
      <return>return <expr><literal type="string">"Region is not mmaped. (IWFS_ERROR_NOT_MMAPED)"</literal></expr>;</return>
    <case>case <expr><name>IWFS_ERROR_RESIZE_POLICY_FAIL</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid result of resize policy function. "</literal>
             <literal type="string">"(IWFS_ERROR_RESIZE_POLICY_FAIL)"</literal></expr>;</return>
    <case>case <expr><name>IWFS_ERROR_MAXOFF</name></expr>:</case>
      <return>return <expr><literal type="string">"Maximum file offset reached. (IWFS_ERROR_MAXOFF)"</literal></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwfs_exfile_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_exfile_initialized</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iw_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_exfile_initialized</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="line">// initialized already</comment>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>iwlog_register_ecodefn</name><argument_list>(<argument><expr><name>_exfile_ecodefn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
