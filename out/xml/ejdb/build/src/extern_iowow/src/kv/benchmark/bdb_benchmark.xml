<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iowow/src/kv/benchmark/bdb_benchmark.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bmbase.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;db.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_DB</name></cpp:macro> <cpp:value>"bdb_bench.db"</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <name>BM_BDB</name> <block>{
  <decl_stmt><decl><type><name>DB</name> <modifier>*</modifier></type><name>dbp</name></decl>;</decl_stmt>
}</block></struct></type> <name>BM_BDB</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>env_setup</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" engine: %s\n"</literal></expr></argument>, <argument><expr><name>DB_VERSION_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>db_size_bytes</name><parameter_list>(<parameter><decl><type><name>BMCTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><ternary><condition><expr><name><name>bm</name><operator>.</operator><name>param_db</name></name></expr> ?</condition><then> <expr><name><name>bm</name><operator>.</operator><name>param_db</name></name></expr> </then><else>: <expr><name>DEFAULT_DB</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWP_FILE_STAT</name></type> <name>fst</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwp_fstat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><name>fst</name><operator>.</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>val_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>db_open</name><parameter_list>(<parameter><decl><type><name>BMCTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return> <comment type="line">// db is not closed properly</comment>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><ternary><condition><expr><name><name>bm</name><operator>.</operator><name>param_db</name></name></expr> ?</condition><then> <expr><name><name>bm</name><operator>.</operator><name>param_db</name></name></expr> </then><else>: <expr><name>DEFAULT_DB</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BM_BDB</name> <modifier>*</modifier></type><name>bmdb</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>bmdb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>db_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bmdb</name><operator>-&gt;</operator><name>dbp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"db_create: %s\n"</literal></expr></argument>, <argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bmdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>mode</name> <init>= <expr><name>DB_CREATE</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>freshdb</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>DB_TRUNCATE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>bmdb</name><operator>-&gt;</operator><name>dbp</name><operator>-&gt;</operator><name>open</name></name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>dbp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DB_BTREE</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="number">0664</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"db_open: %s\n"</literal></expr></argument>, <argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bmdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>bmdb</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>db_close</name><parameter_list>(<parameter><decl><type><name>BMCTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>BM_BDB</name> <modifier>*</modifier></type><name>bmdb</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name><name>bmdb</name><operator>-&gt;</operator><name>dbp</name><operator>-&gt;</operator><name>close</name></name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>dbp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"db_close: %s\n"</literal></expr></argument>, <argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bmdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>db_put</name><parameter_list>(<parameter><decl><type><name>BMCTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>sync</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>BM_BDB</name> <modifier>*</modifier></type><name>bmdb</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBT</name></type> <name>bkey</name> <init>= <expr><block>{ <expr><operator>.</operator><name>data</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>data</name></name></expr>, <expr><operator>.</operator><name>size</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBT</name></type> <name>bval</name> <init>= <expr><block>{ <expr><operator>.</operator><name>data</name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>data</name></name></expr>, <expr><operator>.</operator><name>size</name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>size</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name><name>bmdb</name><operator>-&gt;</operator><name>dbp</name><operator>-&gt;</operator><name>put</name></name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>dbp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bval</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"db_put: %s\n"</literal></expr></argument>, <argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>sync</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>bmdb</name><operator>-&gt;</operator><name>dbp</name><operator>-&gt;</operator><name>sync</name></name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>dbp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"db_sync: %s\n"</literal></expr></argument>, <argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>db_get</name><parameter_list>(<parameter><decl><type><name>BMCTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>found</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>BM_BDB</name> <modifier>*</modifier></type><name>bmdb</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBT</name></type> <name>bkey</name> <init>= <expr><block>{ <expr><operator>.</operator><name>data</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>data</name></name></expr>, <expr><operator>.</operator><name>size</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBT</name></type> <name>bval</name> <init>= <expr><block>{ <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>DB_DBT_MALLOC</name></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name><name>bmdb</name><operator>-&gt;</operator><name>dbp</name><operator>-&gt;</operator><name>get</name></name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>dbp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bval</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>bval</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>bval</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>DB_NOTFOUND</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"db_get: %s\n"</literal></expr></argument>, <argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>db_del</name><parameter_list>(<parameter><decl><type><name>BMCTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>sync</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>BM_BDB</name> <modifier>*</modifier></type><name>bmdb</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBT</name></type> <name>bkey</name> <init>= <expr><block>{ <expr><operator>.</operator><name>data</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>data</name></name></expr>, <expr><operator>.</operator><name>size</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name><name>bmdb</name><operator>-&gt;</operator><name>dbp</name><operator>-&gt;</operator><name>del</name></name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>dbp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bkey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>DB_NOTFOUND</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"db_del: %s\n"</literal></expr></argument>, <argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>sync</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>bmdb</name><operator>-&gt;</operator><name>dbp</name><operator>-&gt;</operator><name>sync</name></name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>dbp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"db_del: %s\n"</literal></expr></argument>, <argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>db_read_seq</name><parameter_list>(<parameter><decl><type><name>BMCTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>reverse</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>BM_BDB</name> <modifier>*</modifier></type><name>bmdb</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBC</name> <modifier>*</modifier></type><name>curp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBT</name></type> <name>bkey</name> <init>= <expr><block>{ <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>DB_DBT_MALLOC</name></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBT</name></type> <name>bval</name> <init>= <expr><block>{ <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>DB_DBT_MALLOC</name></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name><name>bmdb</name><operator>-&gt;</operator><name>dbp</name><operator>-&gt;</operator><name>cursor</name></name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>dbp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>curp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"db_read_seq: %s\n"</literal></expr></argument>, <argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>curp</name><operator>-&gt;</operator><name>get</name></name><argument_list>(<argument><expr><name>curp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bval</name></expr></argument>, <argument><expr><ternary><condition><expr><name>reverse</name></expr> ?</condition><then> <expr><name>DB_LAST</name></expr> </then><else>: <expr><name>DB_FIRST</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>DB_NOTFOUND</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>bkey</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>bkey</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>bval</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>bval</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bm</name><operator>.</operator><name>param_num</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>ret</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>bkey</name><operator>.</operator><name>data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bval</name><operator>.</operator><name>data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>curp</name><operator>-&gt;</operator><name>get</name></name><argument_list>(<argument><expr><name>curp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bval</name></expr></argument>, <argument><expr><ternary><condition><expr><name>reverse</name></expr> ?</condition><then> <expr><name>DB_PREV</name></expr> </then><else>: <expr><name>DB_NEXT</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>DB_NOTFOUND</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"db_read_seq: %s\n"</literal></expr></argument>, <argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>bkey</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>bkey</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>bval</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>bval</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name><name>curp</name><operator>-&gt;</operator><name>close</name></name><argument_list>(<argument><expr><name>curp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>db_cursor_to_key</name><parameter_list>(<parameter><decl><type><name>BMCTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>found</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>BM_BDB</name> <modifier>*</modifier></type><name>bmdb</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBC</name> <modifier>*</modifier></type><name>curp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBT</name></type> <name>bkey</name> <init>= <expr><block>{ <expr><operator>.</operator><name>data</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>data</name></name></expr>, <expr><operator>.</operator><name>size</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBT</name></type> <name>bval</name> <init>= <expr><block>{ <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>DB_DBT_MALLOC</name></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name><name>bmdb</name><operator>-&gt;</operator><name>dbp</name><operator>-&gt;</operator><name>cursor</name></name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>dbp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>curp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"db_cursor_to_key: %s\n"</literal></expr></argument>, <argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>curp</name><operator>-&gt;</operator><name>get</name></name><argument_list>(<argument><expr><name>curp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bval</name></expr></argument>, <argument><expr><name>DB_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>DB_NOTFOUND</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"db_cursor_to_key: %s\n"</literal></expr></argument>, <argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>bval</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>bval</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name><name>curp</name><operator>-&gt;</operator><name>close</name></name><argument_list>(<argument><expr><name>curp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>g_program</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bm</name><operator>.</operator><name>env_setup</name></name> <operator>=</operator> <name>env_setup</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bm</name><operator>.</operator><name>db_size_bytes</name></name> <operator>=</operator> <name>db_size_bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bm</name><operator>.</operator><name>val_free</name></name> <operator>=</operator> <name>val_free</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bm</name><operator>.</operator><name>db_open</name></name> <operator>=</operator> <name>db_open</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bm</name><operator>.</operator><name>db_close</name></name> <operator>=</operator> <name>db_close</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bm</name><operator>.</operator><name>db_put</name></name> <operator>=</operator> <name>db_put</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bm</name><operator>.</operator><name>db_get</name></name> <operator>=</operator> <name>db_get</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bm</name><operator>.</operator><name>db_del</name></name> <operator>=</operator> <name>db_del</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bm</name><operator>.</operator><name>db_read_seq</name></name> <operator>=</operator> <name>db_read_seq</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bm</name><operator>.</operator><name>db_cursor_to_key</name></name> <operator>=</operator> <name>db_cursor_to_key</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bm_bench_run</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
