<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iowow/src/kv/benchmark/leveldb_benchmark.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bmbase.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;leveldb/c.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_DB</name></cpp:macro> <cpp:value>"leveldb_bench.db"</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>BM_LEVELDB</name> <block>{
  <decl_stmt><decl><type><name>leveldb_t</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>leveldb_options_t</name> <modifier>*</modifier></type><name>options</name></decl>;</decl_stmt>
}</block></struct></type> <name>BM_LEVELDB</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>env_setup</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" engine: LevelDB %d.%d\n"</literal></expr></argument>, <argument><expr><call><name>leveldb_major_version</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>leveldb_minor_version</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>db_size_bytes</name><parameter_list>(<parameter><decl><type><name>BMCTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>PATH_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><ternary><condition><expr><name><name>bm</name><operator>.</operator><name>param_db</name></name></expr> ?</condition><then> <expr><name><name>bm</name><operator>.</operator><name>param_db</name></name></expr> </then><else>: <expr><name>DEFAULT_DB</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>opendir</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>d</name></expr>)</condition> <block>{<block_content>
    <while>while <condition>(<expr><operator>(</operator><name>dir</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>IWP_FILE_STAT</name></type> <name>fst</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwp_fstat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>fst</name><operator>.</operator><name>ftype</name></name> <operator>==</operator> <name>IWP_TYPE_FILE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>sz</name> <operator>+=</operator> <name><name>fst</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>sz</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>db_open</name><parameter_list>(<parameter><decl><type><name>BMCTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return> <comment type="line">// db is not closed properly</comment>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><ternary><condition><expr><name><name>bm</name><operator>.</operator><name>param_db</name></name></expr> ?</condition><then> <expr><name><name>bm</name><operator>.</operator><name>param_db</name></name></expr> </then><else>: <expr><name>DEFAULT_DB</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BM_LEVELDB</name> <modifier>*</modifier></type><name>bmdb</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>bmdb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>bmdb</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <call><name>leveldb_options_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>leveldb_options_set_create_if_missing</name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>options</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>freshdb</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>leveldb_destroy_db</name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>options</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>leveldb_free</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>iwp_removedir</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>bmdb</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <call><name>leveldb_open</name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>options</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>leveldb_options_destroy</name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR db_open: %s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>leveldb_free</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bmdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>bmdb</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>db_close</name><parameter_list>(<parameter><decl><type><name>BMCTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>BM_LEVELDB</name> <modifier>*</modifier></type><name>bmdb</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>leveldb_close</name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>leveldb_options_destroy</name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bmdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>db_put</name><parameter_list>(<parameter><decl><type><name>BMCTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>sync</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>BM_LEVELDB</name> <modifier>*</modifier></type><name>bmdb</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>leveldb_writeoptions_t</name> <modifier>*</modifier></type><name>wopt</name> <init>= <expr><call><name>leveldb_writeoptions_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>sync</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>leveldb_writeoptions_set_sync</name><argument_list>(<argument><expr><name>wopt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>leveldb_put</name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>wopt</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR db_put: %s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>leveldb_free</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>leveldb_writeoptions_destroy</name><argument_list>(<argument><expr><name>wopt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>db_get</name><parameter_list>(<parameter><decl><type><name>BMCTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>found</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>BM_LEVELDB</name> <modifier>*</modifier></type><name>bmdb</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>leveldb_readoptions_t</name> <modifier>*</modifier></type><name>ropt</name> <init>= <expr><call><name>leveldb_readoptions_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>leveldb_get</name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>ropt</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR db_get: %s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>leveldb_free</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>leveldb_readoptions_destroy</name><argument_list>(<argument><expr><name>ropt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>db_del</name><parameter_list>(<parameter><decl><type><name>BMCTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>sync</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>BM_LEVELDB</name> <modifier>*</modifier></type><name>bmdb</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>leveldb_writeoptions_t</name> <modifier>*</modifier></type><name>wopt</name> <init>= <expr><call><name>leveldb_writeoptions_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>sync</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>leveldb_writeoptions_set_sync</name><argument_list>(<argument><expr><name>wopt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>leveldb_delete</name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>wopt</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR db_del: %s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>leveldb_free</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>leveldb_writeoptions_destroy</name><argument_list>(<argument><expr><name>wopt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>db_read_seq</name><parameter_list>(<parameter><decl><type><name>BMCTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>reverse</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>BM_LEVELDB</name> <modifier>*</modifier></type><name>bmdb</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>leveldb_readoptions_t</name> <modifier>*</modifier></type><name>ropt</name> <init>= <expr><call><name>leveldb_readoptions_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>leveldb_iterator_t</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><call><name>leveldb_create_iterator</name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>ropt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>reverse</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>leveldb_iter_seek_to_last</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>leveldb_iter_seek_to_first</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bm</name><operator>.</operator><name>param_num</name></name> <operator>&amp;&amp;</operator> <call><name>leveldb_iter_valid</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>vlen</name></decl>, <decl><type ref="prev"/><name>klen</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>leveldb_iter_value</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>leveldb_iter_key</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>reverse</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>leveldb_iter_prev</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>leveldb_iter_next</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>leveldb_iter_destroy</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>leveldb_readoptions_destroy</name><argument_list>(<argument><expr><name>ropt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>db_cursor_to_key</name><parameter_list>(<parameter><decl><type><name>BMCTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>found</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>BM_LEVELDB</name> <modifier>*</modifier></type><name>bmdb</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>leveldb_readoptions_t</name> <modifier>*</modifier></type><name>ropt</name> <init>= <expr><call><name>leveldb_readoptions_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>leveldb_iterator_t</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><call><name>leveldb_create_iterator</name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>ropt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>leveldb_iter_seek</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <call><name>leveldb_iter_valid</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>found</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>vlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>leveldb_iter_value</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>leveldb_iter_destroy</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>leveldb_readoptions_destroy</name><argument_list>(<argument><expr><name>ropt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>g_program</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bm</name><operator>.</operator><name>env_setup</name></name> <operator>=</operator> <name>env_setup</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bm</name><operator>.</operator><name>db_size_bytes</name></name> <operator>=</operator> <name>db_size_bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bm</name><operator>.</operator><name>db_open</name></name> <operator>=</operator> <name>db_open</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bm</name><operator>.</operator><name>db_close</name></name> <operator>=</operator> <name>db_close</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bm</name><operator>.</operator><name>db_put</name></name> <operator>=</operator> <name>db_put</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bm</name><operator>.</operator><name>db_get</name></name> <operator>=</operator> <name>db_get</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bm</name><operator>.</operator><name>db_del</name></name> <operator>=</operator> <name>db_del</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bm</name><operator>.</operator><name>db_read_seq</name></name> <operator>=</operator> <name>db_read_seq</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bm</name><operator>.</operator><name>db_cursor_to_key</name></name> <operator>=</operator> <name>db_cursor_to_key</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bm_bench_run</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
