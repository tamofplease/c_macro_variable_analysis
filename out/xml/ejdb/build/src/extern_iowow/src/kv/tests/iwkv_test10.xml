<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iowow/src/kv/tests/iwkv_test10.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwkv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwkv_tests.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwkv_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwth.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KBUFSZ</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VBUFSZ</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>kbuf</name><index>[<expr><name>KBUFSZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>vbuf</name><index>[<expr><name>VBUFSZ</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>init_suite</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>iwkv_init</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clean_suite</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>iwkv_test10_1_impl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fmt_version</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWKV</name></type> <name>iwkv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV_OPTS</name></type> <name>opts</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>path</name>      <operator>=</operator> <name>fmt_version</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>?</operator> <literal type="string">"iwkv_test10_1_v2.db"</literal> <operator>:</operator> <literal type="string">"iwkv_test10_1_v1.db"</literal></expr>,
    <expr><operator>.</operator><name>oflags</name>    <operator>=</operator> <name>IWKV_TRUNC</name></expr>,
    <expr><operator>.</operator><name>wal</name>       <operator>=</operator> <block>{
      <expr><operator>.</operator><name>enabled</name> <operator>=</operator> <name>true</name></expr>
    }</block></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwkv_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iwkv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>IWDB</name></type> <name>db</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_db</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>IWKV_val</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>kbuf</name></expr></argument>, <argument><expr><name>KBUFSZ</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>, <argument><expr><name>VBUFSZ</name></expr></argument>, <argument><expr><literal type="string">"%03dval"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>key</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>kbuf</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>key</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>val</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>vbuf</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>val</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_put</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>IWDB</name></type> <name>db</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_db</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_db_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iwkv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>oflags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iwkv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>IWDB</name></type> <name>db</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_db</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>IWKV_val</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>kbuf</name></expr></argument>, <argument><expr><name>KBUFSZ</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>, <argument><expr><name>VBUFSZ</name></expr></argument>, <argument><expr><literal type="string">"%03dval"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>key</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>kbuf</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>key</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>vlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_get</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>IW_CMP</name><argument_list>(<argument><expr><name>cret</name></expr></argument>, <argument><expr><name>vbuf</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>cret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>iwkv_val_dispose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>IWDB</name></type> <name>db</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_db</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_db_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iwkv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// IWP_FILE_STAT fs;</comment>
  <comment type="line">// rc = iwp_fstat(opts.path, &amp;fs);</comment>
  <comment type="line">// CU_ASSERT_EQUAL_FATAL(rc, 0);</comment>
  <comment type="line">// CU_ASSERT_TRUE(fs.size &lt; 1024 * 1024);</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>iwkv_test10_1_v1</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>iwkv_test10_1_impl</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>iwkv_test10_1_v2</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>iwkv_test10_1_impl</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>CU_pSuite</name></type> <name>pSuite</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Initialize the CUnit test registry */</comment>
  <if_stmt><if>if <condition>(<expr><name>CUE_SUCCESS</name> <operator>!=</operator> <call><name>CU_initialize_registry</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Add a suite to the registry */</comment>
  <expr_stmt><expr><name>pSuite</name> <operator>=</operator> <call><name>CU_add_suite</name><argument_list>(<argument><expr><literal type="string">"iwkv_test8"</literal></expr></argument>, <argument><expr><name>init_suite</name></expr></argument>, <argument><expr><name>clean_suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pSuite</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CU_cleanup_registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Add the tests to the suite */</comment>
  <if_stmt><if>if <condition>(  <expr><operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>CU_add_test</name><argument_list>(<argument><expr><name>pSuite</name></expr></argument>, <argument><expr><literal type="string">"iwkv_test10_1_v1"</literal></expr></argument>, <argument><expr><name>iwkv_test10_1_v1</name></expr></argument>)</argument_list></call><operator>)</operator>
     <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>CU_add_test</name><argument_list>(<argument><expr><name>pSuite</name></expr></argument>, <argument><expr><literal type="string">"iwkv_test10_1_v2"</literal></expr></argument>, <argument><expr><name>iwkv_test10_1_v2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CU_cleanup_registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Run all tests using the CUnit Basic interface */</comment>
  <expr_stmt><expr><call><name>CU_basic_set_mode</name><argument_list>(<argument><expr><name>CU_BRM_VERBOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_basic_run_tests</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>CU_get_number_of_failures</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CU_cleanup_registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
