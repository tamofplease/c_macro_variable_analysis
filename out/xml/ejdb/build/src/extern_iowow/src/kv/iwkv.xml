<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iowow/src/kv/iwkv.c"><comment type="line">// -V::512</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwkv_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwconv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdalign.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_wnw_db_wl</name><parameter_list>(<parameter><type><name>db_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_api_db_wlock(db_)</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>IW_TESTS</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>int8_t</name></type> <name>iwkv_next_level</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>atomic_uint_fast64_t</name></type> <name>g_trigger</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IWKV_IS_INTERNAL_RC</name><parameter_list>(<parameter><type><name>rc_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((rc_) &gt; _IWKV_ERROR_END &amp;&amp; (rc_) &lt; _IWKV_RC_END)</cpp:value></cpp:define>

<function><type><name>IW_SOFT_INLINE</name> <name>iwrc</name></type> <name>_to_effective_key</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>_IWDB</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>okey</name></decl></parameter>,
  <parameter><decl><type><name>uint8_t</name></type> <name><name>nbuf</name><index>[<expr><specifier>static</specifier> <name>IW_VNUMBUFSZ</name></expr>]</index></name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>IW_VNUMBUFSZ</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"IW_VNUMBUFSZ &gt;= sizeof(uint64_t)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwdb_flags_t</name></type> <name>dbflg</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>dbflg</name></name></expr></init></decl>;</decl_stmt>
  <comment type="line">// Keys compound will be processed at lower levels at `addkv` routines</comment>
  <expr_stmt><expr><name><name>okey</name><operator>-&gt;</operator><name>compound</name></name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>compound</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>dbflg</name> <operator>&amp;</operator> <name>IWDB_VNUM64_KEYS</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>len</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>uint64_t</name></type> <name>llv</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>llv</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>IW_SETVNUMBUF64</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>, <argument><expr><name>llv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>IW_ERROR_OVERFLOW</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>okey</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>okey</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>nbuf</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>lv</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>IW_SETVNUMBUF</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>, <argument><expr><name>lv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>IW_ERROR_OVERFLOW</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>okey</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>okey</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>nbuf</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>IWKV_ERROR_KEY_NUM_VALUE_SIZE</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>okey</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>okey</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// NOTE: at least `2*IW_VNUMBUFSZ` must be allocated for key-&gt;data</comment>
<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_unpack_effective_key</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_IWDB</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>no_move_key_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwdb_flags_t</name></type> <name>dbflg</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>dbflg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>dbflg</name> <operator>&amp;</operator> <name>IWDB_COMPOUND_KEYS</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>step</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>IW_READVNUMBUF64</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>compound</name></name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>step</name> <operator>&gt;=</operator> <name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>IWKV_ERROR_KEY_NUM_VALUE_SIZE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>data</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <name>step</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_move_key_data</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>dbflg</name> <operator>&amp;</operator> <name>IWDB_VNUM64_KEYS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>compound</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>dbflg</name> <operator>&amp;</operator> <name>IWDB_VNUM64_KEYS</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>llv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>nbuf</name><index>[<expr><name>IW_VNUMBUFSZ</name></expr>]</index></name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>IW_VNUMBUFSZ</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>IWKV_ERROR_KEY_NUM_VALUE_SIZE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>IW_READVNUMBUF64_2</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>, <argument><expr><name>llv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>llv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_cmp_keys_prefix</name><parameter_list>(<parameter><decl><type><name>iwdb_flags_t</name></type> <name>dbflg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v1len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>dbflg</name> <operator>&amp;</operator> <name>IWDB_COMPOUND_KEYS</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// Compound keys mode</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>u1</name> <init>= <expr><name>v1</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>u2</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>step</name></decl>, <decl><type ref="prev"/><name>v2len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>compound</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>IW_READVNUMBUF64</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>v1len</name> <operator>-=</operator> <name>step</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>u1</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>v1len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// Inconsistent data?</comment>
      <return>return <expr><name>v2len</name> <operator>-</operator> <name>v1len</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>dbflg</name> <operator>&amp;</operator> <name>IWDB_VNUM64_KEYS</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>v2len</name> <operator>!=</operator> <name>v1len</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>v2len</name> <operator>&gt;</operator> <name>IW_VNUMBUFSZ</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>v1len</name> <operator>&gt;</operator> <name>IW_VNUMBUFSZ</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>v2len</name> <operator>-</operator> <name>v1len</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>n1</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type> <name><name>vbuf</name><index>[<expr><name>IW_VNUMBUFSZ</name></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>, <argument><expr><name>u1</name></expr></argument>, <argument><expr><name>v1len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>IW_READVNUMBUF64_2</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>, <argument><expr><name>n1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>, <argument><expr><name>u2</name></expr></argument>, <argument><expr><name>v2len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>IW_READVNUMBUF64_2</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><name>n1</name> <operator>&gt;</operator> <name>n2</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><name>n1</name> <operator>&lt;</operator> <name>n2</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><name>c1</name> <operator>&gt;</operator> <name>c2</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><name>c1</name> <operator>&lt;</operator> <name>c2</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dbflg</name> <operator>&amp;</operator> <name>IWDB_REALNUM_KEYS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iwafcmp</name><argument_list>(<argument><expr><name>u2</name></expr></argument>, <argument><expr><name>v2len</name></expr></argument>, <argument><expr><name>u1</name></expr></argument>, <argument><expr><name>v1len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><name>c1</name> <operator>&gt;</operator> <name>c2</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><name>c1</name> <operator>&lt;</operator> <name>c2</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>IW_CMP2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>u2</name></expr></argument>, <argument><expr><name>v2len</name></expr></argument>, <argument><expr><name>u1</name></expr></argument>, <argument><expr><name>v1len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>v2len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v2</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>dbflg</name> <operator>&amp;</operator> <name>IWDB_VNUM64_KEYS</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>v2len</name> <operator>!=</operator> <name>v1len</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>v2len</name> <operator>&gt;</operator> <name>IW_VNUMBUFSZ</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>v1len</name> <operator>&gt;</operator> <name>IW_VNUMBUFSZ</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>v2len</name> <operator>-</operator> <name>v1len</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>n1</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type> <name><name>vbuf</name><index>[<expr><name>IW_VNUMBUFSZ</name></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v1len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>IW_READVNUMBUF64_2</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>, <argument><expr><name>n1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name>v2len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>IW_READVNUMBUF64_2</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><ternary><condition><expr><name>n1</name> <operator>&gt;</operator> <name>n2</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><name>n1</name> <operator>&lt;</operator> <name>n2</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dbflg</name> <operator>&amp;</operator> <name>IWDB_REALNUM_KEYS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>iwafcmp</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><name>v2len</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v1len</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>IW_CMP2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name>v2len</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v1len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>int</name></type> <name>_cmp_keys</name><parameter_list>(<parameter><decl><type><name>iwdb_flags_t</name></type> <name>dbflg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v1len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><call><name>_cmp_keys_prefix</name><argument_list>(<argument><expr><name>dbflg</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v1len</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>dbflg</name> <operator>&amp;</operator> <operator>(</operator><name>IWDB_VNUM64_KEYS</name> <operator>|</operator> <name>IWDB_REALNUM_KEYS</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>dbflg</name> <operator>&amp;</operator> <name>IWDB_COMPOUND_KEYS</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>step</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>compound</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>IW_READVNUMBUF64</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>v1len</name> <operator>-=</operator> <name>step</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>key</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name>v1len</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>c1</name> <operator>&gt;</operator> <name>c2</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><name>c1</name> <operator>&lt;</operator> <name>c2</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>key</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>v1len</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>rv</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>_kv_val_dispose</name><parameter_list>(<parameter><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>_kv_dispose</name><parameter_list>(<parameter><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>_kv_val_dispose</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_kv_val_dispose</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwkv_val_dispose</name><parameter_list>(<parameter><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>_kv_val_dispose</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwkv_kv_dispose</name><parameter_list>(<parameter><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>_kv_dispose</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>_num2lebuf</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><specifier>static</specifier> <literal type="number">8</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>numdata</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sz</name> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator> <name>sz</name> <operator>==</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>llv</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>llv</name></expr></argument>, <argument><expr><name>numdata</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>llv</name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>llv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>lv</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><name>numdata</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lv</name> <operator>=</operator> <call><name>IW_HTOIL</name><argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">//-------------------------- IWKV/IWDB WORKERS</comment>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_iwkv_worker_inc_nolk</name><parameter_list>(<parameter><decl><type><name>IWKV</name></type> <name>iwkv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>iwkv</name> <operator>||</operator> <operator>!</operator><name><name>iwkv</name><operator>-&gt;</operator><name>open</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_STATE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_mtx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>iwkv</name><operator>-&gt;</operator><name>open</name></name></expr>)</condition> <block>{<block_content> <comment type="line">// -V547</comment>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>IW_ERROR_INVALID_STATE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><name><name>iwkv</name><operator>-&gt;</operator><name>wk_pending_exclusive</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><operator>++</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_count</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_db_worker_inc_nolk</name><parameter_list>(<parameter><decl><type><name>IWDB</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>db</name> <operator>||</operator> <operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>iwkv</name></name> <operator>||</operator> <operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>open</name></name> <operator>||</operator> <operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>open</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_STATE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>IWKV</name></type> <name>iwkv</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>iwkv</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_mtx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>iwkv</name><operator>-&gt;</operator><name>open</name></name> <operator>||</operator> <operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>open</name></name></expr>)</condition> <block>{<block_content> <comment type="line">// -V560</comment>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>IW_ERROR_INVALID_STATE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>wk_pending_exclusive</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><operator>++</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_count</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>++</operator><name><name>db</name><operator>-&gt;</operator><name>wk_count</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_iwkv_worker_dec_nolk</name><parameter_list>(<parameter><decl><type><name>IWKV</name></type> <name>iwkv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>iwkv</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_STATE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_mtx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// Last chanÑe to be consistent</comment>
    <expr_stmt><expr><operator>--</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_count</name></name></expr>;</expr_stmt>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>--</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_count</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_db_worker_dec_nolk</name><parameter_list>(<parameter><decl><type><name>IWDB</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>db</name> <operator>||</operator> <operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>iwkv</name></name></expr>)</condition> <block>{<block_content> <comment type="line">// do not use ENSURE_OPEN_DB here</comment>
    <return>return <expr><name>IW_ERROR_INVALID_STATE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>IWKV</name></type> <name>iwkv</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>iwkv</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_mtx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// Last chanÑe to be consistent</comment>
    <expr_stmt><expr><operator>--</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_count</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>--</operator><name><name>db</name><operator>-&gt;</operator><name>wk_count</name></name></expr>;</expr_stmt>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>--</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_count</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>--</operator><name><name>db</name><operator>-&gt;</operator><name>wk_count</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_wnw_iwkw_wl</name><parameter_list>(<parameter><decl><type><name>IWKV</name></type> <name>iwkv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>rwl</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_wnw</name><parameter_list>(<parameter><decl><type><name>IWKV</name></type> <name>iwkv</name></decl></parameter>, <parameter><function_decl><type><name>iwrc</name></type> (<modifier>*</modifier><name>after</name>)<parameter_list>(<parameter><decl><type><name>IWKV</name></type> <name>iwkv</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_mtx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>iwkv</name><operator>-&gt;</operator><name>wk_pending_exclusive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name><name>iwkv</name><operator>-&gt;</operator><name>wk_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>after</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>after</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>iwkv</name><operator>-&gt;</operator><name>wk_pending_exclusive</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rci</name> <operator>=</operator> <call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_wnw_db</name><parameter_list>(<parameter><decl><type><name>IWDB</name></type> <name>db</name></decl></parameter>, <parameter><function_decl><type><name>iwrc</name></type> (<modifier>*</modifier><name>after</name>)<parameter_list>(<parameter><decl><type><name>IWDB</name></type> <name>db</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV</name></type> <name>iwkv</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>iwkv</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_mtx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>wk_pending_exclusive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>wk_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>after</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>after</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>wk_pending_exclusive</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rci</name> <operator>=</operator> <call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//--------------------------  DB</comment>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_db_at</name><parameter_list>(<parameter><decl><type><name>IWKV</name></type> <name>iwkv</name></decl></parameter>, <parameter><decl><type><name>IWDB</name> <modifier>*</modifier></type><name>dbp</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rp</name></decl>, <decl><type ref="prev"/><name>bv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>lv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWDB</name></type> <name>db</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_IWDB</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>dbp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>db</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>pthread_rwlockattr_t</name></type> <name>attr</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_rwlockattr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__linux__</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>defined</name> <name>__USE_UNIX98</name> <operator>||</operator> <name>defined</name> <name>__USE_XOPEN2K</name><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name>pthread_rwlockattr_setkind_np</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name>rci</name> <operator>=</operator> <call><name>pthread_rwlock_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>rwl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rci</name> <operator>=</operator> <call><name>pthread_spin_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cursors_slk</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_rwlock_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>rwl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// [magic:u4,dbflg:u1,dbid:u4,next_db_blk:u4,p0:u4,n[24]:u4,c[24]:u4,meta_blk:u4,meta_blkn:u4]:217</comment>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>SBLK_DB</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>iwkv</name></name> <operator>=</operator> <name>iwkv</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rp</name> <operator>=</operator> <name>mm</name> <operator>+</operator> <name>addr</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IW_READLV</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>lv</name></expr></argument>, <argument><expr><name>lv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>lv</name> <operator>!=</operator> <name>IWDB_MAGIC</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWKV_ERROR_CORRUPTED</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>IW_READBV</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>bv</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>dbflg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IW_READLV</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>lv</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IW_READLV</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>lv</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>next_db_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>next_db_addr</name></name> <operator>=</operator> <call><name>BLK2ADDR</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>next_db_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// blknum -&gt; addr</comment>
  <expr_stmt><expr><name>rp</name> <operator>=</operator> <name>mm</name> <operator>+</operator> <name>addr</name> <operator>+</operator> <name>DOFF_C0_U4</name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SLEVELS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>IW_READLV</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>lv</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>lcnt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name><name>iwkv</name><operator>-&gt;</operator><name>fmt_version</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>IW_READLV</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>lv</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>meta_blk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>IW_READLV</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>lv</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>meta_blkn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>open</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>dbp</name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_rwlock_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>rwl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_db_save</name><parameter_list>(<parameter><decl><type><name>IWDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>newdb</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>lv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>mm</name> <operator>+</operator> <name><name>db</name><operator>-&gt;</operator><name>addr</name></name></expr></init></decl>, <decl><type ref="prev"/><name>bv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><name>wp</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWDLSNR</name> <modifier>*</modifier></type><name>dlsnr</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>dlsnr</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>next_db_addr</name></name> <operator>=</operator> <ternary><condition><expr><name><name>db</name><operator>-&gt;</operator><name>next</name></name></expr> ?</condition><then> <expr><name><name>db</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>addr</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <comment type="line">// [magic:u4,dbflg:u1,dbid:u4,next_db_blk:u4,p0:u4,n[24]:u4,c[24]:u4,meta_blk:u4,meta_blkn:u4]:217</comment>
  <expr_stmt><expr><call><name>IW_WRITELV</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lv</name></expr></argument>, <argument><expr><name>IWDB_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IW_WRITEBV</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>bv</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>dbflg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IW_WRITELV</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lv</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IW_WRITELV</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lv</name></expr></argument>, <argument><expr><call><name>ADDR2BLK</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>next_db_addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>dlsnr</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>dlsnr</name><operator>-&gt;</operator><name>onwrite</name></name><argument_list>(<argument><expr><name>dlsnr</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>wp</name> <operator>-</operator> <name>sp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fmt_version</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>newdb</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>+</operator> <name>SLEVELS</name> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// p0 + n[24] + c[24]</comment>
      <expr_stmt><expr><name>sp</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>wp</name> <operator>+=</operator> <literal type="number">4</literal> <operator>+</operator> <name>SLEVELS</name> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt> <comment type="line">// set to zero</comment>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>wp</name> <operator>+=</operator> <literal type="number">4</literal> <operator>+</operator> <name>SLEVELS</name> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt> <comment type="line">// skip</comment>
      <expr_stmt><expr><name>sp</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>IW_WRITELV</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lv</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>meta_blk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>IW_WRITELV</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lv</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>meta_blkn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>dlsnr</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>dlsnr</name><operator>-&gt;</operator><name>onwrite</name></name><argument_list>(<argument><expr><name>dlsnr</name></expr></argument>, <argument><expr><name>sp</name> <operator>-</operator> <name>mm</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>wp</name> <operator>-</operator> <name>sp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_db_load_chain</name><parameter_list>(<parameter><decl><type><name>IWKV</name></type> <name>iwkv</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWDB</name></type> <name>db</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ndb</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>addr</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_db_at</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ndb</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>db</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>ndb</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ndb</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>iwkv</name><operator>-&gt;</operator><name>first_db</name></name> <operator>=</operator> <name>ndb</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>db</name> <operator>=</operator> <name>ndb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>next_db_addr</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwhmap_put_u32</name><argument_list>(<argument><expr><name><name>iwkv</name><operator>-&gt;</operator><name>dbs</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>iwkv</name><operator>-&gt;</operator><name>last_db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>next_db_addr</name></name></expr>)</condition>;</do>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_db_release_lw</name><parameter_list>(<parameter><decl><type><name>IWDB</name> <modifier>*</modifier></type><name>dbp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>dbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>IWDB</name></type> <name>db</name> <init>= <expr><operator>*</operator><name>dbp</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_rwlock_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>rwl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_spin_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cursors_slk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>dbp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>DISPOSE_DB_CTX</name> <block>{
  <decl_stmt><decl><type><name>IWKV</name></type>   <name>iwkv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWDB</name></type>   <name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>blkn_t</name></type> <name>sbn</name></decl>;</decl_stmt> <comment type="line">// First `SBLK` block in DB</comment>
}</block></struct></type> <name>DISPOSE_DB_CTX</name>;</typedef>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_db_dispose_chain</name><parameter_list>(<parameter><decl><type><name>DISPOSE_DB_CTX</name> <modifier>*</modifier></type><name>dctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl>, <decl><type ref="prev"/><name>kvszpow</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>dctx</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>blkn_t</name></type> <name>sbn</name> <init>= <expr><name><name>dctx</name><operator>-&gt;</operator><name>sbn</name></name></expr></init></decl>, <decl><type ref="prev"/><name>kvblkn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>off_t</name></type> <name>page</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>sbn</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>off_t</name></type> <name>sba</name> <init>= <expr><call><name>BLK2ADDR</name><argument_list>(<argument><expr><name>sbn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCBREAK</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>kvblkn</name></expr></argument>, <argument><expr><name>mm</name> <operator>+</operator> <name>sba</name> <operator>+</operator> <name>SOFF_KBLK_U4</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>kvblkn</name> <operator>=</operator> <call><name>IW_ITOHL</name><argument_list>(<argument><expr><name>kvblkn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sbn</name></expr></argument>, <argument><expr><name>mm</name> <operator>+</operator> <name>sba</name> <operator>+</operator> <name>SOFF_N0_U4</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sbn</name> <operator>=</operator> <call><name>IW_ITOHL</name><argument_list>(<argument><expr><name>sbn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>kvblkn</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>kvszpow</name></expr></argument>, <argument><expr><name>mm</name> <operator>+</operator> <call><name>BLK2ADDR</name><argument_list>(<argument><expr><name>kvblkn</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>KBLK_SZPOW_OFF</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>dctx</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fmt_version</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>uint8_t</name></type> <name>bpos</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bpos</name></expr></argument>, <argument><expr><name>mm</name> <operator>+</operator> <name>sba</name> <operator>+</operator> <name>SOFF_BPOS_U1_V2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCBREAK</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>bpos</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>bpos</name> <operator>&lt;=</operator> <name>SBLK_PAGE_SBLK_NUM_V2</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>off_t</name></type> <name>npage</name> <init>= <expr><name>sba</name> <operator>-</operator> <operator>(</operator><name>bpos</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>SBLK_SZ</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>npage</name> <operator>!=</operator> <name>page</name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>page</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>fsm</name><operator>-&gt;</operator><name>check_allocation_status</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name>SBLK_PAGE_SZ_V2</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>deallocate</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name>SBLK_PAGE_SZ_V2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>RCBREAK</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>page</name> <operator>=</operator> <name>npage</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCBREAK</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// Deallocate `SBLK`</comment>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>deallocate</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>sba</name></expr></argument>, <argument><expr><name>SBLK_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCBREAK</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="line">// Deallocate `KVBLK`</comment>
    <if_stmt><if>if <condition>(<expr><name>kvblkn</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>deallocate</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><call><name>BLK2ADDR</name><argument_list>(<argument><expr><name>kvblkn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>kvszpow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCBREAK</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>page</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>fsm</name><operator>-&gt;</operator><name>check_allocation_status</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name>SBLK_PAGE_SZ_V2</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>deallocate</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name>SBLK_PAGE_SZ_V2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>_db_release_lw</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dctx</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_db_destroy_lw</name><parameter_list>(<parameter><decl><type><name>IWDB</name> <modifier>*</modifier></type><name>dbp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWDB</name></type> <name>db</name> <init>= <expr><operator>*</operator><name>dbp</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV</name></type> <name>iwkv</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>iwkv</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWDB</name></type> <name>prev</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>prev</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWDB</name></type> <name>next</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>first_sblkn</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>iwhmap_get_u32</name><argument_list>(<argument><expr><name><name>iwkv</name><operator>-&gt;</operator><name>dbs</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>IW_ERROR_INVALID_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>IW_ERROR_INVALID_STATE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>iwhmap_remove_u32</name><argument_list>(<argument><expr><name><name>iwkv</name><operator>-&gt;</operator><name>dbs</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_db_save</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_db_save</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// [magic:u4,dbflg:u1,dbid:u4,next_db_blk:u4,p0:u4,n[24]:u4,c[24]:u4,meta_blk:u4,meta_blkn:u4]:217</comment>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>first_sblkn</name></expr></argument>, <argument><expr><name>mm</name> <operator>+</operator> <name><name>db</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>DOFF_N0_U4</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>first_sblkn</name> <operator>=</operator> <call><name>IW_ITOHL</name><argument_list>(<argument><expr><name>first_sblkn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>iwkv</name><operator>-&gt;</operator><name>first_db</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>iwkv</name><operator>-&gt;</operator><name>first_db</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name><name>db</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>llv</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>first_db</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>llv</name> <operator>=</operator> <ternary><condition><expr><name>next</name></expr> ?</condition><then> <expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>next</name><operator>-&gt;</operator><name>addr</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>llv</name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>writehdr</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument> <comment type="block">/*skip magic*/</comment>, <argument><expr><operator>&amp;</operator><name>llv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>iwkv</name><operator>-&gt;</operator><name>last_db</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>iwkv</name><operator>-&gt;</operator><name>last_db</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name><name>db</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>iwkv</name><operator>-&gt;</operator><name>last_db</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// Cleanup DB</comment>
  <decl_stmt><decl><type><name>off_t</name></type> <name>db_addr</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>blkn_t</name></type> <name>meta_blk</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>meta_blk</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>blkn_t</name></type> <name>meta_blkn</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>meta_blkn</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>open</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>DISPOSE_DB_CTX</name></type> <name>dctx</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>sbn</name>  <operator>=</operator> <name>first_sblkn</name></expr>,
    <expr><operator>.</operator><name>iwkv</name> <operator>=</operator> <name>iwkv</name></expr>,
    <expr><operator>.</operator><name>db</name>   <operator>=</operator> <name>db</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_db_dispose_chain</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>meta_blk</name> <operator>&amp;&amp;</operator> <name>meta_blkn</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>deallocate</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><call><name>BLK2ADDR</name><argument_list>(<argument><expr><name>meta_blk</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BLK2ADDR</name><argument_list>(<argument><expr><name>meta_blkn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>deallocate</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>db_addr</name></expr></argument>, <argument><expr><name>DB_SZ</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_db_create_lw</name><parameter_list>(<parameter><decl><type><name>IWKV</name></type> <name>iwkv</name></decl></parameter>, <parameter><decl><type><name>dbid_t</name></type> <name>dbid</name></decl></parameter>, <parameter><decl><type><name>iwdb_flags_t</name></type> <name>dbflg</name></decl></parameter>, <parameter><decl><type><name>IWDB</name> <modifier>*</modifier></type><name>odb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>off_t</name></type> <name>baddr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>blen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>odb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>IWDB</name></type> <name>db</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_IWDB</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>db</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>pthread_rwlockattr_t</name></type> <name>attr</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_rwlockattr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__linux__</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>defined</name> <name>__USE_UNIX98</name> <operator>||</operator> <name>defined</name> <name>__USE_XOPEN2K</name><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name>pthread_rwlockattr_setkind_np</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name>rci</name> <operator>=</operator> <call><name>pthread_rwlock_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>rwl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rci</name> <operator>=</operator> <call><name>pthread_spin_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cursors_slk</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_rwlock_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>rwl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>allocate</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>DB_SZ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>baddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blen</name></expr></argument>, <argument><expr><name>IWKV_FSM_ALLOC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_db_release_lw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>iwkv</name></name> <operator>=</operator> <name>iwkv</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>dbflg</name></name> <operator>=</operator> <name>dbflg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>baddr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>dbid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>iwkv</name><operator>-&gt;</operator><name>last_db</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>iwkv</name><operator>-&gt;</operator><name>first_db</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>llv</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>iwkv</name><operator>-&gt;</operator><name>first_db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>llv</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>db</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>llv</name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>writehdr</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument> <comment type="block">/*skip magic*/</comment>, <argument><expr><operator>&amp;</operator><name>llv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>iwkv</name><operator>-&gt;</operator><name>last_db</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>iwkv</name><operator>-&gt;</operator><name>last_db</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwhmap_put_u32</name><argument_list>(<argument><expr><name><name>iwkv</name><operator>-&gt;</operator><name>dbs</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iwkv</name><operator>-&gt;</operator><name>last_db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_db_save</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_db_save</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>open</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>odb</name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>mm</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>deallocate</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>baddr</name></expr></argument>, <argument><expr><name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_db_release_lw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//--------------------------  KVBLK</comment>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>_kvblk_create</name><parameter_list>(<parameter><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>baddr</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>kvbpow</name></decl></parameter>, <parameter><decl><type><name>KVBLK</name> <modifier>*</modifier><modifier>*</modifier></type><name>oblk</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>KVBLK</name> <modifier>*</modifier></type><name>kblk</name> <init>= <expr><operator>&amp;</operator><name><name>lx</name><operator>-&gt;</operator><name>kaa</name><index>[<expr><name><name>lx</name><operator>-&gt;</operator><name>kaan</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>kblk</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name><name>lx</name><operator>-&gt;</operator><name>db</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kblk</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>baddr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kblk</name><operator>-&gt;</operator><name>maxoff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kblk</name><operator>-&gt;</operator><name>idxsz</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>IW_VNUMSIZE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>KVBLK_IDXNUM</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kblk</name><operator>-&gt;</operator><name>zidx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kblk</name><operator>-&gt;</operator><name>szpow</name></name> <operator>=</operator> <name>kvbpow</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kblk</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>KVBLK_DURTY</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>kblk</name><operator>-&gt;</operator><name>pidx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>kblk</name><operator>-&gt;</operator><name>pidx</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>oblk</name> <operator>=</operator> <name>kblk</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>AAPOS_INC</name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>kaan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>WUR</name> <name>iwrc</name></type> <name>_kvblk_key_peek</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>KVBLK</name> <modifier>*</modifier></type><name>kb</name></decl></parameter>,
  <parameter><decl><type><name>uint8_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>obuf</name></decl></parameter>,
  <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>len</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>klen</name></decl>, <decl><type ref="prev"/><name>step</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>rp</name> <init>= <expr><name>mm</name> <operator>+</operator> <name><name>kb</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name><name>kb</name><operator>-&gt;</operator><name>szpow</name></name><operator>)</operator> <operator>-</operator> <name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>off</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>IW_READVNUMBUF</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>klen</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>obuf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>IWKV_ERROR_CORRUPTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>IWKV_ERROR_CORRUPTED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rp</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>obuf</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <name>rp</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>klen</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>obuf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>_kvblk_value_peek</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>KVBLK</name> <modifier>*</modifier></type><name>kb</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>obuf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>idx</name> <operator>&lt;</operator> <name>KVBLK_IDXNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>len</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>klen</name></decl>, <decl><type ref="prev"/><name>step</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>rp</name> <init>= <expr><name>mm</name> <operator>+</operator> <name><name>kb</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name><name>kb</name><operator>-&gt;</operator><name>szpow</name></name><operator>)</operator> <operator>-</operator> <name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>off</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>IW_READVNUMBUF</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rp</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rp</name> <operator>+=</operator> <name>klen</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>obuf</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <name>rp</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>-</operator> <name>klen</name> <operator>-</operator> <name>step</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>obuf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_kvblk_key_get</name><parameter_list>(<parameter><decl><type><name>KVBLK</name> <modifier>*</modifier></type><name>kb</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>mm</name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <name>KVBLK_IDXNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>klen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>step</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>KVP</name> <modifier>*</modifier></type><name>kvp</name> <init>= <expr><operator>&amp;</operator><name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>compound</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>kvp</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// [klen:vn,key,value]</comment>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rp</name> <init>= <expr><name>mm</name> <operator>+</operator> <name><name>kb</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name><name>kb</name><operator>-&gt;</operator><name>szpow</name></name><operator>)</operator> <operator>-</operator> <name><name>kvp</name><operator>-&gt;</operator><name>off</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>IW_READVNUMBUF</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rp</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>klen</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>klen</name> <operator>&gt;</operator> <name><name>kvp</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>klen</name> <operator>&gt;</operator> <name><name>kvp</name><operator>-&gt;</operator><name>off</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>IWKV_ERROR_CORRUPTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>IWKV_ERROR_CORRUPTED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>klen</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>kb</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>dbflg</name></name> <operator>&amp;</operator> <name>IWDB_VNUM64_KEYS</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// Needed to provide enough buffer in _unpack_effective_key()</comment>
    <expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>MAX</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_kvblk_value_get</name><parameter_list>(<parameter><decl><type><name>KVBLK</name> <modifier>*</modifier></type><name>kb</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>mm</name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <name>KVBLK_IDXNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>klen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>step</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>KVP</name> <modifier>*</modifier></type><name>kvp</name> <init>= <expr><operator>&amp;</operator><name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>compound</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>kvp</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// [klen:vn,key,value]</comment>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rp</name> <init>= <expr><name>mm</name> <operator>+</operator> <name><name>kb</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name><name>kb</name><operator>-&gt;</operator><name>szpow</name></name><operator>)</operator> <operator>-</operator> <name><name>kvp</name><operator>-&gt;</operator><name>off</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>IW_READVNUMBUF</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rp</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>klen</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>klen</name> <operator>&gt;</operator> <name><name>kvp</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>klen</name> <operator>&gt;</operator> <name><name>kvp</name><operator>-&gt;</operator><name>off</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>IWKV_ERROR_CORRUPTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>IWKV_ERROR_CORRUPTED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rp</name> <operator>+=</operator> <name>klen</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>kvp</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>klen</name> <operator>+</operator> <name>step</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>kvp</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>klen</name> <operator>-</operator> <name>step</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>val</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_kvblk_kv_get</name><parameter_list>(<parameter><decl><type><name>KVBLK</name> <modifier>*</modifier></type><name>kb</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>mm</name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <name>KVBLK_IDXNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>klen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>step</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>KVP</name> <modifier>*</modifier></type><name>kvp</name> <init>= <expr><operator>&amp;</operator><name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>compound</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>compound</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>kvp</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// [klen:vn,key,value]</comment>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rp</name> <init>= <expr><name>mm</name> <operator>+</operator> <name><name>kb</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name><name>kb</name><operator>-&gt;</operator><name>szpow</name></name><operator>)</operator> <operator>-</operator> <name><name>kvp</name><operator>-&gt;</operator><name>off</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>IW_READVNUMBUF</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rp</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>klen</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>klen</name> <operator>&gt;</operator> <name><name>kvp</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>klen</name> <operator>&gt;</operator> <name><name>kvp</name><operator>-&gt;</operator><name>off</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>IWKV_ERROR_CORRUPTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>IWKV_ERROR_CORRUPTED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>klen</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>kb</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>dbflg</name></name> <operator>&amp;</operator> <name>IWDB_VNUM64_KEYS</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// Needed to provide enough buffer in _unpack_effective_key()</comment>
    <expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>MAX</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rp</name> <operator>+=</operator> <name>klen</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>kvp</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>klen</name> <operator>+</operator> <name>step</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>kvp</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>klen</name> <operator>-</operator> <name>step</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>val</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_kvblk_at_mm</name><parameter_list>(<parameter><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl></parameter>, <parameter><decl><type><name>KVBLK</name> <modifier>*</modifier></type><name>kbp</name></decl></parameter>, <parameter><decl><type><name>KVBLK</name> <modifier>*</modifier><modifier>*</modifier></type><name>blkp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>sv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>step</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>KVBLK</name> <modifier>*</modifier></type><name>kb</name> <init>= <expr><ternary><condition><expr><name>kbp</name></expr> ?</condition><then> <expr><name>kbp</name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>lx</name><operator>-&gt;</operator><name>kaa</name><index>[<expr><name><name>lx</name><operator>-&gt;</operator><name>kaan</name></name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>kb</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name><name>lx</name><operator>-&gt;</operator><name>db</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kb</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kb</name><operator>-&gt;</operator><name>maxoff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kb</name><operator>-&gt;</operator><name>idxsz</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kb</name><operator>-&gt;</operator><name>zidx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kb</name><operator>-&gt;</operator><name>szpow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kb</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>KVBLK_DEFAULT</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>kb</name><operator>-&gt;</operator><name>pidx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>kb</name><operator>-&gt;</operator><name>pidx</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>blkp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>rp</name> <operator>=</operator> <name>mm</name> <operator>+</operator> <name>addr</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>kb</name><operator>-&gt;</operator><name>szpow</name></name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rp</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IW_READSV</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>sv</name></expr></argument>, <argument><expr><name><name>kb</name><operator>-&gt;</operator><name>idxsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IW_UNLIKELY</name><argument_list>(<argument><expr><name><name>kb</name><operator>-&gt;</operator><name>idxsz</name></name> <operator>&gt;</operator> <name>KVBLK_MAX_IDX_SZ</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWKV_ERROR_CORRUPTED</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>KVBLK_IDXNUM</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>IW_READVNUMBUF64</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>off</name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rp</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>IW_READVNUMBUF</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rp</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>IW_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>off</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWKV_ERROR_CORRUPTED</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>finish</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>off</name> <operator>&gt;</operator> <name><name>kb</name><operator>-&gt;</operator><name>maxoff</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>kb</name><operator>-&gt;</operator><name>maxoff</name></name> <operator>=</operator> <name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>off</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>kb</name><operator>-&gt;</operator><name>zidx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>kb</name><operator>-&gt;</operator><name>zidx</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ridx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><operator>*</operator><name>blkp</name> <operator>=</operator> <name>kb</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rp</name> <operator>-</operator> <operator>(</operator><name>mm</name> <operator>+</operator> <name>addr</name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name><name>kb</name><operator>-&gt;</operator><name>szpow</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>kbp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>AAPOS_INC</name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>kaan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>off_t</name></type> <name>_kvblk_compacted_offset</name><parameter_list>(<parameter><decl><type><name>KVBLK</name> <modifier>*</modifier></type><name>kb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>off_t</name></type> <name>coff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>KVBLK_IDXNUM</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>coff</name> <operator>+=</operator> <name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>coff</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>off_t</name></type> <name>_kvblk_compacted_dsize</name><parameter_list>(<parameter><decl><type><name>KVBLK</name> <modifier>*</modifier></type><name>kb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>off_t</name></type> <name>coff</name> <init>= <expr><name>KVBLK_HDRSZ</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>KVBLK_IDXNUM</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>coff</name> <operator>+=</operator> <name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>coff</name> <operator>+=</operator> <call><name>IW_VNUMSIZE32</name><argument_list>(<argument><expr><name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>coff</name> <operator>+=</operator> <call><name>IW_VNUMSIZE</name><argument_list>(<argument><expr><name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>coff</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_kvblk_sync_mm</name><parameter_list>(<parameter><decl><type><name>KVBLK</name> <modifier>*</modifier></type><name>kb</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>kb</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>KVBLK_DURTY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>sp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>szp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>mm</name> <operator>+</operator> <name><name>kb</name><operator>-&gt;</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sptr</name> <init>= <expr><name>wp</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWDLSNR</name> <modifier>*</modifier></type><name>dlsnr</name> <init>= <expr><name><name>kb</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>dlsnr</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>kb</name><operator>-&gt;</operator><name>szpow</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>wp</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>szp</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>wp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>KVBLK_IDXNUM</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>KVP</name> <modifier>*</modifier></type><name>kvp</name> <init>= <expr><operator>&amp;</operator><name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>IW_SETVNUMBUF64</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>kvp</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>wp</name> <operator>+=</operator> <name>sp</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>IW_SETVNUMBUF</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>kvp</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>wp</name> <operator>+=</operator> <name>sp</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>sp</name> <operator>=</operator> <name>wp</name> <operator>-</operator> <name>szp</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kb</name><operator>-&gt;</operator><name>idxsz</name></name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>kb</name><operator>-&gt;</operator><name>idxsz</name></name> <operator>&lt;=</operator> <name>KVBLK_MAX_IDX_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>sp</name> <operator>=</operator> <call><name>IW_HTOIS</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>szp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>wp</name> <operator>-</operator> <operator>(</operator><name>mm</name> <operator>+</operator> <name><name>kb</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name><name>kb</name><operator>-&gt;</operator><name>szpow</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>dlsnr</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>dlsnr</name><operator>-&gt;</operator><name>onwrite</name></name><argument_list>(<argument><expr><name>dlsnr</name></expr></argument>, <argument><expr><name><name>kb</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>sptr</name></expr></argument>, <argument><expr><name>wp</name> <operator>-</operator> <name>sptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>kb</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>KVBLK_DURTY</name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_kvblk_sort_kv_lt</name><parameter_list>(<parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>, <parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>(((v1).off &gt; 0 ? (v1).off : -1UL) &lt; ((v2).off &gt; 0 ? (v2).off : -1UL))</cpp:value></cpp:define>

<comment type="line">// -V:KSORT_INIT:522, 756, 769</comment>
<macro><name>KSORT_INIT</name><argument_list>(<argument>kvblk</argument>, <argument>KVP</argument>, <argument>_kvblk_sort_kv_lt</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_kvblk_compact_mm</name><parameter_list>(<parameter><decl><type><name>KVBLK</name> <modifier>*</modifier></type><name>kb</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>off_t</name></type> <name>coff</name> <init>= <expr><call><name>_kvblk_compacted_offset</name><argument_list>(<argument><expr><name>kb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>coff</name> <operator>==</operator> <name><name>kb</name><operator>-&gt;</operator><name>maxoff</name></name></expr>)</condition> <block>{<block_content> <comment type="line">// compacted</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>KVP</name></type> <name><name>tidx</name><index>[<expr><name>KVBLK_IDXNUM</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>KVP</name></type> <name><name>tidx_tmp</name><index>[<expr><name>KVBLK_IDXNUM</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>idxsiz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWDLSNR</name> <modifier>*</modifier></type><name>dlsnr</name> <init>= <expr><name><name>kb</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>dlsnr</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>off_t</name></type> <name>blkend</name> <init>= <expr><name><name>kb</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name><name>kb</name><operator>-&gt;</operator><name>szpow</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>mm</name> <operator>+</operator> <name>blkend</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tidx</name></expr></argument>, <argument><expr><name><name>kb</name><operator>-&gt;</operator><name>pidx</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tidx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ks_mergesort_kvblk</name><argument_list>(<argument><expr><name>KVBLK_IDXNUM</name></expr></argument>, <argument><expr><name>tidx</name></expr></argument>, <argument><expr><name>tidx_tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>coff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>KVBLK_IDXNUM</name> <operator>&amp;&amp;</operator> <name><name>tidx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>off</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NDEBUG</name></cpp:ifndef>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tidx</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>off</name> <operator>&lt;</operator> <name><name>tidx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>KVP</name> <modifier>*</modifier></type><name>kvp</name> <init>= <expr><operator>&amp;</operator><name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name><name>tidx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ridx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>off_t</name></type> <name>noff</name> <init>= <expr><name>coff</name> <operator>+</operator> <name><name>kvp</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>kvp</name><operator>-&gt;</operator><name>off</name></name> <operator>&gt;</operator> <name>noff</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>noff</name> <operator>&lt;=</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name><name>kb</name><operator>-&gt;</operator><name>szpow</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>kvp</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;=</operator> <name>noff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>dlsnr</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>dlsnr</name><operator>-&gt;</operator><name>onwrite</name></name><argument_list>(<argument><expr><name>dlsnr</name></expr></argument>, <argument><expr><name>blkend</name> <operator>-</operator> <name>noff</name></expr></argument>, <argument><expr><name>wp</name> <operator>-</operator> <name><name>kvp</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name><name>kvp</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>wp</name> <operator>-</operator> <name>noff</name></expr></argument>, <argument><expr><name>wp</name> <operator>-</operator> <name><name>kvp</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name><name>kvp</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>kvp</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>noff</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>coff</name> <operator>+=</operator> <name><name>kvp</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>idxsiz</name> <operator>+=</operator> <call><name>IW_VNUMSIZE</name><argument_list>(<argument><expr><name><name>kvp</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>idxsiz</name> <operator>+=</operator> <call><name>IW_VNUMSIZE32</name><argument_list>(<argument><expr><name><name>kvp</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>idxsiz</name> <operator>+=</operator> <operator>(</operator><name>KVBLK_IDXNUM</name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>KVBLK_IDXNUM</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>kb</name><operator>-&gt;</operator><name>zidx</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>idxsiz</name> <operator>&lt;=</operator> <name><name>kb</name><operator>-&gt;</operator><name>idxsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kb</name><operator>-&gt;</operator><name>idxsz</name></name> <operator>=</operator> <name>idxsiz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kb</name><operator>-&gt;</operator><name>maxoff</name></name> <operator>=</operator> <name>coff</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>KVBLK_IDXNUM</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>kb</name><operator>-&gt;</operator><name>zidx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>kb</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>KVBLK_DURTY</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>_kvblk_compacted_offset</name><argument_list>(<argument><expr><name>kb</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>kb</name><operator>-&gt;</operator><name>maxoff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>off_t</name></type> <name>_kvblk_maxkvoff</name><parameter_list>(<parameter><decl><type><name>KVBLK</name> <modifier>*</modifier></type><name>kb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>off_t</name></type> <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>KVBLK_IDXNUM</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>off</name> <operator>&gt;</operator> <name>off</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>off</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>off</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_kvblk_rmkv</name><parameter_list>(<parameter><decl><type><name>KVBLK</name> <modifier>*</modifier></type><name>kb</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>kvblk_rmkv_opts_t</name></type> <name>opts</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWDLSNR</name> <modifier>*</modifier></type><name>dlsnr</name> <init>= <expr><name><name>kb</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>dlsnr</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>kb</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>off</name> <operator>&gt;=</operator> <name><name>kb</name><operator>-&gt;</operator><name>maxoff</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>kb</name><operator>-&gt;</operator><name>maxoff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>KVBLK_IDXNUM</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>!=</operator> <name>idx</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>off</name> <operator>&gt;</operator> <name><name>kb</name><operator>-&gt;</operator><name>maxoff</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>kb</name><operator>-&gt;</operator><name>maxoff</name></name> <operator>=</operator> <name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>off</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kb</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>KVBLK_DURTY</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>kb</name><operator>-&gt;</operator><name>zidx</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>idx</name> <operator>&lt;</operator> <name><name>kb</name><operator>-&gt;</operator><name>zidx</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>kb</name><operator>-&gt;</operator><name>zidx</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>RMKV_NO_RESIZE</name> <operator>&amp;</operator> <name>opts</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>kb</name><operator>-&gt;</operator><name>szpow</name></name> <operator>&gt;</operator> <name>KVBLK_INISZPOW</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>off_t</name></type> <name>nlen</name> <init>= <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name><name>kb</name><operator>-&gt;</operator><name>szpow</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>off_t</name></type> <name>dsz</name> <init>= <expr><call><name>_kvblk_compacted_dsize</name><argument_list>(<argument><expr><name>kb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>nlen</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>*</operator> <name>dsz</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>uint8_t</name></type> <name>npow</name> <init>= <expr><name><name>kb</name><operator>-&gt;</operator><name>szpow</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><name>npow</name> <operator>&gt;</operator> <name>KVBLK_INISZPOW</name> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>npow</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&gt;=</operator> <name>dsz</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>--</operator><name>npow</name></expr>;</expr_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_kvblk_compact_mm</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>off_t</name></type> <name>maxoff</name> <init>= <expr><call><name>_kvblk_maxkvoff</name><argument_list>(<argument><expr><name>kb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>dlsnr</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>dlsnr</name><operator>-&gt;</operator><name>onwrite</name></name><argument_list>(<argument><expr><name>dlsnr</name></expr></argument>, <argument><expr><name><name>kb</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>npow</name><operator>)</operator> <operator>-</operator> <name>maxoff</name></expr></argument>, <argument><expr><name>mm</name> <operator>+</operator> <name><name>kb</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>nlen</name> <operator>-</operator> <name>maxoff</name></expr></argument>, <argument><expr><name>maxoff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>mm</name> <operator>+</operator> <name><name>kb</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>npow</name><operator>)</operator> <operator>-</operator> <name>maxoff</name></expr></argument>,
              <argument><expr><name>mm</name> <operator>+</operator> <name><name>kb</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>nlen</name> <operator>-</operator> <name>maxoff</name></expr></argument>,
              <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>maxoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>mm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>reallocate</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>npow</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>kb</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nlen</name></expr></argument>, <argument><expr><name>IWKV_FSM_ALLOC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>kb</name><operator>-&gt;</operator><name>szpow</name></name> <operator>=</operator> <name>npow</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nlen</name> <operator>==</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name><name>kb</name><operator>-&gt;</operator><name>szpow</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>opts</name> <operator>|=</operator> <name>RMKV_SYNC</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>RMKV_SYNC</name> <operator>&amp;</operator> <name>opts</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_kvblk_sync_mm</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>mm</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_kvblk_addkv</name><parameter_list>(
  <parameter><decl><type><name>KVBLK</name>          <modifier>*</modifier></type><name>kb</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>val</name></decl></parameter>,
  <parameter><decl><type><name>uint8_t</name>        <modifier>*</modifier></type><name>oidx</name></decl></parameter>,
  <parameter><decl><type><name>bool</name></type>            <name>raw_key</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>oidx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>off_t</name></type> <name>msz</name></decl>;</decl_stmt>    <comment type="line">// max available free space</comment>
  <decl_stmt><decl><type><name>off_t</name></type> <name>rsz</name></decl>;</decl_stmt>    <comment type="line">// required size to add new key/value pair</comment>
  <decl_stmt><decl><type><name>off_t</name></type> <name>noff</name></decl>;</decl_stmt>   <comment type="line">// offset of new kvpair from end of block</comment>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sptr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>KVP</name> <modifier>*</modifier></type><name>kvp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWDB</name></type> <name>db</name> <init>= <expr><name><name>kb</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>compound</name> <init>= <expr><operator>!</operator><name>raw_key</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>dbflg</name></name> <operator>&amp;</operator> <name>IWDB_COMPOUND_KEYS</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>compacted</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWDLSNR</name> <modifier>*</modifier></type><name>dlsnr</name> <init>= <expr><name><name>kb</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>dlsnr</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>uval</name> <init>= <expr><operator>(</operator><name>IWKV_val</name><operator>*</operator><operator>)</operator> <name>val</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>ksize</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>compound</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ksize</name> <operator>+=</operator> <call><name>IW_VNUMSIZE</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>compound</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>off_t</name></type> <name>psz</name> <init>= <expr><call><name>IW_VNUMSIZE</name><argument_list>(<argument><expr><name>ksize</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>ksize</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>kb</name><operator>-&gt;</operator><name>zidx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>_IWKV_RC_KVBLOCK_FULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>psz</name> <operator>+=</operator> <name><name>uval</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>psz</name> <operator>&gt;</operator> <name>IWKV_MAX_KVSZ</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IWKV_ERROR_MAXKVSZ</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

<label><name>start</name>:</label>
  <comment type="line">// [szpow:u1,idxsz:u2,[ps0:vn,pl0:vn,..., ps32,pl32]____[[KV],...]] // KVBLK</comment>
  <expr_stmt><expr><name>msz</name> <operator>=</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name><name>kb</name><operator>-&gt;</operator><name>szpow</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>KVBLK_HDRSZ</name> <operator>+</operator> <name><name>kb</name><operator>-&gt;</operator><name>idxsz</name></name> <operator>+</operator> <name><name>kb</name><operator>-&gt;</operator><name>maxoff</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>msz</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>noff</name> <operator>=</operator> <name><name>kb</name><operator>-&gt;</operator><name>maxoff</name></name> <operator>+</operator> <name>psz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rsz</name> <operator>=</operator> <name>psz</name> <operator>+</operator> <call><name>IW_VNUMSIZE</name><argument_list>(<argument><expr><name>noff</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>IW_VNUMSIZE</name><argument_list>(<argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>msz</name> <operator>&lt;</operator> <name>rsz</name></expr>)</condition> <block>{<block_content> <comment type="line">// not enough space</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>compacted</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>compacted</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>_kvblk_compacted_offset</name><argument_list>(<argument><expr><name>kb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>kb</name><operator>-&gt;</operator><name>maxoff</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_kvblk_compact_mm</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>start</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// resize the whole block</comment>
    <decl_stmt><decl><type><name>off_t</name></type> <name>nlen</name> <init>= <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name><name>kb</name><operator>-&gt;</operator><name>szpow</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>off_t</name></type> <name>nsz</name> <init>= <expr><name>rsz</name> <operator>-</operator> <name>msz</name> <operator>+</operator> <name>nlen</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>off_t</name></type> <name>naddr</name> <init>= <expr><name><name>kb</name><operator>-&gt;</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>off_t</name></type> <name>olen</name> <init>= <expr><name>nlen</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint8_t</name></type> <name>npow</name> <init>= <expr><name><name>kb</name><operator>-&gt;</operator><name>szpow</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <operator>++</operator><name>npow</name><operator>)</operator> <operator>&lt;</operator> <name>nsz</name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>allocate</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>npow</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>naddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nlen</name></expr></argument>, <argument><expr><name>IWKV_FSM_ALLOC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nlen</name> <operator>==</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>npow</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>dlsnr</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>dlsnr</name><operator>-&gt;</operator><name>onwrite</name></name><argument_list>(<argument><expr><name>dlsnr</name></expr></argument>, <argument><expr><name>naddr</name></expr></argument>, <argument><expr><name>mm</name> <operator>+</operator> <name><name>kb</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>KVBLK_HDRSZ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mm</name> <operator>+</operator> <name>naddr</name></expr></argument>, <argument><expr><name>mm</name> <operator>+</operator> <name><name>kb</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>KVBLK_HDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>dlsnr</name><operator>-&gt;</operator><name>onwrite</name></name><argument_list>(<argument><expr><name>dlsnr</name></expr></argument>, <argument><expr><name>naddr</name> <operator>+</operator> <name>nlen</name> <operator>-</operator> <name><name>kb</name><operator>-&gt;</operator><name>maxoff</name></name></expr></argument>, <argument><expr><name>mm</name> <operator>+</operator> <name><name>kb</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>olen</name> <operator>-</operator> <name><name>kb</name><operator>-&gt;</operator><name>maxoff</name></name></expr></argument>, <argument><expr><name><name>kb</name><operator>-&gt;</operator><name>maxoff</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mm</name> <operator>+</operator> <name>naddr</name> <operator>+</operator> <name>nlen</name> <operator>-</operator> <name><name>kb</name><operator>-&gt;</operator><name>maxoff</name></name></expr></argument>, <argument><expr><name>mm</name> <operator>+</operator> <name><name>kb</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>olen</name> <operator>-</operator> <name><name>kb</name><operator>-&gt;</operator><name>maxoff</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>kb</name><operator>-&gt;</operator><name>maxoff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mm</name> <operator>+</operator> <name>naddr</name></expr></argument>, <argument><expr><name>mm</name> <operator>+</operator> <name><name>kb</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>KVBLK_HDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mm</name> <operator>+</operator> <name>naddr</name> <operator>+</operator> <name>nlen</name> <operator>-</operator> <name><name>kb</name><operator>-&gt;</operator><name>maxoff</name></name></expr></argument>, <argument><expr><name>mm</name> <operator>+</operator> <name><name>kb</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>olen</name> <operator>-</operator> <name><name>kb</name><operator>-&gt;</operator><name>maxoff</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>kb</name><operator>-&gt;</operator><name>maxoff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>deallocate</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name><name>kb</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>olen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>kb</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>naddr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kb</name><operator>-&gt;</operator><name>szpow</name></name> <operator>=</operator> <name>npow</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>oidx</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <name><name>kb</name><operator>-&gt;</operator><name>zidx</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>kvp</name> <operator>=</operator> <operator>&amp;</operator><name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name><name>kb</name><operator>-&gt;</operator><name>zidx</name></name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kvp</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name>psz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kvp</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>noff</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kvp</name><operator>-&gt;</operator><name>ridx</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <name><name>kb</name><operator>-&gt;</operator><name>zidx</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kb</name><operator>-&gt;</operator><name>maxoff</name></name> <operator>=</operator> <name>noff</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kb</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>KVBLK_DURTY</name></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>KVBLK_IDXNUM</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>!=</operator> <name><name>kb</name><operator>-&gt;</operator><name>zidx</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>kb</name><operator>-&gt;</operator><name>zidx</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>KVBLK_IDXNUM</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>kb</name><operator>-&gt;</operator><name>zidx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name><name>kb</name><operator>-&gt;</operator><name>szpow</name></name><operator>)</operator> <operator>&gt;=</operator> <name>KVBLK_HDRSZ</name> <operator>+</operator> <name><name>kb</name><operator>-&gt;</operator><name>idxsz</name></name> <operator>+</operator> <name><name>kb</name><operator>-&gt;</operator><name>maxoff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>kvp</name><operator>-&gt;</operator><name>off</name></name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name><name>kb</name><operator>-&gt;</operator><name>szpow</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>kvp</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;=</operator> <name><name>kvp</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>wp</name> <operator>=</operator> <name>mm</name> <operator>+</operator> <name><name>kb</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name><name>kb</name><operator>-&gt;</operator><name>szpow</name></name><operator>)</operator> <operator>-</operator> <name><name>kvp</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>sptr</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
  <comment type="line">// [klen:vn,key,value]</comment>
  <expr_stmt><expr><call><name>IW_SETVNUMBUF</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><name>ksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>wp</name> <operator>+=</operator> <name>sp</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>compound</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>IW_SETVNUMBUF64</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>compound</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>wp</name> <operator>+=</operator> <name>sp</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>wp</name> <operator>+=</operator> <name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>uval</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>uval</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>uval</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>wp</name> <operator>+=</operator> <name><name>uval</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NDEBUG</name></cpp:ifndef>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>wp</name> <operator>-</operator> <name>sptr</name> <operator>==</operator> <name><name>kvp</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if <condition>(<expr><name>dlsnr</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>dlsnr</name><operator>-&gt;</operator><name>onwrite</name></name><argument_list>(<argument><expr><name>dlsnr</name></expr></argument>, <argument><expr><name><name>kb</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name><name>kb</name><operator>-&gt;</operator><name>szpow</name></name><operator>)</operator> <operator>-</operator> <name><name>kvp</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name>sptr</name></expr></argument>, <argument><expr><name>wp</name> <operator>-</operator> <name>sptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_kvblk_updatev</name><parameter_list>(
  <parameter><decl><type><name>KVBLK</name>          <modifier>*</modifier></type><name>kb</name></decl></parameter>,
  <parameter><decl><type><name>uint8_t</name>        <modifier>*</modifier></type><name>idxp</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,                              <comment type="block">/* Nullable */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>val</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>idxp</name> <operator>&lt;</operator> <name>KVBLK_IDXNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>nlen</name></decl>, <decl><type ref="prev"/><name>sz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>pidx</name> <init>= <expr><operator>*</operator><name>idxp</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWDB</name></type> <name>db</name> <init>= <expr><name><name>kb</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWDLSNR</name> <modifier>*</modifier></type><name>dlsnr</name> <init>= <expr><name><name>kb</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>dlsnr</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>uval</name> <init>= <expr><operator>(</operator><name>IWKV_val</name><operator>*</operator><operator>)</operator> <name>val</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>ukey</name> <init>= <expr><operator>(</operator><name>IWKV_val</name><operator>*</operator><operator>)</operator> <name>key</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV_val</name></type> <name>skey</name></decl>;</decl_stmt> <comment type="line">// stack allocated key/val</comment>
  <decl_stmt><decl><type><name>KVP</name> <modifier>*</modifier></type><name>kvp</name> <init>= <expr><operator>&amp;</operator><name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>pidx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>kbsz</name> <init>= <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name><name>kb</name><operator>-&gt;</operator><name>szpow</name></name></expr></init></decl>;</decl_stmt>                            <comment type="line">// kvblk size</comment>
  <decl_stmt><decl><type><name>off_t</name></type> <name>freesz</name> <init>= <expr><name>kbsz</name> <operator>-</operator> <name>KVBLK_HDRSZ</name> <operator>-</operator> <name><name>kb</name><operator>-&gt;</operator><name>idxsz</name></name> <operator>-</operator> <name><name>kb</name><operator>-&gt;</operator><name>maxoff</name></name></expr></init></decl>;</decl_stmt> <comment type="line">// free space available</comment>
  <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>freesz</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>wp</name> <operator>=</operator> <name>mm</name> <operator>+</operator> <name><name>kb</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>kbsz</name> <operator>-</operator> <name><name>kvp</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>sp</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IW_READVNUMBUF</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>wp</name> <operator>+=</operator> <name>sz</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ukey</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>!=</operator> <name><name>ukey</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWKV_ERROR_CORRUPTED</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>wp</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>off_t</name></type> <name>rsize</name> <init>= <expr><name>sz</name> <operator>+</operator> <name>len</name> <operator>+</operator> <name><name>uval</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt> <comment type="line">// required size</comment>
  <if_stmt><if>if <condition>(<expr><name>rsize</name> <operator>&lt;=</operator> <name><name>kvp</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>uval</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>uval</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>dlsnr</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>dlsnr</name><operator>-&gt;</operator><name>onwrite</name></name><argument_list>(<argument><expr><name>dlsnr</name></expr></argument>, <argument><expr><name>wp</name> <operator>-</operator> <name>mm</name></expr></argument>, <argument><expr><name><name>uval</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>uval</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>wp</name> <operator>+=</operator> <name><name>uval</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>wp</name> <operator>-</operator> <name>sp</name><operator>)</operator> <operator>!=</operator> <name><name>kvp</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>kvp</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>wp</name> <operator>-</operator> <name>sp</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>kb</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>KVBLK_DURTY</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>KVP</name></type> <name><name>tidx</name><index>[<expr><name>KVBLK_IDXNUM</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>KVP</name></type> <name><name>tidx_tmp</name><index>[<expr><name>KVBLK_IDXNUM</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>off_t</name></type> <name>koff</name> <init>= <expr><name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>pidx</name></expr>]</index></name><operator>.</operator><name>off</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tidx</name></expr></argument>, <argument><expr><name><name>kb</name><operator>-&gt;</operator><name>pidx</name></name></expr></argument>, <argument><expr><name>KVBLK_IDXNUM</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ks_mergesort_kvblk</name><argument_list>(<argument><expr><name>KVBLK_IDXNUM</name></expr></argument>, <argument><expr><name>tidx</name></expr></argument>, <argument><expr><name>tidx_tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kb</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>KVBLK_DURTY</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ukey</name></expr>)</condition> <block>{<block_content> <comment type="line">// we need a key</comment>
      <expr_stmt><expr><name>ukey</name> <operator>=</operator> <operator>&amp;</operator><name>skey</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_kvblk_key_get</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>pidx</name></expr></argument>, <argument><expr><name>ukey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>KVBLK_IDXNUM</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>tidx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>off</name> <operator>==</operator> <name>koff</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>koff</name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>tidx</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>off</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>&gt;=</operator> <name>rsize</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>nlen</name> <operator>=</operator> <name>wp</name> <operator>+</operator> <name><name>uval</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>sp</name></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>nlen</name> <operator>&gt;</operator> <name><name>kvp</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>freesz</name> <operator>-</operator> <call><name>IW_VNUMSIZE32</name><argument_list>(<argument><expr><name>nlen</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>IW_VNUMSIZE32</name><argument_list>(<argument><expr><name><name>kvp</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content> <comment type="line">// enough space?</comment>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>uval</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>uval</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>dlsnr</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>dlsnr</name><operator>-&gt;</operator><name>onwrite</name></name><argument_list>(<argument><expr><name>dlsnr</name></expr></argument>, <argument><expr><name>wp</name> <operator>-</operator> <name>mm</name></expr></argument>, <argument><expr><name><name>uval</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>uval</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>wp</name> <operator>+=</operator> <name><name>uval</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>kvp</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>nlen</name></expr>;</expr_stmt>
            <break>break;</break>
            <empty_stmt>;</empty_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>mm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_kvblk_rmkv</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>pidx</name></expr></argument>, <argument><expr><name>RMKV_NO_RESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_kvblk_addkv</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>ukey</name></expr></argument>, <argument><expr><name>uval</name></expr></argument>, <argument><expr><name>idxp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>ukey</name> <operator>!=</operator> <name>key</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_kv_val_dispose</name><argument_list>(<argument><expr><name>ukey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>mm</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//--------------------------  SBLK</comment>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>_sblk_release</name><parameter_list>(<parameter><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name></decl></parameter>, <parameter><decl><type><name>SBLK</name> <modifier>*</modifier><modifier>*</modifier></type><name>sblkp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sblkp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>sblkp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>sblk</name> <init>= <expr><operator>*</operator><name>sblkp</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SBLK_DURTY</name></expr>;</expr_stmt>       <comment type="line">// clear dirty flag</comment>
  <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>sblkp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>WUR</name> <name>iwrc</name></type> <name>_sblk_loadkvblk_mm</name><parameter_list>(<parameter><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name></decl></parameter>, <parameter><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>sblk</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name> <operator>&amp;&amp;</operator> <name><name>sblk</name><operator>-&gt;</operator><name>kvblkn</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>_kvblk_at_mm</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><call><name>BLK2ADDR</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblkn</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_sblk_is_only_one_on_page_v2</name><parameter_list>(<parameter><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl></parameter>, <parameter><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>sblk</name></decl></parameter>, <parameter><decl><type><name>off_t</name> <modifier>*</modifier></type><name>page_addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>page_addr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sblk</name><operator>-&gt;</operator><name>bpos</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sblk</name><operator>-&gt;</operator><name>bpos</name></name> <operator>&lt;=</operator> <name>SBLK_PAGE_SBLK_NUM_V2</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>off_t</name></type> <name>addr</name> <init>= <expr><name><name>sblk</name><operator>-&gt;</operator><name>addr</name></name> <operator>-</operator> <operator>(</operator><name><name>sblk</name><operator>-&gt;</operator><name>bpos</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>SBLK_SZ</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>page_addr</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SBLK_PAGE_SBLK_NUM_V2</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>sblk</name><operator>-&gt;</operator><name>bpos</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint8_t</name></type> <name>bv</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>, <argument><expr><name>mm</name> <operator>+</operator> <name>addr</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>SBLK_SZ</name> <operator>+</operator> <name>SOFF_BPOS_U1_V2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>bv</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return> <comment type="line">// be safe</comment>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>WUR</name> <name>iwrc</name></type> <name>_sblk_destroy</name><parameter_list>(<parameter><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name></decl></parameter>, <parameter><decl><type><name>SBLK</name> <modifier>*</modifier><modifier>*</modifier></type><name>sblkp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sblkp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>sblkp</name> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>sblkp</name><operator>)</operator><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>sblk</name> <init>= <expr><operator>*</operator><name>sblkp</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>destroy_addr</name></name> <operator>=</operator> <name><name>sblk</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>sblk</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SBLK_DB</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>kvb_szpow</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IWDLSNR</name> <modifier>*</modifier></type><name>dlsnr</name> <init>= <expr><name><name>lx</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>dlsnr</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>lx</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>off_t</name></type> <name>kvb_addr</name> <init>= <expr><call><name>BLK2ADDR</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblkn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name></expr>)</condition> <block>{<block_content>
      <comment type="line">// Read KVBLK size as power of two</comment>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>kvb_szpow</name></expr></argument>, <argument><expr><name>mm</name> <operator>+</operator> <name>kvb_addr</name> <operator>+</operator> <name>KBLK_SZPOW_OFF</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>kvb_szpow</name> <operator>=</operator> <name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name><operator>-&gt;</operator><name>szpow</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>lcnt</name><index>[<expr><name><name>sblk</name><operator>-&gt;</operator><name>lvl</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>lcnt</name><index>[<expr><name><name>sblk</name><operator>-&gt;</operator><name>lvl</name></name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SBLK_DURTY</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fmt_version</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>off_t</name></type> <name>paddr</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>_sblk_is_only_one_on_page_v2</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>sblk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>paddr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Deallocate whole page</comment>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>deallocate</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>paddr</name></expr></argument>, <argument><expr><name>SBLK_PAGE_SZ_V2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mm</name> <operator>+</operator> <name><name>sblk</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>SOFF_BPOS_U1_V2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>dlsnr</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>dlsnr</name><operator>-&gt;</operator><name>onset</name></name><argument_list>(<argument><expr><name>dlsnr</name></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>SOFF_BPOS_U1_V2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>deallocate</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>SBLK_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>deallocate</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>kvb_addr</name></expr></argument>, <argument><expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>kvb_szpow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>_sblk_release</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>sblkp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>uint8_t</name></type> <name>_sblk_genlevel</name><parameter_list>(<parameter><decl><type><name>IWDB</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>lvl</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>IW_TESTS</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>iwkv_next_level</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>lvl</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <name>iwkv_next_level</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>iwkv_next_level</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>lvl</name> <operator>&lt;</operator> <name>SLEVELS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>lvl</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name> <init>= <expr><call><name>iwu_rand_u32</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>lvl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>lvl</name> <operator>&lt;</operator> <name>SLEVELS</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>r</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>lvl</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>r</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>ret</name> <init>= <expr><ternary><condition><expr><call><name>IW_UNLIKELY</name><argument_list>(<argument><expr><name>lvl</name> <operator>&gt;=</operator> <name>SLEVELS</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>SLEVELS</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>lvl</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>db</name><operator>-&gt;</operator><name>lcnt</name><index>[<expr><name>ret</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>--</operator><name>ret</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_sblk_create_v1</name><parameter_list>(<parameter><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>nlevel</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>kvbpow</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>baddr</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>bpos</name></decl></parameter>, <parameter><decl><type><name>SBLK</name> <modifier>*</modifier><modifier>*</modifier></type><name>oblk</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>sblk</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>KVBLK</name> <modifier>*</modifier></type><name>kvblk</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>off_t</name></type> <name>blen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>lx</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>kvbpow</name> <operator>&lt;</operator> <name>KVBLK_INISZPOW</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>kvbpow</name> <operator>=</operator> <name>KVBLK_INISZPOW</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>oblk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bpos</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>allocate</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>SBLK_SZ</name> <operator>+</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>kvbpow</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>baddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blen</name></expr></argument>, <argument><expr><name>IWKV_FSM_ALLOC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>blen</name> <operator>-</operator> <name>SBLK_SZ</name> <operator>==</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>kvbpow</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_kvblk_create</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>baddr</name> <operator>+</operator> <name>SBLK_SZ</name></expr></argument>, <argument><expr><name>kvbpow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kvblk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// Allocate kvblk as separate chunk</comment>
    <decl_stmt><decl><type><name>off_t</name></type> <name>kblkaddr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>allocate</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>kvbpow</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>kblkaddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blen</name></expr></argument>, <argument><expr><name>IWKV_FSM_ALLOC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>blen</name> <operator>==</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>kvbpow</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_kvblk_create</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>kblkaddr</name></expr></argument>, <argument><expr><name>kvbpow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kvblk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>sblk</name> <operator>=</operator> <operator>&amp;</operator><name><name>lx</name><operator>-&gt;</operator><name>saa</name><index>[<expr><name><name>lx</name><operator>-&gt;</operator><name>saan</name></name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name><name>lx</name><operator>-&gt;</operator><name>db</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>lcnt</name><index>[<expr><name>nlevel</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SBLK_DURTY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>baddr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>SBLK_DURTY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>lvl</name></name> <operator>=</operator> <name>nlevel</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>p0</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name> <operator>=</operator> <name>kvblk</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblkn</name></name> <operator>=</operator> <call><name>ADDR2BLK</name><argument_list>(<argument><expr><name><name>kvblk</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>lkl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>bpos</name></name> <operator>=</operator> <name>bpos</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>pi</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>pi</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>oblk</name> <operator>=</operator> <name>sblk</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>AAPOS_INC</name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>saan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_sblk_find_free_page_slot_v2</name><parameter_list>(<parameter><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl></parameter>, <parameter><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>sblk</name></decl></parameter>, <parameter><decl><type><name>off_t</name> <modifier>*</modifier></type><name>obaddr</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>oslot</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sblk</name><operator>-&gt;</operator><name>bpos</name></name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>sblk</name><operator>-&gt;</operator><name>bpos</name></name> <operator>&gt;</operator> <name>SBLK_PAGE_SBLK_NUM_V2</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>obaddr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>oslot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>off_t</name></type> <name>paddr</name> <init>= <expr><name><name>sblk</name><operator>-&gt;</operator><name>addr</name></name> <operator>-</operator> <operator>(</operator><name><name>sblk</name><operator>-&gt;</operator><name>bpos</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>SBLK_SZ</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>sblk</name><operator>-&gt;</operator><name>bpos</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>SBLK_PAGE_SBLK_NUM_V2</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>slot</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>slot</name></expr></argument>, <argument><expr><name>mm</name> <operator>+</operator> <name>paddr</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>SBLK_SZ</name> <operator>+</operator> <name>SOFF_BPOS_U1_V2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>slot</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>obaddr</name> <operator>=</operator> <name>paddr</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>SBLK_SZ</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>oslot</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>sblk</name><operator>-&gt;</operator><name>bpos</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>slot</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>slot</name></expr></argument>, <argument><expr><name>mm</name> <operator>+</operator> <name>paddr</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>SBLK_SZ</name> <operator>+</operator> <name>SOFF_BPOS_U1_V2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>slot</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>obaddr</name> <operator>=</operator> <name>paddr</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>SBLK_SZ</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>oslot</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><operator>*</operator><name>obaddr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>oslot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line" format="doxygen">/// Create</comment>
<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_sblk_create_v2</name><parameter_list>(<parameter><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>nlevel</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>kvbpow</name></decl></parameter>, <parameter><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>lower</name></decl></parameter>, <parameter><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>upper</name></decl></parameter>, <parameter><decl><type><name>SBLK</name> <modifier>*</modifier><modifier>*</modifier></type><name>oblk</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>off_t</name></type> <name>baddr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>bpos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>lx</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>_lower</name> <init>= <expr><name>lower</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>_upper</name> <init>= <expr><name>upper</name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>SLEVELS</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>pupper</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>lx</name><operator>-&gt;</operator><name>pupper</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>lvl</name> <operator>&gt;=</operator> <name>nlevel</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>_upper</name> <operator>=</operator> <name><name>lx</name><operator>-&gt;</operator><name>pupper</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>plower</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>lx</name><operator>-&gt;</operator><name>plower</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>lvl</name> <operator>&gt;=</operator> <name>nlevel</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>_lower</name> <operator>=</operator> <name><name>lx</name><operator>-&gt;</operator><name>plower</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_sblk_find_free_page_slot_v2</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>_lower</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>baddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>baddr</name> <operator>&amp;&amp;</operator> <name>_upper</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>_upper</name><operator>-&gt;</operator><name>addr</name></name> <operator>!=</operator> <name><name>_lower</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_sblk_find_free_page_slot_v2</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>_upper</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>baddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>baddr</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>_lower</name><operator>-&gt;</operator><name>addr</name></name> <operator>!=</operator> <name><name>lower</name><operator>-&gt;</operator><name>addr</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_sblk_find_free_page_slot_v2</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>lower</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>baddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>baddr</name> <operator>&amp;&amp;</operator> <name>upper</name> <operator>&amp;&amp;</operator> <name>_upper</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>_upper</name><operator>-&gt;</operator><name>addr</name></name> <operator>!=</operator> <name><name>upper</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_sblk_find_free_page_slot_v2</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>upper</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>baddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>baddr</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// No free slots - allocate new SBLK page</comment>
    <decl_stmt><decl><type><name>off_t</name></type> <name>blen</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>bpos</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>IWDLSNR</name> <modifier>*</modifier></type><name>dlsnr</name> <init>= <expr><name><name>lx</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>dlsnr</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>allocate</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>SBLK_PAGE_SZ_V2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>baddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blen</name></expr></argument>, <argument><expr><name>IWKV_FSM_ALLOC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Fill page to zero</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mm</name> <operator>+</operator> <name>baddr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>dlsnr</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>dlsnr</name><operator>-&gt;</operator><name>onset</name></name><argument_list>(<argument><expr><name>dlsnr</name></expr></argument>, <argument><expr><name>baddr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>blen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>_sblk_create_v1</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>nlevel</name></expr></argument>, <argument><expr><name>kvbpow</name></expr></argument>, <argument><expr><name>baddr</name></expr></argument>, <argument><expr><name>bpos</name></expr></argument>, <argument><expr><name>oblk</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>WUR</name> <name>iwrc</name></type> <name>_sblk_create</name><parameter_list>(<parameter><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>nlevel</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>kvbpow</name></decl></parameter>, <parameter><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>lower</name></decl></parameter>, <parameter><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>upper</name></decl></parameter>, <parameter><decl><type><name>SBLK</name> <modifier>*</modifier><modifier>*</modifier></type><name>oblk</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fmt_version</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>_sblk_create_v2</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>nlevel</name></expr></argument>, <argument><expr><name>kvbpow</name></expr></argument>, <argument><expr><name>lower</name></expr></argument>, <argument><expr><name>upper</name></expr></argument>, <argument><expr><name>oblk</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><call><name>_sblk_create_v1</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>nlevel</name></expr></argument>, <argument><expr><name>kvbpow</name></expr></argument>, <argument><expr><name><name>lower</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>oblk</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_sblk_at2</name><parameter_list>(<parameter><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>sblk_flags_t</name></type> <name>flgs</name></decl></parameter>, <parameter><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>sblk</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>lv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sblk_flags_t</name></type> <name>flags</name> <init>= <expr><name><name>lx</name><operator>-&gt;</operator><name>sbflags</name></name> <operator>|</operator> <name>flgs</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWDB</name></type> <name>db</name> <init>= <expr><name><name>lx</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>bpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IW_UNLIKELY</name><argument_list>(<argument><expr><name>addr</name> <operator>==</operator> <name><name>db</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rp</name> <init>= <expr><name>mm</name> <operator>+</operator> <name>addr</name> <operator>+</operator> <name>DOFF_N0_U4</name></expr></init></decl>;</decl_stmt>
    <comment type="line">// [magic:u4,dbflg:u1,dbid:u4,next_db_blk:u4,p0:u4,n[24]:u4,c[24]:u4,meta_blk:u4,meta_blkn:u4]:217</comment>
    <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>SBLK_DB</name> <operator>|</operator> <name>flags</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>lvl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>p0</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblkn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>lkl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name> <operator>=</operator> <name>KVBLK_IDXNUM</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>pi</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>pi</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SLEVELS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>IW_READLV</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>lv</name></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>sblk</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>++</operator><name><name>sblk</name><operator>-&gt;</operator><name>lvl</name></name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name><name>sblk</name><operator>-&gt;</operator><name>lvl</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>--</operator><name><name>sblk</name><operator>-&gt;</operator><name>lvl</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>addr</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>uflags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rp</name> <init>= <expr><name>mm</name> <operator>+</operator> <name>addr</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
    <comment type="line">// [flags:u1,lvl:u1,lkl:u1,pnum:u1,p0:u4,kblk:u4,pi:u1[32],n:u4[24],bpos:u1,lk:u115]:u256</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uflags</name></expr></argument>, <argument><expr><name>rp</name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>uflags</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>sblk</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>~</operator><name>SBLK_PERSISTENT_FLAGS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWKV_ERROR_CORRUPTED</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>flags</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sblk</name><operator>-&gt;</operator><name>lvl</name></name></expr></argument>, <argument><expr><name>rp</name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>sblk</name><operator>-&gt;</operator><name>lvl</name></name> <operator>&gt;=</operator> <name>SLEVELS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWKV_ERROR_CORRUPTED</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sblk</name><operator>-&gt;</operator><name>lkl</name></name></expr></argument>, <argument><expr><name>rp</name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>sblk</name><operator>-&gt;</operator><name>lkl</name></name> <operator>&gt;</operator> <name><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>pklen</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWKV_ERROR_CORRUPTED</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name></expr></argument>, <argument><expr><name>rp</name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWKV_ERROR_CORRUPTED</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sblk</name><operator>-&gt;</operator><name>p0</name></name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>p0</name></name> <operator>=</operator> <call><name>IW_ITOHL</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>p0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sblk</name><operator>-&gt;</operator><name>kvblkn</name></name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblkn</name></name> <operator>=</operator> <call><name>IW_ITOHL</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblkn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>pi</name></name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name>KVBLK_IDXNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rp</name> <operator>+=</operator> <name>KVBLK_IDXNUM</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>IW_BIGENDIAN</name></cpp:ifdef>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>sblk</name><operator>-&gt;</operator><name>lvl</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sblk</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>IW_ITOHL</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name><name>sblk</name><operator>-&gt;</operator><name>lvl</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rp</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name><name>sblk</name><operator>-&gt;</operator><name>lvl</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fmt_version</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rp</name> <operator>=</operator> <name>mm</name> <operator>+</operator> <name>addr</name> <operator>+</operator> <name>SOFF_BPOS_U1_V2</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sblk</name><operator>-&gt;</operator><name>bpos</name></name></expr></argument>, <argument><expr><name>rp</name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>rp</name> <operator>=</operator> <name>mm</name> <operator>+</operator> <name>addr</name> <operator>+</operator> <name>SOFF_LK_V1</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="line">// Lower key</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>lk</name></name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>sblk</name><operator>-&gt;</operator><name>lkl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content> <comment type="line">// Database tail</comment>
    <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rp</name> <init>= <expr><name>mm</name> <operator>+</operator> <name><name>db</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>DOFF_P0_U4</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>SBLK_DB</name> <operator>|</operator> <name>flags</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>lvl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblkn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>lkl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name> <operator>=</operator> <name>KVBLK_IDXNUM</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>pi</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>pi</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>IW_READLV</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>lv</name></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>p0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sblk</name><operator>-&gt;</operator><name>p0</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>p0</name></name> <operator>=</operator> <call><name>ADDR2BLK</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>WUR</name> <name>iwrc</name></type> <name>_sblk_at</name><parameter_list>(<parameter><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>sblk_flags_t</name></type> <name>flgs</name></decl></parameter>, <parameter><decl><type><name>SBLK</name> <modifier>*</modifier><modifier>*</modifier></type><name>sblkp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>sblkp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>sblk</name> <init>= <expr><operator>&amp;</operator><name><name>lx</name><operator>-&gt;</operator><name>saa</name><index>[<expr><name><name>lx</name><operator>-&gt;</operator><name>saan</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_sblk_at2</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>flgs</name></expr></argument>, <argument><expr><name>sblk</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>AAPOS_INC</name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>saan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>sblkp</name> <operator>=</operator> <name>sblk</name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_sblk_sync_mm</name><parameter_list>(<parameter><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name></decl></parameter>, <parameter><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>sblk</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>sblk</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SBLK_DURTY</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>lv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IWDLSNR</name> <modifier>*</modifier></type><name>dlsnr</name> <init>= <expr><name><name>lx</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>dlsnr</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SBLK_DURTY</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IW_UNLIKELY</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SBLK_DB</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>mm</name> <operator>+</operator> <name><name>sblk</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>sblk</name><operator>-&gt;</operator><name>addr</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name><name>sblk</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>wp</name> <operator>+=</operator> <name>DOFF_N0_U4</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>sp</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
        <comment type="line">// [magic:u4,dbflg:u1,dbid:u4,next_db_blk:u4,p0:u4,n[24]:u4,c[24]:u4,meta_blk:u4,meta_blkn:u4]:217</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SLEVELS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name>IW_WRITELV</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lv</name></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>wp</name> <operator>-</operator> <operator>(</operator><name>mm</name> <operator>+</operator> <name><name>sblk</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator> <operator>&lt;=</operator> <name>SBLK_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SLEVELS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name>IW_WRITELV</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lv</name></expr></argument>, <argument><expr><name><name>lx</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>lcnt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></if> <else>else <block>{<block_content> <comment type="line">// Database tail</comment>
        <expr_stmt><expr><name>wp</name> <operator>+=</operator> <name>DOFF_P0_U4</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>sp</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>IW_WRITELV</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lv</name></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>p0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>wp</name> <operator>-</operator> <operator>(</operator><name>mm</name> <operator>+</operator> <name><name>sblk</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator> <operator>&lt;=</operator> <name>SBLK_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>dlsnr</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>dlsnr</name><operator>-&gt;</operator><name>onwrite</name></name><argument_list>(<argument><expr><name>dlsnr</name></expr></argument>, <argument><expr><name>sp</name> <operator>-</operator> <name>mm</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>wp</name> <operator>-</operator> <name>sp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>mm</name> <operator>+</operator> <name><name>sblk</name><operator>-&gt;</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>sblk_flags_t</name></type> <name>flags</name> <init>= <expr><operator>(</operator><name><name>sblk</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SBLK_PERSISTENT_FLAGS</name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint8_t</name></type> <name>uflags</name> <init>= <expr><name>flags</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>lkl</name></name> <operator>&lt;=</operator> <name><name>lx</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>pklen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// [u1:flags,lvl:u1,lkl:u1,pnum:u1,p0:u4,kblk:u4,[pi0:u1,... pi32],n0-n23:u4,lk:u116]:u256</comment>
      <expr_stmt><expr><name>wp</name> <operator>+=</operator> <name>SOFF_FLAGS_U1</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wp</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>uflags</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wp</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sblk</name><operator>-&gt;</operator><name>lvl</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wp</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sblk</name><operator>-&gt;</operator><name>lkl</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wp</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>IW_WRITELV</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lv</name></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>p0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>IW_WRITELV</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lv</name></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblkn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>pi</name></name></expr></argument>, <argument><expr><name>KVBLK_IDXNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>wp</name> <operator>=</operator> <name>mm</name> <operator>+</operator> <name><name>sblk</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>SOFF_N0_U4</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>IW_BIGENDIAN</name></cpp:ifdef>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>sblk</name><operator>-&gt;</operator><name>lvl</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>IW_WRITELV</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lv</name></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name><name>sblk</name><operator>-&gt;</operator><name>lvl</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>wp</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name><name>sblk</name><operator>-&gt;</operator><name>lvl</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fmt_version</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>wp</name> <operator>=</operator> <name>mm</name> <operator>+</operator> <name><name>sblk</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>SOFF_BPOS_U1_V2</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wp</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sblk</name><operator>-&gt;</operator><name>bpos</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>wp</name> <operator>=</operator> <name>mm</name> <operator>+</operator> <name><name>sblk</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>SOFF_LK_V1</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>lk</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>sblk</name><operator>-&gt;</operator><name>lkl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>dlsnr</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>dlsnr</name><operator>-&gt;</operator><name>onwrite</name></name><argument_list>(<argument><expr><name>dlsnr</name></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>mm</name> <operator>+</operator> <name><name>sblk</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>SOFF_END</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>KVBLK_DURTY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_kvblk_sync_mm</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>WUR</name> <name>iwrc</name></type> <name>_sblk_sync</name><parameter_list>(<parameter><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name></decl></parameter>, <parameter><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>sblk</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sblk</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SBLK_DURTY</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>KVBLK_DURTY</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>lx</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_sync_mm</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>sblk</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>WUR</name> <name>iwrc</name></type> <name>_sblk_sync_and_release_mm</name><parameter_list>(<parameter><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name></decl></parameter>, <parameter><decl><type><name>SBLK</name> <modifier>*</modifier><modifier>*</modifier></type><name>sblkp</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>sblk</name> <init>= <expr><operator>*</operator><name>sblkp</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>destroy_addr</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>lx</name><operator>-&gt;</operator><name>destroy_addr</name></name> <operator>==</operator> <name><name>sblk</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>mm</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_sync_mm</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><operator>*</operator><name>sblkp</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>_sblk_release</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>sblkp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_sblk_find_pi_mm</name><parameter_list>(<parameter><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>sblk</name></decl></parameter>, <parameter><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>found</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>idxp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>sblk</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SBLK_DB</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>idxp</name> <operator>=</operator> <name>KVBLK_IDXNUM</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>k</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>kl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>lb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ub</name> <init>= <expr><name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwdb_flags_t</name></type> <name>dbflg</name> <init>= <expr><name><name>lx</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>dbflg</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>idxp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>ub</name> <operator>+</operator> <name>lb</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_kvblk_key_peek</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>pi</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cr</name> <init>= <expr><call><name>_cmp_keys</name><argument_list>(<argument><expr><name>dbflg</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>kl</name></expr></argument>, <argument><expr><name><name>lx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cr</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cr</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lb</name> <operator>=</operator> <name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lb</name> <operator>&gt;</operator> <name>ub</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>idx</name> <operator>=</operator> <name>lb</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>ub</name> <operator>=</operator> <name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lb</name> <operator>&gt;</operator> <name>ub</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><operator>*</operator><name>idxp</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_sblk_insert_pi_mm</name><parameter_list>(
  <parameter><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>sblk</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>nidx</name></decl></parameter>, <parameter><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>idxp</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>k</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>kl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>lb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ub</name> <init>= <expr><name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>nels</name> <init>= <expr><name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name></expr></init></decl>;</decl_stmt> <comment type="line">// NOLINT</comment>

  <if_stmt><if>if <condition>(<expr><name>nels</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>pi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>nidx</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>idxp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwdb_flags_t</name></type> <name>dbflg</name> <init>= <expr><name><name>sblk</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>dbflg</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>ub</name> <operator>+</operator> <name>lb</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_kvblk_key_peek</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>pi</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cr</name> <init>= <expr><call><name>_cmp_keys</name><argument_list>(<argument><expr><name>dbflg</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>kl</name></expr></argument>, <argument><expr><name><name>lx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cr</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cr</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lb</name> <operator>=</operator> <name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lb</name> <operator>&gt;</operator> <name>ub</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>idx</name> <operator>=</operator> <name>lb</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>ub</name> <operator>=</operator> <name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lb</name> <operator>&gt;</operator> <name>ub</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>++</operator><name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>nels</name> <operator>-</operator> <name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>pi</name></name> <operator>+</operator> <name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>pi</name></name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><name>nels</name> <operator>-</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>pi</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>nidx</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>idxp</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_sblk_addkv2</name><parameter_list>(
  <parameter><decl><type><name>SBLK</name>           <modifier>*</modifier></type><name>sblk</name></decl></parameter>,
  <parameter><decl><type><name>int8_t</name></type>          <name>idx</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>val</name></decl></parameter>,
  <parameter><decl><type><name>bool</name></type>            <name>raw_key</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sblk</name> <operator>&amp;&amp;</operator> <name>key</name> <operator>&amp;&amp;</operator> <name><name>key</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name><name>key</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name>val</name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>kvidx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWDB</name></type> <name>db</name> <init>= <expr><name><name>sblk</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>KVBLK</name> <modifier>*</modifier></type><name>kvblk</name> <init>= <expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name> <operator>&gt;=</operator> <name>KVBLK_IDXNUM</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>_IWKV_RC_KVBLOCK_FULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_kvblk_addkv</name><argument_list>(<argument><expr><name>kvblk</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kvidx</name></expr></argument>, <argument><expr><name>raw_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name> <operator>-</operator> <name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>pi</name></name> <operator>+</operator> <name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>pi</name></name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name> <operator>-</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>pi</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>kvidx</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblkn</name></name> <operator>!=</operator> <call><name>ADDR2BLK</name><argument_list>(<argument><expr><name><name>kvblk</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblkn</name></name> <operator>=</operator> <call><name>ADDR2BLK</name><argument_list>(<argument><expr><name><name>kvblk</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>++</operator><name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SBLK_DURTY</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <comment type="line">// the lowest key inserted</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>ksize</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>compound</name> <init>= <expr><operator>!</operator><name>raw_key</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>dbflg</name></name> <operator>&amp;</operator> <name>IWDB_COMPOUND_KEYS</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>compound</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ksize</name> <operator>+=</operator> <call><name>IW_VNUMSIZE</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>compound</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>lkl</name></name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>pklen</name></name></expr></argument>, <argument><expr><name>ksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name><name>sblk</name><operator>-&gt;</operator><name>lk</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>compound</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>IW_SETVNUMBUF64</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>compound</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>wp</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>lkl</name></name> <operator>-</operator> <operator>(</operator><name>ksize</name> <operator>-</operator> <name><name>key</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ksize</name> <operator>&lt;=</operator> <name><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>pklen</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SBLK_FULL_LKEY</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SBLK_FULL_LKEY</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>raw_key</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// Update active cursors inside this block</comment>
    <expr_stmt><expr><call><name>pthread_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cursors_slk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>IWKV_cursor</name></type> <name>cur</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>cursors</name></name></expr></init></decl>;</init> <condition><expr><name>cur</name></expr>;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name><name>sblk</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name> <operator>!=</operator> <name>sblk</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr></argument>, <argument><expr><name>sblk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>kvblk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <name>SBLK_PERSISTENT_FLAGS</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name> <operator>&gt;=</operator> <name>idx</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>pthread_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cursors_slk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_sblk_addkv</name><parameter_list>(<parameter><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>sblk</name></decl></parameter>, <parameter><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name><name>lx</name><operator>-&gt;</operator><name>key</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><name><name>lx</name><operator>-&gt;</operator><name>val</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>key</name> <operator>&amp;&amp;</operator> <name><name>key</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name><name>key</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name>val</name> <operator>&amp;&amp;</operator> <name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>sblk</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error2</name><argument_list>(<argument><expr><literal type="string">"sblk != 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>IW_ERROR_ASSERTION</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>, <decl><type ref="prev"/><name>kvidx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWDB</name></type> <name>db</name> <init>= <expr><name><name>sblk</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>KVBLK</name> <modifier>*</modifier></type><name>kvblk</name> <init>= <expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>sblk</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name> <operator>&gt;=</operator> <name>KVBLK_IDXNUM</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>_IWKV_RC_KVBLOCK_FULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_kvblk_addkv</name><argument_list>(<argument><expr><name>kvblk</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kvidx</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_insert_pi_mm</name><argument_list>(<argument><expr><name>sblk</name></expr></argument>, <argument><expr><name>kvidx</name></expr></argument>, <argument><expr><name>lx</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <comment type="line">// the lowest key inserted</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>ksize</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>compound</name> <init>= <expr><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>dbflg</name></name> <operator>&amp;</operator> <name>IWDB_COMPOUND_KEYS</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>compound</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ksize</name> <operator>+=</operator> <call><name>IW_VNUMSIZE</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>compound</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>lkl</name></name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>pklen</name></name></expr></argument>, <argument><expr><name>ksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name><name>sblk</name><operator>-&gt;</operator><name>lk</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>compound</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>IW_SETVNUMBUF64</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>compound</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>wp</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>lkl</name></name> <operator>-</operator> <operator>(</operator><name>ksize</name> <operator>-</operator> <name><name>key</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ksize</name> <operator>&lt;=</operator> <name><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>pklen</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SBLK_FULL_LKEY</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SBLK_FULL_LKEY</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblkn</name></name> <operator>!=</operator> <call><name>ADDR2BLK</name><argument_list>(<argument><expr><name><name>kvblk</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblkn</name></name> <operator>=</operator> <call><name>ADDR2BLK</name><argument_list>(<argument><expr><name><name>kvblk</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SBLK_DURTY</name></expr>;</expr_stmt>

  <comment type="line">// Update active cursors inside this block</comment>
  <expr_stmt><expr><call><name>pthread_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cursors_slk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>IWKV_cursor</name></type> <name>cur</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>cursors</name></name></expr></init></decl>;</init> <condition><expr><name>cur</name></expr>;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name><name>sblk</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name> <operator>!=</operator> <name>sblk</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr></argument>, <argument><expr><name>sblk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>kvblk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <name>SBLK_PERSISTENT_FLAGS</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name> <operator>&gt;=</operator> <name>idx</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>pthread_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cursors_slk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_sblk_updatekv</name><parameter_list>(
  <parameter><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>sblk</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>idx</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>val</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sblk</name> <operator>&amp;&amp;</operator> <name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>IWDB</name></type> <name>db</name> <init>= <expr><name><name>sblk</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>KVBLK</name> <modifier>*</modifier></type><name>kvblk</name> <init>= <expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>kvidx</name> <init>= <expr><name><name>sblk</name><operator>-&gt;</operator><name>pi</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>intrc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_kvblk_updatev</name><argument_list>(<argument><expr><name>kvblk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kvidx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IWKV_IS_INTERNAL_RC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>intrc</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblkn</name></name> <operator>!=</operator> <call><name>ADDR2BLK</name><argument_list>(<argument><expr><name><name>kvblk</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblkn</name></name> <operator>=</operator> <call><name>ADDR2BLK</name><argument_list>(<argument><expr><name><name>kvblk</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>pi</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>kvidx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SBLK_DURTY</name></expr>;</expr_stmt>
  <comment type="line">// Update active cursors inside this block</comment>
  <expr_stmt><expr><call><name>pthread_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cursors_slk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>IWKV_cursor</name></type> <name>cur</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>cursors</name></name></expr></init></decl>;</init> <condition><expr><name>cur</name></expr>;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name> <operator>!=</operator> <name>sblk</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name><name>sblk</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr></argument>, <argument><expr><name>sblk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>kvblk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <name>SBLK_PERSISTENT_FLAGS</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>pthread_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cursors_slk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>intrc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_sblk_rmkv</name><parameter_list>(<parameter><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>sblk</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sblk</name> <operator>&amp;&amp;</operator> <name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>IWDB</name></type> <name>db</name> <init>= <expr><name><name>sblk</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>KVBLK</name> <modifier>*</modifier></type><name>kvblk</name> <init>= <expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>sblk</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>kvblk</name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name> <operator>&amp;&amp;</operator> <name><name>sblk</name><operator>-&gt;</operator><name>pi</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&lt;</operator> <name>KVBLK_IDXNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_kvblk_rmkv</name><argument_list>(<argument><expr><name>kvblk</name></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>pi</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblkn</name></name> <operator>!=</operator> <call><name>ADDR2BLK</name><argument_list>(<argument><expr><name><name>kvblk</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblkn</name></name> <operator>=</operator> <call><name>ADDR2BLK</name><argument_list>(<argument><expr><name><name>kvblk</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>--</operator><name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SBLK_DURTY</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>&lt;</operator> <name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>pi</name></name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>pi</name></name> <operator>+</operator> <name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name> <operator>-</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <comment type="line">// Lowest key removed</comment>
    <comment type="line">// Replace the lowest key with the next one or reset</comment>
    <if_stmt><if>if <condition>(<expr><name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>kbuf</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>klen</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_kvblk_key_peek</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>pi</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>rc</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>lkl</name></name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>pklen</name></name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>lk</name></name></expr></argument>, <argument><expr><name>kbuf</name></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>lkl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>klen</name> <operator>&lt;=</operator> <name><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>pklen</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SBLK_FULL_LKEY</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SBLK_FULL_LKEY</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>lkl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Update active cursors</comment>
  <expr_stmt><expr><call><name>pthread_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cursors_slk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>IWKV_cursor</name></type> <name>cur</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>cursors</name></name></expr></init></decl>;</init> <condition><expr><name>cur</name></expr>;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name><name>sblk</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>skip_next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name> <operator>!=</operator> <name>sblk</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr></argument>, <argument><expr><name>sblk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>kvblk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <name>SBLK_PERSISTENT_FLAGS</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name> <operator>==</operator> <name>idx</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>idx</name> <operator>==</operator> <name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name><operator>--</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>skip_next</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>skip_next</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name> <operator>&gt;</operator> <name>idx</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name><operator>--</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>pthread_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cursors_slk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">//--------------------------  IWLCTX</comment>

<function><type><name>WUR</name> <name>iwrc</name></type> <name>_lx_sblk_cmp_key</name><parameter_list>(<parameter><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name></decl></parameter>, <parameter><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>sblk</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>resp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwdb_flags_t</name></type> <name>dbflg</name> <init>= <expr><name><name>sblk</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>dbflg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name><name>lx</name><operator>-&gt;</operator><name>key</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>lkl</name> <init>= <expr><name><name>sblk</name><operator>-&gt;</operator><name>lkl</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>ksize</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IW_UNLIKELY</name><argument_list>(<argument><expr><operator>(</operator><name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>sblk</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SBLK_DB</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>resp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>IWKV_ERROR_CORRUPTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>IWKV_ERROR_CORRUPTED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>dbflg</name> <operator>&amp;</operator> <name>IWDB_COMPOUND_KEYS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ksize</name> <operator>+=</operator> <call><name>IW_VNUMSIZE</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>compound</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(  <expr><operator>(</operator><name><name>sblk</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SBLK_FULL_LKEY</name><operator>)</operator>
     <operator>||</operator> <operator>(</operator><name>ksize</name> <operator>&lt;</operator> <name>lkl</name><operator>)</operator>
     <operator>||</operator> <operator>(</operator><name>dbflg</name> <operator>&amp;</operator> <operator>(</operator><name>IWDB_VNUM64_KEYS</name> <operator>|</operator> <name>IWDB_REALNUM_KEYS</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>_cmp_keys</name><argument_list>(<argument><expr><name>dbflg</name></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>lk</name></name></expr></argument>, <argument><expr><name>lkl</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>_cmp_keys_prefix</name><argument_list>(<argument><expr><name>dbflg</name></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>lk</name></name></expr></argument>, <argument><expr><name>lkl</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>kl</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>k</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>lx</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>resp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return <expr><name>rc</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_loadkvblk_mm</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>sblk</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>resp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>rc</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_kvblk_key_peek</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>pi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>_cmp_keys</name><argument_list>(<argument><expr><name>dbflg</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>kl</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>resp</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_lx_roll_forward</name><parameter_list>(<parameter><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>lvl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>cret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>sblk</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>blkn_t</name></type> <name>blkn</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><operator>(</operator><name>blkn</name> <operator>=</operator> <name><name>lx</name><operator>-&gt;</operator><name>lower</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>lvl</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>off_t</name></type> <name>blkaddr</name> <init>= <expr><call><name>BLK2ADDR</name><argument_list>(<argument><expr><name>blkn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>lx</name><operator>-&gt;</operator><name>nlvl</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>lvl</name> <operator>&lt;</operator> <name><name>lx</name><operator>-&gt;</operator><name>nlvl</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>uint8_t</name></type> <name>ulvl</name> <init>= <expr><name>lvl</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>pupper</name><index>[<expr><name>ulvl</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>lx</name><operator>-&gt;</operator><name>pupper</name><index>[<expr><name>ulvl</name></expr>]</index></name><operator>-&gt;</operator><name>addr</name> <operator>==</operator> <name>blkaddr</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>sblk</name> <operator>=</operator> <name><name>lx</name><operator>-&gt;</operator><name>pupper</name><index>[<expr><name>ulvl</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>plower</name><index>[<expr><name>ulvl</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>lx</name><operator>-&gt;</operator><name>plower</name><index>[<expr><name>ulvl</name></expr>]</index></name><operator>-&gt;</operator><name>addr</name> <operator>==</operator> <name>blkaddr</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>sblk</name> <operator>=</operator> <name><name>lx</name><operator>-&gt;</operator><name>plower</name><index>[<expr><name>ulvl</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_at</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>blkaddr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sblk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_at</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>blkaddr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sblk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NDEBUG</name></cpp:ifndef>
    <expr_stmt><expr><operator>++</operator><name><name>lx</name><operator>-&gt;</operator><name>num_cmps</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_lx_sblk_cmp_key</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>sblk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cret</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>lx</name><operator>-&gt;</operator><name>upper_addr</name></name> <operator>==</operator> <name><name>sblk</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr>)</condition> <block>{<block_content> <comment type="line">// upper &gt; key</comment>
      <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>upper</name></name> <operator>=</operator> <name>sblk</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>lower</name></name> <operator>=</operator> <name>sblk</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_lx_find_bounds</name><parameter_list>(<parameter><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>lvl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>blkn_t</name></type> <name>blkn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>dblk</name> <init>= <expr><operator>&amp;</operator><name><name>lx</name><operator>-&gt;</operator><name>dblk</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dblk</name><operator>-&gt;</operator><name>addr</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_at</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name><name>lx</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dblk</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dblk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lx</name><operator>-&gt;</operator><name>lower</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>lower</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>lx</name><operator>-&gt;</operator><name>dblk</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>nlvl</name></name> <operator>&gt;</operator> <name><name>dblk</name><operator>-&gt;</operator><name>lvl</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// New level in DB</comment>
    <expr_stmt><expr><name><name>dblk</name><operator>-&gt;</operator><name>lvl</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <name><name>lx</name><operator>-&gt;</operator><name>nlvl</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dblk</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SBLK_DURTY</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>lvl</name> <operator>=</operator> <name><name>lx</name><operator>-&gt;</operator><name>lower</name><operator>-&gt;</operator><name>lvl</name></name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>lvl</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_lx_roll_forward</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <name>lvl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>upper</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>blkn</name> <operator>=</operator> <call><name>ADDR2BLK</name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>upper</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>blkn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <do>do <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>nlvl</name></name> <operator>&gt;=</operator> <name>lvl</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>plower</name><index>[<expr><name>lvl</name></expr>]</index></name> <operator>=</operator> <name><name>lx</name><operator>-&gt;</operator><name>lower</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>pupper</name><index>[<expr><name>lvl</name></expr>]</index></name> <operator>=</operator> <name><name>lx</name><operator>-&gt;</operator><name>upper</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block> while <condition>(<expr><name>lvl</name><operator>--</operator> <operator>&amp;&amp;</operator> <name><name>lx</name><operator>-&gt;</operator><name>lower</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>lvl</name></expr>]</index></name> <operator>==</operator> <name>blkn</name></expr>)</condition>;</do>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_lx_release_mm</name><parameter_list>(<parameter><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>nlvl</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>lsb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>usb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>nb</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_sync_mm</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name><name>lx</name><operator>-&gt;</operator><name>nb</name></name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>pupper</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>lx</name><operator>-&gt;</operator><name>upper</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>upper</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>plower</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>lx</name><operator>-&gt;</operator><name>lower</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>lower</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>lx</name><operator>-&gt;</operator><name>nlvl</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>pupper</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>pupper</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>usb</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>usb</name> <operator>=</operator> <name><name>lx</name><operator>-&gt;</operator><name>pupper</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_sync_and_release_mm</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lx</name><operator>-&gt;</operator><name>pupper</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>pupper</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>plower</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>plower</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>lsb</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>lsb</name> <operator>=</operator> <name><name>lx</name><operator>-&gt;</operator><name>plower</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_sync_and_release_mm</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lx</name><operator>-&gt;</operator><name>plower</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>plower</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>upper</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_sync_and_release_mm</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lx</name><operator>-&gt;</operator><name>upper</name></name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>lower</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_sync_and_release_mm</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lx</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>dblk</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>SBLK_DURTY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_sync_mm</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lx</name><operator>-&gt;</operator><name>dblk</name></name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>nb</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_sblk_release</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lx</name><operator>-&gt;</operator><name>nb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>destroy_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_lx_release</name><parameter_list>(<parameter><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>lx</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_lx_release_mm</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_lx_split_addkv</name><parameter_list>(<parameter><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>sblk</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>nb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>blkn_t</name></type> <name>nblk</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWDB</name></type> <name>db</name> <init>= <expr><name><name>sblk</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>uside</name> <init>= <expr><operator>(</operator><name>idx</name> <operator>==</operator> <name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name>pivot</name> <init>= <expr><operator>(</operator><name>KVBLK_IDXNUM</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="line">// 32</comment>

  <if_stmt><if>if <condition>(<expr><name>uside</name></expr>)</condition> <block>{<block_content> <comment type="line">// Upper side</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_create</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <name><name>lx</name><operator>-&gt;</operator><name>nlvl</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sblk</name></expr></argument>, <argument><expr><name><name>lx</name><operator>-&gt;</operator><name>upper</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_addkv</name><argument_list>(<argument><expr><name>nb</name></expr></argument>, <argument><expr><name>lx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content> <comment type="line">// New key is somewhere in a middle of sblk-&gt;kvblk</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// We are in the middle</comment>
    <comment type="line">// Do the partial split</comment>
    <comment type="line">// Move kv pairs into new `nb`</comment>
    <comment type="line">// Compute space required for the new sblk which stores kv pairs after pivot `idx`</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int8_t</name></type> <name>i</name> <init>= <expr><name>pivot</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>sz</name> <operator>+=</operator> <name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name><name>sblk</name><operator>-&gt;</operator><name>pi</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;</operator> <name>pivot</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>sz</name> <operator>+=</operator> <call><name>IW_VNUMSIZE</name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>key</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>lx</name><operator>-&gt;</operator><name>key</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name><name>lx</name><operator>-&gt;</operator><name>val</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>sz</name> <operator>+=</operator> <name>KVBLK_MAX_NKV_SZ</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>kvbpow</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <call><name>iwlog2_64</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>kvbpow</name><operator>)</operator> <operator>&lt;</operator> <name>sz</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>kvbpow</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_create</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <name><name>lx</name><operator>-&gt;</operator><name>nlvl</name></name></expr></argument>, <argument><expr><name>kvbpow</name></expr></argument>, <argument><expr><name>sblk</name></expr></argument>, <argument><expr><name><name>lx</name><operator>-&gt;</operator><name>upper</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>IWKV_val</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>lx</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int8_t</name></type> <name>i</name> <init>= <expr><name>pivot</name></expr></init></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCBREAK</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_kvblk_kv_get</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>pi</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCBREAK</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_addkv2</name><argument_list>(<argument><expr><name>nb</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>pivot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>_kv_dispose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>RCBREAK</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name><name>sblk</name><operator>-&gt;</operator><name>pi</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name><name>sblk</name><operator>-&gt;</operator><name>pi</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><operator>--</operator><name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>KVBLK_DURTY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name><operator>-&gt;</operator><name>zidx</name></name> <operator>=</operator> <name><name>sblk</name><operator>-&gt;</operator><name>pi</name><index>[<expr><name>pivot</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name><operator>-&gt;</operator><name>maxoff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>KVBLK_IDXNUM</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>off</name> <operator>&gt;</operator> <name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name><operator>-&gt;</operator><name>maxoff</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name><operator>-&gt;</operator><name>maxoff</name></name> <operator>=</operator> <name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>off</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// Fix levels:</comment>
  <comment type="line">//  [ lb -&gt; sblk -&gt; ub ]</comment>
  <comment type="line">//  [ lb -&gt; sblk -&gt; nb -&gt; ub ]</comment>
  <expr_stmt><expr><name>nblk</name> <operator>=</operator> <call><name>ADDR2BLK</name><argument_list>(<argument><expr><name><name>nb</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>pupper</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>p0</name> <operator>=</operator> <name>nblk</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>pupper</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>flags</name> <operator>|=</operator> <name>SBLK_DURTY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nb</name><operator>-&gt;</operator><name>p0</name></name> <operator>=</operator> <call><name>ADDR2BLK</name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>plower</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>nb</name><operator>-&gt;</operator><name>lvl</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>plower</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>n</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>nblk</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>plower</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>flags</name> <operator>|=</operator> <name>SBLK_DURTY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>nb</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ADDR2BLK</name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>pupper</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>pthread_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cursors_slk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>IWKV_cursor</name></type> <name>cur</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>cursors</name></name></expr></init></decl>;</init> <condition><expr><name>cur</name></expr>;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name><name>sblk</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name> <operator>&gt;=</operator> <name>pivot</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr></argument>, <argument><expr><name>nb</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>kvblk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <name>SBLK_PERSISTENT_FLAGS</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name> <operator>-=</operator> <name>pivot</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>pthread_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cursors_slk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>uside</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;</operator> <name>pivot</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_addkv</name><argument_list>(<argument><expr><name>nb</name></expr></argument>, <argument><expr><name>lx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_addkv</name><argument_list>(<argument><expr><name>sblk</name></expr></argument>, <argument><expr><name>lx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>nb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_sblk_destroy</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>nb</name></name> <operator>=</operator> <name>nb</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>iwrc</name></type> <name>_lx_init_chute</name><parameter_list>(<parameter><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>nlvl</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lx</name><operator>-&gt;</operator><name>pupper</name><index>[<expr><name><name>lx</name><operator>-&gt;</operator><name>nlvl</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content> <comment type="line">// fix zero upper by dbtail</comment>
    <decl_stmt><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>dbtail</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_at</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbtail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int8_t</name></type> <name>i</name> <init>= <expr><name><name>lx</name><operator>-&gt;</operator><name>nlvl</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>lx</name><operator>-&gt;</operator><name>pupper</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>pupper</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>dbtail</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_lx_addkv</name><parameter_list>(<parameter><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>, <decl><type ref="prev"/><name>uadd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>sblk</name> <init>= <expr><name><name>lx</name><operator>-&gt;</operator><name>lower</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>lx</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>nlvl</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_lx_init_chute</name><argument_list>(<argument><expr><name>lx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_loadkvblk_mm</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>sblk</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_find_pi_mm</name><argument_list>(<argument><expr><name>sblk</name></expr></argument>, <argument><expr><name>lx</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>found</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>lx</name><operator>-&gt;</operator><name>opflags</name></name> <operator>&amp;</operator> <name>IWKV_NO_OVERWRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>IWKV_ERROR_KEY_EXISTS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>uadd</name> <operator>=</operator> <operator>(</operator>  <operator>!</operator><name>found</name>
         <operator>&amp;&amp;</operator> <name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name> <operator>&gt;</operator> <name>KVBLK_IDXNUM</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&gt;</operator> <name>KVBLK_IDXNUM</name> <operator>-</operator> <literal type="number">1</literal>
         <operator>&amp;&amp;</operator> <name><name>lx</name><operator>-&gt;</operator><name>upper</name></name> <operator>&amp;&amp;</operator> <name><name>lx</name><operator>-&gt;</operator><name>upper</name><operator>-&gt;</operator><name>pnum</name></name> <operator>&lt;</operator> <name>KVBLK_IDXNUM</name><operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>uadd</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_loadkvblk_mm</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name><name>lx</name><operator>-&gt;</operator><name>upper</name></name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>IWKV_val</name></type> <name>sval</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>val</name> <init>= <expr><name><name>lx</name><operator>-&gt;</operator><name>val</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>opflags</name></name> <operator>&amp;</operator> <name>IWKV_VAL_INCREMENT</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>ival</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rp</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>lv</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>lv</name> <operator>=</operator> <call><name>IW_ITOHL</name><argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ival</name> <operator>=</operator> <name>lv</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ival</name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ival</name> <operator>=</operator> <call><name>IW_ITOHLL</name><argument_list>(<argument><expr><name>ival</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWKV_ERROR_VALUE_CANNOT_BE_INCREMENTED</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>rc</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>_kvblk_value_peek</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>pi</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sval</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>rp</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sval</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>sval</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>lv</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><name><name>sval</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>lv</name> <operator>=</operator> <call><name>IW_ITOHL</name><argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>lv</name> <operator>+=</operator> <name>ival</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>_num2lebuf</name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>incbuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sval</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>llv</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>llv</name></expr></argument>, <argument><expr><name><name>sval</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>llv</name> <operator>=</operator> <call><name>IW_ITOHLL</name><argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>llv</name> <operator>+=</operator> <name>ival</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>_num2lebuf</name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>incbuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>llv</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWKV_ERROR_VALUE_CANNOT_BE_INCREMENTED</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>rc</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name><name>sval</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>lx</name><operator>-&gt;</operator><name>incbuf</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>&amp;</operator><name>sval</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>ph</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>IWKV_val</name></type> <name>oldval</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_kvblk_value_get</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>pi</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// note: oldval should be disposed by ph</comment>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>lx</name><operator>-&gt;</operator><name>ph</name></name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>lx</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldval</name></expr></argument>, <argument><expr><name><name>lx</name><operator>-&gt;</operator><name>phop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><call><name>_sblk_updatekv</name><argument_list>(<argument><expr><name>sblk</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>lx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name> <operator>&gt;</operator> <name>KVBLK_IDXNUM</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>uadd</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>ph</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>lx</name><operator>-&gt;</operator><name>ph</name></name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>lx</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>lx</name><operator>-&gt;</operator><name>phop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>_sblk_addkv</name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>upper</name></name></expr></argument>, <argument><expr><name>lx</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>nlvl</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>_IWKV_RC_REQUIRE_NLEVEL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>ph</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>lx</name><operator>-&gt;</operator><name>ph</name></name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>lx</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>lx</name><operator>-&gt;</operator><name>phop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><call><name>_lx_split_addkv</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>sblk</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>ph</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>lx</name><operator>-&gt;</operator><name>ph</name></name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>lx</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>lx</name><operator>-&gt;</operator><name>phop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><call><name>_sblk_addkv2</name><argument_list>(<argument><expr><name>sblk</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>lx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>lx</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>WUR</name> <name>iwrc</name></type> <name>_lx_put_lw</name><parameter_list>(<parameter><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
<label><name>start</name>:</label>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_lx_find_bounds</name><argument_list>(<argument><expr><name>lx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_lx_release_mm</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_lx_addkv</name><argument_list>(<argument><expr><name>lx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>_IWKV_RC_REQUIRE_NLEVEL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>lower</name> <init>= <expr><name><name>lx</name><operator>-&gt;</operator><name>lower</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>lower</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_lx_release_mm</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>nlvl</name></name> <operator>=</operator> <call><name>_sblk_genlevel</name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>lower</name><operator>-&gt;</operator><name>lvl</name></name> <operator>&gt;=</operator> <name><name>lx</name><operator>-&gt;</operator><name>nlvl</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>lower</name></name> <operator>=</operator> <name>lower</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <goto>goto <name>start</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>_IWKV_RC_KVBLOCK_FULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWKV_ERROR_CORRUPTED</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_lx_release</name><argument_list>(<argument><expr><name>lx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>WUR</name> <name>iwrc</name></type> <name>_lx_get_lr</name><parameter_list>(<parameter><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_lx_find_bounds</name><argument_list>(<argument><expr><name>lx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>lx</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>val</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_loadkvblk_mm</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name><name>lx</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_find_pi_mm</name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>, <argument><expr><name>lx</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_kvblk_value_get</name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>lower</name><operator>-&gt;</operator><name>kvblk</name></name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name><name>lx</name><operator>-&gt;</operator><name>lower</name><operator>-&gt;</operator><name>pi</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>lx</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWKV_ERROR_NOTFOUND</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_lx_release_mm</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_lx_del_sblk_lw</name><parameter_list>(<parameter><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name></decl></parameter>, <parameter><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>sblk</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWDB</name></type> <name>db</name> <init>= <expr><name><name>lx</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>KVBLK</name> <modifier>*</modifier></type><name>kvblk</name> <init>= <expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>blkn_t</name></type> <name>sblk_blkn</name> <init>= <expr><call><name>ADDR2BLK</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>_lx_release_mm</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>nlvl</name></name> <operator>=</operator> <name><name>sblk</name><operator>-&gt;</operator><name>lvl</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>upper_addr</name></name> <operator>=</operator> <name><name>sblk</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_lx_find_bounds</name><argument_list>(<argument><expr><name>lx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>upper</name><operator>-&gt;</operator><name>pnum</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>lx</name><operator>-&gt;</operator><name>upper</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name><name>lx</name><operator>-&gt;</operator><name>upper_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>upper</name><operator>-&gt;</operator><name>kvblk</name></name> <operator>=</operator> <name>kvblk</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_rmkv</name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>upper</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>lx</name><operator>-&gt;</operator><name>nlvl</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>plower</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>n</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>lx</name><operator>-&gt;</operator><name>upper</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>plower</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>flags</name> <operator>|=</operator> <name>SBLK_DURTY</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>plower</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>flags</name> <operator>&amp;</operator> <name>SBLK_DB</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lx</name><operator>-&gt;</operator><name>plower</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>n</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>--</operator><name><name>lx</name><operator>-&gt;</operator><name>plower</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>lvl</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>pupper</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>lx</name><operator>-&gt;</operator><name>upper</name></name></expr>)</condition> <block>{<block_content>
      <comment type="line">// Do not touch `lx-&gt;upper` in next `_lx_release_mm()` call</comment>
      <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>pupper</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>SBLK</name></type> <name>rb</name></decl>;</decl_stmt>  <comment type="line">// Block to remove</comment>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>lx</name><operator>-&gt;</operator><name>upper</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>nb</name></decl>, <comment type="line">// Block after lx-&gt;upper</comment>
       <decl><type ref="prev"><modifier>*</modifier></type><name>rbp</name> <init>= <expr><operator>&amp;</operator><name>rb</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>lx</name><operator>-&gt;</operator><name>nb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_at</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><call><name>BLK2ADDR</name><argument_list>(<argument><expr><name><name>rb</name><operator>.</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>nb</name></name> <operator>=</operator> <name>nb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>nb</name><operator>-&gt;</operator><name>p0</name></name> <operator>=</operator> <name><name>rb</name><operator>.</operator><name>p0</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>nb</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SBLK_DURTY</name></expr>;</expr_stmt>

  <comment type="line">// Update cursors within sblk removed</comment>
  <expr_stmt><expr><call><name>pthread_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cursors_slk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>IWKV_cursor</name></type> <name>cur</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>cursors</name></name></expr></init></decl>;</init> <condition><expr><name>cur</name></expr>;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name><name>sblk</name><operator>-&gt;</operator><name>addr</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>nb</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SBLK_DB</name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>lx</name><operator>-&gt;</operator><name>plower</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>flags</name> <operator>&amp;</operator> <name>SBLK_DB</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr></argument>, <argument><expr><name><name>lx</name><operator>-&gt;</operator><name>plower</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <name>SBLK_PERSISTENT_FLAGS</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>kvblk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>skip_next</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name> <operator>=</operator> <name><name>lx</name><operator>-&gt;</operator><name>plower</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>pnum</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name><operator>--</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>skip_next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr></argument>, <argument><expr><name>nb</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>nb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <name>SBLK_PERSISTENT_FLAGS</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>kvblk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>skip_next</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>sblk_blkn</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr></argument>, <argument><expr><name><name>lx</name><operator>-&gt;</operator><name>plower</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>kvblk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <name>SBLK_PERSISTENT_FLAGS</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>p0</name></name> <operator>==</operator> <name>sblk_blkn</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr></argument>, <argument><expr><name>nb</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>nb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>kvblk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <name>SBLK_PERSISTENT_FLAGS</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>pthread_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cursors_slk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_destroy</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_lx_del_lw</name><parameter_list>(<parameter><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWDB</name></type> <name>db</name> <init>= <expr><name><name>lx</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>sblk</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_lx_find_bounds</name><argument_list>(<argument><expr><name>lx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>sblk</name> <operator>=</operator> <name><name>lx</name><operator>-&gt;</operator><name>lower</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_loadkvblk_mm</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>sblk</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_find_pi_mm</name><argument_list>(<argument><expr><name>sblk</name></expr></argument>, <argument><expr><name>lx</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWKV_ERROR_NOTFOUND</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>mm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> <comment type="line">// last kv in block</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_lx_del_sblk_lw</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>sblk</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_rmkv</name><argument_list>(<argument><expr><name>sblk</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>mm</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_lx_release_mm</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_lx_release</name><argument_list>(<argument><expr><name>lx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//--------------------------  CURSOR</comment>

<function><type><name>IW_INLINE</name> <name>WUR</name> <name>iwrc</name></type> <name>_cursor_get_ge_idx</name><parameter_list>(<parameter><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name></decl></parameter>, <parameter><decl><type><name>IWKV_cursor_op</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>oidx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_lx_find_bounds</name><argument_list>(<argument><expr><name>lx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>lx</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_loadkvblk_mm</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name><name>lx</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_find_pi_mm</name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>, <argument><expr><name>lx</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>oidx</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>op</name> <operator>==</operator> <name>IWKV_CURSOR_EQ</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>lx</name><operator>-&gt;</operator><name>lower</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SBLK_DB</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>lx</name><operator>-&gt;</operator><name>lower</name><operator>-&gt;</operator><name>pnum</name></name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWKV_ERROR_NOTFOUND</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>oidx</name> <operator>=</operator> <ternary><condition><expr><name>idx</name></expr> ?</condition><then> <expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>idx</name></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WUR</name> <name>iwrc</name></type> <name>_cursor_to_lr</name><parameter_list>(<parameter><decl><type><name>IWKV_cursor</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><name>IWKV_cursor_op</name></type> <name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWDB</name></type> <name>db</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>lx</name><operator>.</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name> <init>= <expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>lx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>blkn_t</name></type> <name>dblk</name> <init>= <expr><call><name>ADDR2BLK</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>op</name> <operator>&lt;</operator> <name>IWKV_CURSOR_NEXT</name></expr>)</condition> <block>{<block_content> <comment type="line">// IWKV_CURSOR_BEFORE_FIRST | IWKV_CURSOR_AFTER_LAST</comment>
    <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_sblk_release</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>IWKV_CURSOR_BEFORE_FIRST</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>dbaddr</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name> <operator>=</operator> <name>KVBLK_IDXNUM</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>dbaddr</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// Negative as sign of dbtail</comment>
      <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

<label><name>start</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>op</name> <operator>&lt;</operator> <name>IWKV_CURSOR_EQ</name></expr>)</condition> <block>{<block_content> <comment type="line">// IWKV_CURSOR_NEXT | IWKV_CURSOR_PREV</comment>
    <decl_stmt><decl><type><name>blkn_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>dbaddr</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_at</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>cur</name><operator>-&gt;</operator><name>dbaddr</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>cur</name><operator>-&gt;</operator><name>dbaddr</name></name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>dbaddr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWKV_ERROR_NOTFOUND</name></expr>;</expr_stmt>
        <goto>goto <name>finish</name>;</goto>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>IWKV_CURSOR_NEXT</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>skip_next</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>finish</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>pnum</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWKV_ERROR_NOTFOUND</name></expr>;</expr_stmt>
          <goto>goto <name>finish</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>_sblk_release</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_at</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><call><name>BLK2ADDR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>IW_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>pnum</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <goto>goto <name>start</name>;</goto>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SBLK_DB</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWKV_ERROR_NOTFOUND</name></expr>;</expr_stmt>
          <goto>goto <name>finish</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>++</operator><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content> <comment type="line">// IWKV_CURSOR_PREV</comment>
      <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>skip_next</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>finish</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>p0</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name> <operator>||</operator> <operator>(</operator><name>n</name> <operator>==</operator> <name>dblk</name><operator>)</operator></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWKV_ERROR_NOTFOUND</name></expr>;</expr_stmt>
          <goto>goto <name>finish</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>_sblk_release</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_at</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><call><name>BLK2ADDR</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>IW_LIKELY</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>pnum</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>pnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <goto>goto <name>start</name>;</goto>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SBLK_DB</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWKV_ERROR_NOTFOUND</name></expr>;</expr_stmt>
          <goto>goto <name>finish</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>--</operator><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content> <comment type="line">// IWKV_CURSOR_EQ | IWKV_CURSOR_GE</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lx</name><operator>-&gt;</operator><name>key</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_INVALID_STATE</name></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_cursor_get_ge_idx</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>upper</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_sblk_release</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lx</name><operator>-&gt;</operator><name>upper</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name> <operator>=</operator> <name><name>lx</name><operator>-&gt;</operator><name>lower</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>lower</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>skip_next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>rc</name> <operator>!=</operator> <name>IWKV_ERROR_NOTFOUND</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_sblk_release</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//--------------------------  PUBLIC API</comment>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_kv_ecodefn</name><parameter_list>(<parameter><decl><type><name>locale_t</name></type> <name>locale</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ecode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>ecode</name> <operator>&gt;</operator> <name>_IWKV_ERROR_START</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ecode</name> <operator>&lt;</operator> <name>_IWKV_ERROR_END</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <switch>switch <condition>(<expr><name>ecode</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>IWKV_ERROR_NOTFOUND</name></expr>:</case>
      <return>return <expr><literal type="string">"Key not found. (IWKV_ERROR_NOTFOUND)"</literal></expr>;</return>
    <case>case <expr><name>IWKV_ERROR_KEY_EXISTS</name></expr>:</case>
      <return>return <expr><literal type="string">"Key exists. (IWKV_ERROR_KEY_EXISTS)"</literal></expr>;</return>
    <case>case <expr><name>IWKV_ERROR_MAXKVSZ</name></expr>:</case>
      <return>return <expr><literal type="string">"Size of Key+value must be not greater than 0xfffffff bytes (IWKV_ERROR_MAXKVSZ)"</literal></expr>;</return>
    <case>case <expr><name>IWKV_ERROR_CORRUPTED</name></expr>:</case>
      <return>return <expr><literal type="string">"Database file invalid or corrupted (IWKV_ERROR_CORRUPTED)"</literal></expr>;</return>
    <case>case <expr><name>IWKV_ERROR_DUP_VALUE_SIZE</name></expr>:</case>
      <return>return <expr><literal type="string">"Value size is not compatible for insertion into sorted values array (IWKV_ERROR_DUP_VALUE_SIZE)"</literal></expr>;</return>
    <case>case <expr><name>IWKV_ERROR_KEY_NUM_VALUE_SIZE</name></expr>:</case>
      <return>return <expr><literal type="string">"Given key is not compatible to store as number (IWKV_ERROR_KEY_NUM_VALUE_SIZE)"</literal></expr>;</return>
    <case>case <expr><name>IWKV_ERROR_INCOMPATIBLE_DB_MODE</name></expr>:</case>
      <return>return <expr><literal type="string">"Incompatible database open mode (IWKV_ERROR_INCOMPATIBLE_DB_MODE)"</literal></expr>;</return>
    <case>case <expr><name>IWKV_ERROR_INCOMPATIBLE_DB_FORMAT</name></expr>:</case>
      <return>return <expr><literal type="string">"Incompatible database format version, please migrate database data (IWKV_ERROR_INCOMPATIBLE_DB_FORMAT)"</literal></expr>;</return>
    <case>case <expr><name>IWKV_ERROR_CORRUPTED_WAL_FILE</name></expr>:</case>
      <return>return <expr><literal type="string">"Corrupted WAL file (IWKV_ERROR_CORRUPTED_WAL_FILE)"</literal></expr>;</return>
    <case>case <expr><name>IWKV_ERROR_VALUE_CANNOT_BE_INCREMENTED</name></expr>:</case>
      <return>return <expr><literal type="string">"Stored value cannot be incremented/descremented (IWKV_ERROR_VALUE_CANNOT_BE_INCREMENTED)"</literal></expr>;</return>
    <case>case <expr><name>IWKV_ERROR_WAL_MODE_REQUIRED</name></expr>:</case>
      <return>return <expr><literal type="string">"Operation requires WAL enabled database. (IWKV_ERROR_WAL_MODE_REQUIRED)"</literal></expr>;</return>
    <case>case <expr><name>IWKV_ERROR_BACKUP_IN_PROGRESS</name></expr>:</case>
      <return>return <expr><literal type="string">"Backup operation in progress. (IWKV_ERROR_BACKUP_IN_PROGRESS)"</literal></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwkv_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_kv_initialized</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_kv_initialized</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>iwlog_register_ecodefn</name><argument_list>(<argument><expr><name>_kv_ecodefn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>off_t</name></type> <name>_szpolicy</name><parameter_list>(<parameter><decl><type><name>off_t</name></type> <name>nsize</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>csize</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>IWFS_EXT</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>off_t</name></type> <name>res</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>aunit</name> <init>= <expr><call><name>iwp_alloc_unit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>csize</name> <operator>&lt;</operator> <literal type="number">0x4000000</literal></expr>)</condition> <block>{<block_content> <comment type="line">// Doubled alloc up to 64M</comment>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><name>csize</name></expr> ?</condition><then> <expr><name>csize</name></expr> </then><else>: <expr><name>aunit</name></expr></else></ternary></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>res</name> <operator>&lt;</operator> <name>nsize</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>res</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>nsize</name> <operator>+</operator> <literal type="number">10</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt> <comment type="line">// + 10M extra space</comment>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>IW_ROUNDUP</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>aunit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwkv_state</name><parameter_list>(<parameter><decl><type><name>IWKV</name></type> <name>iwkv</name></decl></parameter>, <parameter><decl><type><name>IWFS_FSM_STATE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>iwkv</name> <operator>||</operator> <operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>API_RLOCK</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM</name></type> <name>fsm</name> <init>= <expr><name><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name><name>fsm</name><operator>.</operator><name>state</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>API_UNLOCK</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwkv_online_backup</name><parameter_list>(<parameter><decl><type><name>IWKV</name></type> <name>iwkv</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target_file</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ENSURE_OPEN</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>iwal_online_backup</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>target_file</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_iwkv_check_online_backup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>iwp_lockmode</name></type> <name>extra_lock_flags</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>out_has_online_bkp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>lv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>off_t</name></type> <name>fsz</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>waloff</name></decl>;</decl_stmt> <comment type="line">// WAL offset</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">16384</literal></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>out_has_online_bkp</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>aunit</name> <init>= <expr><call><name>iwp_alloc_unit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>wpath</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>IWFS_FILE</name></type> <name>f</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FILE_STATE</name></type> <name>fs</name></decl>, <decl><type ref="prev"/><name>fw</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <macro><name>iwfs_file_open</name><argument_list>(<argument>&amp;f</argument>, <argument>&amp;(IWFS_FILE_OPTS) {
    .path = path</argument>,
    <argument>.omode = IWFS_OREAD | IWFS_OWRITE</argument>,
    <argument>.lock_mode = IWP_WLOCK | extra_lock_flags
  }</argument>)</argument_list></macro></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>IW_ERROR_NOT_EXISTS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>f</name><operator>.</operator><name>state</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_lseek</name><argument_list>(<argument><expr><name><name>fs</name><operator>.</operator><name>fh</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>IWP_SEEK_END</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>fsz</name> <operator>&lt;</operator> <call><name>iwp_alloc_unit</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_pread</name><argument_list>(<argument><expr><name><name>fs</name><operator>.</operator><name>fh</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>lv</name> <operator>=</operator> <call><name>IW_ITOHL</name><argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sp</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>||</operator> <operator>(</operator><name>lv</name> <operator>!=</operator> <name>IWFSM_MAGICK</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_pread</name><argument_list>(<argument><expr><name><name>fs</name><operator>.</operator><name>fh</name></name></expr></argument>, <argument><expr><name>IWFSM_CUSTOM_HDR_DATA_OFFSET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>lv</name> <operator>=</operator> <call><name>IW_ITOHL</name><argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sp</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>||</operator> <operator>(</operator><name>lv</name> <operator>!=</operator> <name>IWKV_MAGIC</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_lseek</name><argument_list>(<argument><expr><name><name>fs</name><operator>.</operator><name>fh</name></name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>IWP_SEEK_END</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_read</name><argument_list>(<argument><expr><name><name>fs</name><operator>.</operator><name>fh</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>lv</name> <operator>=</operator> <call><name>IW_ITOHL</name><argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sp</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>||</operator> <operator>(</operator><name>lv</name> <operator>!=</operator> <name>IWKV_BACKUP_MAGIC</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Get WAL data offset</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_lseek</name><argument_list>(<argument><expr><name><name>fs</name><operator>.</operator><name>fh</name></name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal> <operator>*</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>waloff</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>, <argument><expr><name>IWP_SEEK_END</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_read</name><argument_list>(<argument><expr><name><name>fs</name><operator>.</operator><name>fh</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>waloff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>waloff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>waloff</name> <operator>=</operator> <call><name>IW_ITOHLL</name><argument_list>(<argument><expr><name>waloff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>waloff</name> <operator>!=</operator> <name>pos</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>waloff</name> <operator>&gt;</operator> <name>pos</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WBSEP</name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><name>waloff</name> <operator>&amp;</operator> <operator>(</operator><name>aunit</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Read the first WAL instruction: WBSEP</comment>
  <if_stmt><if>if <condition>(<expr><name>waloff</name> <operator>!=</operator> <name>pos</name></expr>)</condition> <block>{<block_content> <comment type="line">// Not an empty WAL?</comment>
    <decl_stmt><decl><type><name>WBSEP</name></type> <name>wbsep</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_pread</name><argument_list>(<argument><expr><name><name>fs</name><operator>.</operator><name>fh</name></name></expr></argument>, <argument><expr><name>waloff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wbsep</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wbsep</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>wbsep</name><operator>.</operator><name>id</name></name> <operator>!=</operator> <name>WOP_SEP</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Now we have an online backup image, unpack WAL file</comment>

  <expr_stmt><expr><name>sp</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>wpath</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>sp</name> <operator>+</operator> <literal type="number">4</literal> <comment type="block">/*-wal*/</comment> <operator>+</operator> <literal type="number">1</literal></expr></argument> <comment type="block">/*\0*/</comment>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>wpath</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wpath</name> <operator>+</operator> <name>sp</name></expr></argument>, <argument><expr><literal type="string">"-wal"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wpath</name><index>[<expr><name>sp</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>iwlog_warn</name><argument_list>(<argument><expr><literal type="string">"Unpacking WAL from online backup into: %s"</literal></expr></argument>, <argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>out_has_online_bkp</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <comment type="line">// WAL file</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <macro><name>iwfs_file_open</name><argument_list>(<argument>&amp;w</argument>, <argument>&amp;(IWFS_FILE_OPTS) {
    .path = wpath</argument>,
    <argument>.omode = IWFS_OREAD | IWFS_OWRITE | IWFS_OTRUNC
  }</argument>)</argument_list></macro></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>w</name><operator>.</operator><name>state</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// WAL content copy</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_lseek</name><argument_list>(<argument><expr><name><name>fs</name><operator>.</operator><name>fh</name></name></expr></argument>, <argument><expr><name>waloff</name></expr></argument>, <argument><expr><name>IWP_SEEK_SET</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>fsz</name> <operator>=</operator> <name>fsz</name> <operator>-</operator> <name>waloff</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></sizeof> <comment type="block">/* magic */</comment> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>waloff</name></expr></argument>)</argument_list></sizeof></expr> <comment type="block">/* wal offset */</comment>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>fsz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>sp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <do>do <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_read</name><argument_list>(<argument><expr><name><name>fs</name><operator>.</operator><name>fh</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&gt;</operator> <name>fsz</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>sp</name> <operator>=</operator> <name>fsz</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>fsz</name> <operator>-=</operator> <name>sp</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_write</name><argument_list>(<argument><expr><name><name>fw</name><operator>.</operator><name>fh</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name>fsz</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>sp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_fsync</name><argument_list>(<argument><expr><name><name>fw</name><operator>.</operator><name>fh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_ftruncate</name><argument_list>(<argument><expr><name><name>fs</name><operator>.</operator><name>fh</name></name></expr></argument>, <argument><expr><name>waloff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_fsync</name><argument_list>(<argument><expr><name><name>fs</name><operator>.</operator><name>fh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name><name>f</name><operator>.</operator><name>impl</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>f</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>w</name><operator>.</operator><name>impl</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>w</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>w</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwkv_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IWKV_OPTS</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name>IWKV</name> <modifier>*</modifier></type><name>iwkvp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>opts</name> <operator>||</operator> <operator>!</operator><name>iwkvp</name> <operator>||</operator> <operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>iwkvp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>lv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>llv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>has_online_bkp</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iw_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>random_seed</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwu_rand_seed</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>random_seed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwkv_openflags</name></type> <name>oflags</name> <init>= <expr><name><name>opts</name><operator>-&gt;</operator><name>oflags</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwfs_omode</name></type> <name>omode</name> <init>= <expr><name>IWFS_OREAD</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>oflags</name> <operator>&amp;</operator> <name>IWKV_TRUNC</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>oflags</name> <operator>&amp;=</operator> <operator>~</operator><name>IWKV_RDONLY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>omode</name> <operator>|=</operator> <name>IWFS_OTRUNC</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>oflags</name> <operator>&amp;</operator> <name>IWKV_RDONLY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>omode</name> <operator>|=</operator> <name>IWFS_OWRITE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>omode</name> <operator>|=</operator> <name>IWFS_OCREATE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>omode</name> <operator>&amp;</operator> <name>IWFS_OWRITE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>omode</name> <operator>&amp;</operator> <name>IWFS_OTRUNC</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>iwp_lockmode</name></type> <name>extra_lock_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>file_lock_fail_fast</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>extra_lock_flags</name> <operator>|=</operator> <name>IWP_NBLOCK</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_iwkv_check_online_backup</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>extra_lock_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>has_online_bkp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>iwkvp</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_IWKV</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>iwkvp</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>IWKV</name></type> <name>iwkv</name> <init>= <expr><operator>*</operator><name>iwkvp</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>iwkv</name><operator>-&gt;</operator><name>fmt_version</name></name> <operator>=</operator> <ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>fmt_version</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>opts</name><operator>-&gt;</operator><name>fmt_version</name></name></expr> </then><else>: <expr><name>IWKV_FORMAT</name></expr></else></ternary></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>iwkv</name><operator>-&gt;</operator><name>fmt_version</name></name> <operator>&gt;</operator> <name>IWKV_FORMAT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWKV_ERROR_INCOMPATIBLE_DB_FORMAT</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// Adjust lower key len accourding to database format version</comment>
  <if_stmt><if>if <condition>(<expr><name><name>iwkv</name><operator>-&gt;</operator><name>fmt_version</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>iwkv</name><operator>-&gt;</operator><name>pklen</name></name> <operator>=</operator> <name>PREFIX_KEY_LEN_V1</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>iwkv</name><operator>-&gt;</operator><name>pklen</name></name> <operator>=</operator> <name>PREFIX_KEY_LEN_V2</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>pthread_rwlockattr_t</name></type> <name>attr</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_rwlockattr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__linux__</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>defined</name> <name>__USE_UNIX98</name> <operator>||</operator> <name>defined</name> <name>__USE_XOPEN2K</name><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name>pthread_rwlockattr_setkind_np</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name>rci</name> <operator>=</operator> <call><name>pthread_rwlock_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>rwl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>iwkvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rci</name> <operator>=</operator> <call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_mtx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_rwlock_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>rwl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>iwkvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rci</name> <operator>=</operator> <call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_cond</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_rwlock_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>rwl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>iwkvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>iwkv</name><operator>-&gt;</operator><name>oflags</name></name> <operator>=</operator> <name>oflags</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM_STATE</name></type> <name>fsmstate</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM_OPTS</name></type> <name>fsmopts</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>exfile</name>        <operator>=</operator> <block>{
      <expr><operator>.</operator><name>file</name>        <operator>=</operator> <block>{
        <expr><operator>.</operator><name>path</name>      <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>path</name></name></expr>,
        <expr><operator>.</operator><name>omode</name>     <operator>=</operator> <name>omode</name></expr>,
        <expr><operator>.</operator><name>lock_mode</name> <operator>=</operator> <operator>(</operator><name>oflags</name> <operator>&amp;</operator> <name>IWKV_RDONLY</name><operator>)</operator> <operator>?</operator> <name>IWP_RLOCK</name> <operator>:</operator> <name>IWP_WLOCK</name></expr>
      }</block></expr>,
      <expr><operator>.</operator><name>rspolicy</name>    <operator>=</operator> <name>_szpolicy</name></expr>,
      <expr><operator>.</operator><name>maxoff</name>      <operator>=</operator> <name>IWKV_MAX_DBSZ</name></expr>,
      <expr><operator>.</operator><name>use_locks</name>   <operator>=</operator> <name>true</name></expr>
    }</block></expr>,
    <expr><operator>.</operator><name>bpow</name>          <operator>=</operator> <name>IWKV_FSM_BPOW</name></expr>, <comment type="line">// 64 bytes block size</comment>
    <expr><operator>.</operator><name>hdrlen</name>        <operator>=</operator> <name>KVHDRSZ</name></expr>,       <comment type="line">// Size of custom file header</comment>
    <expr><operator>.</operator><name>oflags</name>        <operator>=</operator> <operator>(</operator><operator>(</operator><name>oflags</name> <operator>&amp;</operator> <name>IWKV_RDONLY</name><operator>)</operator> <operator>?</operator> <name>IWFSM_NOLOCKS</name> <operator>:</operator> <literal type="number">0</literal><operator>)</operator></expr>,
    <expr><operator>.</operator><name>mmap_all</name>      <operator>=</operator> <name>true</name></expr>,
    <expr><operator>.</operator><name>mmap_opts</name>     <operator>=</operator> <name>IWFS_MMAP_RANDOM</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NDEBUG</name></cpp:ifndef>
  <expr_stmt><expr><name><name>fsmopts</name><operator>.</operator><name>oflags</name></name> <operator>|=</operator> <name>IWFSM_STRICT</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if <condition>(<expr><name>oflags</name> <operator>&amp;</operator> <name>IWKV_NO_TRIM_ON_CLOSE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>fsmopts</name><operator>.</operator><name>oflags</name></name> <operator>|=</operator> <name>IWFSM_NO_TRIM_ON_CLOSE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>file_lock_fail_fast</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>fsmopts</name><operator>.</operator><name>exfile</name><operator>.</operator><name>file</name><operator>.</operator><name>lock_mode</name></name> <operator>|=</operator> <name>IWP_NBLOCK</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// Init WAL</comment>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwal_create</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fsmopts</name></expr></argument>, <argument><expr><name>has_online_bkp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Now open database file</comment>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwfs_fsmfile_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fsmopts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCB</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name><name>iwkv</name><operator>-&gt;</operator><name>dbs</name></name> <operator>=</operator> <call><name>iwhmap_create_u32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>state</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fsmstate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Database header: [magic:u4, first_addr:u8, db_format_version:u4]</comment>
  <if_stmt><if>if <condition>(<expr><name><name>fsmstate</name><operator>.</operator><name>exfile</name><operator>.</operator><name>file</name><operator>.</operator><name>ostatus</name></name> <operator>&amp;</operator> <name>IWFS_OPEN_NEW</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>hdr</name><index>[<expr><name>KVHDRSZ</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>hdr</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>IW_WRITELV</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lv</name></expr></argument>, <argument><expr><name>IWKV_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>wp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt> <comment type="line">// skip first db addr</comment>
    <expr_stmt><expr><call><name>IW_WRITELV</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lv</name></expr></argument>, <argument><expr><name><name>iwkv</name><operator>-&gt;</operator><name>fmt_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>writehdr</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>sync</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>off_t</name></type> <name>dbaddr</name></decl>;</decl_stmt> <comment type="line">// first database address</comment>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>hdr</name><index>[<expr><name>KVHDRSZ</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>readhdr</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>KVHDRSZ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rp</name> <operator>=</operator> <name>hdr</name></expr>;</expr_stmt> <comment type="line">// -V507</comment>
    <expr_stmt><expr><call><name>IW_READLV</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>lv</name></expr></argument>, <argument><expr><name>lv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>IW_READLLV</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>llv</name></expr></argument>, <argument><expr><name>dbaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>lv</name> <operator>!=</operator> <name>IWKV_MAGIC</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>dbaddr</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWKV_ERROR_CORRUPTED</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>IW_READLV</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>lv</name></expr></argument>, <argument><expr><name><name>iwkv</name><operator>-&gt;</operator><name>fmt_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>iwkv</name><operator>-&gt;</operator><name>fmt_version</name></name> <operator>&gt;</operator> <name>IWKV_FORMAT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWKV_ERROR_INCOMPATIBLE_DB_FORMAT</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>iwkv</name><operator>-&gt;</operator><name>fmt_version</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>iwkv</name><operator>-&gt;</operator><name>pklen</name></name> <operator>=</operator> <name>PREFIX_KEY_LEN_V1</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>iwkv</name><operator>-&gt;</operator><name>pklen</name></name> <operator>=</operator> <name>PREFIX_KEY_LEN_V2</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_db_load_chain</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>, <argument><expr><name>dbaddr</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>iwkvp</name><operator>)</operator><operator>-&gt;</operator><name>open</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>iwkvp</name><operator>)</operator><operator>-&gt;</operator><name>open</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <comment type="line">// will be closed in iwkv_close</comment>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>iwkv_close</name><argument_list>(<argument><expr><name>iwkvp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwkv_exclusive_lock</name><parameter_list>(<parameter><decl><type><name>IWKV</name></type> <name>iwkv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_wnw</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>, <argument><expr><name>_wnw_iwkw_wl</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwkv_exclusive_unlock</name><parameter_list>(<parameter><decl><type><name>IWKV</name></type> <name>iwkv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>API_UNLOCK</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwkv_close</name><parameter_list>(<parameter><decl><type><name>IWKV</name> <modifier>*</modifier></type><name>iwkvp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ENSURE_OPEN</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>iwkvp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>IWKV</name></type> <name>iwkv</name> <init>= <expr><operator>*</operator><name>iwkvp</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>open</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_STATE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>iwal_shutdown</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwkv_exclusive_lock</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>IWDB</name></type> <name>db</name> <init>= <expr><name><name>iwkv</name><operator>-&gt;</operator><name>first_db</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>db</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>IWDB</name></type> <name>ndb</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>_db_release_lw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>db</name> <operator>=</operator> <name>ndb</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>iwkv</name><operator>-&gt;</operator><name>fsm</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// Below the memory cleanup only</comment>
  <if_stmt><if>if <condition>(<expr><name><name>iwkv</name><operator>-&gt;</operator><name>dbs</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwhmap_destroy</name><argument_list>(<argument><expr><name><name>iwkv</name><operator>-&gt;</operator><name>dbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iwkv</name><operator>-&gt;</operator><name>dbs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>iwkv_exclusive_unlock</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_rwlock_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>rwl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>wk_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>iwkvp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_iwkv_sync</name><parameter_list>(<parameter><decl><type><name>IWKV</name></type> <name>iwkv</name></decl></parameter>, <parameter><decl><type><name>iwfs_sync_flags</name></type> <name>_flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ENSURE_OPEN</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>iwkv</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>IWKV_RDONLY</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_READONLY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>iwkv</name><operator>-&gt;</operator><name>dlsnr</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwal_poke_savepoint</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>rwl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>iwfs_sync_flags</name></type> <name>flags</name> <init>= <expr><name>IWFS_FDATASYNC</name> <operator>|</operator> <name>_flags</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>sync</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>rwl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwkv_sync</name><parameter_list>(<parameter><decl><type><name>IWKV</name></type> <name>iwkv</name></decl></parameter>, <parameter><decl><type><name>iwfs_sync_flags</name></type> <name>_flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ENSURE_OPEN</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>iwkv</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>IWKV_RDONLY</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_READONLY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>iwkv</name><operator>-&gt;</operator><name>dlsnr</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_exclusive_lock</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwal_savepoint_exl</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwkv_exclusive_unlock</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>rwl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>iwfs_sync_flags</name></type> <name>flags</name> <init>= <expr><name>IWFS_FDATASYNC</name> <operator>|</operator> <name>_flags</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>sync</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>rwl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwkv_db</name><parameter_list>(<parameter><decl><type><name>IWKV</name></type> <name>iwkv</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>dbid</name></decl></parameter>, <parameter><decl><type><name>iwdb_flags_t</name></type> <name>dbflg</name></decl></parameter>, <parameter><decl><type><name>IWDB</name> <modifier>*</modifier></type><name>dbp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWDB</name></type> <name>db</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>dbp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>API_RLOCK</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>iwhmap_get_u32</name><argument_list>(<argument><expr><name><name>iwkv</name><operator>-&gt;</operator><name>dbs</name></name></expr></argument>, <argument><expr><name>dbid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>API_UNLOCK</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>db</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>dbflg</name></name> <operator>!=</operator> <name>dbflg</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>IWKV_ERROR_INCOMPATIBLE_DB_MODE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>dbp</name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>iwkv</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>IWKV_RDONLY</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_READONLY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_exclusive_lock</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>iwhmap_get_u32</name><argument_list>(<argument><expr><name><name>iwkv</name><operator>-&gt;</operator><name>dbs</name></name></expr></argument>, <argument><expr><name>dbid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>db</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>dbflg</name></name> <operator>!=</operator> <name>dbflg</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>IWKV_ERROR_INCOMPATIBLE_DB_MODE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>dbp</name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_db_create_lw</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>, <argument><expr><name>dbid</name></expr></argument>, <argument><expr><name>dbflg</name></expr></argument>, <argument><expr><name>dbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwal_savepoint_exl</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>iwkv_exclusive_unlock</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwkv_new_db</name><parameter_list>(<parameter><decl><type><name>IWKV</name></type> <name>iwkv</name></decl></parameter>, <parameter><decl><type><name>iwdb_flags_t</name></type> <name>dbflg</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dbidp</name></decl></parameter>, <parameter><decl><type><name>IWDB</name> <modifier>*</modifier></type><name>dbp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ENSURE_OPEN</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>dbp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>dbidp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>iwkv</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>IWKV_RDONLY</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_READONLY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>dbid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwkv_exclusive_lock</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>IWHMAP_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>iwhmap_iter_init</name><argument_list>(<argument><expr><name><name>iwkv</name><operator>-&gt;</operator><name>dbs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><call><name>iwhmap_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>id</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <name><name>iter</name><operator>.</operator><name>key</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <name>dbid</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>dbid</name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name>dbid</name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_db_create_lw</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>, <argument><expr><name>dbid</name></expr></argument>, <argument><expr><name>dbflg</name></expr></argument>, <argument><expr><name>dbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>dbidp</name> <operator>=</operator> <name>dbid</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwal_savepoint_exl</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>iwkv_exclusive_unlock</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwkv_db_destroy</name><parameter_list>(<parameter><decl><type><name>IWDB</name> <modifier>*</modifier></type><name>dbp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbp</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>ENSURE_OPEN_DB</name><argument_list>(<argument><expr><operator>*</operator><name>dbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>IWDB</name></type> <name>db</name> <init>= <expr><operator>*</operator><name>dbp</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV</name></type> <name>iwkv</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>iwkv</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>dbp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>iwkv</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>IWKV_RDONLY</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_READONLY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwkv_exclusive_lock</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_db_destroy_lw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwkv_exclusive_unlock</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwkv_puth</name><parameter_list>(
  <parameter><decl><type><name>IWDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>val</name></decl></parameter>,
  <parameter><decl><type><name>iwkv_opflags</name></type> <name>opflags</name></decl></parameter>, <parameter><decl><type><name>IWKV_PUT_HANDLER</name></type> <name>ph</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>phop</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>db</name> <operator>||</operator> <operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>iwkv</name></name> <operator>||</operator> <operator>!</operator><name>key</name> <operator>||</operator> <operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>IWKV</name></type> <name>iwkv</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>iwkv</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>iwkv</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>IWKV_RDONLY</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_READONLY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>opflags</name> <operator>&amp;</operator> <name>IWKV_VAL_INCREMENT</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// No overwrite for increment</comment>
    <expr_stmt><expr><name>opflags</name> <operator>&amp;=</operator> <operator>~</operator><name>IWKV_NO_OVERWRITE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV_val</name></type> <name>ekey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>nbuf</name><index>[<expr><name>IW_VNUMBUFSZ</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_to_effective_key</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ekey</name></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>IWLCTX</name></type> <name>lx</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>db</name>      <operator>=</operator> <name>db</name></expr>,
    <expr><operator>.</operator><name>key</name>     <operator>=</operator> <operator>&amp;</operator><name>ekey</name></expr>,
    <expr><operator>.</operator><name>val</name>     <operator>=</operator> <operator>(</operator><name>IWKV_val</name><operator>*</operator><operator>)</operator> <name>val</name></expr>,
    <expr><operator>.</operator><name>nlvl</name>    <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>op</name>      <operator>=</operator> <name>IWLCTX_PUT</name></expr>,
    <expr><operator>.</operator><name>opflags</name> <operator>=</operator> <name>opflags</name></expr>,
    <expr><operator>.</operator><name>ph</name>      <operator>=</operator> <name>ph</name></expr>,
    <expr><operator>.</operator><name>phop</name>    <operator>=</operator> <name>phop</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>API_DB_WLOCK</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_lx_put_lw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>API_DB_UNLOCK</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>.</operator><name>opflags</name></name> <operator>&amp;</operator> <name>IWKV_SYNC</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_iwkv_sync</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwal_poke_checkpoint</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwkv_put</name><parameter_list>(<parameter><decl><type><name>IWDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>iwkv_opflags</name></type> <name>opflags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>iwkv_puth</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>opflags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwkv_get</name><parameter_list>(<parameter><decl><type><name>IWDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>oval</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>db</name> <operator>||</operator> <operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>iwkv</name></name> <operator>||</operator> <operator>!</operator><name>key</name> <operator>||</operator> <operator>!</operator><name>oval</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV_val</name></type> <name>ekey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>nbuf</name><index>[<expr><name>IW_VNUMBUFSZ</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_to_effective_key</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ekey</name></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>IWLCTX</name></type> <name>lx</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>db</name>   <operator>=</operator> <name>db</name></expr>,
    <expr><operator>.</operator><name>key</name>  <operator>=</operator> <operator>&amp;</operator><name>ekey</name></expr>,
    <expr><operator>.</operator><name>val</name>  <operator>=</operator> <name>oval</name></expr>,
    <expr><operator>.</operator><name>nlvl</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>oval</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>API_DB_RLOCK</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_lx_get_lr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>API_DB_UNLOCK</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwkv_get_copy</name><parameter_list>(<parameter><decl><type><name>IWDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>vbufsz</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>vsz</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>db</name> <operator>||</operator> <operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>iwkv</name></name> <operator>||</operator> <operator>!</operator><name>key</name> <operator>||</operator> <operator>!</operator><name>vbuf</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>vsz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV_val</name></type> <name>ekey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>ovalsz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>oval</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>nbuf</name><index>[<expr><name>IW_VNUMBUFSZ</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_to_effective_key</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ekey</name></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>IWLCTX</name></type> <name>lx</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>db</name>   <operator>=</operator> <name>db</name></expr>,
    <expr><operator>.</operator><name>key</name>  <operator>=</operator> <operator>&amp;</operator><name>ekey</name></expr>,
    <expr><operator>.</operator><name>nlvl</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>API_DB_RLOCK</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_lx_find_bounds</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_loadkvblk_mm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lx</name></expr></argument>, <argument><expr><name><name>lx</name><operator>.</operator><name>lower</name></name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_find_pi_mm</name><argument_list>(<argument><expr><name><name>lx</name><operator>.</operator><name>lower</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lx</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_kvblk_value_peek</name><argument_list>(<argument><expr><name><name>lx</name><operator>.</operator><name>lower</name><operator>-&gt;</operator><name>kvblk</name></name></expr></argument>, <argument><expr><name><name>lx</name><operator>.</operator><name>lower</name><operator>-&gt;</operator><name>pi</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ovalsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>vsz</name> <operator>=</operator> <name>ovalsz</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>, <argument><expr><name>oval</name></expr></argument>, <argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>vbufsz</name></expr></argument>, <argument><expr><name>ovalsz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWKV_ERROR_NOTFOUND</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>mm</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>_lx_release_mm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>API_DB_UNLOCK</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwkv_db_set_meta</name><parameter_list>(<parameter><decl><type><name>IWDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>db</name> <operator>||</operator> <operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>iwkv</name></name> <operator>||</operator> <operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>sz</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>API_DB_WLOCK</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>resized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>asz</name> <init>= <expr><call><name>IW_ROUNDUP</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>IWKV_FSM_BPOW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>asz</name> <operator>&gt;</operator> <name><name>db</name><operator>-&gt;</operator><name>meta_blkn</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>asz</name> <operator>*</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <name><name>db</name><operator>-&gt;</operator><name>meta_blkn</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>off_t</name></type> <name>oaddr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>off_t</name></type> <name>olen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>meta_blk</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>deallocate</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><call><name>BLK2ADDR</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>meta_blk</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BLK2ADDR</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>meta_blkn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>allocate</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name>asz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oaddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument>, <argument><expr><name>IWKV_FSM_ALLOC_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>meta_blk</name></name> <operator>=</operator> <call><name>ADDR2BLK</name><argument_list>(<argument><expr><name>oaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>meta_blkn</name></name> <operator>=</operator> <call><name>ADDR2BLK</name><argument_list>(<argument><expr><name>olen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>resized</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>wp</name> <operator>=</operator> <name>mm</name> <operator>+</operator> <call><name>BLK2ADDR</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>meta_blk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>dlsnr</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>dlsnr</name><operator>-&gt;</operator><name>onwrite</name></name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>dlsnr</name></name></expr></argument>, <argument><expr><name>wp</name> <operator>-</operator> <name>mm</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>resized</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>lv</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>wp</name> <operator>=</operator> <name>mm</name> <operator>+</operator> <name><name>db</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>DOFF_METABLK_U4</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sp</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>IW_WRITELV</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lv</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>meta_blk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>IW_WRITELV</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lv</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>meta_blkn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>dlsnr</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>dlsnr</name><operator>-&gt;</operator><name>onwrite</name></name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>dlsnr</name></name></expr></argument>, <argument><expr><name>sp</name> <operator>-</operator> <name>mm</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>wp</name> <operator>-</operator> <name>sp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>mm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>mm</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>API_DB_UNLOCK</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwkv_db_get_meta</name><parameter_list>(<parameter><decl><type><name>IWDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>rsz</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>db</name> <operator>||</operator> <operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>iwkv</name></name> <operator>||</operator> <operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>rsz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>API_DB_RLOCK</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>sz</name> <operator>||</operator> <operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>meta_blkn</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>API_DB_UNLOCK</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>rmax</name> <init>= <expr><call><name>BLK2ADDR</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>meta_blkn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&gt;</operator> <name>rmax</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>sz</name> <operator>=</operator> <name>rmax</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>mm</name> <operator>+</operator> <call><name>BLK2ADDR</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>meta_blk</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>rsz</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>mm</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>API_DB_UNLOCK</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwkv_del</name><parameter_list>(<parameter><decl><type><name>IWDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>iwkv_opflags</name></type> <name>opflags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>db</name> <operator>||</operator> <operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>iwkv</name></name> <operator>||</operator> <operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV_val</name></type> <name>ekey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV</name></type> <name>iwkv</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>iwkv</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>nbuf</name><index>[<expr><name>IW_VNUMBUFSZ</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_to_effective_key</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ekey</name></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>IWLCTX</name></type> <name>lx</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>db</name>      <operator>=</operator> <name>db</name></expr>,
    <expr><operator>.</operator><name>key</name>     <operator>=</operator> <operator>&amp;</operator><name>ekey</name></expr>,
    <expr><operator>.</operator><name>nlvl</name>    <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>op</name>      <operator>=</operator> <name>IWLCTX_DEL</name></expr>,
    <expr><operator>.</operator><name>opflags</name> <operator>=</operator> <name>opflags</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>API_DB_WLOCK</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_lx_del_lw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>API_DB_UNLOCK</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>.</operator><name>opflags</name></name> <operator>&amp;</operator> <name>IWKV_SYNC</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_iwkv_sync</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwal_poke_checkpoint</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>iwrc</name></type> <name>_cursor_close_lw</name><parameter_list>(<parameter><decl><type><name>IWKV_cursor</name></type> <name>cur</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>closed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>IWDB</name></type> <name>db</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>lx</name><operator>.</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cursors_slk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>IWKV_cursor</name></type> <name>c</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>cursors</name></name></expr></init></decl>, <decl><type ref="prev"/><name>pc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name></expr>;</condition> <incr><expr><name>pc</name> <operator>=</operator> <name>c</name></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>cur</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>pc</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>cursors</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>pthread_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cursors_slk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwkv_cursor_open</name><parameter_list>(
  <parameter><decl><type><name>IWDB</name></type>            <name>db</name></decl></parameter>,
  <parameter><decl><type><name>IWKV_cursor</name>    <modifier>*</modifier></type><name>curptr</name></decl></parameter>,
  <parameter><decl><type><name>IWKV_cursor_op</name></type>  <name>op</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(  <expr><operator>!</operator><name>db</name> <operator>||</operator> <operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>iwkv</name></name> <operator>||</operator> <operator>!</operator><name>curptr</name>
     <operator>||</operator> <operator>(</operator><name>key</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>op</name> <operator>&lt;</operator> <name>IWKV_CURSOR_EQ</name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><name>op</name> <operator>&lt;</operator> <name>IWKV_CURSOR_BEFORE_FIRST</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_db_worker_inc_nolk</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_api_db_rlock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_db_worker_dec_nolk</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>IWKV_cursor</name></type> <name>cur</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>curptr</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>curptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>curptr</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>*</operator><name>curptr</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name> <init>= <expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>lx</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>nlvl</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_to_effective_key</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lx</name><operator>-&gt;</operator><name>ekey</name></name></expr></argument>, <argument><expr><name><name>lx</name><operator>-&gt;</operator><name>nbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>lx</name><operator>-&gt;</operator><name>ekey</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_cursor_to_lr</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>cur</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>curptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_cursor_close_lw</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>pthread_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cursors_slk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>cursors</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>cursors</name></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>pthread_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cursors_slk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>API_DB_UNLOCK</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_db_worker_dec_nolk</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwkv_cursor_close</name><parameter_list>(<parameter><decl><type><name>IWKV_cursor</name> <modifier>*</modifier></type><name>curp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>curp</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>curp</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>IWKV_cursor</name></type> <name>cur</name> <init>= <expr><operator>*</operator><name>curp</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>curp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>IWKV</name></type> <name>iwkv</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>lx</name><operator>.</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>closed</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>lx</name><operator>.</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>API_DB_WLOCK</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>lx</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_cursor_close_lw</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>API_DB_UNLOCK</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>lx</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_db_worker_dec_nolk</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>lx</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwal_poke_checkpoint</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwkv_cursor_to</name><parameter_list>(<parameter><decl><type><name>IWKV_cursor</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><name>IWKV_cursor_op</name></type> <name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>lx</name><operator>.</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>API_DB_RLOCK</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>lx</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_cursor_to_lr</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>API_DB_UNLOCK</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>lx</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwkv_cursor_to_key</name><parameter_list>(<parameter><decl><type><name>IWKV_cursor</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><name>IWKV_cursor_op</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>op</name> <operator>!=</operator> <name>IWKV_CURSOR_EQ</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>op</name> <operator>!=</operator> <name>IWKV_CURSOR_GE</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name> <init>= <expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>lx</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lx</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_STATE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_to_effective_key</name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lx</name><operator>-&gt;</operator><name>ekey</name></name></expr></argument>, <argument><expr><name><name>lx</name><operator>-&gt;</operator><name>nbuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>API_DB_RLOCK</name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>lx</name><operator>-&gt;</operator><name>ekey</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_cursor_to_lr</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>API_DB_UNLOCK</name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwkv_cursor_get</name><parameter_list>(
  <parameter><decl><type><name>IWKV_cursor</name></type> <name>cur</name></decl></parameter>,
  <parameter><decl><type><name>IWKV_val</name>   <modifier>*</modifier></type><name>okey</name></decl></parameter>,                    <comment type="block">/* Nullable */</comment>
  <parameter><decl><type><name>IWKV_val</name>   <modifier>*</modifier></type><name>oval</name></decl></parameter>
  )</parameter_list> <block>{<block_content>                                  <comment type="block">/* Nullable */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur</name> <operator>||</operator> <operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>lx</name><operator>.</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name> <operator>||</operator> <operator>(</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SBLK_DB</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name> <operator>&gt;=</operator> <name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>pnum</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IWKV_ERROR_NOTFOUND</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name> <init>= <expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>lx</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>API_DB_RLOCK</name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>lx</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>kvblk</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_loadkvblk_mm</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>idx</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>pi</name><index>[<expr><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>okey</name> <operator>&amp;&amp;</operator> <name>oval</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_kvblk_kv_get</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>kvblk</name></name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>okey</name></expr></argument>, <argument><expr><name>oval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>oval</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_kvblk_value_get</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>kvblk</name></name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>oval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>okey</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_kvblk_key_get</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>kvblk</name></name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>okey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_INVALID_ARGS</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name> <operator>&amp;&amp;</operator> <name>okey</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_unpack_effective_key</name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>okey</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>mm</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>API_DB_UNLOCK</name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwkv_cursor_copy_val</name><parameter_list>(<parameter><decl><type><name>IWKV_cursor</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>vbufsz</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>vsz</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur</name> <operator>||</operator> <operator>!</operator><name>vbuf</name> <operator>||</operator> <operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>lx</name><operator>.</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name> <operator>||</operator> <operator>(</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SBLK_DB</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name> <operator>&gt;=</operator> <name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>pnum</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IWKV_ERROR_NOTFOUND</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>vsz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name> <init>= <expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>lx</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>API_DB_RLOCK</name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>oval</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>ovalsz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>lx</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>kvblk</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_loadkvblk_mm</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>idx</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>pi</name><index>[<expr><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>_kvblk_value_peek</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>kvblk</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ovalsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>vsz</name> <operator>=</operator> <name>ovalsz</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>, <argument><expr><name>oval</name></expr></argument>, <argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>vbufsz</name></expr></argument>, <argument><expr><name>ovalsz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>mm</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>API_DB_UNLOCK</name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwkv_cursor_is_matched_key</name><parameter_list>(<parameter><decl><type><name>IWKV_cursor</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>ores</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>ocompound</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur</name> <operator>||</operator> <operator>!</operator><name>ores</name> <operator>||</operator> <operator>!</operator><name>key</name> <operator>||</operator> <operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>lx</name><operator>.</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name> <operator>||</operator> <operator>(</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SBLK_DB</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name> <operator>&gt;=</operator> <name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>pnum</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IWKV_ERROR_NOTFOUND</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ores</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ocompound</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ocompound</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name> <init>= <expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>lx</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>API_DB_RLOCK</name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>okey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>okeysz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwdb_flags_t</name></type> <name>dbflg</name> <init>= <expr><name><name>lx</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>dbflg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>lx</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>kvblk</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_loadkvblk_mm</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>idx</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>pi</name><index>[<expr><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_kvblk_key_peek</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>kvblk</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>okey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>okeysz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>dbflg</name> <operator>&amp;</operator> <operator>(</operator><name>IWDB_COMPOUND_KEYS</name> <operator>|</operator> <name>IWDB_VNUM64_KEYS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>nbuf</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>IW_VNUMBUFSZ</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IWKV_val</name></type> <name>rkey</name> <init>= <expr><block>{ <expr><operator>.</operator><name>data</name> <operator>=</operator> <name>nbuf</name></expr>, <expr><operator>.</operator><name>size</name> <operator>=</operator> <name>okeysz</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rkey</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>okey</name></expr></argument>, <argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name><name>rkey</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_unpack_effective_key</name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rkey</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ocompound</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>ocompound</name> <operator>=</operator> <name><name>rkey</name><operator>.</operator><name>compound</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>rkey</name><operator>.</operator><name>size</name></name> <operator>!=</operator> <name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>ores</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>dbflg</name> <operator>&amp;</operator> <name>IWDB_VNUM64_KEYS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>ores</name> <operator>=</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>rkey</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>ores</name> <operator>=</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>okey</name> <operator>+</operator> <operator>(</operator><name>okeysz</name> <operator>-</operator> <name><name>rkey</name><operator>.</operator><name>size</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ores</name> <operator>=</operator> <operator>(</operator><name>okeysz</name> <operator>==</operator> <name><name>key</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>okey</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>mm</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>API_DB_UNLOCK</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>lx</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwkv_cursor_copy_key</name><parameter_list>(<parameter><decl><type><name>IWKV_cursor</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>kbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>kbufsz</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>ksz</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>compound</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur</name> <operator>||</operator> <operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>lx</name><operator>.</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name> <operator>||</operator> <operator>(</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SBLK_DB</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name> <operator>&gt;=</operator> <name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>pnum</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IWKV_ERROR_NOTFOUND</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ksz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name> <init>= <expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>lx</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>API_DB_RLOCK</name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>okey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>okeysz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwdb_flags_t</name></type> <name>dbflg</name> <init>= <expr><name><name>lx</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>dbflg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>lx</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>kvblk</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_loadkvblk_mm</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>idx</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>pi</name><index>[<expr><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_kvblk_key_peek</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>kvblk</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>okey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>okeysz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>dbflg</name> <operator>&amp;</operator> <operator>(</operator><name>IWDB_COMPOUND_KEYS</name> <operator>|</operator> <name>IWDB_VNUM64_KEYS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>nbuf</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>IW_VNUMBUFSZ</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IWKV_val</name></type> <name>rkey</name> <init>= <expr><block>{ <expr><operator>.</operator><name>data</name> <operator>=</operator> <name>nbuf</name></expr>, <expr><operator>.</operator><name>size</name> <operator>=</operator> <name>okeysz</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rkey</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>okey</name></expr></argument>, <argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name><name>rkey</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_unpack_effective_key</name><argument_list>(<argument><expr><name><name>lx</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rkey</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>compound</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>compound</name> <operator>=</operator> <name><name>rkey</name><operator>.</operator><name>compound</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>ksz</name> <operator>=</operator> <name><name>rkey</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>dbflg</name> <operator>&amp;</operator> <name>IWDB_VNUM64_KEYS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>kbuf</name></expr></argument>, <argument><expr><name><name>rkey</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>kbufsz</name></expr></argument>, <argument><expr><name><name>rkey</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>kbuf</name></expr></argument>, <argument><expr><name>okey</name> <operator>+</operator> <operator>(</operator><name>okeysz</name> <operator>-</operator> <name><name>rkey</name><operator>.</operator><name>size</name></name><operator>)</operator></expr></argument>, <argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>kbufsz</name></expr></argument>, <argument><expr><name><name>rkey</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ksz</name> <operator>=</operator> <name>okeysz</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>compound</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>compound</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>kbuf</name></expr></argument>, <argument><expr><name>okey</name></expr></argument>, <argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>kbufsz</name></expr></argument>, <argument><expr><name>okeysz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>mm</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>API_DB_UNLOCK</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>lx</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_EXPORT</name> <name>iwrc</name></type> <name>iwkv_cursor_seth</name><parameter_list>(
  <parameter><decl><type><name>IWKV_cursor</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>iwkv_opflags</name></type> <name>opflags</name></decl></parameter>,
  <parameter><decl><type><name>IWKV_PUT_HANDLER</name></type> <name>ph</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>phop</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>irc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur</name> <operator>||</operator> <operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>lx</name><operator>.</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name> <operator>||</operator> <operator>(</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SBLK_DB</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name> <operator>&gt;=</operator> <name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>pnum</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IWKV_ERROR_NOTFOUND</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name> <init>= <expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>lx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWDB</name></type> <name>db</name> <init>= <expr><name><name>lx</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV</name></type> <name>iwkv</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>iwkv</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>sblk</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>API_DB_WLOCK</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ph</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IWKV_val</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>oldval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_kvblk_kv_get</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>pi</name><index>[<expr><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// note: oldval should be disposed by ph</comment>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ph</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldval</name></expr></argument>, <argument><expr><name>phop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>_kv_val_dispose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_updatekv</name><argument_list>(<argument><expr><name>sblk</name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IWKV_IS_INTERNAL_RC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>irc</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_sync</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>sblk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Update active cursors inside this block</comment>
  <expr_stmt><expr><call><name>pthread_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cursors_slk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>IWKV_cursor</name></type> <name>c</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>cursors</name></name></expr></init></decl>;</init> <condition><expr><name>c</name></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>cn</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name><name>sblk</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>cn</name></name> <operator>!=</operator> <name>sblk</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cn</name></name></expr></argument>, <argument><expr><name>sblk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>cn</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>kvblk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <name>SBLK_PERSISTENT_FLAGS</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>pthread_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>cursors_slk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>API_DB_UNLOCK</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>opflags</name> <operator>&amp;</operator> <name>IWKV_SYNC</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_iwkv_sync</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwal_poke_checkpoint</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><ternary><condition><expr><name>rc</name></expr> ?</condition><then> <expr><name>rc</name></expr> </then><else>: <expr><name>irc</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwkv_cursor_set</name><parameter_list>(<parameter><decl><type><name>IWKV_cursor</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>iwkv_opflags</name></type> <name>opflags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>iwkv_cursor_seth</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>opflags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwkv_cursor_val</name><parameter_list>(<parameter><decl><type><name>IWKV_cursor</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>oval</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>iwkv_cursor_get</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>oval</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwkv_cursor_key</name><parameter_list>(<parameter><decl><type><name>IWKV_cursor</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>okey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>iwkv_cursor_get</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>okey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwkv_cursor_del</name><parameter_list>(<parameter><decl><type><name>IWKV_cursor</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><name>iwkv_opflags</name></type> <name>opflags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur</name> <operator>||</operator> <operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>lx</name><operator>.</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name> <operator>||</operator> <operator>(</operator><name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SBLK_DB</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name> <operator>&gt;=</operator> <name><name>cur</name><operator>-&gt;</operator><name>cn</name><operator>-&gt;</operator><name>pnum</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IWKV_ERROR_NOTFOUND</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>sblk</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>cn</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name> <init>= <expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>lx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWDB</name></type> <name>db</name> <init>= <expr><name><name>lx</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV</name></type> <name>iwkv</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>iwkv</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>API_DB_WLOCK</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>sblk</name><operator>-&gt;</operator><name>pnum</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> <comment type="line">// sblk will be removed</comment>
    <decl_stmt><decl><type><name>IWKV_val</name></type> <name>key</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <comment type="line">// Key a key</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_loadkvblk_mm</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>sblk</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_kvblk_key_get</name><argument_list>(<argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name><name>sblk</name><operator>-&gt;</operator><name>pi</name><index>[<expr><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <operator>&amp;</operator><name>key</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_lx_del_sblk_lw</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>sblk</name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>finish2</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_lx_release_mm</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_lx_release</name><argument_list>(<argument><expr><name>lx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>key</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_kv_val_dispose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content> <comment type="line">// Simple case</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sblk</name><operator>-&gt;</operator><name>kvblk</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>acquire_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_loadkvblk_mm</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>sblk</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>fsm</name><operator>-&gt;</operator><name>release_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_rmkv</name><argument_list>(<argument><expr><name>sblk</name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>cnpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_sync</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>sblk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>API_DB_UNLOCK</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>opflags</name> <operator>&amp;</operator> <name>IWKV_SYNC</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_iwkv_sync</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwal_poke_checkpoint</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./dbg/iwkvdbg.c"</cpp:file></cpp:include>
</unit>
