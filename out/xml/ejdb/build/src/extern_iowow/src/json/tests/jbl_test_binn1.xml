<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iowow/src/json/tests/jbl_test_binn1.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwbinn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwjson_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CUnit/Basic.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT64_FORMAT</name></cpp:macro>     <cpp:value>PRId64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT64_FORMAT</name></cpp:macro>    <cpp:value>PRIu64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT64_HEX_FORMAT</name></cpp:macro> <cpp:value>PRIx64</cpp:value></cpp:define>

<typedef>typedef <type><name>unsigned</name> <name>short</name> <name>int</name></type> <name>u16</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>u32</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>u64</name>;</typedef>

<function><type><name>int</name></type> <name>init_suite</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>iw_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clean_suite</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CalcAllocation</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>needed_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alloc_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>calc_size</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>calc_size</name> <operator>=</operator> <name>alloc_size</name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>calc_size</name> <operator>&lt;</operator> <name>needed_size</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>calc_size</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="line">// same as *= 2</comment>
    <comment type="line">//calc_size += CHUNK_SIZE;  -- this is slower than the above line, because there are more reallocations</comment>
  </block_content>}</block></while>
  <return>return <expr><name>calc_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name></type> <name>CheckAllocation</name><parameter_list>(<parameter><decl><type><name>binn</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>add_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>alloc_size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>used_size</name></name> <operator>+</operator> <name>add_size</name> <operator>&gt;</operator> <name><name>item</name><operator>-&gt;</operator><name>alloc_size</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>pre_allocated</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>alloc_size</name> <operator>=</operator> <call><name>CalcAllocation</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>used_size</name></name> <operator>+</operator> <name>add_size</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>alloc_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>pbuf</name></name></expr></argument>, <argument><expr><name>alloc_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>pbuf</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>alloc_size</name></name> <operator>=</operator> <name>alloc_size</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BINN_MAGIC</name></cpp:macro> <cpp:value>0x1F22B11F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BINN_HEADER</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>        <comment type="line">// [1:type][4:size][4:count]</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_BINN_SIZE</name></cpp:macro>   <cpp:value>3</cpp:value></cpp:define>        <comment type="line">// [1:type][1:size][1:count]</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_SIZE</name></cpp:macro>      <cpp:value>256</cpp:value></cpp:define>      <comment type="line">// 1024</comment>

<function_decl><type><specifier>extern</specifier> <name>void</name><modifier>*</modifier></type>(<modifier>*</modifier><name>malloc_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>realloc_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> (<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>

<typedef>typedef <type><name>unsigned</name> <name>short</name> <name>int</name></type> <name>u16</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>u32</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>u64</name>;</typedef>

<comment type="block" format="doxygen">/***************************************************************************/</comment>

<function><type><name>void</name><modifier>*</modifier></type> <name>memdup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>src</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>dest</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>dest</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>dest</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***************************************************************************/</comment>

<function><type><name>char</name><modifier>*</modifier></type> <name>i64toa</name><parameter_list>(<parameter><decl><type><name>int64</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radix</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>
  <return>return <expr><call><name>_i64toa</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>radix</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <switch>switch <condition>(<expr><name>radix</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">10</literal></expr>:</case>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>INT64_FORMAT</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">16</literal></expr>:</case>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>INT64_HEX_FORMAT</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></switch>
  <return>return <expr><name>buf</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>

<function><type><name>void</name></type> <name>pass_int64</name><parameter_list>(<parameter><decl><type><name>int64</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>a</name> <operator>==</operator> <literal type="number">9223372036854775807</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>a</name> <operator>&gt;</operator> <literal type="number">9223372036854775806</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int64</name></type> <name>return_int64</name><parameter_list>()</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="number">9223372036854775807</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64</name></type> <name>return_passed_int64</name><parameter_list>(<parameter><decl><type><name>int64</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>

<function><type><name>void</name></type> <name>test_int64</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64</name></type> <name>i64</name></decl>;</decl_stmt>
  <comment type="line">//uint64 b;</comment>
  <comment type="line">//long long int b;  -- did not work!</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"testing int64... "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>pass_int64</name><argument_list>(<argument><expr><literal type="number">9223372036854775807</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>i64</name> <operator>=</operator> <call><name>return_int64</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>i64</name> <operator>==</operator> <literal type="number">9223372036854775807</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*  do not worked!
     b = 9223372036854775807;
     printf("value of b1=%" G_GINT64_FORMAT "\n", b);
     snprintf(64, buf, "%" G_GINT64_FORMAT, b);
     printf(" value of b2=%s\n", buf);

     ltoa(i64, buf, 10);
     printf(" value of i64=%s\n", buf);
   */</comment>

  <expr_stmt><expr><call><name>i64toa</name><argument_list>(<argument><expr><name>i64</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//printf(" value of i64=%s\n", buf);</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"9223372036854775807"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>i64</name> <operator>=</operator> <call><name>return_passed_int64</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">987654321987654321</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>i64</name> <operator>==</operator> <operator>-</operator><literal type="number">987654321987654321</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">//snprintf(64, buf, "%" G_GINT64_FORMAT, i64);</comment>
  <expr_stmt><expr><call><name>i64toa</name><argument_list>(<argument><expr><name>i64</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"-987654321987654321"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"OK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>

<comment type="line" format="doxygen">//! this code may not work on processors that does not use the default float standard</comment>
<comment type="line">//  original name: AlmostEqual2sComplement</comment>
<function><type><name>BOOL</name></type> <name>AlmostEqualFloats</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxUlps</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>aInt</name></decl>, <decl><type ref="prev"/><name>bInt</name></decl>, <decl><type ref="prev"/><name>intDiff</name></decl>;</decl_stmt>
  <comment type="line">// Make sure maxUlps is non-negative and small enough that the</comment>
  <comment type="line">// default NAN won't compare as equal to anything.</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>maxUlps</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>maxUlps</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>aInt</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>A</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>bInt</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>B</name></expr>;</expr_stmt>
  <comment type="line">// Make aInt lexicographically ordered as a twos-complement int</comment>
  <if_stmt><if>if <condition>(<expr><name>aInt</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>aInt</name> <operator>=</operator> <literal type="number">0x80000000</literal> <operator>-</operator> <name>aInt</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>bInt</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>bInt</name> <operator>=</operator> <literal type="number">0x80000000</literal> <operator>-</operator> <name>bInt</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>intDiff</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>aInt</name> <operator>-</operator> <name>bInt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>intDiff</name> <operator>&lt;=</operator> <name>maxUlps</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TRUE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERYSMALL</name></cpp:macro> <cpp:value>(1.0E-150)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPSILON</name></cpp:macro>   <cpp:value>(1.0E-8)</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>max</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) &gt; (b)) ? (a) : (b))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>min</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) &lt; (b)) ? (a) : (b))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>BOOL</name></type> <name>AlmostEqualDoubles</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>double</name></type> <name>absDiff</name></decl>, <decl><type ref="prev"/><name>maxAbs</name></decl>, <decl><type ref="prev"/><name>absA</name></decl>, <decl><type ref="prev"/><name>absB</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>absDiff</name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>a</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>absDiff</name> <operator>&lt;</operator> <name>VERYSMALL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TRUE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>absA</name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>absB</name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>maxAbs</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>absA</name></expr></argument>, <argument><expr><name>absB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>absDiff</name> <operator>/</operator> <name>maxAbs</name><operator>)</operator> <operator>&lt;</operator> <name>EPSILON</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TRUE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"a=%g b=%g\n"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>

<function><type><name>void</name></type> <name>test_floating_point_numbers</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>float</name></type> <name>f1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>d1</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"testing floating point... "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>f1</name> <operator>=</operator> <literal type="number">1.25</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>f1</name> <operator>==</operator> <literal type="number">1.25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>d1</name> <operator>=</operator> <literal type="number">1.25</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>d1</name> <operator>==</operator> <literal type="number">1.25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>d1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>d1</name> <operator>=</operator> <name>f1</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>d1</name> <operator>==</operator> <literal type="number">1.25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>f1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>f1</name> <operator>=</operator> <name>d1</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>f1</name> <operator>==</operator> <literal type="number">1.25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>d1</name> <operator>=</operator> <literal type="number">1.234</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>AlmostEqualDoubles</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><literal type="number">1.234</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>f1</name> <operator>=</operator> <name>d1</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>AlmostEqualFloats</name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><literal type="number">1.234</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>d1</name> <operator>=</operator> <literal type="number">1.2345</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>AlmostEqualDoubles</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><literal type="number">1.2345</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>f1</name> <operator>=</operator> <name>d1</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>AlmostEqualFloats</name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><literal type="number">1.2345</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// from string to number, and back to string</comment>

  <expr_stmt><expr><name>d1</name> <operator>=</operator> <call><name>atof</name><argument_list>(<argument><expr><literal type="string">"1.234"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// converts from string to double</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>AlmostEqualDoubles</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><literal type="number">1.234</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>f1</name> <operator>=</operator> <name>d1</name></expr>;</expr_stmt>             <comment type="line">// converts from double to float</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>AlmostEqualFloats</name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><literal type="number">1.234</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*
     sprintf(buf, "%f", d1);  // from double to string
     CU_ASSERT(buf[0] != 0);
     CU_ASSERT(strcmp(buf, "1.234") == 0);
   */</comment>

  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%g"</literal></expr></argument>, <argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"1.234"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>d1</name> <operator>=</operator> <call><name>atof</name><argument_list>(<argument><expr><literal type="string">"12.34"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>d1</name> <operator>==</operator> <literal type="number">12.34</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>f1</name> <operator>=</operator> <name>d1</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>AlmostEqualFloats</name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><literal type="number">12.34</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*
     sprintf(buf, "%f", d1);  // from double to string
     CU_ASSERT(buf[0] != 0);
     CU_ASSERT(strcmp(buf, "12.34") == 0);
   */</comment>

  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%g"</literal></expr></argument>, <argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"12.34"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>d1</name> <operator>=</operator> <call><name>atof</name><argument_list>(<argument><expr><literal type="string">"1.234e25"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>AlmostEqualDoubles</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><literal type="number">1.234e25</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>f1</name> <operator>=</operator> <name>d1</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>AlmostEqualFloats</name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><literal type="number">1.234e25</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%g"</literal></expr></argument>, <argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//printf("\nbuf=%s\n", buf);</comment>
  <comment type="line">//CU_ASSERT(strcmp(buf, "1.234e+025") == 0);</comment>


  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"OK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>

<function><type><name>void</name></type> <name>test1</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>fix_size</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">8768787</literal></expr></init></decl>, <decl><type ref="prev"/><name>blobsize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>binn</name> <modifier>*</modifier></type><name>obj1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>list</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>map</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>  <comment type="line">//, *list2=INVALID_BINN, *map2=INVALID_BINN, *obj2=INVALID_BINN;</comment>
  <decl_stmt><decl><type><name>binn</name></type> <name>value</name></decl>;</decl_stmt>
  <comment type="line">// test values</comment>
  <decl_stmt><decl><type><name>char</name></type> <name>vbyte</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pblob</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>signed</name> <name>short</name></type> <name>vint16</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>vuint16</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>signed</name> <name>int</name></type> <name>vint32</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>vuint32</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>signed</name> <name>long</name> <name>long</name> <name>int</name></type> <name>vint64</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>vuint64</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"testing binn 1... "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// CalcAllocation and CheckAllocation -------------------------------------------------</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>CalcAllocation</name><argument_list>(<argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>CalcAllocation</name><argument_list>(<argument><expr><literal type="number">510</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>CalcAllocation</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>CalcAllocation</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>CalcAllocation</name><argument_list>(<argument><expr><literal type="number">513</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>CalcAllocation</name><argument_list>(<argument><expr><literal type="number">512</literal> <operator>+</operator> <name>CHUNK_SIZE</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>CalcAllocation</name><argument_list>(<argument><expr><literal type="number">1025</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2048</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>CalcAllocation</name><argument_list>(<argument><expr><literal type="number">1025</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2048</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>CalcAllocation</name><argument_list>(<argument><expr><literal type="number">2100</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">//CU_ASSERT(CheckAllocation(xxx) == xxx);</comment>


  <comment type="line">// binn_new() ----------------------------------------------------------------------</comment>

  <comment type="line">// invalid create calls</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_new</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>INVALID_BINN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>INVALID_BINN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_new</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>INVALID_BINN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_new</name><argument_list>(<argument><expr><name>BINN_MAP</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>INVALID_BINN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>obj1</name></expr>;</expr_stmt>   <comment type="line">// create a valid pointer</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_new</name><argument_list>(<argument><expr><name>BINN_MAP</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>INVALID_BINN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_new</name><argument_list>(<argument><expr><name>BINN_MAP</name></expr></argument>, <argument><expr><name>MIN_BINN_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>INVALID_BINN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// first valid create call</comment>
  <expr_stmt><expr><name>obj1</name> <operator>=</operator> <call><name>binn_new</name><argument_list>(<argument><expr><name>BINN_LIST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>obj1</name> <operator>!=</operator> <name>INVALID_BINN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>header</name></name> <operator>==</operator> <name>BINN_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>pbuf</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>alloc_size</name></name> <operator>&gt;</operator> <name>MAX_BINN_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>used_size</name></name> <operator>==</operator> <name>MAX_BINN_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>pre_allocated</name></name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>obj1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// valid create call</comment>
  <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>binn_new</name><argument_list>(<argument><expr><name>BINN_LIST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>list</name> <operator>!=</operator> <name>INVALID_BINN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// valid create call</comment>
  <expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>binn_new</name><argument_list>(<argument><expr><name>BINN_MAP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>map</name> <operator>!=</operator> <name>INVALID_BINN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// valid create call</comment>
  <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>binn_new</name><argument_list>(<argument><expr><name>BINN_OBJECT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>obj</name> <operator>!=</operator> <name>INVALID_BINN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>header</name></name> <operator>==</operator> <name>BINN_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>pbuf</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>alloc_size</name></name> <operator>&gt;</operator> <name>MAX_BINN_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>used_size</name></name> <operator>==</operator> <name>MAX_BINN_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>pre_allocated</name></name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>header</name></name> <operator>==</operator> <name>BINN_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_MAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>pbuf</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>alloc_size</name></name> <operator>&gt;</operator> <name>MAX_BINN_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>used_size</name></name> <operator>==</operator> <name>MAX_BINN_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>pre_allocated</name></name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>header</name></name> <operator>==</operator> <name>BINN_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>pbuf</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>alloc_size</name></name> <operator>&gt;</operator> <name>MAX_BINN_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>used_size</name></name> <operator>==</operator> <name>MAX_BINN_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>pre_allocated</name></name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// test create with pre-allocated buffer ----------------------------------------------</comment>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>fix_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>obj1</name> <operator>=</operator> <call><name>binn_new</name><argument_list>(<argument><expr><name>BINN_OBJECT</name></expr></argument>, <argument><expr><name>fix_size</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>obj1</name> <operator>!=</operator> <name>INVALID_BINN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>header</name></name> <operator>==</operator> <name>BINN_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>pbuf</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>alloc_size</name></name> <operator>==</operator> <name>fix_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>used_size</name></name> <operator>==</operator> <name>MAX_BINN_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>pre_allocated</name></name> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// add values - invalid ---------------------------------------------------------------</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">55001</literal></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">55001</literal></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// invalid type</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">0x1FFFF</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">5501</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">5501</literal></expr></argument>, <argument><expr><literal type="number">0x1FFFF</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><literal type="number">0x1FFFF</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// null pointers</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_INT8</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//CU_ASSERT(binn_list_add(list, BINN_STRING, NULL, 0) == TRUE);  //*</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">5501</literal></expr></argument>, <argument><expr><name>BINN_INT8</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">5501</literal></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">5501</literal></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">5501</literal></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//CU_ASSERT(binn_map_set(map, 5501, BINN_STRING, NULL, 0) == TRUE);  //*</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><name>BINN_INT8</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//CU_ASSERT(binn_object_set(obj, "test", BINN_STRING, NULL, 0) == TRUE);  //*</comment>

  <comment type="line">// blobs with null pointers</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_BLOB</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_BLOB</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">5501</literal></expr></argument>, <argument><expr><name>BINN_BLOB</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">5501</literal></expr></argument>, <argument><expr><name>BINN_BLOB</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><name>BINN_BLOB</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><name>BINN_BLOB</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// blobs with negative values</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_BLOB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_BLOB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">15</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">5501</literal></expr></argument>, <argument><expr><name>BINN_BLOB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">5501</literal></expr></argument>, <argument><expr><name>BINN_BLOB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">15</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><name>BINN_BLOB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><name>BINN_BLOB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">15</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// read values - invalid 1 - empty binns -------------------------------------------</comment>

  <expr_stmt><expr><name>ptr2</name> <operator>=</operator> <call><name>binn_ptr</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_get_value</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_get_value</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_get_value</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_get_value</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ptr2</name> <operator>=</operator> <call><name>binn_ptr</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_get_value</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_get_value</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_get_value</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_get_value</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>ptr2</name> <operator>=</operator> <call><name>binn_ptr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_get_value</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_get_value</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_get_value</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_get_value</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// add values - valid -----------------------------------------------------------------</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">5501</literal></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">5501</literal></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="line">// with the same ID</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// with the same name</comment>

  <expr_stmt><expr><name>vbyte</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <literal type="number">255</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint16</name> <operator>=</operator> <operator>-</operator><literal type="number">32000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint16</name> <operator>=</operator> <literal type="number">65000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <operator>-</operator><literal type="number">65000000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint32</name> <operator>=</operator> <literal type="number">65000000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <operator>-</operator><literal type="number">6500000000000000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint64</name> <operator>=</operator> <literal type="number">6500000000000000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>blobsize</name> <operator>=</operator> <literal type="number">150</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pblob</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>blobsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pblob</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pblob</name></expr></argument>, <argument><expr><literal type="number">55</literal></expr></argument>, <argument><expr><name>blobsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                      <comment type="line">// second</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_UINT8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vbyte</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                <comment type="line">// third</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint16</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>               <comment type="line">// fourth</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_UINT16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint16</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line">// fifth</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>               <comment type="line">// 6th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_UINT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line">// 7th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>               <comment type="line">// 8th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_UINT64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint64</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line">// 9th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_STRING</name></expr></argument>, <argument><expr><literal type="string">"this is the string"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 10th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_BLOB</name></expr></argument>, <argument><expr><name>pblob</name></expr></argument>, <argument><expr><name>blobsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>           <comment type="line">// 11th</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">99000</literal></expr></argument>, <argument><expr><name>BINN_NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                      <comment type="line">// third</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">99001</literal></expr></argument>, <argument><expr><name>BINN_UINT8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vbyte</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                <comment type="line">// fourth</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">99002</literal></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint16</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>               <comment type="line">// fifth</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">99003</literal></expr></argument>, <argument><expr><name>BINN_UINT16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint16</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line">// 6th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">99004</literal></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>               <comment type="line">// 7th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">99005</literal></expr></argument>, <argument><expr><name>BINN_UINT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line">// 8th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">99006</literal></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>               <comment type="line">// 9th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">99007</literal></expr></argument>, <argument><expr><name>BINN_UINT64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint64</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line">// 10th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">99008</literal></expr></argument>, <argument><expr><name>BINN_STRING</name></expr></argument>, <argument><expr><literal type="string">"this is the string"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 11th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">99009</literal></expr></argument>, <argument><expr><name>BINN_BLOB</name></expr></argument>, <argument><expr><name>pblob</name></expr></argument>, <argument><expr><name>blobsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>           <comment type="line">// 12th</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"key0"</literal></expr></argument>, <argument><expr><name>BINN_NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                      <comment type="line">// third</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"key1"</literal></expr></argument>, <argument><expr><name>BINN_UINT8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vbyte</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                <comment type="line">// fourth</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"key2"</literal></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint16</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>               <comment type="line">// fifth</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"key3"</literal></expr></argument>, <argument><expr><name>BINN_UINT16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint16</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line">// 6th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"key4"</literal></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>               <comment type="line">// 7th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"key5"</literal></expr></argument>, <argument><expr><name>BINN_UINT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line">// 8th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"key6"</literal></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>               <comment type="line">// 9th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"key7"</literal></expr></argument>, <argument><expr><name>BINN_UINT64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint64</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line">// 10th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"key8"</literal></expr></argument>, <argument><expr><name>BINN_STRING</name></expr></argument>, <argument><expr><literal type="string">"this is the string"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 11th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"key9"</literal></expr></argument>, <argument><expr><name>BINN_BLOB</name></expr></argument>, <argument><expr><name>pblob</name></expr></argument>, <argument><expr><name>blobsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>           <comment type="line">// 12th</comment>

  <comment type="line">// blobs with size = 0</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_BLOB</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_STRING</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_STRING</name></expr></argument>, <argument><expr><literal type="string">"after the empty items"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// add values to a fixed-size binn (pre-allocated buffer) --------------------------</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>obj1</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>obj1</name></expr></argument>, <argument><expr><literal type="number">55001</literal></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj1</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><name>BINN_UINT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj1</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><name>BINN_UINT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// with the same name</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj1</name></expr></argument>, <argument><expr><literal type="string">"key1"</literal></expr></argument>, <argument><expr><name>BINN_STRING</name></expr></argument>, <argument><expr><literal type="string">"this is the value"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj1</name></expr></argument>, <argument><expr><literal type="string">"key2"</literal></expr></argument>, <argument><expr><name>BINN_STRING</name></expr></argument>, <argument><expr><literal type="string">"the second value"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// create a long string buffer to make the test. the string is longer than the available space</comment>
  <comment type="line">// in the binn.</comment>
  <expr_stmt><expr><name>ptr2</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>fix_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>p2</name> <operator>=</operator> <name>ptr2</name></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fix_size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>p2</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>fix_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj1</name></expr></argument>, <argument><expr><literal type="string">"v2"</literal></expr></argument>, <argument><expr><name>BINN_STRING</name></expr></argument>, <argument><expr><name>ptr2</name></expr></argument>,
                            <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// it fails because it uses a pre-allocated memory block</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"v2"</literal></expr></argument>, <argument><expr><name>BINN_STRING</name></expr></argument>, <argument><expr><name>ptr2</name></expr></argument>,
                            <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// but this uses a dynamically allocated memory block, so it works with it</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Key00"</literal></expr></argument>, <argument><expr><name>BINN_STRING</name></expr></argument>, <argument><expr><literal type="string">"after the big string"</literal></expr></argument>,
                            <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// and test the 'Key00' against the 'Key0'</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"list"</literal></expr></argument>, <argument><expr><name>BINN_LIST</name></expr></argument>, <argument><expr><call><name>binn_ptr</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>binn_size</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Key10"</literal></expr></argument>, <argument><expr><name>BINN_STRING</name></expr></argument>, <argument><expr><literal type="string">"after the list"</literal></expr></argument>,
                            <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// and test the 'Key10' against the 'Key1'</comment>


  <comment type="line">// read values - invalid 2 ------------------------------------------------------------</comment>


  <comment type="line">// read keys --------------------------------------------------------------------------</comment>


  <comment type="line">// binn_size - invalid and valid args --------------------------------------------</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_size</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_size</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>list</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_size</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>map</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_size</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>obj</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_size</name><argument_list>(<argument><expr><name>obj1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>obj1</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// destroy them all -------------------------------------------------------------------</comment>

  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>obj1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pblob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"OK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>

<function><type><name>void</name></type> <name>_test2</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>binn</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>INVALID_BINN</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>map</name> <init>= <expr><name>INVALID_BINN</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>obj</name> <init>= <expr><name>INVALID_BINN</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>binn</name></type> <name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BOOL</name></type> <name>vbool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>blobsize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pblob</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pstr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>signed</name> <name>int</name></type> <name>vint32</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>vdouble</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str_list</name> <init>= <expr><literal type="string">"test list"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str_map</name> <init>= <expr><literal type="string">"test map"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str_obj</name> <init>= <expr><literal type="string">"test object"</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"testing binn 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>blobsize</name> <operator>=</operator> <literal type="number">150</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pblob</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>blobsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pblob</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pblob</name></expr></argument>, <argument><expr><literal type="number">55</literal></expr></argument>, <argument><expr><name>blobsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>list</name> <operator>==</operator> <name>INVALID_BINN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>map</name> <operator>==</operator> <name>INVALID_BINN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>obj</name> <operator>==</operator> <name>INVALID_BINN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// add values without creating before</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add_int32</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set_int32</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">1001</literal></expr></argument>, <argument><expr><literal type="number">456</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_int32</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"int"</literal></expr></argument>, <argument><expr><literal type="number">789</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// create the structures</comment>

  <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>binn_list</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>binn_map</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>binn_object</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>list</name> <operator>!=</operator> <name>INVALID_BINN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>map</name> <operator>!=</operator> <name>INVALID_BINN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>obj</name> <operator>!=</operator> <name>INVALID_BINN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// add values without creating before</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add_int32</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set_int32</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">1001</literal></expr></argument>, <argument><expr><literal type="number">456</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_int32</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"int"</literal></expr></argument>, <argument><expr><literal type="number">789</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// check the structures</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>header</name></name> <operator>==</operator> <name>BINN_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>pbuf</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>alloc_size</name></name> <operator>&gt;</operator> <name>MAX_BINN_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>used_size</name></name> <operator>&gt;</operator> <name>MAX_BINN_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>pre_allocated</name></name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>header</name></name> <operator>==</operator> <name>BINN_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_MAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>pbuf</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>alloc_size</name></name> <operator>&gt;</operator> <name>MAX_BINN_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>used_size</name></name> <operator>&gt;</operator> <name>MAX_BINN_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>pre_allocated</name></name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>header</name></name> <operator>==</operator> <name>BINN_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>pbuf</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>alloc_size</name></name> <operator>&gt;</operator> <name>MAX_BINN_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>used_size</name></name> <operator>&gt;</operator> <name>MAX_BINN_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>pre_allocated</name></name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// continue adding values</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add_double</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">1.23</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set_double</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">1002</literal></expr></argument>, <argument><expr><literal type="number">4.56</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"double"</literal></expr></argument>, <argument><expr><literal type="number">7.89</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add_bool</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set_bool</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">1003</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_bool</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"bool"</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add_str</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>str_list</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set_str</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">1004</literal></expr></argument>, <argument><expr><name>str_map</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_str</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><name>str_obj</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add_blob</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>pblob</name></expr></argument>, <argument><expr><name>blobsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set_blob</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">1005</literal></expr></argument>, <argument><expr><name>pblob</name></expr></argument>, <argument><expr><name>blobsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_blob</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"blob"</literal></expr></argument>, <argument><expr><name>pblob</name></expr></argument>, <argument><expr><name>blobsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_count</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_count</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_count</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_size</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>list</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_size</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>map</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_size</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>obj</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_type</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BINN_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_type</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BINN_MAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_type</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BINN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// try to read them</comment>

  <comment type="line">// integer</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_get_value</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>header</name></name> <operator>==</operator> <name>BINN_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>writable</name></name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>allocated</name></name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_UINT8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <operator>&amp;</operator><name><name>value</name><operator>.</operator><name>vuint8</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// it must return a pointer to the byte in the buffer</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vint</name></name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>binn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_get_value</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">1001</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>header</name></name> <operator>==</operator> <name>BINN_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>writable</name></name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_UINT16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>value</name><operator>.</operator><name>vuint16</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vint</name></name> <operator>==</operator> <literal type="number">456</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>binn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_value</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"int"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>header</name></name> <operator>==</operator> <name>BINN_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>writable</name></name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_UINT16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>value</name><operator>.</operator><name>vuint16</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vint</name></name> <operator>==</operator> <literal type="number">789</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>binn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// double</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_get_value</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>header</name></name> <operator>==</operator> <name>BINN_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>writable</name></name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_FLOAT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>value</name><operator>.</operator><name>vint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vdouble</name></name> <operator>==</operator> <literal type="number">1.23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>binn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_get_value</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">1002</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>header</name></name> <operator>==</operator> <name>BINN_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>writable</name></name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_FLOAT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>value</name><operator>.</operator><name>vint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vdouble</name></name> <operator>==</operator> <literal type="number">4.56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>binn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_value</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"double"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>header</name></name> <operator>==</operator> <name>BINN_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>writable</name></name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_FLOAT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>value</name><operator>.</operator><name>vint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vdouble</name></name> <operator>==</operator> <literal type="number">7.89</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>binn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// bool</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_get_value</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>header</name></name> <operator>==</operator> <name>BINN_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>writable</name></name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>value</name><operator>.</operator><name>vint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vbool</name></name> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>binn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_get_value</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">1003</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>header</name></name> <operator>==</operator> <name>BINN_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>writable</name></name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>value</name><operator>.</operator><name>vint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vbool</name></name> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_value</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"bool"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>header</name></name> <operator>==</operator> <name>BINN_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>writable</name></name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>value</name><operator>.</operator><name>vint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vbool</name></name> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>binn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// string</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_get_value</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>header</name></name> <operator>==</operator> <name>BINN_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>writable</name></name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>size</name></name> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str_list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>str_list</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>binn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_get_value</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">1004</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>header</name></name> <operator>==</operator> <name>BINN_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>writable</name></name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>size</name></name> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str_map</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>str_map</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>binn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_value</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>header</name></name> <operator>==</operator> <name>BINN_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>writable</name></name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>size</name></name> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str_obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>str_obj</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>binn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// blob</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_get_value</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>header</name></name> <operator>==</operator> <name>BINN_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>writable</name></name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_BLOB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>size</name></name> <operator>==</operator> <name>blobsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>pblob</name></expr></argument>, <argument><expr><name>blobsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>binn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_get_value</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">1005</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>header</name></name> <operator>==</operator> <name>BINN_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>writable</name></name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_BLOB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>size</name></name> <operator>==</operator> <name>blobsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>pblob</name></expr></argument>, <argument><expr><name>blobsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>binn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_value</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"blob"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>header</name></name> <operator>==</operator> <name>BINN_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>writable</name></name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_BLOB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>size</name></name> <operator>==</operator> <name>blobsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>pblob</name></expr></argument>, <argument><expr><name>blobsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>binn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// read with other interface</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_get_int32</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_get_int32</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">1001</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <literal type="number">456</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_int32</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"int"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <literal type="number">789</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// double</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_get_double</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vdouble</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vdouble</name> <operator>==</operator> <literal type="number">1.23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_get_double</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">1002</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vdouble</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vdouble</name> <operator>==</operator> <literal type="number">4.56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"double"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vdouble</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vdouble</name> <operator>==</operator> <literal type="number">7.89</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// bool</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_get_bool</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vbool</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vbool</name> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_get_bool</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">1003</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vbool</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vbool</name> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_bool</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"bool"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vbool</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vbool</name> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// string</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_get_str</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pstr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pstr</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>, <argument><expr><name>str_list</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_get_str</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">1004</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pstr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pstr</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>, <argument><expr><name>str_map</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_str</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pstr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pstr</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>, <argument><expr><name>str_obj</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// blob</comment>

  <expr_stmt><expr><name><name>value</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>value</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_get_blob</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>size</name></name> <operator>==</operator> <name>blobsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>pblob</name></expr></argument>, <argument><expr><name>blobsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>value</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>value</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_get_blob</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">1005</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>size</name></name> <operator>==</operator> <name>blobsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>pblob</name></expr></argument>, <argument><expr><name>blobsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>value</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>value</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_blob</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"blob"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>size</name></name> <operator>==</operator> <name>blobsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>pblob</name></expr></argument>, <argument><expr><name>blobsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// read with other interface</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_int32</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_int32</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">1001</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">456</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int32</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"int"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">789</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// double</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_double</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1.23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_double</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">1002</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4.56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"double"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">7.89</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// bool</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_bool</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_bool</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">1003</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_bool</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"bool"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// string</comment>

  <expr_stmt><expr><name>pstr</name> <operator>=</operator> <call><name>binn_list_str</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pstr</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>, <argument><expr><name>str_list</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pstr</name> <operator>=</operator> <call><name>binn_map_str</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">1004</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pstr</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>, <argument><expr><name>str_map</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pstr</name> <operator>=</operator> <call><name>binn_object_str</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pstr</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>, <argument><expr><name>str_obj</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// blob</comment>

  <expr_stmt><expr><name><name>value</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <call><name>binn_list_blob</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>size</name></name> <operator>==</operator> <name>blobsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>pblob</name></expr></argument>, <argument><expr><name>blobsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>value</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <call><name>binn_map_blob</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">1005</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>size</name></name> <operator>==</operator> <name>blobsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>pblob</name></expr></argument>, <argument><expr><name>blobsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>value</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <call><name>binn_object_blob</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"blob"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>size</name></name> <operator>==</operator> <name>blobsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>pblob</name></expr></argument>, <argument><expr><name>blobsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pblob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"OK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test2</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>_test2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>

<function><type><name>void</name></type> <name>test4</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>fix_size</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>id</name></decl>, <decl><type ref="prev"/><name>type</name></decl>, <decl><type ref="prev"/><name>count</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>header_size</name></decl>, <decl><type ref="prev"/><name>blobsize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pstr</name></decl>, <decl><type ref="prev"/><name><name>key</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>binn</name> <modifier>*</modifier></type><name>list</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>map</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>obj</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>obj1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>binn</name></type> <name>value</name></decl>;</decl_stmt>
  <comment type="line">// test values</comment>
  <decl_stmt><decl><type><name>char</name></type> <name>vbyte</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pblob</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>signed</name> <name>short</name></type> <name>vint16</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pint16</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>vuint16</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>puint16</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>signed</name> <name>int</name></type> <name>vint32</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pint32</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>vuint32</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>puint32</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>signed</name> <name>long</name> <name>long</name> <name>int</name></type> <name>vint64</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pint64</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>vuint64</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>puint64</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"testing binn 3... "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>binn_list</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>list</name> <operator>!=</operator> <name>INVALID_BINN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>binn_map</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>map</name> <operator>!=</operator> <name>INVALID_BINN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>binn_object</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>obj</name> <operator>!=</operator> <name>INVALID_BINN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>header</name></name> <operator>==</operator> <name>BINN_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>pbuf</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>alloc_size</name></name> <operator>&gt;</operator> <name>MAX_BINN_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>used_size</name></name> <operator>==</operator> <name>MAX_BINN_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>pre_allocated</name></name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>header</name></name> <operator>==</operator> <name>BINN_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_MAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>pbuf</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>alloc_size</name></name> <operator>&gt;</operator> <name>MAX_BINN_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>used_size</name></name> <operator>==</operator> <name>MAX_BINN_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>pre_allocated</name></name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>header</name></name> <operator>==</operator> <name>BINN_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>pbuf</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>alloc_size</name></name> <operator>&gt;</operator> <name>MAX_BINN_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>used_size</name></name> <operator>==</operator> <name>MAX_BINN_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>pre_allocated</name></name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// test create with pre-allocated buffer ----------------------------------------------</comment>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>fix_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>obj1</name> <operator>=</operator> <call><name>binn_new</name><argument_list>(<argument><expr><name>BINN_OBJECT</name></expr></argument>, <argument><expr><name>fix_size</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>obj1</name> <operator>!=</operator> <name>INVALID_BINN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>header</name></name> <operator>==</operator> <name>BINN_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>pbuf</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>alloc_size</name></name> <operator>==</operator> <name>fix_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>used_size</name></name> <operator>==</operator> <name>MAX_BINN_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>obj1</name><operator>-&gt;</operator><name>pre_allocated</name></name> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// add values - invalid ---------------------------------------------------------------</comment>


  <comment type="line">// read values - invalid 1 - empty binns -------------------------------------------</comment>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_ptr</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_ptr</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">55001</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_ptr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// add values - valid -----------------------------------------------------------------</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">5501</literal></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">5501</literal></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="line">// with the same ID</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// with the same name</comment>

  <expr_stmt><expr><name>vbyte</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <literal type="number">255</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint16</name> <operator>=</operator> <operator>-</operator><literal type="number">32000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint16</name> <operator>=</operator> <literal type="number">65000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <operator>-</operator><literal type="number">65000000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint32</name> <operator>=</operator> <literal type="number">65000000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <operator>-</operator><literal type="number">6500000000000000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint64</name> <operator>=</operator> <literal type="number">6500000000000000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>blobsize</name> <operator>=</operator> <literal type="number">150</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pblob</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>blobsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pblob</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pblob</name></expr></argument>, <argument><expr><literal type="number">55</literal></expr></argument>, <argument><expr><name>blobsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                      <comment type="line">// second</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_UINT8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vbyte</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                <comment type="line">// third</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint16</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>               <comment type="line">// fourth</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_UINT16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint16</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line">// fifth</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>               <comment type="line">// 6th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_UINT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line">// 7th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>               <comment type="line">// 8th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_UINT64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint64</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line">// 9th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_STRING</name></expr></argument>, <argument><expr><literal type="string">"this is the string"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 10th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_BLOB</name></expr></argument>, <argument><expr><name>pblob</name></expr></argument>, <argument><expr><name>blobsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>           <comment type="line">// 11th</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">99000</literal></expr></argument>, <argument><expr><name>BINN_NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                      <comment type="line">// third</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">99001</literal></expr></argument>, <argument><expr><name>BINN_UINT8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vbyte</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                <comment type="line">// fourth</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">99002</literal></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint16</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>               <comment type="line">// fifth</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">99003</literal></expr></argument>, <argument><expr><name>BINN_UINT16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint16</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line">// 6th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">99004</literal></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>               <comment type="line">// 7th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">99005</literal></expr></argument>, <argument><expr><name>BINN_UINT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line">// 8th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">99006</literal></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>               <comment type="line">// 9th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">99007</literal></expr></argument>, <argument><expr><name>BINN_UINT64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint64</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line">// 10th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">99008</literal></expr></argument>, <argument><expr><name>BINN_STRING</name></expr></argument>, <argument><expr><literal type="string">"this is the string"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 11th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">99009</literal></expr></argument>, <argument><expr><name>BINN_BLOB</name></expr></argument>, <argument><expr><name>pblob</name></expr></argument>, <argument><expr><name>blobsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>           <comment type="line">// 12th</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"key0"</literal></expr></argument>, <argument><expr><name>BINN_NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                      <comment type="line">// third</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"key1"</literal></expr></argument>, <argument><expr><name>BINN_UINT8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vbyte</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                <comment type="line">// fourth</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"key2"</literal></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint16</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>               <comment type="line">// fifth</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"key3"</literal></expr></argument>, <argument><expr><name>BINN_UINT16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint16</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line">// 6th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"key4"</literal></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>               <comment type="line">// 7th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"key5"</literal></expr></argument>, <argument><expr><name>BINN_UINT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line">// 8th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"key6"</literal></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>               <comment type="line">// 9th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"key7"</literal></expr></argument>, <argument><expr><name>BINN_UINT64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint64</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line">// 10th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"key8"</literal></expr></argument>, <argument><expr><name>BINN_STRING</name></expr></argument>, <argument><expr><literal type="string">"this is the string"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 11th</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"key9"</literal></expr></argument>, <argument><expr><name>BINN_BLOB</name></expr></argument>, <argument><expr><name>pblob</name></expr></argument>, <argument><expr><name>blobsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>           <comment type="line">// 12th</comment>

  <comment type="line">// blobs with size = 0</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_BLOB</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_STRING</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_STRING</name></expr></argument>, <argument><expr><literal type="string">"after the empty items"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// add values to a fixed-size binn (pre-allocated buffer) --------------------------</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>obj1</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set</name><argument_list>(<argument><expr><name>obj1</name></expr></argument>, <argument><expr><literal type="number">55001</literal></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj1</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><name>BINN_UINT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj1</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><name>BINN_UINT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// with the same name</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj1</name></expr></argument>, <argument><expr><literal type="string">"key1"</literal></expr></argument>, <argument><expr><name>BINN_STRING</name></expr></argument>, <argument><expr><literal type="string">"this is the value"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj1</name></expr></argument>, <argument><expr><literal type="string">"key2"</literal></expr></argument>, <argument><expr><name>BINN_STRING</name></expr></argument>, <argument><expr><literal type="string">"the second value"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// create a long string buffer to make the test. the string is longer than the available space</comment>
  <comment type="line">// in the binn.</comment>
  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>fix_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>p2</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fix_size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>p2</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>fix_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj1</name></expr></argument>, <argument><expr><literal type="string">"v2"</literal></expr></argument>, <argument><expr><name>BINN_STRING</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>,
                            <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// it fails because it uses a pre-allocated memory block</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"v2"</literal></expr></argument>, <argument><expr><name>BINN_STRING</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>,
                            <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// but this uses a dynamically allocated memory block, so it works with it</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Key00"</literal></expr></argument>, <argument><expr><name>BINN_STRING</name></expr></argument>, <argument><expr><literal type="string">"after the big string"</literal></expr></argument>,
                            <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// and test the 'Key00' against the 'Key0'</comment>

  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"list"</literal></expr></argument>, <argument><expr><name>BINN_LIST</name></expr></argument>, <argument><expr><call><name>binn_ptr</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>binn_size</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"Key10"</literal></expr></argument>, <argument><expr><name>BINN_STRING</name></expr></argument>, <argument><expr><literal type="string">"after the list"</literal></expr></argument>,
                            <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// and test the 'Key10' against the 'Key1'</comment>


  <comment type="line">// read values - invalid 2 ------------------------------------------------------------</comment>


  <comment type="line">// read keys --------------------------------------------------------------------------</comment>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_ptr</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_get_pair</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_get_pair</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_get_pair</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>id</name> <operator>==</operator> <literal type="number">5501</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_get_pair</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>id</name> <operator>==</operator> <literal type="number">99000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_get_pair</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>id</name> <operator>==</operator> <literal type="number">99001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_get_pair</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>id</name> <operator>==</operator> <literal type="number">99008</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_get_pair</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>id</name> <operator>==</operator> <literal type="number">99009</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_ptr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_pair</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_pair</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_pair</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_pair</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"key0"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_pair</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"key1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_pair</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"key8"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_pair</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"key9"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// read values - valid ----------------------------------------------------------------</comment>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_ptr</name><argument_list>(<argument><expr><name>obj1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pstr</name> <operator>=</operator> <call><name>binn_object_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"key1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pstr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>, <argument><expr><literal type="string">"this is the value"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pstr</name> <operator>=</operator> <call><name>binn_object_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"key2"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pstr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>, <argument><expr><literal type="string">"the second value"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pint32</name> <operator>=</operator> <call><name>binn_object_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pint32</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_UINT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//CU_ASSERT(size &gt; 0);</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>pint32</name> <operator>==</operator> <name>vuint32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_ptr</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pstr</name> <operator>=</operator> <call><name>binn_list_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pstr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//CU_ASSERT(size &gt; 0);</comment>
  <comment type="line">//CU_ASSERT(strcmp(pstr, "this is the value") == 0);</comment>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>binn_list_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>p2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_UINT8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>p2</name> <operator>==</operator> <name>vbyte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pint16</name> <operator>=</operator> <call><name>binn_list_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pint16</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_INT16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>pint16</name> <operator>==</operator> <name>vint16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>puint16</name> <operator>=</operator> <call><name>binn_list_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>puint16</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_UINT16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>puint16</name> <operator>==</operator> <name>vuint16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pint32</name> <operator>=</operator> <call><name>binn_list_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pint32</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_INT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>pint32</name> <operator>==</operator> <name>vint32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// in the second time the value must be the same...</comment>
  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pint32</name> <operator>=</operator> <call><name>binn_list_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pint32</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_INT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>pint32</name> <operator>==</operator> <name>vint32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>puint32</name> <operator>=</operator> <call><name>binn_list_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>puint32</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_UINT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>puint32</name> <operator>==</operator> <name>vuint32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pint64</name> <operator>=</operator> <call><name>binn_list_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pint64</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_INT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>pint64</name> <operator>==</operator> <name>vint64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// in the second time the value must be the same...</comment>
  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pint64</name> <operator>=</operator> <call><name>binn_list_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pint64</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_INT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>pint64</name> <operator>==</operator> <name>vint64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>puint64</name> <operator>=</operator> <call><name>binn_list_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>puint64</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_UINT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>puint64</name> <operator>==</operator> <name>vuint64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pstr</name> <operator>=</operator> <call><name>binn_list_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pstr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>, <argument><expr><literal type="string">"this is the string"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>binn_list_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>p2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_BLOB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <name>blobsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><name>pblob</name></expr></argument>, <argument><expr><name>blobsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_ptr</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pstr</name> <operator>=</operator> <call><name>binn_map_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">99000</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pstr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//CU_ASSERT(size &gt; 0);</comment>
  <comment type="line">//CU_ASSERT(strcmp(pstr, "this is the value") == 0);</comment>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>binn_map_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">99001</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>p2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_UINT8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>p2</name> <operator>==</operator> <name>vbyte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pint16</name> <operator>=</operator> <call><name>binn_map_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">99002</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pint16</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_INT16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>pint16</name> <operator>==</operator> <name>vint16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>puint16</name> <operator>=</operator> <call><name>binn_map_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">99003</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>puint16</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_UINT16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>puint16</name> <operator>==</operator> <name>vuint16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pint32</name> <operator>=</operator> <call><name>binn_map_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">99004</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pint32</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_INT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>pint32</name> <operator>==</operator> <name>vint32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// in the second time the value must be the same...</comment>
  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pint32</name> <operator>=</operator> <call><name>binn_map_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">99004</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pint32</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_INT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>pint32</name> <operator>==</operator> <name>vint32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>puint32</name> <operator>=</operator> <call><name>binn_map_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">99005</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>puint32</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_UINT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>puint32</name> <operator>==</operator> <name>vuint32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pint64</name> <operator>=</operator> <call><name>binn_map_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">99006</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pint64</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_INT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>pint64</name> <operator>==</operator> <name>vint64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// in the second time the value must be the same...</comment>
  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pint64</name> <operator>=</operator> <call><name>binn_map_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">99006</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pint64</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_INT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>pint64</name> <operator>==</operator> <name>vint64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>puint64</name> <operator>=</operator> <call><name>binn_map_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">99007</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>puint64</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_UINT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>puint64</name> <operator>==</operator> <name>vuint64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pstr</name> <operator>=</operator> <call><name>binn_map_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">99008</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pstr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>, <argument><expr><literal type="string">"this is the string"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>binn_map_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">99009</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>p2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_BLOB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <name>blobsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><name>pblob</name></expr></argument>, <argument><expr><name>blobsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_ptr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pstr</name> <operator>=</operator> <call><name>binn_object_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"key0"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pstr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//CU_ASSERT(size &gt; 0);</comment>
  <comment type="line">//CU_ASSERT(strcmp(pstr, "this is the value") == 0);</comment>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>binn_object_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"key1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>p2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_UINT8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>p2</name> <operator>==</operator> <name>vbyte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pint16</name> <operator>=</operator> <call><name>binn_object_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"key2"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pint16</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_INT16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>pint16</name> <operator>==</operator> <name>vint16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>puint16</name> <operator>=</operator> <call><name>binn_object_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"key3"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>puint16</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_UINT16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>puint16</name> <operator>==</operator> <name>vuint16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pint32</name> <operator>=</operator> <call><name>binn_object_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"key4"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pint32</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_INT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>pint32</name> <operator>==</operator> <name>vint32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// in the second time the value must be the same...</comment>
  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pint32</name> <operator>=</operator> <call><name>binn_object_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"key4"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pint32</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_INT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>pint32</name> <operator>==</operator> <name>vint32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>puint32</name> <operator>=</operator> <call><name>binn_object_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"key5"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>puint32</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_UINT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>puint32</name> <operator>==</operator> <name>vuint32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pint64</name> <operator>=</operator> <call><name>binn_object_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"key6"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pint64</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_INT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>pint64</name> <operator>==</operator> <name>vint64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// in the second time the value must be the same...</comment>
  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pint64</name> <operator>=</operator> <call><name>binn_object_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"key6"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pint64</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_INT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>pint64</name> <operator>==</operator> <name>vint64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>puint64</name> <operator>=</operator> <call><name>binn_object_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"key7"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>puint64</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_UINT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>puint64</name> <operator>==</operator> <name>vuint64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pstr</name> <operator>=</operator> <call><name>binn_object_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"key8"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pstr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>, <argument><expr><literal type="string">"this is the string"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>binn_object_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"key9"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>p2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_BLOB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <name>blobsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><name>pblob</name></expr></argument>, <argument><expr><name>blobsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>binn_object_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"v2"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>p2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <name>fix_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>fix_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>p2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>p2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>p2</name><index>[<expr><literal type="number">500</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>p2</name><index>[<expr><name>fix_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pstr</name> <operator>=</operator> <call><name>binn_object_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"key00"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pstr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>, <argument><expr><literal type="string">"after the big string"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>binn_object_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"list"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>p2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//</comment>
  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>puint64</name> <operator>=</operator> <call><name>binn_list_read</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>puint64</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_UINT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>puint64</name> <operator>==</operator> <name>vuint64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//</comment>
  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pstr</name> <operator>=</operator> <call><name>binn_list_read</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pstr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>, <argument><expr><literal type="string">"this is the string"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//</comment>
  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pstr</name> <operator>=</operator> <call><name>binn_list_read</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pstr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_BLOB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="line">// empty blob</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//</comment>
  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pstr</name> <operator>=</operator> <call><name>binn_list_read</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pstr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="line">// empty string</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//</comment>
  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pstr</name> <operator>=</operator> <call><name>binn_list_read</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pstr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>, <argument><expr><literal type="string">"after the empty items"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pstr</name> <operator>=</operator> <call><name>binn_object_read</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"key10"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>pstr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>, <argument><expr><literal type="string">"after the list"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// binn_ptr, IsValidBinnHeader, binn_is_valid...</comment>
  <comment type="line">// also with invalid/null pointers, with pointers containing invalid data...</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_ptr</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// pointers to invalid data</comment>
  <comment type="line">//CU_ASSERT(binn_ptr(&amp;type) == NULL);</comment>
  <comment type="line">//CU_ASSERT(binn_ptr(&amp;size) == NULL);</comment>
  <comment type="line">//CU_ASSERT(binn_ptr(&amp;count) == NULL);</comment>
  <comment type="line">//CU_ASSERT(binn_is_valid_header(NULL) == FALSE);</comment>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_ptr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// test the header</comment>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_is_valid_header</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>count</name> <operator>==</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>header_size</name> <operator>&gt;=</operator> <name>MIN_BINN_SIZE</name> <operator>&amp;&amp;</operator> <name>header_size</name> <operator>&lt;=</operator> <name>MAX_BINN_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <name>MIN_BINN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <name><name>obj</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// test all the buffer</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_is_valid</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>count</name> <operator>==</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <name>MIN_BINN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <name><name>obj</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_ptr</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// test the header</comment>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_is_valid_header</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_MAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>count</name> <operator>==</operator> <literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>header_size</name> <operator>&gt;=</operator> <name>MIN_BINN_SIZE</name> <operator>&amp;&amp;</operator> <name>header_size</name> <operator>&lt;=</operator> <name>MAX_BINN_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <name>MIN_BINN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <name><name>map</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// test all the buffer</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_is_valid</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_MAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>count</name> <operator>==</operator> <literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <name>MIN_BINN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <name><name>map</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_ptr</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// test the header</comment>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_is_valid_header</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>count</name> <operator>==</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>header_size</name> <operator>&gt;=</operator> <name>MIN_BINN_SIZE</name> <operator>&amp;&amp;</operator> <name>header_size</name> <operator>&lt;=</operator> <name>MAX_BINN_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <name>MIN_BINN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <name><name>list</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// test all the buffer</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_is_valid</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>BINN_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>count</name> <operator>==</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>header_size</name> <operator>&gt;=</operator> <name>MIN_BINN_SIZE</name> <operator>&amp;&amp;</operator> <name>header_size</name> <operator>&lt;=</operator> <name>MAX_BINN_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <name>MIN_BINN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <name><name>list</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// binn_size - invalid and valid args --------------------------------------------</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_size</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_size</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>list</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_size</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>map</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_size</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>obj</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_size</name><argument_list>(<argument><expr><name>obj1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>obj1</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// destroy them all -------------------------------------------------------------------</comment>

  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"OK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>

<function><type><name>void</name></type> <name>test_invalid_binn</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buffers</name><index>[]</index><index>[<expr><literal type="number">20</literal></expr>]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x7E</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x7F</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x12</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x01</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x7F</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x01</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x12</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x01</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x7F</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x01</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x8E</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x12</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x01</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x7F</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x01</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>}</block></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"testing invalid binn buffers..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>count</name> <operator>=</operator> <sizeof>sizeof <name>buffers</name></sizeof> <operator>/</operator> <sizeof>sizeof <name><name>buffers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></sizeof></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"checking invalid binn #%d   size: %d bytes\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_is_valid_ex</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>CU_pSuite</name></type> <name>pSuite</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>CUE_SUCCESS</name> <operator>!=</operator> <call><name>CU_initialize_registry</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>pSuite</name> <operator>=</operator> <call><name>CU_add_suite</name><argument_list>(<argument><expr><literal type="string">"jbl_test_binn1"</literal></expr></argument>, <argument><expr><name>init_suite</name></expr></argument>, <argument><expr><name>clean_suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pSuite</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CU_cleanup_registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(  <expr><operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>CU_add_test</name><argument_list>(<argument><expr><name>pSuite</name></expr></argument>, <argument><expr><literal type="string">"test_int64"</literal></expr></argument>, <argument><expr><name>test_int64</name></expr></argument>)</argument_list></call><operator>)</operator>
     <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>CU_add_test</name><argument_list>(<argument><expr><name>pSuite</name></expr></argument>, <argument><expr><literal type="string">"test_floating_point_numbers"</literal></expr></argument>, <argument><expr><name>test_floating_point_numbers</name></expr></argument>)</argument_list></call><operator>)</operator>
     <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>CU_add_test</name><argument_list>(<argument><expr><name>pSuite</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>, <argument><expr><name>test1</name></expr></argument>)</argument_list></call><operator>)</operator>
     <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>CU_add_test</name><argument_list>(<argument><expr><name>pSuite</name></expr></argument>, <argument><expr><literal type="string">"test2"</literal></expr></argument>, <argument><expr><name>test2</name></expr></argument>)</argument_list></call><operator>)</operator>
     <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>CU_add_test</name><argument_list>(<argument><expr><name>pSuite</name></expr></argument>, <argument><expr><literal type="string">"test_invalid_binn"</literal></expr></argument>, <argument><expr><name>test_invalid_binn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CU_cleanup_registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>CU_basic_set_mode</name><argument_list>(<argument><expr><name>CU_BRM_VERBOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_basic_run_tests</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>CU_get_number_of_failures</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CU_cleanup_registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
