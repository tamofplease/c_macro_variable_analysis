<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iowow/src/json/tests/jbl_test_binn2.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwbinn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwjson_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwconv.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CUnit/Basic.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT64_FORMAT</name></cpp:macro>     <cpp:value>PRId64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT64_FORMAT</name></cpp:macro>    <cpp:value>PRIu64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT64_HEX_FORMAT</name></cpp:macro> <cpp:value>PRIx64</cpp:value></cpp:define>

<typedef>typedef <type><name>unsigned</name> <name>short</name> <name>int</name></type> <name>u16</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>u32</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>u64</name>;</typedef>

<function><type><name>int</name></type> <name>init_suite</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>iw_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clean_suite</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snprintf</name></cpp:macro> <cpp:value>_snprintf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>MY_DATE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>MY_CURRENCY</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name><modifier>*</modifier></type> <name>memdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>i64toa</name><parameter_list>(<parameter><decl><type><name>int64</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>iwitoa</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atoi64</name></cpp:macro> <cpp:value>_atoi64</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><name>int64</name></type> <name>atoi64</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>BOOL</name></type> <name>AlmostEqualFloats</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxUlps</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>

<decl_stmt><decl><type><name>int</name></type> <name>vint32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>vuint32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64</name></type> <name>vint64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64</name></type> <name>vuint64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>vint16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>vuint16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>signed</name> <name>char</name></type> <name>vint8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>vuint8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>vfloat32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>vfloat64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>vbool</name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>

<function><type><name>char</name><modifier>*</modifier></type> <name>stripchr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mainstr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>separator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>mainstr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>mainstr</name></expr></argument>, <argument><expr><name>separator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>
<comment type="line">// MY_DATE</comment>
<comment type="line">// day:   1-31 -&gt; 2^5 -&gt; 5 bits</comment>
<comment type="line">// month: 1-12 -&gt; 2^4 -&gt; 4 bits</comment>
<comment type="line">// year:  16 - 9 bits = 7 bits -&gt; 2^7=128 - from 1900 to 2028</comment>

<function><type><name>unsigned</name> <name>short</name></type> <name>str_to_date</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>datestr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>date</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>day</name></decl>, <decl><type ref="prev"/><name>month</name></decl>, <decl><type ref="prev"/><name>year</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>datestr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>datestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>datestr</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>stripchr</name><argument_list>(<argument><expr><name>datestr</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>year</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>datestr</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1900</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name>datestr</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>stripchr</name><argument_list>(<argument><expr><name>datestr</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>month</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>datestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>day</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>date</name> <operator>=</operator> <operator>(</operator><name>day</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>month</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> <name>year</name></expr>;</expr_stmt>
  <return>return <expr><name>date</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>

<function><type><name>char</name><modifier>*</modifier></type> <name>date_to_str</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>date</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>day</name></decl>, <decl><type ref="prev"/><name>month</name></decl>, <decl><type ref="prev"/><name>year</name></decl>;</decl_stmt>
  <comment type="line">//char *datestr;</comment>

  <expr_stmt><expr><name>day</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>date</name> <operator>&amp;</operator> <literal type="number">0xf800</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>month</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>date</name> <operator>&amp;</operator> <literal type="number">0x0780</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>year</name> <operator>=</operator> <operator>(</operator><name>date</name> <operator>&amp;</operator> <literal type="number">0x007f</literal><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"%.4d-%.2d-%.2d"</literal></expr></argument>, <argument><expr><name>year</name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><name>day</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>tmp</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>
<comment type="line">// MY_CURRENCY</comment>
<comment type="line">// 00000000.0000  &lt;- fixed point</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURRENCY_DECIMAL_DIGITS</name></cpp:macro>     <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURRENCY_DECIMAL_DIGITS_STR</name></cpp:macro> <cpp:value>"0000"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURRENCY_FACTOR</name></cpp:macro>             <cpp:value>10000</cpp:value></cpp:define>

<function><type><name>int64</name></type> <name>str_to_currency</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>str</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>next</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>next</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// include the null terminator</comment>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <name>CURRENCY_DECIMAL_DIGITS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>size</name> <operator>=</operator> <name>CURRENCY_DECIMAL_DIGITS</name> <operator>-</operator> <name>size</name></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>next</name><index>[<expr><name>CURRENCY_DECIMAL_DIGITS</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="line">// puts a null terminator</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>CURRENCY_DECIMAL_DIGITS_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><call><name>atoi64</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>

<function><type><name>char</name><modifier>*</modifier></type> <name>currency_to_str</name><parameter_list>(<parameter><decl><type><name>int64</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>move</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>i64toa</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>str</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>CURRENCY_DECIMAL_DIGITS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>str</name> <operator>+</operator> <name>size</name> <operator>-</operator> <name>CURRENCY_DECIMAL_DIGITS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>CURRENCY_DECIMAL_DIGITS</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// include the null terminator</comment>
    <expr_stmt><expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>                                       <comment type="line">// include the point</comment>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>move</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <name>CURRENCY_DECIMAL_DIGITS</name> <operator>-</operator> <name>size</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>move</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// include the null terminator</comment>
    <expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>                       <comment type="line">// include the zero</comment>
    <expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>                       <comment type="line">// include the point</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>move</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></for>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>

<function><type><name>int64</name></type> <name>float_to_currency</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>, <argument><expr><literal type="string">"%.4f"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>str_to_currency</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>

<function><type><name>double</name></type> <name>currency_to_float</name><parameter_list>(<parameter><decl><type><name>int64</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>currency_to_str</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>atof</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>

<function><type><name>int64</name></type> <name>mul_currency</name><parameter_list>(<parameter><decl><type><name>int64</name></type> <name>value1</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>value2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>value1</name> <operator>*</operator> <name>value2</name> <operator>/</operator> <name>CURRENCY_FACTOR</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>

<function><type><name>int64</name></type> <name>div_currency</name><parameter_list>(<parameter><decl><type><name>int64</name></type> <name>value1</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>value2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>value1</name> <operator>*</operator> <name>CURRENCY_FACTOR</name> <operator>/</operator> <name>value2</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>

<comment type="line" format="doxygen">//! this code may not work on processors that does not use the default float standard</comment>
<comment type="line">//  original name: AlmostEqual2sComplement</comment>
<function><type><name>BOOL</name></type> <name>AlmostEqualFloats</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxUlps</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>aInt</name></decl>, <decl><type ref="prev"/><name>bInt</name></decl>, <decl><type ref="prev"/><name>intDiff</name></decl>;</decl_stmt>
  <comment type="line">// Make sure maxUlps is non-negative and small enough that the</comment>
  <comment type="line">// default NAN won't compare as equal to anything.</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>maxUlps</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>maxUlps</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>aInt</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>A</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>bInt</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>B</name></expr>;</expr_stmt>
  <comment type="line">// Make aInt lexicographically ordered as a twos-complement int</comment>
  <if_stmt><if>if <condition>(<expr><name>aInt</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>aInt</name> <operator>=</operator> <literal type="number">0x80000000</literal> <operator>-</operator> <name>aInt</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>bInt</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>bInt</name> <operator>=</operator> <literal type="number">0x80000000</literal> <operator>-</operator> <name>bInt</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>intDiff</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>aInt</name> <operator>-</operator> <name>bInt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>intDiff</name> <operator>&lt;=</operator> <name>maxUlps</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TRUE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>

<function><type><name>char</name><modifier>*</modifier></type> <name>test_create_object_1</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>psize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>binn</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>INVALID_BINN</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>list</name> <init>= <expr><name>INVALID_BINN</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"creating object 1...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>binn_object</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>obj</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <operator>-</operator><literal type="number">12345</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"int32"</literal></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint16</name> <operator>=</operator> <operator>-</operator><literal type="number">258</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"int16"</literal></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint16</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint8</name> <operator>=</operator> <operator>-</operator><literal type="number">120</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"int8"</literal></expr></argument>, <argument><expr><name>BINN_INT8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <operator>-</operator><literal type="number">1234567890123</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"int64"</literal></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vuint32</name> <operator>=</operator> <literal type="number">123456</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"uint32"</literal></expr></argument>, <argument><expr><name>BINN_UINT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint16</name> <operator>=</operator> <literal type="number">60500</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"uint16"</literal></expr></argument>, <argument><expr><name>BINN_UINT16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint16</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint8</name> <operator>=</operator> <literal type="number">250</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"uint8"</literal></expr></argument>, <argument><expr><name>BINN_UINT8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint64</name> <operator>=</operator> <literal type="number">1234567890123</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"uint64"</literal></expr></argument>, <argument><expr><name>BINN_UINT64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint64</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vfloat32</name> <operator>=</operator> <operator>-</operator><literal type="number">12.345</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"float32"</literal></expr></argument>, <argument><expr><name>BINN_FLOAT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vfloat32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>vfloat32</name> <operator>=</operator> <operator>-</operator><literal type="number">12.345</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"single"</literal></expr></argument>, <argument><expr><name>BINN_SINGLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vfloat32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>vfloat64</name> <operator>=</operator> <operator>-</operator><literal type="number">123456.7895</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"float64"</literal></expr></argument>, <argument><expr><name>BINN_FLOAT64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vfloat64</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>vfloat64</name> <operator>=</operator> <operator>-</operator><literal type="number">123456.7895</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"double"</literal></expr></argument>, <argument><expr><name>BINN_DOUBLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vfloat64</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"str"</literal></expr></argument>, <argument><expr><name>BINN_STRING</name></expr></argument>, <argument><expr><literal type="string">"the value"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"bool_true"</literal></expr></argument>, <argument><expr><name>BINN_BOOL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"bool_false"</literal></expr></argument>, <argument><expr><name>BINN_BOOL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>, <argument><expr><name>BINN_NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// add a list</comment>

  <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>binn_list</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>list</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <literal type="number">123</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_STRING</name></expr></argument>, <argument><expr><literal type="string">"this is a string"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"list"</literal></expr></argument>, <argument><expr><name>BINN_LIST</name></expr></argument>, <argument><expr><call><name>binn_ptr</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>binn_size</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>list</name> <operator>=</operator> <name>INVALID_BINN</name></expr>;</expr_stmt>


  <comment type="line">// return the values</comment>

  <expr_stmt><expr><operator>*</operator><name>psize</name> <operator>=</operator> <call><name>binn_size</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>binn_release</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>

<function><type><name>char</name><modifier>*</modifier></type> <name>test_create_object_2</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>psize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>binn</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>INVALID_BINN</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>list</name> <init>= <expr><name>INVALID_BINN</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"creating object 2...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>binn_object</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>obj</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_int32</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"int32"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">12345</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_int16</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"int16"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">258</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_int8</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"int8"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">120</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_int64</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"int64"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1234567890123</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_uint32</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"uint32"</literal></expr></argument>, <argument><expr><literal type="number">123456</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_int16</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"uint16"</literal></expr></argument>, <argument><expr><operator>(</operator><name>short</name><operator>)</operator> <literal type="number">60500</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_int8</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"uint8"</literal></expr></argument>, <argument><expr><operator>(</operator><name>signed</name> <name>char</name><operator>)</operator> <literal type="number">250</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_uint64</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"uint64"</literal></expr></argument>, <argument><expr><literal type="number">1234567890123</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_float</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"float32"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">12.345</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>vfloat32</name> <operator>=</operator> <operator>-</operator><literal type="number">12.345</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"single"</literal></expr></argument>, <argument><expr><name>BINN_SINGLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vfloat32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"float64"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">123456.7895</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>vfloat64</name> <operator>=</operator> <operator>-</operator><literal type="number">123456.7895</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"double"</literal></expr></argument>, <argument><expr><name>BINN_DOUBLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vfloat64</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_str</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"str"</literal></expr></argument>, <argument><expr><literal type="string">"the value"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_bool</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"bool_true"</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_bool</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"bool_false"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_null</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// add a list</comment>

  <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>binn_list</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>list</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add_null</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add_int32</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add_str</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">"this is a string"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_list</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"list"</literal></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>list</name> <operator>=</operator> <name>INVALID_BINN</name></expr>;</expr_stmt>


  <comment type="line">// return the values</comment>

  <expr_stmt><expr><operator>*</operator><name>psize</name> <operator>=</operator> <call><name>binn_size</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>binn_release</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>

<function><type><name>void</name></type> <name>test_binn_read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>objptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>listptr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>binn</name></type> <name>value</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"OK\nreading:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"int32"</literal></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"int32: %d\n"</literal></expr></argument>, <argument><expr><name>vint32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <operator>-</operator><literal type="number">12345</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint16</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"int16"</literal></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint16</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"int16: %d\n"</literal></expr></argument>, <argument><expr><name>vint16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint16</name> <operator>==</operator> <operator>-</operator><literal type="number">258</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint8</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"int8"</literal></expr></argument>, <argument><expr><name>BINN_INT8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint8</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"int8: %d\n"</literal></expr></argument>, <argument><expr><name>vint8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint8</name> <operator>==</operator> <operator>-</operator><literal type="number">120</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"int64"</literal></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"int64: %"</literal> <name>INT64_FORMAT</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>vint64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <operator>-</operator><literal type="number">1234567890123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>vuint32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"uint32"</literal></expr></argument>, <argument><expr><name>BINN_UINT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint32</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"uint32: %d\n"</literal></expr></argument>, <argument><expr><name>vuint32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint32</name> <operator>==</operator> <literal type="number">123456</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vuint16</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"uint16"</literal></expr></argument>, <argument><expr><name>BINN_UINT16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint16</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"uint16: %d\n"</literal></expr></argument>, <argument><expr><name>vuint16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint16</name> <operator>==</operator> <literal type="number">60500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vuint8</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"uint8"</literal></expr></argument>, <argument><expr><name>BINN_UINT8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint8</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"uint8: %d\n"</literal></expr></argument>, <argument><expr><name>vuint8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint8</name> <operator>==</operator> <literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vuint64</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"uint64"</literal></expr></argument>, <argument><expr><name>BINN_UINT64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint64</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"uint64: %"</literal> <name>UINT64_FORMAT</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>vuint64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint64</name> <operator>==</operator> <literal type="number">1234567890123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>vfloat32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"float32"</literal></expr></argument>, <argument><expr><name>BINN_FLOAT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vfloat32</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"float32: %f\n"</literal></expr></argument>, <argument><expr><name>vfloat32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>AlmostEqualFloats</name><argument_list>(<argument><expr><name>vfloat32</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">12.345</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vfloat64</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"float64"</literal></expr></argument>, <argument><expr><name>BINN_FLOAT64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vfloat64</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"float64: %f\n"</literal></expr></argument>, <argument><expr><name>vfloat64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vfloat64</name> <operator>-</operator> <operator>-</operator><literal type="number">123456.7895</literal> <operator>&lt;</operator> <literal type="number">0.01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vfloat32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"single"</literal></expr></argument>, <argument><expr><name>BINN_SINGLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vfloat32</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"single: %f\n"</literal></expr></argument>, <argument><expr><name>vfloat32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>AlmostEqualFloats</name><argument_list>(<argument><expr><name>vfloat32</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">12.345</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vfloat64</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"double"</literal></expr></argument>, <argument><expr><name>BINN_DOUBLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vfloat64</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"double: %f\n"</literal></expr></argument>, <argument><expr><name>vfloat64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vfloat64</name> <operator>-</operator> <operator>-</operator><literal type="number">123456.7895</literal> <operator>&lt;</operator> <literal type="number">0.01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"str"</literal></expr></argument>, <argument><expr><name>BINN_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ptr: (%p) '%s'\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"the value"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <literal type="number">999</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"bool_true"</literal></expr></argument>, <argument><expr><name>BINN_BOOL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"bool true: %d\n"</literal></expr></argument>, <argument><expr><name>vint32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <literal type="number">999</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"bool_false"</literal></expr></argument>, <argument><expr><name>BINN_BOOL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"bool false: %d\n"</literal></expr></argument>, <argument><expr><name>vint32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <literal type="number">999</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>, <argument><expr><name>BINN_NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"null: %d\n"</literal></expr></argument>, <argument><expr><name>vint32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//CU_ASSERT(vint32 == 0);</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>, <argument><expr><name>BINN_NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"list"</literal></expr></argument>, <argument><expr><name>BINN_LIST</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>listptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"obj ptr: %p  list ptr: %p\n"</literal></expr></argument>, <argument><expr><name>objptr</name></expr></argument>, <argument><expr><name>listptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>listptr</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>listptr</name> <operator>&gt;</operator> <name>objptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_get</name><argument_list>(<argument><expr><name>listptr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"int32: %d\n"</literal></expr></argument>, <argument><expr><name>vint32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_get</name><argument_list>(<argument><expr><name>listptr</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>BINN_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ptr: (%p) '%s'\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"this is a string"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// short read functions 1</comment>

  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_int32</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"int32"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"int32: %d\n"</literal></expr></argument>, <argument><expr><name>vint32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <operator>-</operator><literal type="number">12345</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint16</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_int16</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"int16"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint16</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"int16: %d\n"</literal></expr></argument>, <argument><expr><name>vint16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint16</name> <operator>==</operator> <operator>-</operator><literal type="number">258</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint8</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_int8</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"int8"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint8</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"int8: %d\n"</literal></expr></argument>, <argument><expr><name>vint8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint8</name> <operator>==</operator> <operator>-</operator><literal type="number">120</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_int64</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"int64"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"int64: %"</literal> <name>INT64_FORMAT</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>vint64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <operator>-</operator><literal type="number">1234567890123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>vuint32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_uint32</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"uint32"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"uint32: %d\n"</literal></expr></argument>, <argument><expr><name>vuint32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint32</name> <operator>==</operator> <literal type="number">123456</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vuint16</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_uint16</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"uint16"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint16</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"uint16: %d\n"</literal></expr></argument>, <argument><expr><name>vuint16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint16</name> <operator>==</operator> <literal type="number">60500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vuint8</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_uint8</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"uint8"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint8</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"uint8: %d\n"</literal></expr></argument>, <argument><expr><name>vuint8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint8</name> <operator>==</operator> <literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vuint64</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_uint64</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"uint64"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint64</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"uint64: %"</literal> <name>UINT64_FORMAT</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>vuint64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint64</name> <operator>==</operator> <literal type="number">1234567890123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>vfloat32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_float</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"float32"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vfloat32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"float32: %f\n"</literal></expr></argument>, <argument><expr><name>vfloat32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>AlmostEqualFloats</name><argument_list>(<argument><expr><name>vfloat32</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">12.345</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vfloat64</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_double</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"float64"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vfloat64</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"float64: %f\n"</literal></expr></argument>, <argument><expr><name>vfloat64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>AlmostEqualFloats</name><argument_list>(<argument><expr><name>vfloat32</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">12.345</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_str</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"str"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ptr: (%p) '%s'\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"the value"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <literal type="number">999</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_bool</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"bool_true"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"bool true: %d\n"</literal></expr></argument>, <argument><expr><name>vint32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <literal type="number">999</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_bool</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"bool_false"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"bool false: %d\n"</literal></expr></argument>, <argument><expr><name>vint32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>vbool</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_null</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_null</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"bool_true"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_list</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"list"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>listptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"obj ptr: %p  list ptr: %p\n"</literal></expr></argument>, <argument><expr><name>objptr</name></expr></argument>, <argument><expr><name>listptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>listptr</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>listptr</name> <operator>&gt;</operator> <name>objptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_get_int32</name><argument_list>(<argument><expr><name>listptr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"int32: %d\n"</literal></expr></argument>, <argument><expr><name>vint32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_get_str</name><argument_list>(<argument><expr><name>listptr</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ptr: (%p) '%s'\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"this is a string"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// short read functions 2</comment>

  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <call><name>binn_object_int32</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"int32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"int32: %d\n"</literal></expr></argument>, <argument><expr><name>vint32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <operator>-</operator><literal type="number">12345</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint16</name> <operator>=</operator> <call><name>binn_object_int16</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"int16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"int16: %d\n"</literal></expr></argument>, <argument><expr><name>vint16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint16</name> <operator>==</operator> <operator>-</operator><literal type="number">258</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint8</name> <operator>=</operator> <call><name>binn_object_int8</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"int8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"int8: %d\n"</literal></expr></argument>, <argument><expr><name>vint8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint8</name> <operator>==</operator> <operator>-</operator><literal type="number">120</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <call><name>binn_object_int64</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"int64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"int64: %"</literal> <name>INT64_FORMAT</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>vint64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <operator>-</operator><literal type="number">1234567890123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>vuint32</name> <operator>=</operator> <call><name>binn_object_uint32</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"uint32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"uint32: %d\n"</literal></expr></argument>, <argument><expr><name>vuint32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint32</name> <operator>==</operator> <literal type="number">123456</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vuint16</name> <operator>=</operator> <call><name>binn_object_uint16</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"uint16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"uint16: %d\n"</literal></expr></argument>, <argument><expr><name>vuint16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint16</name> <operator>==</operator> <literal type="number">60500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vuint8</name> <operator>=</operator> <call><name>binn_object_uint8</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"uint8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"uint8: %d\n"</literal></expr></argument>, <argument><expr><name>vuint8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint8</name> <operator>==</operator> <literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vuint64</name> <operator>=</operator> <call><name>binn_object_uint64</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"uint64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"uint64: %"</literal> <name>UINT64_FORMAT</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>vuint64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint64</name> <operator>==</operator> <literal type="number">1234567890123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>vfloat32</name> <operator>=</operator> <call><name>binn_object_float</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"float32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"float32: %f\n"</literal></expr></argument>, <argument><expr><name>vfloat32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>AlmostEqualFloats</name><argument_list>(<argument><expr><name>vfloat32</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">12.345</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vfloat64</name> <operator>=</operator> <call><name>binn_object_double</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"float64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"float64: %f\n"</literal></expr></argument>, <argument><expr><name>vfloat64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>AlmostEqualFloats</name><argument_list>(<argument><expr><name>vfloat32</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">12.345</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_object_str</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"str"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ptr: (%p) '%s'\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"the value"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <call><name>binn_object_bool</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"bool_true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"bool true: %d\n"</literal></expr></argument>, <argument><expr><name>vint32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <call><name>binn_object_bool</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"bool_false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"bool false: %d\n"</literal></expr></argument>, <argument><expr><name>vint32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_null</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_null</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"nonull"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>listptr</name> <operator>=</operator> <call><name>binn_object_list</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"obj ptr: %p  list ptr: %p\n"</literal></expr></argument>, <argument><expr><name>objptr</name></expr></argument>, <argument><expr><name>listptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>listptr</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>listptr</name> <operator>&gt;</operator> <name>objptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <call><name>binn_list_int32</name><argument_list>(<argument><expr><name>listptr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"int32: %d\n"</literal></expr></argument>, <argument><expr><name>vint32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_list_str</name><argument_list>(<argument><expr><name>listptr</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ptr: (%p) '%s'\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"this is a string"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// read as value / binn</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_value</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"int32"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BINN_DISABLE_COMPRESS_INT</name></cpp:ifndef>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_INT16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vint16</name></name> <operator>==</operator> <operator>-</operator><literal type="number">12345</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_INT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vint32</name></name> <operator>==</operator> <operator>-</operator><literal type="number">12345</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_value</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"int16"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_INT16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vint16</name></name> <operator>==</operator> <operator>-</operator><literal type="number">258</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_value</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"int8"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_INT8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vint8</name></name> <operator>==</operator> <operator>-</operator><literal type="number">120</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_value</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"int64"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_INT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vint64</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1234567890123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_value</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"uint32"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_UINT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vuint32</name></name> <operator>==</operator> <literal type="number">123456</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_value</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"uint16"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_UINT16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vuint16</name></name> <operator>==</operator> <literal type="number">60500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_value</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"uint8"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_UINT8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vuint8</name></name> <operator>==</operator> <literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get_value</name><argument_list>(<argument><expr><name>objptr</name></expr></argument>, <argument><expr><literal type="string">"uint64"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_UINT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vuint64</name></name> <operator>==</operator> <literal type="number">1234567890123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"reading... OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>

<function><type><name>void</name></type> <name>init_udts</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>binn</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>INVALID_BINN</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>date</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64</name></type> <name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"testing UDTs..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>date_to_str</name><argument_list>(<argument><expr><call><name>str_to_date</name><argument_list>(<argument><expr><literal type="string">"1950-08-15"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1950-08-15"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>date_to_str</name><argument_list>(<argument><expr><call><name>str_to_date</name><argument_list>(<argument><expr><literal type="string">"1900-12-01"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1900-12-01"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>date_to_str</name><argument_list>(<argument><expr><call><name>str_to_date</name><argument_list>(<argument><expr><literal type="string">"2000-10-31"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"2000-10-31"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>date_to_str</name><argument_list>(<argument><expr><call><name>str_to_date</name><argument_list>(<argument><expr><literal type="string">"2014-03-19"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"2014-03-19"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"curr=%s\n"</literal></expr></argument>, <argument><expr><call><name>currency_to_str</name><argument_list>(<argument><expr><call><name>str_to_currency</name><argument_list>(<argument><expr><literal type="string">"123.456"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"curr=%s\n"</literal></expr></argument>, <argument><expr><call><name>currency_to_str</name><argument_list>(<argument><expr><call><name>str_to_currency</name><argument_list>(<argument><expr><literal type="string">"123.45"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"curr=%s\n"</literal></expr></argument>, <argument><expr><call><name>currency_to_str</name><argument_list>(<argument><expr><call><name>str_to_currency</name><argument_list>(<argument><expr><literal type="string">"123.4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"curr=%s\n"</literal></expr></argument>, <argument><expr><call><name>currency_to_str</name><argument_list>(<argument><expr><call><name>str_to_currency</name><argument_list>(<argument><expr><literal type="string">"123."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"curr=%s\n"</literal></expr></argument>, <argument><expr><call><name>currency_to_str</name><argument_list>(<argument><expr><call><name>str_to_currency</name><argument_list>(<argument><expr><literal type="string">"123"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"curr=%s\n"</literal></expr></argument>, <argument><expr><call><name>currency_to_str</name><argument_list>(<argument><expr><call><name>str_to_currency</name><argument_list>(<argument><expr><literal type="string">"1.2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"curr=%s\n"</literal></expr></argument>, <argument><expr><call><name>currency_to_str</name><argument_list>(<argument><expr><call><name>str_to_currency</name><argument_list>(<argument><expr><literal type="string">"0.987"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"curr=%s\n"</literal></expr></argument>, <argument><expr><call><name>currency_to_str</name><argument_list>(<argument><expr><call><name>str_to_currency</name><argument_list>(<argument><expr><literal type="string">"0.98"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"curr=%s\n"</literal></expr></argument>, <argument><expr><call><name>currency_to_str</name><argument_list>(<argument><expr><call><name>str_to_currency</name><argument_list>(<argument><expr><literal type="string">"0.9"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"curr=%s\n"</literal></expr></argument>, <argument><expr><call><name>currency_to_str</name><argument_list>(<argument><expr><call><name>str_to_currency</name><argument_list>(<argument><expr><literal type="string">"0.0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"curr=%s\n"</literal></expr></argument>, <argument><expr><call><name>currency_to_str</name><argument_list>(<argument><expr><call><name>str_to_currency</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"curr=%s\n"</literal></expr></argument>, <argument><expr><call><name>currency_to_str</name><argument_list>(<argument><expr><call><name>str_to_currency</name><argument_list>(<argument><expr><literal type="string">"123.4567"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"curr=%s\n"</literal></expr></argument>, <argument><expr><call><name>currency_to_str</name><argument_list>(<argument><expr><call><name>str_to_currency</name><argument_list>(<argument><expr><literal type="string">"123.45678"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"curr=%s\n"</literal></expr></argument>, <argument><expr><call><name>currency_to_str</name><argument_list>(<argument><expr><call><name>str_to_currency</name><argument_list>(<argument><expr><literal type="string">"123.456789"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"curr=%s\n"</literal></expr></argument>, <argument><expr><call><name>currency_to_str</name><argument_list>(<argument><expr><call><name>str_to_currency</name><argument_list>(<argument><expr><literal type="string">"0.1234"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"curr=%s\n"</literal></expr></argument>, <argument><expr><call><name>currency_to_str</name><argument_list>(<argument><expr><call><name>str_to_currency</name><argument_list>(<argument><expr><literal type="string">".1234"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>float_to_currency</name><argument_list>(<argument><expr><literal type="number">2.5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">25000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>float_to_currency</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">50000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>str_to_currency</name><argument_list>(<argument><expr><literal type="string">"1.1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">11000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>str_to_currency</name><argument_list>(<argument><expr><literal type="string">"12"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">120000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>mul_currency</name><argument_list>(<argument><expr><literal type="number">20000</literal></expr></argument>, <argument><expr><literal type="number">20000</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">40000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>mul_currency</name><argument_list>(<argument><expr><literal type="number">20000</literal></expr></argument>, <argument><expr><literal type="number">25000</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">50000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>mul_currency</name><argument_list>(<argument><expr><literal type="number">30000</literal></expr></argument>, <argument><expr><literal type="number">40000</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">120000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>div_currency</name><argument_list>(<argument><expr><literal type="number">80000</literal></expr></argument>, <argument><expr><literal type="number">20000</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">40000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>div_currency</name><argument_list>(<argument><expr><literal type="number">120000</literal></expr></argument>, <argument><expr><literal type="number">40000</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">30000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>div_currency</name><argument_list>(<argument><expr><literal type="number">100000</literal></expr></argument>, <argument><expr><literal type="number">40000</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">25000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"1.1 * 2.5 = %s\n"</literal></expr></argument>, <argument><expr><call><name>currency_to_str</name><argument_list>(<argument><expr><call><name>mul_currency</name><argument_list>(<argument><expr><call><name>str_to_currency</name><argument_list>(<argument><expr><literal type="string">"1.1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>float_to_currency</name><argument_list>(<argument><expr><literal type="number">2.5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"12 / 5 = %s\n"</literal></expr></argument>, <argument><expr><call><name>currency_to_str</name><argument_list>(<argument><expr><call><name>div_currency</name><argument_list>(<argument><expr><call><name>str_to_currency</name><argument_list>(<argument><expr><literal type="string">"12"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>float_to_currency</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">//CU_ASSERT(binn_register_type(MY_DATE, BINN_STORAGE_WORD) == TRUE);</comment>
  <comment type="line">//CU_ASSERT(binn_register_type(MY_CURRENCY, BINN_STORAGE_QWORD) == TRUE);</comment>

  <expr_stmt><expr><name>MY_DATE</name> <operator>=</operator> <call><name>binn_create_type</name><argument_list>(<argument><expr><name>BINN_STORAGE_WORD</name></expr></argument>, <argument><expr><literal type="number">0x0a</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>MY_CURRENCY</name> <operator>=</operator> <call><name>binn_create_type</name><argument_list>(<argument><expr><name>BINN_STORAGE_QWORD</name></expr></argument>, <argument><expr><literal type="number">0x0a</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>binn_object</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>obj</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>date</name> <operator>=</operator> <call><name>str_to_date</name><argument_list>(<argument><expr><literal type="string">"1950-08-15"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" date 1: %d %s\n"</literal></expr></argument>, <argument><expr><name>date</name></expr></argument>, <argument><expr><call><name>date_to_str</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"date1"</literal></expr></argument>, <argument><expr><name>MY_DATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>date</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"date1"</literal></expr></argument>, <argument><expr><name>MY_DATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>date</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>date</name> <operator>=</operator> <call><name>str_to_date</name><argument_list>(<argument><expr><literal type="string">"1999-12-31"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" date 2: %d %s\n"</literal></expr></argument>, <argument><expr><name>date</name></expr></argument>, <argument><expr><call><name>date_to_str</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"date2"</literal></expr></argument>, <argument><expr><name>MY_DATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>date</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>str_to_currency</name><argument_list>(<argument><expr><literal type="string">"123.456"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" curr 1: %"</literal> <name>UINT64_FORMAT</name> <literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>currency_to_str</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"curr1"</literal></expr></argument>, <argument><expr><name>MY_CURRENCY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>str_to_currency</name><argument_list>(<argument><expr><literal type="string">"123.45"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" curr 2: %"</literal> <name>UINT64_FORMAT</name> <literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>currency_to_str</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"curr2"</literal></expr></argument>, <argument><expr><name>MY_CURRENCY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>str_to_currency</name><argument_list>(<argument><expr><literal type="string">"12.5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" curr 3: %"</literal> <name>UINT64_FORMAT</name> <literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>currency_to_str</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"curr3"</literal></expr></argument>, <argument><expr><name>MY_CURRENCY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>str_to_currency</name><argument_list>(<argument><expr><literal type="string">"5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" curr 4: %"</literal> <name>UINT64_FORMAT</name> <literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>currency_to_str</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"curr4"</literal></expr></argument>, <argument><expr><name>MY_CURRENCY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>str_to_currency</name><argument_list>(<argument><expr><literal type="string">"0.75"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" curr 5: %"</literal> <name>UINT64_FORMAT</name> <literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>currency_to_str</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_object_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"curr5"</literal></expr></argument>, <argument><expr><name>MY_CURRENCY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_ptr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"date1"</literal></expr></argument>, <argument><expr><name>MY_DATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>date</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" date 1: %d %s\n"</literal></expr></argument>, <argument><expr><name>date</name></expr></argument>, <argument><expr><call><name>date_to_str</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"date2"</literal></expr></argument>, <argument><expr><name>MY_DATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>date</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" date 2: %d %s\n"</literal></expr></argument>, <argument><expr><name>date</name></expr></argument>, <argument><expr><call><name>date_to_str</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"curr1"</literal></expr></argument>, <argument><expr><name>MY_CURRENCY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" curr 1: %"</literal> <name>UINT64_FORMAT</name> <literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>currency_to_str</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"curr2"</literal></expr></argument>, <argument><expr><name>MY_CURRENCY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" curr 2: %"</literal> <name>UINT64_FORMAT</name> <literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>currency_to_str</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"curr3"</literal></expr></argument>, <argument><expr><name>MY_CURRENCY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" curr 3: %"</literal> <name>UINT64_FORMAT</name> <literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>currency_to_str</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"curr4"</literal></expr></argument>, <argument><expr><name>MY_CURRENCY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" curr 4: %"</literal> <name>UINT64_FORMAT</name> <literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>currency_to_str</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_get</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"curr5"</literal></expr></argument>, <argument><expr><name>MY_CURRENCY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" curr 5: %"</literal> <name>UINT64_FORMAT</name> <literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>currency_to_str</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"testing UDTs... OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>

<function_decl><type><name>BOOL</name></type> <name>copy_int_value_tests</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>psource</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pdest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>source_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dest_type</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>test_int_conversion</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"testing integer conversion..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// copy negative value to unsigned integer</comment>

  <expr_stmt><expr><name>vint8</name> <operator>=</operator> <operator>-</operator><literal type="number">110</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint8</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint8</name></expr></argument>, <argument><expr><name>BINN_INT8</name></expr></argument>, <argument><expr><name>BINN_UINT8</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint8</name> <operator>==</operator> <operator>-</operator><literal type="number">110</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint8</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint8</name> <operator>=</operator> <operator>-</operator><literal type="number">110</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint16</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint16</name></expr></argument>, <argument><expr><name>BINN_INT8</name></expr></argument>, <argument><expr><name>BINN_UINT16</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint8</name> <operator>==</operator> <operator>-</operator><literal type="number">110</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint16</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint8</name> <operator>=</operator> <operator>-</operator><literal type="number">110</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint32</name></expr></argument>, <argument><expr><name>BINN_INT8</name></expr></argument>, <argument><expr><name>BINN_UINT32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint8</name> <operator>==</operator> <operator>-</operator><literal type="number">110</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint32</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint8</name> <operator>=</operator> <operator>-</operator><literal type="number">110</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint64</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint64</name></expr></argument>, <argument><expr><name>BINN_INT8</name></expr></argument>, <argument><expr><name>BINN_UINT64</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint8</name> <operator>==</operator> <operator>-</operator><literal type="number">110</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint64</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>vint16</name> <operator>=</operator> <operator>-</operator><literal type="number">123</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint8</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint8</name></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>, <argument><expr><name>BINN_UINT8</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint16</name> <operator>==</operator> <operator>-</operator><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint8</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint16</name> <operator>=</operator> <operator>-</operator><literal type="number">123</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint16</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint16</name></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>, <argument><expr><name>BINN_UINT16</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint16</name> <operator>==</operator> <operator>-</operator><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint16</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint16</name> <operator>=</operator> <operator>-</operator><literal type="number">32000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint32</name></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>, <argument><expr><name>BINN_UINT32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint16</name> <operator>==</operator> <operator>-</operator><literal type="number">32000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint32</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint16</name> <operator>=</operator> <operator>-</operator><literal type="number">32000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint64</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint64</name></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>, <argument><expr><name>BINN_UINT64</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint16</name> <operator>==</operator> <operator>-</operator><literal type="number">32000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint64</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <operator>-</operator><literal type="number">123</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint8</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint8</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><name>BINN_UINT8</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <operator>-</operator><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint8</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <operator>-</operator><literal type="number">123</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint16</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint16</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><name>BINN_UINT16</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <operator>-</operator><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint16</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <operator>-</operator><literal type="number">123</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint32</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><name>BINN_UINT32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <operator>-</operator><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint32</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <operator>-</operator><literal type="number">123</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint64</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint64</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><name>BINN_UINT64</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <operator>-</operator><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint64</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <operator>-</operator><literal type="number">123</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint8</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint8</name></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>, <argument><expr><name>BINN_UINT8</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <operator>-</operator><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint8</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <operator>-</operator><literal type="number">123</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint16</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint16</name></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>, <argument><expr><name>BINN_UINT16</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <operator>-</operator><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint16</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <operator>-</operator><literal type="number">123</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint32</name></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>, <argument><expr><name>BINN_UINT32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <operator>-</operator><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint32</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <operator>-</operator><literal type="number">123</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint64</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint64</name></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>, <argument><expr><name>BINN_UINT64</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <operator>-</operator><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint64</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// copy big negative value to small signed integer</comment>

  <expr_stmt><expr><name>vint16</name> <operator>=</operator> <operator>-</operator><literal type="number">32000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint8</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint8</name></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>, <argument><expr><name>BINN_INT8</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint16</name> <operator>==</operator> <operator>-</operator><literal type="number">32000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint8</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <operator>-</operator><literal type="number">250</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint8</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint8</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><name>BINN_INT8</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <operator>-</operator><literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint8</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <operator>-</operator><literal type="number">35000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint16</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint16</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <operator>-</operator><literal type="number">35000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint16</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <operator>-</operator><literal type="number">250</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint8</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint8</name></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>, <argument><expr><name>BINN_INT8</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <operator>-</operator><literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint8</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <operator>-</operator><literal type="number">35000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint16</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint16</name></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <operator>-</operator><literal type="number">35000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint16</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <operator>-</operator><literal type="number">25470000000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <operator>-</operator><literal type="number">25470000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// copy big positive value to small signed integer</comment>

  <expr_stmt><expr><name>vint16</name> <operator>=</operator> <literal type="number">250</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint8</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint8</name></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>, <argument><expr><name>BINN_INT8</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint16</name> <operator>==</operator> <literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint8</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <literal type="number">250</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint8</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint8</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><name>BINN_INT8</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint8</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <literal type="number">35000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint16</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint16</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <literal type="number">35000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint16</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <literal type="number">250</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint8</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint8</name></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>, <argument><expr><name>BINN_INT8</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint8</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <literal type="number">35000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint16</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint16</name></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <literal type="number">35000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint16</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <literal type="number">25470000000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <literal type="number">25470000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// copy big positive value to small unsigned integer</comment>

  <expr_stmt><expr><name>vint16</name> <operator>=</operator> <literal type="number">300</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint8</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint8</name></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>, <argument><expr><name>BINN_UINT8</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint16</name> <operator>==</operator> <literal type="number">300</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint8</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <literal type="number">300</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint8</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint8</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><name>BINN_UINT8</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <literal type="number">300</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint8</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <literal type="number">70000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint16</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint16</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><name>BINN_UINT16</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <literal type="number">70000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint16</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <literal type="number">300</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint8</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint8</name></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>, <argument><expr><name>BINN_UINT8</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <literal type="number">300</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint8</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <literal type="number">70000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint16</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint16</name></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>, <argument><expr><name>BINN_UINT16</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <literal type="number">70000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint16</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <literal type="number">25470000000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint32</name></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>, <argument><expr><name>BINN_UINT32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <literal type="number">25470000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint32</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// valid numbers --------------------</comment>

  <comment type="line">// int8 - copy to signed variable</comment>

  <expr_stmt><expr><name>vint8</name> <operator>=</operator> <literal type="number">123</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint16</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint16</name></expr></argument>, <argument><expr><name>BINN_INT8</name></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint8</name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint16</name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint8</name> <operator>=</operator> <operator>-</operator><literal type="number">110</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint16</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint16</name></expr></argument>, <argument><expr><name>BINN_INT8</name></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint8</name> <operator>==</operator> <operator>-</operator><literal type="number">110</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint16</name> <operator>==</operator> <operator>-</operator><literal type="number">110</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint8</name> <operator>=</operator> <literal type="number">123</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><name>BINN_INT8</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint8</name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint8</name> <operator>=</operator> <operator>-</operator><literal type="number">110</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><name>BINN_INT8</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint8</name> <operator>==</operator> <operator>-</operator><literal type="number">110</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <operator>-</operator><literal type="number">110</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint8</name> <operator>=</operator> <literal type="number">123</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><name>BINN_INT8</name></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint8</name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint8</name> <operator>=</operator> <operator>-</operator><literal type="number">120</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><name>BINN_INT8</name></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint8</name> <operator>==</operator> <operator>-</operator><literal type="number">120</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <operator>-</operator><literal type="number">120</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// int8 - copy to unsigned variable</comment>

  <expr_stmt><expr><name>vint8</name> <operator>=</operator> <literal type="number">123</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint16</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint16</name></expr></argument>, <argument><expr><name>BINN_INT8</name></expr></argument>, <argument><expr><name>BINN_UINT16</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint8</name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint16</name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint8</name> <operator>=</operator> <literal type="number">123</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint32</name></expr></argument>, <argument><expr><name>BINN_INT8</name></expr></argument>, <argument><expr><name>BINN_UINT32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint8</name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint32</name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint8</name> <operator>=</operator> <literal type="number">123</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint64</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint64</name></expr></argument>, <argument><expr><name>BINN_INT8</name></expr></argument>, <argument><expr><name>BINN_UINT64</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint8</name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint64</name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// unsigned int8 - copy to signed variable</comment>

  <expr_stmt><expr><name>vuint8</name> <operator>=</operator> <literal type="number">123</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint16</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vuint8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint16</name></expr></argument>, <argument><expr><name>BINN_UINT8</name></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint8</name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint16</name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vuint8</name> <operator>=</operator> <literal type="number">250</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint16</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vuint8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint16</name></expr></argument>, <argument><expr><name>BINN_UINT8</name></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint8</name> <operator>==</operator> <literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint16</name> <operator>==</operator> <literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vuint8</name> <operator>=</operator> <literal type="number">123</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vuint8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><name>BINN_UINT8</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint8</name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vuint8</name> <operator>=</operator> <literal type="number">250</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vuint8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><name>BINN_UINT8</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint8</name> <operator>==</operator> <literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vuint8</name> <operator>=</operator> <literal type="number">123</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vuint8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><name>BINN_UINT8</name></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint8</name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vuint8</name> <operator>=</operator> <literal type="number">250</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vuint8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><name>BINN_UINT8</name></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint8</name> <operator>==</operator> <literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// unsigned int8 - copy to unsigned variable</comment>

  <expr_stmt><expr><name>vuint8</name> <operator>=</operator> <literal type="number">123</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint16</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vuint8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint16</name></expr></argument>, <argument><expr><name>BINN_UINT8</name></expr></argument>, <argument><expr><name>BINN_UINT16</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint8</name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint16</name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vuint8</name> <operator>=</operator> <literal type="number">250</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint16</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vuint8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint16</name></expr></argument>, <argument><expr><name>BINN_UINT8</name></expr></argument>, <argument><expr><name>BINN_UINT16</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint8</name> <operator>==</operator> <literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint16</name> <operator>==</operator> <literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vuint8</name> <operator>=</operator> <literal type="number">123</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vuint8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint32</name></expr></argument>, <argument><expr><name>BINN_UINT8</name></expr></argument>, <argument><expr><name>BINN_UINT32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint8</name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint32</name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vuint8</name> <operator>=</operator> <literal type="number">250</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vuint8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint32</name></expr></argument>, <argument><expr><name>BINN_UINT8</name></expr></argument>, <argument><expr><name>BINN_UINT32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint8</name> <operator>==</operator> <literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint32</name> <operator>==</operator> <literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vuint8</name> <operator>=</operator> <literal type="number">123</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint64</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vuint8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint64</name></expr></argument>, <argument><expr><name>BINN_UINT8</name></expr></argument>, <argument><expr><name>BINN_UINT64</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint8</name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint64</name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vuint8</name> <operator>=</operator> <literal type="number">250</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint64</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vuint8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint64</name></expr></argument>, <argument><expr><name>BINN_UINT8</name></expr></argument>, <argument><expr><name>BINN_UINT64</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint8</name> <operator>==</operator> <literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint64</name> <operator>==</operator> <literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>vint16</name> <operator>=</operator> <literal type="number">250</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint8</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint8</name></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>, <argument><expr><name>BINN_UINT8</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint16</name> <operator>==</operator> <literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint8</name> <operator>==</operator> <literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <literal type="number">250</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint8</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint8</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><name>BINN_UINT8</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint8</name> <operator>==</operator> <literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <literal type="number">35000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint16</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint16</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><name>BINN_UINT16</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <literal type="number">35000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint16</name> <operator>==</operator> <literal type="number">35000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <literal type="number">250</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint8</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint8</name></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>, <argument><expr><name>BINN_UINT8</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint8</name> <operator>==</operator> <literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <literal type="number">35000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint16</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint16</name></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>, <argument><expr><name>BINN_UINT16</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <literal type="number">35000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint16</name> <operator>==</operator> <literal type="number">35000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <literal type="number">2147000000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vuint32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vuint32</name></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>, <argument><expr><name>BINN_UINT32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <literal type="number">2147000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vuint32</name> <operator>==</operator> <literal type="number">2147000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// valid negative values</comment>


  <expr_stmt><expr><name>vint8</name> <operator>=</operator> <operator>-</operator><literal type="number">110</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint16</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint16</name></expr></argument>, <argument><expr><name>BINN_INT8</name></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint8</name> <operator>==</operator> <operator>-</operator><literal type="number">110</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint16</name> <operator>==</operator> <operator>-</operator><literal type="number">110</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint8</name> <operator>=</operator> <operator>-</operator><literal type="number">110</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><name>BINN_INT8</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint8</name> <operator>==</operator> <operator>-</operator><literal type="number">110</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <operator>-</operator><literal type="number">110</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint8</name> <operator>=</operator> <operator>-</operator><literal type="number">110</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><name>BINN_INT8</name></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint8</name> <operator>==</operator> <operator>-</operator><literal type="number">110</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <operator>-</operator><literal type="number">110</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>vint16</name> <operator>=</operator> <operator>-</operator><literal type="number">123</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint8</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint8</name></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>, <argument><expr><name>BINN_INT8</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint16</name> <operator>==</operator> <operator>-</operator><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint8</name> <operator>==</operator> <operator>-</operator><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint16</name> <operator>=</operator> <operator>-</operator><literal type="number">32000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint16</name> <operator>==</operator> <operator>-</operator><literal type="number">32000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <operator>-</operator><literal type="number">32000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint16</name> <operator>=</operator> <operator>-</operator><literal type="number">32000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint16</name> <operator>==</operator> <operator>-</operator><literal type="number">32000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <operator>-</operator><literal type="number">32000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <operator>-</operator><literal type="number">123</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint8</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint8</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><name>BINN_INT8</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <operator>-</operator><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint8</name> <operator>==</operator> <operator>-</operator><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <operator>-</operator><literal type="number">123</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint16</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint16</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <operator>-</operator><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint16</name> <operator>==</operator> <operator>-</operator><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <operator>-</operator><literal type="number">32000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint16</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint16</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <operator>-</operator><literal type="number">32000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint16</name> <operator>==</operator> <operator>-</operator><literal type="number">32000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <operator>-</operator><literal type="number">123</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <operator>-</operator><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <operator>-</operator><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <operator>-</operator><literal type="number">2147000000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <operator>-</operator><literal type="number">2147000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <operator>-</operator><literal type="number">2147000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <operator>-</operator><literal type="number">123</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint8</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint8</name></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>, <argument><expr><name>BINN_INT8</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <operator>-</operator><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint8</name> <operator>==</operator> <operator>-</operator><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <operator>-</operator><literal type="number">250</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint16</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint16</name></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>, <argument><expr><name>BINN_INT16</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <operator>-</operator><literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint16</name> <operator>==</operator> <operator>-</operator><literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>vint64</name> <operator>=</operator> <operator>-</operator><literal type="number">35000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vint32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>copy_int_value_tests</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>, <argument><expr><name>BINN_INT64</name></expr></argument>, <argument><expr><name>BINN_INT32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <operator>-</operator><literal type="number">35000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <operator>-</operator><literal type="number">35000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>

<function><type><name>void</name></type> <name>test_binn_int_conversion</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>binn</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name>INVALID_BINN</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"testing binn integer read conversion... "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>binn_object</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>obj</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_int8</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"int8"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_int16</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"int16"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_int32</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"int32"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">32</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_int64</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"int64"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">64</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_uint8</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"uint8"</literal></expr></argument>, <argument><expr><literal type="number">111</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_uint16</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"uint16"</literal></expr></argument>, <argument><expr><literal type="number">112</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_uint32</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"uint32"</literal></expr></argument>, <argument><expr><literal type="number">113</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_uint64</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"uint64"</literal></expr></argument>, <argument><expr><literal type="number">114</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_ptr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int8</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"int8"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int8</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"int16"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int8</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"int32"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int8</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"int64"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int16</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"int8"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int16</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"int16"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int16</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"int32"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int16</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"int64"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int32</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"int8"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int32</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"int16"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int32</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"int32"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int32</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"int64"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int64</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"int8"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int64</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"int16"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int64</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"int32"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int64</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"int64"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int8</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"uint8"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">111</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int8</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"uint16"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">112</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int8</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"uint32"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">113</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int8</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"uint64"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">114</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int16</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"uint8"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">111</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int16</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"uint16"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">112</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int16</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"uint32"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">113</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int16</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"uint64"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">114</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int32</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"uint8"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">111</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int32</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"uint16"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">112</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int32</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"uint32"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">113</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int32</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"uint64"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">114</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int64</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"uint8"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">111</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int64</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"uint16"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">112</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int64</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"uint32"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">113</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_int64</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"uint64"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">114</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>

<function><type><name>void</name></type> <name>test_value_conversion</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>binn</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"/><name><name>blob</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><literal type="string">"test blob"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pblob</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>vint32</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64</name></type> <name>vint64</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>vdouble</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BOOL</name></type> <name>vbool</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"testing binn value conversion... "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* test string values */</comment>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="string">"static string"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>binn_string</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>BINN_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="string">"transient string"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>binn_string</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>BINN_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>!=</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"dynamic allocated string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>binn_string</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>==</operator> <operator>&amp;</operator><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* test blob values */</comment>

  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pblob</name> <operator>=</operator> <name>blob</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>binn_blob</name><argument_list>(<argument><expr><name>pblob</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>BINN_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_BLOB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>pblob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pblob</name> <operator>=</operator> <name>blob</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>binn_blob</name><argument_list>(<argument><expr><name>pblob</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>BINN_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_BLOB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>!=</operator> <name>pblob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>pblob</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pblob</name> <operator>=</operator> <call><name>memdup</name><argument_list>(<argument><expr><name>blob</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>binn_blob</name><argument_list>(<argument><expr><name>pblob</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_BLOB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>pblob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>==</operator> <operator>&amp;</operator><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="block">/* test conversions */</comment>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="string">"123"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>binn_string</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>BINN_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_str</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_int32</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_int64</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_double</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vdouble</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>AlmostEqualFloats</name><argument_list>(<argument><expr><name>vdouble</name></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_bool</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vbool</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vbool</name> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// check that the type is the same</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//</comment>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="string">"-456"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>binn_string</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>BINN_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_str</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_int32</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <operator>-</operator><literal type="number">456</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_int64</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <operator>-</operator><literal type="number">456</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_double</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vdouble</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>AlmostEqualFloats</name><argument_list>(<argument><expr><name>vdouble</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">456</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_bool</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vbool</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vbool</name> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// check that the type is the same</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//</comment>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="string">"-4.56"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>binn_string</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>BINN_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_str</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_int32</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_int64</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_double</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vdouble</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>AlmostEqualFloats</name><argument_list>(<argument><expr><name>vdouble</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">4.56</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_bool</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vbool</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vbool</name> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// check that the type is the same</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//</comment>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// to boolean</comment>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="string">"yes"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>binn_string</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>BINN_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_str</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_bool</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vbool</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vbool</name> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="string">"no"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>binn_string</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>BINN_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_bool</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vbool</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vbool</name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="string">"on"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>binn_string</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>BINN_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_bool</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vbool</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vbool</name> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="string">"off"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>binn_string</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>BINN_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_bool</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vbool</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vbool</name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="string">"true"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>binn_string</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>BINN_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_bool</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vbool</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vbool</name> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="string">"false"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>binn_string</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>BINN_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_bool</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vbool</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vbool</name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="string">"1"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>binn_string</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>BINN_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_bool</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vbool</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vbool</name> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="string">"0"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>binn_string</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>BINN_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_bool</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vbool</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vbool</name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// from int32</comment>

  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>binn_int32</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">345</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_INT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>vint32</name></name> <operator>==</operator> <operator>-</operator><literal type="number">345</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_int32</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <operator>-</operator><literal type="number">345</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_int64</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <operator>-</operator><literal type="number">345</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_double</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vdouble</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>AlmostEqualFloats</name><argument_list>(<argument><expr><name>vdouble</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">345</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_bool</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vbool</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vbool</name> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// check that the type is the same</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_INT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>vint32</name></name> <operator>==</operator> <operator>-</operator><literal type="number">345</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// convert the value to string</comment>
  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_get_str</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"-345"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//</comment>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>binn_int32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_INT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>vint32</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_int32</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_int64</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_double</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vdouble</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>AlmostEqualFloats</name><argument_list>(<argument><expr><name>vdouble</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_bool</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vbool</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vbool</name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// check that the type is the same</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_INT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>vint32</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// convert the value to string</comment>
  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_get_str</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//</comment>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// from int64</comment>

  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>binn_int64</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">345678</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_INT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>vint64</name></name> <operator>==</operator> <operator>-</operator><literal type="number">345678</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_int32</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <operator>-</operator><literal type="number">345678</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_int64</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <operator>-</operator><literal type="number">345678</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_double</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vdouble</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>AlmostEqualFloats</name><argument_list>(<argument><expr><name>vdouble</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">345678</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_bool</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vbool</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vbool</name> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// check that the type is the same</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_INT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>vint64</name></name> <operator>==</operator> <operator>-</operator><literal type="number">345678</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// convert the value to string</comment>
  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_get_str</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"-345678"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//</comment>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// from double</comment>

  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>binn_double</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">345.678</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_DOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>vdouble</name></name> <operator>==</operator> <operator>-</operator><literal type="number">345.678</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_int32</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <operator>-</operator><literal type="number">345</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_int64</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <operator>-</operator><literal type="number">345</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_double</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vdouble</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>AlmostEqualFloats</name><argument_list>(<argument><expr><name>vdouble</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">345.678</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_bool</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vbool</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vbool</name> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// check that the type is the same</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_DOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>vdouble</name></name> <operator>==</operator> <operator>-</operator><literal type="number">345.678</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// convert the value to string</comment>
  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_get_str</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"-345.678"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//</comment>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>binn_double</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_DOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>vdouble</name></name> <operator>==</operator> <literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_int32</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_int64</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_double</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vdouble</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>AlmostEqualFloats</name><argument_list>(<argument><expr><name>vdouble</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_bool</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vbool</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vbool</name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// check that the type is the same</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_DOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>vdouble</name></name> <operator>==</operator> <literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// convert the value to string</comment>
  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_get_str</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//</comment>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// from bool</comment>

  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>binn_bool</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>vbool</name></name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_int32</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_int64</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_double</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vdouble</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>AlmostEqualFloats</name><argument_list>(<argument><expr><name>vdouble</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_bool</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vbool</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vbool</name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// check that the type is the same</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>vbool</name></name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// convert the value to string</comment>
  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_get_str</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//</comment>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>binn_bool</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>vbool</name></name> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_int32</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint32</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_int64</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vint64</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vint64</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_double</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vdouble</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>AlmostEqualFloats</name><argument_list>(<argument><expr><name>vdouble</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_bool</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vbool</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>vbool</name> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// check that the type is the same</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>vbool</name></name> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// convert the value to string</comment>
  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_get_str</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>freefn</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//</comment>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>

<function><type><name>void</name></type> <name>test_value_copy</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"testing binn value copy... "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">//TODO</comment>

  <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"TODO!!!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>

<function><type><name>void</name></type> <name>test_virtual_types</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>binn</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>INVALID_BINN</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>storage_type</name></decl>, <decl><type ref="prev"/><name>extra_type</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BOOL</name></type> <name>value</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"testing binn virtual types... "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_get_type_info</name><argument_list>(<argument><expr><name>BINN_BOOL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>storage_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extra_type</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>storage_type</name> <operator>==</operator> <name>BINN_STORAGE_DWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>extra_type</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>binn_list</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>list</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add_bool</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add_bool</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add_null</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_ptr</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_get_bool</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_get_bool</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_null</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// invalid values</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_null</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_null</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_get_bool</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>

<function><type><name>void</name></type> <name>test_binn_iter</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>binn</name> <modifier>*</modifier></type><name>list</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>map</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>binn</name> <modifier>*</modifier></type><name>list2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>copy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>binn_iter</name></type> <name>iter</name></decl>, <decl><type ref="prev"/><name>iter2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>binn</name></type> <name>value</name></decl>, <decl><type ref="prev"/><name>value2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>blob_size</name></decl>, <decl><type ref="prev"/><name>id</name></decl>, <decl><type ref="prev"/><name>id2</name></decl>, <decl><type ref="prev"/><name>list2size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>blob_ptr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>key2</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><name>blob_ptr</name> <operator>=</operator> <literal type="string">"key\0value\0\0"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>blob_size</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"testing binn sequential read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// create the</comment>

  <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>binn_list</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>list2</name> <operator>=</operator> <call><name>binn_list</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>binn_map</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>binn_object</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>list</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>list2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>map</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>obj</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add_int32</name><argument_list>(<argument><expr><name>list2</name></expr></argument>, <argument><expr><literal type="number">250</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add_null</name><argument_list>(<argument><expr><name>list2</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add_str</name><argument_list>(<argument><expr><name>list2</name></expr></argument>, <argument><expr><literal type="string">"l1st2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add_bool</name><argument_list>(<argument><expr><name>list2</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>list2size</name> <operator>=</operator> <call><name>binn_size</name><argument_list>(<argument><expr><name>list2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add_int8</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">111</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add_int32</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">123456789</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add_int16</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">123</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add_int64</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">9876543210</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add_float</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">1.25</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add_double</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">25.987654321</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add_bool</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add_bool</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add_null</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add_str</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">"testing..."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add_blob</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>blob_ptr</name></expr></argument>, <argument><expr><name>blob_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add_list</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>list2</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_int8</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="number">111</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_int32</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="number">123456789</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_int16</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">123</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_int64</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><literal type="number">9876543210</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_float</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"e"</literal></expr></argument>, <argument><expr><literal type="number">1.25</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_double</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"f"</literal></expr></argument>, <argument><expr><literal type="number">25.987654321</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_bool</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"g"</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_bool</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"h"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_null</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"i"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_str</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"j"</literal></expr></argument>, <argument><expr><literal type="string">"testing..."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_blob</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"k"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>blob_ptr</name></expr></argument>, <argument><expr><name>blob_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_list</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"l"</literal></expr></argument>, <argument><expr><name>list2</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set_int8</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">55010</literal></expr></argument>, <argument><expr><literal type="number">111</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set_int32</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">55020</literal></expr></argument>, <argument><expr><literal type="number">123456789</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set_int16</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">55030</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">123</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set_int64</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">55040</literal></expr></argument>, <argument><expr><literal type="number">9876543210</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set_float</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">55050</literal></expr></argument>, <argument><expr><literal type="number">1.25</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set_double</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">55060</literal></expr></argument>, <argument><expr><literal type="number">25.987654321</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set_bool</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">55070</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set_bool</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">55080</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set_null</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">55090</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set_str</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">55100</literal></expr></argument>, <argument><expr><literal type="string">"testing..."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set_blob</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">55110</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>blob_ptr</name></expr></argument>, <argument><expr><name>blob_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set_list</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="number">55120</literal></expr></argument>, <argument><expr><name>list2</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// read list sequentially - using value</comment>

  <comment type="block">/*
     CU_ASSERT(binn_iter_init(&amp;iter, binn_ptr(list), BINN_LIST));

     while (binn_list_next(&amp;iter, &amp;value)) {
     ...
     }
   */</comment>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_ptr</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>BINN_LIST</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>pnext</name></name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>plimit</name></name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>pnext</name></name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>plimit</name></name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_INT8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vint8</name></name> <operator>==</operator> <literal type="number">111</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_UINT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vint32</name></name> <operator>==</operator> <literal type="number">123456789</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_INT8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vint8</name></name> <operator>==</operator> <operator>-</operator><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_INT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vint64</name></name> <operator>==</operator> <literal type="number">9876543210</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_FLOAT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>AlmostEqualFloats</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vfloat</name></name></expr></argument>, <argument><expr><literal type="number">1.25</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_FLOAT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vdouble</name></name> <operator>-</operator> <literal type="number">25.987654321</literal> <operator>&lt;</operator> <literal type="number">0.00000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vbool</name></name> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vbool</name></name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="string">"testing..."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_BLOB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>blob_ptr</name></expr></argument>, <argument><expr><name>blob_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>size</name></name> <operator>==</operator> <name>list2size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_int32</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_null</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_list_str</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>, <argument><expr><literal type="string">"l1st2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_bool</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//CU_ASSERT(iter.current == 13);</comment>
  <comment type="line">//CU_ASSERT(iter.count == 12);</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//CU_ASSERT(iter.current == 13);  // must keep the same position</comment>
  <comment type="line">//CU_ASSERT(iter.count == 12);</comment>


  <comment type="line">// read object sequentially - using value</comment>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_ptr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>BINN_OBJECT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>pnext</name></name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>plimit</name></name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>pnext</name></name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>plimit</name></name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_INT8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vint8</name></name> <operator>==</operator> <literal type="number">111</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//printf("%s ", key);</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_UINT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vint32</name></name> <operator>==</operator> <literal type="number">123456789</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//printf("%s ", key);</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_INT8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vint8</name></name> <operator>==</operator> <operator>-</operator><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">//printf("%s ", key);</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_INT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vint64</name></name> <operator>==</operator> <literal type="number">9876543210</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//printf("%s ", key);</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_FLOAT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>AlmostEqualFloats</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vfloat</name></name></expr></argument>, <argument><expr><literal type="number">1.25</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//printf("%s ", key);</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"e"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_FLOAT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vdouble</name></name> <operator>-</operator> <literal type="number">25.987654321</literal> <operator>&lt;</operator> <literal type="number">0.00000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//printf("%s ", key);</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"f"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vbool</name></name> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//printf("%s ", key);</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"g"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vbool</name></name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//printf("%s ", key);</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"h"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//printf("%s ", key);</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"i"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="string">"testing..."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//printf("%s ", key);</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"j"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_BLOB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>blob_ptr</name></expr></argument>, <argument><expr><name>blob_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//printf("%s ", key);</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"k"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>size</name></name> <operator>==</operator> <name>list2size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_int32</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_null</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_list_str</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>, <argument><expr><literal type="string">"l1st2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_bool</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//printf("%s ", key);</comment>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"l"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//CU_ASSERT(iter.current == 13);</comment>
  <comment type="line">//CU_ASSERT(iter.count == 12);</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//CU_ASSERT(iter.current == 13);  // must keep the same position</comment>
  <comment type="line">//CU_ASSERT(iter.count == 12);</comment>


  <comment type="line">// read map sequentially - using value</comment>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_ptr</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>BINN_MAP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>pnext</name></name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>plimit</name></name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>pnext</name></name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>plimit</name></name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_INT8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vint8</name></name> <operator>==</operator> <literal type="number">111</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>id</name> <operator>==</operator> <literal type="number">55010</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_UINT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vint32</name></name> <operator>==</operator> <literal type="number">123456789</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>id</name> <operator>==</operator> <literal type="number">55020</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_INT8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vint8</name></name> <operator>==</operator> <operator>-</operator><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>id</name> <operator>==</operator> <literal type="number">55030</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_INT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vint64</name></name> <operator>==</operator> <literal type="number">9876543210</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>id</name> <operator>==</operator> <literal type="number">55040</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_FLOAT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>AlmostEqualFloats</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vfloat</name></name></expr></argument>, <argument><expr><literal type="number">1.25</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>id</name> <operator>==</operator> <literal type="number">55050</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_FLOAT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vdouble</name></name> <operator>-</operator> <literal type="number">25.987654321</literal> <operator>&lt;</operator> <literal type="number">0.00000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>id</name> <operator>==</operator> <literal type="number">55060</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vbool</name></name> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>id</name> <operator>==</operator> <literal type="number">55070</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>vbool</name></name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>id</name> <operator>==</operator> <literal type="number">55080</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>id</name> <operator>==</operator> <literal type="number">55090</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="string">"testing..."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>id</name> <operator>==</operator> <literal type="number">55100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_BLOB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>blob_ptr</name></expr></argument>, <argument><expr><name>blob_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>id</name> <operator>==</operator> <literal type="number">55110</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>size</name></name> <operator>==</operator> <name>list2size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_int32</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_null</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_list_str</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>, <argument><expr><literal type="string">"l1st2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_bool</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>id</name> <operator>==</operator> <literal type="number">55120</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//CU_ASSERT(iter.current == 13);</comment>
  <comment type="line">//CU_ASSERT(iter.count == 12);</comment>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//CU_ASSERT(iter.current == 13);  // must keep the same position</comment>
  <comment type="line">//CU_ASSERT(iter.count == 12);</comment>


  <comment type="line">// test binn copy</comment>

  <expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>binn_copy</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>copy</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_type</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>binn_type</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_count</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>binn_count</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_size</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>binn_size</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>BINN_LIST</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter2</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>, <argument><expr><name>BINN_LIST</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><call><name>binn_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value2</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>value2</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//CU_ASSERT(value.vint32 == value.vint32);</comment>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add_str</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><literal type="string">"testing..."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_type</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>binn_type</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_count</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>binn_count</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_size</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>binn_size</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>binn_copy</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>copy</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_type</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>binn_type</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_count</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>binn_count</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_size</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>binn_size</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>BINN_MAP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter2</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>, <argument><expr><name>BINN_MAP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><call><name>binn_map_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value2</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>id</name> <operator>==</operator> <name>id2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>value2</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//CU_ASSERT(value.vint32 == value.vint32);</comment>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set_int32</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><literal type="number">5600</literal></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_type</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>binn_type</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_count</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>binn_count</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_size</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>binn_size</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>binn_copy</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>copy</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_type</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>binn_type</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_count</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>binn_count</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_size</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>binn_size</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>BINN_OBJECT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter2</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>, <argument><expr><name>BINN_OBJECT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><call><name>binn_object_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter2</name></expr></argument>, <argument><expr><name>key2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value2</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>key2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>value2</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//CU_ASSERT(value.vint32 == value.vint32);</comment>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_int32</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><literal type="string">"another"</literal></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_type</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>binn_type</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_count</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>binn_count</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_size</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>binn_size</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// test binn copy reading from buffer</comment>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_ptr</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>binn_copy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>copy</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_type</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>binn_type</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_count</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>binn_count</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_size</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>binn_size</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>BINN_LIST</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter2</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>, <argument><expr><name>BINN_LIST</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><call><name>binn_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value2</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>value2</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//CU_ASSERT(value.vint32 == value.vint32);</comment>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_list_add_str</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><literal type="string">"testing..."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_type</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>binn_type</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_count</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>binn_count</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_size</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>binn_size</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_ptr</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>binn_copy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>copy</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_type</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>binn_type</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_count</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>binn_count</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_size</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>binn_size</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>BINN_MAP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter2</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>, <argument><expr><name>BINN_MAP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><call><name>binn_map_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value2</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>id</name> <operator>==</operator> <name>id2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>value2</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//CU_ASSERT(value.vint32 == value.vint32);</comment>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_map_set_int32</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><literal type="number">5600</literal></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_type</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>binn_type</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_count</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>binn_count</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_size</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>binn_size</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>binn_ptr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>binn_copy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>copy</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_type</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>binn_type</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_count</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>binn_count</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_size</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>binn_size</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>BINN_OBJECT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter2</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>, <argument><expr><name>BINN_OBJECT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><call><name>binn_object_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter2</name></expr></argument>, <argument><expr><name>key2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value2</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>key2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>value2</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//CU_ASSERT(value.vint32 == value.vint32);</comment>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_object_set_int32</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><literal type="string">"another"</literal></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_type</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>binn_type</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_count</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>binn_count</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><call><name>binn_size</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>binn_size</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>list2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>

<function><type><name>void</name></type> <name>test_binn2</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>obj1ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>obj2ptr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>obj1size</name></decl>, <decl><type ref="prev"/><name>obj2size</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>test_virtual_types</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>test_int_conversion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>test_binn_int_conversion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>test_value_conversion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>test_value_copy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>init_udts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>obj1ptr</name> <operator>=</operator> <call><name>test_create_object_1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj1size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>obj2ptr</name> <operator>=</operator> <call><name>test_create_object_2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj2size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>obj1ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>obj2ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"obj1size=%d obj2size=%d\n"</literal></expr></argument>, <argument><expr><name>obj1size</name></expr></argument>, <argument><expr><name>obj2size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT</name><argument_list>(<argument><expr><name>obj1size</name> <operator>==</operator> <name>obj2size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>test_binn_read</name><argument_list>(<argument><expr><name>obj1ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>obj1ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>obj2ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>test_binn_iter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************************/</comment>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>CU_pSuite</name></type> <name>pSuite</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>CUE_SUCCESS</name> <operator>!=</operator> <call><name>CU_initialize_registry</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>pSuite</name> <operator>=</operator> <call><name>CU_add_suite</name><argument_list>(<argument><expr><literal type="string">"jbl_test_binn2"</literal></expr></argument>, <argument><expr><name>init_suite</name></expr></argument>, <argument><expr><name>clean_suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pSuite</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CU_cleanup_registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(
    <expr><operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>CU_add_test</name><argument_list>(<argument><expr><name>pSuite</name></expr></argument>, <argument><expr><literal type="string">"test_binn2"</literal></expr></argument>, <argument><expr><name>test_binn2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CU_cleanup_registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>CU_basic_set_mode</name><argument_list>(<argument><expr><name>CU_BRM_VERBOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_basic_run_tests</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>CU_get_number_of_failures</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CU_cleanup_registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
