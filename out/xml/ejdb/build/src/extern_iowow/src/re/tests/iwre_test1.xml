<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iowow/src/re/tests/iwre_test1.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iowow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CUnit/Basic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwre.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_suite</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>iw_init</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>clean_suite</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>iwre_test1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwre</name></name> <modifier>*</modifier></type><name>re</name> <init>= <expr><call><name>iwre_create</name><argument_list>(<argument><expr><literal type="string">"^(one1)(two)?"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>mpairs</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><call><name>iwre_match</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><literal type="string">"one1two"</literal></expr></argument>, <argument><expr><name>mpairs</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>rv</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>intptr_t</name></type> <name>l</name> <init>= <expr><name><name>mpairs</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>mpairs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <switch>switch<condition>(<expr><name>j</name></expr>)</condition>  <block>{<block_content>
      <case>case <expr><literal type="number">0</literal></expr>:</case>
        <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>mpairs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"one1two"</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="number">1</literal></expr>:</case>
        <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>mpairs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"one1"</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="number">2</literal></expr>:</case>
        <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>mpairs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"two"</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>iwre_destroy</name><argument_list>(<argument><expr><name>re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>CU_pSuite</name></type> <name>pSuite</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Initialize the CUnit test registry */</comment>
  <if_stmt><if>if <condition>(<expr><name>CUE_SUCCESS</name> <operator>!=</operator> <call><name>CU_initialize_registry</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Add a suite to the registry */</comment>
  <expr_stmt><expr><name>pSuite</name> <operator>=</operator> <call><name>CU_add_suite</name><argument_list>(<argument><expr><literal type="string">"iwre_test1"</literal></expr></argument>, <argument><expr><name>init_suite</name></expr></argument>, <argument><expr><name>clean_suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pSuite</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CU_cleanup_registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Add the tests to the suite */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>CU_add_test</name><argument_list>(<argument><expr><name>pSuite</name></expr></argument>, <argument><expr><literal type="string">"iwre_test1"</literal></expr></argument>, <argument><expr><name>iwre_test1</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CU_cleanup_registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Run all tests using the CUnit Basic interface */</comment>
  <expr_stmt><expr><call><name>CU_basic_set_mode</name><argument_list>(<argument><expr><name>CU_BRM_VERBOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_basic_run_tests</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>CU_get_number_of_failures</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CU_cleanup_registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
