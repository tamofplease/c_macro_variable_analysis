<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iowow/src/re/iwre.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwre.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cregex.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<struct>struct <name>iwre</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>       <modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cregex_program_t</name> <modifier>*</modifier></type><name>program</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>iwre_pattern_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwre</name></name> <modifier>*</modifier></type><name>re</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>re</name><operator>-&gt;</operator><name>pattern</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>iwre_match</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwre</name></name> <modifier>*</modifier></type><name>re</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>mpairs</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mpairs_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>mpairs_len</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mpairs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mpairs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>mpairs_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>cregex_program_run</name><argument_list>(<argument><expr><name><name>re</name><operator>-&gt;</operator><name>program</name></name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>mpairs</name></expr></argument>, <argument><expr><name>mpairs_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mpairs_len</name> <operator>&amp;&amp;</operator> <name><name>mpairs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><operator>++</operator><name>ret</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>ret</name> <operator>/</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwre_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwre</name></name> <modifier>*</modifier></type><name>re</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>re</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>cregex_compile_free</name><argument_list>(<argument><expr><name><name>re</name><operator>-&gt;</operator><name>program</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>iwre</name></name><modifier>*</modifier></type> <name>iwre_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwre</name></name> <modifier>*</modifier></type><name>re</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>re</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>re</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>cregex_node_t</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>cregex_parse</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>error</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>re</name><operator>-&gt;</operator><name>pattern</name></name> <operator>=</operator> <name>pattern</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>re</name><operator>-&gt;</operator><name>program</name></name> <operator>=</operator> <call><name>cregex_compile_node</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>re</name><operator>-&gt;</operator><name>program</name></name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>error</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>cregex_parse_free</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>re</name></expr>;</return>

<label><name>error</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>cregex_parse_free</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>iwre_destroy</name><argument_list>(<argument><expr><name>re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
