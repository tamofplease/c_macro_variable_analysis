<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iowow/src/platform/win32/mman/mman.c"><comment type="line">// Based on https://github.com/witwall/mman-win32</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mman.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log/iwlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FILE_MAP_EXECUTE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_MAP_EXECUTE</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FILE_MAP_EXECUTE */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__map_mman_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DWORD</name></type> <name>err</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>deferr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><name>IW_ERROR_FAIL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_werror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>deferr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DWORD</name></type> <name>__map_mmap_prot_page</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>DWORD</name></type> <name>protect</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>prot</name> <operator>==</operator> <name>PROT_NONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>protect</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>prot</name> <operator>&amp;</operator> <name>PROT_EXEC</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>protect</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>prot</name> <operator>&amp;</operator> <name>PROT_WRITE</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name>PAGE_EXECUTE_READWRITE</name></expr> </then><else>: <expr><name>PAGE_EXECUTE_READ</name></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>protect</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>prot</name> <operator>&amp;</operator> <name>PROT_WRITE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MAP_PRIVATE</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name>PAGE_READWRITE</name></expr> </then><else>: <expr><name>PAGE_READONLY</name></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>protect</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DWORD</name></type> <name>__map_mmap_prot_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>DWORD</name></type> <name>desiredAccess</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>prot</name> <operator>==</operator> <name>PROT_NONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>desiredAccess</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>prot</name> <operator>&amp;</operator> <name>PROT_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MAP_PRIVATE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>desiredAccess</name> <operator>|=</operator> <name>FILE_MAP_COPY</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>desiredAccess</name> <operator>|=</operator> <name>FILE_MAP_WRITE</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>prot</name> <operator>&amp;</operator> <name>PROT_READ</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>desiredAccess</name> <operator>|=</operator> <name>FILE_MAP_READ</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>prot</name> <operator>&amp;</operator> <name>PROT_EXEC</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>desiredAccess</name> <operator>|=</operator> <name>FILE_MAP_EXECUTE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>desiredAccess</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>mmap</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type> <name>fh</name></decl></parameter>, <parameter><decl><type><name>OffsetType</name></type> <name>off</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>HANDLE</name></type> <name>fm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><name>MAP_FAILED</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name> <name>4293</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <decl_stmt><decl><type><specifier>const</specifier> <name>DWORD</name></type> <name>dwFileOffsetLow</name> <init>= <expr><ternary><condition><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>OffsetType</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DWORD</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>
                                ?</condition><then> <expr><operator>(</operator><name>DWORD</name><operator>)</operator> <name>off</name></expr> </then><else>: <expr><operator>(</operator><name>DWORD</name><operator>)</operator> <operator>(</operator><name>off</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFL</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>DWORD</name></type> <name>dwFileOffsetHigh</name> <init>= <expr><ternary><condition><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>OffsetType</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DWORD</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>
                                 ?</condition><then> <expr><operator>(</operator><name>DWORD</name><operator>)</operator> <literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>DWORD</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>off</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFL</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>DWORD</name></type> <name>protect</name> <init>= <expr><call><name>__map_mmap_prot_page</name><argument_list>(<argument><expr><name>prot</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>DWORD</name></type> <name>desiredAccess</name> <init>= <expr><call><name>__map_mmap_prot_file</name><argument_list>(<argument><expr><name>prot</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>OffsetType</name></type> <name>maxSize</name> <init>= <expr><name>off</name> <operator>+</operator> <operator>(</operator><name>OffsetType</name><operator>)</operator> <name>len</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>DWORD</name></type> <name>dwMaxSizeLow</name> <init>= <expr><ternary><condition><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>OffsetType</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DWORD</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>
                             ?</condition><then> <expr><operator>(</operator><name>DWORD</name><operator>)</operator> <name>maxSize</name></expr> </then><else>: <expr><operator>(</operator><name>DWORD</name><operator>)</operator> <operator>(</operator><name>maxSize</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFL</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>DWORD</name></type> <name>dwMaxSizeHigh</name> <init>= <expr><ternary><condition><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>OffsetType</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DWORD</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>
                              ?</condition><then> <expr><operator>(</operator><name>DWORD</name><operator>)</operator> <literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>DWORD</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>maxSize</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFL</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MAP_FIXED</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>prot</name> <operator>==</operator> <name>PROT_EXEC</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
    <return>return <expr><name>MAP_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MAP_ANONYMOUS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>fh</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt>
    <return>return <expr><name>MAP_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>fm</name> <operator>=</operator> <call><name>CreateFileMapping</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>protect</name></expr></argument>, <argument><expr><name>dwMaxSizeHigh</name></expr></argument>, <argument><expr><name>dwMaxSizeLow</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>fm</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>__map_mman_error</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>EPERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>MAP_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>MapViewOfFile</name><argument_list>(<argument><expr><name>fm</name></expr></argument>, <argument><expr><name>desiredAccess</name></expr></argument>, <argument><expr><name>dwFileOffsetHigh</name></expr></argument>, <argument><expr><name>dwFileOffsetLow</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>fm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>map</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>__map_mman_error</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>EPERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>MAP_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>map</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>munmap</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>UnmapViewOfFile</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>__map_mman_error</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>EPERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>msync</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>FlushViewOfFile</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>__map_mman_error</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>EPERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mlock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>VirtualLock</name><argument_list>(<argument><expr><operator>(</operator><name>LPVOID</name><operator>)</operator> <name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>__map_mman_error</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>EPERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>munlock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>VirtualUnlock</name><argument_list>(<argument><expr><operator>(</operator><name>LPVOID</name><operator>)</operator> <name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>__map_mman_error</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>EPERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
