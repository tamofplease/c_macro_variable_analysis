<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iowow/src/utils/iwutils.c"><comment type="line">//</comment>
<comment type="block" format="doxygen">/**************************************************************************************************
 * IOWOW library
 *
 * MIT License
 *
 * Copyright (c) 2012-2022 Softmotions Ltd &lt;info@softmotions.com&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *************************************************************************************************/</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwcfg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwxstr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mt19937ar.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>O_CLOEXEC</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_CLOEXEC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IWU_RAND_MAX</name></cpp:macro> <cpp:value>0xffffffff</cpp:value></cpp:define>

<function><type><name>iwrc</name></type> <name>iwu_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>init_mt19937ar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwu_rand_seed</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>seed</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>init_genrand</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>iwu_rand_u32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>genrand_int32</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>double_t</name></type> <name>iwu_rand_dnorm</name><parameter_list>(<parameter><decl><type><name>double_t</name></type> <name>avg</name></decl></parameter>, <parameter><decl><type><name>double_t</name></type> <name>sd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sd</name> <operator>&gt;=</operator> <literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sqrt</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2.0</literal> <operator>*</operator> <call><name>log</name><argument_list>(<argument><expr><operator>(</operator><call><name>genrand_int31</name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><name>double_t</name><operator>)</operator> <name>INT_MAX</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
         <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">3.141592653589793</literal> <operator>*</operator> <operator>(</operator><call><name>genrand_int31</name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><name>double_t</name><operator>)</operator> <name>INT_MAX</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>*</operator> <name>sd</name> <operator>+</operator> <name>avg</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>iwu_rand_range</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>range</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>genrand_int32</name><argument_list>()</argument_list></call> <operator>%</operator> <name>range</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>iwu_rand_inorm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>range</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>iwu_rand_dnorm</name><argument_list>(<argument><expr><name>range</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>double_t</name><operator>)</operator> <name>range</name> <operator>/</operator> <literal type="number">10.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>num</name> <operator>&gt;=</operator> <name>range</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>num</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>iwlog2_32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>tab32</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">10</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">29</literal></expr>,
    <expr><literal type="number">11</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">30</literal></expr>,
    <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">12</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">7</literal></expr>,
    <expr><literal type="number">19</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">26</literal></expr>, <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">31</literal></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>val</name> <operator>|=</operator> <name>val</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>val</name> <operator>|=</operator> <name>val</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>val</name> <operator>|=</operator> <name>val</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>val</name> <operator>|=</operator> <name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>val</name> <operator>|=</operator> <name>val</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
  <return>return <expr><name><name>tab32</name><index>[<expr><operator>(</operator><name>val</name> <operator>*</operator> <literal type="number">0x07C4ACDD</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">27</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>iwlog2_64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>table</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">58</literal></expr>, <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">59</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">60</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">61</literal></expr>,
    <expr><literal type="number">51</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">62</literal></expr>,
    <expr><literal type="number">57</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">56</literal></expr>,
    <expr><literal type="number">45</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">12</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">23</literal></expr>, <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">63</literal></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>val</name> <operator>|=</operator> <name>val</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>val</name> <operator>|=</operator> <name>val</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>val</name> <operator>|=</operator> <name>val</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>val</name> <operator>|=</operator> <name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>val</name> <operator>|=</operator> <name>val</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>val</name> <operator>|=</operator> <name>val</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
  <return>return <expr><name><name>table</name><index>[<expr><operator>(</operator><name>val</name> <operator>*</operator> <literal type="number">0x03f6eaf2cd271461</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">58</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>iwu_crc32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>init</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name><name>crc32_table</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x04c11db7</literal></expr>, <expr><literal type="number">0x09823b6e</literal></expr>, <expr><literal type="number">0x0d4326d9</literal></expr>,
    <expr><literal type="number">0x130476dc</literal></expr>, <expr><literal type="number">0x17c56b6b</literal></expr>, <expr><literal type="number">0x1a864db2</literal></expr>, <expr><literal type="number">0x1e475005</literal></expr>,
    <expr><literal type="number">0x2608edb8</literal></expr>, <expr><literal type="number">0x22c9f00f</literal></expr>, <expr><literal type="number">0x2f8ad6d6</literal></expr>, <expr><literal type="number">0x2b4bcb61</literal></expr>,
    <expr><literal type="number">0x350c9b64</literal></expr>, <expr><literal type="number">0x31cd86d3</literal></expr>, <expr><literal type="number">0x3c8ea00a</literal></expr>, <expr><literal type="number">0x384fbdbd</literal></expr>,
    <expr><literal type="number">0x4c11db70</literal></expr>, <expr><literal type="number">0x48d0c6c7</literal></expr>, <expr><literal type="number">0x4593e01e</literal></expr>, <expr><literal type="number">0x4152fda9</literal></expr>,
    <expr><literal type="number">0x5f15adac</literal></expr>, <expr><literal type="number">0x5bd4b01b</literal></expr>, <expr><literal type="number">0x569796c2</literal></expr>, <expr><literal type="number">0x52568b75</literal></expr>,
    <expr><literal type="number">0x6a1936c8</literal></expr>, <expr><literal type="number">0x6ed82b7f</literal></expr>, <expr><literal type="number">0x639b0da6</literal></expr>, <expr><literal type="number">0x675a1011</literal></expr>,
    <expr><literal type="number">0x791d4014</literal></expr>, <expr><literal type="number">0x7ddc5da3</literal></expr>, <expr><literal type="number">0x709f7b7a</literal></expr>, <expr><literal type="number">0x745e66cd</literal></expr>,
    <expr><literal type="number">0x9823b6e0</literal></expr>, <expr><literal type="number">0x9ce2ab57</literal></expr>, <expr><literal type="number">0x91a18d8e</literal></expr>, <expr><literal type="number">0x95609039</literal></expr>,
    <expr><literal type="number">0x8b27c03c</literal></expr>, <expr><literal type="number">0x8fe6dd8b</literal></expr>, <expr><literal type="number">0x82a5fb52</literal></expr>, <expr><literal type="number">0x8664e6e5</literal></expr>,
    <expr><literal type="number">0xbe2b5b58</literal></expr>, <expr><literal type="number">0xbaea46ef</literal></expr>, <expr><literal type="number">0xb7a96036</literal></expr>, <expr><literal type="number">0xb3687d81</literal></expr>,
    <expr><literal type="number">0xad2f2d84</literal></expr>, <expr><literal type="number">0xa9ee3033</literal></expr>, <expr><literal type="number">0xa4ad16ea</literal></expr>, <expr><literal type="number">0xa06c0b5d</literal></expr>,
    <expr><literal type="number">0xd4326d90</literal></expr>, <expr><literal type="number">0xd0f37027</literal></expr>, <expr><literal type="number">0xddb056fe</literal></expr>, <expr><literal type="number">0xd9714b49</literal></expr>,
    <expr><literal type="number">0xc7361b4c</literal></expr>, <expr><literal type="number">0xc3f706fb</literal></expr>, <expr><literal type="number">0xceb42022</literal></expr>, <expr><literal type="number">0xca753d95</literal></expr>,
    <expr><literal type="number">0xf23a8028</literal></expr>, <expr><literal type="number">0xf6fb9d9f</literal></expr>, <expr><literal type="number">0xfbb8bb46</literal></expr>, <expr><literal type="number">0xff79a6f1</literal></expr>,
    <expr><literal type="number">0xe13ef6f4</literal></expr>, <expr><literal type="number">0xe5ffeb43</literal></expr>, <expr><literal type="number">0xe8bccd9a</literal></expr>, <expr><literal type="number">0xec7dd02d</literal></expr>,
    <expr><literal type="number">0x34867077</literal></expr>, <expr><literal type="number">0x30476dc0</literal></expr>, <expr><literal type="number">0x3d044b19</literal></expr>, <expr><literal type="number">0x39c556ae</literal></expr>,
    <expr><literal type="number">0x278206ab</literal></expr>, <expr><literal type="number">0x23431b1c</literal></expr>, <expr><literal type="number">0x2e003dc5</literal></expr>, <expr><literal type="number">0x2ac12072</literal></expr>,
    <expr><literal type="number">0x128e9dcf</literal></expr>, <expr><literal type="number">0x164f8078</literal></expr>, <expr><literal type="number">0x1b0ca6a1</literal></expr>, <expr><literal type="number">0x1fcdbb16</literal></expr>,
    <expr><literal type="number">0x018aeb13</literal></expr>, <expr><literal type="number">0x054bf6a4</literal></expr>, <expr><literal type="number">0x0808d07d</literal></expr>, <expr><literal type="number">0x0cc9cdca</literal></expr>,
    <expr><literal type="number">0x7897ab07</literal></expr>, <expr><literal type="number">0x7c56b6b0</literal></expr>, <expr><literal type="number">0x71159069</literal></expr>, <expr><literal type="number">0x75d48dde</literal></expr>,
    <expr><literal type="number">0x6b93dddb</literal></expr>, <expr><literal type="number">0x6f52c06c</literal></expr>, <expr><literal type="number">0x6211e6b5</literal></expr>, <expr><literal type="number">0x66d0fb02</literal></expr>,
    <expr><literal type="number">0x5e9f46bf</literal></expr>, <expr><literal type="number">0x5a5e5b08</literal></expr>, <expr><literal type="number">0x571d7dd1</literal></expr>, <expr><literal type="number">0x53dc6066</literal></expr>,
    <expr><literal type="number">0x4d9b3063</literal></expr>, <expr><literal type="number">0x495a2dd4</literal></expr>, <expr><literal type="number">0x44190b0d</literal></expr>, <expr><literal type="number">0x40d816ba</literal></expr>,
    <expr><literal type="number">0xaca5c697</literal></expr>, <expr><literal type="number">0xa864db20</literal></expr>, <expr><literal type="number">0xa527fdf9</literal></expr>, <expr><literal type="number">0xa1e6e04e</literal></expr>,
    <expr><literal type="number">0xbfa1b04b</literal></expr>, <expr><literal type="number">0xbb60adfc</literal></expr>, <expr><literal type="number">0xb6238b25</literal></expr>, <expr><literal type="number">0xb2e29692</literal></expr>,
    <expr><literal type="number">0x8aad2b2f</literal></expr>, <expr><literal type="number">0x8e6c3698</literal></expr>, <expr><literal type="number">0x832f1041</literal></expr>, <expr><literal type="number">0x87ee0df6</literal></expr>,
    <expr><literal type="number">0x99a95df3</literal></expr>, <expr><literal type="number">0x9d684044</literal></expr>, <expr><literal type="number">0x902b669d</literal></expr>, <expr><literal type="number">0x94ea7b2a</literal></expr>,
    <expr><literal type="number">0xe0b41de7</literal></expr>, <expr><literal type="number">0xe4750050</literal></expr>, <expr><literal type="number">0xe9362689</literal></expr>, <expr><literal type="number">0xedf73b3e</literal></expr>,
    <expr><literal type="number">0xf3b06b3b</literal></expr>, <expr><literal type="number">0xf771768c</literal></expr>, <expr><literal type="number">0xfa325055</literal></expr>, <expr><literal type="number">0xfef34de2</literal></expr>,
    <expr><literal type="number">0xc6bcf05f</literal></expr>, <expr><literal type="number">0xc27dede8</literal></expr>, <expr><literal type="number">0xcf3ecb31</literal></expr>, <expr><literal type="number">0xcbffd686</literal></expr>,
    <expr><literal type="number">0xd5b88683</literal></expr>, <expr><literal type="number">0xd1799b34</literal></expr>, <expr><literal type="number">0xdc3abded</literal></expr>, <expr><literal type="number">0xd8fba05a</literal></expr>,
    <expr><literal type="number">0x690ce0ee</literal></expr>, <expr><literal type="number">0x6dcdfd59</literal></expr>, <expr><literal type="number">0x608edb80</literal></expr>, <expr><literal type="number">0x644fc637</literal></expr>,
    <expr><literal type="number">0x7a089632</literal></expr>, <expr><literal type="number">0x7ec98b85</literal></expr>, <expr><literal type="number">0x738aad5c</literal></expr>, <expr><literal type="number">0x774bb0eb</literal></expr>,
    <expr><literal type="number">0x4f040d56</literal></expr>, <expr><literal type="number">0x4bc510e1</literal></expr>, <expr><literal type="number">0x46863638</literal></expr>, <expr><literal type="number">0x42472b8f</literal></expr>,
    <expr><literal type="number">0x5c007b8a</literal></expr>, <expr><literal type="number">0x58c1663d</literal></expr>, <expr><literal type="number">0x558240e4</literal></expr>, <expr><literal type="number">0x51435d53</literal></expr>,
    <expr><literal type="number">0x251d3b9e</literal></expr>, <expr><literal type="number">0x21dc2629</literal></expr>, <expr><literal type="number">0x2c9f00f0</literal></expr>, <expr><literal type="number">0x285e1d47</literal></expr>,
    <expr><literal type="number">0x36194d42</literal></expr>, <expr><literal type="number">0x32d850f5</literal></expr>, <expr><literal type="number">0x3f9b762c</literal></expr>, <expr><literal type="number">0x3b5a6b9b</literal></expr>,
    <expr><literal type="number">0x0315d626</literal></expr>, <expr><literal type="number">0x07d4cb91</literal></expr>, <expr><literal type="number">0x0a97ed48</literal></expr>, <expr><literal type="number">0x0e56f0ff</literal></expr>,
    <expr><literal type="number">0x1011a0fa</literal></expr>, <expr><literal type="number">0x14d0bd4d</literal></expr>, <expr><literal type="number">0x19939b94</literal></expr>, <expr><literal type="number">0x1d528623</literal></expr>,
    <expr><literal type="number">0xf12f560e</literal></expr>, <expr><literal type="number">0xf5ee4bb9</literal></expr>, <expr><literal type="number">0xf8ad6d60</literal></expr>, <expr><literal type="number">0xfc6c70d7</literal></expr>,
    <expr><literal type="number">0xe22b20d2</literal></expr>, <expr><literal type="number">0xe6ea3d65</literal></expr>, <expr><literal type="number">0xeba91bbc</literal></expr>, <expr><literal type="number">0xef68060b</literal></expr>,
    <expr><literal type="number">0xd727bbb6</literal></expr>, <expr><literal type="number">0xd3e6a601</literal></expr>, <expr><literal type="number">0xdea580d8</literal></expr>, <expr><literal type="number">0xda649d6f</literal></expr>,
    <expr><literal type="number">0xc423cd6a</literal></expr>, <expr><literal type="number">0xc0e2d0dd</literal></expr>, <expr><literal type="number">0xcda1f604</literal></expr>, <expr><literal type="number">0xc960ebb3</literal></expr>,
    <expr><literal type="number">0xbd3e8d7e</literal></expr>, <expr><literal type="number">0xb9ff90c9</literal></expr>, <expr><literal type="number">0xb4bcb610</literal></expr>, <expr><literal type="number">0xb07daba7</literal></expr>,
    <expr><literal type="number">0xae3afba2</literal></expr>, <expr><literal type="number">0xaafbe615</literal></expr>, <expr><literal type="number">0xa7b8c0cc</literal></expr>, <expr><literal type="number">0xa379dd7b</literal></expr>,
    <expr><literal type="number">0x9b3660c6</literal></expr>, <expr><literal type="number">0x9ff77d71</literal></expr>, <expr><literal type="number">0x92b45ba8</literal></expr>, <expr><literal type="number">0x9675461f</literal></expr>,
    <expr><literal type="number">0x8832161a</literal></expr>, <expr><literal type="number">0x8cf30bad</literal></expr>, <expr><literal type="number">0x81b02d74</literal></expr>, <expr><literal type="number">0x857130c3</literal></expr>,
    <expr><literal type="number">0x5d8a9099</literal></expr>, <expr><literal type="number">0x594b8d2e</literal></expr>, <expr><literal type="number">0x5408abf7</literal></expr>, <expr><literal type="number">0x50c9b640</literal></expr>,
    <expr><literal type="number">0x4e8ee645</literal></expr>, <expr><literal type="number">0x4a4ffbf2</literal></expr>, <expr><literal type="number">0x470cdd2b</literal></expr>, <expr><literal type="number">0x43cdc09c</literal></expr>,
    <expr><literal type="number">0x7b827d21</literal></expr>, <expr><literal type="number">0x7f436096</literal></expr>, <expr><literal type="number">0x7200464f</literal></expr>, <expr><literal type="number">0x76c15bf8</literal></expr>,
    <expr><literal type="number">0x68860bfd</literal></expr>, <expr><literal type="number">0x6c47164a</literal></expr>, <expr><literal type="number">0x61043093</literal></expr>, <expr><literal type="number">0x65c52d24</literal></expr>,
    <expr><literal type="number">0x119b4be9</literal></expr>, <expr><literal type="number">0x155a565e</literal></expr>, <expr><literal type="number">0x18197087</literal></expr>, <expr><literal type="number">0x1cd86d30</literal></expr>,
    <expr><literal type="number">0x029f3d35</literal></expr>, <expr><literal type="number">0x065e2082</literal></expr>, <expr><literal type="number">0x0b1d065b</literal></expr>, <expr><literal type="number">0x0fdc1bec</literal></expr>,
    <expr><literal type="number">0x3793a651</literal></expr>, <expr><literal type="number">0x3352bbe6</literal></expr>, <expr><literal type="number">0x3e119d3f</literal></expr>, <expr><literal type="number">0x3ad08088</literal></expr>,
    <expr><literal type="number">0x2497d08d</literal></expr>, <expr><literal type="number">0x2056cd3a</literal></expr>, <expr><literal type="number">0x2d15ebe3</literal></expr>, <expr><literal type="number">0x29d4f654</literal></expr>,
    <expr><literal type="number">0xc5a92679</literal></expr>, <expr><literal type="number">0xc1683bce</literal></expr>, <expr><literal type="number">0xcc2b1d17</literal></expr>, <expr><literal type="number">0xc8ea00a0</literal></expr>,
    <expr><literal type="number">0xd6ad50a5</literal></expr>, <expr><literal type="number">0xd26c4d12</literal></expr>, <expr><literal type="number">0xdf2f6bcb</literal></expr>, <expr><literal type="number">0xdbee767c</literal></expr>,
    <expr><literal type="number">0xe3a1cbc1</literal></expr>, <expr><literal type="number">0xe760d676</literal></expr>, <expr><literal type="number">0xea23f0af</literal></expr>, <expr><literal type="number">0xeee2ed18</literal></expr>,
    <expr><literal type="number">0xf0a5bd1d</literal></expr>, <expr><literal type="number">0xf464a0aa</literal></expr>, <expr><literal type="number">0xf9278673</literal></expr>, <expr><literal type="number">0xfde69bc4</literal></expr>,
    <expr><literal type="number">0x89b8fd09</literal></expr>, <expr><literal type="number">0x8d79e0be</literal></expr>, <expr><literal type="number">0x803ac667</literal></expr>, <expr><literal type="number">0x84fbdbd0</literal></expr>,
    <expr><literal type="number">0x9abc8bd5</literal></expr>, <expr><literal type="number">0x9e7d9662</literal></expr>, <expr><literal type="number">0x933eb0bb</literal></expr>, <expr><literal type="number">0x97ffad0c</literal></expr>,
    <expr><literal type="number">0xafb010b1</literal></expr>, <expr><literal type="number">0xab710d06</literal></expr>, <expr><literal type="number">0xa6322bdf</literal></expr>, <expr><literal type="number">0xa2f33668</literal></expr>,
    <expr><literal type="number">0xbcb4666d</literal></expr>, <expr><literal type="number">0xb8757bda</literal></expr>, <expr><literal type="number">0xb5365d03</literal></expr>, <expr><literal type="number">0xb1f740b4</literal></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>crc</name> <init>= <expr><name>init</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>crc</name> <operator>=</operator> <operator>(</operator><name>crc</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>^</operator> <name><name>crc32_table</name><index>[<expr><operator>(</operator><operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>^</operator> <operator>*</operator><name>buf</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>buf</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>crc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>iwu_replace_char</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>sch</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>rch</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>sch</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>rch</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>iwu_cmp_files</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f1</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f2</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>verbose</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>f1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>f2</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>f1</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>f2</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>f2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><call><name>getc</name><argument_list>(<argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>c2</name> <init>= <expr><call><name>getc</name><argument_list>(<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>line</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>c1</name> <operator>!=</operator> <name>EOF</name> <operator>&amp;&amp;</operator> <name>c2</name> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c1</name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c2</name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nDiff at: %d:%d\n"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><operator>(</operator><name>c1</name> <operator>-</operator> <name>c2</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>getc</name><argument_list>(<argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>getc</name><argument_list>(<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c1</name> <operator>-</operator> <name>c2</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>verbose</name></expr>)</condition> <block>{<block_content> <comment type="line">// -V793</comment>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nDiff at: %d:%d\n"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>c1</name> <operator>-</operator> <name>c2</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>iwu_file_read_as_buf_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>out_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>xstr</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>out_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>rb</name></decl>, <decl><type ref="prev"/><name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>O_CLOEXEC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rb</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rb</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>iwxstr_cat</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <goto>goto <name>error</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>rc</name> <operator>+=</operator> <name>rb</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rb</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>error</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><operator>*</operator><name>out_len</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
  <return>return <expr><call><name>iwxstr_destroy_keep_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>error</name>:</label>
  <expr_stmt><expr><operator>*</operator><name>out_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>iwu_file_read_as_buf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
  <return>return <expr><call><name>iwu_file_read_as_buf_len</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>iwu_x31_u32_hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>h</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>*</operator><name>s</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><expr><operator>++</operator><name>s</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>-</operator> <name>h</name> <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwu_replace</name><parameter_list>(
  <parameter><decl><type><name>IWXSTR</name>           <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>        <modifier>*</modifier></type><name>data</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type>                <name>datalen</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>        <modifier>*</modifier></type><name><name>keys</name><index>[]</index></name></decl></parameter>,
  <parameter><decl><type><name>int</name></type>                <name>keysz</name></decl></parameter>,
  <parameter><decl><type><name>iwu_replace_mapper</name></type> <name>mapper</name></decl></parameter>,
  <parameter><decl><type><name>void</name>              <modifier>*</modifier></type><name>mapper_op</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name> <operator>||</operator> <operator>!</operator><name>data</name> <operator>||</operator> <operator>!</operator><name>keys</name> <operator>||</operator> <operator>!</operator><name>mapper</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>keysz</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><expr><name>keysz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>keys</name><index>[<expr><name>keysz</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>keysz</name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>datalen</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>keysz</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>iwxstr_new2</name><argument_list>(<argument><expr><ternary><condition><expr><name>datalen</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>datalen</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>datalen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwxstr_cat</name><argument_list>(<argument><expr><operator>*</operator><name>result</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>bbuf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>inter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>bbuf</name> <operator>=</operator> <call><name>iwxstr_new2</name><argument_list>(<argument><expr><name>datalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name>bbuf</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>inter</name> <operator>=</operator> <call><name>iwxstr_new2</name><argument_list>(<argument><expr><name>datalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name>inter</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keysz</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_clear</name><argument_list>(<argument><expr><name>bbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>klen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>start</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwxstr_cat</name><argument_list>(<argument><expr><name>bbuf</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>datalen</name> <operator>-</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>start</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>iwxstr_cat</name><argument_list>(<argument><expr><name>bbuf</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>repl</name> <init>= <expr><call><name>mapper</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>mapper_op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>bbuf</name></expr></argument>, <argument><expr><ternary><condition><expr><name>repl</name></expr> ?</condition><then> <expr><name>repl</name></expr> </then><else>: <expr><name>key</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>klen</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>-</operator> <name>start</name> <operator>&gt;=</operator> <name>datalen</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>start</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwxstr_clear</name><argument_list>(<argument><expr><name>inter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwxstr_cat</name><argument_list>(<argument><expr><name>inter</name></expr></argument>, <argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>bbuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name>bbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>inter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>start</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>datalen</name> <operator>=</operator> <call><name>iwxstr_size</name><argument_list>(<argument><expr><name>inter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>bbuf</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>bbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>start</name> <operator>==</operator> <name>data</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwxstr_cat</name><argument_list>(<argument><expr><name>inter</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>inter</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>inter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>inter</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
</unit>
