<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iowow/src/utils/utf8proc.c"><comment type="block">/* -*- mode: c; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*- */</comment>
<comment type="block">/*
 *  Copyright (c) 2015 Steven G. Johnson, Jiahao Chen, Peter Colberg, Tony Kelman, Scott P. Jones, and other
 * contributors.
 *  Copyright (c) 2009 Public Software Group e. V., Berlin, Germany
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *  DEALINGS IN THE SOFTWARE.
 */</comment>

<comment type="block">/*
 *  This library contains derived data from a modified version of the
 *  Unicode data files.
 *
 *  The original data files are available at
 *  http://www.unicode.org/Public/UNIDATA/
 *
 *  Please notice the copyright statement in the file "utf8proc_data.c".
 */</comment>


<comment type="block">/*
 *  File name:    utf8proc.c
 *
 *  Description:
 *  Implementation of libutf8proc.
 */</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf8proc.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>UTF8PROC_DLLEXPORT</name> <specifier>const</specifier> <name>utf8proc_int8_t</name></type> <name><name>utf8proc_utf8class</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{
  <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
  <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
  <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
  <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
  <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
  <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
  <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
  <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
  <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
  <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
  <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
  <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
  <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
  <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,
  <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,
  <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF8PROC_HANGUL_SBASE</name></cpp:macro>  <cpp:value>0xAC00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF8PROC_HANGUL_LBASE</name></cpp:macro>  <cpp:value>0x1100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF8PROC_HANGUL_VBASE</name></cpp:macro>  <cpp:value>0x1161</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF8PROC_HANGUL_TBASE</name></cpp:macro>  <cpp:value>0x11A7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF8PROC_HANGUL_LCOUNT</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF8PROC_HANGUL_VCOUNT</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF8PROC_HANGUL_TCOUNT</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF8PROC_HANGUL_NCOUNT</name></cpp:macro> <cpp:value>588</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF8PROC_HANGUL_SCOUNT</name></cpp:macro> <cpp:value>11172</cpp:value></cpp:define>
<comment type="block">/* END is exclusive */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF8PROC_HANGUL_L_START</name></cpp:macro>  <cpp:value>0x1100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF8PROC_HANGUL_L_END</name></cpp:macro>    <cpp:value>0x115A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF8PROC_HANGUL_L_FILLER</name></cpp:macro> <cpp:value>0x115F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF8PROC_HANGUL_V_START</name></cpp:macro>  <cpp:value>0x1160</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF8PROC_HANGUL_V_END</name></cpp:macro>    <cpp:value>0x11A3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF8PROC_HANGUL_T_START</name></cpp:macro>  <cpp:value>0x11A8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF8PROC_HANGUL_T_END</name></cpp:macro>    <cpp:value>0x11FA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF8PROC_HANGUL_S_START</name></cpp:macro>  <cpp:value>0xAC00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF8PROC_HANGUL_S_END</name></cpp:macro>    <cpp:value>0xD7A4</cpp:value></cpp:define>

<comment type="block">/* Should follow semantic-versioning rules (semver.org) based on API
   compatibility.  (Note that the shared-library version number will
   be different, being based on ABI compatibility.): */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRINGIZEx</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRINGIZE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>STRINGIZEx(x)</cpp:value></cpp:define>

<function><type><name>UTF8PROC_DLLEXPORT</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>utf8proc_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>STRINGIZE</name><argument_list>(<argument><expr><name>UTF8PROC_VERSION_MAJOR</name></expr></argument>)</argument_list></call> <literal type="string">"."</literal> <call><name>STRINGIZE</name><argument_list>(<argument><expr><name>UTF8PROC_VERSION_MINOR</name></expr></argument>)</argument_list></call> <literal type="string">"."</literal> <call><name>STRINGIZE</name><argument_list>(<argument><expr><name>UTF8PROC_VERSION_PATCH</name></expr></argument>)</argument_list></call>
         <literal type="string">""</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>UTF8PROC_DLLEXPORT</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>utf8proc_errmsg</name><parameter_list>(<parameter><decl><type><name>utf8proc_ssize_t</name></type> <name>errcode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>errcode</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>UTF8PROC_ERROR_NOMEM</name></expr>:</case>
      <return>return <expr><literal type="string">"Memory for processing UTF-8 data could not be allocated."</literal></expr>;</return>
    <case>case <expr><name>UTF8PROC_ERROR_OVERFLOW</name></expr>:</case>
      <return>return <expr><literal type="string">"UTF-8 string is too long to be processed."</literal></expr>;</return>
    <case>case <expr><name>UTF8PROC_ERROR_INVALIDUTF8</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid UTF-8 string"</literal></expr>;</return>
    <case>case <expr><name>UTF8PROC_ERROR_NOTASSIGNED</name></expr>:</case>
      <return>return <expr><literal type="string">"Unassigned Unicode code point found in UTF-8 string."</literal></expr>;</return>
    <case>case <expr><name>UTF8PROC_ERROR_INVALIDOPTS</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid options for UTF-8 processing chosen."</literal></expr>;</return>
    <default>default:</default>
      <return>return <expr><literal type="string">"An unknown error occurred while processing UTF-8 data."</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utf_cont</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((ch) &amp; 0xc0) == 0x80)</cpp:value></cpp:define>

<function><type><name>UTF8PROC_DLLEXPORT</name> <name>utf8proc_ssize_t</name></type> <name>utf8proc_iterate</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>utf8proc_uint8_t</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
  <parameter><decl><type><name>utf8proc_ssize_t</name></type>        <name>strlen</name></decl></parameter>,
  <parameter><decl><type><name>utf8proc_int32_t</name>       <modifier>*</modifier></type><name>dst</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>utf8proc_uint32_t</name></type> <name>uc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>utf8proc_uint8_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>strlen</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>end</name> <operator>=</operator> <name>str</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>strlen</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><name>strlen</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>uc</name> <operator>=</operator> <operator>*</operator><name>str</name><operator>++</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name>uc</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// Must be between 0xc2 and 0xf4 inclusive to be valid</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>uc</name> <operator>-</operator> <literal type="number">0xc2</literal><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><literal type="number">0xf4</literal> <operator>-</operator> <literal type="number">0xc2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>UTF8PROC_ERROR_INVALIDUTF8</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&lt;</operator> <literal type="number">0xe0</literal></expr>)</condition> <block>{<block_content>         <comment type="line">// 2-byte sequence</comment>
    <comment type="line">// Must have valid continuation character</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>str</name> <operator>&gt;=</operator> <name>end</name><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>utf_cont</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>UTF8PROC_ERROR_INVALIDUTF8</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uc</name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>*</operator><name>str</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><literal type="number">2</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&lt;</operator> <literal type="number">0xf0</literal></expr>)</condition> <block>{<block_content>        <comment type="line">// 3-byte sequence</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>str</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>end</name><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>utf_cont</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>utf_cont</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>UTF8PROC_ERROR_INVALIDUTF8</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// Check for surrogate chars</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>uc</name> <operator>==</operator> <literal type="number">0xed</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>str</name> <operator>&gt;</operator> <literal type="number">0x9f</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>UTF8PROC_ERROR_INVALIDUTF8</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>uc</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uc</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>str</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&lt;</operator> <literal type="number">0x800</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>UTF8PROC_ERROR_INVALIDUTF8</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name>uc</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">3</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// 4-byte sequence</comment>
  <comment type="line">// Must have 3 valid continuation characters</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>str</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name>end</name><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>utf_cont</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>utf_cont</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>utf_cont</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>UTF8PROC_ERROR_INVALIDUTF8</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// Make sure in correct range (0x10000 - 0x10ffff)</comment>
  <if_stmt><if>if <condition>(<expr><name>uc</name> <operator>==</operator> <literal type="number">0xf0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>&lt;</operator> <literal type="number">0x90</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>UTF8PROC_ERROR_INVALIDUTF8</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>uc</name> <operator>==</operator> <literal type="number">0xf4</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>&gt;</operator> <literal type="number">0x8f</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>UTF8PROC_ERROR_INVALIDUTF8</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uc</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>str</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
  <return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>UTF8PROC_DLLEXPORT</name> <name>utf8proc_bool</name></type> <name>utf8proc_codepoint_valid</name><parameter_list>(<parameter><decl><type><name>utf8proc_int32_t</name></type> <name>uc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>utf8proc_uint32_t</name><operator>)</operator> <name>uc</name><operator>)</operator> <operator>-</operator> <literal type="number">0xd800</literal> <operator>&gt;</operator> <literal type="number">0x07ff</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>utf8proc_uint32_t</name><operator>)</operator> <name>uc</name> <operator>&lt;</operator> <literal type="number">0x110000</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>UTF8PROC_DLLEXPORT</name> <name>utf8proc_ssize_t</name></type> <name>utf8proc_encode_char</name><parameter_list>(<parameter><decl><type><name>utf8proc_int32_t</name></type> <name>uc</name></decl></parameter>, <parameter><decl><type><name>utf8proc_uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&lt;</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>uc</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>utf8proc_uint8_t</name><operator>)</operator> <name>uc</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>uc</name> <operator>&lt;</operator> <literal type="number">0x800</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>utf8proc_uint8_t</name><operator>)</operator> <operator>(</operator><literal type="number">0xC0</literal> <operator>+</operator> <operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>utf8proc_uint8_t</name><operator>)</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><name>uc</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><literal type="number">2</literal></expr>;</return>
    <comment type="line">// Note: we allow encoding 0xd800-0xdfff here, so as not to change</comment>
    <comment type="line">// the API, however, these are actually invalid in UTF-8</comment>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>uc</name> <operator>&lt;</operator> <literal type="number">0x10000</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>utf8proc_uint8_t</name><operator>)</operator> <operator>(</operator><literal type="number">0xE0</literal> <operator>+</operator> <operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>utf8proc_uint8_t</name><operator>)</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>utf8proc_uint8_t</name><operator>)</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><name>uc</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><literal type="number">3</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>uc</name> <operator>&lt;</operator> <literal type="number">0x110000</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>utf8proc_uint8_t</name><operator>)</operator> <operator>(</operator><literal type="number">0xF0</literal> <operator>+</operator> <operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>utf8proc_uint8_t</name><operator>)</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>utf8proc_uint8_t</name><operator>)</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>utf8proc_uint8_t</name><operator>)</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><name>uc</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><literal type="number">4</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* internal "unsafe" version that does not check whether uc is in range */</comment>
<function><type><specifier>static</specifier> <name>utf8proc_ssize_t</name></type> <name>unsafe_encode_char</name><parameter_list>(<parameter><decl><type><name>utf8proc_int32_t</name></type> <name>uc</name></decl></parameter>, <parameter><decl><type><name>utf8proc_uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&lt;</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>uc</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>utf8proc_uint8_t</name><operator>)</operator> <name>uc</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>uc</name> <operator>&lt;</operator> <literal type="number">0x800</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>utf8proc_uint8_t</name><operator>)</operator> <operator>(</operator><literal type="number">0xC0</literal> <operator>+</operator> <operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>utf8proc_uint8_t</name><operator>)</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><name>uc</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><literal type="number">2</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>uc</name> <operator>==</operator> <literal type="number">0xFFFF</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>utf8proc_uint8_t</name><operator>)</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>uc</name> <operator>==</operator> <literal type="number">0xFFFE</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>utf8proc_uint8_t</name><operator>)</operator> <literal type="number">0xFE</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>uc</name> <operator>&lt;</operator> <literal type="number">0x10000</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>utf8proc_uint8_t</name><operator>)</operator> <operator>(</operator><literal type="number">0xE0</literal> <operator>+</operator> <operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>utf8proc_uint8_t</name><operator>)</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>utf8proc_uint8_t</name><operator>)</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><name>uc</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><literal type="number">3</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>uc</name> <operator>&lt;</operator> <literal type="number">0x110000</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>utf8proc_uint8_t</name><operator>)</operator> <operator>(</operator><literal type="number">0xF0</literal> <operator>+</operator> <operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>utf8proc_uint8_t</name><operator>)</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>utf8proc_uint8_t</name><operator>)</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uc</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>utf8proc_uint8_t</name><operator>)</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><name>uc</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><literal type="number">4</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* return whether there is a grapheme break between boundclasses lbc and tbc
   (according to the definition of extended grapheme clusters)

   Rule numbering refers to TR29 Version 29 (Unicode 9.0.0):
   http://www.unicode.org/reports/tr29/tr29-29.html

   CAVEATS:
   Please note that evaluation of GB10 (grapheme breaks between emoji zwj sequences)
   and GB 12/13 (regional indicator code points) require knowledge of previous characters
   and are thus not handled by this function. This may result in an incorrect break before
   an E_Modifier class codepoint and an incorrectly missing break between two
   REGIONAL_INDICATOR class code points if such support does not exist in the caller.

   See the special support in grapheme_break_extended, for required bookkeeping by the caller.
 */</comment>
<function><type><specifier>static</specifier> <name>utf8proc_bool</name></type> <name>grapheme_break_simple</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lbc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tbc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name>lbc</name> <operator>==</operator> <name>UTF8PROC_BOUNDCLASS_START</name><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr>                                      <comment type="line">// GB1</comment>
         </then><else>: <expr><ternary><condition><expr><operator>(</operator>  <name>lbc</name> <operator>==</operator> <name>UTF8PROC_BOUNDCLASS_CR</name>                                             <comment type="line">// GB3</comment>
           <operator>&amp;&amp;</operator> <name>tbc</name> <operator>==</operator> <name>UTF8PROC_BOUNDCLASS_LF</name><operator>)</operator></expr> ?</condition><then> <expr><name>false</name></expr>                                    <comment type="line">// ---</comment>
         </then><else>: <expr><ternary><condition><expr><operator>(</operator><name>lbc</name> <operator>&gt;=</operator> <name>UTF8PROC_BOUNDCLASS_CR</name> <operator>&amp;&amp;</operator> <name>lbc</name> <operator>&lt;=</operator> <name>UTF8PROC_BOUNDCLASS_CONTROL</name><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> <comment type="line">// GB4</comment>
         </then><else>: <expr><ternary><condition><expr><operator>(</operator><name>tbc</name> <operator>&gt;=</operator> <name>UTF8PROC_BOUNDCLASS_CR</name> <operator>&amp;&amp;</operator> <name>tbc</name> <operator>&lt;=</operator> <name>UTF8PROC_BOUNDCLASS_CONTROL</name><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> <comment type="line">// GB5</comment>
         </then><else>: <expr><ternary><condition><expr><operator>(</operator>  <name>lbc</name> <operator>==</operator> <name>UTF8PROC_BOUNDCLASS_L</name>                                              <comment type="line">// GB6</comment>
           <operator>&amp;&amp;</operator> <operator>(</operator>  <name>tbc</name> <operator>==</operator> <name>UTF8PROC_BOUNDCLASS_L</name>                                           <comment type="line">// ---</comment>
              <operator>||</operator> <name>tbc</name> <operator>==</operator> <name>UTF8PROC_BOUNDCLASS_V</name>                                           <comment type="line">// ---</comment>
              <operator>||</operator> <name>tbc</name> <operator>==</operator> <name>UTF8PROC_BOUNDCLASS_LV</name>                                          <comment type="line">// ---</comment>
              <operator>||</operator> <name>tbc</name> <operator>==</operator> <name>UTF8PROC_BOUNDCLASS_LVT</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name>false</name></expr>                               <comment type="line">// ---</comment>
         </then><else>: <expr><ternary><condition><expr><operator>(</operator>  <operator>(</operator>  <name>lbc</name> <operator>==</operator> <name>UTF8PROC_BOUNDCLASS_LV</name>                                          <comment type="line">// GB7</comment>
              <operator>||</operator> <name>lbc</name> <operator>==</operator> <name>UTF8PROC_BOUNDCLASS_V</name><operator>)</operator>                                          <comment type="line">// ---</comment>
           <operator>&amp;&amp;</operator> <operator>(</operator>  <name>tbc</name> <operator>==</operator> <name>UTF8PROC_BOUNDCLASS_V</name>                                           <comment type="line">// ---</comment>
              <operator>||</operator> <name>tbc</name> <operator>==</operator> <name>UTF8PROC_BOUNDCLASS_T</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name>false</name></expr>                                 <comment type="line">// ---</comment>
         </then><else>: <expr><ternary><condition><expr><operator>(</operator>  <operator>(</operator>  <name>lbc</name> <operator>==</operator> <name>UTF8PROC_BOUNDCLASS_LVT</name>                                         <comment type="line">// GB8</comment>
              <operator>||</operator> <name>lbc</name> <operator>==</operator> <name>UTF8PROC_BOUNDCLASS_T</name><operator>)</operator>                                          <comment type="line">// ---</comment>
           <operator>&amp;&amp;</operator> <name>tbc</name> <operator>==</operator> <name>UTF8PROC_BOUNDCLASS_T</name><operator>)</operator></expr> ?</condition><then> <expr><name>false</name></expr>                                     <comment type="line">// ---</comment>
         </then><else>: <expr><ternary><condition><expr><operator>(</operator>  <name>tbc</name> <operator>==</operator> <name>UTF8PROC_BOUNDCLASS_EXTEND</name>                                         <comment type="line">// GB9</comment>
           <operator>||</operator> <name>tbc</name> <operator>==</operator> <name>UTF8PROC_BOUNDCLASS_ZWJ</name>                                            <comment type="line">// ---</comment>
           <operator>||</operator> <name>tbc</name> <operator>==</operator> <name>UTF8PROC_BOUNDCLASS_SPACINGMARK</name>                                    <comment type="line">// GB9a</comment>
           <operator>||</operator> <name>lbc</name> <operator>==</operator> <name>UTF8PROC_BOUNDCLASS_PREPEND</name><operator>)</operator></expr> ?</condition><then> <expr><name>false</name></expr>                               <comment type="line">// GB9b</comment>
         </then><else>: <expr><ternary><condition><expr><operator>(</operator>  <operator>(</operator>  <name>lbc</name> <operator>==</operator> <name>UTF8PROC_BOUNDCLASS_E_BASE</name>                                      <comment type="line">// GB10 (requires additional</comment>
                                                                                        <comment type="line">// handling below)</comment>
              <operator>||</operator> <name>lbc</name> <operator>==</operator> <name>UTF8PROC_BOUNDCLASS_E_BASE_GAZ</name><operator>)</operator>                                 <comment type="line">// ----</comment>
           <operator>&amp;&amp;</operator> <name>tbc</name> <operator>==</operator> <name>UTF8PROC_BOUNDCLASS_E_MODIFIER</name><operator>)</operator></expr> ?</condition><then> <expr><name>false</name></expr>                            <comment type="line">// ----</comment>
         </then><else>: <expr><ternary><condition><expr><operator>(</operator>  <name>lbc</name> <operator>==</operator> <name>UTF8PROC_BOUNDCLASS_ZWJ</name>                                            <comment type="line">// GB11</comment>
           <operator>&amp;&amp;</operator> <operator>(</operator>  <name>tbc</name> <operator>==</operator> <name>UTF8PROC_BOUNDCLASS_GLUE_AFTER_ZWJ</name>                              <comment type="line">// ----</comment>
              <operator>||</operator> <name>tbc</name> <operator>==</operator> <name>UTF8PROC_BOUNDCLASS_E_BASE_GAZ</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name>false</name></expr>                        <comment type="line">// ----</comment>
         </then><else>: <expr><ternary><condition><expr><operator>(</operator>  <name>lbc</name> <operator>==</operator> <name>UTF8PROC_BOUNDCLASS_REGIONAL_INDICATOR</name>                             <comment type="line">// GB12/13 (requires additional</comment>
                                                                                        <comment type="line">// handling below)</comment>
           <operator>&amp;&amp;</operator> <name>tbc</name> <operator>==</operator> <name>UTF8PROC_BOUNDCLASS_REGIONAL_INDICATOR</name><operator>)</operator></expr> ?</condition><then> <expr><name>false</name></expr>                    <comment type="line">// ----</comment>
         </then><else>: <expr><name>true</name></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</return>                                                                        <comment type="line">// GB999</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>utf8proc_bool</name></type> <name>grapheme_break_extended</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lbc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tbc</name></decl></parameter>, <parameter><decl><type><name>utf8proc_int32_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>lbc_override</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>state</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>state</name> <operator>!=</operator> <name>UTF8PROC_BOUNDCLASS_START</name><operator>)</operator></expr>
                      ?</condition><then> <expr><operator>*</operator><name>state</name></expr> </then><else>: <expr><name>lbc</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>utf8proc_bool</name></type> <name>break_permitted</name> <init>= <expr><call><name>grapheme_break_simple</name><argument_list>(<argument><expr><name>lbc_override</name></expr></argument>, <argument><expr><name>tbc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// Special support for GB 12/13 made possible by GB999. After two RI</comment>
    <comment type="line">// class codepoints we want to force a break. Do this by resetting the</comment>
    <comment type="line">// second RI's bound class to UTF8PROC_BOUNDCLASS_OTHER, to force a break</comment>
    <comment type="line">// after that character according to GB999 (unless of course such a break is</comment>
    <comment type="line">// forbidden by a different rule such as GB9).</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>state</name> <operator>==</operator> <name>tbc</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>tbc</name> <operator>==</operator> <name>UTF8PROC_BOUNDCLASS_REGIONAL_INDICATOR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <name>UTF8PROC_BOUNDCLASS_OTHER</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="line">// Special support for GB10. Fold any EXTEND codepoints into the previous</comment>
    <comment type="line">// boundclass if we're dealing with an emoji base boundclass.</comment>
    <if type="elseif">else if <condition>(  <expr><operator>(</operator>  <operator>(</operator><operator>*</operator><name>state</name> <operator>==</operator> <name>UTF8PROC_BOUNDCLASS_E_BASE</name><operator>)</operator>
               <operator>||</operator> <operator>(</operator><operator>*</operator><name>state</name> <operator>==</operator> <name>UTF8PROC_BOUNDCLASS_E_BASE_GAZ</name><operator>)</operator><operator>)</operator>
            <operator>&amp;&amp;</operator> <operator>(</operator><name>tbc</name> <operator>==</operator> <name>UTF8PROC_BOUNDCLASS_EXTEND</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <name>UTF8PROC_BOUNDCLASS_E_BASE</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <name>tbc</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>break_permitted</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>utf8proc_int32_t</name></type> <name>seqindex_decode_entry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>utf8proc_uint16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>utf8proc_int32_t</name></type> <name>entry_cp</name> <init>= <expr><operator>*</operator><operator>*</operator><name>entry</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>entry_cp</name> <operator>&amp;</operator> <literal type="number">0xF800</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xD800</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>entry</name> <operator>=</operator> <operator>*</operator><name>entry</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>entry_cp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>entry_cp</name> <operator>&amp;</operator> <literal type="number">0x03FF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>*</operator><operator>*</operator><name>entry</name> <operator>&amp;</operator> <literal type="number">0x03FF</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>entry_cp</name> <operator>+=</operator> <literal type="number">0x10000</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>entry_cp</name></expr>;</return>
</block_content>}</block></function>
</unit>
