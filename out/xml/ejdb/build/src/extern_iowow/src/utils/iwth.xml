<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iowow/src/utils/iwth.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwth.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwlog.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<function><type><name>iwrc</name></type> <name>iw_cond_timed_wait_ms</name><parameter_list>(<parameter><decl><type><name>pthread_cond_t</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type><name>mtx</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timeout_ms</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>out_is_timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>tp</name></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>out_is_timeout</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IW_HAVE_CLOCK_MONOTONIC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IW_HAVE_PTHREAD_CONDATTR_SETCLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_clock_get_time</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_clock_get_time</name><argument_list>(<argument><expr><name>CLOCK_REALTIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tp</name><operator>.</operator><name>tv_sec</name></name> <operator>+=</operator> <name>timeout_ms</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tp</name><operator>.</operator><name>tv_nsec</name></name> <operator>+=</operator> <operator>(</operator><name>timeout_ms</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>rci</name> <operator>=</operator> <call><name>pthread_cond_timedwait</name><argument_list>(<argument><expr><name>cond</name></expr></argument>, <argument><expr><name>mtx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>rci</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>;</do>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>rci</name> <operator>==</operator> <name>ETIMEDOUT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>out_is_timeout</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__APPLE__</name></cpp:ifdef>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__unused</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__unused</name></cpp:macro> <cpp:value>__attribute__((unused))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>pthread_barrierattr_init</name><parameter_list>(<parameter><decl><type><name>pthread_barrierattr_t</name> <modifier>*</modifier><name>attr</name></type> <name>__unused</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>pthread_barrierattr_destroy</name><parameter_list>(<parameter><decl><type><name>pthread_barrierattr_t</name> <modifier>*</modifier><name>attr</name></type> <name>__unused</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>pthread_barrierattr_getpshared</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>pthread_barrierattr_t</name><modifier>*</modifier> <specifier>restrict</specifier> <name>attr</name></type> <name>__unused</name></decl></parameter>,
  <parameter><decl><type><name>int</name><modifier>*</modifier> <specifier>restrict</specifier></type>                         <name>pshared</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>pshared</name> <operator>=</operator> <name>PTHREAD_PROCESS_PRIVATE</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>pthread_barrierattr_setpshared</name><parameter_list>(
  <parameter><decl><type><name>pthread_barrierattr_t</name> <modifier>*</modifier><name>attr</name></type> <name>__unused</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type>                    <name>pshared</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pshared</name> <operator>!=</operator> <name>PTHREAD_PROCESS_PRIVATE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>pthread_barrier_init</name><parameter_list>(
  <parameter><decl><type><name>pthread_barrier_t</name><modifier>*</modifier> <specifier>restrict</specifier></type>           <name>barrier</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>pthread_barrierattr_t</name><modifier>*</modifier> <specifier>restrict</specifier> <name>attr</name></type> <name>__unused</name></decl></parameter>,
  <parameter><decl><type><name>unsigned</name></type>                              <name>count</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>errno_save</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>errno_save</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>barrier</name><operator>-&gt;</operator><name>limit</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>barrier</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>barrier</name><operator>-&gt;</operator><name>phase</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>pthread_barrier_destroy</name><parameter_list>(<parameter><decl><type><name>pthread_barrier_t</name> <modifier>*</modifier></type><name>barrier</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>pthread_barrier_wait</name><parameter_list>(<parameter><decl><type><name>pthread_barrier_t</name> <modifier>*</modifier></type><name>barrier</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>barrier</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>barrier</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;=</operator> <name><name>barrier</name><operator>-&gt;</operator><name>limit</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>barrier</name><operator>-&gt;</operator><name>phase</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>barrier</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>PTHREAD_BARRIER_SERIAL_THREAD</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>phase</name> <init>= <expr><name><name>barrier</name><operator>-&gt;</operator><name>phase</name></name></expr></init></decl>;</decl_stmt>
    <do>do <block>{<block_content>
      <expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>barrier</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name>phase</name> <operator>==</operator> <name><name>barrier</name><operator>-&gt;</operator><name>phase</name></name></expr>)</condition>;</do>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __APPLE__ */</comment>
</unit>
