<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iowow/src/utils/iwxstr.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwxstr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwlog.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<comment type="line">// Default IWXSTR initial size</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IWXSTR_AUNIT</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IWXSTR_AUNIT</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>_IWXSTR</name> <block>{
  <decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>     <comment type="block" format="doxygen">/**&lt; Data buffer */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>    <comment type="block" format="doxygen">/**&lt; Actual data size */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>asize</name></decl>;</decl_stmt>   <comment type="block" format="doxygen">/**&lt; Allocated buffer size */</comment>
  <function_decl><type><name>void</name></type>   (<modifier>*</modifier><name>user_data_free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name>  <modifier>*</modifier></type><name>user_data</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>IWXSTR</name><modifier>*</modifier></type> <name>iwxstr_new2</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>siz</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>siz</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>siz</name> <operator>=</operator> <name>IWXSTR_AUNIT</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>xstr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>xstr</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>siz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>user_data_free_fn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>asize</name></name> <operator>=</operator> <name>siz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <return>return <expr><name>xstr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IWXSTR</name><modifier>*</modifier></type> <name>iwxstr_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>iwxstr_new2</name><argument_list>(<argument><expr><name>IWXSTR_AUNIT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>IWXSTR</name><modifier>*</modifier></type> <name>iwxstr_new_clone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>user_data_free_fn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>xstr</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>asize</name></name> <operator>=</operator> <name><name>xstr</name><operator>-&gt;</operator><name>asize</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>xstr</name><operator>-&gt;</operator><name>asize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ret</name><operator>-&gt;</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>xstr</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ret</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>xstr</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IWXSTR</name><modifier>*</modifier></type> <name>iwxstr_wrap</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>asize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>xstr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>xstr</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>user_data_free_fn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>asize</name></name> <operator>=</operator> <name>asize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <name>asize</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>asize</name></name> <operator>=</operator> <name>size</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <return>return <expr><name>xstr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwxstr_destroy</name><parameter_list>(<parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>xstr</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>xstr</name><operator>-&gt;</operator><name>user_data_free_fn</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>xstr</name><operator>-&gt;</operator><name>user_data_free_fn</name></name><argument_list>(<argument><expr><name><name>xstr</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>iwxstr_destroy_keep_ptr</name><parameter_list>(<parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>xstr</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>xstr</name><operator>-&gt;</operator><name>user_data_free_fn</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>xstr</name><operator>-&gt;</operator><name>user_data_free_fn</name></name><argument_list>(<argument><expr><name><name>xstr</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwxstr_clear</name><parameter_list>(<parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwxstr_cat</name><parameter_list>(<parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>nsize</name> <init>= <expr><name><name>xstr</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>xstr</name><operator>-&gt;</operator><name>asize</name></name> <operator>&lt;</operator> <name>nsize</name></expr>)</condition> <block>{<block_content>
    <while>while <condition>(<expr><name><name>xstr</name><operator>-&gt;</operator><name>asize</name></name> <operator>&lt;</operator> <name>nsize</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>asize</name></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>xstr</name><operator>-&gt;</operator><name>asize</name></name> <operator>&lt;</operator> <name>nsize</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>asize</name></name> <operator>=</operator> <name>nsize</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>xstr</name><operator>-&gt;</operator><name>asize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>IW_ERROR_ALLOC</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name></name> <operator>+</operator> <name><name>xstr</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name><name>xstr</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <return>return <expr><name>IW_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwxstr_set_size</name><parameter_list>(<parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>nsize</name> <init>= <expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>xstr</name><operator>-&gt;</operator><name>asize</name></name> <operator>&lt;</operator> <name>nsize</name></expr>)</condition> <block>{<block_content>
    <while>while <condition>(<expr><name><name>xstr</name><operator>-&gt;</operator><name>asize</name></name> <operator>&lt;</operator> <name>nsize</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>asize</name></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>xstr</name><operator>-&gt;</operator><name>asize</name></name> <operator>&lt;</operator> <name>nsize</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>asize</name></name> <operator>=</operator> <name>nsize</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>xstr</name><operator>-&gt;</operator><name>asize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>IW_ERROR_ALLOC</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
  <return>return <expr><name>IW_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwxstr_cat2</name><parameter_list>(<parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><ternary><condition><expr><name>buf</name></expr> ?</condition><then> <expr><call><name>iwxstr_cat</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwxstr_unshift</name><parameter_list>(<parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>nsize</name> <init>= <expr><name><name>xstr</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>xstr</name><operator>-&gt;</operator><name>asize</name></name> <operator>&lt;</operator> <name>nsize</name></expr>)</condition> <block>{<block_content>
    <while>while <condition>(<expr><name><name>xstr</name><operator>-&gt;</operator><name>asize</name></name> <operator>&lt;</operator> <name>nsize</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>asize</name></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>xstr</name><operator>-&gt;</operator><name>asize</name></name> <operator>&lt;</operator> <name>nsize</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>asize</name></name> <operator>=</operator> <name>nsize</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>xstr</name><operator>-&gt;</operator><name>asize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>IW_ERROR_ALLOC</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>xstr</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// shift to right</comment>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name></name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>xstr</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name><name>xstr</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <return>return <expr><name>IW_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwxstr_shift</name><parameter_list>(<parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>shift_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>shift_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>shift_size</name> <operator>&gt;</operator> <name><name>xstr</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>shift_size</name> <operator>=</operator> <name><name>xstr</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>xstr</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>shift_size</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name></name> <operator>+</operator> <name>shift_size</name></expr></argument>, <argument><expr><name><name>xstr</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>shift_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <name>shift_size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name><name>xstr</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwxstr_pop</name><parameter_list>(<parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pop_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pop_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>pop_size</name> <operator>&gt;</operator> <name><name>xstr</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pop_size</name> <operator>=</operator> <name><name>xstr</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <name>pop_size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name><name>xstr</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwxstr_insert</name><parameter_list>(<parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;</operator> <name><name>xstr</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_OUT_OF_BOUNDS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>nsize</name> <init>= <expr><name><name>xstr</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>xstr</name><operator>-&gt;</operator><name>asize</name></name> <operator>&lt;</operator> <name>nsize</name></expr>)</condition> <block>{<block_content>
    <while>while <condition>(<expr><name><name>xstr</name><operator>-&gt;</operator><name>asize</name></name> <operator>&lt;</operator> <name>nsize</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>asize</name></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>xstr</name><operator>-&gt;</operator><name>asize</name></name> <operator>&lt;</operator> <name>nsize</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>asize</name></name> <operator>=</operator> <name>nsize</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>xstr</name><operator>-&gt;</operator><name>asize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>IW_ERROR_ALLOC</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name></name> <operator>+</operator> <name>pos</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name></name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name><name>xstr</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> <comment type="block">/* \0 */</comment>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name></name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
  <return>return <expr><name>IW_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwxstr_insert_vaprintf</name><parameter_list>(<parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>va</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>va_list</name></type> <name>cva</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>cva</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name>wp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>cva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_FAIL</name></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwxstr_insert</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>cva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>buf</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwxstr_insert_printf</name><parameter_list>(<parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwxstr_insert_vaprintf</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwxstr_vaprintf</name><parameter_list>(<parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>va</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>va_list</name></type> <name>cva</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>cva</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name>wp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>cva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_FAIL</name></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwxstr_cat</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>cva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>buf</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwxstr_printf</name><parameter_list>(<parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwxstr_vaprintf</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IWXSTR</name><modifier>*</modifier></type> <name>iwxstr_new_printf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>xstr</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwxstr_vaprintf</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>xstr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>iwxstr_ptr</name><parameter_list>(<parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>xstr</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>iwxstr_size</name><parameter_list>(<parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>xstr</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>iwxstr_asize</name><parameter_list>(<parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>xstr</name><operator>-&gt;</operator><name>asize</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwxstr_user_data_set</name><parameter_list>(<parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>xstr</name><operator>-&gt;</operator><name>user_data_free_fn</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>xstr</name><operator>-&gt;</operator><name>user_data_free_fn</name></name><argument_list>(<argument><expr><name><name>xstr</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>user_data_free_fn</name></name> <operator>=</operator> <name>free_fn</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>iwxstr_user_data_get</name><parameter_list>(<parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>xstr</name><operator>-&gt;</operator><name>user_data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>iwxstr_user_data_detach</name><parameter_list>(<parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>xstr</name><operator>-&gt;</operator><name>user_data_free_fn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name><name>xstr</name><operator>-&gt;</operator><name>user_data</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
