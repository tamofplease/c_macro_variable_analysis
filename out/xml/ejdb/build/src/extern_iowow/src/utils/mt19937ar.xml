<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iowow/src/utils/mt19937ar.c"><comment type="block">/*
   A C-program for MT19937, with initialization improved 2002/1/26.
   Coded by Takuji Nishimura and Makoto Matsumoto.

   Before using, initialize the state by using init_genrand(seed)
   or init_by_array(init_key, key_length).

   Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
   All rights reserved.
   Copyright (C) 2005, Mutsuo Saito,
   All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:

     1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

     2. Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

     3. The names of its contributors may not be used to endorse or promote
        products derived from this software without specific prior written
        permission.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


   Any feedback is very welcome.
   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
   email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mt19937ar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread_spin_lock_shim.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Period parameters */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro>          <cpp:value>624</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro>          <cpp:value>397</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATRIX_A</name></cpp:macro>   <cpp:value>0x9908b0dfUL</cpp:value></cpp:define> <comment type="block">/* constant vector a */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPPER_MASK</name></cpp:macro> <cpp:value>0x80000000UL</cpp:value></cpp:define> <comment type="block">/* most significant w-r bits */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOWER_MASK</name></cpp:macro> <cpp:value>0x7fffffffUL</cpp:value></cpp:define> <comment type="block">/* least significant r bits */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name><name>mt</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt> <comment type="block">/* the array for the state vector  */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mti</name> <init>= <expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>     <comment type="block">/* mti==N+1 means mt[N] is not initialized */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_spinlock_t</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>mt_initialized</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>init_mt19937ar</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mt_initialized</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return;</return>  <comment type="line">// initialized already</comment>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>pthread_spin_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>__attribute__</name><argument_list>(<argument>(constructor)</argument>)</argument_list></macro>

<function><type><name>void</name></type> <name>lock_constructor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>init_mt19937ar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>__attribute__</name><argument_list>(<argument>(destructor)</argument>)</argument_list></macro>

<function><type><name>void</name></type> <name>lock_destructor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mt_initialized</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return;</return>  <comment type="line">// initialized already</comment>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>pthread_spin_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>init_genrand_impl</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>mt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>s</name> <operator>&amp;</operator> <literal type="number">0xffffffffUL</literal></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>mti</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>mti</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>mti</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>mt</name><index>[<expr><name>mti</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1812433253UL</literal> <operator>*</operator> <operator>(</operator><name><name>mt</name><index>[<expr><name>mti</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name><name>mt</name><index>[<expr><name>mti</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>mti</name><operator>)</operator></expr>;</expr_stmt>
    <comment type="block">/* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */</comment>
    <comment type="block">/* In the previous versions, MSBs of the seed affect   */</comment>
    <comment type="block">/* only MSBs of the array mt[].                        */</comment>
    <comment type="block">/* 2002/01/09 modified by Makoto Matsumoto             */</comment>
    <expr_stmt><expr><name><name>mt</name><index>[<expr><name>mti</name></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xffffffffUL</literal></expr>;</expr_stmt>
    <comment type="block">/* for &gt;32 bit machines */</comment>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* initializes mt[N] with a seed */</comment>
<function><type><name>void</name></type> <name>init_genrand</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>pthread_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>init_genrand_impl</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* initialize by an array with array-length */</comment>

<comment type="block">/* init_key is the array for initializing keys */</comment>

<comment type="block">/* key_length is its length */</comment>

<comment type="block">/* slight change for C++, 2004/2/26 */</comment>
<function><type><name>void</name></type> <name>init_by_array</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name><name>init_key</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_length</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>pthread_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>init_genrand_impl</name><argument_list>(<argument><expr><literal type="number">19650218UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>N</name> <operator>&gt;</operator> <name>key_length</name></expr> ?</condition><then> <expr><name>N</name></expr> </then><else>: <expr><name>key_length</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
  <for>for <control>( <init>;</init> <condition><expr><name>k</name></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>mt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>mt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <operator>(</operator><operator>(</operator><name><name>mt</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name><name>mt</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">1664525UL</literal><operator>)</operator><operator>)</operator>
            <operator>+</operator> <name><name>init_key</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>j</name></expr>;</expr_stmt> <comment type="block">/* non linear */</comment>
    <expr_stmt><expr><name><name>mt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xffffffffUL</literal></expr>;</expr_stmt>     <comment type="block">/* for WORDSIZE &gt; 32 machines */</comment>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>N</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>mt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mt</name><index>[<expr><name>N</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>key_length</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>N</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>mt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>mt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <operator>(</operator><operator>(</operator><name><name>mt</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name><name>mt</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">1566083941UL</literal><operator>)</operator><operator>)</operator>
            <operator>-</operator> <name>i</name></expr>;</expr_stmt>           <comment type="block">/* non linear */</comment>
    <expr_stmt><expr><name><name>mt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xffffffffUL</literal></expr>;</expr_stmt> <comment type="block">/* for WORDSIZE &gt; 32 machines */</comment>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>N</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>mt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mt</name><index>[<expr><name>N</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>mt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80000000UL</literal></expr>;</expr_stmt> <comment type="block">/* MSB is 1; assuring non-zero initial array */</comment>
  <expr_stmt><expr><call><name>pthread_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* generates a random number on [0,0xffffffff]-interval */</comment>
<function><type><name>unsigned</name> <name>long</name></type> <name>genrand_int32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>pthread_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>y</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name><name>mag01</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x0UL</literal></expr>, <expr><name>MATRIX_A</name></expr> }</block></expr></init></decl>;</decl_stmt>
  <comment type="block">/* mag01[x] = x * MATRIX_A  for x=0,1 */</comment>

  <if_stmt><if>if <condition>(<expr><name>mti</name> <operator>&gt;=</operator> <name>N</name></expr>)</condition> <block>{<block_content> <comment type="block">/* generate N words at one time */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>kk</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>mti</name> <operator>==</operator> <name>N</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>          <comment type="block">/* if init_genrand() has not been called, */</comment>
      <expr_stmt><expr><call><name>init_genrand_impl</name><argument_list>(<argument><expr><literal type="number">5489UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* a default initial seed is used */</comment>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><expr><name>kk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>kk</name> <operator>&lt;</operator> <name>N</name> <operator>-</operator> <name>M</name></expr>;</condition> <incr><expr><name>kk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name><name>mt</name><index>[<expr><name>kk</name></expr>]</index></name> <operator>&amp;</operator> <name>UPPER_MASK</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>mt</name><index>[<expr><name>kk</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>LOWER_MASK</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>mt</name><index>[<expr><name>kk</name></expr>]</index></name> <operator>=</operator> <name><name>mt</name><index>[<expr><name>kk</name> <operator>+</operator> <name>M</name></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name><name>mag01</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">0x1UL</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>( <init>;</init> <condition><expr><name>kk</name> <operator>&lt;</operator> <name>N</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>kk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name><name>mt</name><index>[<expr><name>kk</name></expr>]</index></name> <operator>&amp;</operator> <name>UPPER_MASK</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>mt</name><index>[<expr><name>kk</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>LOWER_MASK</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>mt</name><index>[<expr><name>kk</name></expr>]</index></name> <operator>=</operator> <name><name>mt</name><index>[<expr><name>kk</name> <operator>+</operator> <operator>(</operator><name>M</name> <operator>-</operator> <name>N</name><operator>)</operator></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name><name>mag01</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">0x1UL</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name><name>mt</name><index>[<expr><name>N</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>UPPER_MASK</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>mt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>LOWER_MASK</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mt</name><index>[<expr><name>N</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mt</name><index>[<expr><name>M</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name><name>mag01</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">0x1UL</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>mti</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>mt</name><index>[<expr><name>mti</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

  <comment type="block">/* Tempering */</comment>
  <expr_stmt><expr><name>y</name> <operator>^=</operator> <operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>y</name> <operator>^=</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x9d2c5680UL</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>y</name> <operator>^=</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xefc60000UL</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>y</name> <operator>^=</operator> <operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>y</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* generates a random number on [0,0x7fffffff]-interval */</comment>
<function><type><name>long</name></type> <name>genrand_int31</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><call><name>genrand_int32</name><argument_list>()</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* generates a random number on [0,1]-real-interval */</comment>
<function><type><name>double</name></type> <name>genrand_real1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>genrand_int32</name><argument_list>()</argument_list></call> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">4294967295.0</literal><operator>)</operator></expr>;</return>
  <comment type="block">/* divided by 2^32-1 */</comment>
</block_content>}</block></function>

<comment type="block">/* generates a random number on [0,1)-real-interval */</comment>
<function><type><name>double</name></type> <name>genrand_real2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>genrand_int32</name><argument_list>()</argument_list></call> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">4294967296.0</literal><operator>)</operator></expr>;</return>
  <comment type="block">/* divided by 2^32 */</comment>
</block_content>}</block></function>

<comment type="block">/* generates a random number on (0,1)-real-interval */</comment>
<function><type><name>double</name></type> <name>genrand_real3</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <call><name>genrand_int32</name><argument_list>()</argument_list></call><operator>)</operator> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">4294967296.0</literal><operator>)</operator></expr>;</return>
  <comment type="block">/* divided by 2^32 */</comment>
</block_content>}</block></function>

<comment type="block">/* generates a random number on [0,1) with 53-bit resolution*/</comment>
<function><type><name>double</name></type> <name>genrand_res53</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>a</name> <init>= <expr><call><name>genrand_int32</name><argument_list>()</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><call><name>genrand_int32</name><argument_list>()</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><name>a</name> <operator>*</operator> <literal type="number">67108864.0</literal> <operator>+</operator> <name>b</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">9007199254740992.0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* These real versions are due to Isaku Wada, 2002/01/09 added */</comment>
</unit>
