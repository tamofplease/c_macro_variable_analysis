<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iowow/src/utils/iwini.c"><comment type="block">/* inih -- simple .INI file parser

   SPDX-License-Identifier: BSD-3-Clause

   Copyright (C) 2009-2020, Ben Hoyt

   inih is released under the New BSD license (see LICENSE.txt). Go to the project
   home page for more info:

   https://github.com/benhoyt/inih

 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_CRT_SECURE_NO_WARNINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRT_SECURE_NO_WARNINGS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwini.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>IWINI_USE_STACK</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>IWINI_CUSTOM_ALLOCATOR</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<function_decl><type><name>void</name><modifier>*</modifier></type> <name>iwini_malloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>iwini_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name><modifier>*</modifier></type> <name>iwini_realloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iwini_malloc</name></cpp:macro>  <cpp:value>malloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iwini_free</name></cpp:macro>    <cpp:value>free</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iwini_realloc</name></cpp:macro> <cpp:value>realloc</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SECTION</name></cpp:macro> <cpp:value>127</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_NAME</name></cpp:macro>    <cpp:value>127</cpp:value></cpp:define>

<comment type="block">/* Used by ini_parse_string() to keep track of string parsing state. */</comment>
<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>      <name>num_left</name></decl>;</decl_stmt>
}</block></struct></type> <name>ini_parse_string_ctx</name>;</typedef>

<comment type="block">/* Strip whitespace chars off end of given string, in place. Return s. */</comment>
<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>rstrip</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>s</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>s</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><operator>*</operator><operator>--</operator><name>p</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return pointer to first non-whitespace char in given string. */</comment>
<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>lskip</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>s</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return pointer to first char (of chars) or inline comment in given string,
   or pointer to NUL at end of string if neither found. Inline comment must
   be prefixed by a whitespace character to register as a comment. */</comment>
<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>find_chars_or_comment</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>chars</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>IWINI_ALLOW_INLINE_COMMENTS</name></expr></cpp:if>
  <decl_stmt><decl><type><name>int</name></type> <name>was_space</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(  <expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>chars</name> <operator>||</operator> <operator>!</operator><call><name>strchr</name><argument_list>(<argument><expr><name>chars</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call><operator>)</operator>
        <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>was_space</name> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>IWINI_INLINE_COMMENT_PREFIXES</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>was_space</name> <operator>=</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>chars</name> <operator>||</operator> <operator>!</operator><call><name>strchr</name><argument_list>(<argument><expr><name>chars</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>s</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Similar to strncpy, but ensures dest (size bytes) is
   NUL-terminated, and doesn't pad with NULs. */</comment>
<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>strncpy0</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/* Could use strncpy internally, but it causes gcc warnings (see issue #91) */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <return>return <expr><name>dest</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* See documentation in header file. */</comment>
<function><type><name>int</name></type> <name>iwini_parse_stream</name><parameter_list>(
  <parameter><decl><type><name>iwini_reader</name></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>iwini_handler</name></type> <name>handler</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <comment type="block">/* Uses a fair bit of stack (use heap instead if you need to) */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>IWINI_USE_STACK</name></expr></cpp:if>
  <decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><name>IWINI_MAX_LINE</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>max_line</name> <init>= <expr><name>IWINI_MAX_LINE</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>max_line</name> <init>= <expr><name>IWINI_INITIAL_ALLOC</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>IWINI_ALLOW_REALLOC</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>IWINI_USE_STACK</name></expr></cpp:if>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_line</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>offset</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>char</name></type> <name><name>section</name><index>[<expr><name>MAX_SECTION</name></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>prev_name</name><index>[<expr><name>MAX_NAME</name></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>lineno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>IWINI_USE_STACK</name></expr></cpp:if>
  <expr_stmt><expr><name>line</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>iwini_malloc</name><argument_list>(<argument><expr><name>IWINI_INITIAL_ALLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>line</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>IWINI_HANDLER_LINENO</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLER</name><parameter_list>(<parameter><type><name>u</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>handler(u, s, n, v, lineno)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLER</name><parameter_list>(<parameter><type><name>u</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>handler(u, s, n, v)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Scan through stream line by line */</comment>
  <while>while <condition>(<expr><call><name>reader</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>max_line</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>IWINI_ALLOW_REALLOC</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>IWINI_USE_STACK</name></expr></cpp:if>
    <expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>offset</name> <operator>==</operator> <name>max_line</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>offset</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>max_line</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>max_line</name> <operator>&gt;</operator> <name>IWINI_MAX_LINE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>max_line</name> <operator>=</operator> <name>IWINI_MAX_LINE</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>new_line</name> <operator>=</operator> <call><name>iwini_realloc</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>max_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_line</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>iwini_free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>line</name> <operator>=</operator> <name>new_line</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>reader</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>max_line</name> <operator>-</operator> <name>offset</name><operator>)</operator></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>max_line</name> <operator>&gt;=</operator> <name>IWINI_MAX_LINE</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>lineno</name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>start</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>IWINI_ALLOW_BOM</name></expr></cpp:if>
    <if_stmt><if>if <condition>(  <expr><operator>(</operator><name>lineno</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xEF</literal><operator>)</operator>
       <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>start</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xBB</literal><operator>)</operator>
       <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>start</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xBF</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>start</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>lskip</name><argument_list>(<argument><expr><call><name>rstrip</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>IWINI_START_COMMENT_PREFIXES</name></expr></argument>, <argument><expr><operator>*</operator><name>start</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="block">/* Start-of-line comment */</comment>
    </block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>IWINI_ALLOW_MULTILINE</name></expr></cpp:if>
    <if type="elseif">else if <condition>(<expr><operator>*</operator><name>prev_name</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>start</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>start</name> <operator>&gt;</operator> <name>line</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <comment type="block">/* Non-blank line with leading whitespace, treat as continuation
         of previous name's value (as per Python configparser). */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HANDLER</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>prev_name</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>error</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <name>lineno</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if type="elseif">else if <condition>(<expr><operator>*</operator><name>start</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
      <comment type="block">/* A "[section]" line */</comment>
      <expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>find_chars_or_comment</name><argument_list>(<argument><expr><name>start</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strncpy0</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>prev_name</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>IWINI_CALL_HANDLER_ON_NEW_SECTION</name></expr></cpp:if>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HANDLER</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>error</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>error</name> <operator>=</operator> <name>lineno</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>error</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* No ']' found on section line */</comment>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <name>lineno</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>start</name></expr>)</condition> <block>{<block_content>
      <comment type="block">/* Not a comment, must be a name[=:]value pair */</comment>
      <expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>find_chars_or_comment</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="string">"=:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">'='</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">':'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>rstrip</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <name>end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>IWINI_ALLOW_INLINE_COMMENTS</name></expr></cpp:if>
        <expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>find_chars_or_comment</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>lskip</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>rstrip</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Valid name[=:]value pair found, call handler */</comment>
        <expr_stmt><expr><call><name>strncpy0</name><argument_list>(<argument><expr><name>prev_name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>prev_name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HANDLER</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>error</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>error</name> <operator>=</operator> <name>lineno</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>error</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* No '=' or ':' found on name[=:]value line */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>IWINI_ALLOW_NO_VALUE</name></expr></cpp:if>
        <expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>rstrip</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HANDLER</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>error</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>error</name> <operator>=</operator> <name>lineno</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <name>lineno</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>IWINI_STOP_ON_FIRST_ERROR</name></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>IWINI_USE_STACK</name></expr></cpp:if>
  <expr_stmt><expr><call><name>iwini_free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* See documentation in header file. */</comment>
<function><type><name>int</name></type> <name>iwini_parse_file</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>iwini_handler</name></type> <name>handler</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>iwini_parse_stream</name><argument_list>(<argument><expr><operator>(</operator><name>iwini_reader</name><operator>)</operator> <name>fgets</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* See documentation in header file. */</comment>
<function><type><name>int</name></type> <name>iwini_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>iwini_handler</name></type> <name>handler</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>iwini_parse_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* An ini_reader function to read the next line from a string buffer. This
   is the fgets() equivalent used by ini_parse_string(). */</comment>
<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>ini_reader_string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>ini_parse_string_ctx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>ini_parse_string_ctx</name><operator>*</operator><operator>)</operator> <name>stream</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ctx_ptr</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>ctx_num_left</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>num_left</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>strp</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ctx_num_left</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>ctx_num_left</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>ctx_ptr</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>ctx_num_left</name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>strp</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>num</name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><operator>*</operator><name>strp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ctx_ptr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_left</name></name> <operator>=</operator> <name>ctx_num_left</name></expr>;</expr_stmt>
  <return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* See documentation in header file. */</comment>
<function><type><name>int</name></type> <name>iwini_parse_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>iwini_handler</name></type> <name>handler</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>ini_parse_string_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>string</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>num_left</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>iwini_parse_stream</name><argument_list>(<argument><expr><operator>(</operator><name>iwini_reader</name><operator>)</operator> <name>ini_reader_string</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>,
                            <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
