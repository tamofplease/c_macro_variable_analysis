<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iowow/src/log/iwlog.c"><comment type="line">//</comment>
<comment type="block" format="doxygen">/**************************************************************************************************
 * IOWOW library
 *
 * MIT License
 *
 * Copyright (c) 2012-2022 Softmotions Ltd &lt;info@softmotions.com&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *************************************************************************************************/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwcfg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__ANDROID__</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IW_ANDROID_LOG</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;android/log.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// __ANDROID__</comment>

<function_decl><type><specifier>static</specifier> <name>iwrc</name></type> <name>_default_logfn</name><parameter_list>(
  <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>locale_t</name></type> <name>locale</name></decl></parameter>, <parameter><decl><type><name>iwlog_lvl</name></type> <name>lvl</name></decl></parameter>, <parameter><decl><type><name>iwrc</name></type> <name>ecode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errno_code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>werror_code</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
  <parameter><decl><type><name>va_list</name></type> <name>argp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>no_va</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_ecode_explained</name><parameter_list>(<parameter><decl><type><name>locale_t</name></type> <name>locale</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ecode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_default_ecodefn</name><parameter_list>(<parameter><decl><type><name>locale_t</name></type> <name>locale</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ecode</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>_mtx</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>IWLOG_FN</name></type> <name>_current_logfn</name> <init>= <expr><name>_default_logfn</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>_current_logfn_options</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_IWLOG_MAX_ECODE_FUN</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>IWLOG_ECODE_FN</name></type> <name><name>_ecode_functions</name><index>[<expr><name>_IWLOG_MAX_ECODE_FUN</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><name>iwrc</name></type> <name>iwlog</name><parameter_list>(<parameter><decl><type><name>iwlog_lvl</name></type> <name>lvl</name></decl></parameter>, <parameter><decl><type><name>iwrc</name></type> <name>ecode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>argp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwlog_va</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>lvl</name></expr></argument>, <argument><expr><name>ecode</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>argp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>argp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwlog2</name><parameter_list>(<parameter><decl><type><name>iwlog_lvl</name></type> <name>lvl</name></decl></parameter>, <parameter><decl><type><name>iwrc</name></type> <name>ecode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>argp</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwlog_va</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>lvl</name></expr></argument>, <argument><expr><name>ecode</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>argp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>argp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwlog3</name><parameter_list>(<parameter><decl><type><name>iwlog_lvl</name></type> <name>lvl</name></decl></parameter>, <parameter><decl><type><name>iwrc</name></type> <name>ecode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>argp</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>iwlog_va</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>lvl</name></expr></argument>, <argument><expr><name>ecode</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>argp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwlog_va</name><parameter_list>(
  <parameter><decl><type><name>FILE</name>       <modifier>*</modifier></type><name>out</name></decl></parameter>,
  <parameter><decl><type><name>iwlog_lvl</name></type>   <name>lvl</name></decl></parameter>,
  <parameter><decl><type><name>iwrc</name></type>        <name>ecode</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type>         <name>line</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
  <parameter><decl><type><name>va_list</name></type>     <name>argp</name></decl></parameter>,
  <parameter><decl><type><name>bool</name></type>        <name>no_va</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>_current_logfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
  <decl_stmt><decl><type><name>int</name></type> <name>werror_code</name> <init>= <expr><call><name>iwrc_strip_werror</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ecode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>locale_t</name></type> <name>locale</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>int</name></type> <name>werror_code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>locale_t</name></type> <name>locale</name> <init>= <expr><call><name>uselocale</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>int</name></type> <name>errno_code</name> <init>= <expr><call><name>iwrc_strip_errno</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ecode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>ts</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwp_current_time_ms</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>IWLOG_FN</name></type> <name>logfn</name> <init>= <expr><name>_current_logfn</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><name>_current_logfn_options</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>logfn</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>, <argument><expr><name>lvl</name></expr></argument>, <argument><expr><name>ecode</name></expr></argument>, <argument><expr><name>errno_code</name></expr></argument>, <argument><expr><name>werror_code</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>argp</name></expr></argument>, <argument><expr><name>no_va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <macro><name>fprintf</name><argument_list>(<argument>stderr</argument>, <argument><literal type="string">"Logging function returned with error: %"</literal> PRIu64 IW_LINE_SEP</argument>, <argument>rc</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_IWLOG_ERRNO_RC_MASK</name></cpp:macro> <cpp:value>0x01U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_IWLOG_WERR_EC_MASK</name></cpp:macro>  <cpp:value>0x02U</cpp:value></cpp:define>

<function><type><name>iwrc</name></type> <name>iwrc_set_errno</name><parameter_list>(<parameter><decl><type><name>iwrc</name></type> <name>rc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errno_code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>errno_code</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>ret</name> <init>= <expr><name>_IWLOG_ERRNO_RC_MASK</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ret</name> <operator>&lt;&lt;=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name>errno_code</name> <operator>&amp;</operator> <literal type="number">0x3fffffffU</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>&lt;&lt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name>rc</name></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>iwrc_strip_errno</name><parameter_list>(<parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>rcv</name> <init>= <expr><operator>*</operator><name>rc</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>rcv</name> <operator>&gt;&gt;</operator> <literal type="number">62</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03U</literal><operator>)</operator> <operator>!=</operator> <name>_IWLOG_ERRNO_RC_MASK</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>rc</name> <operator>=</operator> <name>rcv</name> <operator>&amp;</operator> <literal type="number">0x00000000ffffffffULL</literal></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><name>rcv</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3fffffffU</literal></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>

<function><type><name>iwrc</name></type> <name>iwrc_set_werror</name><parameter_list>(<parameter><decl><type><name>iwrc</name></type> <name>rc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>werror</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>werror</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>ret</name> <init>= <expr><name>_IWLOG_WERR_EC_MASK</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ret</name> <operator>&lt;&lt;=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name>werror</name> <operator>&amp;</operator> <literal type="number">0x3fffffffU</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>&lt;&lt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name>rc</name></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>iwrc_strip_werror</name><parameter_list>(<parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>rcv</name> <init>= <expr><operator>*</operator><name>rc</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>rcv</name> <operator>&gt;&gt;</operator> <literal type="number">62</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03U</literal><operator>)</operator> <operator>!=</operator> <name>_IWLOG_WERR_EC_MASK</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>rc</name> <operator>=</operator> <name>rcv</name> <operator>&amp;</operator> <literal type="number">0x00000000ffffffffULL</literal></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><name>rcv</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3fffffffU</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>iwrc_strip_code</name><parameter_list>(<parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>rc</name> <operator>=</operator> <operator>*</operator><name>rc</name> <operator>&amp;</operator> <literal type="number">0x00000000ffffffffULL</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwlog_set_logfn</name><parameter_list>(<parameter><decl><type><name>IWLOG_FN</name></type> <name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>_current_logfn</name> <operator>=</operator> <name>_default_logfn</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>_current_logfn</name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>_current_logfn_options</name> <operator>=</operator> <name>opts</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>IWLOG_FN</name></type> <name>iwlog_get_logfn</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>_current_logfn</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>iwlog_ecode_explained</name><parameter_list>(<parameter><decl><type><name>iwrc</name></type> <name>ecode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>iwrc_strip_errno</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>_ecode_explained</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwlog_register_ecodefn</name><parameter_list>(<parameter><decl><type><name>IWLOG_ECODE_FN</name></type> <name>fp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>success</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>_IWLOG_MAX_ECODE_FUN</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>_ecode_functions</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>_ecode_functions</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>success</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>IW_ERROR_FAIL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwlog_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_iwlog_initialized</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_iwlog_initialized</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="line">// initialized already</comment>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwlog_register_ecodefn</name><argument_list>(<argument><expr><name>_default_ecodefn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////////////////////////</comment>

<comment type="line">// Assumed:</comment>
<comment type="line">//   1. `_mtx` is locked.</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_ecode_explained</name><parameter_list>(<parameter><decl><type><name>locale_t</name></type> <name>locale</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ecode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>_IWLOG_MAX_ECODE_FUN</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>_ecode_functions</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>_ecode_functions</name><index>[<expr><name>i</name></expr>]</index></name><operator>(</operator><name>locale</name><operator>,</operator> <name>ecode</name><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_default_ecodefn</name><parameter_list>(<parameter><decl><type><name>locale_t</name></type> <name>locale</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ecode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>ecode</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>IW_ERROR_FAIL</name></expr>:</case>
      <return>return <expr><literal type="string">"Unspecified error. (IW_ERROR_FAIL)"</literal></expr>;</return>
    <case>case <expr><name>IW_ERROR_ERRNO</name></expr>:</case>
      <return>return <expr><literal type="string">"Error with expected errno status set. (IW_ERROR_ERRNO)"</literal></expr>;</return>
    <case>case <expr><name>IW_ERROR_IO_ERRNO</name></expr>:</case>
      <return>return <expr><literal type="string">"IO error with expected errno status set. (IW_ERROR_IO_ERRNO)"</literal></expr>;</return>
    <case>case <expr><name>IW_ERROR_NOT_EXISTS</name></expr>:</case>
      <return>return <expr><literal type="string">"Resource is not exists. (IW_ERROR_NOT_EXISTS)"</literal></expr>;</return>
    <case>case <expr><name>IW_ERROR_READONLY</name></expr>:</case>
      <return>return <expr><literal type="string">"Resource is readonly. (IW_ERROR_READONLY)"</literal></expr>;</return>
    <case>case <expr><name>IW_ERROR_ALREADY_OPENED</name></expr>:</case>
      <return>return <expr><literal type="string">"Resource is already opened. (IW_ERROR_ALREADY_OPENED)"</literal></expr>;</return>
    <case>case <expr><name>IW_ERROR_THREADING</name></expr>:</case>
      <return>return <expr><literal type="string">"Threading error. (IW_ERROR_THREADING)"</literal></expr>;</return>
    <case>case <expr><name>IW_ERROR_THREADING_ERRNO</name></expr>:</case>
      <return>return <expr><literal type="string">"Threading error with errno status set. "</literal>
             <literal type="string">"(IW_ERROR_THREADING_ERRNO)"</literal></expr>;</return>
    <case>case <expr><name>IW_ERROR_ASSERTION</name></expr>:</case>
      <return>return <expr><literal type="string">"Generic assertion error. (IW_ERROR_ASSERTION)"</literal></expr>;</return>
    <case>case <expr><name>IW_ERROR_INVALID_HANDLE</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid HANDLE value. (IW_ERROR_INVALID_HANDLE)"</literal></expr>;</return>
    <case>case <expr><name>IW_ERROR_OUT_OF_BOUNDS</name></expr>:</case>
      <return>return <expr><literal type="string">"Argument/parameter/value is out of bounds. "</literal>
             <literal type="string">"(IW_ERROR_OUT_OF_BOUNDS)"</literal></expr>;</return>
    <case>case <expr><name>IW_ERROR_NOT_IMPLEMENTED</name></expr>:</case>
      <return>return <expr><literal type="string">"Method is not implemented. (IW_ERROR_NOT_IMPLEMENTED)"</literal></expr>;</return>
    <case>case <expr><name>IW_ERROR_ALLOC</name></expr>:</case>
      <return>return <expr><literal type="string">"Memory allocation failed. (IW_ERROR_ALLOC)"</literal></expr>;</return>
    <case>case <expr><name>IW_ERROR_INVALID_STATE</name></expr>:</case>
      <return>return <expr><literal type="string">"Illegal state error. (IW_ERROR_INVALID_STATE)"</literal></expr>;</return>
    <case>case <expr><name>IW_ERROR_NOT_ALIGNED</name></expr>:</case>
      <return>return <expr><literal type="string">"Argument is not aligned properly. (IW_ERROR_NOT_ALIGNED)"</literal></expr>;</return>
    <case>case <expr><name>IW_ERROR_FALSE</name></expr>:</case>
      <return>return <expr><literal type="string">"False response/rejection. (IW_ERROR_FALSE)"</literal></expr>;</return>
    <case>case <expr><name>IW_ERROR_INVALID_ARGS</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid function arguments. (IW_ERROR_INVALID_ARGS)"</literal></expr>;</return>
    <case>case <expr><name>IW_ERROR_OVERFLOW</name></expr>:</case>
      <return>return <expr><literal type="string">"Overflow. (IW_ERROR_OVERFLOW)"</literal></expr>;</return>
    <case>case <expr><name>IW_ERROR_INVALID_VALUE</name></expr>:</case>
      <return>return <expr><literal type="string">" Invalid value. (IW_ERROR_INVALID_VALUE)"</literal></expr>;</return>
    <case>case <expr><name>IW_ERROR_UNEXPECTED_RESPONSE</name></expr>:</case>
      <return>return <expr><literal type="string">"Unexpected response. (IW_ERROR_UNEXPECTED_RESPONSE)"</literal></expr>;</return>
    <case>case <expr><name>IW_ERROR_NOT_ALLOWED</name></expr>:</case>
      <return>return <expr><literal type="string">"Action is not allowed. (IW_ERROR_NOT_ALLOWED)"</literal></expr>;</return>
    <case>case <expr><name>IW_ERROR_UNSUPPORTED</name></expr>:</case>
      <return>return <expr><literal type="string">"Unsupported opration. (IW_ERROR_UNSUPPORTED)"</literal></expr>;</return>
    <case>case <expr><name>IW_ERROR_EOF</name></expr>:</case>
      <return>return <expr><literal type="string">"End of IO stream/file (IW_ERROR_EOF)"</literal></expr>;</return>
    <case>case <expr><name>IW_ERROR_UNEXPECTED_INPUT</name></expr>:</case>
      <return>return <expr><literal type="string">"Unexpected input/data (IW_ERROR_UNEXPECTED_INPUT)"</literal></expr>;</return>
    <case>case <expr><name>IW_ERROR_IO</name></expr>:</case>
      <return>return <expr><literal type="string">"IO error (IW_ERROR_IO)"</literal></expr>;</return>
    <case>case <expr><name>IW_ERROR_INVALID_CONFIG</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid configuration (IW_ERROR_INVALID_CONFIG)"</literal></expr>;</return>
    <case>case <expr><name>IW_OK</name></expr>:</case>
    <default>default:</default>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></switch>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_default_logfn</name><parameter_list>(
  <parameter><decl><type><name>FILE</name>       <modifier>*</modifier></type><name>out</name></decl></parameter>,
  <parameter><decl><type><name>locale_t</name></type>    <name>locale</name></decl></parameter>,
  <parameter><decl><type><name>iwlog_lvl</name></type>   <name>lvl</name></decl></parameter>,
  <parameter><decl><type><name>iwrc</name></type>        <name>ecode</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type>         <name>errno_code</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type>         <name>werror_code</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type>         <name>line</name></decl></parameter>,
  <parameter><decl><type><name>uint64_t</name></type>    <name>ts</name></decl></parameter>,
  <parameter><decl><type><name>void</name>       <modifier>*</modifier></type><name>opts</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
  <parameter><decl><type><name>va_list</name></type>     <name>argp</name></decl></parameter>,
  <parameter><decl><type><name>bool</name></type>        <name>no_va</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TBUF_SZ</name></cpp:macro> <cpp:value>96</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EBUF_SZ</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IW_ANDROID_LOG</name></cpp:ifndef>
  <decl_stmt><decl><type><name>time_t</name></type> <name>ts_sec</name> <init>= <expr><operator>(</operator><operator>(</operator><name>long</name> <name>double</name><operator>)</operator> <name>ts</name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>timeinfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>, <decl><type ref="prev"/><name>sz2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>tbuf</name><index>[<expr><name>TBUF_SZ</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cat</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name>char</name></type> <name><name>ebuf</name><index>[<expr><name>EBUF_SZ</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errno_msg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>werror_msg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ecode_msg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>fnamebuf</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fnameptr</name> <init>= <expr><name>fnamebuf</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>opts</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>IWLOG_DEFAULT_OPTS</name><operator>*</operator><operator>)</operator> <name>opts</name><operator>)</operator><operator>-&gt;</operator><name>out</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>errno_code</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><call><name>strerror_s</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><name>EBUF_SZ</name></expr></argument>, <argument><expr><name>errno_code</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rci</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>errno_msg</name> <operator>=</operator> <name>ebuf</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GLIBC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_GNU_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <expr_stmt><expr><name>errno_msg</name> <operator>=</operator> <call><name>strerror_r</name><argument_list>(<argument><expr><name>errno_code</name></expr></argument>, <argument><expr><name>ebuf</name></expr></argument>, <argument><expr><name>EBUF_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// NOLINT</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><call><name>strerror_r</name><argument_list>(<argument><expr><name>errno_code</name></expr></argument>, <argument><expr><name>ebuf</name></expr></argument>, <argument><expr><name>EBUF_SZ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rci</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>errno_msg</name> <operator>=</operator> <name>ebuf</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>werror_code</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>LPTSTR</name></type> <name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>ret</name> <init>= <expr><call><name>FormatMessage</name><argument_list>(<argument><expr><name>FORMAT_MESSAGE_ALLOCATE_BUFFER</name> <operator>|</operator> <name>FORMAT_MESSAGE_FROM_SYSTEM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>werror_code</name></expr></argument>,
                              <argument><expr><call><name>MAKELANGID</name><argument_list>(<argument><expr><name>LANG_ENGLISH</name></expr></argument>, <argument><expr><name>SUBLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>LPTSTR</name><operator>)</operator> <operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>msg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>werror_msg</name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IW_ANDROID_LOG</name></cpp:ifndef>
  <comment type="line">// cppcheck-suppress portability</comment>
  <expr_stmt><expr><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts_sec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>strftime</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>TBUF_SZ</name></expr></argument>, <argument><expr><literal type="string">"%d %b %H:%M:%S"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>tbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>TBUF_SZ</name> <operator>-</operator> <name>sz</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// .000 suffix</comment>
    <expr_stmt><expr><name><name>tbuf</name><index>[<expr><name>sz</name></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>sz2</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>tbuf</name> <operator>+</operator> <name>sz</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"%03d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>ts</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>sz2</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>tbuf</name><index>[<expr><name>sz</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>android_LogPriority</name></type> <name>alp</name> <init>= <expr><name>ANDROID_LOG_INFO</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// IW_ANDROID_LOG</comment>

  <switch>switch <condition>(<expr><name>lvl</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>IWLOG_DEBUG</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>IW_ANDROID_LOG</name></cpp:ifdef>
      <expr_stmt><expr><name>alp</name> <operator>=</operator> <name>ANDROID_LOG_DEBUG</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><name>cat</name> <operator>=</operator> <literal type="string">"DEBUG"</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <break>break;</break>

    <case>case <expr><name>IWLOG_INFO</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>IW_ANDROID_LOG</name></cpp:ifdef>
      <expr_stmt><expr><name>alp</name> <operator>=</operator> <name>ANDROID_LOG_INFO</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><name>cat</name> <operator>=</operator> <literal type="string">"INFO"</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <expr_stmt><expr><name>file</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>IWLOG_VERBOSE</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>IW_ANDROID_LOG</name></cpp:ifdef>
      <expr_stmt><expr><name>alp</name> <operator>=</operator> <name>ANDROID_LOG_INFO</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><name>cat</name> <operator>=</operator> <literal type="string">"VERBOSE"</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <expr_stmt><expr><name>file</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <break>break;</break>


    <case>case <expr><name>IWLOG_WARN</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>IW_ANDROID_LOG</name></cpp:ifdef>
      <expr_stmt><expr><name>alp</name> <operator>=</operator> <name>ANDROID_LOG_WARN</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><name>cat</name> <operator>=</operator> <literal type="string">"WARN"</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <break>break;</break>

    <case>case <expr><name>IWLOG_ERROR</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>IW_ANDROID_LOG</name></cpp:ifdef>
      <expr_stmt><expr><name>alp</name> <operator>=</operator> <name>ANDROID_LOG_ERROR</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><name>cat</name> <operator>=</operator> <literal type="string">"ERROR"</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <break>break;</break>

    <default>default:</default>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IW_ANDROID_LOG</name></cpp:ifndef>
      <expr_stmt><expr><name>cat</name> <operator>=</operator> <literal type="string">"UNKNOW"</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
  <if_stmt><if>if <condition>(<expr><name>ecode</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ecode_msg</name> <operator>=</operator> <call><name>_ecode_explained</name><argument_list>(<argument><expr><name>locale</name></expr></argument>, <argument><expr><name>ecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>file</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>line</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fnamebuf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>fnameptr</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>fnameptr</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>fnameptr</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name>fnameptr</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>iwp_basename</name><argument_list>(<argument><expr><name>fnameptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_mtx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_THREADING_ERRNO</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>IW_ANDROID_LOG</name></cpp:ifndef>

  <if_stmt><if>if <condition>(<expr><name>ecode</name> <operator>||</operator> <name>errno_code</name> <operator>||</operator> <name>werror_code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>fname</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>line</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%s %s %s:%d %"</literal> <name>PRIu64</name> <literal type="string">"|%d|%d|%s|%s|%s: "</literal></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>ecode</name></expr></argument>, <argument><expr><name>errno_code</name></expr></argument>,
              <argument><expr><name>werror_code</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>ecode_msg</name></expr> ?</condition><then> <expr><name>ecode_msg</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>errno_msg</name></expr> ?</condition><then> <expr><name>errno_msg</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>,
              <argument><expr><operator>(</operator><ternary><condition><expr><name>werror_msg</name></expr> ?</condition><then> <expr><name>werror_msg</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// -V547</comment>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%s %s %"</literal> <name>PRIu64</name> <literal type="string">"|%d|%d|%s|%s|%s: "</literal></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>ecode</name></expr></argument>, <argument><expr><name>errno_code</name></expr></argument>, <argument><expr><name>werror_code</name></expr></argument>,
              <argument><expr><operator>(</operator><ternary><condition><expr><name>ecode_msg</name></expr> ?</condition><then> <expr><name>ecode_msg</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>errno_msg</name></expr> ?</condition><then> <expr><name>errno_msg</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>werror_msg</name></expr> ?</condition><then> <expr><name>werror_msg</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// -V547</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>fname</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>line</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%s %s %s:%d: "</literal></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%s %s: "</literal></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>fmt</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>no_va</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>argp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>IW_LINE_SEP</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IW_LINE_SEP</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

  <if_stmt><if>if <condition>(<expr><name>ecode</name> <operator>||</operator> <name>errno_code</name> <operator>||</operator> <name>werror_code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>fname</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>line</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>__android_log_print</name><argument_list>(<argument><expr><name>alp</name></expr></argument>, <argument><expr><literal type="string">"IWLOG"</literal></expr></argument>, <argument><expr><literal type="string">"%s:%d %"</literal> <name>PRIu64</name> <literal type="string">"|%d|%d|%s|%s|%s: "</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>ecode</name></expr></argument>, <argument><expr><name>errno_code</name></expr></argument>,
                          <argument><expr><name>werror_code</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>ecode_msg</name></expr> ?</condition><then> <expr><name>ecode_msg</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>errno_msg</name></expr> ?</condition><then> <expr><name>errno_msg</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>,
                          <argument><expr><operator>(</operator><ternary><condition><expr><name>werror_msg</name></expr> ?</condition><then> <expr><name>werror_msg</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>__android_log_print</name><argument_list>(<argument><expr><name>alp</name></expr></argument>, <argument><expr><literal type="string">"IWLOG"</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name> <literal type="string">"|%d|%d|%s|%s|%s: "</literal></expr></argument>, <argument><expr><name>ecode</name></expr></argument>, <argument><expr><name>errno_code</name></expr></argument>, <argument><expr><name>werror_code</name></expr></argument>,
                          <argument><expr><operator>(</operator><ternary><condition><expr><name>ecode_msg</name></expr> ?</condition><then> <expr><name>ecode_msg</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>errno_msg</name></expr> ?</condition><then> <expr><name>errno_msg</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>werror_msg</name></expr> ?</condition><then> <expr><name>werror_msg</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>fname</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>line</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>__android_log_print</name><argument_list>(<argument><expr><name>alp</name></expr></argument>, <argument><expr><literal type="string">"IWLOG"</literal></expr></argument>, <argument><expr><literal type="string">"%s:%d: "</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>fmt</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>no_va</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>__android_log_write</name><argument_list>(<argument><expr><name>alp</name></expr></argument>, <argument><expr><literal type="string">"IWLOG"</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>__android_log_vprint</name><argument_list>(<argument><expr><name>alp</name></expr></argument>, <argument><expr><literal type="string">"IWLOG"</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>argp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>fnameptr</name> <operator>!=</operator> <name>fnamebuf</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fnameptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>werror_msg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><name>werror_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TBUF_SZ</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EBUF_SZ</name></cpp:undef>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
</unit>
