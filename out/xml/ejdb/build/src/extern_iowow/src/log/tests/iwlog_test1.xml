<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iowow/src/log/tests/iwlog_test1.c"><comment type="line">//</comment>
<comment type="block" format="doxygen">/**************************************************************************************************
 * IOWOW library
 *
 * MIT License
 *
 * Copyright (c) 2012-2022 Softmotions Ltd &lt;info@softmotions.com&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *************************************************************************************************/</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwcfg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CUnit/Basic.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwutils.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>init_suite</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>iwlog_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clean_suite</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwlog_test1</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>ec</name> <init>= <expr><operator>(</operator><literal type="number">0xfffffffdU</literal> <operator>&amp;</operator> <literal type="number">0x3fffffffU</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>rc</name> <init>= <expr><literal type="number">0xfafafafaULL</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>ec2</name> <init>= <expr><call><name>iwrc_strip_errno</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>ec2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0xfafafafaULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwlog_test2</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWLOG_DEFAULT_OPTS</name></type> <name>opts</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>fname</name><index>[]</index></name> <init>= <expr><literal type="string">"iwlog_test1_XXXXXX"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>mkstemp</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_TRUE</name><argument_list>(<argument><expr><name>fd</name> <operator>!=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_PTR_NOT_NULL</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Redirecting log to: %s"</literal> <name>IW_LINE_SEP</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>out</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwlog_set_logfn</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>iwlog_info2</name><argument_list>(<argument><expr><literal type="string">"7fa79c75beac413d83f35ffb6bf571b9"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"7e94f7214af64513b30ab4df3f62714a%s"</literal></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwlog_ecode_warn</name><argument_list>(<argument><expr><name>IW_ERROR_READONLY</name></expr></argument>, <argument><expr><literal type="string">"c94645c3b107433497ef295b1c00dcff%d"</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>ecode</name> <init>= <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>iwlog</name><argument_list>(<argument><expr><name>IWLOG_DEBUG</name></expr></argument>, <argument><expr><name>ecode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ERRNO Message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_PTR_NOT_NULL_FATAL</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_TRUE</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n\n"</literal> <name>IW_LINE_SEP</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT_PTR_NOT_NULL</name><argument_list>(<argument><expr><call><name>strstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"7fa79c75beac413d83f35ffb6bf571b9"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_PTR_NOT_NULL</name><argument_list>(<argument><expr><call><name>strstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"7e94f7214af64513b30ab4df3f62714aC"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_PTR_NOT_NULL</name><argument_list>(<argument><expr><call><name>strstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,
                                <argument><expr><literal type="string">"DEBUG 70001|2|0|Error with expected errno "</literal>
                                <literal type="string">"status set. (IW_ERROR_ERRNO)|"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_PTR_NOT_NULL</name><argument_list>(<argument><expr><call><name>strstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"ERRNO Message"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_PTR_NOT_NULL</name><argument_list>(<argument><expr><call><name>strstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"ERROR iwlog_test1.c:"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT_PTR_NOT_NULL</name><argument_list>(<argument><expr><call><name>strstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"70005|0|0|Resource is readonly. (IW_ERROR_READONLY)|"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_PTR_NOT_NULL</name><argument_list>(<argument><expr><call><name>strstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"c94645c3b107433497ef295b1c00dcff12"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>CU_pSuite</name></type> <name>pSuite</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Initialize the CUnit test registry */</comment>
  <if_stmt><if>if <condition>(<expr><name>CUE_SUCCESS</name> <operator>!=</operator> <call><name>CU_initialize_registry</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Add a suite to the registry */</comment>
  <expr_stmt><expr><name>pSuite</name> <operator>=</operator> <call><name>CU_add_suite</name><argument_list>(<argument><expr><literal type="string">"iwlog_test1"</literal></expr></argument>, <argument><expr><name>init_suite</name></expr></argument>, <argument><expr><name>clean_suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pSuite</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CU_cleanup_registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Add the tests to the suite */</comment>
  <if_stmt><if>if <condition>(  <expr><operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>CU_add_test</name><argument_list>(<argument><expr><name>pSuite</name></expr></argument>, <argument><expr><literal type="string">"iwlog_test1"</literal></expr></argument>, <argument><expr><name>iwlog_test1</name></expr></argument>)</argument_list></call><operator>)</operator>
     <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>CU_add_test</name><argument_list>(<argument><expr><name>pSuite</name></expr></argument>, <argument><expr><literal type="string">"iwlog_test2"</literal></expr></argument>, <argument><expr><name>iwlog_test2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CU_cleanup_registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Run all tests using the CUnit Basic interface */</comment>
  <expr_stmt><expr><call><name>CU_basic_set_mode</name><argument_list>(<argument><expr><name>CU_BRM_VERBOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_basic_run_tests</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>CU_get_number_of_failures</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CU_cleanup_registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
