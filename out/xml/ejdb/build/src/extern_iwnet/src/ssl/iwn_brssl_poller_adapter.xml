<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/ssl/iwn_brssl_poller_adapter.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwnet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_brssl_poller_adapter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bearssl/brssl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwlog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<struct>struct <name>x509_client_context</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_class</name>    <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>br_x509_minimal_context</name></type> <name>minimal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>verifyhost</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>verifypeer</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>pa</name> <block>{
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_poller_adapter</name></name></type>     <name>b</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwn_on_poller_adapter_event</name></type>   <name>on_event</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwn_on_poller_adapter_dispose</name></type> <name>on_dispose</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>eng</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mtx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pthread_key_t</name></type>   <name>ready_fd_tl</name></decl>;</decl_stmt>

  <union>union <block>{
    <struct>struct  <block>{
      <decl_stmt><decl><type><name>br_ssl_client_context</name></type>      <name>cc</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>struct</name> <name>x509_client_context</name></name></type> <name>x509</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>anchor_list</name></type> <name>anchors</name></decl>;</decl_stmt>
    }</block> <decl><name>client</name></decl>;</struct>

    <struct>struct <block>{
      <decl_stmt><decl><type><name>br_ssl_server_context</name></type> <name>sc</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>private_key</name> <modifier>*</modifier></type><name>pk</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>br_x509_certificate</name> <modifier>*</modifier></type><name>certs</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>size_t</name></type> <name>certs_num</name></decl>;</decl_stmt>
    }</block> <decl><name>server</name></decl>;</struct>
  }</block>;</union>

  <decl_stmt><decl><type><name>bool</name></type> <name>is_client</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>iobuf</name><index>[<expr><name>BR_SSL_BUFSIZE_BIDI</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_ecodefn</name><parameter_list>(<parameter><decl><type><name>locale_t</name></type> <name>locale</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ecode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ecode</name> <operator>&lt;=</operator> <name>_BRS_ERROR_START</name> <operator>||</operator> <name>ecode</name> <operator>&gt;=</operator> <name>_BRS_ERROR_END</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <switch>switch <condition>(<expr><name>ecode</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>BRS_ERROR_INVALID_CASCERT_DATA</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid CA cetificates (BRS_ERROR_INVALID_CASCERT_DATA)"</literal></expr>;</return>
    <case>case <expr><name>BRS_ERROR_INVALID_PRIVKEY_DATA</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid private key data (BRS_ERROR_INVALID_PRIVKEY_DATA)"</literal></expr>;</return>
  </block_content>}</block></switch>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>_initialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_initialized</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_register_ecodefn</name><argument_list>(<argument><expr><name>_ecodefn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller_adapter</name></name> <modifier>*</modifier></type><name>pa</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>pa</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>pa</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>eng</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>tor</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>tor</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>br_ssl_engine_current_state</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>BR_SSL_RECVAPP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>blen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>br_ssl_engine_recvapp_buf</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>blen</name> <operator>&gt;</operator> <name>tor</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>blen</name> <operator>=</operator> <name>tor</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>blen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tor</name> <operator>-=</operator> <name>blen</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>br_ssl_engine_recvapp_ack</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>tor</name> <operator>==</operator> <name>len</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EAGAIN</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>len</name> <operator>-</operator> <name>tor</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller_adapter</name></name> <modifier>*</modifier></type><name>pa</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>pa</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>pa</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>eng</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>tow</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>tow</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>br_ssl_engine_current_state</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>BR_SSL_SENDAPP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>blen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>br_ssl_engine_sendapp_buf</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>blen</name> <operator>&gt;</operator> <name>tow</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>blen</name> <operator>=</operator> <name>tow</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>data</name> <operator>+=</operator> <name>blen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tow</name> <operator>-=</operator> <name>blen</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>br_ssl_engine_sendapp_ack</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>br_ssl_engine_flush</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>tow</name> <operator>==</operator> <name>len</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EAGAIN</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>len</name> <operator>-</operator> <name>tow</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pa</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>is_client</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>VEC_CLEAREXT</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>anchors</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>free_ta_contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>free_private_key</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>pk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>certs_num</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>free_certificates</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>certs</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>certs_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>pthread_key_delete</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>ready_fd_tl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_on_dispose</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_poller_task</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>pa</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>on_dispose</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>on_dispose</name></name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>a</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>_destroy</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_write_fd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pa</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>wlen</name> <init>= <expr><call><name>write</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>wlen</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name>wlen</name></expr>;</return>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_read_fd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pa</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>rlen</name> <init>= <expr><call><name>read</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name>rlen</name></expr>;</return>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>_next_poll</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>cs</name> <init>= <expr><call><name>br_ssl_engine_current_state</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>cs</name> <operator>&amp;</operator> <name>BR_SSL_CLOSED</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>cs</name> <operator>&amp;</operator> <name>BR_SSL_RECVREC</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>|=</operator> <name>IWN_POLLIN</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>cs</name> <operator>&amp;</operator> <name>BR_SSL_SENDREC</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>|=</operator> <name>IWN_POLLOUT</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>|=</operator> <name>IWN_POLLIN</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_has_pending_write_bytes_probe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>slot_user_data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fn_user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>pa</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name>slot_user_data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>fn_user_data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>eng</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <operator>(</operator><call><name>br_ssl_engine_current_state</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>BR_SSL_SENDREC</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_has_pending_write_bytes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller_adapter</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>iwn_poller_probe</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>poller</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>_has_pending_write_bytes_probe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_arm_needed_probe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>slot_user_data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fn_user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>pa</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name>slot_user_data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>fn_user_data</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <call><name>pthread_getspecific</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>ready_fd_tl</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_arm_needed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller_adapter</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>iwn_poller_probe</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>poller</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>_arm_needed_probe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><name>iwrc</name></type> <name>_arm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller_adapter</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>events</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>_arm_needed</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwn_poller_arm_events</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>poller</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>events</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>_on_ready</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_poller_task</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>pa</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>eng</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>write_done</name></decl>, <decl><type ref="prev"/><name>read_done</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>locked</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>nflags</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>pthread_setspecific</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>ready_fd_tl</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <do>do <block>{<block_content>
    <expr_stmt><expr><name>nflags</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>locked</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>br_ssl_engine_current_state</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BR_SSL_CLOSED</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>write_done</name> <operator>=</operator> <operator>!</operator><operator>(</operator><call><name>br_ssl_engine_current_state</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>BR_SSL_SENDREC</name><operator>)</operator></expr>;</expr_stmt>
    <while>while <condition>(<expr><call><name>br_ssl_engine_current_state</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>BR_SSL_SENDREC</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>br_ssl_engine_sendrec_buf</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>wlen</name> <init>= <expr><call><name>_write_fd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>wlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>finish</name>;</goto>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>wlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EWOULDBLOCK</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EAGAIN</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>write_done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <goto>goto <name>finish</name>;</goto>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>br_ssl_engine_sendrec_ack</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>wlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name>read_done</name> <operator>=</operator> <operator>!</operator><operator>(</operator><call><name>br_ssl_engine_current_state</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>BR_SSL_RECVREC</name><operator>)</operator></expr>;</expr_stmt>
    <while>while <condition>(<expr><call><name>br_ssl_engine_current_state</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>BR_SSL_RECVREC</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>br_ssl_engine_recvrec_buf</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>rlen</name> <init>= <expr><call><name>_read_fd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>finish</name>;</goto>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EWOULDBLOCK</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EAGAIN</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>read_done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <goto>goto <name>finish</name>;</goto>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>br_ssl_engine_recvrec_ack</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>rlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <while>while <condition>(<expr><call><name>br_ssl_engine_current_state</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>BR_SSL_SENDAPP</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>n</name> <init>= <expr><call><name><name>a</name><operator>-&gt;</operator><name>on_event</name></name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>a</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name>IWN_POLLOUT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>finish</name>;</goto>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <name>IWN_POLLOUT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <while>while <condition>(<expr><call><name>br_ssl_engine_current_state</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>BR_SSL_RECVAPP</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>n</name> <init>= <expr><call><name><name>a</name><operator>-&gt;</operator><name>on_event</name></name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>a</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name>IWN_POLLIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>finish</name>;</goto>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <name>IWN_POLLIN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name>nflags</name> <operator>=</operator> <call><name>_next_poll</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>locked</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><operator>!</operator><name>read_done</name> <operator>||</operator> <operator>!</operator><name>write_done</name></expr>)</condition>;</do>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>locked</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>br_ssl_engine_current_state</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BR_SSL_CLOSED</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>br_ssl_engine_last_error</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>BR_ERR_OK</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_DEBUG</name></cpp:ifdef>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>comment</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><call><name>find_error_name</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>comment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>comment</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>iwlog_debug</name><argument_list>(<argument><expr><literal type="string">"brssl | error code: %d, %s, %s"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>iwlog_debug</name><argument_list>(<argument><expr><literal type="string">"brssl | error code: %d, %s"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>iwlog_debug</name><argument_list>(<argument><expr><literal type="string">"brssl | error code: %d"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>pthread_setspecific</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>ready_fd_tl</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>nflags</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>x509_start_chain</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>           <modifier>*</modifier></type><name>server_name</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>x509_client_context</name></name> <modifier>*</modifier></type><name>x509</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>x509</name><operator>-&gt;</operator><name>verifyhost</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>server_name</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name><name>x509</name><operator>-&gt;</operator><name>minimal</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>start_chain</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x509</name><operator>-&gt;</operator><name>minimal</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>server_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>x509_start_cert</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>x509_client_context</name></name> <modifier>*</modifier></type><name>x509</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>x509</name><operator>-&gt;</operator><name>minimal</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>start_cert</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x509</name><operator>-&gt;</operator><name>minimal</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>x509_append</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name>  <modifier>*</modifier></type><name>buf</name></decl></parameter>,
  <parameter><decl><type><name>size_t</name></type>                <name>len</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>x509_client_context</name></name> <modifier>*</modifier></type><name>x509</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>x509</name><operator>-&gt;</operator><name>minimal</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>append</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x509</name><operator>-&gt;</operator><name>minimal</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>x509_end_cert</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>x509_client_context</name></name> <modifier>*</modifier></type><name>x509</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>x509</name><operator>-&gt;</operator><name>minimal</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>end_cert</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x509</name><operator>-&gt;</operator><name>minimal</name><operator>.</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>x509_end_chain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>x509_client_context</name></name> <modifier>*</modifier></type><name>x509</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>err</name> <init>= <expr><call><name><name>x509</name><operator>-&gt;</operator><name>minimal</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>end_chain</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x509</name><operator>-&gt;</operator><name>minimal</name><operator>.</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>x509</name><operator>-&gt;</operator><name>verifypeer</name></name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* ignore any X.509 errors */</comment>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>BR_ERR_OK</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>br_x509_pkey</name><modifier>*</modifier></type> <name>x509_get_pkey</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name><modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
  <parameter><decl><type><name>unsigned</name>                   <modifier>*</modifier></type><name>usages</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>x509_client_context</name></name> <modifier>*</modifier></type><name>x509</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>x509</name><operator>-&gt;</operator><name>minimal</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>get_pkey</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x509</name><operator>-&gt;</operator><name>minimal</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>usages</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>br_x509_class</name></type> <name>x509_vtable</name> <init>= <expr><block>{
  <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>x509_client_context</name></expr></argument>)</argument_list></sizeof></expr>,
  <expr><name>x509_start_chain</name></expr>,
  <expr><name>x509_start_cert</name></expr>,
  <expr><name>x509_append</name></expr>,
  <expr><name>x509_end_cert</name></expr>,
  <expr><name>x509_end_chain</name></expr>,
  <expr><name>x509_get_pkey</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>iwrc</name></type> <name>iwn_brssl_server_poller_adapter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_brssl_server_poller_adapter_spec</name></name> <modifier>*</modifier></type><name>spec</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>spec</name><operator>-&gt;</operator><name>poller</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>spec</name><operator>-&gt;</operator><name>poller</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_INVALID_ARGS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_ecode_error2</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"No poller specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>spec</name><operator>-&gt;</operator><name>on_event</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_INVALID_ARGS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_ecode_error2</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"No on_event specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>spec</name><operator>-&gt;</operator><name>certs</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_INVALID_ARGS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_ecode_error2</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"No certs specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>certs_len</name> <init>= <expr><name><name>spec</name><operator>-&gt;</operator><name>certs_len</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>certs_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>certs_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>spec</name><operator>-&gt;</operator><name>certs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>certs_len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_INVALID_ARGS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_ecode_error2</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"Certs data is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>spec</name><operator>-&gt;</operator><name>private_key</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_INVALID_ARGS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_ecode_error2</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"No private_key specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>private_key_len</name> <init>= <expr><name><name>spec</name><operator>-&gt;</operator><name>private_key_len</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>private_key_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>private_key_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>spec</name><operator>-&gt;</operator><name>private_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>private_key_len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_INVALID_ARGS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_ecode_error2</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"Private_key data is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>pa</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>poller</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>read</name></name> <operator>=</operator> <name>_read</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>write</name></name> <operator>=</operator> <name>_write</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>arm</name></name> <operator>=</operator> <name>_arm</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>has_pending_write_bytes</name></name> <operator>=</operator> <name>_has_pending_write_bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>user_data</name></name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>user_data</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>on_event</name></name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>on_event</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>on_dispose</name></name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>on_dispose</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>pthread_mutexattr_t</name></type> <name>attr</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_mutexattr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutexattr_settype</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>PTHREAD_MUTEX_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutexattr_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>ready_fd_tl</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>certs_in_buffer</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>certs</name></name> <operator>=</operator> <call><name>read_certificates_data</name><argument_list>(<argument><expr><name><name>spec</name><operator>-&gt;</operator><name>certs</name></name></expr></argument>, <argument><expr><name>certs_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>certs_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>a</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>certs</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_error2</name><argument_list>(<argument><expr><literal type="string">"Error reading server certs data specified in buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>BRS_ERROR_INVALID_CASCERT_DATA</name></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>certs_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>spec</name><operator>-&gt;</operator><name>certs</name></name></expr></argument>, <argument><expr><name>certs_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><name>certs_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>certs</name></name> <operator>=</operator> <call><name>read_certificates</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>certs_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>a</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>certs</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"Error reading server certs file: %.*s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>certs_len</name></expr></argument>, <argument><expr><name><name>spec</name><operator>-&gt;</operator><name>certs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>BRS_ERROR_INVALID_CASCERT_DATA</name></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>private_key_in_buffer</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>pk</name></name> <operator>=</operator> <call><name>read_private_key_data</name><argument_list>(<argument><expr><name><name>spec</name><operator>-&gt;</operator><name>private_key</name></name></expr></argument>, <argument><expr><name>private_key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>a</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>pk</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_error2</name><argument_list>(<argument><expr><literal type="string">"Error reading server private key data specified in buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>BRS_ERROR_INVALID_PRIVKEY_DATA</name></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>private_key_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>spec</name><operator>-&gt;</operator><name>private_key</name></name></expr></argument>, <argument><expr><name>private_key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><name>private_key_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>pk</name></name> <operator>=</operator> <call><name>read_private_key</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>a</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>pk</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"Error reading server private key file: %.*s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>private_key_len</name></expr></argument>, <argument><expr><name><name>spec</name><operator>-&gt;</operator><name>private_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>BRS_ERROR_INVALID_PRIVKEY_DATA</name></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>pk</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <name>BR_KEYTYPE_EC</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>br_ssl_server_init_full_ec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>sc</name></name></expr></argument>,
                               <argument><expr><name><name>a</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>certs</name></name></expr></argument>,
                               <argument><expr><name><name>a</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>certs_num</name></name></expr></argument>,
                               <argument><expr><name>BR_KEYTYPE_EC</name></expr></argument>,
                               <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>br_ssl_server_init_full_rsa</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>sc</name></name></expr></argument>,
                                <argument><expr><name><name>a</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>certs</name></name></expr></argument>,
                                <argument><expr><name><name>a</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>certs_num</name></name></expr></argument>,
                                <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>br_ssl_engine_set_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>sc</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>iobuf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>iobuf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>br_ssl_engine_set_versions</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>sc</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><name>BR_TLS11</name></expr></argument>, <argument><expr><name>BR_TLS12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>br_ssl_server_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>sc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>eng</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>sc</name><operator>.</operator><name>eng</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <macro><name>iwn_poller_add</name><argument_list>(<argument>&amp;(struct iwn_poller_task) {
    .fd = spec-&gt;fd</argument>,
    <argument>.poller = p</argument>,
    <argument>.user_data = a</argument>,
    <argument>.on_ready = _on_ready</argument>,
    <argument>.on_dispose = _on_dispose</argument>,
    <argument>.timeout = spec-&gt;timeout_sec</argument>,
    <argument>.events = spec-&gt;events
  }</argument>)</argument_list></macro></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_destroy</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_brssl_client_poller_adapter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_brssl_client_poller_adapter_spec</name></name> <modifier>*</modifier></type><name>spec</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>spec</name><operator>-&gt;</operator><name>poller</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>spec</name><operator>-&gt;</operator><name>poller</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_INVALID_ARGS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_ecode_error2</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"No poller specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>spec</name><operator>-&gt;</operator><name>on_event</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_INVALID_ARGS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_ecode_error2</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"No on_event specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>pa</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>is_client</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>poller</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>read</name></name> <operator>=</operator> <name>_read</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>write</name></name> <operator>=</operator> <name>_write</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>arm</name></name> <operator>=</operator> <name>_arm</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>user_data</name></name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>user_data</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>has_pending_write_bytes</name></name> <operator>=</operator> <name>_has_pending_write_bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>on_event</name></name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>on_event</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>on_dispose</name></name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>on_dispose</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>pthread_mutexattr_t</name></type> <name>attr</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_mutexattr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutexattr_settype</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>PTHREAD_MUTEX_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutexattr_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>ready_fd_tl</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cacerts_data</name> <init>= <expr><name><name>spec</name><operator>-&gt;</operator><name>cacerts_data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>cacerts_data_len</name> <init>= <expr><name><name>spec</name><operator>-&gt;</operator><name>cacerts_data_len</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cacerts_data</name> <operator>||</operator> <operator>!</operator><name>cacerts_data_len</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>cacerts_data</name> <operator>=</operator> <name>iwn_cacerts</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cacerts_data_len</name> <operator>=</operator> <name>iwn_cacerts_len</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Load trust anchors</comment>
  <expr_stmt><expr><name>rci</name> <operator>=</operator> <call><name>read_trust_anchors_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>anchors</name></name></expr></argument>, <argument><expr><name>cacerts_data</name></expr></argument>, <argument><expr><name>cacerts_data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rci</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>BRS_ERROR_INVALID_CASCERT_DATA</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>br_ssl_client_init_full</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>cc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>x509</name><operator>.</operator><name>minimal</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>anchors</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>anchors</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>br_ssl_engine_set_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>iobuf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>iobuf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>br_ssl_engine_set_versions</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><name>BR_TLS11</name></expr></argument>, <argument><expr><name>BR_TLS12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>x509</name><operator>.</operator><name>vtable</name></name> <operator>=</operator> <operator>&amp;</operator><name>x509_vtable</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>x509</name><operator>.</operator><name>verifyhost</name></name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>verify_host</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>x509</name><operator>.</operator><name>verifypeer</name></name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>verify_peer</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>br_ssl_engine_set_x509</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>x509</name><operator>.</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>br_ssl_client_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>cc</name></name></expr></argument>, <argument><expr><name><name>spec</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>eng</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>client</name><operator>.</operator><name>cc</name><operator>.</operator><name>eng</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <macro><name>iwn_poller_add</name><argument_list>(<argument>&amp;(struct iwn_poller_task) {
    .fd = spec-&gt;fd</argument>,
    <argument>.poller = p</argument>,
    <argument>.user_data = a</argument>,
    <argument>.on_ready = _on_ready</argument>,
    <argument>.on_dispose = _on_dispose</argument>,
    <argument>.timeout = spec-&gt;timeout_sec</argument>,
    <argument>.events = spec-&gt;events
  }</argument>)</argument_list></macro></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_destroy</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
</unit>
