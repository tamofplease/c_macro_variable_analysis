<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/bearssl/tools/vector.c"><comment type="block">/*
 * Copyright (c) 2016 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"brssl.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Prepare a vector buffer for adding 'extra' elements.
 *   buf      current buffer
 *   esize    size of a vector element
 *   ptr      pointer to the 'ptr' vector field
 *   len      pointer to the 'len' vector field
 *   extra    number of elements to add
 *
 * If the buffer must be enlarged, then this function allocates the new
 * buffer and releases the old one. The new buffer address is then returned.
 * If the buffer needs not be enlarged, then the buffer address is returned.
 *
 * In case of enlargement, the 'len' field is adjusted accordingly. The
 * 'ptr' field is not modified.
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>vector_expand</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name></type> <name>esize</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>nlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>nbuf</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>len</name> <operator>-</operator> <operator>*</operator><name>ptr</name> <operator>&gt;=</operator> <name>extra</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>buf</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>nlen</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>len</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>nlen</name> <operator>-</operator> <operator>*</operator><name>ptr</name> <operator>&lt;</operator> <name>extra</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>nlen</name> <operator>=</operator> <name>extra</name> <operator>+</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>nlen</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>nlen</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>nbuf</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>nlen</name> <operator>*</operator> <name>esize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>*</operator><name>len</name> <operator>*</operator> <name>esize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>nlen</name></expr>;</expr_stmt>
	<return>return <expr><name>nbuf</name></expr>;</return>
</block_content>}</block></function>
</unit>
