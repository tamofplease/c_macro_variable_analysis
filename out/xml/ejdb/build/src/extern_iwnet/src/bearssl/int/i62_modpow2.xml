<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/bearssl/int/i62_modpow2.c"><comment type="block">/*
 * Copyright (c) 2017 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_INT128</name> <operator>||</operator> <name>BR_UMUL128</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_INT128</name></expr></cpp:if>

<comment type="block">/*
 * Compute x*y+v1+v2. Operands are 64-bit, and result is 128-bit, with
 * high word in "hi" and low word in "lo".
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMA1</name><parameter_list>(<parameter><type><name>hi</name></type></parameter>, <parameter><type><name>lo</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>do { \
		unsigned __int128 fmaz; \
		fmaz = (unsigned __int128)(x) * (unsigned __int128)(y) \
			+ (unsigned __int128)(v1) + (unsigned __int128)(v2); \
		(hi) = (uint64_t)(fmaz &gt;&gt; 64); \
		(lo) = (uint64_t)fmaz; \
	} while (0)</cpp:value></cpp:define>

<comment type="block">/*
 * Compute x1*y1+x2*y2+v1+v2. Operands are 64-bit, and result is 128-bit,
 * with high word in "hi" and low word in "lo".
 *
 * Callers should ensure that the two inner products, and the v1 and v2
 * operands, are multiple of 4 (this is not used by this specific definition
 * but may help other implementations).
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMA2</name><parameter_list>(<parameter><type><name>hi</name></type></parameter>, <parameter><type><name>lo</name></type></parameter>, <parameter><type><name>x1</name></type></parameter>, <parameter><type><name>y1</name></type></parameter>, <parameter><type><name>x2</name></type></parameter>, <parameter><type><name>y2</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>do { \
		unsigned __int128 fmaz; \
		fmaz = (unsigned __int128)(x1) * (unsigned __int128)(y1) \
			+ (unsigned __int128)(x2) * (unsigned __int128)(y2) \
			+ (unsigned __int128)(v1) + (unsigned __int128)(v2); \
		(hi) = (uint64_t)(fmaz &gt;&gt; 64); \
		(lo) = (uint64_t)fmaz; \
	} while (0)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BR_UMUL128</name></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;intrin.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMA1</name><parameter_list>(<parameter><type><name>hi</name></type></parameter>, <parameter><type><name>lo</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>do { \
		uint64_t fmahi, fmalo; \
		unsigned char fmacc; \
		fmalo = _umul128((x), (y), &amp;fmahi); \
		fmacc = _addcarry_u64(0, fmalo, (v1), &amp;fmalo); \
		_addcarry_u64(fmacc, fmahi, 0, &amp;fmahi); \
		fmacc = _addcarry_u64(0, fmalo, (v2), &amp;(lo)); \
		_addcarry_u64(fmacc, fmahi, 0, &amp;(hi)); \
	} while (0)</cpp:value></cpp:define>

<comment type="block">/*
 * Normally we should use _addcarry_u64() for FMA2 too, but it makes
 * Visual Studio crash. Instead we use this version, which leverages
 * the fact that the vx operands, and the products, are multiple of 4.
 * This is unfortunately slower.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMA2</name><parameter_list>(<parameter><type><name>hi</name></type></parameter>, <parameter><type><name>lo</name></type></parameter>, <parameter><type><name>x1</name></type></parameter>, <parameter><type><name>y1</name></type></parameter>, <parameter><type><name>x2</name></type></parameter>, <parameter><type><name>y2</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>do { \
		uint64_t fma1hi, fma1lo; \
		uint64_t fma2hi, fma2lo; \
		uint64_t fmatt; \
		fma1lo = _umul128((x1), (y1), &amp;fma1hi); \
		fma2lo = _umul128((x2), (y2), &amp;fma2hi); \
		fmatt = (fma1lo &gt;&gt; 2) + (fma2lo &gt;&gt; 2) \
			+ ((v1) &gt;&gt; 2) + ((v2) &gt;&gt; 2); \
		(lo) = fmatt &lt;&lt; 2; \
		(hi) = fma1hi + fma2hi + (fmatt &gt;&gt; 62); \
	} while (0)</cpp:value></cpp:define>

<comment type="block">/*
 * The FMA2 macro definition we would prefer to use, but it triggers
 * an internal compiler error in Visual Studio 2015.
 *
#define FMA2(hi, lo, x1, y1, x2, y2, v1, v2)   do { \
		uint64_t fma1hi, fma1lo; \
		uint64_t fma2hi, fma2lo; \
		unsigned char fmacc; \
		fma1lo = _umul128((x1), (y1), &amp;fma1hi); \
		fma2lo = _umul128((x2), (y2), &amp;fma2hi); \
		fmacc = _addcarry_u64(0, fma1lo, (v1), &amp;fma1lo); \
		_addcarry_u64(fmacc, fma1hi, 0, &amp;fma1hi); \
		fmacc = _addcarry_u64(0, fma2lo, (v2), &amp;fma2lo); \
		_addcarry_u64(fmacc, fma2hi, 0, &amp;fma2hi); \
		fmacc = _addcarry_u64(0, fma1lo, fma2lo, &amp;(lo)); \
		_addcarry_u64(fmacc, fma1hi, fma2hi, &amp;(hi)); \
	} while (0)
 */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK62</name></cpp:macro>           <cpp:value>((uint64_t)0x3FFFFFFFFFFFFFFF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL62_lo</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>(((uint64_t)(x) * (uint64_t)(y)) &amp; MASK62)</cpp:value></cpp:define>

<comment type="block">/*
 * Subtract b from a, and return the final carry. If 'ctl32' is 0, then
 * a[] is kept unmodified, but the final carry is still computed and
 * returned.
 */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>i62_sub</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ctl32</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>cc</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ctl32</name> <operator>=</operator> <operator>-</operator><name>ctl32</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>mask</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>ctl32</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>ctl32</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name>aw</name></decl>, <decl><type ref="prev"/><name>bw</name></decl>, <decl><type ref="prev"/><name>dw</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>aw</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>bw</name> <operator>=</operator> <name><name>b</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>dw</name> <operator>=</operator> <name>aw</name> <operator>-</operator> <name>bw</name> <operator>-</operator> <name>cc</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cc</name> <operator>=</operator> <name>dw</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>dw</name> <operator>&amp;=</operator> <name>MASK62</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>aw</name> <operator>^</operator> <operator>(</operator><name>mask</name> <operator>&amp;</operator> <operator>(</operator><name>dw</name> <operator>^</operator> <name>aw</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>cc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Montgomery multiplication, over arrays of 62-bit values. The
 * destination array (d) must be distinct from the other operands
 * (x, y and m). All arrays are in little-endian format (least
 * significant word comes first) over 'num' words.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>montymul</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>y</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>m0i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>dh</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>num4</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>num4</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>num</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dh</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>v</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name>f</name></decl>, <decl><type ref="prev"/><name>xu</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>zh</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name>hi</name></decl>, <decl><type ref="prev"/><name>lo</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>xu</name> <operator>=</operator> <name><name>x</name><index>[<expr><name>u</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>MUL62_lo</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <call><name>MUL62_lo</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>m0i</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>FMA2</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>xu</name></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <name>hi</name></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>v</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name>num4</name></expr>;</condition> <incr><expr><name>v</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>FMA2</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>xu</name></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>m</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>d</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <name>hi</name> <operator>+</operator> <operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <literal type="number">62</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>d</name><index>[<expr><name>v</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>lo</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FMA2</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>xu</name></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>m</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>d</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <name>hi</name> <operator>+</operator> <operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <literal type="number">62</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>d</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>lo</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FMA2</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>xu</name></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>m</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>d</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <name>hi</name> <operator>+</operator> <operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <literal type="number">62</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>d</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>lo</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FMA2</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>xu</name></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>m</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>d</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <name>hi</name> <operator>+</operator> <operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <literal type="number">62</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>d</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>lo</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block></for>
		<for>for <control>(<init>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>v</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>FMA2</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>xu</name></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>m</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>d</name><index>[<expr><name>v</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <name>hi</name> <operator>+</operator> <operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <literal type="number">62</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>d</name><index>[<expr><name>v</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>lo</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><name>zh</name> <operator>=</operator> <name>dh</name> <operator>+</operator> <name>r</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>d</name><index>[<expr><name>num</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>zh</name> <operator>&amp;</operator> <name>MASK62</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>dh</name> <operator>=</operator> <name>zh</name> <operator>&gt;&gt;</operator> <literal type="number">62</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>i62_sub</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>dh</name> <operator>|</operator> <call><name>NOT</name><argument_list>(<argument><expr><call><name>i62_sub</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Conversion back from Montgomery representation.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>frommonty</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>m0i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name>f</name></decl>, <decl><type ref="prev"/><name>cc</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>MUL62_lo</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>m0i</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>cc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>v</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>uint64_t</name></type> <name>hi</name></decl>, <decl><type ref="prev"/><name>lo</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>FMA1</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>m</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>x</name><index>[<expr><name>v</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>cc</name> <operator>=</operator> <name>hi</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>x</name><index>[<expr><name>v</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>lo</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name><name>x</name><index>[<expr><name>num</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>cc</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>i62_sub</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><call><name>NOT</name><argument_list>(<argument><expr><call><name>i62_sub</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see inner.h */</comment>
<function><type><name>uint32_t</name></type>
<name>br_i62_modpow_opt</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>x31</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>elen</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>m31</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>m0i31</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>twlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>mw31num</name></decl>, <decl><type ref="prev"/><name>mw62num</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>x</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>m</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>m0i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>acc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>win_len</name></decl>, <decl><type ref="prev"/><name>acc_len</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Get modulus size, in words.
	 */</comment>
	<expr_stmt><expr><name>mw31num</name> <operator>=</operator> <operator>(</operator><name><name>m31</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>mw62num</name> <operator>=</operator> <operator>(</operator><name>mw31num</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * In order to apply this function, we must have enough room to
	 * copy the operand and modulus into the temporary array, along
	 * with at least two temporaries. If there is not enough room,
	 * switch to br_i31_modpow(). We also use br_i31_modpow() if the
	 * modulus length is not at least four words (94 bits or more).
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>mw31num</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">4</literal> <operator>||</operator> <operator>(</operator><name>mw62num</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument> &gt;</argument_list></name> <name>twlen</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * We assume here that we can split an aligned uint64_t
		 * into two properly aligned uint32_t. Since both types
		 * are supposed to have an exact width with no padding,
		 * then this property must hold.
		 */</comment>
		<decl_stmt><decl><type><name>size_t</name></type> <name>txlen</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>txlen</name> <operator>=</operator> <name>mw31num</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>twlen</name> <operator>&lt;</operator> <name>txlen</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>br_i31_modpow</name><argument_list>(<argument><expr><name>x31</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>elen</name></expr></argument>, <argument><expr><name>m31</name></expr></argument>, <argument><expr><name>m0i31</name></expr></argument>,
			<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>tmp</name> <operator>+</operator> <name>txlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Convert x to Montgomery representation: this means that
	 * we replace x with x*2^z mod m, where z is the smallest multiple
	 * of the word size such that 2^z &gt;= m. We want to reuse the 31-bit
	 * functions here (for constant-time operation), but we need z
	 * for a 62-bit word size.
	 */</comment>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>mw62num</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>br_i31_muladd_small</name><argument_list>(<argument><expr><name>x31</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>m31</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_i31_muladd_small</name><argument_list>(<argument><expr><name>x31</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>m31</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Assemble operands into arrays of 62-bit words. Note that
	 * all the arrays of 62-bit words that we will handle here
	 * are without any leading size word.
	 *
	 * We also adjust tmp and twlen to account for the words used
	 * for these extra arrays.
	 */</comment>
	<expr_stmt><expr><name>m</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <name>mw62num</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <operator>(</operator><name>mw62num</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>twlen</name> <operator>-=</operator> <operator>(</operator><name>mw62num</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>mw31num</name></expr>;</condition> <incr><expr><name>u</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>v</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>v</name> <operator>=</operator> <name>u</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>u</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name>mw31num</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>m</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>m31</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>x</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>x31</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name><name>m</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>m31</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name>
				<operator>+</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>m31</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>x</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>x31</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name>
				<operator>+</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>x31</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Compute window size. We support windows up to 5 bits; for a
	 * window of size k bits, we need 2^k+1 temporaries (for k = 1,
	 * we use special code that uses only 2 temporaries).
	 */</comment>
	<for>for <control>(<init><expr><name>win_len</name> <operator>=</operator> <literal type="number">5</literal></expr>;</init> <condition><expr><name>win_len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>win_len</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>win_len</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>mw62num</name> <operator>&lt;=</operator> <name>twlen</name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t2</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <name>mw62num</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Compute m0i, which is equal to -(1/m0) mod 2^62. We were
	 * provided with m0i31, which already fulfills this property
	 * modulo 2^31; the single expression below is then sufficient.
	 */</comment>
	<expr_stmt><expr><name>m0i</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>m0i31</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>m0i</name> <operator>=</operator> <call><name>MUL62_lo</name><argument_list>(<argument><expr><name>m0i</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">2</literal> <operator>+</operator> <call><name>MUL62_lo</name><argument_list>(<argument><expr><name>m0i</name></expr></argument>, <argument><expr><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Compute window contents. If the window has size one bit only,
	 * then t2 is set to x; otherwise, t2[0] is left untouched, and
	 * t2[k] is set to x^k (for k &gt;= 1).
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>win_len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>mw62num</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>t2</name> <operator>+</operator> <name>mw62num</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>mw62num</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>base</name> <operator>=</operator> <name>t2</name> <operator>+</operator> <name>mw62num</name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>win_len</name><operator>)</operator></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>montymul</name><argument_list>(<argument><expr><name>base</name> <operator>+</operator> <name>mw62num</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>mw62num</name></expr></argument>, <argument><expr><name>m0i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>base</name> <operator>+=</operator> <name>mw62num</name></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * Set x to 1, in Montgomery representation. We again use the
	 * 31-bit code.
	 */</comment>
	<expr_stmt><expr><call><name>br_i31_zero</name><argument_list>(<argument><expr><name>x31</name></expr></argument>, <argument><expr><name><name>m31</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>x31</name><index>[<expr><operator>(</operator><name><name>m31</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i31_muladd_small</name><argument_list>(<argument><expr><name>x31</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>m31</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>mw31num</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>br_i31_muladd_small</name><argument_list>(<argument><expr><name>x31</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>m31</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>mw31num</name></expr>;</condition> <incr><expr><name>u</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>v</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>v</name> <operator>=</operator> <name>u</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>u</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name>mw31num</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>x</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>x31</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name><name>x</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>x31</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name>
				<operator>+</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>x31</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * We process bits from most to least significant. At each
	 * loop iteration, we have acc_len bits in acc.
	 */</comment>
	<expr_stmt><expr><name>acc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>acc_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>acc_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>elen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>bits</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name>mask1</name></decl>, <decl><type ref="prev"/><name>mask2</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Get the next bits.
		 */</comment>
		<expr_stmt><expr><name>k</name> <operator>=</operator> <name>win_len</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>acc_len</name> <operator>&lt;</operator> <name>win_len</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>elen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>acc</name> <operator>=</operator> <operator>(</operator><name>acc</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>*</operator><name>e</name> <operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>elen</name> <operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>acc_len</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name>k</name> <operator>=</operator> <name>acc_len</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>(</operator><name>acc</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>acc_len</name> <operator>-</operator> <name>k</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>k</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>acc_len</name> <operator>-=</operator> <name>k</name></expr>;</expr_stmt>

		<comment type="block">/*
		 * We could get exactly k bits. Compute k squarings.
		 */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>montymul</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>mw62num</name></expr></argument>, <argument><expr><name>m0i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>mw62num</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="block">/*
		 * Window lookup: we want to set t2 to the window
		 * lookup value, assuming the bits are non-zero. If
		 * the window length is 1 bit only, then t2 is
		 * already set; otherwise, we do a constant-time lookup.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>win_len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mw62num</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>base</name> <operator>=</operator> <name>t2</name> <operator>+</operator> <name>mw62num</name></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>k</name><operator>)</operator></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><name>uint64_t</name></type> <name>mask</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>size_t</name></type> <name>v</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>mask</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>EQ</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<for>for <control>(<init><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name>mw62num</name></expr>;</condition> <incr><expr><name>v</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
					<expr_stmt><expr><name><name>t2</name><index>[<expr><name>v</name></expr>]</index></name> <operator>|=</operator> <name>mask</name> <operator>&amp;</operator> <name><name>base</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>
				</block_content>}</block></for>
				<expr_stmt><expr><name>base</name> <operator>+=</operator> <name>mw62num</name></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Multiply with the looked-up value. We keep the product
		 * only if the exponent bits are not all-zero.
		 */</comment>
		<expr_stmt><expr><call><name>montymul</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>mw62num</name></expr></argument>, <argument><expr><name>m0i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mask1</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>EQ</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mask2</name> <operator>=</operator> <operator>~</operator><name>mask1</name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>mw62num</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name><name>x</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mask1</name> <operator>&amp;</operator> <name><name>x</name><index>[<expr><name>u</name></expr>]</index></name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>mask2</name> <operator>&amp;</operator> <name><name>t1</name><index>[<expr><name>u</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></while>

	<comment type="block">/*
	 * Convert back from Montgomery representation.
	 */</comment>
	<expr_stmt><expr><call><name>frommonty</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>mw62num</name></expr></argument>, <argument><expr><name>m0i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Convert result into 31-bit words.
	 */</comment>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>mw31num</name></expr>;</condition> <incr><expr><name>u</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name>zw</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>zw</name> <operator>=</operator> <name><name>x</name><index>[<expr><name>u</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>x31</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>zw</name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>u</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>mw31num</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>x31</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>zw</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<comment type="block">/* see inner.h */</comment>
<function><type><name>uint32_t</name></type>
<name>br_i62_modpow_opt</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>x31</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>elen</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>m31</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>m0i31</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>twlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>mwlen</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>mwlen</name> <operator>=</operator> <operator>(</operator><name><name>m31</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">63</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>twlen</name> <operator>&lt;</operator> <name>mwlen</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>br_i31_modpow_opt</name><argument_list>(<argument><expr><name>x31</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>elen</name></expr></argument>, <argument><expr><name>m31</name></expr></argument>, <argument><expr><name>m0i31</name></expr></argument>,
		<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr></argument>, <argument><expr><name>twlen</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* see inner.h */</comment>
<function><type><name>uint32_t</name></type>
<name>br_i62_modpow_opt_as_i31</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>x31</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>elen</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>m31</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>m0i31</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>twlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * As documented, this function expects the 'tmp' argument to be
	 * 64-bit aligned. This is OK since this function is internal (it
	 * is not part of BearSSL's public API).
	 */</comment>
	<return>return <expr><call><name>br_i62_modpow_opt</name><argument_list>(<argument><expr><name>x31</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>elen</name></expr></argument>, <argument><expr><name>m31</name></expr></argument>, <argument><expr><name>m0i31</name></expr></argument>,
		<argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr></argument>, <argument><expr><name>twlen</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
