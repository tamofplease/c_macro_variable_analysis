<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/bearssl/aead/ccm.c"><comment type="block">/*
 * Copyright (c) 2017 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Implementation Notes
 * ====================
 *
 * The combined CTR + CBC-MAC functions can only handle full blocks,
 * so some buffering is necessary.
 *
 *  - 'ptr' contains a value from 0 to 15, which is the number of bytes
 *    accumulated in buf[] that still needs to be processed with the
 *    current CBC-MAC computation.
 *
 *  - When processing the message itself, CTR encryption/decryption is
 *    also done at the same time. The first 'ptr' bytes of buf[] then
 *    contains the plaintext bytes, while the last '16 - ptr' bytes of
 *    buf[] are the remnants of the stream block, to be used against
 *    the next input bytes, when available. When 'ptr' is 0, the
 *    contents of buf[] are to be ignored.
 *
 *  - The current counter and running CBC-MAC values are kept in 'ctr'
 *    and 'cbcmac', respectively.
 */</comment>

<comment type="block">/* see bearssl_block.h */</comment>
<function><type><name>void</name></type>
<name>br_ccm_init</name><parameter_list>(<parameter><decl><type><name>br_ccm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_block_ctrcbc_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>bctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name> <operator>=</operator> <name>bctx</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl_block.h */</comment>
<function><type><name>int</name></type>
<name>br_ccm_reset</name><parameter_list>(<parameter><decl><type><name>br_ccm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>nonce</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nonce_len</name></decl></parameter>,
	<parameter><decl><type><name>uint64_t</name></type> <name>aad_len</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>data_len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>tag_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>nonce_len</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">7</literal> <operator>||</operator> <name>nonce_len</name></expr></argument> &gt;</argument_list></name> <literal type="number">13</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>tag_len</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">4</literal> <operator>||</operator> <name>tag_len</name></expr></argument> &gt;</argument_list></name> <literal type="number">16</literal> <operator>||</operator> <operator>(</operator><name>tag_len</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>q</name> <operator>=</operator> <literal type="number">15</literal> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>nonce_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tag_len</name></name> <operator>=</operator> <name>tag_len</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Block B0, to start CBC-MAC.
	 */</comment>
	<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>aad_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0x40</literal></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary><operator>)</operator>
		<operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>tag_len</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator>
		<operator>|</operator> <operator>(</operator><name>q</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>nonce</name></expr></argument>, <argument><expr><name>nonce_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>q</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">15</literal> <operator>-</operator> <name>u</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>data_len</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>data_len</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>data_len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * If the data length was not entirely consumed in the
		 * loop above, then it exceeds the maximum limit of
		 * q bytes (when encoded).
		 */</comment>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Start CBC-MAC.
	 */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name><operator>)</operator><operator>-&gt;</operator><name>mac</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <name>tmp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Assemble AAD length header.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>aad_len</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_enc64be</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>aad_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>aad_len</name> <operator>&gt;=</operator> <literal type="number">0xFF00</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xFE</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_enc32be</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>aad_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>aad_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>br_enc16be</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>aad_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * Make initial counter value and compute tag mask.
	 */</comment>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>q</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>nonce</name></expr></argument>, <argument><expr><name>nonce_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctr</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>nonce_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tagmask</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>tagmask</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name><operator>)</operator><operator>-&gt;</operator><name>ctr</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctr</name></name></expr></argument>,
		<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tagmask</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>tagmask</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see bearssl_block.h */</comment>
<function><type><name>void</name></type>
<name>br_ccm_aad_inject</name><parameter_list>(<parameter><decl><type><name>br_ccm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>dbuf</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Complete partial block, if needed.
	 */</comment>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>clen</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>clen</name> <operator>=</operator> <operator>(</operator><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></sizeof><operator>)</operator> <operator>-</operator> <name>ptr</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>clen</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>ptr</name></expr></argument>, <argument><expr><name>dbuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>ptr</name></expr></argument>, <argument><expr><name>dbuf</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>dbuf</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>clen</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name><operator>)</operator><operator>-&gt;</operator><name>mac</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></expr></argument>,
			<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Process complete blocks.
	 */</comment>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>len</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>ptr</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name><operator>)</operator><operator>-&gt;</operator><name>mac</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></expr></argument>, <argument><expr><name>dbuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dbuf</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Copy last partial block in the context buffer.
	 */</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>dbuf</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl_block.h */</comment>
<function><type><name>void</name></type>
<name>br_ccm_flip</name><parameter_list>(<parameter><decl><type><name>br_ccm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>ptr</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Complete AAD partial block with zeros, if necessary.
	 */</comment>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></sizeof><operator>)</operator> <operator>-</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name><operator>)</operator><operator>-&gt;</operator><name>mac</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></expr></argument>,
			<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Counter was already set by br_ccm_reset().
	 */</comment>
</block_content>}</block></function>

<comment type="block">/* see bearssl_block.h */</comment>
<function><type><name>void</name></type>
<name>br_ccm_run</name><parameter_list>(<parameter><decl><type><name>br_ccm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encrypt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>dbuf</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Complete a partial block, if any: ctx-&gt;buf[] contains
	 * ctx-&gt;ptr plaintext bytes (already reported), and the other
	 * bytes are CTR stream output.
	 */</comment>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>clen</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>clen</name> <operator>=</operator> <operator>(</operator><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></sizeof><operator>)</operator> <operator>-</operator> <name>ptr</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>clen</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>clen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>encrypt</name></expr>)</condition> <block>{<block_content>
			<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>clen</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><name>unsigned</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>ptr</name> <operator>+</operator> <name>u</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>dbuf</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>ptr</name> <operator>+</operator> <name>u</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>dbuf</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>w</name> <operator>^</operator> <name>x</name></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>clen</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><name>unsigned</name></type> <name>w</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>ptr</name> <operator>+</operator> <name>u</name></expr>]</index></name> <operator>^</operator> <name><name>dbuf</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>dbuf</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>ptr</name> <operator>+</operator> <name>u</name></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>dbuf</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>clen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&lt;</operator> <sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></sizeof></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name><operator>)</operator><operator>-&gt;</operator><name>mac</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name></expr></argument>,
			<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Process all complete blocks. Note that the ctrcbc API is for
	 * encrypt-then-MAC (CBC-MAC is computed over the encrypted
	 * blocks) while CCM uses MAC-and-encrypt (CBC-MAC is computed
	 * over the plaintext blocks). Therefore, we need to use the
	 * _decryption_ function for encryption, and the encryption
	 * function for decryption (this works because CTR encryption
	 * and decryption are identical, so the choice really is about
	 * computing the CBC-MAC before or after XORing with the CTR
	 * stream).
	 */</comment>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>len</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>ptr</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>encrypt</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name><operator>)</operator><operator>-&gt;</operator><name>decrypt</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctr</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></expr></argument>,
			<argument><expr><name>dbuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name><operator>)</operator><operator>-&gt;</operator><name>encrypt</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctr</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></expr></argument>,
			<argument><expr><name>dbuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>dbuf</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * If there is some remaining data, then we need to compute an
	 * extra block of CTR stream.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name><operator>)</operator><operator>-&gt;</operator><name>ctr</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctr</name></name></expr></argument>,
			<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>encrypt</name></expr>)</condition> <block>{<block_content>
			<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>ptr</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><name>unsigned</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>dbuf</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>dbuf</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>w</name> <operator>^</operator> <name>x</name></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>ptr</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><name>unsigned</name></type> <name>w</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>u</name></expr>]</index></name> <operator>^</operator> <name><name>dbuf</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>dbuf</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl_block.h */</comment>
<function><type><name>size_t</name></type>
<name>br_ccm_get_tag</name><parameter_list>(<parameter><decl><type><name>br_ccm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * If there is some buffered data, then we need to pad it with
	 * zeros and finish up CBC-MAC.
	 */</comment>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></sizeof><operator>)</operator> <operator>-</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name><operator>)</operator><operator>-&gt;</operator><name>mac</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></expr></argument>,
			<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * XOR the tag mask into the CBC-MAC output.
	 */</comment>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tag_len</name></name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name><index>[<expr><name>u</name></expr>]</index></name> <operator>^=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tagmask</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tag_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>tag_len</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see bearssl_block.h */</comment>
<function><type><name>uint32_t</name></type>
<name>br_ccm_check_tag</name><parameter_list>(<parameter><decl><type><name>br_ccm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>tag_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>z</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tag_len</name> <operator>=</operator> <call><name>br_ccm_get_tag</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>tag_len</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>z</name> <operator>|=</operator> <name><name>tmp</name><index>[<expr><name>u</name></expr>]</index></name> <operator>^</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>tag</name><operator>)</operator><index>[<expr><name>u</name></expr>]</index></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><call><name>EQ0</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
