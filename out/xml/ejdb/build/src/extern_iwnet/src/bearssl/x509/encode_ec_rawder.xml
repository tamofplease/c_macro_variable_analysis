<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/bearssl/x509/encode_ec_rawder.c"><comment type="block">/*
 * Copyright (c) 2018 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/* see inner.h */</comment>
<function><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>br_get_curve_OID</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>OID_secp256r1</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x07</literal></expr>
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>OID_secp384r1</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x22</literal></expr>
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>OID_secp521r1</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x23</literal></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>curve</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>BR_EC_secp256r1</name></expr>:</case>  <return>return <expr><name>OID_secp256r1</name></expr>;</return>
	<case>case <expr><name>BR_EC_secp384r1</name></expr>:</case>  <return>return <expr><name>OID_secp384r1</name></expr>;</return>
	<case>case <expr><name>BR_EC_secp521r1</name></expr>:</case>  <return>return <expr><name>OID_secp521r1</name></expr>;</return>
	<default>default:</default>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* see inner.h */</comment>
<function><type><name>size_t</name></type>
<name>br_encode_ec_raw_der_inner</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>br_ec_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_ec_public_key</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>include_curve_oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * ASN.1 format:
	 *
	 *   ECPrivateKey ::= SEQUENCE {
	 *     version        INTEGER { ecPrivkeyVer1(1) } (ecPrivkeyVer1),
	 *     privateKey     OCTET STRING,
	 *     parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,
	 *     publicKey  [1] BIT STRING OPTIONAL
	 *   }
	 *
	 * The tages '[0]' and '[1]' are explicit. The 'ECParameters'
	 * is a CHOICE; in our case, it will always be an OBJECT IDENTIFIER
	 * that identifies the curve.
	 *
	 * The value of the 'privateKey' field is the raw unsigned big-endian
	 * encoding of the private key (integer modulo the curve subgroup
	 * order); there is no INTEGER tag, and the leading bit may be 1.
	 * Also, leading bytes of value 0x00 are _not_ removed.
	 *
	 * The 'publicKey' contents are the raw encoded public key point,
	 * normally uncompressed (leading byte of value 0x04, followed
	 * by the unsigned big-endian encodings of the X and Y coordinates,
	 * padded to the full field length if necessary).
	 */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>len_version</name></decl>, <decl><type ref="prev"/><name>len_privateKey</name></decl>, <decl><type ref="prev"/><name>len_parameters</name></decl>, <decl><type ref="prev"/><name>len_publicKey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len_publicKey_bits</name></decl>, <decl><type ref="prev"/><name>len_seq</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>oid</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>include_curve_oid</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>oid</name> <operator>=</operator> <call><name>br_get_curve_OID</name><argument_list>(<argument><expr><name><name>sk</name><operator>-&gt;</operator><name>curve</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>oid</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>oid</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>len_version</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>len_privateKey</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>len_of_len</name><argument_list>(<argument><expr><name><name>sk</name><operator>-&gt;</operator><name>xlen</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>sk</name><operator>-&gt;</operator><name>xlen</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>include_curve_oid</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>len_parameters</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>len_parameters</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>pk</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>len_publicKey</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>len_publicKey_bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>len_publicKey_bits</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <call><name>len_of_len</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>qlen</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>pk</name><operator>-&gt;</operator><name>qlen</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len_publicKey</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>len_of_len</name><argument_list>(<argument><expr><name>len_publicKey_bits</name></expr></argument>)</argument_list></call>
			<operator>+</operator> <name>len_publicKey_bits</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>len_seq</name> <operator>=</operator> <name>len_version</name> <operator>+</operator> <name>len_privateKey</name> <operator>+</operator> <name>len_parameters</name> <operator>+</operator> <name>len_publicKey</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>dest</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">1</literal> <operator>+</operator> <call><name>len_of_len</name><argument_list>(<argument><expr><name>len_seq</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>len_seq</name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>lenlen</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x30</literal></expr>;</expr_stmt>  <comment type="block">/* SEQUENCE tag */</comment>
		<expr_stmt><expr><name>lenlen</name> <operator>=</operator> <call><name>br_asn1_encode_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len_seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>lenlen</name></expr>;</expr_stmt>

		<comment type="block">/* version */</comment>
		<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

		<comment type="block">/* privateKey */</comment>
		<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x04</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf</name> <operator>+=</operator> <call><name>br_asn1_encode_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>xlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>xlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name><name>sk</name><operator>-&gt;</operator><name>xlen</name></name></expr>;</expr_stmt>

		<comment type="block">/* parameters */</comment>
		<if_stmt><if>if <condition>(<expr><name>include_curve_oid</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>++</operator> <operator>=</operator> <literal type="number">0xA0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>++</operator> <operator>=</operator> <name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x06</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* publicKey */</comment>
		<if_stmt><if>if <condition>(<expr><name>pk</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>++</operator> <operator>=</operator> <literal type="number">0xA1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>buf</name> <operator>+=</operator> <call><name>br_asn1_encode_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len_publicKey_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>buf</name> <operator>+=</operator> <call><name>br_asn1_encode_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>qlen</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>qlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* buf += pk-&gt;qlen; */</comment>
		</block_content>}</block></if></if_stmt>

		<return>return <expr><literal type="number">1</literal> <operator>+</operator> <name>lenlen</name> <operator>+</operator> <name>len_seq</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl_x509.h */</comment>
<function><type><name>size_t</name></type>
<name>br_encode_ec_raw_der</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>br_ec_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_ec_public_key</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>br_encode_ec_raw_der_inner</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>sk</name></expr></argument>, <argument><expr><name>pk</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
