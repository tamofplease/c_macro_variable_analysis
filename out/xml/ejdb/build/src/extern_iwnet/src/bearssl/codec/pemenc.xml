<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/bearssl/codec/pemenc.c"><comment type="block">/*
 * Copyright (c) 2018 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Get the appropriate Base64 character for a numeric value in the
 * 0..63 range. This is constant-time.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name></type>
<name>b64char</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Values 0 to 25 map to 0x41..0x5A ('A' to 'Z')
	 * Values 26 to 51 map to 0x61..0x7A ('a' to 'z')
	 * Values 52 to 61 map to 0x30..0x39 ('0' to '9')
	 * Value 62 maps to 0x2B ('+')
	 * Value 63 maps to 0x2F ('/')
	 */</comment>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>x</name> <operator>-</operator> <literal type="number">26</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <name>x</name> <operator>-</operator> <literal type="number">52</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name>x</name> <operator>-</operator> <literal type="number">62</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Looking at bits 8..15 of values a, b and c:
	 *
	 *     x       a   b   c
	 *  ---------------------
	 *   0..25    FF  FF  FF
	 *   26..51   00  FF  FF
	 *   52..61   00  00  FF
	 *   62..63   00  00  00
	 */</comment>
	<return>return <expr><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">0x41</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>a</name> <operator>&amp;</operator> <name>b</name> <operator>&amp;</operator> <name>c</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator>
		<operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>+</operator> <operator>(</operator><literal type="number">0x61</literal> <operator>-</operator> <literal type="number">26</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>~</operator><name>a</name> <operator>&amp;</operator> <name>b</name> <operator>&amp;</operator> <name>c</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator>
		<operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>-</operator> <operator>(</operator><literal type="number">52</literal> <operator>-</operator> <literal type="number">0x30</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>~</operator><name>a</name> <operator>&amp;</operator> <operator>~</operator><name>b</name> <operator>&amp;</operator> <name>c</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator>
		<operator>|</operator> <operator>(</operator><operator>(</operator><literal type="number">0x2B</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><operator>(</operator><name>a</name> <operator>|</operator> <name>b</name> <operator>|</operator> <name>c</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see bearssl_pem.h */</comment>
<function><type><name>size_t</name></type>
<name>br_pem_encode</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>banner</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>dlen</name></decl>, <decl><type ref="prev"/><name>banner_len</name></decl>, <decl><type ref="prev"/><name>lines</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>, <decl><type ref="prev"/><name>lim</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>banner_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>banner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* FIXME: try to avoid divisions here, as they may pull
	   an extra libc function. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BR_PEM_LINE64</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>lines</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">47</literal><operator>)</operator> <operator>/</operator> <literal type="number">48</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>lines</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">56</literal><operator>)</operator> <operator>/</operator> <literal type="number">57</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>dlen</name> <operator>=</operator> <operator>(</operator><name>banner_len</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator>
		<operator>+</operator> <name>lines</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BR_PEM_CRLF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>dlen</name> <operator>+=</operator> <name>lines</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dest</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>dlen</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>d</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * We always move the source data to the end of output buffer;
	 * the encoding process never "catches up" except at the very
	 * end. This also handles all conditions of partial or total
	 * overlap.
	 */</comment>
	<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>d</name> <operator>+</operator> <name>dlen</name> <operator>-</operator> <name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"-----BEGIN "</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>banner</name></expr></argument>, <argument><expr><name>banner_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name> <operator>+=</operator> <name>banner_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"-----"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BR_PEM_CRLF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x0D</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x0A</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>lim</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BR_PEM_LINE64</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">19</literal></expr></else></ternary></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>u</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>u</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>w</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>buf</name><index>[<expr><name>u</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>
			<operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>buf</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>
			<operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>buf</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <call><name>b64char</name><argument_list>(<argument><expr><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <call><name>b64char</name><argument_list>(<argument><expr><operator>(</operator><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <call><name>b64char</name><argument_list>(<argument><expr><operator>(</operator><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <call><name>b64char</name><argument_list>(<argument><expr><name>w</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>++</operator> <name>off</name> <operator>==</operator> <name>lim</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BR_PEM_CRLF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x0D</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x0A</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>u</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>w</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>buf</name><index>[<expr><name>u</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>u</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>w</name> <operator>|=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>buf</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <call><name>b64char</name><argument_list>(<argument><expr><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <call><name>b64char</name><argument_list>(<argument><expr><operator>(</operator><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>u</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <call><name>b64char</name><argument_list>(<argument><expr><operator>(</operator><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x3D</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x3D</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>off</name> <operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>off</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BR_PEM_CRLF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x0D</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x0A</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"-----END "</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>banner</name></expr></argument>, <argument><expr><name>banner_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name> <operator>+=</operator> <name>banner_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"-----"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BR_PEM_CRLF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x0D</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x0A</literal></expr>;</expr_stmt>

	<comment type="block">/* Final zero, not counted in returned length. */</comment>
	<expr_stmt><expr><operator>*</operator><name>d</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

	<return>return <expr><name>dlen</name></expr>;</return>
</block_content>}</block></function>
</unit>
