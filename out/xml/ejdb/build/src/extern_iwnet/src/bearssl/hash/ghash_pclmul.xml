<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/bearssl/hash/ghash_pclmul.c"><comment type="block">/*
 * Copyright (c) 2017 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ENABLE_INTRINSICS</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/*
 * This is the GHASH implementation that leverages the pclmulqdq opcode
 * (from the AES-NI instructions).
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_AES_X86NI</name></expr></cpp:if>

<comment type="block">/*
 * Test CPU support for PCLMULQDQ.
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>pclmul_supported</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Bit mask for features in ECX:
	 *    1   PCLMULQDQ support
	 */</comment>
	<return>return <expr><call><name>br_cpuid</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x00000002</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see bearssl_hash.h */</comment>
<function><type><name>br_ghash</name></type>
<name>br_ghash_pclmul_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><call><name>pclmul_supported</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><operator>&amp;</operator><name>br_ghash_pclmul</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>BR_TARGETS_X86_UP</name></type>

<comment type="block">/*
 * GHASH is defined over elements of GF(2^128) with "full little-endian"
 * representation: leftmost byte is least significant, and, within each
 * byte, leftmost _bit_ is least significant. The natural ordering in
 * x86 is "mixed little-endian": bytes are ordered from least to most
 * significant, but bits within a byte are in most-to-least significant
 * order. Going to full little-endian representation would require
 * reversing bits within each byte, which is doable but expensive.
 *
 * Instead, we go to full big-endian representation, by swapping bytes
 * around, which is done with a single _mm_shuffle_epi8() opcode (it
 * comes with SSSE3; all CPU that offer pclmulqdq also have SSSE3). We
 * can use a full big-endian representation because in a carryless
 * multiplication, we have a nice bit reversal property:
 *
 *    rev_128(x) * rev_128(y) = rev_255(x * y)
 *
 * So by using full big-endian, we still get the right result, except
 * that it is right-shifted by 1 bit. The left-shift is relatively
 * inexpensive, and it can be mutualised.
 *
 *
 * Since SSE2 opcodes do not have facilities for shitfting full 128-bit
 * values with bit precision, we have to break down values into 64-bit
 * chunks. We number chunks from 0 to 3 in left to right order.
 */</comment>

<comment type="block">/*
 * Byte-swap a complete 128-bit value. This normally uses
 * _mm_shuffle_epi8(), which gets translated to pshufb (an SSSE3 opcode).
 * However, this crashes old Clang versions, so, for Clang before 3.8,
 * we use an alternate (and less efficient) version.
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_CLANG</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>BR_CLANG_3_8</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTESWAP_DECL</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTESWAP_PREP</name></cpp:macro>   <cpp:value>(void)0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTESWAP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>do { \
		__m128i byteswap1, byteswap2; \
		byteswap1 = (x); \
		byteswap2 = _mm_srli_epi16(byteswap1, 8); \
		byteswap1 = _mm_slli_epi16(byteswap1, 8); \
		byteswap1 = _mm_or_si128(byteswap1, byteswap2); \
		byteswap1 = _mm_shufflelo_epi16(byteswap1, 0x1B); \
		byteswap1 = _mm_shufflehi_epi16(byteswap1, 0x1B); \
		(x) = _mm_shuffle_epi32(byteswap1, 0x4E); \
	} while (0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTESWAP_DECL</name></cpp:macro>   <cpp:value>__m128i byteswap_index;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTESWAP_PREP</name></cpp:macro>   <cpp:value>do { \
		byteswap_index = _mm_set_epi8( \
			0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15); \
	} while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTESWAP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>do { \
		(x) = _mm_shuffle_epi8((x), byteswap_index); \
	} while (0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Call pclmulqdq. Clang appears to have trouble with the intrinsic, so,
 * for that compiler, we use inline assembly. Inline assembly is
 * potentially a bit slower because the compiler does not understand
 * what the opcode does, and thus cannot optimize instruction
 * scheduling.
 *
 * We use a target of "sse2" only, so that Clang may still handle the
 * '__m128i' type and allocate SSE2 registers.
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_CLANG</name></expr></cpp:if>
<name>BR_TARGET</name><argument_list>(<argument><expr><literal type="string">"sse2"</literal></expr></argument>)</argument_list>
static <namespace><specifier>inline</specifier> __m128i
<name>pclmulqdq00</name>(<name>__m128i</name> <name>x</name><operator>,</operator> <name>__m128i</name> <name>y</name></namespace></decl>)
<block>{<block_content>
	<asm>__asm__ ("pclmulqdq $0x00, %1, %0" : "+x" (x) : "x" (y));</asm>
	<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></decl_stmt>
<macro><name>BR_TARGET</name><argument_list>(<argument><literal type="string">"sse2"</literal></argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__m128i</name></type>
<name>pclmulqdq11</name><parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>__m128i</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<asm>__asm__ ("pclmulqdq $0x11, %1, %0" : "+x" (x) : "x" (y));</asm>
	<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pclmulqdq00</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>_mm_clmulepi64_si128(x, y, 0x00)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pclmulqdq11</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>_mm_clmulepi64_si128(x, y, 0x11)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * From a 128-bit value kw, compute kx as the XOR of the two 64-bit
 * halves of kw (into the right half of kx; left half is unspecified).
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BK</name><parameter_list>(<parameter><type><name>kw</name></type></parameter>, <parameter><type><name>kx</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>do { \
		kx = _mm_xor_si128(kw, _mm_shuffle_epi32(kw, 0x0E)); \
	} while (0)</cpp:value></cpp:define>

<comment type="block">/*
 * Combine two 64-bit values (k0:k1) into a 128-bit (kw) value and
 * the XOR of the two values (kx).
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PBK</name><parameter_list>(<parameter><type><name>k0</name></type></parameter>, <parameter><type><name>k1</name></type></parameter>, <parameter><type><name>kw</name></type></parameter>, <parameter><type><name>kx</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>do { \
		kw = _mm_unpacklo_epi64(k1, k0); \
		kx = _mm_xor_si128(k0, k1); \
	} while (0)</cpp:value></cpp:define>

<comment type="block">/*
 * Left-shift by 1 bit a 256-bit value (in four 64-bit words).
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SL_256</name><parameter_list>(<parameter><type><name>x0</name></type></parameter>, <parameter><type><name>x1</name></type></parameter>, <parameter><type><name>x2</name></type></parameter>, <parameter><type><name>x3</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>do { \
		x0 = _mm_or_si128( \
			_mm_slli_epi64(x0, 1), \
			_mm_srli_epi64(x1, 63)); \
		x1 = _mm_or_si128( \
			_mm_slli_epi64(x1, 1), \
			_mm_srli_epi64(x2, 63)); \
		x2 = _mm_or_si128( \
			_mm_slli_epi64(x2, 1), \
			_mm_srli_epi64(x3, 63)); \
		x3 = _mm_slli_epi64(x3, 1); \
	} while (0)</cpp:value></cpp:define>

<comment type="block">/*
 * Perform reduction in GF(2^128). The 256-bit value is in x0..x3;
 * result is written in x0..x1.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDUCE_F128</name><parameter_list>(<parameter><type><name>x0</name></type></parameter>, <parameter><type><name>x1</name></type></parameter>, <parameter><type><name>x2</name></type></parameter>, <parameter><type><name>x3</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>do { \
		x1 = _mm_xor_si128( \
			x1, \
			_mm_xor_si128( \
				_mm_xor_si128( \
					x3, \
					_mm_srli_epi64(x3, 1)), \
				_mm_xor_si128( \
					_mm_srli_epi64(x3, 2), \
					_mm_srli_epi64(x3, 7)))); \
		x2 = _mm_xor_si128( \
			_mm_xor_si128( \
				x2, \
				_mm_slli_epi64(x3, 63)), \
			_mm_xor_si128( \
				_mm_slli_epi64(x3, 62), \
				_mm_slli_epi64(x3, 57))); \
		x0 = _mm_xor_si128( \
			x0, \
			_mm_xor_si128( \
				_mm_xor_si128( \
					x2, \
					_mm_srli_epi64(x2, 1)), \
				_mm_xor_si128( \
					_mm_srli_epi64(x2, 2), \
					_mm_srli_epi64(x2, 7)))); \
		x1 = _mm_xor_si128( \
			_mm_xor_si128( \
				x1, \
				_mm_slli_epi64(x2, 63)), \
			_mm_xor_si128( \
				_mm_slli_epi64(x2, 62), \
				_mm_slli_epi64(x2, 57))); \
	} while (0)</cpp:value></cpp:define>

<comment type="block">/*
 * Square value kw into (dw,dx).
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQUARE_F128</name><parameter_list>(<parameter><type><name>kw</name></type></parameter>, <parameter><type><name>dw</name></type></parameter>, <parameter><type><name>dx</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>do { \
		__m128i z0, z1, z2, z3; \
		z1 = pclmulqdq11(kw, kw); \
		z3 = pclmulqdq00(kw, kw); \
		z0 = _mm_shuffle_epi32(z1, 0x0E); \
		z2 = _mm_shuffle_epi32(z3, 0x0E); \
		SL_256(z0, z1, z2, z3); \
		REDUCE_F128(z0, z1, z2, z3); \
		PBK(z0, z1, dw, dx); \
	} while (0)</cpp:value></cpp:define>

<comment type="block">/* see bearssl_hash.h */</comment>
<macro><name>BR_TARGET</name><argument_list>(<argument><literal type="string">"ssse3,pclmul"</literal></argument>)</argument_list></macro>
<function><type><name>void</name></type>
<name>br_ghash_pclmul</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>num4</name></decl>, <decl><type ref="prev"/><name>num1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>__m128i</name></type> <name>yw</name></decl>, <decl><type ref="prev"/><name>h1w</name></decl>, <decl><type ref="prev"/><name>h1x</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BYTESWAP_DECL</name></type>

	<comment type="block">/*
	 * We split data into two chunks. First chunk starts at buf1
	 * and contains num4 blocks of 64-byte values. Second chunk
	 * starts at buf2 and contains num1 blocks of 16-byte values.
	 * We want the first chunk to be as large as possible.
	 */</comment>
	<name>buf1</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>num4</name> <operator>=</operator> <name>len</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>&amp;=</operator> <literal type="number">63</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>buf2</name> <operator>=</operator> <name>buf1</name> <operator>+</operator> <operator>(</operator><name>num4</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>num1</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>num1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf2</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Preparatory step for endian conversions.
	 */</comment>
	<expr_stmt><expr><name>BYTESWAP_PREP</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Load y and h.
	 */</comment>
	<expr_stmt><expr><name>yw</name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>h1w</name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>BYTESWAP</name><argument_list>(<argument><expr><name>yw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>BYTESWAP</name><argument_list>(<argument><expr><name>h1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>BK</name><argument_list>(<argument><expr><name>h1w</name></expr></argument>, <argument><expr><name>h1x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>num4</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>__m128i</name></type> <name>h2w</name></decl>, <decl><type ref="prev"/><name>h2x</name></decl>, <decl><type ref="prev"/><name>h3w</name></decl>, <decl><type ref="prev"/><name>h3x</name></decl>, <decl><type ref="prev"/><name>h4w</name></decl>, <decl><type ref="prev"/><name>h4x</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>__m128i</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Compute h2 = h^2.
		 */</comment>
		<expr_stmt><expr><call><name>SQUARE_F128</name><argument_list>(<argument><expr><name>h1w</name></expr></argument>, <argument><expr><name>h2w</name></expr></argument>, <argument><expr><name>h2x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Compute h3 = h^3 = h*(h^2).
		 */</comment>
		<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>pclmulqdq11</name><argument_list>(<argument><expr><name>h1w</name></expr></argument>, <argument><expr><name>h2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t3</name> <operator>=</operator> <call><name>pclmulqdq00</name><argument_list>(<argument><expr><name>h1w</name></expr></argument>, <argument><expr><name>h2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><call><name>pclmulqdq00</name><argument_list>(<argument><expr><name>h1x</name></expr></argument>, <argument><expr><name>h2x</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t0</name> <operator>=</operator> <call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">0x0E</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">0x0E</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">0x0E</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SL_256</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>REDUCE_F128</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PBK</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>h3w</name></expr></argument>, <argument><expr><name>h3x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Compute h4 = h^4 = (h^2)^2.
		 */</comment>
		<expr_stmt><expr><call><name>SQUARE_F128</name><argument_list>(<argument><expr><name>h2w</name></expr></argument>, <argument><expr><name>h4w</name></expr></argument>, <argument><expr><name>h4x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<while>while <condition>(<expr><name>num4</name> <operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>__m128i</name></type> <name>aw0</name></decl>, <decl><type ref="prev"/><name>aw1</name></decl>, <decl><type ref="prev"/><name>aw2</name></decl>, <decl><type ref="prev"/><name>aw3</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>__m128i</name></type> <name>ax0</name></decl>, <decl><type ref="prev"/><name>ax1</name></decl>, <decl><type ref="prev"/><name>ax2</name></decl>, <decl><type ref="prev"/><name>ax3</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>aw0</name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf1</name> <operator>+</operator>  <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>aw1</name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf1</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>aw2</name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf1</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>aw3</name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf1</name> <operator>+</operator> <literal type="number">48</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>BYTESWAP</name><argument_list>(<argument><expr><name>aw0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>BYTESWAP</name><argument_list>(<argument><expr><name>aw1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>BYTESWAP</name><argument_list>(<argument><expr><name>aw2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>BYTESWAP</name><argument_list>(<argument><expr><name>aw3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>buf1</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

			<expr_stmt><expr><name>aw0</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>aw0</name></expr></argument>, <argument><expr><name>yw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>BK</name><argument_list>(<argument><expr><name>aw1</name></expr></argument>, <argument><expr><name>ax1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>BK</name><argument_list>(<argument><expr><name>aw2</name></expr></argument>, <argument><expr><name>ax2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>BK</name><argument_list>(<argument><expr><name>aw3</name></expr></argument>, <argument><expr><name>ax3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>BK</name><argument_list>(<argument><expr><name>aw0</name></expr></argument>, <argument><expr><name>ax0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(
				<argument><expr><call><name>_mm_xor_si128</name><argument_list>(
					<argument><expr><call><name>pclmulqdq11</name><argument_list>(<argument><expr><name>aw0</name></expr></argument>, <argument><expr><name>h4w</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><call><name>pclmulqdq11</name><argument_list>(<argument><expr><name>aw1</name></expr></argument>, <argument><expr><name>h3w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>_mm_xor_si128</name><argument_list>(
					<argument><expr><call><name>pclmulqdq11</name><argument_list>(<argument><expr><name>aw2</name></expr></argument>, <argument><expr><name>h2w</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><call><name>pclmulqdq11</name><argument_list>(<argument><expr><name>aw3</name></expr></argument>, <argument><expr><name>h1w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>t3</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(
				<argument><expr><call><name>_mm_xor_si128</name><argument_list>(
					<argument><expr><call><name>pclmulqdq00</name><argument_list>(<argument><expr><name>aw0</name></expr></argument>, <argument><expr><name>h4w</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><call><name>pclmulqdq00</name><argument_list>(<argument><expr><name>aw1</name></expr></argument>, <argument><expr><name>h3w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>_mm_xor_si128</name><argument_list>(
					<argument><expr><call><name>pclmulqdq00</name><argument_list>(<argument><expr><name>aw2</name></expr></argument>, <argument><expr><name>h2w</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><call><name>pclmulqdq00</name><argument_list>(<argument><expr><name>aw3</name></expr></argument>, <argument><expr><name>h1w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(
				<argument><expr><call><name>_mm_xor_si128</name><argument_list>(
					<argument><expr><call><name>pclmulqdq00</name><argument_list>(<argument><expr><name>ax0</name></expr></argument>, <argument><expr><name>h4x</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><call><name>pclmulqdq00</name><argument_list>(<argument><expr><name>ax1</name></expr></argument>, <argument><expr><name>h3x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>_mm_xor_si128</name><argument_list>(
					<argument><expr><call><name>pclmulqdq00</name><argument_list>(<argument><expr><name>ax2</name></expr></argument>, <argument><expr><name>h2x</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><call><name>pclmulqdq00</name><argument_list>(<argument><expr><name>ax3</name></expr></argument>, <argument><expr><name>h1x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>t0</name> <operator>=</operator> <call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">0x0E</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">0x0E</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">0x0E</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SL_256</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>REDUCE_F128</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>yw</name> <operator>=</operator> <call><name>_mm_unpacklo_epi64</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><name>num1</name> <operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>__m128i</name></type> <name>aw</name></decl>, <decl><type ref="prev"/><name>ax</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>__m128i</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>aw</name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>BYTESWAP</name><argument_list>(<argument><expr><name>aw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf2</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name>aw</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>aw</name></expr></argument>, <argument><expr><name>yw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>BK</name><argument_list>(<argument><expr><name>aw</name></expr></argument>, <argument><expr><name>ax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>pclmulqdq11</name><argument_list>(<argument><expr><name>aw</name></expr></argument>, <argument><expr><name>h1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t3</name> <operator>=</operator> <call><name>pclmulqdq00</name><argument_list>(<argument><expr><name>aw</name></expr></argument>, <argument><expr><name>h1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>pclmulqdq00</name><argument_list>(<argument><expr><name>ax</name></expr></argument>, <argument><expr><name>h1x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t0</name> <operator>=</operator> <call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">0x0E</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">0x0E</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">0x0E</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SL_256</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>REDUCE_F128</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>yw</name> <operator>=</operator> <call><name>_mm_unpacklo_epi64</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>BYTESWAP</name><argument_list>(<argument><expr><name>yw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>yw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>BR_TARGETS_X86_DOWN</name>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<comment type="block">/* see bearssl_hash.h */</comment>
<name>br_ghash</name></type>
<name>br_ghash_pclmul_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
