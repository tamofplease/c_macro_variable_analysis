<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/bearssl/aead/gcm.c"><comment type="block">/*
 * Copyright (c) 2017 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Implementation Notes
 * ====================
 *
 * Since CTR and GHASH implementations can handle only full blocks, a
 * 16-byte buffer (buf[]) is maintained in the context:
 *
 *  - When processing AAD, buf[] contains the 0-15 unprocessed bytes.
 *
 *  - When doing CTR encryption / decryption, buf[] contains the AES output
 *    for the last partial block, to be used with the next few bytes of
 *    data, as well as the already encrypted bytes. For instance, if the
 *    processed data length so far is 21 bytes, then buf[0..4] contains
 *    the five last encrypted bytes, and buf[5..15] contains the next 11
 *    AES output bytes to be XORed with the next 11 bytes of input.
 *
 *    The recorded AES output bytes are used to complete the block when
 *    the corresponding bytes are obtained. Note that buf[] always
 *    contains the _encrypted_ bytes, whether we apply encryption or
 *    decryption: these bytes are used as input to GHASH when the block
 *    is complete.
 *
 * In both cases, the low bits of the data length counters (count_aad,
 * count_ctr) are used to work out the current situation.
 */</comment>

<comment type="block">/* see bearssl_aead.h */</comment>
<function><type><name>void</name></type>
<name>br_gcm_init</name><parameter_list>(<parameter><decl><type><name>br_gcm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_block_ctr_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>bctx</name></decl></parameter>, <parameter><decl><type><name>br_ghash</name></type> <name>gh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>iv</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>vtable</name></name> <operator>=</operator> <operator>&amp;</operator><name>br_gcm_vtable</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name> <operator>=</operator> <name>bctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gh</name></name> <operator>=</operator> <name>gh</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * The GHASH key h[] is the raw encryption of the all-zero
	 * block. Since we only have a CTR implementation, we use it
	 * with an all-zero IV and a zero counter, to CTR-encrypt an
	 * all-zero block.
	 */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>h</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>iv</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>bctx</name><operator>)</operator><operator>-&gt;</operator><name>run</name></name><argument_list>(<argument><expr><name>bctx</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>h</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl_aead.h */</comment>
<function><type><name>void</name></type>
<name>br_gcm_reset</name><parameter_list>(<parameter><decl><type><name>br_gcm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * If the provided nonce is 12 bytes, then this is the initial
	 * IV for CTR mode; it will be used with a counter that starts
	 * at 2 (value 1 is for encrypting the GHASH output into the tag).
	 *
	 * If the provided nonce has any other length, then it is hashed
	 * (with GHASH) into a 16-byte value that will be the IV for CTR
	 * (both 12-byte IV and 32-bit counter).
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>j0_1</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>j0_2</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ty</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ty</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>ty</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>gh</name></name><argument_list>(<argument><expr><name>ty</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_enc64be</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>len</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>gh</name></name><argument_list>(<argument><expr><name>ty</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>j0_1</name></name></expr></argument>, <argument><expr><name>ty</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>j0_2</name></name> <operator>=</operator> <call><name>br_dec32be</name><argument_list>(<argument><expr><name>ty</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>jc</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>j0_2</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>y</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>count_aad</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>count_ctr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl_aead.h */</comment>
<function><type><name>void</name></type>
<name>br_gcm_aad_inject</name><parameter_list>(<parameter><decl><type><name>br_gcm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>ptr</name></decl>, <decl><type ref="prev"/><name>dlen</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>count_aad</name></name> <operator>&amp;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">15</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * If there is a partial block, then we first try to
		 * complete it.
		 */</comment>
		<decl_stmt><decl><type><name>size_t</name></type> <name>clen</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>clen</name> <operator>=</operator> <literal type="number">16</literal> <operator>-</operator> <name>ptr</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>clen</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>ptr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>count_aad</name></name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>ptr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>gh</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <name>clen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>clen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>count_aad</name></name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>clen</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Now AAD is aligned on a 16-byte block (with regards to GHASH).
	 * We process all complete blocks, and save the last partial
	 * block.
	 */</comment>
	<expr_stmt><expr><name>dlen</name> <operator>=</operator> <name>len</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">15</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>gh</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <name>dlen</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>count_aad</name></name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl_aead.h */</comment>
<function><type><name>void</name></type>
<name>br_gcm_flip</name><parameter_list>(<parameter><decl><type><name>br_gcm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * We complete the GHASH computation if there is a partial block.
	 * The GHASH implementation automatically applies padding with
	 * zeros.
	 */</comment>
	<decl_stmt><decl><type><name>size_t</name></type> <name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>count_aad</name></name> <operator>&amp;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">15</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>gh</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl_aead.h */</comment>
<function><type><name>void</name></type>
<name>br_gcm_run</name><parameter_list>(<parameter><decl><type><name>br_gcm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encrypt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>ptr</name></decl>, <decl><type ref="prev"/><name>dlen</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>count_ctr</name></name> <operator>&amp;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">15</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * If we have a partial block, then we try to complete it.
		 */</comment>
		<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>clen</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>clen</name> <operator>=</operator> <literal type="number">16</literal> <operator>-</operator> <name>ptr</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>clen</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>clen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>clen</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>unsigned</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>y</name> <operator>=</operator> <name>x</name> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>ptr</name> <operator>+</operator> <name>u</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>ptr</name> <operator>+</operator> <name>u</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>encrypt</name></expr> ?</condition><then> <expr><name>y</name></expr> </then><else>: <expr><name>x</name></expr></else></ternary></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>buf</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>count_ctr</name></name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>clen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>clen</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>+</operator> <name>clen</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>gh</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Process full blocks.
	 */</comment>
	<expr_stmt><expr><name>dlen</name> <operator>=</operator> <name>len</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">15</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>encrypt</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>gh</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>jc</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name><operator>)</operator><operator>-&gt;</operator><name>run</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>j0_1</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jc</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>encrypt</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>gh</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>dlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>dlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>count_ctr</name></name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>dlen</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * There is a partial block.
		 */</comment>
		<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>jc</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name><operator>)</operator><operator>-&gt;</operator><name>run</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>j0_1</name></name></expr></argument>,
			<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jc</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>unsigned</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>y</name> <operator>=</operator> <name>x</name> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>encrypt</name></expr> ?</condition><then> <expr><name>y</name></expr> </then><else>: <expr><name>x</name></expr></else></ternary></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>buf</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>count_ctr</name></name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl_aead.h */</comment>
<function><type><name>void</name></type>
<name>br_gcm_get_tag</name><parameter_list>(<parameter><decl><type><name>br_gcm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>count_ctr</name></name> <operator>&amp;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">15</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * There is a partial block: encrypted/decrypted data has
		 * been produced, but the encrypted bytes must still be
		 * processed by GHASH.
		 */</comment>
		<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>gh</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Final block for GHASH: the AAD and plaintext lengths (in bits).
	 */</comment>
	<expr_stmt><expr><call><name>br_enc64be</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>count_aad</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc64be</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>count_ctr</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>gh</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Tag is the GHASH output XORed with the encryption of the
	 * nonce with the initial counter value.
	 */</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name><operator>)</operator><operator>-&gt;</operator><name>run</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>j0_1</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>j0_2</name></name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl_aead.h */</comment>
<function><type><name>void</name></type>
<name>br_gcm_get_tag_trunc</name><parameter_list>(<parameter><decl><type><name>br_gcm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>br_gcm_get_tag</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl_aead.h */</comment>
<function><type><name>uint32_t</name></type>
<name>br_gcm_check_tag_trunc</name><parameter_list>(<parameter><decl><type><name>br_gcm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>br_gcm_get_tag</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>x</name> <operator>|=</operator> <name><name>tmp</name><index>[<expr><name>u</name></expr>]</index></name> <operator>^</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>tag</name><operator>)</operator><index>[<expr><name>u</name></expr>]</index></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><call><name>EQ0</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see bearssl_aead.h */</comment>
<function><type><name>uint32_t</name></type>
<name>br_gcm_check_tag</name><parameter_list>(<parameter><decl><type><name>br_gcm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>br_gcm_check_tag_trunc</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see bearssl_aead.h */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_aead_class</name></type> <name>br_gcm_vtable</name> <init>= <expr><block>{
	<expr><literal type="number">16</literal></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_aead_class</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_gcm_reset</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_aead_class</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_gcm_aad_inject</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_aead_class</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_gcm_flip</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_aead_class</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_gcm_run</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_aead_class</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_gcm_get_tag</name></expr>,
	<expr><operator>(</operator><call><call><name>uint32_t</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_aead_class</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_gcm_check_tag</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_aead_class</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_gcm_get_tag_trunc</name></expr>,
	<expr><operator>(</operator><call><call><name>uint32_t</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_aead_class</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_gcm_check_tag_trunc</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
