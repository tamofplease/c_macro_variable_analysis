<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/bearssl/rsa/rsa_i15_priv.c"><comment type="block">/*
 * Copyright (c) 2017 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U</name></cpp:macro>      <cpp:value>(2 + ((BR_MAX_RSA_FACTOR + 14) / 15))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLEN</name></cpp:macro>   <cpp:value>(8 * U)</cpp:value></cpp:define>

<comment type="block">/* see bearssl_rsa.h */</comment>
<function><type><name>uint32_t</name></type>
<name>br_rsa_i15_private</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_rsa_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>plen</name></decl>, <decl><type ref="prev"/><name>qlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>fwlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16_t</name></type> <name>p0i</name></decl>, <decl><type ref="prev"/><name>q0i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>xlen</name></decl>, <decl><type ref="prev"/><name>u</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>TLEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>z</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>mp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mq</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t3</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Compute the actual lengths of p and q, in bytes.
	 * These lengths are not considered secret (we cannot really hide
	 * them anyway in constant-time code).
	 */</comment>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>sk</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>plen</name> <operator>=</operator> <name><name>sk</name><operator>-&gt;</operator><name>plen</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>plen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>p</name> <operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>plen</name> <operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>sk</name><operator>-&gt;</operator><name>q</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>qlen</name> <operator>=</operator> <name><name>sk</name><operator>-&gt;</operator><name>qlen</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>qlen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>q</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>q</name> <operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>qlen</name> <operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * Compute the maximum factor length, in words.
	 */</comment>
	<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>plen</name> <operator>&gt;</operator> <name>qlen</name></expr> ?</condition><then> <expr><name>plen</name></expr> </then><else>: <expr><name>qlen</name></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>fwlen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>z</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>z</name> <operator>-=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>fwlen</name> <operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<comment type="block">/*
	 * Round up the word length to an even number.
	 */</comment>
	<expr_stmt><expr><name>fwlen</name> <operator>+=</operator> <operator>(</operator><name>fwlen</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * We need to fit at least 6 values in the stack buffer.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><literal type="number">6</literal> <operator>*</operator> <name>fwlen</name> <operator>&gt;</operator> <name>TLEN</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Compute signature length (in bytes).
	 */</comment>
	<expr_stmt><expr><name>xlen</name> <operator>=</operator> <operator>(</operator><name><name>sk</name><operator>-&gt;</operator><name>n_bitlen</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Ensure 32-bit alignment for value words.
	 */</comment>
	<expr_stmt><expr><name>mq</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>mq</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>mq</name> <operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Decode q.
	 */</comment>
	<expr_stmt><expr><call><name>br_i15_decode</name><argument_list>(<argument><expr><name>mq</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Decode p.
	 */</comment>
	<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>mq</name> <operator>+</operator> <name>fwlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_decode</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Compute the modulus (product of the two factors), to compare
	 * it with the source value. We use br_i15_mulacc(), since it's
	 * already used later on.
	 */</comment>
	<expr_stmt><expr><name>t2</name> <operator>=</operator> <name>mq</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>fwlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_zero</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name><name>mq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_mulacc</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>mq</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We encode the modulus into bytes, to perform the comparison
	 * with bytes. We know that the product length, in bytes, is
	 * exactly xlen.
	 * The comparison actually computes the carry when subtracting
	 * the modulus from the source value; that carry must be 1 for
	 * a value in the correct range. We keep it in r, which is our
	 * accumulator for the error code.
	 */</comment>
	<expr_stmt><expr><name>t3</name> <operator>=</operator> <name>mq</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>fwlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_encode</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name>xlen</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>u</name> <operator>=</operator> <name>xlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>u</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>wn</name></decl>, <decl><type ref="prev"/><name>wx</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>u</name> <operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>wn</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>t3</name><operator>)</operator><index>[<expr><name>u</name></expr>]</index></expr>;</expr_stmt>
		<expr_stmt><expr><name>wx</name> <operator>=</operator> <name><name>x</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>wx</name> <operator>-</operator> <operator>(</operator><name>wn</name> <operator>+</operator> <name>r</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * Move the decoded p to another temporary buffer.
	 */</comment>
	<expr_stmt><expr><name>mp</name> <operator>=</operator> <name>mq</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>fwlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>fwlen</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Compute s2 = x^dq mod q.
	 */</comment>
	<expr_stmt><expr><name>q0i</name> <operator>=</operator> <call><name>br_i15_ninv15</name><argument_list>(<argument><expr><name><name>mq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>s2</name> <operator>=</operator> <name>mq</name> <operator>+</operator> <name>fwlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_decode_reduce</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>xlen</name></expr></argument>, <argument><expr><name>mq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <call><name>br_i15_modpow_opt</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>dq</name></name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>dqlen</name></name></expr></argument>, <argument><expr><name>mq</name></expr></argument>, <argument><expr><name>q0i</name></expr></argument>,
		<argument><expr><name>mq</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>fwlen</name></expr></argument>, <argument><expr><name>TLEN</name> <operator>-</operator> <literal type="number">3</literal> <operator>*</operator> <name>fwlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Compute s1 = x^dq mod q.
	 */</comment>
	<expr_stmt><expr><name>p0i</name> <operator>=</operator> <call><name>br_i15_ninv15</name><argument_list>(<argument><expr><name><name>mp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>s1</name> <operator>=</operator> <name>mq</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>fwlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_decode_reduce</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>xlen</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <call><name>br_i15_modpow_opt</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>dp</name></name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>dplen</name></name></expr></argument>, <argument><expr><name>mp</name></expr></argument>, <argument><expr><name>p0i</name></expr></argument>,
		<argument><expr><name>mq</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>fwlen</name></expr></argument>, <argument><expr><name>TLEN</name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name>fwlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Compute:
	 *   h = (s1 - s2)*(1/q) mod p
	 * s1 is an integer modulo p, but s2 is modulo q. PKCS#1 is
	 * unclear about whether p may be lower than q (some existing,
	 * widely deployed implementations of RSA don't tolerate p &lt; q),
	 * but we want to support that occurrence, so we need to use the
	 * reduction function.
	 *
	 * Since we use br_i15_decode_reduce() for iq (purportedly, the
	 * inverse of q modulo p), we also tolerate improperly large
	 * values for this parameter.
	 */</comment>
	<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>mq</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>fwlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t2</name> <operator>=</operator> <name>mq</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <name>fwlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_reduce</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_add</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>, <argument><expr><call><name>br_i15_sub</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_to_monty</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_decode_reduce</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>iq</name></name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>iqlen</name></name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_montymul</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>, <argument><expr><name>p0i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * h is now in t2. We compute the final result:
	 *   s = s2 + q*h
	 * All these operations are non-modular.
	 *
	 * We need mq, s2 and t2. We use the t3 buffer as destination.
	 * The buffers mp, s1 and t1 are no longer needed, so we can
	 * reuse them for t3. Moreover, the first step of the computation
	 * is to copy s2 into t3, after which s2 is not needed. Right
	 * now, mq is in slot 0, s2 is in slot 1, and t2 in slot 5.
	 * Therefore, we have ample room for t3 by simply using s2.
	 */</comment>
	<expr_stmt><expr><name>t3</name> <operator>=</operator> <name>s2</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_mulacc</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name>mq</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Encode the result. Since we already checked the value of xlen,
	 * we can just use it right away.
	 */</comment>
	<expr_stmt><expr><call><name>br_i15_encode</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>xlen</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * The only error conditions remaining at that point are invalid
	 * values for p and q (even integers).
	 */</comment>
	<return>return <expr><name>p0i</name> <operator>&amp;</operator> <name>q0i</name> <operator>&amp;</operator> <name>r</name></expr>;</return>
</block_content>}</block></function>
</unit>
