<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/bearssl/x509/encode_ec_pk8der.c"><comment type="block">/*
 * Copyright (c) 2018 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/* see bearssl_x509.h */</comment>
<function><type><name>size_t</name></type>
<name>br_encode_ec_pkcs8_der</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>br_ec_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_ec_public_key</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * ASN.1 format:
	 *
	 *   OneAsymmetricKey ::= SEQUENCE {
	 *     version                   Version,
	 *     privateKeyAlgorithm       PrivateKeyAlgorithmIdentifier,
	 *     privateKey                PrivateKey,
	 *     attributes            [0] Attributes OPTIONAL,
	 *     ...,
	 *     [[2: publicKey        [1] PublicKey OPTIONAL ]],
	 *     ...
	 *   }
	 *
	 * We don't include attributes or public key (the public key
	 * is included in the private key value instead). The
	 * 'version' field is an INTEGER that we will set to 0
	 * (meaning 'v1', compatible with previous versions of PKCS#8).
	 * The 'privateKeyAlgorithm' structure is an AlgorithmIdentifier
	 * whose OID should be id-ecPublicKey, with, as parameters, the
	 * curve OID. The 'privateKey' is an OCTET STRING, whose value
	 * is the "raw DER" encoding of the key pair.
	 */</comment>

	<comment type="block">/*
	 * OID id-ecPublicKey (1.2.840.10045.2.1), DER-encoded (with
	 * the tag).
	 */</comment>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>OID_ECPUBKEY</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>len_version</name></decl>, <decl><type ref="prev"/><name>len_privateKeyAlgorithm</name></decl>, <decl><type ref="prev"/><name>len_privateKeyValue</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len_privateKey</name></decl>, <decl><type ref="prev"/><name>len_seq</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>oid</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>oid</name> <operator>=</operator> <call><name>br_get_curve_OID</name><argument_list>(<argument><expr><name><name>sk</name><operator>-&gt;</operator><name>curve</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>oid</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>len_version</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>len_privateKeyAlgorithm</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <sizeof>sizeof <name>OID_ECPUBKEY</name></sizeof> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>len_privateKeyValue</name> <operator>=</operator> <call><name>br_encode_ec_raw_der_inner</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sk</name></expr></argument>, <argument><expr><name>pk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>len_privateKey</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>len_of_len</name><argument_list>(<argument><expr><name>len_privateKeyValue</name></expr></argument>)</argument_list></call>
		<operator>+</operator> <name>len_privateKeyValue</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>len_seq</name> <operator>=</operator> <name>len_version</name> <operator>+</operator> <name>len_privateKeyAlgorithm</name> <operator>+</operator> <name>len_privateKey</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dest</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">1</literal> <operator>+</operator> <call><name>len_of_len</name><argument_list>(<argument><expr><name>len_seq</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>len_seq</name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>lenlen</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x30</literal></expr>;</expr_stmt>  <comment type="block">/* SEQUENCE tag */</comment>
		<expr_stmt><expr><name>lenlen</name> <operator>=</operator> <call><name>br_asn1_encode_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len_seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>lenlen</name></expr>;</expr_stmt>

		<comment type="block">/* version */</comment>
		<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

		<comment type="block">/* privateKeyAlgorithm */</comment>
		<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x30</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>++</operator> <operator>=</operator> <operator>(</operator><sizeof>sizeof <name>OID_ECPUBKEY</name></sizeof><operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>OID_ECPUBKEY</name></expr></argument>, <argument><expr><sizeof>sizeof <name>OID_ECPUBKEY</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf</name> <operator>+=</operator> <sizeof>sizeof <name>OID_ECPUBKEY</name></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x06</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

		<comment type="block">/* privateKey */</comment>
		<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>++</operator> <operator>=</operator> <literal type="number">0x04</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf</name> <operator>+=</operator> <call><name>br_asn1_encode_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len_privateKeyValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_encode_ec_raw_der_inner</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sk</name></expr></argument>, <argument><expr><name>pk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><literal type="number">1</literal> <operator>+</operator> <name>lenlen</name> <operator>+</operator> <name>len_seq</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
