<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/bearssl/symcipher/des_tab.c"><comment type="block">/*
 * Copyright (c) 2016 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/*
 * PC2left[x] tells where bit x goes when applying PC-2. 'x' is a bit
 * position in the left rotated key word. Both position are in normal
 * order (rightmost bit is 0).
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>PC2left</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">16</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">7</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">24</literal></expr>,
	<expr><literal type="number">13</literal></expr>,  <expr><literal type="number">2</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">22</literal></expr>,  <expr><literal type="number">5</literal></expr>, <expr><literal type="number">15</literal></expr>,
	<expr><literal type="number">23</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">9</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">24</literal></expr>,  <expr><literal type="number">6</literal></expr>,
	 <expr><literal type="number">4</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">18</literal></expr>,  <expr><literal type="number">8</literal></expr>, <expr><literal type="number">17</literal></expr>,  <expr><literal type="number">0</literal></expr>, <expr><literal type="number">19</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Similar to PC2left[x], for the right rotated key word.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>PC2right</name><index>[]</index></name> <init>= <expr><block>{
	 <expr><literal type="number">8</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">24</literal></expr>,  <expr><literal type="number">6</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">15</literal></expr>,  <expr><literal type="number">3</literal></expr>,
	<expr><literal type="number">10</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">19</literal></expr>,  <expr><literal type="number">5</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">24</literal></expr>,
	 <expr><literal type="number">4</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">16</literal></expr>,  <expr><literal type="number">9</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">20</literal></expr>,  <expr><literal type="number">2</literal></expr>,
	<expr><literal type="number">24</literal></expr>,  <expr><literal type="number">7</literal></expr>, <expr><literal type="number">13</literal></expr>,  <expr><literal type="number">0</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">17</literal></expr>,  <expr><literal type="number">1</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * S-boxes and PC-1 merged.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>S1</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0x00808200</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00008000</literal></expr>, <expr><literal type="number">0x00808202</literal></expr>,
	<expr><literal type="number">0x00808002</literal></expr>, <expr><literal type="number">0x00008202</literal></expr>, <expr><literal type="number">0x00000002</literal></expr>, <expr><literal type="number">0x00008000</literal></expr>,
	<expr><literal type="number">0x00000200</literal></expr>, <expr><literal type="number">0x00808200</literal></expr>, <expr><literal type="number">0x00808202</literal></expr>, <expr><literal type="number">0x00000200</literal></expr>,
	<expr><literal type="number">0x00800202</literal></expr>, <expr><literal type="number">0x00808002</literal></expr>, <expr><literal type="number">0x00800000</literal></expr>, <expr><literal type="number">0x00000002</literal></expr>,
	<expr><literal type="number">0x00000202</literal></expr>, <expr><literal type="number">0x00800200</literal></expr>, <expr><literal type="number">0x00800200</literal></expr>, <expr><literal type="number">0x00008200</literal></expr>,
	<expr><literal type="number">0x00008200</literal></expr>, <expr><literal type="number">0x00808000</literal></expr>, <expr><literal type="number">0x00808000</literal></expr>, <expr><literal type="number">0x00800202</literal></expr>,
	<expr><literal type="number">0x00008002</literal></expr>, <expr><literal type="number">0x00800002</literal></expr>, <expr><literal type="number">0x00800002</literal></expr>, <expr><literal type="number">0x00008002</literal></expr>,
	<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000202</literal></expr>, <expr><literal type="number">0x00008202</literal></expr>, <expr><literal type="number">0x00800000</literal></expr>,
	<expr><literal type="number">0x00008000</literal></expr>, <expr><literal type="number">0x00808202</literal></expr>, <expr><literal type="number">0x00000002</literal></expr>, <expr><literal type="number">0x00808000</literal></expr>,
	<expr><literal type="number">0x00808200</literal></expr>, <expr><literal type="number">0x00800000</literal></expr>, <expr><literal type="number">0x00800000</literal></expr>, <expr><literal type="number">0x00000200</literal></expr>,
	<expr><literal type="number">0x00808002</literal></expr>, <expr><literal type="number">0x00008000</literal></expr>, <expr><literal type="number">0x00008200</literal></expr>, <expr><literal type="number">0x00800002</literal></expr>,
	<expr><literal type="number">0x00000200</literal></expr>, <expr><literal type="number">0x00000002</literal></expr>, <expr><literal type="number">0x00800202</literal></expr>, <expr><literal type="number">0x00008202</literal></expr>,
	<expr><literal type="number">0x00808202</literal></expr>, <expr><literal type="number">0x00008002</literal></expr>, <expr><literal type="number">0x00808000</literal></expr>, <expr><literal type="number">0x00800202</literal></expr>,
	<expr><literal type="number">0x00800002</literal></expr>, <expr><literal type="number">0x00000202</literal></expr>, <expr><literal type="number">0x00008202</literal></expr>, <expr><literal type="number">0x00808200</literal></expr>,
	<expr><literal type="number">0x00000202</literal></expr>, <expr><literal type="number">0x00800200</literal></expr>, <expr><literal type="number">0x00800200</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,
	<expr><literal type="number">0x00008002</literal></expr>, <expr><literal type="number">0x00008200</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00808002</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>S2</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0x40084010</literal></expr>, <expr><literal type="number">0x40004000</literal></expr>, <expr><literal type="number">0x00004000</literal></expr>, <expr><literal type="number">0x00084010</literal></expr>,
	<expr><literal type="number">0x00080000</literal></expr>, <expr><literal type="number">0x00000010</literal></expr>, <expr><literal type="number">0x40080010</literal></expr>, <expr><literal type="number">0x40004010</literal></expr>,
	<expr><literal type="number">0x40000010</literal></expr>, <expr><literal type="number">0x40084010</literal></expr>, <expr><literal type="number">0x40084000</literal></expr>, <expr><literal type="number">0x40000000</literal></expr>,
	<expr><literal type="number">0x40004000</literal></expr>, <expr><literal type="number">0x00080000</literal></expr>, <expr><literal type="number">0x00000010</literal></expr>, <expr><literal type="number">0x40080010</literal></expr>,
	<expr><literal type="number">0x00084000</literal></expr>, <expr><literal type="number">0x00080010</literal></expr>, <expr><literal type="number">0x40004010</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,
	<expr><literal type="number">0x40000000</literal></expr>, <expr><literal type="number">0x00004000</literal></expr>, <expr><literal type="number">0x00084010</literal></expr>, <expr><literal type="number">0x40080000</literal></expr>,
	<expr><literal type="number">0x00080010</literal></expr>, <expr><literal type="number">0x40000010</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00084000</literal></expr>,
	<expr><literal type="number">0x00004010</literal></expr>, <expr><literal type="number">0x40084000</literal></expr>, <expr><literal type="number">0x40080000</literal></expr>, <expr><literal type="number">0x00004010</literal></expr>,
	<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00084010</literal></expr>, <expr><literal type="number">0x40080010</literal></expr>, <expr><literal type="number">0x00080000</literal></expr>,
	<expr><literal type="number">0x40004010</literal></expr>, <expr><literal type="number">0x40080000</literal></expr>, <expr><literal type="number">0x40084000</literal></expr>, <expr><literal type="number">0x00004000</literal></expr>,
	<expr><literal type="number">0x40080000</literal></expr>, <expr><literal type="number">0x40004000</literal></expr>, <expr><literal type="number">0x00000010</literal></expr>, <expr><literal type="number">0x40084010</literal></expr>,
	<expr><literal type="number">0x00084010</literal></expr>, <expr><literal type="number">0x00000010</literal></expr>, <expr><literal type="number">0x00004000</literal></expr>, <expr><literal type="number">0x40000000</literal></expr>,
	<expr><literal type="number">0x00004010</literal></expr>, <expr><literal type="number">0x40084000</literal></expr>, <expr><literal type="number">0x00080000</literal></expr>, <expr><literal type="number">0x40000010</literal></expr>,
	<expr><literal type="number">0x00080010</literal></expr>, <expr><literal type="number">0x40004010</literal></expr>, <expr><literal type="number">0x40000010</literal></expr>, <expr><literal type="number">0x00080010</literal></expr>,
	<expr><literal type="number">0x00084000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x40004000</literal></expr>, <expr><literal type="number">0x00004010</literal></expr>,
	<expr><literal type="number">0x40000000</literal></expr>, <expr><literal type="number">0x40080010</literal></expr>, <expr><literal type="number">0x40084010</literal></expr>, <expr><literal type="number">0x00084000</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>S3</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0x00000104</literal></expr>, <expr><literal type="number">0x04010100</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x04010004</literal></expr>,
	<expr><literal type="number">0x04000100</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00010104</literal></expr>, <expr><literal type="number">0x04000100</literal></expr>,
	<expr><literal type="number">0x00010004</literal></expr>, <expr><literal type="number">0x04000004</literal></expr>, <expr><literal type="number">0x04000004</literal></expr>, <expr><literal type="number">0x00010000</literal></expr>,
	<expr><literal type="number">0x04010104</literal></expr>, <expr><literal type="number">0x00010004</literal></expr>, <expr><literal type="number">0x04010000</literal></expr>, <expr><literal type="number">0x00000104</literal></expr>,
	<expr><literal type="number">0x04000000</literal></expr>, <expr><literal type="number">0x00000004</literal></expr>, <expr><literal type="number">0x04010100</literal></expr>, <expr><literal type="number">0x00000100</literal></expr>,
	<expr><literal type="number">0x00010100</literal></expr>, <expr><literal type="number">0x04010000</literal></expr>, <expr><literal type="number">0x04010004</literal></expr>, <expr><literal type="number">0x00010104</literal></expr>,
	<expr><literal type="number">0x04000104</literal></expr>, <expr><literal type="number">0x00010100</literal></expr>, <expr><literal type="number">0x00010000</literal></expr>, <expr><literal type="number">0x04000104</literal></expr>,
	<expr><literal type="number">0x00000004</literal></expr>, <expr><literal type="number">0x04010104</literal></expr>, <expr><literal type="number">0x00000100</literal></expr>, <expr><literal type="number">0x04000000</literal></expr>,
	<expr><literal type="number">0x04010100</literal></expr>, <expr><literal type="number">0x04000000</literal></expr>, <expr><literal type="number">0x00010004</literal></expr>, <expr><literal type="number">0x00000104</literal></expr>,
	<expr><literal type="number">0x00010000</literal></expr>, <expr><literal type="number">0x04010100</literal></expr>, <expr><literal type="number">0x04000100</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,
	<expr><literal type="number">0x00000100</literal></expr>, <expr><literal type="number">0x00010004</literal></expr>, <expr><literal type="number">0x04010104</literal></expr>, <expr><literal type="number">0x04000100</literal></expr>,
	<expr><literal type="number">0x04000004</literal></expr>, <expr><literal type="number">0x00000100</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x04010004</literal></expr>,
	<expr><literal type="number">0x04000104</literal></expr>, <expr><literal type="number">0x00010000</literal></expr>, <expr><literal type="number">0x04000000</literal></expr>, <expr><literal type="number">0x04010104</literal></expr>,
	<expr><literal type="number">0x00000004</literal></expr>, <expr><literal type="number">0x00010104</literal></expr>, <expr><literal type="number">0x00010100</literal></expr>, <expr><literal type="number">0x04000004</literal></expr>,
	<expr><literal type="number">0x04010000</literal></expr>, <expr><literal type="number">0x04000104</literal></expr>, <expr><literal type="number">0x00000104</literal></expr>, <expr><literal type="number">0x04010000</literal></expr>,
	<expr><literal type="number">0x00010104</literal></expr>, <expr><literal type="number">0x00000004</literal></expr>, <expr><literal type="number">0x04010004</literal></expr>, <expr><literal type="number">0x00010100</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>S4</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0x80401000</literal></expr>, <expr><literal type="number">0x80001040</literal></expr>, <expr><literal type="number">0x80001040</literal></expr>, <expr><literal type="number">0x00000040</literal></expr>,
	<expr><literal type="number">0x00401040</literal></expr>, <expr><literal type="number">0x80400040</literal></expr>, <expr><literal type="number">0x80400000</literal></expr>, <expr><literal type="number">0x80001000</literal></expr>,
	<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00401000</literal></expr>, <expr><literal type="number">0x00401000</literal></expr>, <expr><literal type="number">0x80401040</literal></expr>,
	<expr><literal type="number">0x80000040</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00400040</literal></expr>, <expr><literal type="number">0x80400000</literal></expr>,
	<expr><literal type="number">0x80000000</literal></expr>, <expr><literal type="number">0x00001000</literal></expr>, <expr><literal type="number">0x00400000</literal></expr>, <expr><literal type="number">0x80401000</literal></expr>,
	<expr><literal type="number">0x00000040</literal></expr>, <expr><literal type="number">0x00400000</literal></expr>, <expr><literal type="number">0x80001000</literal></expr>, <expr><literal type="number">0x00001040</literal></expr>,
	<expr><literal type="number">0x80400040</literal></expr>, <expr><literal type="number">0x80000000</literal></expr>, <expr><literal type="number">0x00001040</literal></expr>, <expr><literal type="number">0x00400040</literal></expr>,
	<expr><literal type="number">0x00001000</literal></expr>, <expr><literal type="number">0x00401040</literal></expr>, <expr><literal type="number">0x80401040</literal></expr>, <expr><literal type="number">0x80000040</literal></expr>,
	<expr><literal type="number">0x00400040</literal></expr>, <expr><literal type="number">0x80400000</literal></expr>, <expr><literal type="number">0x00401000</literal></expr>, <expr><literal type="number">0x80401040</literal></expr>,
	<expr><literal type="number">0x80000040</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00401000</literal></expr>,
	<expr><literal type="number">0x00001040</literal></expr>, <expr><literal type="number">0x00400040</literal></expr>, <expr><literal type="number">0x80400040</literal></expr>, <expr><literal type="number">0x80000000</literal></expr>,
	<expr><literal type="number">0x80401000</literal></expr>, <expr><literal type="number">0x80001040</literal></expr>, <expr><literal type="number">0x80001040</literal></expr>, <expr><literal type="number">0x00000040</literal></expr>,
	<expr><literal type="number">0x80401040</literal></expr>, <expr><literal type="number">0x80000040</literal></expr>, <expr><literal type="number">0x80000000</literal></expr>, <expr><literal type="number">0x00001000</literal></expr>,
	<expr><literal type="number">0x80400000</literal></expr>, <expr><literal type="number">0x80001000</literal></expr>, <expr><literal type="number">0x00401040</literal></expr>, <expr><literal type="number">0x80400040</literal></expr>,
	<expr><literal type="number">0x80001000</literal></expr>, <expr><literal type="number">0x00001040</literal></expr>, <expr><literal type="number">0x00400000</literal></expr>, <expr><literal type="number">0x80401000</literal></expr>,
	<expr><literal type="number">0x00000040</literal></expr>, <expr><literal type="number">0x00400000</literal></expr>, <expr><literal type="number">0x00001000</literal></expr>, <expr><literal type="number">0x00401040</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>S5</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0x00000080</literal></expr>, <expr><literal type="number">0x01040080</literal></expr>, <expr><literal type="number">0x01040000</literal></expr>, <expr><literal type="number">0x21000080</literal></expr>,
	<expr><literal type="number">0x00040000</literal></expr>, <expr><literal type="number">0x00000080</literal></expr>, <expr><literal type="number">0x20000000</literal></expr>, <expr><literal type="number">0x01040000</literal></expr>,
	<expr><literal type="number">0x20040080</literal></expr>, <expr><literal type="number">0x00040000</literal></expr>, <expr><literal type="number">0x01000080</literal></expr>, <expr><literal type="number">0x20040080</literal></expr>,
	<expr><literal type="number">0x21000080</literal></expr>, <expr><literal type="number">0x21040000</literal></expr>, <expr><literal type="number">0x00040080</literal></expr>, <expr><literal type="number">0x20000000</literal></expr>,
	<expr><literal type="number">0x01000000</literal></expr>, <expr><literal type="number">0x20040000</literal></expr>, <expr><literal type="number">0x20040000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,
	<expr><literal type="number">0x20000080</literal></expr>, <expr><literal type="number">0x21040080</literal></expr>, <expr><literal type="number">0x21040080</literal></expr>, <expr><literal type="number">0x01000080</literal></expr>,
	<expr><literal type="number">0x21040000</literal></expr>, <expr><literal type="number">0x20000080</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x21000000</literal></expr>,
	<expr><literal type="number">0x01040080</literal></expr>, <expr><literal type="number">0x01000000</literal></expr>, <expr><literal type="number">0x21000000</literal></expr>, <expr><literal type="number">0x00040080</literal></expr>,
	<expr><literal type="number">0x00040000</literal></expr>, <expr><literal type="number">0x21000080</literal></expr>, <expr><literal type="number">0x00000080</literal></expr>, <expr><literal type="number">0x01000000</literal></expr>,
	<expr><literal type="number">0x20000000</literal></expr>, <expr><literal type="number">0x01040000</literal></expr>, <expr><literal type="number">0x21000080</literal></expr>, <expr><literal type="number">0x20040080</literal></expr>,
	<expr><literal type="number">0x01000080</literal></expr>, <expr><literal type="number">0x20000000</literal></expr>, <expr><literal type="number">0x21040000</literal></expr>, <expr><literal type="number">0x01040080</literal></expr>,
	<expr><literal type="number">0x20040080</literal></expr>, <expr><literal type="number">0x00000080</literal></expr>, <expr><literal type="number">0x01000000</literal></expr>, <expr><literal type="number">0x21040000</literal></expr>,
	<expr><literal type="number">0x21040080</literal></expr>, <expr><literal type="number">0x00040080</literal></expr>, <expr><literal type="number">0x21000000</literal></expr>, <expr><literal type="number">0x21040080</literal></expr>,
	<expr><literal type="number">0x01040000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x20040000</literal></expr>, <expr><literal type="number">0x21000000</literal></expr>,
	<expr><literal type="number">0x00040080</literal></expr>, <expr><literal type="number">0x01000080</literal></expr>, <expr><literal type="number">0x20000080</literal></expr>, <expr><literal type="number">0x00040000</literal></expr>,
	<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x20040000</literal></expr>, <expr><literal type="number">0x01040080</literal></expr>, <expr><literal type="number">0x20000080</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>S6</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0x10000008</literal></expr>, <expr><literal type="number">0x10200000</literal></expr>, <expr><literal type="number">0x00002000</literal></expr>, <expr><literal type="number">0x10202008</literal></expr>,
	<expr><literal type="number">0x10200000</literal></expr>, <expr><literal type="number">0x00000008</literal></expr>, <expr><literal type="number">0x10202008</literal></expr>, <expr><literal type="number">0x00200000</literal></expr>,
	<expr><literal type="number">0x10002000</literal></expr>, <expr><literal type="number">0x00202008</literal></expr>, <expr><literal type="number">0x00200000</literal></expr>, <expr><literal type="number">0x10000008</literal></expr>,
	<expr><literal type="number">0x00200008</literal></expr>, <expr><literal type="number">0x10002000</literal></expr>, <expr><literal type="number">0x10000000</literal></expr>, <expr><literal type="number">0x00002008</literal></expr>,
	<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00200008</literal></expr>, <expr><literal type="number">0x10002008</literal></expr>, <expr><literal type="number">0x00002000</literal></expr>,
	<expr><literal type="number">0x00202000</literal></expr>, <expr><literal type="number">0x10002008</literal></expr>, <expr><literal type="number">0x00000008</literal></expr>, <expr><literal type="number">0x10200008</literal></expr>,
	<expr><literal type="number">0x10200008</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00202008</literal></expr>, <expr><literal type="number">0x10202000</literal></expr>,
	<expr><literal type="number">0x00002008</literal></expr>, <expr><literal type="number">0x00202000</literal></expr>, <expr><literal type="number">0x10202000</literal></expr>, <expr><literal type="number">0x10000000</literal></expr>,
	<expr><literal type="number">0x10002000</literal></expr>, <expr><literal type="number">0x00000008</literal></expr>, <expr><literal type="number">0x10200008</literal></expr>, <expr><literal type="number">0x00202000</literal></expr>,
	<expr><literal type="number">0x10202008</literal></expr>, <expr><literal type="number">0x00200000</literal></expr>, <expr><literal type="number">0x00002008</literal></expr>, <expr><literal type="number">0x10000008</literal></expr>,
	<expr><literal type="number">0x00200000</literal></expr>, <expr><literal type="number">0x10002000</literal></expr>, <expr><literal type="number">0x10000000</literal></expr>, <expr><literal type="number">0x00002008</literal></expr>,
	<expr><literal type="number">0x10000008</literal></expr>, <expr><literal type="number">0x10202008</literal></expr>, <expr><literal type="number">0x00202000</literal></expr>, <expr><literal type="number">0x10200000</literal></expr>,
	<expr><literal type="number">0x00202008</literal></expr>, <expr><literal type="number">0x10202000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x10200008</literal></expr>,
	<expr><literal type="number">0x00000008</literal></expr>, <expr><literal type="number">0x00002000</literal></expr>, <expr><literal type="number">0x10200000</literal></expr>, <expr><literal type="number">0x00202008</literal></expr>,
	<expr><literal type="number">0x00002000</literal></expr>, <expr><literal type="number">0x00200008</literal></expr>, <expr><literal type="number">0x10002008</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,
	<expr><literal type="number">0x10202000</literal></expr>, <expr><literal type="number">0x10000000</literal></expr>, <expr><literal type="number">0x00200008</literal></expr>, <expr><literal type="number">0x10002008</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>S7</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0x00100000</literal></expr>, <expr><literal type="number">0x02100001</literal></expr>, <expr><literal type="number">0x02000401</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,
	<expr><literal type="number">0x00000400</literal></expr>, <expr><literal type="number">0x02000401</literal></expr>, <expr><literal type="number">0x00100401</literal></expr>, <expr><literal type="number">0x02100400</literal></expr>,
	<expr><literal type="number">0x02100401</literal></expr>, <expr><literal type="number">0x00100000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x02000001</literal></expr>,
	<expr><literal type="number">0x00000001</literal></expr>, <expr><literal type="number">0x02000000</literal></expr>, <expr><literal type="number">0x02100001</literal></expr>, <expr><literal type="number">0x00000401</literal></expr>,
	<expr><literal type="number">0x02000400</literal></expr>, <expr><literal type="number">0x00100401</literal></expr>, <expr><literal type="number">0x00100001</literal></expr>, <expr><literal type="number">0x02000400</literal></expr>,
	<expr><literal type="number">0x02000001</literal></expr>, <expr><literal type="number">0x02100000</literal></expr>, <expr><literal type="number">0x02100400</literal></expr>, <expr><literal type="number">0x00100001</literal></expr>,
	<expr><literal type="number">0x02100000</literal></expr>, <expr><literal type="number">0x00000400</literal></expr>, <expr><literal type="number">0x00000401</literal></expr>, <expr><literal type="number">0x02100401</literal></expr>,
	<expr><literal type="number">0x00100400</literal></expr>, <expr><literal type="number">0x00000001</literal></expr>, <expr><literal type="number">0x02000000</literal></expr>, <expr><literal type="number">0x00100400</literal></expr>,
	<expr><literal type="number">0x02000000</literal></expr>, <expr><literal type="number">0x00100400</literal></expr>, <expr><literal type="number">0x00100000</literal></expr>, <expr><literal type="number">0x02000401</literal></expr>,
	<expr><literal type="number">0x02000401</literal></expr>, <expr><literal type="number">0x02100001</literal></expr>, <expr><literal type="number">0x02100001</literal></expr>, <expr><literal type="number">0x00000001</literal></expr>,
	<expr><literal type="number">0x00100001</literal></expr>, <expr><literal type="number">0x02000000</literal></expr>, <expr><literal type="number">0x02000400</literal></expr>, <expr><literal type="number">0x00100000</literal></expr>,
	<expr><literal type="number">0x02100400</literal></expr>, <expr><literal type="number">0x00000401</literal></expr>, <expr><literal type="number">0x00100401</literal></expr>, <expr><literal type="number">0x02100400</literal></expr>,
	<expr><literal type="number">0x00000401</literal></expr>, <expr><literal type="number">0x02000001</literal></expr>, <expr><literal type="number">0x02100401</literal></expr>, <expr><literal type="number">0x02100000</literal></expr>,
	<expr><literal type="number">0x00100400</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000001</literal></expr>, <expr><literal type="number">0x02100401</literal></expr>,
	<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00100401</literal></expr>, <expr><literal type="number">0x02100000</literal></expr>, <expr><literal type="number">0x00000400</literal></expr>,
	<expr><literal type="number">0x02000001</literal></expr>, <expr><literal type="number">0x02000400</literal></expr>, <expr><literal type="number">0x00000400</literal></expr>, <expr><literal type="number">0x00100001</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>S8</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0x08000820</literal></expr>, <expr><literal type="number">0x00000800</literal></expr>, <expr><literal type="number">0x00020000</literal></expr>, <expr><literal type="number">0x08020820</literal></expr>,
	<expr><literal type="number">0x08000000</literal></expr>, <expr><literal type="number">0x08000820</literal></expr>, <expr><literal type="number">0x00000020</literal></expr>, <expr><literal type="number">0x08000000</literal></expr>,
	<expr><literal type="number">0x00020020</literal></expr>, <expr><literal type="number">0x08020000</literal></expr>, <expr><literal type="number">0x08020820</literal></expr>, <expr><literal type="number">0x00020800</literal></expr>,
	<expr><literal type="number">0x08020800</literal></expr>, <expr><literal type="number">0x00020820</literal></expr>, <expr><literal type="number">0x00000800</literal></expr>, <expr><literal type="number">0x00000020</literal></expr>,
	<expr><literal type="number">0x08020000</literal></expr>, <expr><literal type="number">0x08000020</literal></expr>, <expr><literal type="number">0x08000800</literal></expr>, <expr><literal type="number">0x00000820</literal></expr>,
	<expr><literal type="number">0x00020800</literal></expr>, <expr><literal type="number">0x00020020</literal></expr>, <expr><literal type="number">0x08020020</literal></expr>, <expr><literal type="number">0x08020800</literal></expr>,
	<expr><literal type="number">0x00000820</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x08020020</literal></expr>,
	<expr><literal type="number">0x08000020</literal></expr>, <expr><literal type="number">0x08000800</literal></expr>, <expr><literal type="number">0x00020820</literal></expr>, <expr><literal type="number">0x00020000</literal></expr>,
	<expr><literal type="number">0x00020820</literal></expr>, <expr><literal type="number">0x00020000</literal></expr>, <expr><literal type="number">0x08020800</literal></expr>, <expr><literal type="number">0x00000800</literal></expr>,
	<expr><literal type="number">0x00000020</literal></expr>, <expr><literal type="number">0x08020020</literal></expr>, <expr><literal type="number">0x00000800</literal></expr>, <expr><literal type="number">0x00020820</literal></expr>,
	<expr><literal type="number">0x08000800</literal></expr>, <expr><literal type="number">0x00000020</literal></expr>, <expr><literal type="number">0x08000020</literal></expr>, <expr><literal type="number">0x08020000</literal></expr>,
	<expr><literal type="number">0x08020020</literal></expr>, <expr><literal type="number">0x08000000</literal></expr>, <expr><literal type="number">0x00020000</literal></expr>, <expr><literal type="number">0x08000820</literal></expr>,
	<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x08020820</literal></expr>, <expr><literal type="number">0x00020020</literal></expr>, <expr><literal type="number">0x08000020</literal></expr>,
	<expr><literal type="number">0x08020000</literal></expr>, <expr><literal type="number">0x08000800</literal></expr>, <expr><literal type="number">0x08000820</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,
	<expr><literal type="number">0x08020820</literal></expr>, <expr><literal type="number">0x00020800</literal></expr>, <expr><literal type="number">0x00020800</literal></expr>, <expr><literal type="number">0x00000820</literal></expr>,
	<expr><literal type="number">0x00000820</literal></expr>, <expr><literal type="number">0x00020020</literal></expr>, <expr><literal type="number">0x08000000</literal></expr>, <expr><literal type="number">0x08020800</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>Fconf</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>r0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>skl</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>skr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>r1</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>r1</name> <operator>=</operator> <operator>(</operator><name>r0</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>r0</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
	<return>return
		  <expr><name><name>S1</name><index>[<expr><operator>(</operator><operator>(</operator><name>r1</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>skl</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>]</index></name>
		<operator>|</operator> <name><name>S2</name><index>[<expr><operator>(</operator><operator>(</operator><name>r0</name> <operator>&gt;&gt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>skl</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>]</index></name>
		<operator>|</operator> <name><name>S3</name><index>[<expr><operator>(</operator><operator>(</operator><name>r0</name> <operator>&gt;&gt;</operator> <literal type="number">19</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>skl</name> <operator>&gt;&gt;</operator>  <literal type="number">6</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>]</index></name>
		<operator>|</operator> <name><name>S4</name><index>[<expr><operator>(</operator><operator>(</operator><name>r0</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>skl</name>      <operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>]</index></name>
		<operator>|</operator> <name><name>S5</name><index>[<expr><operator>(</operator><operator>(</operator><name>r0</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>skr</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>]</index></name>
		<operator>|</operator> <name><name>S6</name><index>[<expr><operator>(</operator><operator>(</operator><name>r0</name> <operator>&gt;&gt;</operator>  <literal type="number">7</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>skr</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>]</index></name>
		<operator>|</operator> <name><name>S7</name><index>[<expr><operator>(</operator><operator>(</operator><name>r0</name> <operator>&gt;&gt;</operator>  <literal type="number">3</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>skr</name> <operator>&gt;&gt;</operator>  <literal type="number">6</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>]</index></name>
		<operator>|</operator> <name><name>S8</name><index>[<expr><operator>(</operator><operator>(</operator><name>r1</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>skr</name>      <operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>process_block_unit</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pl</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>*</operator><name>pl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>*</operator><name>pr</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>t</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>t</name> <operator>=</operator> <name>l</name> <operator>^</operator> <call><name>Fconf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>skey</name><index>[<expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>skey</name><index>[<expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>l</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><operator>*</operator><name>pl</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>pr</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see inner.h */</comment>
<function><type><name>void</name></type>
<name>br_des_tab_process_block</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>br_dec32be</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>br_dec32be</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_des_do_IP</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>num_rounds</name> <operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>process_block_unit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>skey</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>br_des_do_invIP</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc32be</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc32be</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>keysched_unit</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>br_des_keysched_unit</name><argument_list>(<argument><expr><name>skey</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Apply PC-2 to get the 48-bit subkeys.
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>xl</name></decl>, <decl><type ref="prev"/><name>xr</name></decl>, <decl><type ref="prev"/><name>ul</name></decl>, <decl><type ref="prev"/><name>ur</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>xl</name> <operator>=</operator> <name><name>skey</name><index>[<expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>xr</name> <operator>=</operator> <name><name>skey</name><index>[<expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ul</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>ur</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">28</literal></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>ul</name> <operator>|=</operator> <operator>(</operator><name>xl</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>PC2left</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ur</name> <operator>|=</operator> <operator>(</operator><name>xr</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>PC2right</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>xl</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>xr</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name><name>skey</name><index>[<expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ul</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>skey</name><index>[<expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ur</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* see inner.h */</comment>
<function><type><name>unsigned</name></type>
<name>br_des_tab_keysched</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>key_len</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><literal type="number">8</literal></expr>:</case>
		<expr_stmt><expr><call><name>keysched_unit</name><argument_list>(<argument><expr><name>skey</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	<case>case <expr><literal type="number">16</literal></expr>:</case>
		<expr_stmt><expr><call><name>keysched_unit</name><argument_list>(<argument><expr><name>skey</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>keysched_unit</name><argument_list>(<argument><expr><name>skey</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>key</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_des_rev_skey</name><argument_list>(<argument><expr><name>skey</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>skey</name> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><name>skey</name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">3</literal></expr>;</return>
	<default>default:</default>
		<expr_stmt><expr><call><name>keysched_unit</name><argument_list>(<argument><expr><name>skey</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>keysched_unit</name><argument_list>(<argument><expr><name>skey</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>key</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_des_rev_skey</name><argument_list>(<argument><expr><name>skey</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>keysched_unit</name><argument_list>(<argument><expr><name>skey</name> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>key</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">3</literal></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
