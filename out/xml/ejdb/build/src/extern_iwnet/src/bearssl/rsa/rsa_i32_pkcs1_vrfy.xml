<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/bearssl/rsa/rsa_i32_pkcs1_vrfy.c"><comment type="block">/*
 * Copyright (c) 2016 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/* see bearssl_rsa.h */</comment>
<function><type><name>uint32_t</name></type>
<name>br_rsa_i32_pkcs1_vrfy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>xlen</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash_oid</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hash_len</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>br_rsa_public_key</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>unsigned</name> <name>char</name> <name><name>sig</name><index>[<expr><name>BR_MAX_RSA_SIZE</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>xlen</name> <operator>&gt;</operator> <operator>(</operator><sizeof>sizeof <name>sig</name></sizeof><operator>)</operator></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>xlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>br_rsa_i32_public</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name>xlen</name></expr></argument>, <argument><expr><name>pk</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>br_rsa_pkcs1_sig_unpad</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name>xlen</name></expr></argument>, <argument><expr><name>hash_oid</name></expr></argument>, <argument><expr><name>hash_len</name></expr></argument>, <argument><expr><name>hash_out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
