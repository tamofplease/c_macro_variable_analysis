<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/bearssl/symcipher/aes_small_enc.c"><comment type="block">/*
 * Copyright (c) 2016 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro>   <cpp:value>br_aes_S</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_round_key</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>skeys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>k</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>*</operator><name>skeys</name> <operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>state</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>k</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>state</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>k</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>state</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>^=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>k</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>state</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>^=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>k</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sub_bytes</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>state</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>S</name><index>[<expr><name><name>state</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>shift_rows</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>tmp</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mix_columns</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>s0</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>s3</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>s0</name> <operator>=</operator> <name><name>state</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>state</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>s2</name> <operator>=</operator> <name><name>state</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>s3</name> <operator>=</operator> <name><name>state</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t0</name> <operator>=</operator> <operator>(</operator><name>s0</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name>s1</name> <operator>^</operator> <operator>(</operator><name>s1</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name>s2</name> <operator>^</operator> <name>s3</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>s0</name> <operator>^</operator> <operator>(</operator><name>s1</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name>s2</name> <operator>^</operator> <operator>(</operator><name>s2</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name>s3</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t2</name> <operator>=</operator> <name>s0</name> <operator>^</operator> <name>s1</name> <operator>^</operator> <operator>(</operator><name>s2</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name>s3</name> <operator>^</operator> <operator>(</operator><name>s3</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>t3</name> <operator>=</operator> <name>s0</name> <operator>^</operator> <operator>(</operator><name>s0</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name>s1</name> <operator>^</operator> <name>s2</name> <operator>^</operator> <operator>(</operator><name>s3</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>state</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t0</name> <operator>^</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>t0</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x11B</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>state</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t1</name> <operator>^</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>t1</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x11B</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>state</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t2</name> <operator>^</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>t2</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x11B</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>state</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t3</name> <operator>^</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>t3</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x11B</literal><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* see inner.h */</comment>
<function><type><name>void</name></type>
<name>br_aes_small_encrypt</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name><name>state</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>u</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>state</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>add_round_key</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>num_rounds</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>sub_bytes</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>shift_rows</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mix_columns</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add_round_key</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>skey</name> <operator>+</operator> <operator>(</operator><name>u</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>sub_bytes</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>shift_rows</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_round_key</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>skey</name> <operator>+</operator> <operator>(</operator><name>num_rounds</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>buf</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name><name>state</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>
</unit>
