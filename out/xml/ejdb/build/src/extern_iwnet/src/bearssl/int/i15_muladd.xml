<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/bearssl/int/i15_muladd.c"><comment type="block">/*
 * Copyright (c) 2017 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Constant-time division. The divisor must not be larger than 16 bits,
 * and the quotient must fit on 17 bits.
 */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>divrem16</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>q</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>q</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name> <operator>&lt;&lt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>ctl</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>ctl</name> <operator>=</operator> <call><name>LE</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>q</name> <operator>|=</operator> <name>ctl</name> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>-=</operator> <operator>(</operator><operator>-</operator><name>ctl</name><operator>)</operator> <operator>&amp;</operator> <name>d</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>d</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>q</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see inner.h */</comment>
<function><type><name>void</name></type>
<name>br_i15_muladd_small</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Constant-time: we accept to leak the exact bit length of the
	 * modulus m.
	 */</comment>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>m_bitlen</name></decl>, <decl><type ref="prev"/><name>mblr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>mlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>hi</name></decl>, <decl><type ref="prev"/><name>a0</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>cc</name></decl>, <decl><type ref="prev"/><name>tb</name></decl>, <decl><type ref="prev"/><name>over</name></decl>, <decl><type ref="prev"/><name>under</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Simple case: the modulus fits on one word.
	 */</comment>
	<expr_stmt><expr><name>m_bitlen</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>m_bitlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>m_bitlen</name> <operator>&lt;=</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>rem</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>divrem16</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>|</operator> <name>z</name></expr></argument>, <argument><expr><name><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rem</name></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>mlen</name> <operator>=</operator> <operator>(</operator><name>m_bitlen</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>mblr</name> <operator>=</operator> <name>m_bitlen</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Principle: we estimate the quotient (x*2^15+z)/m by
	 * doing a 30/15 division with the high words.
	 *
	 * Let:
	 *   w = 2^15
	 *   a = (w*a0 + a1) * w^N + a2
	 *   b = b0 * w^N + b2
	 * such that:
	 *   0 &lt;= a0 &lt; w
	 *   0 &lt;= a1 &lt; w
	 *   0 &lt;= a2 &lt; w^N
	 *   w/2 &lt;= b0 &lt; w
	 *   0 &lt;= b2 &lt; w^N
	 *   a &lt; w*b
	 * I.e. the two top words of a are a0:a1, the top word of b is
	 * b0, we ensured that b0 is "full" (high bit set), and a is
	 * such that the quotient q = a/b fits on one word (0 &lt;= q &lt; w).
	 *
	 * If a = b*q + r (with 0 &lt;= r &lt; q), then we can estimate q by
	 * using a division on the top words:
	 *   a0*w + a1 = b0*u + v (with 0 &lt;= v &lt; b0)
	 * Then the following holds:
	 *   0 &lt;= u &lt;= w
	 *   u-2 &lt;= q &lt;= u
	 */</comment>
	<expr_stmt><expr><name>hi</name> <operator>=</operator> <name><name>x</name><index>[<expr><name>mlen</name></expr>]</index></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>mblr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>a0</name> <operator>=</operator> <name><name>x</name><index>[<expr><name>mlen</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>mlen</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>a0</name> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>+</operator> <name><name>x</name><index>[<expr><name>mlen</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>m</name><index>[<expr><name>mlen</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>a0</name> <operator>=</operator> <operator>(</operator><name><name>x</name><index>[<expr><name>mlen</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">15</literal> <operator>-</operator> <name>mblr</name><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>x</name><index>[<expr><name>mlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>mblr</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>mlen</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>a0</name> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>x</name><index>[<expr><name>mlen</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">15</literal> <operator>-</operator> <name>mblr</name><operator>)</operator><operator>)</operator>
			<operator>|</operator> <operator>(</operator><name><name>x</name><index>[<expr><name>mlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>mblr</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7FFF</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name><name>m</name><index>[<expr><name>mlen</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">15</literal> <operator>-</operator> <name>mblr</name><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>m</name><index>[<expr><name>mlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>mblr</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>divrem16</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We computed an estimate for q, but the real one may be q,
	 * q-1 or q-2; moreover, the division may have returned a value
	 * 8000 or even 8001 if the two high words were identical, and
	 * we want to avoid values beyond 7FFF. We thus adjust q so
	 * that the "true" multiplier will be q+1, q or q-1, and q is
	 * in the 0000..7FFF range.
	 */</comment>
	<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>MUX</name><argument_list>(<argument><expr><call><name>EQ</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x7FFF</literal></expr></argument>, <argument><expr><name>q</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>q</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We subtract q*m from x (x has an extra high word of value 'hi').
	 * Since q may be off by 1 (in either direction), we may have to
	 * add or subtract m afterwards.
	 *
	 * The 'tb' flag will be true (1) at the end of the loop if the
	 * result is greater than or equal to the modulus (not counting
	 * 'hi' or the carry).
	 */</comment>
	<expr_stmt><expr><name>cc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>tb</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;=</operator> <name>mlen</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>mw</name></decl>, <decl><type ref="prev"/><name>zl</name></decl>, <decl><type ref="prev"/><name>xw</name></decl>, <decl><type ref="prev"/><name>nxw</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>mw</name> <operator>=</operator> <name><name>m</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>zl</name> <operator>=</operator> <call><name>MUL15</name><argument_list>(<argument><expr><name>mw</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>cc</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cc</name> <operator>=</operator> <name>zl</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>zl</name> <operator>&amp;=</operator> <literal type="number">0x7FFF</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>xw</name> <operator>=</operator> <name><name>x</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>nxw</name> <operator>=</operator> <name>xw</name> <operator>-</operator> <name>zl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cc</name> <operator>+=</operator> <name>nxw</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>nxw</name> <operator>&amp;=</operator> <literal type="number">0x7FFF</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>x</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>nxw</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tb</name> <operator>=</operator> <call><name>MUX</name><argument_list>(<argument><expr><call><name>EQ</name><argument_list>(<argument><expr><name>nxw</name></expr></argument>, <argument><expr><name>mw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tb</name></expr></argument>, <argument><expr><call><name>GT</name><argument_list>(<argument><expr><name>nxw</name></expr></argument>, <argument><expr><name>mw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * If we underestimated q, then either cc &lt; hi (one extra bit
	 * beyond the top array word), or cc == hi and tb is true (no
	 * extra bit, but the result is not lower than the modulus).
	 *
	 * If we overestimated q, then cc &gt; hi.
	 */</comment>
	<expr_stmt><expr><name>over</name> <operator>=</operator> <call><name>GT</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>under</name> <operator>=</operator> <operator>~</operator><name>over</name> <operator>&amp;</operator> <operator>(</operator><name>tb</name> <operator>|</operator> <call><name>LT</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_add</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>over</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_sub</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>under</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
