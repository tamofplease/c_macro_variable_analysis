<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/bearssl/bre/bre_asn1.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bre_asn1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bre_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bre_internal.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>_tag_write</name><parameter_list>(<parameter><decl><type><name>asn1_tag_t</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out_buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>out_buf</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>out_buf</name><operator>)</operator> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// todo: aware multibyte tags</comment>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>_node_register</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>child</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>parent</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>child</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>parent</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>child</name></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>child</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>_node_header_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out_buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>asn1_tag_t</name></type> <name>tag</name> <init>= <expr><name><name>n</name><operator>-&gt;</operator><name>tag</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">127</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>len</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>c</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>out_buf</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>_tag_write</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>c</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><name>out_buf</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wp</name> <init>= <expr><name>sp</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>wp</name> <operator>+=</operator> <call><name>_tag_write</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>wp</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <name>c</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>c</name><operator>--</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>wp</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>len</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>c</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>wp</name><operator>++</operator> <operator>=</operator> <name>len</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>wp</name> <operator>-</operator> <name>sp</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>_integer_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out_buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>vi64</name> <init>= <expr><name><name>n</name><operator>-&gt;</operator><name>vi64</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>nbuf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>vi64</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>nbuf</name></expr></init></decl>, <decl><type ref="prev"/><name>bv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>vi64</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>, <decl><type ref="prev"/><name>skip_zero</name></decl>, <decl><type ref="prev"/><name>skip_sign</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>vi64</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>skip_sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>skip_zero</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>skip_sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>skip_zero</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <do>do <block>{<block_content>
    <expr_stmt><expr><name>i</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>bv</name> <operator>=</operator> <name>vi64</name> <operator>&gt;&gt;</operator> <name>i</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>skip_sign</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>bv</name> <operator>!=</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>skip_sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>bv</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>wp</name> <operator>=</operator> <name>bv</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>bv</name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>wp</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>skip_sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>bv</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>skip_zero</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>skip_zero</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>skip_zero</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bv</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>vi64</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>wp</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>wp</name><operator>++</operator> <operator>=</operator> <name>bv</name></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
  <if_stmt><if>if <condition>(<expr><name>skip_sign</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>wp</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><name>wp</name> <operator>-</operator> <name>nbuf</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>sz</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>nbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>ret</name> <init>= <expr><call><name>_node_header_write</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>out_buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>out_buf</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <name>out_buf</name> <operator>+</operator> <name>ret</name></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name> <operator>+</operator> <name>sz</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>asn1_integer_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn1</name></name> <modifier>*</modifier></type><name>asn1</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>pool_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>asn1</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>asn1</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <call><name>BRE_ERROR</name><argument_list>(<argument><expr><name>ALLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>n</name> <operator>=</operator> <operator>(</operator>struct <name>asn1_node</name><operator>)</operator> <block>{
    <expr><operator>.</operator><name>tag</name> <operator>=</operator> <literal type="number">0x02</literal></expr>,
    <expr><operator>.</operator><name>asn1</name> <operator>=</operator> <name>asn1</name></expr>,
    <expr><operator>.</operator><name>vi64</name> <operator>=</operator> <name>val</name></expr>,
    <expr><operator>.</operator><name>write</name> <operator>=</operator> <name>_integer_write</name></expr>
  }</block></expr>;</expr_stmt>
  <return>return <expr><call><name>_node_register</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>_bitstring_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out_buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>bits_left</name> <init>= <expr><name><name>n</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>vlen</name> <init>= <expr><operator>(</operator><name>bits_left</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>out_buf</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>_node_header_write</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>vlen</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>unused</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><name>out_buf</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wp</name> <init>= <expr><name>sp</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rp</name> <init>= <expr><name><name>n</name><operator>-&gt;</operator><name>vptr</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>wp</name> <operator>+=</operator> <call><name>_node_header_write</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bsp</name> <init>= <expr><name>wp</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>wp</name><operator>++</operator></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>bits_left</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>wp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>bits_left</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>bits</name> <operator>=</operator> <name>bits_left</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>unused</name> <operator>=</operator> <literal type="number">8</literal> <operator>-</operator> <name>bits_left</name></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bits</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>wp</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>rp</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>wp</name> <operator>=</operator> <operator>*</operator><name>rp</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>bits_left</name> <operator>-=</operator> <name>bits</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>wp</name><operator>++</operator></expr><operator>,</operator> <expr><name>rp</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>bsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>unused</name></expr>;</expr_stmt>
  <return>return <expr><name>wp</name> <operator>-</operator> <name>sp</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>_string_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out_buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>out_buf</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>_node_header_write</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>n</name><operator>-&gt;</operator><name>vlen</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>ret</name> <init>= <expr><call><name>_node_header_write</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>, <argument><expr><name>out_buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <name>out_buf</name> <operator>+</operator> <name>ret</name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>vptr</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name> <operator>+</operator> <name><name>n</name><operator>-&gt;</operator><name>vlen</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>asn1_string_add</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>asn1</name></name> <modifier>*</modifier></type><name>asn1</name></decl></parameter>, <parameter><decl><type><name>asn1_tag_t</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
  <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>

  <decl_stmt><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>pool_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>asn1</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>asn1</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <call><name>BRE_ERROR</name><argument_list>(<argument><expr><name>ALLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>n</name> <operator>=</operator> <operator>(</operator>struct <name>asn1_node</name><operator>)</operator> <block>{
    <expr><operator>.</operator><name>tag</name> <operator>=</operator> <name>tag</name></expr>,
    <expr><operator>.</operator><name>asn1</name> <operator>=</operator> <name>asn1</name></expr>,
    <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>flags</name></expr>,
    <expr><operator>.</operator><name>vptr</name> <operator>=</operator> <name>data</name></expr>,
    <expr><operator>.</operator><name>vlen</name> <operator>=</operator> <name>len</name></expr>
  }</block></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">0x0c</literal></expr>:</case> <comment type="line">// UTF8 String</comment>
    <case>case <expr><literal type="number">0x04</literal></expr>:</case> <comment type="line">// Octet string</comment>
    <case>case <expr><literal type="number">0x13</literal></expr>:</case> <comment type="line">// Printable string</comment>
    <case>case <expr><literal type="number">0x16</literal></expr>:</case> <comment type="line">// IA5 String</comment>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>write</name></name> <operator>=</operator> <name>_string_write</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">0x03</literal></expr>:</case> <comment type="line">// Bit string</comment>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>write</name></name> <operator>=</operator> <name>_bitstring_write</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tag</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// Content specific / private tag</comment>
        <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>write</name></name> <operator>=</operator> <name>_string_write</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>asn1</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <call><name>BRE_ERROR</name><argument_list>(<argument><expr><name>INVALID_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
  </block_content>}</block></switch>

  <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ASN1_STRING_COPY</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>vlen</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="number">0x03</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>vlen</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>nb</name> <init>= <expr><call><name>pool_alloc</name><argument_list>(<argument><expr><name>vlen</name></expr></argument>, <argument><expr><name><name>asn1</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nb</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>asn1</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <call><name>BRE_ERROR</name><argument_list>(<argument><expr><name>ALLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>nb</name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>vptr</name></name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>vptr</name></name> <operator>=</operator> <name>nb</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>_node_register</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>_oid_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out_buf</name></decl></parameter>)</parameter_list> <block>{<block_content>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><name>ASN1_MAX_OBJECT_ID_OCTETS</name> <operator>*</operator> <literal type="number">5</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wp</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>asn1_oid</name></name> <modifier>*</modifier></type><name>oid</name> <init>= <expr><operator>&amp;</operator><name><name>n</name><operator>-&gt;</operator><name>vid</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>oid</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>oid</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>asn1</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <call><name>BRE_ERROR</name><argument_list>(<argument><expr><name>INVALID_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ASN1_MAX_OBJECT_ID_OCTETS</name> <operator>&amp;&amp;</operator> <name><name>oid</name><operator>-&gt;</operator><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>shift</name></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><name><name>oid</name><operator>-&gt;</operator><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="number">0</literal></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>asn1</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <call><name>BRE_ERROR</name><argument_list>(<argument><expr><name>INVALID_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>wp</name> <operator>=</operator> <name>k</name> <operator>*</operator> <literal type="number">40</literal></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="number">1</literal></expr>:</case>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>k</name> <operator>&gt;</operator> <literal type="number">39</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>oid</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>asn1</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <call><name>BRE_ERROR</name><argument_list>(<argument><expr><name>INVALID_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>k</name> <operator>+=</operator> <operator>*</operator><name>wp</name></expr>;</expr_stmt>
      <comment type="block">/* fall through */</comment>
      <default>default:</default>
        <expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">28</literal></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>shift</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>k</name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>shift</name> <operator>-=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
        </block_content>}</block></while>
        <while>while <condition>(<expr><name>shift</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>wp</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>k</name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>shift</name> <operator>-=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><operator>*</operator><name>wp</name><operator>++</operator> <operator>=</operator> <name>k</name> <operator>&amp;</operator> <literal type="number">0x7F</literal></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></for>
  <decl_stmt><decl><type><name>size_t</name></type> <name>ret</name> <init>= <expr><call><name>_node_header_write</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>wp</name> <operator>-</operator> <name>buf</name></expr></argument>, <argument><expr><name>out_buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>out_buf</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>ret</name> <operator>+</operator> <name>wp</name> <operator>-</operator> <name>buf</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <name>out_buf</name> <operator>+</operator> <name>ret</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>wp</name> <operator>-</operator> <name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name> <operator>+</operator> <name>wp</name> <operator>-</operator> <name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>_asn1_add_oid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn1</name></name> <modifier>*</modifier></type><name>asn1</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn1_oid</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>pool_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>asn1</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>asn1</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <call><name>BRE_ERROR</name><argument_list>(<argument><expr><name>ALLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>n</name> <operator>=</operator> <operator>(</operator>struct <name>asn1_node</name><operator>)</operator> <block>{
    <expr><operator>.</operator><name>tag</name> <operator>=</operator> <literal type="number">0x6</literal></expr>,
    <expr><operator>.</operator><name>asn1</name> <operator>=</operator> <name>asn1</name></expr>,
    <expr><operator>.</operator><name>vid</name> <operator>=</operator> <operator>*</operator><name>oid</name></expr>,
    <expr><operator>.</operator><name>write</name> <operator>=</operator> <name>_oid_write</name></expr>
  }</block></expr>;</expr_stmt>
  <return>return <expr><call><name>_node_register</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>asn1_oid_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn1</name></name> <modifier>*</modifier></type><name>asn1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>asn1_oid</name></name></type> <name>aoid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><name>oid</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rp</name> <init>= <expr><name>sp</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>ASN1_MAX_OBJECT_ID_OCTETS</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>rp</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>rp</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>rp</name> <operator>==</operator> <name>sp</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>asn1</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <call><name>BRE_ERROR</name><argument_list>(<argument><expr><name>INVALID_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>aoid</name><operator>.</operator><name>value</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>bre_atoi</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>rp</name> <operator>-</operator> <name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>rp</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>rp</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>sp</name> <operator>=</operator> <name>rp</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>rp</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>aoid</name><operator>.</operator><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><call><name>_asn1_add_oid</name><argument_list>(<argument><expr><name>asn1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aoid</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>_container_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out_buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>out_buf</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier><name>nn</name></type> <init>= <expr><name><name>n</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</init> <condition><expr><name>nn</name></expr>;</condition> <incr><expr><name>nn</name> <operator>=</operator> <name><name>nn</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>sz</name> <operator>+=</operator> <call><name>ZRET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>nn</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name>nn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_node_header_write</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>out_buf</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>ret</name> <operator>+</operator> <name>sz</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>wp</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier><name>nn</name></type> <init>= <expr><name><name>n</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</init> <condition><expr><name>nn</name></expr>;</condition> <incr><expr><name>nn</name> <operator>=</operator> <name><name>nn</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>wp</name> <operator>+=</operator> <call><name>ZRET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>nn</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name>nn</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>ret</name> <operator>+</operator> <name>sz</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>asn1_container_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn1</name></name> <modifier>*</modifier></type><name>asn1</name></decl></parameter>, <parameter><decl><type><name>asn1_tag_t</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>pool_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>asn1</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>asn1</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <call><name>BRE_ERROR</name><argument_list>(<argument><expr><name>ALLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>n</name> <operator>=</operator> <operator>(</operator>struct <name>asn1_node</name><operator>)</operator> <block>{
    <expr><operator>.</operator><name>tag</name> <operator>=</operator> <name>tag</name></expr>,
    <expr><operator>.</operator><name>asn1</name> <operator>=</operator> <name>asn1</name></expr>,
    <expr><operator>.</operator><name>write</name> <operator>=</operator> <name>_container_write</name></expr>
  }</block></expr>;</expr_stmt>
  <return>return <expr><call><name>_node_register</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>asn1_der_allocated</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>asn1</name></name> <modifier>*</modifier></type><name>asn1</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>out_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>out_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><call><name><name>n</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>sz</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>asn1</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <call><name>BRE_ERROR</name><argument_list>(<argument><expr><name>FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name><name>asn1</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>alloc</name></name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>asn1</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <call><name>BRE_ERROR</name><argument_list>(<argument><expr><name>ALLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sz2</name> <init>= <expr><call><name><name>n</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>!=</operator> <name>sz2</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>asn1</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>dealloc</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>asn1</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <call><name>BRE_ERROR</name><argument_list>(<argument><expr><name>FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>out_size</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
  <return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>
</unit>
