<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/bearssl/rsa/rsa_i15_keygen.c"><comment type="block">/*
 * Copyright (c) 2018 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Make a random integer of the provided size. The size is encoded.
 * The header word is untouched.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>mkrand</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_prng_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>rng</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>esize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>m</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>esize</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>rng</name><operator>)</operator><operator>-&gt;</operator><name>generate</name></name><argument_list>(<argument><expr><name>rng</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>x</name><index>[<expr><name>u</name></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0x7FFF</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>m</name> <operator>=</operator> <name>esize</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>x</name><index>[<expr><name>len</name></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0x7FFF</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>x</name><index>[<expr><name>len</name></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0x7FFF</literal> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">15</literal> <operator>-</operator> <name>m</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * This is the big-endian unsigned representation of the product of
 * all small primes from 13 to 1481.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>SMALL_PRIMES</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x0A</literal></expr>,
	<expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0xB7</literal></expr>,
	<expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x37</literal></expr>,
	<expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0xE5</literal></expr>,
	<expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0x9E</literal></expr>,
	<expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xB6</literal></expr>,
	<expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x0C</literal></expr>,
	<expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x40</literal></expr>,
	<expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x50</literal></expr>,
	<expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0xD7</literal></expr>,
	<expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xF3</literal></expr>,
	<expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x3E</literal></expr>,
	<expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xDC</literal></expr>,
	<expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0x08</literal></expr>,
	<expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x2B</literal></expr>,
	<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x22</literal></expr>,
	<expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x77</literal></expr>,
	<expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x1E</literal></expr>,
	<expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x80</literal></expr>,
	<expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0xA8</literal></expr>,
	<expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0xA2</literal></expr>,
	<expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0xBC</literal></expr>,
	<expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x54</literal></expr>,
	<expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x74</literal></expr>,
	<expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0x5C</literal></expr>,
	<expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0xBD</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * We need temporary values for at least 7 integers of the same size
 * as a factor (including header word); more space helps with performance
 * (in modular exponentiations), but we much prefer to remain under
 * 2 kilobytes in total, to save stack space. The macro TEMPS below
 * exceeds 1024 (which is a count in 16-bit words) when BR_MAX_RSA_SIZE
 * is greater than 4350 (default value is 4096, so the 2-kB limit is
 * maintained unless BR_MAX_RSA_SIZE was modified).
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>((x) &gt; (y) ? (x) : (y))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPS</name></cpp:macro>       <cpp:value>MAX(1024, 7 * ((((BR_MAX_RSA_SIZE + 1) &gt;&gt; 1) + 29) / 15))</cpp:value></cpp:define>

<comment type="block">/*
 * Perform trial division on a candidate prime. This computes
 * y = SMALL_PRIMES mod x, then tries to compute y/y mod x. The
 * br_i15_moddiv() function will report an error if y is not invertible
 * modulo x. Returned value is 1 on success (none of the small primes
 * divides x), 0 on error (a non-trivial GCD is obtained).
 *
 * This function assumes that x is odd.
 */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>trial_divisions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>y</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16_t</name></type> <name>x0i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>y</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>x0i</name> <operator>=</operator> <call><name>br_i15_ninv15</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_decode_reduce</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>SMALL_PRIMES</name></expr></argument>, <argument><expr><sizeof>sizeof <name>SMALL_PRIMES</name></sizeof></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>br_i15_moddiv</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>x0i</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Perform n rounds of Miller-Rabin on the candidate prime x. This
 * function assumes that x = 3 mod 4.
 *
 * Returned value is 1 on success (all rounds completed successfully),
 * 0 otherwise.
 */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>miller_rabin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_prng_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>rng</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,
	<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>tlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Since x = 3 mod 4, the Miller-Rabin test is simple:
	 *  - get a random base a (such that 1 &lt; a &lt; x-1)
	 *  - compute z = a^((x-1)/2) mod x
	 *  - if z != 1 and z != x-1, the number x is composite
	 *
	 * We generate bases 'a' randomly with a size which is
	 * one bit less than x, which ensures that a &lt; x-1. It
	 * is not useful to verify that a &gt; 1 because the probability
	 * that we get a value a equal to 0 or 1 is much smaller
	 * than the probability of our Miller-Rabin tests not to
	 * detect a composite, which is already quite smaller than the
	 * probability of the hardware misbehaving and return a
	 * composite integer because of some glitch (e.g. bad RAM
	 * or ill-timed cosmic ray).
	 */</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>xm1d2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>xlen</name></decl>, <decl><type ref="prev"/><name>xm1d2_len</name></decl>, <decl><type ref="prev"/><name>xm1d2_len_u16</name></decl>, <decl><type ref="prev"/><name>u</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>asize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>cc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16_t</name></type> <name>x0i</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Compute (x-1)/2 (encoded).
	 */</comment>
	<expr_stmt><expr><name>xm1d2</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>t</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>xm1d2_len</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_encode</name><argument_list>(<argument><expr><name>xm1d2</name></expr></argument>, <argument><expr><name>xm1d2_len</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>xm1d2_len</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>w</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>xm1d2</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>xm1d2</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <name>cc</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>cc</name> <operator>=</operator> <name>w</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * We used some words of the provided buffer for (x-1)/2.
	 */</comment>
	<expr_stmt><expr><name>xm1d2_len_u16</name> <operator>=</operator> <operator>(</operator><name>xm1d2_len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>t</name> <operator>+=</operator> <name>xm1d2_len_u16</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tlen</name> <operator>-=</operator> <name>xm1d2_len_u16</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>xlen</name> <operator>=</operator> <operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>asize</name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <call><name>EQ0</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>x0i</name> <operator>=</operator> <call><name>br_i15_ninv15</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>n</name> <operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>eq1</name></decl>, <decl><type ref="prev"/><name>eqm1</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Generate a random base. We don't need the base to be
		 * really uniform modulo x, so we just get a random
		 * number which is one bit shorter than x.
		 */</comment>
		<expr_stmt><expr><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><name>xlen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mkrand</name><argument_list>(<argument><expr><name>rng</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Compute a^((x-1)/2) mod x. We assume here that the
		 * function will not fail (the temporary array is large
		 * enough).
		 */</comment>
		<expr_stmt><expr><call><name>br_i15_modpow_opt</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>xm1d2</name></expr></argument>, <argument><expr><name>xm1d2_len</name></expr></argument>,
			<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x0i</name></expr></argument>, <argument><expr><name>t</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>xlen</name></expr></argument>, <argument><expr><name>tlen</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>xlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * We must obtain either 1 or x-1. Note that x is odd,
		 * hence x-1 differs from x only in its low word (no
		 * carry).
		 */</comment>
		<expr_stmt><expr><name>eq1</name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>eqm1</name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;=</operator> <name>xlen</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>eq1</name> <operator>|=</operator> <name><name>a</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>eqm1</name> <operator>|=</operator> <name><name>a</name><index>[<expr><name>u</name></expr>]</index></name> <operator>^</operator> <name><name>x</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>EQ0</name><argument_list>(<argument><expr><name>eq1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>EQ0</name><argument_list>(<argument><expr><name>eqm1</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Create a random prime of the provided size. 'size' is the _encoded_
 * bit length. The two top bits and the two bottom bits are set to 1.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>mkprime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_prng_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>rng</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>esize</name></decl></parameter>,
	<parameter><decl><type><name>uint32_t</name></type> <name>pubexp</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>tlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>esize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>esize</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>m3</name></decl>, <decl><type ref="prev"/><name>m5</name></decl>, <decl><type ref="prev"/><name>m7</name></decl>, <decl><type ref="prev"/><name>m11</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>rounds</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Generate random bits. We force the two top bits and the
		 * two bottom bits to 1.
		 */</comment>
		<expr_stmt><expr><call><name>mkrand</name><argument_list>(<argument><expr><name>rng</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>esize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>esize</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>x</name><index>[<expr><name>len</name></expr>]</index></name> <operator>|=</operator> <literal type="number">0x6000</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>esize</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>x</name><index>[<expr><name>len</name></expr>]</index></name> <operator>|=</operator> <literal type="number">0x0001</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>x</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">0x4000</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name><name>x</name><index>[<expr><name>len</name></expr>]</index></name> <operator>|=</operator> <literal type="number">0x0003</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name>esize</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">0x0003</literal></expr>;</expr_stmt>

		<comment type="block">/*
		 * Trial division with low primes (3, 5, 7 and 11). We
		 * use the following properties:
		 *
		 *   2^2 = 1 mod 3
		 *   2^4 = 1 mod 5
		 *   2^3 = 1 mod 7
		 *   2^10 = 1 mod 11
		 */</comment>
		<expr_stmt><expr><name>m3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>m5</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>m7</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>m11</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>uint32_t</name></type> <name>w</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>u</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>m3</name> <operator>+=</operator> <name>w</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>u</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>m3</name> <operator>=</operator> <operator>(</operator><name>m3</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>m3</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>m5</name> <operator>+=</operator> <name>w</name> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><literal type="number">4</literal> <operator>-</operator> <name>u</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>m5</name> <operator>=</operator> <operator>(</operator><name>m5</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>m5</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>m7</name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>m7</name> <operator>=</operator> <operator>(</operator><name>m7</name> <operator>&amp;</operator> <literal type="number">0x1FF</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>m7</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>m11</name> <operator>+=</operator> <name>w</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">5</literal> <operator>&amp;</operator> <operator>-</operator><operator>(</operator><name>u</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>m11</name> <operator>=</operator> <operator>(</operator><name>m11</name> <operator>&amp;</operator> <literal type="number">0x3FF</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>m11</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="block">/*
		 * Maximum values of m* at this point:
		 *  m3:   511
		 *  m5:   2310
		 *  m7:   510
		 *  m11:  2047
		 * We use the same properties to make further reductions.
		 */</comment>

		<expr_stmt><expr><name>m3</name> <operator>=</operator> <operator>(</operator><name>m3</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>m3</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>      <comment type="block">/* max: 46 */</comment>
		<expr_stmt><expr><name>m3</name> <operator>=</operator> <operator>(</operator><name>m3</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>m3</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>      <comment type="block">/* max: 16 */</comment>
		<expr_stmt><expr><name>m3</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>m3</name> <operator>*</operator> <literal type="number">43</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name>m5</name> <operator>=</operator> <operator>(</operator><name>m5</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>m5</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>      <comment type="block">/* max: 263 */</comment>
		<expr_stmt><expr><name>m5</name> <operator>=</operator> <operator>(</operator><name>m5</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>m5</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>      <comment type="block">/* max: 30 */</comment>
		<expr_stmt><expr><name>m5</name> <operator>=</operator> <operator>(</operator><name>m5</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>m5</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>      <comment type="block">/* max: 15 */</comment>
		<expr_stmt><expr><name>m5</name> <operator>-=</operator> <literal type="number">10</literal> <operator>&amp;</operator> <operator>-</operator><call><name>GT</name><argument_list>(<argument><expr><name>m5</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>m5</name> <operator>-=</operator> <literal type="number">5</literal> <operator>&amp;</operator> <operator>-</operator><call><name>GT</name><argument_list>(<argument><expr><name>m5</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>m7</name> <operator>=</operator> <operator>(</operator><name>m7</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>m7</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>      <comment type="block">/* max: 69 */</comment>
		<expr_stmt><expr><name>m7</name> <operator>=</operator> <operator>(</operator><name>m7</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>m7</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>         <comment type="block">/* max: 14 */</comment>
		<expr_stmt><expr><name>m7</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>m7</name> <operator>*</operator> <literal type="number">147</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

		<comment type="block">/*
		 * 2^5 = 32 = -1 mod 11.
		 */</comment>
		<expr_stmt><expr><name>m11</name> <operator>=</operator> <operator>(</operator><name>m11</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>+</operator> <literal type="number">66</literal> <operator>-</operator> <operator>(</operator><name>m11</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>   <comment type="block">/* max: 97 */</comment>
		<expr_stmt><expr><name>m11</name> <operator>-=</operator> <literal type="number">88</literal> <operator>&amp;</operator> <operator>-</operator><call><name>GT</name><argument_list>(<argument><expr><name>m11</name></expr></argument>, <argument><expr><literal type="number">87</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>m11</name> <operator>-=</operator> <literal type="number">44</literal> <operator>&amp;</operator> <operator>-</operator><call><name>GT</name><argument_list>(<argument><expr><name>m11</name></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>m11</name> <operator>-=</operator> <literal type="number">22</literal> <operator>&amp;</operator> <operator>-</operator><call><name>GT</name><argument_list>(<argument><expr><name>m11</name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>m11</name> <operator>-=</operator> <literal type="number">11</literal> <operator>&amp;</operator> <operator>-</operator><call><name>GT</name><argument_list>(<argument><expr><name>m11</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * If any of these modulo is 0, then the candidate is
		 * not prime. Also, if pubexp is 3, 5, 7 or 11, and the
		 * corresponding modulus is 1, then the candidate must
		 * be rejected, because we need e to be invertible
		 * modulo p-1. We can use simple comparisons here
		 * because they won't leak information on a candidate
		 * that we keep, only on one that we reject (and is thus
		 * not secret).
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>m3</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>m5</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>m7</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>m11</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pubexp</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>m3</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator>
			<operator>||</operator> <operator>(</operator><name>pubexp</name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name>m5</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator>
			<operator>||</operator> <operator>(</operator><name>pubexp</name> <operator>==</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <name>m7</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator>
			<operator>||</operator> <operator>(</operator><name>pubexp</name> <operator>==</operator> <literal type="number">11</literal> <operator>&amp;&amp;</operator> <name>m11</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * More trial divisions.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>trial_divisions</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Miller-Rabin algorithm. Since we selected a random
		 * integer, not a maliciously crafted integer, we can use
		 * relatively few rounds to lower the risk of a false
		 * positive (i.e. declaring prime a non-prime) under
		 * 2^(-80). It is not useful to lower the probability much
		 * below that, since that would be substantially below
		 * the probability of the hardware misbehaving. Sufficient
		 * numbers of rounds are extracted from the Handbook of
		 * Applied Cryptography, note 4.49 (page 149).
		 *
		 * Since we work on the encoded size (esize), we need to
		 * compare with encoded thresholds.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>esize</name> <operator>&lt;</operator> <literal type="number">320</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>rounds</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>esize</name> <operator>&lt;</operator> <literal type="number">480</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>rounds</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>esize</name> <operator>&lt;</operator> <literal type="number">693</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>rounds</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>esize</name> <operator>&lt;</operator> <literal type="number">906</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>rounds</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>esize</name> <operator>&lt;</operator> <literal type="number">1386</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>rounds</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>rounds</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>miller_rabin</name><argument_list>(<argument><expr><name>rng</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>rounds</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Let p be a prime (p &gt; 2^33, p = 3 mod 4). Let m = (p-1)/2, provided
 * as parameter (with announced bit length equal to that of p). This
 * function computes d = 1/e mod p-1 (for an odd integer e). Returned
 * value is 1 on success, 0 on error (an error is reported if e is not
 * invertible modulo p-1).
 *
 * The temporary buffer (t) must have room for at least 4 integers of
 * the size of p.
 */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>invert_pubexp</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>f</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * Compute d = 1/e mod m. Since p = 3 mod 4, m is odd.
	 */</comment>
	<expr_stmt><expr><call><name>br_i15_zero</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_zero</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e</name> <operator>&amp;</operator> <literal type="number">0x7FFF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>e</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7FFF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>e</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>br_i15_moddiv</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><call><name>br_i15_ninv15</name><argument_list>(<argument><expr><name><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We really want d = 1/e mod p-1, with p = 2m. By the CRT,
	 * the result is either the d we got, or d + m.
	 *
	 * Let's write e*d = 1 + k*m, for some integer k. Integers e
	 * and m are odd. If d is odd, then e*d is odd, which implies
	 * that k must be even; in that case, e*d = 1 + (k/2)*2m, and
	 * thus d is already fine. Conversely, if d is even, then k
	 * is odd, and we must add m to d in order to get the correct
	 * result.
	 */</comment>
	<expr_stmt><expr><call><name>br_i15_add</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Swap two buffers in RAM. They must be disjoint.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>bufswap</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf2</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf1</name> <operator>=</operator> <name>b1</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>buf2</name> <operator>=</operator> <name>b2</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>w</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>buf1</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf1</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name><name>buf2</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf2</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* see bearssl_rsa.h */</comment>
<function><type><name>uint32_t</name></type>
<name>br_rsa_i15_keygen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_prng_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>rng</name></decl></parameter>,
	<parameter><decl><type><name>br_rsa_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>kbuf_priv</name></decl></parameter>,
	<parameter><decl><type><name>br_rsa_public_key</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>kbuf_pub</name></decl></parameter>,
	<parameter><decl><type><name>unsigned</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>pubexp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>esize_p</name></decl>, <decl><type ref="prev"/><name>esize_q</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>plen</name></decl>, <decl><type ref="prev"/><name>qlen</name></decl>, <decl><type ref="prev"/><name>tlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>tmp</name><index>[<expr><name>TEMPS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>size</name> <argument_list type="generic">&lt; <argument><expr><name>BR_MIN_RSA_SIZE</name> <operator>||</operator> <name>size</name></expr></argument> &gt;</argument_list></name> <name>BR_MAX_RSA_SIZE</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>pubexp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>pubexp</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pubexp</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>pubexp</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>esize_p</name> <operator>=</operator> <operator>(</operator><name>size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>esize_q</name> <operator>=</operator> <name>size</name> <operator>-</operator> <name>esize_p</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sk</name><operator>-&gt;</operator><name>n_bitlen</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sk</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>kbuf_priv</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sk</name><operator>-&gt;</operator><name>plen</name></name> <operator>=</operator> <operator>(</operator><name>esize_p</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sk</name><operator>-&gt;</operator><name>q</name></name> <operator>=</operator> <name><name>sk</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <name><name>sk</name><operator>-&gt;</operator><name>plen</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sk</name><operator>-&gt;</operator><name>qlen</name></name> <operator>=</operator> <operator>(</operator><name>esize_q</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sk</name><operator>-&gt;</operator><name>dp</name></name> <operator>=</operator> <name><name>sk</name><operator>-&gt;</operator><name>q</name></name> <operator>+</operator> <name><name>sk</name><operator>-&gt;</operator><name>qlen</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sk</name><operator>-&gt;</operator><name>dplen</name></name> <operator>=</operator> <name><name>sk</name><operator>-&gt;</operator><name>plen</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sk</name><operator>-&gt;</operator><name>dq</name></name> <operator>=</operator> <name><name>sk</name><operator>-&gt;</operator><name>dp</name></name> <operator>+</operator> <name><name>sk</name><operator>-&gt;</operator><name>dplen</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sk</name><operator>-&gt;</operator><name>dqlen</name></name> <operator>=</operator> <name><name>sk</name><operator>-&gt;</operator><name>qlen</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sk</name><operator>-&gt;</operator><name>iq</name></name> <operator>=</operator> <name><name>sk</name><operator>-&gt;</operator><name>dq</name></name> <operator>+</operator> <name><name>sk</name><operator>-&gt;</operator><name>dqlen</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sk</name><operator>-&gt;</operator><name>iqlen</name></name> <operator>=</operator> <name><name>sk</name><operator>-&gt;</operator><name>plen</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>pk</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>kbuf_pub</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>nlen</name></name> <operator>=</operator> <operator>(</operator><name>size</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>e</name></name> <operator>=</operator> <name><name>pk</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <name><name>pk</name><operator>-&gt;</operator><name>nlen</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>elen</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_enc32be</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>e</name></name></expr></argument>, <argument><expr><name>pubexp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while <condition>(<expr><operator>*</operator><name><name>pk</name><operator>-&gt;</operator><name>e</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>e</name></name> <operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pk</name><operator>-&gt;</operator><name>elen</name></name> <operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * We now switch to encoded sizes.
	 *
	 * floor((x * 17477) / (2^18)) is equal to floor(x/15) for all
	 * integers x from 0 to 23833.
	 */</comment>
	<expr_stmt><expr><name>esize_p</name> <operator>+=</operator> <call><name>MUL15</name><argument_list>(<argument><expr><name>esize_p</name></expr></argument>, <argument><expr><literal type="number">17477</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">18</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>esize_q</name> <operator>+=</operator> <call><name>MUL15</name><argument_list>(<argument><expr><name>esize_q</name></expr></argument>, <argument><expr><literal type="number">17477</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">18</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>plen</name> <operator>=</operator> <operator>(</operator><name>esize_p</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>qlen</name> <operator>=</operator> <operator>(</operator><name>esize_q</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>plen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t</name> <operator>=</operator> <name>q</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>qlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tlen</name> <operator>=</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof <name>tmp</name></sizeof><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>-</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name>plen</name> <operator>+</operator> <name>qlen</name><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * When looking for primes p and q, we temporarily divide
	 * candidates by 2, in order to compute the inverse of the
	 * public exponent.
	 */</comment>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>mkprime</name><argument_list>(<argument><expr><name>rng</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>esize_p</name></expr></argument>, <argument><expr><name>pubexp</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_i15_rshift</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>invert_pubexp</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pubexp</name></expr></argument>, <argument><expr><name>t</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>plen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>br_i15_add</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>br_i15_encode</name><argument_list>(<argument><expr><name><name>sk</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>plen</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>br_i15_encode</name><argument_list>(<argument><expr><name><name>sk</name><operator>-&gt;</operator><name>dp</name></name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>dplen</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>mkprime</name><argument_list>(<argument><expr><name>rng</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>esize_q</name></expr></argument>, <argument><expr><name>pubexp</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_i15_rshift</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>invert_pubexp</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>pubexp</name></expr></argument>, <argument><expr><name>t</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>qlen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>br_i15_add</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>br_i15_encode</name><argument_list>(<argument><expr><name><name>sk</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>qlen</name></name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>br_i15_encode</name><argument_list>(<argument><expr><name><name>sk</name><operator>-&gt;</operator><name>dq</name></name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>dqlen</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * If p and q have the same size, then it is possible that q &gt; p
	 * (when the target modulus size is odd, we generate p with a
	 * greater bit length than q). If q &gt; p, we want to swap p and q
	 * (and also dp and dq) for two reasons:
	 *  - The final step below (inversion of q modulo p) is easier if
	 *    p &gt; q.
	 *  - While BearSSL's RSA code is perfectly happy with RSA keys such
	 *    that p &lt; q, some other implementations have restrictions and
	 *    require p &gt; q.
	 *
	 * Note that we can do a simple non-constant-time swap here,
	 * because the only information we leak here is that we insist on
	 * returning p and q such that p &gt; q, which is not a secret.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>esize_p</name> <operator>==</operator> <name>esize_q</name> <operator>&amp;&amp;</operator> <call><name>br_i15_sub</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>bufswap</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>plen</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>bufswap</name><argument_list>(<argument><expr><name><name>sk</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>plen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>bufswap</name><argument_list>(<argument><expr><name><name>sk</name><operator>-&gt;</operator><name>dp</name></name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>dq</name></name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>dplen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * We have produced p, q, dp and dq. We can now compute iq = 1/d mod p.
	 *
	 * We ensured that p &gt;= q, so this is just a matter of updating the
	 * header word for q (and possibly adding an extra word).
	 *
	 * Theoretically, the call below may fail, in case we were
	 * extraordinarily unlucky, and p = q. Another failure case is if
	 * Miller-Rabin failed us _twice_, and p and q are non-prime and
	 * have a factor is common. We report the error mostly because it
	 * is cheap and we can, but in practice this never happens (or, at
	 * least, it happens way less often than hardware glitches).
	 */</comment>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>plen</name> <operator>&gt;</operator> <name>qlen</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>q</name><index>[<expr><name>plen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> <operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>tlen</name> <operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>br_i15_zero</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>br_i15_moddiv</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>br_i15_ninv15</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>t</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_encode</name><argument_list>(<argument><expr><name><name>sk</name><operator>-&gt;</operator><name>iq</name></name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>iqlen</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Compute the public modulus too, if required.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>pk</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>br_i15_zero</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_i15_mulacc</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_i15_encode</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>nlen</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
</unit>
