<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/bearssl/bre/bre_pool.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bre_pool.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POOL_UNIT_ALIGN_SIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SIZE_T_MAX</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_T_MAX</name></cpp:macro> <cpp:value>((size_t) -1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUNDUP</name><parameter_list>(<parameter><type><name>x_</name></type></parameter>, <parameter><type><name>v_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x_) + (v_) - 1) &amp; ~((v_) - 1))</cpp:value></cpp:define>

<function><type><name><name>struct</name> <name>pool</name></name> <modifier>*</modifier></type><name>pool_create</name><parameter_list>(<parameter><decl><type><name>bre_alloc</name></type> <name>alloc</name></decl></parameter>, <parameter><decl><type><name>bre_dealloc</name></type> <name>dealloc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>siz</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>pool</name></name> <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>siz</name> <operator>=</operator> <ternary><condition><expr><name>siz</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">32</literal></expr> </then><else>: <expr><name>siz</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name>siz</name> <operator>=</operator> <call><name>ROUNDUP</name><argument_list>(<argument><expr><name>siz</name></expr></argument>, <argument><expr><name>POOL_UNIT_ALIGN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>error</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>unit</name></name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pool</name><operator>-&gt;</operator><name>unit</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pool</name><operator>-&gt;</operator><name>unit</name></name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>error</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>unit</name><operator>-&gt;</operator><name>heap</name></name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>siz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pool</name><operator>-&gt;</operator><name>unit</name><operator>-&gt;</operator><name>heap</name></name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>error</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>asiz</name></name> <operator>=</operator> <name>siz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>heap</name></name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>unit</name><operator>-&gt;</operator><name>heap</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>usiz</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>unit</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>user_data_free_fn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <name>alloc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>dealloc</name></name> <operator>=</operator> <name>dealloc</name></expr>;</expr_stmt>
  <return>return <expr><name>pool</name></expr>;</return>

<label><name>error</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>pool</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>unit</name></name> <operator>&amp;&amp;</operator> <name><name>pool</name><operator>-&gt;</operator><name>unit</name><operator>-&gt;</operator><name>heap</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>dealloc</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>unit</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>dealloc</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>unit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dealloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>pool_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pool</name></name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name><name>struct</name> <name>pool_unit</name></name> <modifier>*</modifier><name>u</name></type> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>unit</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</init> <condition><expr><name>u</name></expr>;</condition> <incr><expr><name>u</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>u</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>-&gt;</operator><name>dealloc</name></name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>-&gt;</operator><name>dealloc</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>user_data_free_fn</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>pool</name><operator>-&gt;</operator><name>user_data_free_fn</name></name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name><name>pool</name><operator>-&gt;</operator><name>dealloc</name></name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pool_extend</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pool</name></name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>siz</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>pool_unit</name></name> <modifier>*</modifier></type><name>nunit</name> <init>= <expr><call><name><name>pool</name><operator>-&gt;</operator><name>alloc</name></name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>nunit</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nunit</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>siz</name> <operator>=</operator> <call><name>ROUNDUP</name><argument_list>(<argument><expr><name>siz</name></expr></argument>, <argument><expr><name>POOL_UNIT_ALIGN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nunit</name><operator>-&gt;</operator><name>heap</name></name> <operator>=</operator> <call><name><name>pool</name><operator>-&gt;</operator><name>alloc</name></name><argument_list>(<argument><expr><name>siz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nunit</name><operator>-&gt;</operator><name>heap</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>pool</name><operator>-&gt;</operator><name>dealloc</name></name><argument_list>(<argument><expr><name>nunit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>nunit</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>unit</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>heap</name></name> <operator>=</operator> <name><name>nunit</name><operator>-&gt;</operator><name>heap</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>unit</name></name> <operator>=</operator> <name>nunit</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>usiz</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>asiz</name></name> <operator>=</operator> <name>siz</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>pool_alloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>siz</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pool</name></name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>siz</name> <operator>=</operator> <call><name>ROUNDUP</name><argument_list>(<argument><expr><name>siz</name></expr></argument>, <argument><expr><name>POOL_UNIT_ALIGN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>usiz</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>usiz</name></name> <operator>+</operator> <name>siz</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>SIZE_T_MAX</name> <operator>-</operator> <name><name>pool</name><operator>-&gt;</operator><name>usiz</name></name> <operator>&lt;</operator> <name>siz</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>heap</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>usiz</name> <operator>&gt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>asiz</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>SIZE_T_MAX</name> <operator>-</operator> <name><name>pool</name><operator>-&gt;</operator><name>asiz</name></name> <operator>&lt;</operator> <name>usiz</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>usiz</name> <operator>=</operator> <name>usiz</name> <operator>+</operator> <name><name>pool</name><operator>-&gt;</operator><name>asiz</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pool_extend</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>usiz</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>heap</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>usiz</name></name> <operator>+=</operator> <name>siz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>heap</name></name> <operator>+=</operator> <name>siz</name></expr>;</expr_stmt>
  <return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>pool_calloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>siz</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pool</name></name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>pool_alloc</name><argument_list>(<argument><expr><name>siz</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>siz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>pool_strndup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pool</name></name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>pool_alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ret</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>pool_strdup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pool</name></name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>pool_strndup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
