<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/bearssl/rand/aesctr_drbg.c"><comment type="block">/*
 * Copyright (c) 2018 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/* see bearssl_rand.h */</comment>
<function><type><name>void</name></type>
<name>br_aesctr_drbg_init</name><parameter_list>(<parameter><decl><type><name>br_aesctr_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>br_block_ctr_class</name> <modifier>*</modifier></type><name>aesctr</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>seed</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>vtable</name></name> <operator>=</operator> <operator>&amp;</operator><name>br_aesctr_drbg_vtable</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>tmp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>aesctr</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sk</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_aesctr_drbg_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl_rand.h */</comment>
<function><type><name>void</name></type>
<name>br_aesctr_drbg_generate</name><parameter_list>(<parameter><decl><type><name>br_aesctr_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>iv</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>iv</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>clen</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * We generate data by blocks of at most 65280 bytes. This
		 * allows for unambiguously testing the counter overflow
		 * condition; also, it should work on 16-bit architectures
		 * (where 'size_t' is 16 bits only).
		 */</comment>
		<expr_stmt><expr><name>clen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>clen</name> <operator>&gt;</operator> <literal type="number">65280</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>clen</name> <operator>=</operator> <literal type="number">65280</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * We make sure that the counter won't exceed the configured
		 * limit.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>cc</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>clen</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&gt;</operator> <literal type="number">32768</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>clen</name> <operator>=</operator> <operator>(</operator><literal type="number">32768</literal> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cc</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>clen</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>clen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Run CTR.
		 */</comment>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>sk</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>run</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sk</name><operator>.</operator><name>vtable</name></name></expr></argument>,
			<argument><expr><name>iv</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cc</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>clen</name></expr>;</expr_stmt>

		<comment type="block">/*
		 * Every 32768 blocks, we force a state update.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>cc</name></name> <operator>&gt;=</operator> <literal type="number">32768</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>br_aesctr_drbg_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/* see bearssl_rand.h */</comment>
<function><type><name>void</name></type>
<name>br_aesctr_drbg_update</name><parameter_list>(<parameter><decl><type><name>br_aesctr_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>seed</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * We use a Hirose construction on AES-256 to make a hash function.
	 * Function definition:
	 *  - running state consists in two 16-byte blocks G and H
	 *  - initial values of G and H are conventional
	 *  - there is a fixed block-sized constant C
	 *  - for next data block m:
	 *      set AES key to H||m
	 *      G' = E(G) xor G
	 *      H' = E(G xor C) xor G xor C
	 *      G &lt;- G', H &lt;- H'
	 *  - once all blocks have been processed, output is H||G
	 *
	 * Constants:
	 *   G_init = B6 B6 ... B6
	 *   H_init = A5 A5 ... A5
	 *   C      = 01 00 ... 00
	 *
	 * With this hash function h(), we compute the new state as
	 * follows:
	 *  - produce a state-dependent value s as encryption of an
	 *    all-one block with AES and the current key
	 *  - compute the new key as the first 128 bits of h(s||seed)
	 *
	 * Original Hirose article:
	 *    https://www.iacr.org/archive/fse2006/40470213/40470213.pdf
	 */</comment>

	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>iv</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>G</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>H</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Use an all-one IV to get a fresh output block that depends on the
	 * current seed.
	 */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>iv</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>sk</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>run</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sk</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Set G[] and H[] to conventional start values.
	 */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><literal type="number">0xB6</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>G</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>H</name></expr></argument>, <argument><expr><literal type="number">0x5A</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>H</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Process the concatenation of the current state and the seed
	 * with the custom hash function.
	 */</comment>
	<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>newG</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Assemble new key H||m into tmp[].
		 */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<decl_stmt><decl><type><name>size_t</name></type> <name>clen</name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>clen</name> <operator>=</operator> <ternary><condition><expr><name>len</name> <operator>&lt;</operator> <literal type="number">16</literal></expr> ?</condition><then> <expr><name>len</name></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>seed</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">16</literal> <operator>+</operator> <name>clen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>-</operator> <name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>seed</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>seed</name> <operator>+</operator> <name>clen</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>clen</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>sk</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sk</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Compute new G and H values.
		 */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newG</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>sk</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>run</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sk</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>,
			<argument><expr><call><name>br_dec32be</name><argument_list>(<argument><expr><name>G</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>newG</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>H</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>H</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>sk</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>run</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sk</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>,
			<argument><expr><call><name>br_dec32be</name><argument_list>(<argument><expr><name>G</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><name>newG</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Output hash value is H||G. We truncate it to its first 128 bits,
	 * i.e. H; that's our new AES key.
	 */</comment>
	<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>sk</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sk</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl_rand.h */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_prng_class</name></type> <name>br_aesctr_drbg_vtable</name> <init>= <expr><block>{
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>br_aesctr_drbg_context</name></expr></argument>)</argument_list></sizeof></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_prng_class</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_aesctr_drbg_init</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_prng_class</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_aesctr_drbg_generate</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_prng_class</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_aesctr_drbg_update</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
