<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/bearssl/symcipher/aes_x86ni_ctrcbc.c"><comment type="block">/*
 * Copyright (c) 2017 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ENABLE_INTRINSICS</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_AES_X86NI</name></expr></cpp:if>

<comment type="block">/* see bearssl_block.h */</comment>
<function><type><specifier>const</specifier> <name>br_block_ctrcbc_class</name> <modifier>*</modifier></type>
<name>br_aes_x86ni_ctrcbc_get_vtable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><call><name>br_aes_x86ni_supported</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><operator>&amp;</operator><name>br_aes_x86ni_ctrcbc_vtable</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see bearssl_block.h */</comment>
<function><type><name>void</name></type>
<name>br_aes_x86ni_ctrcbc_init</name><parameter_list>(<parameter><decl><type><name>br_aes_x86ni_ctrcbc_keys</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>vtable</name></name> <operator>=</operator> <operator>&amp;</operator><name>br_aes_x86ni_ctrcbc_vtable</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_rounds</name></name> <operator>=</operator> <call><name>br_aes_x86ni_keysched_enc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>skey</name><operator>.</operator><name>skni</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>BR_TARGETS_X86_UP</name></type>

<comment type="block">/* see bearssl_block.h */</comment>
<name>BR_TARGET</name><argument_list>(<argument><expr><literal type="string">"sse2,sse4.1,aes"</literal></expr></argument>)</argument_list>
<name>void</name>
<name>br_aes_x86ni_ctrcbc_ctr</name><argument_list>(<argument><expr><specifier>const</specifier> <name>br_aes_x86ni_ctrcbc_keys</name> <operator>*</operator><name>ctx</name></expr></argument>,
	<argument><expr><name>void</name> <operator>*</operator><name>ctr</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>data</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>)</argument_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>num_rounds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>__m128i</name></type> <name><name>sk</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>__m128i</name></type> <name>ivx0</name></decl>, <decl><type ref="prev"/><name>ivx1</name></decl>, <decl><type ref="prev"/><name>ivx2</name></decl>, <decl><type ref="prev"/><name>ivx3</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>__m128i</name></type> <name>erev</name></decl>, <decl><type ref="prev"/><name>zero</name></decl>, <decl><type ref="prev"/><name>one</name></decl>, <decl><type ref="prev"/><name>four</name></decl>, <decl><type ref="prev"/><name>notthree</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>u</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>num_rounds</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_rounds</name></name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;=</operator> <name>num_rounds</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>sk</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>skey</name><operator>.</operator><name>skni</name></name> <operator>+</operator> <operator>(</operator><name>u</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Some SSE2 constants.
	 */</comment>
	<expr_stmt><expr><name>erev</name> <operator>=</operator> <call><name>_mm_set_epi8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>,
		<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>zero</name> <operator>=</operator> <call><name>_mm_setzero_si128</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>one</name> <operator>=</operator> <call><name>_mm_set_epi64x</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>four</name> <operator>=</operator> <call><name>_mm_set_epi64x</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>notthree</name> <operator>=</operator> <call><name>_mm_sub_epi64</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>four</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Decode the counter in big-endian and pre-increment the other
	 * three counters.
	 */</comment>
	<expr_stmt><expr><name>ivx0</name> <operator>=</operator> <call><name>_mm_shuffle_epi8</name><argument_list>(<argument><expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ctr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>erev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ivx1</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>ivx0</name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ivx1</name> <operator>=</operator> <call><name>_mm_sub_epi64</name><argument_list>(<argument><expr><name>ivx1</name></expr></argument>,
		<argument><expr><call><name>_mm_slli_si128</name><argument_list>(<argument><expr><call><name>_mm_cmpeq_epi64</name><argument_list>(<argument><expr><name>ivx1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ivx2</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>ivx1</name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ivx2</name> <operator>=</operator> <call><name>_mm_sub_epi64</name><argument_list>(<argument><expr><name>ivx2</name></expr></argument>,
		<argument><expr><call><name>_mm_slli_si128</name><argument_list>(<argument><expr><call><name>_mm_cmpeq_epi64</name><argument_list>(<argument><expr><name>ivx2</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ivx3</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>ivx2</name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ivx3</name> <operator>=</operator> <call><name>_mm_sub_epi64</name><argument_list>(<argument><expr><name>ivx3</name></expr></argument>,
		<argument><expr><call><name>_mm_slli_si128</name><argument_list>(<argument><expr><call><name>_mm_cmpeq_epi64</name><argument_list>(<argument><expr><name>ivx3</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>__m128i</name></type> <name>x0</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>, <decl><type ref="prev"/><name>x3</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Load counter values; we need to byteswap them because
		 * the specification says that they use big-endian.
		 */</comment>
		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_shuffle_epi8</name><argument_list>(<argument><expr><name>ivx0</name></expr></argument>, <argument><expr><name>erev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_shuffle_epi8</name><argument_list>(<argument><expr><name>ivx1</name></expr></argument>, <argument><expr><name>erev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>_mm_shuffle_epi8</name><argument_list>(<argument><expr><name>ivx2</name></expr></argument>, <argument><expr><name>erev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>_mm_shuffle_epi8</name><argument_list>(<argument><expr><name>ivx3</name></expr></argument>, <argument><expr><name>erev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>num_rounds</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenclast_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenclast_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>_mm_aesenclast_si128</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>_mm_aesenclast_si128</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>num_rounds</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenclast_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenclast_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>_mm_aesenclast_si128</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>_mm_aesenclast_si128</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenclast_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenclast_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>_mm_aesenclast_si128</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>_mm_aesenclast_si128</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>,
				<argument><expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator>  <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>,
				<argument><expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>x2</name></expr></argument>,
				<argument><expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>x3</name></expr></argument>,
				<argument><expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <literal type="number">48</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator>  <literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <literal type="number">48</literal><operator>)</operator></expr></argument>, <argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>tmp</name> <operator>+</operator>  <literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>tmp</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>tmp</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>tmp</name> <operator>+</operator> <literal type="number">48</literal><operator>)</operator></expr></argument>, <argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name><name>buf</name><index>[<expr><name>u</name></expr>]</index></name> <operator>^=</operator> <name><name>tmp</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
			</block_content>}</block></for>
			<switch>switch <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="number">16</literal></expr>:</case>
				<expr_stmt><expr><name>ivx0</name> <operator>=</operator> <name>ivx1</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">32</literal></expr>:</case>
				<expr_stmt><expr><name>ivx0</name> <operator>=</operator> <name>ivx2</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">48</literal></expr>:</case>
				<expr_stmt><expr><name>ivx0</name> <operator>=</operator> <name>ivx3</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></switch>
			<break>break;</break>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/*
		 * Add 4 to each counter value. For carry propagation
		 * into the upper 64-bit words, we would need to compare
		 * the results with 4, but SSE2+ has only _signed_
		 * comparisons. Instead, we mask out the low two bits,
		 * and check whether the remaining bits are zero.
		 */</comment>
		<expr_stmt><expr><name>ivx0</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>ivx0</name></expr></argument>, <argument><expr><name>four</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ivx1</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>ivx1</name></expr></argument>, <argument><expr><name>four</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ivx2</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>ivx2</name></expr></argument>, <argument><expr><name>four</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ivx3</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>ivx3</name></expr></argument>, <argument><expr><name>four</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ivx0</name> <operator>=</operator> <call><name>_mm_sub_epi64</name><argument_list>(<argument><expr><name>ivx0</name></expr></argument>,
			<argument><expr><call><name>_mm_slli_si128</name><argument_list>(<argument><expr><call><name>_mm_cmpeq_epi64</name><argument_list>(
				<argument><expr><call><name>_mm_and_si128</name><argument_list>(<argument><expr><name>ivx0</name></expr></argument>, <argument><expr><name>notthree</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ivx1</name> <operator>=</operator> <call><name>_mm_sub_epi64</name><argument_list>(<argument><expr><name>ivx1</name></expr></argument>,
			<argument><expr><call><name>_mm_slli_si128</name><argument_list>(<argument><expr><call><name>_mm_cmpeq_epi64</name><argument_list>(
				<argument><expr><call><name>_mm_and_si128</name><argument_list>(<argument><expr><name>ivx1</name></expr></argument>, <argument><expr><name>notthree</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ivx2</name> <operator>=</operator> <call><name>_mm_sub_epi64</name><argument_list>(<argument><expr><name>ivx2</name></expr></argument>,
			<argument><expr><call><name>_mm_slli_si128</name><argument_list>(<argument><expr><call><name>_mm_cmpeq_epi64</name><argument_list>(
				<argument><expr><call><name>_mm_and_si128</name><argument_list>(<argument><expr><name>ivx2</name></expr></argument>, <argument><expr><name>notthree</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ivx3</name> <operator>=</operator> <call><name>_mm_sub_epi64</name><argument_list>(<argument><expr><name>ivx3</name></expr></argument>,
			<argument><expr><call><name>_mm_slli_si128</name><argument_list>(<argument><expr><call><name>_mm_cmpeq_epi64</name><argument_list>(
				<argument><expr><call><name>_mm_and_si128</name><argument_list>(<argument><expr><name>ivx3</name></expr></argument>, <argument><expr><name>notthree</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * Write back new counter value. The loop took care to put the
	 * right counter value in ivx0.
	 */</comment>
	<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ctr</name></expr></argument>, <argument><expr><call><name>_mm_shuffle_epi8</name><argument_list>(<argument><expr><name>ivx0</name></expr></argument>, <argument><expr><name>erev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<comment type="block">/* see bearssl_block.h */</comment>
<macro><name>BR_TARGET</name><argument_list>(<argument><literal type="string">"sse2,sse4.1,aes"</literal></argument>)</argument_list></macro>
<function><type><name>void</name></type>
<name>br_aes_x86ni_ctrcbc_mac</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_aes_x86ni_ctrcbc_keys</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbcmac</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>num_rounds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>__m128i</name></type> <name><name>sk</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>ivx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>u</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ivx</name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><name>cbcmac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>num_rounds</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_rounds</name></name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;=</operator> <name>num_rounds</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>sk</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>skey</name><operator>.</operator><name>skni</name></name> <operator>+</operator> <operator>(</operator><name>u</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>__m128i</name></type> <name>x</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ivx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>num_rounds</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>_mm_aesenclast_si128</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>num_rounds</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>_mm_aesenclast_si128</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>_mm_aesenclast_si128</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>ivx</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><name>cbcmac</name></expr></argument>, <argument><expr><name>ivx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl_block.h */</comment>
<macro><name>BR_TARGET</name><argument_list>(<argument><literal type="string">"sse2,sse4.1,aes"</literal></argument>)</argument_list></macro>
<function><type><name>void</name></type>
<name>br_aes_x86ni_ctrcbc_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_aes_x86ni_ctrcbc_keys</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbcmac</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>num_rounds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>__m128i</name></type> <name><name>sk</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>__m128i</name></type> <name>ivx</name></decl>, <decl><type ref="prev"/><name>cmx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>__m128i</name></type> <name>erev</name></decl>, <decl><type ref="prev"/><name>zero</name></decl>, <decl><type ref="prev"/><name>one</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>u</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>first_iter</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>num_rounds</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_rounds</name></name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;=</operator> <name>num_rounds</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>sk</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>skey</name><operator>.</operator><name>skni</name></name> <operator>+</operator> <operator>(</operator><name>u</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Some SSE2 constants.
	 */</comment>
	<expr_stmt><expr><name>erev</name> <operator>=</operator> <call><name>_mm_set_epi8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>,
		<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>zero</name> <operator>=</operator> <call><name>_mm_setzero_si128</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>one</name> <operator>=</operator> <call><name>_mm_set_epi64x</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Decode the counter in big-endian.
	 */</comment>
	<expr_stmt><expr><name>ivx</name> <operator>=</operator> <call><name>_mm_shuffle_epi8</name><argument_list>(<argument><expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>erev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cmx</name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><name>cbcmac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>first_iter</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>__m128i</name></type> <name>dx</name></decl>, <decl><type ref="prev"/><name>x0</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Load initial values:
		 *   dx   encrypted block of data
		 *   x0   counter (for CTR encryption)
		 *   x1   input for CBC-MAC
		 */</comment>
		<expr_stmt><expr><name>dx</name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_shuffle_epi8</name><argument_list>(<argument><expr><name>ivx</name></expr></argument>, <argument><expr><name>erev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <name>cmx</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>num_rounds</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenclast_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenclast_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>num_rounds</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenclast_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenclast_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenclast_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenclast_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>dx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>first_iter</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>cmx</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>cmx</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>first_iter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>cmx</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

		<comment type="block">/*
		 * Increment the counter value.
		 */</comment>
		<expr_stmt><expr><name>ivx</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>ivx</name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ivx</name> <operator>=</operator> <call><name>_mm_sub_epi64</name><argument_list>(<argument><expr><name>ivx</name></expr></argument>,
			<argument><expr><call><name>_mm_slli_si128</name><argument_list>(<argument><expr><call><name>_mm_cmpeq_epi64</name><argument_list>(<argument><expr><name>ivx</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * If this was the last iteration, then compute the
		 * extra block encryption to complete CBC-MAC.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>cmx</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>cmx</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>cmx</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>cmx</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>cmx</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>cmx</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>cmx</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>cmx</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>cmx</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>cmx</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>cmx</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>cmx</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>cmx</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>cmx</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>cmx</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>cmx</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>cmx</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>cmx</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>cmx</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>cmx</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>num_rounds</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>cmx</name> <operator>=</operator> <call><name>_mm_aesenclast_si128</name><argument_list>(<argument><expr><name>cmx</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>num_rounds</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>cmx</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>cmx</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>cmx</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>cmx</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>cmx</name> <operator>=</operator> <call><name>_mm_aesenclast_si128</name><argument_list>(<argument><expr><name>cmx</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name>cmx</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>cmx</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>cmx</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>cmx</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>cmx</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>cmx</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>cmx</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>cmx</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>cmx</name> <operator>=</operator> <call><name>_mm_aesenclast_si128</name><argument_list>(<argument><expr><name>cmx</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * Write back new counter value and CBC-MAC value.
	 */</comment>
	<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><call><name>_mm_shuffle_epi8</name><argument_list>(<argument><expr><name>ivx</name></expr></argument>, <argument><expr><name>erev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><name>cbcmac</name></expr></argument>, <argument><expr><name>cmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl_block.h */</comment>
<macro><name>BR_TARGET</name><argument_list>(<argument><literal type="string">"sse2,sse4.1,aes"</literal></argument>)</argument_list></macro>
<function><type><name>void</name></type>
<name>br_aes_x86ni_ctrcbc_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_aes_x86ni_ctrcbc_keys</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbcmac</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>num_rounds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>__m128i</name></type> <name><name>sk</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>__m128i</name></type> <name>ivx</name></decl>, <decl><type ref="prev"/><name>cmx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>__m128i</name></type> <name>erev</name></decl>, <decl><type ref="prev"/><name>zero</name></decl>, <decl><type ref="prev"/><name>one</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>u</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>num_rounds</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_rounds</name></name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;=</operator> <name>num_rounds</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>sk</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>skey</name><operator>.</operator><name>skni</name></name> <operator>+</operator> <operator>(</operator><name>u</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Some SSE2 constants.
	 */</comment>
	<expr_stmt><expr><name>erev</name> <operator>=</operator> <call><name>_mm_set_epi8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>,
		<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>zero</name> <operator>=</operator> <call><name>_mm_setzero_si128</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>one</name> <operator>=</operator> <call><name>_mm_set_epi64x</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Decode the counter in big-endian.
	 */</comment>
	<expr_stmt><expr><name>ivx</name> <operator>=</operator> <call><name>_mm_shuffle_epi8</name><argument_list>(<argument><expr><call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>erev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cmx</name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><name>cbcmac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>__m128i</name></type> <name>dx</name></decl>, <decl><type ref="prev"/><name>x0</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Load initial values:
		 *   dx   encrypted block of data
		 *   x0   counter (for CTR encryption)
		 *   x1   input for CBC-MAC
		 */</comment>
		<expr_stmt><expr><name>dx</name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_shuffle_epi8</name><argument_list>(<argument><expr><name>ivx</name></expr></argument>, <argument><expr><name>erev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>cmx</name></expr></argument>, <argument><expr><name>dx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>num_rounds</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenclast_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenclast_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>num_rounds</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenclast_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenclast_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenc_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_aesenclast_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>_mm_aesenclast_si128</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>dx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cmx</name> <operator>=</operator> <name>x1</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

		<comment type="block">/*
		 * Increment the counter value.
		 */</comment>
		<expr_stmt><expr><name>ivx</name> <operator>=</operator> <call><name>_mm_add_epi64</name><argument_list>(<argument><expr><name>ivx</name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ivx</name> <operator>=</operator> <call><name>_mm_sub_epi64</name><argument_list>(<argument><expr><name>ivx</name></expr></argument>,
			<argument><expr><call><name>_mm_slli_si128</name><argument_list>(<argument><expr><call><name>_mm_cmpeq_epi64</name><argument_list>(<argument><expr><name>ivx</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * Write back new counter value and CBC-MAC value.
	 */</comment>
	<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><call><name>_mm_shuffle_epi8</name><argument_list>(<argument><expr><name>ivx</name></expr></argument>, <argument><expr><name>erev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><name>cbcmac</name></expr></argument>, <argument><expr><name>cmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>BR_TARGETS_X86_DOWN</name>

<comment type="block">/* see bearssl_block.h */</comment>
<specifier>const</specifier> <name>br_block_ctrcbc_class</name></type> <name>br_aes_x86ni_ctrcbc_vtable</name> <init>= <expr><block>{
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>br_aes_x86ni_ctrcbc_keys</name></expr></argument>)</argument_list></sizeof></expr>,
	<expr><literal type="number">16</literal></expr>,
	<expr><literal type="number">4</literal></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_block_ctrcbc_class</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_aes_x86ni_ctrcbc_init</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_block_ctrcbc_class</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr></argument>,
		<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_aes_x86ni_ctrcbc_encrypt</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_block_ctrcbc_class</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr></argument>,
		<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_aes_x86ni_ctrcbc_decrypt</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_block_ctrcbc_class</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr></argument>,
		<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_aes_x86ni_ctrcbc_ctr</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_block_ctrcbc_class</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr></argument>,
		<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_aes_x86ni_ctrcbc_mac</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<comment type="block">/* see bearssl_block.h */</comment>
<function><type><specifier>const</specifier> <name>br_block_ctrcbc_class</name> <modifier>*</modifier></type>
<name>br_aes_x86ni_ctrcbc_get_vtable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
