<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/bearssl/rsa/rsa_i31_pubexp.c"><comment type="block">/*
 * Copyright (c) 2018 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Recompute public exponent, based on factor p and reduced private
 * exponent dp.
 */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>get_pubexp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>plen</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dpbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dplen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * dp is the inverse of e modulo p-1. If p = 3 mod 4, then
	 * p-1 = 2*((p-1)/2). Taken modulo 2, e is odd and has inverse 1;
	 * thus, dp must be odd.
	 *
	 * We compute the inverse of dp modulo (p-1)/2. This requires
	 * first reducing dp modulo (p-1)/2 (this can be done with a
	 * conditional subtract, no need to use the generic modular
	 * reduction function); then, we use moddiv.
	 */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>BR_MAX_RSA_FACTOR</name> <operator>+</operator> <literal type="number">61</literal><operator>)</operator> <operator>/</operator> <literal type="number">31</literal><operator>)</operator></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>e</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Compute actual factor length (in bytes) and check that it fits
	 * under our size constraints.
	 */</comment>
	<while>while <condition>(<expr><name>plen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>pbuf</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>pbuf</name> <operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>plen</name> <operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>plen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>plen</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">5</literal> <operator>||</operator> <name>plen</name></expr></argument> &gt;</argument_list></name> <argument_list>(<argument><expr><name>BR_MAX_RSA_FACTOR</name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Compute actual reduced exponent length (in bytes) and check that
	 * it is not longer than p.
	 */</comment>
	<while>while <condition>(<expr><name>dplen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>dpbuf</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>dpbuf</name> <operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>dplen</name> <operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>dplen</name> <operator>&gt;</operator> <name>plen</name> <operator>||</operator> <name>dplen</name> <operator>==</operator> <literal type="number">0</literal>
		<operator>||</operator> <operator>(</operator><name>dplen</name> <operator>==</operator> <name>plen</name> <operator>&amp;&amp;</operator> <name><name>dpbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>pbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Verify that p = 3 mod 4 and that dp is odd.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pbuf</name><index>[<expr><name>plen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>!=</operator> <literal type="number">3</literal> <operator>||</operator> <operator>(</operator><name><name>dpbuf</name><index>[<expr><name>dplen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Decode p and compute (p-1)/2.
	 */</comment>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i31_decode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pbuf</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">63</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i31_rshift</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Decode dp and make sure its announced bit length matches that of
	 * p (we already know that the size of dp, in bits, does not exceed
	 * the size of p, so we just have to copy the header word).
	 */</comment>
	<expr_stmt><expr><name>dp</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i31_decode</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>dpbuf</name></expr></argument>, <argument><expr><name>dplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Subtract (p-1)/2 from dp if necessary.
	 */</comment>
	<expr_stmt><expr><call><name>br_i31_sub</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>NOT</name><argument_list>(<argument><expr><call><name>br_i31_sub</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If another subtraction is needed, then this means that the
	 * value was invalid. We don't care to leak information about
	 * invalid keys.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>br_i31_sub</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Invert dp modulo (p-1)/2. If the inversion fails, then the
	 * key value was invalid.
	 */</comment>
	<expr_stmt><expr><name>x</name> <operator>=</operator> <name>dp</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i31_zero</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>br_i31_moddiv</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>br_i31_ninv31</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * We now have an inverse. We must set it to zero (error) if its
	 * length is greater than 32 bits and/or if it is an even integer.
	 * Take care that the bit_length function returns an encoded
	 * bit length.
	 */</comment>
	<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>e</name> <operator>&amp;=</operator> <operator>-</operator><call><name>LT</name><argument_list>(<argument><expr><call><name>br_i31_bit_length</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">34</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>e</name> <operator>&amp;=</operator> <operator>-</operator><operator>(</operator><name>e</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<return>return <expr><name>e</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see bearssl_rsa.h */</comment>
<function><type><name>uint32_t</name></type>
<name>br_rsa_i31_compute_pubexp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_rsa_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Get the public exponent from both p and q. This is the right
	 * exponent if we get twice the same value.
	 */</comment>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>ep</name></decl>, <decl><type ref="prev"/><name>eq</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ep</name> <operator>=</operator> <call><name>get_pubexp</name><argument_list>(<argument><expr><name><name>sk</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>plen</name></name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>dp</name></name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>dplen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>eq</name> <operator>=</operator> <call><name>get_pubexp</name><argument_list>(<argument><expr><name><name>sk</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>qlen</name></name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>dq</name></name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>dqlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ep</name> <operator>&amp;</operator> <operator>-</operator><call><name>EQ</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
