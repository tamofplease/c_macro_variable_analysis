<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/bearssl/hash/md5sha1.c"><comment type="block">/*
 * Copyright (c) 2016 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/* see bearssl.h */</comment>
<function><type><name>void</name></type>
<name>br_md5sha1_init</name><parameter_list>(<parameter><decl><type><name>br_md5sha1_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>vtable</name></name> <operator>=</operator> <operator>&amp;</operator><name>br_md5sha1_vtable</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>val_md5</name></name></expr></argument>, <argument><expr><name>br_md5_IV</name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>cc</name><operator>-&gt;</operator><name>val_md5</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>val_sha1</name></name></expr></argument>, <argument><expr><name>br_sha1_IV</name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>cc</name><operator>-&gt;</operator><name>val_sha1</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl.h */</comment>
<function><type><name>void</name></type>
<name>br_md5sha1_update</name><parameter_list>(<parameter><decl><type><name>br_md5sha1_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>cc</name><operator>-&gt;</operator><name>count</name></name> <operator>&amp;</operator> <literal type="number">63</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>clen</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>clen</name> <operator>=</operator> <literal type="number">64</literal> <operator>-</operator> <name>ptr</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>clen</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>clen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>ptr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>clen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>clen</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>br_md5_round</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>val_md5</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>br_sha1_round</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>val_sha1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/* see bearssl.h */</comment>
<function><type><name>void</name></type>
<name>br_md5sha1_out</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_md5sha1_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>val_md5</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>val_sha1</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>count</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>cc</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>count</name> <operator>&amp;</operator> <literal type="number">63</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>val_md5</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>val_md5</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name>val_md5</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>val_sha1</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>val_sha1</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name>val_sha1</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buf</name><index>[<expr><name>ptr</name> <operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&gt;</operator> <literal type="number">56</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>-</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_md5_round</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>val_md5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_sha1_round</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>val_sha1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">56</literal> <operator>-</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>count</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc64le</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">56</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_md5_round</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>val_md5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc64be</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">56</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_sha1_round</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>val_sha1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>out</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_range_enc32le</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>val_md5</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_range_enc32be</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>val_sha1</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl.h */</comment>
<function><type><name>uint64_t</name></type>
<name>br_md5sha1_state</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_md5sha1_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>out</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_range_enc32le</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>val_md5</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_range_enc32be</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>val_sha1</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>cc</name><operator>-&gt;</operator><name>count</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see bearssl.h */</comment>
<function><type><name>void</name></type>
<name>br_md5sha1_set_state</name><parameter_list>(<parameter><decl><type><name>br_md5sha1_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>stb</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>stb</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_range_dec32le</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>val_md5</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_range_dec32be</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>val_sha1</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl.h */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name></type> <name>br_md5sha1_vtable</name> <init>= <expr><block>{
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>br_md5sha1_context</name></expr></argument>)</argument_list></sizeof></expr>,
	<expr><call><name>BR_HASHDESC_ID</name><argument_list>(<argument><expr><name>br_md5sha1_ID</name></expr></argument>)</argument_list></call>
		<operator>|</operator> <call><name>BR_HASHDESC_OUT</name><argument_list>(<argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call>
		<operator>|</operator> <call><name>BR_HASHDESC_STATE</name><argument_list>(<argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call>
		<operator>|</operator> <call><name>BR_HASHDESC_LBLEN</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_hash_class</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_md5sha1_init</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_hash_class</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_md5sha1_update</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_hash_class</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_md5sha1_out</name></expr>,
	<expr><operator>(</operator><call><call><name>uint64_t</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_hash_class</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_md5sha1_state</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_hash_class</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_md5sha1_set_state</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
