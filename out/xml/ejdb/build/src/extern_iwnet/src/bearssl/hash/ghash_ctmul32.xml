<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/bearssl/hash/ghash_ctmul32.c"><comment type="block">/*
 * Copyright (c) 2016 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/*
 * This implementation uses 32-bit multiplications, and only the low
 * 32 bits for each multiplication result. This is meant primarily for
 * the ARM Cortex M0 and M0+, whose multiplication opcode does not yield
 * the upper 32 bits; but it might also be useful on architectures where
 * access to the upper 32 bits requires use of specific registers that
 * create contention (e.g. on i386, "mul" necessarily outputs the result
 * in edx:eax, while "imul" can use any registers but is limited to the
 * low 32 bits).
 *
 * The implementation trick that is used here is bit-reversing (bit 0
 * is swapped with bit 31, bit 1 with bit 30, and so on). In GF(2)[X],
 * for all values x and y, we have:
 *    rev32(x) * rev32(y) = rev64(x * y)
 * In other words, if we bit-reverse (over 32 bits) the operands, then we
 * bit-reverse (over 64 bits) the result.
 */</comment>

<comment type="block">/*
 * Multiplication in GF(2)[X], truncated to its low 32 bits.
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>bmul32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>x0</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>, <decl><type ref="prev"/><name>x3</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>y0</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>, <decl><type ref="prev"/><name>y2</name></decl>, <decl><type ref="prev"/><name>y3</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>z0</name></decl>, <decl><type ref="prev"/><name>z1</name></decl>, <decl><type ref="prev"/><name>z2</name></decl>, <decl><type ref="prev"/><name>z3</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>x0</name> <operator>=</operator> <name>x</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x11111111</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x1</name> <operator>=</operator> <name>x</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x22222222</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x2</name> <operator>=</operator> <name>x</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x44444444</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x3</name> <operator>=</operator> <name>x</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x88888888</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>y0</name> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x11111111</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>y1</name> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x22222222</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>y2</name> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x44444444</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>y3</name> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x88888888</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>z0</name> <operator>=</operator> <operator>(</operator><name>x0</name> <operator>*</operator> <name>y0</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>x1</name> <operator>*</operator> <name>y3</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>x2</name> <operator>*</operator> <name>y2</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>x3</name> <operator>*</operator> <name>y1</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>z1</name> <operator>=</operator> <operator>(</operator><name>x0</name> <operator>*</operator> <name>y1</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>x1</name> <operator>*</operator> <name>y0</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>x2</name> <operator>*</operator> <name>y3</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>x3</name> <operator>*</operator> <name>y2</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>z2</name> <operator>=</operator> <operator>(</operator><name>x0</name> <operator>*</operator> <name>y2</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>x1</name> <operator>*</operator> <name>y1</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>x2</name> <operator>*</operator> <name>y0</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>x3</name> <operator>*</operator> <name>y3</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>z3</name> <operator>=</operator> <operator>(</operator><name>x0</name> <operator>*</operator> <name>y3</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>x1</name> <operator>*</operator> <name>y2</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>x2</name> <operator>*</operator> <name>y1</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>x3</name> <operator>*</operator> <name>y0</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>z0</name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x11111111</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>z1</name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x22222222</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>z2</name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x44444444</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>z3</name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x88888888</literal></expr>;</expr_stmt>
	<return>return <expr><name>z0</name> <operator>|</operator> <name>z1</name> <operator>|</operator> <name>z2</name> <operator>|</operator> <name>z3</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Bit-reverse a 32-bit word.
 */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>rev32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMS</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>do { \
		x = ((x &amp; (uint32_t)(m)) &lt;&lt; (s)) \
			| ((x &gt;&gt; (s)) &amp; (uint32_t)(m)); \
	} while (0)</cpp:value></cpp:define>

	<expr_stmt><expr><call><name>RMS</name><argument_list>(<argument><expr><literal type="number">0x55555555</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RMS</name><argument_list>(<argument><expr><literal type="number">0x33333333</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RMS</name><argument_list>(<argument><expr><literal type="number">0x0F0F0F0F</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RMS</name><argument_list>(<argument><expr><literal type="number">0x00FF00FF</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RMS</name></cpp:undef>
</block_content>}</block></function>

<comment type="block">/* see bearssl_hash.h */</comment>
<function><type><name>void</name></type>
<name>br_ghash_ctmul32</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * This implementation is similar to br_ghash_ctmul() except
	 * that we have to do the multiplication twice, with the
	 * "normal" and "bit reversed" operands. Hence we end up with
	 * eighteen 32-bit multiplications instead of nine.
	 */</comment>

	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>yb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>yw</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>hw</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>hwr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>yb</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>hb</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>yw</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>br_dec32be</name><argument_list>(<argument><expr><name>yb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>yw</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>br_dec32be</name><argument_list>(<argument><expr><name>yb</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>yw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>br_dec32be</name><argument_list>(<argument><expr><name>yb</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>yw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>br_dec32be</name><argument_list>(<argument><expr><name>yb</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hw</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>br_dec32be</name><argument_list>(<argument><expr><name>hb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hw</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>br_dec32be</name><argument_list>(<argument><expr><name>hb</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>br_dec32be</name><argument_list>(<argument><expr><name>hb</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>br_dec32be</name><argument_list>(<argument><expr><name>hb</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hwr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>rev32</name><argument_list>(<argument><expr><name><name>hw</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hwr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>rev32</name><argument_list>(<argument><expr><name><name>hw</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hwr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>rev32</name><argument_list>(<argument><expr><name><name>hw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hwr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>rev32</name><argument_list>(<argument><expr><name><name>hw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>a</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>b</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>c</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>d0</name></decl>, <decl><type ref="prev"/><name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>, <decl><type ref="prev"/><name>d3</name></decl>, <decl><type ref="prev"/><name>d4</name></decl>, <decl><type ref="prev"/><name>d5</name></decl>, <decl><type ref="prev"/><name>d6</name></decl>, <decl><type ref="prev"/><name>d7</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>zw</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>src</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><sizeof>sizeof <name>tmp</name></sizeof><operator>)</operator> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>src</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name><name>yw</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^=</operator> <call><name>br_dec32be</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>yw</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^=</operator> <call><name>br_dec32be</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>yw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <call><name>br_dec32be</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>yw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <call><name>br_dec32be</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * We are using Karatsuba: the 128x128 multiplication is
		 * reduced to three 64x64 multiplications, hence nine
		 * 32x32 multiplications. With the bit-reversal trick,
		 * we have to perform 18 32x32 multiplications.
		 */</comment>

		<comment type="block">/*
		 * y[0,1]*h[0,1] -&gt; 0,1,4
		 * y[2,3]*h[2,3] -&gt; 2,3,5
		 * (y[0,1]+y[2,3])*(h[0,1]+h[2,3]) -&gt; 6,7,8
		 */</comment>

		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>yw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>yw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>yw</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>yw</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>a</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <call><name>rev32</name><argument_list>(<argument><expr><name><name>yw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <call><name>rev32</name><argument_list>(<argument><expr><name><name>yw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <call><name>rev32</name><argument_list>(<argument><expr><name><name>yw</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <call><name>rev32</name><argument_list>(<argument><expr><name><name>yw</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>hw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>hw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>hw</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>hw</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>b</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>hwr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>hwr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>hwr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>hwr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">18</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>bmul32</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>^=</operator> <name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>^=</operator> <name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>^=</operator> <name><name>c</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>^</operator> <name><name>c</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>^=</operator> <name><name>c</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>^</operator> <name><name>c</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>^=</operator> <name><name>c</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>^</operator> <name><name>c</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>^=</operator> <name><name>c</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>^</operator> <name><name>c</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>

		<comment type="block">/*
		 * y[0,1]*h[0,1] -&gt; 0,9^4,1^13,10
		 * y[2,3]*h[2,3] -&gt; 2,11^5,3^14,12
		 * (y[0,1]+y[2,3])*(h[0,1]+h[2,3]) -&gt; 6,15^8,7^17,16
		 */</comment>
		<expr_stmt><expr><name>d0</name> <operator>=</operator> <name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>d1</name> <operator>=</operator> <name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><call><name>rev32</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>d2</name> <operator>=</operator> <name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <name><name>c</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><call><name>rev32</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>d3</name> <operator>=</operator> <name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>^</operator> <name><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>^</operator> <name><name>c</name><index>[<expr><literal type="number">8</literal></expr>]</index></name>
			<operator>^</operator> <operator>(</operator><call><name>rev32</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>^</operator> <name><name>c</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>^</operator> <name><name>c</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>^</operator> <name><name>c</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>d4</name> <operator>=</operator> <name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <name><name>c</name><index>[<expr><literal type="number">7</literal></expr>]</index></name>
			<operator>^</operator> <operator>(</operator><call><name>rev32</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>^</operator> <name><name>c</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>^</operator> <name><name>c</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>d5</name> <operator>=</operator> <name><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><call><name>rev32</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>^</operator> <name><name>c</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>^</operator> <name><name>c</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>^</operator> <name><name>c</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>d6</name> <operator>=</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><call><name>rev32</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>d7</name> <operator>=</operator> <call><name>rev32</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>zw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>d0</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>zw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>d1</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>d0</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>zw</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>d2</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>d1</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>zw</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>d3</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>d2</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>zw</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>d4</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>d3</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>zw</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>d5</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>d4</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>zw</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>d6</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>d5</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>zw</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>d7</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>d6</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>uint32_t</name></type> <name>lw</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>lw</name> <operator>=</operator> <name><name>zw</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>zw</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>^=</operator> <name>lw</name> <operator>^</operator> <operator>(</operator><name>lw</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>lw</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>lw</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>zw</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>^=</operator> <operator>(</operator><name>lw</name> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>lw</name> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>lw</name> <operator>&lt;&lt;</operator> <literal type="number">25</literal><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>yw</name></expr></argument>, <argument><expr><name>zw</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>yw</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>br_enc32be</name><argument_list>(<argument><expr><name>yb</name></expr></argument>, <argument><expr><name><name>yw</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc32be</name><argument_list>(<argument><expr><name>yb</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>yw</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc32be</name><argument_list>(<argument><expr><name>yb</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>yw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc32be</name><argument_list>(<argument><expr><name>yb</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name><name>yw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
