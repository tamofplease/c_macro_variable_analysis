<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/bearssl/hash/sha2small.c"><comment type="block">/*
 * Copyright (c) 2016 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CH</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>, <parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>((((Y) ^ (Z)) &amp; (X)) ^ (Z))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAJ</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>, <parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>(((Y) &amp; (Z)) | (((Y) | (Z)) &amp; (X)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>(((uint32_t)(x) &lt;&lt; (32 - (n))) | ((uint32_t)(x) &gt;&gt; (n)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BSG2_0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(ROTR(x, 2) ^ ROTR(x, 13) ^ ROTR(x, 22))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BSG2_1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(ROTR(x, 6) ^ ROTR(x, 11) ^ ROTR(x, 25))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSG2_0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(ROTR(x, 7) ^ ROTR(x, 18) ^ (uint32_t)((x) &gt;&gt; 3))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSG2_1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(ROTR(x, 17) ^ ROTR(x, 19) ^ (uint32_t)((x) &gt;&gt; 10))</cpp:value></cpp:define>

<comment type="block">/* see inner.h */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>br_sha224_IV</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0xC1059ED8</literal></expr>, <expr><literal type="number">0x367CD507</literal></expr>, <expr><literal type="number">0x3070DD17</literal></expr>, <expr><literal type="number">0xF70E5939</literal></expr>,
	<expr><literal type="number">0xFFC00B31</literal></expr>, <expr><literal type="number">0x68581511</literal></expr>, <expr><literal type="number">0x64F98FA7</literal></expr>, <expr><literal type="number">0xBEFA4FA4</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* see inner.h */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>br_sha256_IV</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0x6A09E667</literal></expr>, <expr><literal type="number">0xBB67AE85</literal></expr>, <expr><literal type="number">0x3C6EF372</literal></expr>, <expr><literal type="number">0xA54FF53A</literal></expr>,
	<expr><literal type="number">0x510E527F</literal></expr>, <expr><literal type="number">0x9B05688C</literal></expr>, <expr><literal type="number">0x1F83D9AB</literal></expr>, <expr><literal type="number">0x5BE0CD19</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>K</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0x428A2F98</literal></expr>, <expr><literal type="number">0x71374491</literal></expr>, <expr><literal type="number">0xB5C0FBCF</literal></expr>, <expr><literal type="number">0xE9B5DBA5</literal></expr>,
	<expr><literal type="number">0x3956C25B</literal></expr>, <expr><literal type="number">0x59F111F1</literal></expr>, <expr><literal type="number">0x923F82A4</literal></expr>, <expr><literal type="number">0xAB1C5ED5</literal></expr>,
	<expr><literal type="number">0xD807AA98</literal></expr>, <expr><literal type="number">0x12835B01</literal></expr>, <expr><literal type="number">0x243185BE</literal></expr>, <expr><literal type="number">0x550C7DC3</literal></expr>,
	<expr><literal type="number">0x72BE5D74</literal></expr>, <expr><literal type="number">0x80DEB1FE</literal></expr>, <expr><literal type="number">0x9BDC06A7</literal></expr>, <expr><literal type="number">0xC19BF174</literal></expr>,
	<expr><literal type="number">0xE49B69C1</literal></expr>, <expr><literal type="number">0xEFBE4786</literal></expr>, <expr><literal type="number">0x0FC19DC6</literal></expr>, <expr><literal type="number">0x240CA1CC</literal></expr>,
	<expr><literal type="number">0x2DE92C6F</literal></expr>, <expr><literal type="number">0x4A7484AA</literal></expr>, <expr><literal type="number">0x5CB0A9DC</literal></expr>, <expr><literal type="number">0x76F988DA</literal></expr>,
	<expr><literal type="number">0x983E5152</literal></expr>, <expr><literal type="number">0xA831C66D</literal></expr>, <expr><literal type="number">0xB00327C8</literal></expr>, <expr><literal type="number">0xBF597FC7</literal></expr>,
	<expr><literal type="number">0xC6E00BF3</literal></expr>, <expr><literal type="number">0xD5A79147</literal></expr>, <expr><literal type="number">0x06CA6351</literal></expr>, <expr><literal type="number">0x14292967</literal></expr>,
	<expr><literal type="number">0x27B70A85</literal></expr>, <expr><literal type="number">0x2E1B2138</literal></expr>, <expr><literal type="number">0x4D2C6DFC</literal></expr>, <expr><literal type="number">0x53380D13</literal></expr>,
	<expr><literal type="number">0x650A7354</literal></expr>, <expr><literal type="number">0x766A0ABB</literal></expr>, <expr><literal type="number">0x81C2C92E</literal></expr>, <expr><literal type="number">0x92722C85</literal></expr>,
	<expr><literal type="number">0xA2BFE8A1</literal></expr>, <expr><literal type="number">0xA81A664B</literal></expr>, <expr><literal type="number">0xC24B8B70</literal></expr>, <expr><literal type="number">0xC76C51A3</literal></expr>,
	<expr><literal type="number">0xD192E819</literal></expr>, <expr><literal type="number">0xD6990624</literal></expr>, <expr><literal type="number">0xF40E3585</literal></expr>, <expr><literal type="number">0x106AA070</literal></expr>,
	<expr><literal type="number">0x19A4C116</literal></expr>, <expr><literal type="number">0x1E376C08</literal></expr>, <expr><literal type="number">0x2748774C</literal></expr>, <expr><literal type="number">0x34B0BCB5</literal></expr>,
	<expr><literal type="number">0x391C0CB3</literal></expr>, <expr><literal type="number">0x4ED8AA4A</literal></expr>, <expr><literal type="number">0x5B9CCA4F</literal></expr>, <expr><literal type="number">0x682E6FF3</literal></expr>,
	<expr><literal type="number">0x748F82EE</literal></expr>, <expr><literal type="number">0x78A5636F</literal></expr>, <expr><literal type="number">0x84C87814</literal></expr>, <expr><literal type="number">0x8CC70208</literal></expr>,
	<expr><literal type="number">0x90BEFFFA</literal></expr>, <expr><literal type="number">0xA4506CEB</literal></expr>, <expr><literal type="number">0xBEF9A3F7</literal></expr>, <expr><literal type="number">0xC67178F2</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* see inner.h */</comment>
<function><type><name>void</name></type>
<name>br_sha2small_round</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA2_STEP</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>C</name></type></parameter>, <parameter><type><name>D</name></type></parameter>, <parameter><type><name>E</name></type></parameter>, <parameter><type><name>F</name></type></parameter>, <parameter><type><name>G</name></type></parameter>, <parameter><type><name>H</name></type></parameter>, <parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>do { \
		uint32_t T1, T2; \
		T1 = H + BSG2_1(E) + CH(E, F, G) + K[j] + w[j]; \
		T2 = BSG2_0(A) + MAJ(A, B, C); \
		D += T1; \
		H = T1 + T2; \
	} while (0)</cpp:value></cpp:define>

	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>f</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>w</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>br_range_dec32be</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>w</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>SSG2_1</name><argument_list>(<argument><expr><name><name>w</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>w</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">7</literal></expr>]</index></name>
			<operator>+</operator> <call><name>SSG2_0</name><argument_list>(<argument><expr><name><name>w</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>w</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>val</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>val</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>val</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>val</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>val</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>val</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>SHA2_STEP</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SHA2_STEP</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SHA2_STEP</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SHA2_STEP</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SHA2_STEP</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SHA2_STEP</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SHA2_STEP</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SHA2_STEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>val</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>val</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>val</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <name>e</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>val</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+=</operator> <name>f</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>val</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+=</operator> <name>g</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>val</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+=</operator> <name>h</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<comment type="block">/* obsolete */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA2_MEXP1</name><parameter_list>(<parameter><type><name>pc</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>do { \
		W[pc] = br_dec32be(buf + ((pc) &lt;&lt; 2)); \
	} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA2_MEXP2</name><parameter_list>(<parameter><type><name>pc</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>do { \
		W[(pc) &amp; 0x0F] = SSG2_1(W[((pc) - 2) &amp; 0x0F]) \
			+ W[((pc) - 7) &amp; 0x0F] \
			+ SSG2_0(W[((pc) - 15) &amp; 0x0F]) + W[(pc) &amp; 0x0F]; \
	} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA2_STEPn</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>g</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>pc</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>do { \
		uint32_t t1, t2; \
		SHA2_MEXP ## n(pc); \
		t1 = h + BSG2_1(e) + CH(e, f, g) \
			+ K[pcount + (pc)] + W[(pc) &amp; 0x0F]; \
		t2 = BSG2_0(a) + MAJ(a, b, c); \
		d += t1; \
		h = t1 + t2; \
	} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA2_STEP1</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>g</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>pc</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>SHA2_STEPn(1, a, b, c, d, e, f, g, h, pc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA2_STEP2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>g</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>pc</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>SHA2_STEPn(2, a, b, c, d, e, f, g, h, pc)</cpp:value></cpp:define>

	uint32_t A, B, C, D, E, F, G, H;
	uint32_t W[16];
	unsigned pcount;

	A = val[0];
	B = val[1];
	C = val[2];
	D = val[3];
	E = val[4];
	F = val[5];
	G = val[6];
	H = val[7];
	pcount = 0;
	SHA2_STEP1(A, B, C, D, E, F, G, H,  0);
	SHA2_STEP1(H, A, B, C, D, E, F, G,  1);
	SHA2_STEP1(G, H, A, B, C, D, E, F,  2);
	SHA2_STEP1(F, G, H, A, B, C, D, E,  3);
	SHA2_STEP1(E, F, G, H, A, B, C, D,  4);
	SHA2_STEP1(D, E, F, G, H, A, B, C,  5);
	SHA2_STEP1(C, D, E, F, G, H, A, B,  6);
	SHA2_STEP1(B, C, D, E, F, G, H, A,  7);
	SHA2_STEP1(A, B, C, D, E, F, G, H,  8);
	SHA2_STEP1(H, A, B, C, D, E, F, G,  9);
	SHA2_STEP1(G, H, A, B, C, D, E, F, 10);
	SHA2_STEP1(F, G, H, A, B, C, D, E, 11);
	SHA2_STEP1(E, F, G, H, A, B, C, D, 12);
	SHA2_STEP1(D, E, F, G, H, A, B, C, 13);
	SHA2_STEP1(C, D, E, F, G, H, A, B, 14);
	SHA2_STEP1(B, C, D, E, F, G, H, A, 15);
	for (pcount = 16; pcount &lt; 64; pcount += 16) {
		SHA2_STEP2(A, B, C, D, E, F, G, H,  0);
		SHA2_STEP2(H, A, B, C, D, E, F, G,  1);
		SHA2_STEP2(G, H, A, B, C, D, E, F,  2);
		SHA2_STEP2(F, G, H, A, B, C, D, E,  3);
		SHA2_STEP2(E, F, G, H, A, B, C, D,  4);
		SHA2_STEP2(D, E, F, G, H, A, B, C,  5);
		SHA2_STEP2(C, D, E, F, G, H, A, B,  6);
		SHA2_STEP2(B, C, D, E, F, G, H, A,  7);
		SHA2_STEP2(A, B, C, D, E, F, G, H,  8);
		SHA2_STEP2(H, A, B, C, D, E, F, G,  9);
		SHA2_STEP2(G, H, A, B, C, D, E, F, 10);
		SHA2_STEP2(F, G, H, A, B, C, D, E, 11);
		SHA2_STEP2(E, F, G, H, A, B, C, D, 12);
		SHA2_STEP2(D, E, F, G, H, A, B, C, 13);
		SHA2_STEP2(C, D, E, F, G, H, A, B, 14);
		SHA2_STEP2(B, C, D, E, F, G, H, A, 15);
	}
	val[0] += A;
	val[1] += B;
	val[2] += C;
	val[3] += D;
	val[4] += E;
	val[5] += F;
	val[6] += G;
	val[7] += H;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sha2small_update</name><parameter_list>(<parameter><decl><type><name>br_sha224_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>cc</name><operator>-&gt;</operator><name>count</name></name> <operator>&amp;</operator> <literal type="number">63</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>clen</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>clen</name> <operator>=</operator> <literal type="number">64</literal> <operator>-</operator> <name>ptr</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>clen</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>clen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>ptr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>clen</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>br_sha2small_round</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sha2small_out</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sha224_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>val</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>cc</name><operator>-&gt;</operator><name>count</name></name> <operator>&amp;</operator> <literal type="number">63</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name>val</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buf</name><index>[<expr><name>ptr</name> <operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&gt;</operator> <literal type="number">56</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>-</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_sha2small_round</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">56</literal> <operator>-</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>br_enc64be</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">56</literal></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_sha2small_round</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_range_enc32be</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl.h */</comment>
<function><type><name>void</name></type>
<name>br_sha224_init</name><parameter_list>(<parameter><decl><type><name>br_sha224_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>vtable</name></name> <operator>=</operator> <operator>&amp;</operator><name>br_sha224_vtable</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name>br_sha224_IV</name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>cc</name><operator>-&gt;</operator><name>val</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl.h */</comment>
<function><type><name>void</name></type>
<name>br_sha224_update</name><parameter_list>(<parameter><decl><type><name>br_sha224_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>sha2small_update</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl.h */</comment>
<function><type><name>void</name></type>
<name>br_sha224_out</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sha224_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>sha2small_out</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl.h */</comment>
<function><type><name>uint64_t</name></type>
<name>br_sha224_state</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sha224_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>br_range_enc32be</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>cc</name><operator>-&gt;</operator><name>count</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see bearssl.h */</comment>
<function><type><name>void</name></type>
<name>br_sha224_set_state</name><parameter_list>(<parameter><decl><type><name>br_sha224_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>stb</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>br_range_dec32be</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl.h */</comment>
<function><type><name>void</name></type>
<name>br_sha256_init</name><parameter_list>(<parameter><decl><type><name>br_sha256_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>vtable</name></name> <operator>=</operator> <operator>&amp;</operator><name>br_sha256_vtable</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name>br_sha256_IV</name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>cc</name><operator>-&gt;</operator><name>val</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl.h */</comment>
<function><type><name>void</name></type>
<name>br_sha256_out</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sha256_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>sha2small_out</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl.h */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name></type> <name>br_sha224_vtable</name> <init>= <expr><block>{
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>br_sha224_context</name></expr></argument>)</argument_list></sizeof></expr>,
	<expr><call><name>BR_HASHDESC_ID</name><argument_list>(<argument><expr><name>br_sha224_ID</name></expr></argument>)</argument_list></call>
		<operator>|</operator> <call><name>BR_HASHDESC_OUT</name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call>
		<operator>|</operator> <call><name>BR_HASHDESC_STATE</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call>
		<operator>|</operator> <call><name>BR_HASHDESC_LBLEN</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call>
		<operator>|</operator> <name>BR_HASHDESC_MD_PADDING</name>
		<operator>|</operator> <name>BR_HASHDESC_MD_PADDING_BE</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_hash_class</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_sha224_init</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_hash_class</name> <operator>*</operator><operator>*</operator></expr></argument>,
		<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_sha224_update</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_hash_class</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_sha224_out</name></expr>,
	<expr><operator>(</operator><call><call><name>uint64_t</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_hash_class</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_sha224_state</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_hash_class</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_sha224_set_state</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* see bearssl.h */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name></type> <name>br_sha256_vtable</name> <init>= <expr><block>{
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>br_sha256_context</name></expr></argument>)</argument_list></sizeof></expr>,
	<expr><call><name>BR_HASHDESC_ID</name><argument_list>(<argument><expr><name>br_sha256_ID</name></expr></argument>)</argument_list></call>
		<operator>|</operator> <call><name>BR_HASHDESC_OUT</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call>
		<operator>|</operator> <call><name>BR_HASHDESC_STATE</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call>
		<operator>|</operator> <call><name>BR_HASHDESC_LBLEN</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call>
		<operator>|</operator> <name>BR_HASHDESC_MD_PADDING</name>
		<operator>|</operator> <name>BR_HASHDESC_MD_PADDING_BE</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_hash_class</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_sha256_init</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_hash_class</name> <operator>*</operator><operator>*</operator></expr></argument>,
		<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_sha256_update</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_hash_class</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_sha256_out</name></expr>,
	<expr><operator>(</operator><call><call><name>uint64_t</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_hash_class</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_sha256_state</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_hash_class</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_sha256_set_state</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
