<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/bearssl/mac/hmac.c"><comment type="block">/*
 * Copyright (c) 2016 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>
<name>block_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>dig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>ls</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><name>ls</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>dig</name><operator>-&gt;</operator><name>desc</name></name> <operator>&gt;&gt;</operator> <name>BR_HASHDESC_LBLEN_OFF</name><operator>)</operator>
		<operator>&amp;</operator> <name>BR_HASHDESC_LBLEN_MASK</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>ls</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>process_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>hc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ks</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>bb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>blen</name></decl>, <decl><type ref="prev"/><name>u</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>blen</name> <operator>=</operator> <call><name>block_size</name><argument_list>(<argument><expr><operator>*</operator><name>hc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>key_len</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>u</name></expr>]</index></name> <operator>^=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>bb</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <name>key_len</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>blen</name> <operator>-</operator> <name>key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>hc</name><operator>)</operator><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><name>hc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>hc</name><operator>)</operator><operator>-&gt;</operator><name>update</name></name><argument_list>(<argument><expr><name>hc</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>hc</name><operator>)</operator><operator>-&gt;</operator><name>state</name></name><argument_list>(<argument><expr><name>hc</name></expr></argument>, <argument><expr><name>ks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl.h */</comment>
<function><type><name>void</name></type>
<name>br_hmac_key_init</name><parameter_list>(<parameter><decl><type><name>br_hmac_key_context</name> <modifier>*</modifier></type><name>kc</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>dig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>br_hash_compat_context</name></type> <name>hc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>kbuf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>kc</name><operator>-&gt;</operator><name>dig_vtable</name></name> <operator>=</operator> <name>dig</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hc</name><operator>.</operator><name>vtable</name></name> <operator>=</operator> <name>dig</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>key_len</name> <operator>&gt;</operator> <call><name>block_size</name><argument_list>(<argument><expr><name>dig</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><name>dig</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hc</name><operator>.</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>dig</name><operator>-&gt;</operator><name>update</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>dig</name><operator>-&gt;</operator><name>out</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>kbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>key</name> <operator>=</operator> <name>kbuf</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>key_len</name> <operator>=</operator> <call><name>br_digest_size</name><argument_list>(<argument><expr><name>dig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>process_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name><name>kc</name><operator>-&gt;</operator><name>ksi</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><literal type="number">0x36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>process_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name><name>kc</name><operator>-&gt;</operator><name>kso</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><literal type="number">0x5C</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl.h */</comment>
<function><type><name>void</name></type>
<name>br_hmac_init</name><parameter_list>(<parameter><decl><type><name>br_hmac_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>br_hmac_key_context</name> <modifier>*</modifier></type><name>kc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>out_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>dig</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>blen</name></decl>, <decl><type ref="prev"/><name>hlen</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>dig</name> <operator>=</operator> <name><name>kc</name><operator>-&gt;</operator><name>dig_vtable</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>blen</name> <operator>=</operator> <call><name>block_size</name><argument_list>(<argument><expr><name>dig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>dig</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>dig</name><operator>.</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>dig</name><operator>-&gt;</operator><name>set_state</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>dig</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name><name>kc</name><operator>-&gt;</operator><name>ksi</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>kso</name></name></expr></argument>, <argument><expr><name><name>kc</name><operator>-&gt;</operator><name>kso</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>kc</name><operator>-&gt;</operator><name>kso</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>hlen</name> <operator>=</operator> <call><name>br_digest_size</name><argument_list>(<argument><expr><name>dig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>out_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>out_len</name> <operator>&lt;</operator> <name>hlen</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>hlen</name> <operator>=</operator> <name>out_len</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>out_len</name></name> <operator>=</operator> <name>hlen</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl.h */</comment>
<function><type><name>void</name></type>
<name>br_hmac_update</name><parameter_list>(<parameter><decl><type><name>br_hmac_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>dig</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>update</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>dig</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl.h */</comment>
<function><type><name>size_t</name></type>
<name>br_hmac_out</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_hmac_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>dig</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>br_hash_compat_context</name></type> <name>hc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>blen</name></decl>, <decl><type ref="prev"/><name>hlen</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>dig</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>dig</name><operator>.</operator><name>vtable</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>dig</name><operator>-&gt;</operator><name>out</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>dig</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>blen</name> <operator>=</operator> <call><name>block_size</name><argument_list>(<argument><expr><name>dig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>dig</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hc</name><operator>.</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>dig</name><operator>-&gt;</operator><name>set_state</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>kso</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>hlen</name> <operator>=</operator> <call><name>br_digest_size</name><argument_list>(<argument><expr><name>dig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>dig</name><operator>-&gt;</operator><name>update</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>hlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>dig</name><operator>-&gt;</operator><name>out</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>out_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>out_len</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
