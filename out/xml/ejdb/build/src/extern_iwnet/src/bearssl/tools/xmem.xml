<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/bearssl/tools/xmem.c"><comment type="block">/*
 * Copyright (c) 2016 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"brssl.h"</cpp:file></cpp:include>

<comment type="block">/* see brssl.h */</comment>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>xmalloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: could not allocate %lu byte(s)\n"</literal></expr></argument>,
			<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see brssl.h */</comment>
<function><type><name>void</name></type>
<name>xfree</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* see brssl.h */</comment>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>xblobdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see brssl.h */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>xstrdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>xblobdup</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see brssl.h */</comment>
<function><type><name>br_x509_pkey</name> <modifier>*</modifier></type>
<name>xpkeydup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_x509_pkey</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>br_x509_pkey</name> <modifier>*</modifier></type><name>pk2</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>pk2</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>pk2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pk2</name><operator>-&gt;</operator><name>key_type</name></name> <operator>=</operator> <name><name>pk</name><operator>-&gt;</operator><name>key_type</name></name></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name><name>pk</name><operator>-&gt;</operator><name>key_type</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>BR_KEYTYPE_RSA</name></expr>:</case>
		<expr_stmt><expr><name><name>pk2</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>xblobdup</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>nlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pk2</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>nlen</name></name> <operator>=</operator> <name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>nlen</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pk2</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>e</name></name> <operator>=</operator> <call><name>xblobdup</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>e</name></name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>elen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pk2</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>elen</name></name> <operator>=</operator> <name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>elen</name></name></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>BR_KEYTYPE_EC</name></expr>:</case>
		<expr_stmt><expr><name><name>pk2</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>curve</name></name> <operator>=</operator> <name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>curve</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pk2</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>q</name></name> <operator>=</operator> <call><name>xblobdup</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>q</name></name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>qlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pk2</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>qlen</name></name> <operator>=</operator> <name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>qlen</name></name></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unknown public key type: %u\n"</literal></expr></argument>,
			<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>pk</name><operator>-&gt;</operator><name>key_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
	<return>return <expr><name>pk2</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see brssl.h */</comment>
<function><type><name>void</name></type>
<name>xfreepkey</name><parameter_list>(<parameter><decl><type><name>br_x509_pkey</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>pk</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name><name>pk</name><operator>-&gt;</operator><name>key_type</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>BR_KEYTYPE_RSA</name></expr>:</case>
			<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>BR_KEYTYPE_EC</name></expr>:</case>
			<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unknown public key type: %u\n"</literal></expr></argument>,
				<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>pk</name><operator>-&gt;</operator><name>key_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
		<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
