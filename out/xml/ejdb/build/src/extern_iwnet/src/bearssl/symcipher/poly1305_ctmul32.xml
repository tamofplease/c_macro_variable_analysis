<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/bearssl/symcipher/poly1305_ctmul32.c"><comment type="block">/*
 * Copyright (c) 2017 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Perform the inner processing of blocks for Poly1305.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>poly1305_inner</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Implementation notes: we split the 130-bit values into ten
	 * 13-bit words. This gives us some space for carries and allows
	 * using only 32x32-&gt;32 multiplications, which are way faster than
	 * 32x32-&gt;64 multiplications on the ARM Cortex-M0/M0+, and also
	 * help in making constant-time code on the Cortex-M3.
	 *
	 * Since we compute modulo 2^130-5, the "upper words" become
	 * low words with a factor of 5; that is, x*2^130 = x*5 mod p.
	 * This has already been integrated in the r[] array, which
	 * is extended to the 0..18 range.
	 *
	 * In each loop iteration, a[] and r[] words are 13-bit each,
	 * except a[1] which may use 14 bits.
	 */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>b</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>z</name></decl>, <decl><type ref="prev"/><name>cc1</name></decl>, <decl><type ref="prev"/><name>cc2</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * If there is a partial block, right-pad it with zeros.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>tmp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Decode next block and apply the "high bit"; that value
		 * is added to the accumulator.
		 */</comment>
		<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>br_dec16le</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x01FFF</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>v</name> <operator>&gt;&gt;=</operator> <literal type="number">13</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>v</name> <operator>|=</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>v</name> <operator>|=</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x01FFF</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>v</name> <operator>&gt;&gt;=</operator> <literal type="number">13</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>v</name> <operator>|=</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x01FFF</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>v</name> <operator>&gt;&gt;=</operator> <literal type="number">13</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>v</name> <operator>|=</operator> <name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>v</name> <operator>|=</operator> <name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">9</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x01FFF</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>v</name> <operator>&gt;&gt;=</operator> <literal type="number">13</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>v</name> <operator>|=</operator> <name><name>buf</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>v</name> <operator>|=</operator> <name><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x01FFF</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>v</name> <operator>&gt;&gt;=</operator> <literal type="number">13</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>v</name> <operator>|=</operator> <name><name>buf</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x01FFF</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>v</name> <operator>&gt;&gt;=</operator> <literal type="number">13</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>v</name> <operator>|=</operator> <name><name>buf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>v</name> <operator>|=</operator> <name><name>buf</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x01FFF</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>v</name> <operator>&gt;&gt;=</operator> <literal type="number">13</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>v</name> <operator>|=</operator> <name><name>buf</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x01FFF</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>br_dec16le</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x01FFF</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>v</name> <operator>&gt;&gt;=</operator> <literal type="number">13</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>v</name> <operator>|=</operator> <name><name>buf</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>+=</operator> <name>v</name> <operator>|</operator> <literal type="number">0x00800</literal></expr>;</expr_stmt>

		<comment type="block">/*
		 * At that point, all a[] values fit on 14 bits, while
		 * all r[] values fit on 13 bits. Thus products fit on
		 * 27 bits, and we can accumulate up to 31 of them in
		 * a 32-bit word and still have some room for carries.
		 */</comment>

		<comment type="block">/*
		 * Now a[] contains words with values up to 14 bits each.
		 * We perform the multiplication with r[].
		 *
		 * The extended words of r[] may be larger than 13 bits
		 * (they are 5 times a 13-bit word) so the full summation
		 * may yield values up to 46 times a 27-bit word, which
		 * does not fit on a 32-bit word. To avoid that issue, we
		 * must split the loop below in two, with a carry
		 * propagation operation in the middle.
		 */</comment>
		<expr_stmt><expr><name>cc1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>uint32_t</name></type> <name>s</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>s</name> <operator>=</operator> <name>cc1</name>
				<operator>+</operator> <call><name>MUL15</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">9</literal> <operator>-</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call>
				<operator>+</operator> <call><name>MUL15</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">9</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>
				<operator>+</operator> <call><name>MUL15</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">9</literal> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>
				<operator>+</operator> <call><name>MUL15</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">9</literal> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call>
				<operator>+</operator> <call><name>MUL15</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">9</literal> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>b</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>s</name> <operator>&amp;</operator> <literal type="number">0x1FFF</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>cc1</name> <operator>=</operator> <name>s</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name>cc2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>uint32_t</name></type> <name>s</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>b</name><index>[<expr><name>u</name></expr>]</index></name> <operator>+</operator> <name>cc2</name>
				<operator>+</operator> <call><name>MUL15</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">9</literal> <operator>-</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call>
				<operator>+</operator> <call><name>MUL15</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">9</literal> <operator>-</operator> <literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call>
				<operator>+</operator> <call><name>MUL15</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">9</literal> <operator>-</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call>
				<operator>+</operator> <call><name>MUL15</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">9</literal> <operator>-</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call>
				<operator>+</operator> <call><name>MUL15</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">9</literal> <operator>-</operator> <literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>b</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>s</name> <operator>&amp;</operator> <literal type="number">0x1FFF</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>cc2</name> <operator>=</operator> <name>s</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><sizeof>sizeof <name>b</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * The two carries "loop back" with a factor of 5. We
		 * propagate them into a[0] and a[1].
		 */</comment>
		<expr_stmt><expr><name>z</name> <operator>=</operator> <name>cc1</name> <operator>+</operator> <name>cc2</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>z</name> <operator>+=</operator> <operator>(</operator><name>z</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&amp;</operator> <literal type="number">0x1FFF</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/* see bearssl_block.h */</comment>
<function><type><name>void</name></type>
<name>br_poly1305_ctmul32_run</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>aad</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>aad_len</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>br_chacha20_run</name></type> <name>ichacha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encrypt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>pkey</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>foot</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>z</name></decl>, <decl><type ref="prev"/><name><name>r</name><index>[<expr><literal type="number">19</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>acc</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>cc</name></decl>, <decl><type ref="prev"/><name>ctl</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Compute the MAC key. The 'r' value is the first 16 bytes of
	 * pkey[].
	 */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>pkey</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ichacha</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pkey</name></expr></argument>, <argument><expr><sizeof>sizeof <name>pkey</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If encrypting, ChaCha20 must run first, followed by Poly1305.
	 * When decrypting, the operations are reversed.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>encrypt</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ichacha</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Run Poly1305. We must process the AAD, then ciphertext, then
	 * the footer (with the lengths). Note that the AAD and ciphertext
	 * are meant to be padded with zeros up to the next multiple of 16,
	 * and the length of the footer is 16 bytes as well.
	 */</comment>

	<comment type="block">/*
	 * Decode the 'r' value into 13-bit words, with the "clamping"
	 * operation applied.
	 */</comment>
	<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>br_dec32le</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x03FFFFFF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&amp;</operator> <literal type="number">0x1FFF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><call><name>br_dec32le</name><argument_list>(<argument><expr><name>pkey</name> <operator>+</operator>  <literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03FFFF03</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&amp;</operator> <literal type="number">0x1FFF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><call><name>br_dec32le</name><argument_list>(<argument><expr><name>pkey</name> <operator>+</operator>  <literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03FFC0FF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&amp;</operator> <literal type="number">0x1FFF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><call><name>br_dec32le</name><argument_list>(<argument><expr><name>pkey</name> <operator>+</operator>  <literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03F03FFF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&amp;</operator> <literal type="number">0x1FFF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><call><name>br_dec32le</name><argument_list>(<argument><expr><name>pkey</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x000FFFFF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&amp;</operator> <literal type="number">0x1FFF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Extend r[] with the 5x factor pre-applied.
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>MUL15</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>r</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Accumulator is 0.
	 */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>acc</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Process the additional authenticated data, ciphertext, and
	 * footer in due order.
	 */</comment>
	<expr_stmt><expr><call><name>br_enc64le</name><argument_list>(<argument><expr><name>foot</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>aad_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc64le</name><argument_list>(<argument><expr><name>foot</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>poly1305_inner</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>aad</name></expr></argument>, <argument><expr><name>aad_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>poly1305_inner</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>poly1305_inner</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>foot</name></expr></argument>, <argument><expr><sizeof>sizeof <name>foot</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Finalise modular reduction. This is done with carry propagation
	 * and applying the '2^130 = -5 mod p' rule. Note that the output
	 * of poly1035_inner() is already mostly reduced, since only
	 * acc[1] may be (very slightly) above 2^13. A single loop back
	 * to acc[1] will be enough to make the value fit in 130 bits.
	 */</comment>
	<expr_stmt><expr><name>cc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>z</name> <operator>=</operator> <name><name>acc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>cc</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>acc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&amp;</operator> <literal type="number">0x1FFF</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>cc</name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>z</name> <operator>=</operator> <name><name>acc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>cc</name> <operator>+</operator> <operator>(</operator><name>cc</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>acc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&amp;</operator> <literal type="number">0x1FFF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>acc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * We may still have a value in the 2^130-5..2^130-1 range, in
	 * which case we must reduce it again. The code below selects,
	 * in constant-time, between 'acc' and 'acc-p',
	 */</comment>
	<expr_stmt><expr><name>ctl</name> <operator>=</operator> <call><name>GT</name><argument_list>(<argument><expr><name><name>acc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x1FFA</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>ctl</name> <operator>&amp;=</operator> <call><name>EQ</name><argument_list>(<argument><expr><name><name>acc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x1FFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>acc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>MUX</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name><name>acc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">0x1FFB</literal></expr></argument>, <argument><expr><name><name>acc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>acc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><operator>-</operator><name>ctl</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Convert back the accumulator to 32-bit words, and add the
	 * 's' value (second half of pkey[]). That addition is done
	 * modulo 2^128.
	 */</comment>
	<expr_stmt><expr><name>z</name> <operator>=</operator> <name><name>acc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>acc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator> <operator>+</operator> <call><name>br_dec16le</name><argument_list>(<argument><expr><name>pkey</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc16le</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>tag</name></expr></argument>, <argument><expr><name>z</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>acc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <call><name>br_dec16le</name><argument_list>(<argument><expr><name>pkey</name> <operator>+</operator> <literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc16le</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>tag</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>acc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <call><name>br_dec16le</name><argument_list>(<argument><expr><name>pkey</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc16le</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>tag</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>z</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>acc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <call><name>br_dec16le</name><argument_list>(<argument><expr><name>pkey</name> <operator>+</operator> <literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc16le</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>tag</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>z</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>acc</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>acc</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>+</operator> <call><name>br_dec16le</name><argument_list>(<argument><expr><name>pkey</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc16le</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>tag</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>z</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>acc</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>+</operator> <call><name>br_dec16le</name><argument_list>(<argument><expr><name>pkey</name> <operator>+</operator> <literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc16le</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>tag</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>z</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>acc</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <call><name>br_dec16le</name><argument_list>(<argument><expr><name>pkey</name> <operator>+</operator> <literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc16le</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>tag</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>z</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>acc</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>+</operator> <call><name>br_dec16le</name><argument_list>(<argument><expr><name>pkey</name> <operator>+</operator> <literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc16le</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>tag</name> <operator>+</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><name>z</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If decrypting, then ChaCha20 runs _after_ Poly1305.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>encrypt</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ichacha</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
