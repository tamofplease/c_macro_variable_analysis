<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/bearssl/rsa/rsa_i62_pub.c"><comment type="block">/*
 * Copyright (c) 2016 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_INT128</name> <operator>||</operator> <name>BR_UMUL128</name></expr></cpp:if>

<comment type="block">/*
 * As a strict minimum, we need four buffers that can hold a
 * modular integer. But TLEN is expressed in 64-bit words.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLEN</name></cpp:macro>   <cpp:value>(2 * (2 + ((BR_MAX_RSA_SIZE + 30) / 31)))</cpp:value></cpp:define>

<comment type="block">/* see bearssl_rsa.h */</comment>
<function><type><name>uint32_t</name></type>
<name>br_rsa_i62_public</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>xlen</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>br_rsa_public_key</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>nlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>tmp</name><index>[<expr><name>TLEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>m</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>fwlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>z</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>m0i</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Get the actual length of the modulus, and see if it fits within
	 * our stack buffer. We also check that the length of x[] is valid.
	 */</comment>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>pk</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>nlen</name> <operator>=</operator> <name><name>pk</name><operator>-&gt;</operator><name>nlen</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>nlen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>nlen</name> <operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>nlen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>nlen</name> <operator>&gt;</operator> <operator>(</operator><name>BR_MAX_RSA_SIZE</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>||</operator> <name>xlen</name> <operator>!=</operator> <name>nlen</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name>nlen</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>fwlen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>z</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>z</name> <operator>-=</operator> <literal type="number">31</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>fwlen</name> <operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<comment type="block">/*
	 * Convert fwlen to a count in 62-bit words.
	 */</comment>
	<expr_stmt><expr><name>fwlen</name> <operator>=</operator> <operator>(</operator><name>fwlen</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * The modulus gets decoded into m[].
	 * The value to exponentiate goes into a[].
	 */</comment>
	<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>tmp</name> <operator>+</operator> <name>fwlen</name><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * Decode the modulus.
	 */</comment>
	<expr_stmt><expr><call><name>br_i31_decode</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>m0i</name> <operator>=</operator> <call><name>br_i31_ninv31</name><argument_list>(<argument><expr><name><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Note: if m[] is even, then m0i == 0. Otherwise, m0i must be
	 * an odd integer.
	 */</comment>
	<expr_stmt><expr><name>r</name> <operator>=</operator> <name>m0i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Decode x[] into a[]; we also check that its value is proper.
	 */</comment>
	<expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <call><name>br_i31_decode_mod</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>xlen</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Compute the modular exponentiation.
	 */</comment>
	<expr_stmt><expr><call><name>br_i62_modpow_opt</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>e</name></name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>elen</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>m0i</name></expr></argument>,
		<argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>fwlen</name></expr></argument>, <argument><expr><name>TLEN</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>fwlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Encode the result.
	 */</comment>
	<expr_stmt><expr><call><name>br_i31_encode</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>xlen</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see bearssl_rsa.h */</comment>
<function><type><name>br_rsa_public</name></type>
<name>br_rsa_i62_public_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>&amp;</operator><name>br_rsa_i62_public</name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<comment type="block">/* see bearssl_rsa.h */</comment>
<function><type><name>br_rsa_public</name></type>
<name>br_rsa_i62_public_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
