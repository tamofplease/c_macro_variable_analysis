<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/bearssl/ssl/ssl_hs_client.c"><comment type="block">/* Automatically generated code; do not modify directly. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>rp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl>;</decl_stmt>
}</block></struct></type> <name>t0_context</name>;</typedef>

<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>t0_parse7E_unsigned</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>y</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">0x7F</literal><operator>)</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>x</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type>
<name>t0_parse7E_signed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>neg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>neg</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>-</operator><name>neg</name></expr>;</expr_stmt>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>y</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">0x7F</literal><operator>)</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>neg</name></expr>)</condition> <block>{<block_content>
				<return>return <expr><operator>-</operator><operator>(</operator><name>int32_t</name><operator>)</operator><operator>~</operator><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>x</name></expr>;</return>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_VBYTE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>(unsigned char)((((uint32_t)(x) &gt;&gt; (n)) &amp; 0x7F) | 0x80)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_FBYTE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>(unsigned char)(((uint32_t)(x) &gt;&gt; (n)) &amp; 0x7F)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_SBYTE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(unsigned char)((((uint32_t)(x) &gt;&gt; 28) + 0xF8) ^ 0xF8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_INT1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>T0_FBYTE(x, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_INT2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>T0_VBYTE(x, 7), T0_FBYTE(x, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_INT3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>T0_VBYTE(x, 14), T0_VBYTE(x, 7), T0_FBYTE(x, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_INT4</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>T0_VBYTE(x, 21), T0_VBYTE(x, 14), T0_VBYTE(x, 7), T0_FBYTE(x, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_INT5</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>T0_SBYTE(x), T0_VBYTE(x, 21), T0_VBYTE(x, 14), T0_VBYTE(x, 7), T0_FBYTE(x, 0)</cpp:value></cpp:define>

<comment type="block">/* static const unsigned char t0_datablock[]; */</comment>


<function_decl><type><name>void</name></type> <name>br_ssl_hs_client_init_main</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>t0ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>br_ssl_hs_client_run</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>t0ctx</name></decl></parameter>)</parameter_list>;</function_decl>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/*
 * This macro evaluates to a pointer to the current engine context.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENG</name></cpp:macro>  <cpp:value>((br_ssl_engine_context *)(void *)((unsigned char *)t0ctx - offsetof(br_ssl_engine_context, cpu)))</cpp:value></cpp:define>





<comment type="block">/*
 * This macro evaluates to a pointer to the client context, under that
 * specific name. It must be noted that since the engine context is the
 * first field of the br_ssl_client_context structure ('eng'), then
 * pointers values of both types are interchangeable, modulo an
 * appropriate cast. This also means that "addresses" computed as offsets
 * within the structure work for both kinds of context.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTX</name></cpp:macro>  <cpp:value>((br_ssl_client_context *)ENG)</cpp:value></cpp:define>

<comment type="block">/*
 * Generate the pre-master secret for RSA key exchange, and encrypt it
 * with the server's public key. Returned value is either the encrypted
 * data length (in bytes), or -x on error, with 'x' being an error code.
 *
 * This code assumes that the public key has been already verified (it
 * was properly obtained by the X.509 engine, and it has the right type,
 * i.e. it is of type RSA and suitable for encryption).
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>make_pms_rsa</name><parameter_list>(<parameter><decl><type><name>br_ssl_client_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prf_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>xc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_pkey</name> <modifier>*</modifier></type><name>pk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pms</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>nlen</name></decl>, <decl><type ref="prev"/><name>u</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>xc</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>x509ctx</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pk</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>xc</name><operator>)</operator><operator>-&gt;</operator><name>get_pkey</name></name><argument_list>(<argument><expr><name>xc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Compute actual RSA key length, in case there are leading zeros.
	 */</comment>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>nlen</name> <operator>=</operator> <name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>nlen</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>nlen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>nlen</name> <operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * We need at least 59 bytes (48 bytes for pre-master secret, and
	 * 11 bytes for the PKCS#1 type 2 padding). Note that the X.509
	 * minimal engine normally blocks RSA keys shorter than 128 bytes,
	 * so this is mostly for public keys provided explicitly by the
	 * caller.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>nlen</name> <operator>&lt;</operator> <literal type="number">59</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><name>BR_ERR_X509_WEAK_PUBLIC_KEY</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>nlen</name> <operator>&gt;</operator> <sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>pad</name></name></sizeof></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><name>BR_ERR_LIMIT_EXCEEDED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Make PMS.
	 */</comment>
	<expr_stmt><expr><name>pms</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>pad</name></name> <operator>+</operator> <name>nlen</name> <operator>-</operator> <literal type="number">48</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc16be</name><argument_list>(<argument><expr><name>pms</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>version_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_hmac_drbg_generate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>rng</name></name></expr></argument>, <argument><expr><name>pms</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">46</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_ssl_engine_compute_master</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>eng</name></name></expr></argument>, <argument><expr><name>prf_id</name></expr></argument>, <argument><expr><name>pms</name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Apply PKCS#1 type 2 padding.
	 */</comment>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>pad</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>pad</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>pad</name><index>[<expr><name>nlen</name> <operator>-</operator> <literal type="number">49</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_hmac_drbg_generate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>rng</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>pad</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>nlen</name> <operator>-</operator> <literal type="number">51</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>nlen</name> <operator>-</operator> <literal type="number">49</literal></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<while>while <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>pad</name><index>[<expr><name>u</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>br_hmac_drbg_generate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>rng</name></name></expr></argument>,
				<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>pad</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Compute RSA encryption.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>ctx</name><operator>-&gt;</operator><name>irsapub</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>pad</name></name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><name>BR_ERR_LIMIT_EXCEEDED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>nlen</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * OID for hash functions in RSA signatures.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name><name>HASH_OID</name><index>[]</index></name> <init>= <expr><block>{
	<expr><name>BR_HASH_OID_SHA1</name></expr>,
	<expr><name>BR_HASH_OID_SHA224</name></expr>,
	<expr><name>BR_HASH_OID_SHA256</name></expr>,
	<expr><name>BR_HASH_OID_SHA384</name></expr>,
	<expr><name>BR_HASH_OID_SHA512</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Check the RSA signature on the ServerKeyExchange message.
 *
 *   hash      hash function ID (2 to 6), or 0 for MD5+SHA-1 (with RSA only)
 *   use_rsa   non-zero for RSA signature, zero for ECDSA
 *   sig_len   signature length (in bytes); signature value is in the pad
 *
 * Returned value is 0 on success, or an error code.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>verify_SKE_sig</name><parameter_list>(<parameter><decl><type><name>br_ssl_client_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_rsa</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sig_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>xc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_pkey</name> <modifier>*</modifier></type><name>pk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>br_multihash_context</name></type> <name>mhc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hv</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>head</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>hv_len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>xc</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>x509ctx</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pk</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>xc</name><operator>)</operator><operator>-&gt;</operator><name>get_pkey</name></name><argument_list>(<argument><expr><name>xc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_multihash_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mhc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_multihash_copyimpl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mhc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>mhash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_multihash_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mhc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_multihash_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mhc</name></expr></argument>,
		<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>client_random</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>client_random</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_multihash_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mhc</name></expr></argument>,
		<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>server_random</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>server_random</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>head</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>head</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>head</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>ecdhe_curve</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>head</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>ecdhe_point_len</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_multihash_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mhc</name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><sizeof>sizeof <name>head</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_multihash_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mhc</name></expr></argument>,
		<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>ecdhe_point</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>ecdhe_point_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>hash</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>hv_len</name> <operator>=</operator> <call><name>br_multihash_out</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mhc</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>hv_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>BR_ERR_INVALID_ALGORITHM</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>br_multihash_out</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mhc</name></expr></argument>, <argument><expr><name>br_md5_ID</name></expr></argument>, <argument><expr><name>hv</name></expr></argument>)</argument_list></call>
			<operator>||</operator> <operator>!</operator><call><name>br_multihash_out</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mhc</name></expr></argument>, <argument><expr><name>br_sha1_ID</name></expr></argument>, <argument><expr><name>hv</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><name>BR_ERR_INVALID_ALGORITHM</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>hv_len</name> <operator>=</operator> <literal type="number">36</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>use_rsa</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash_oid</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>hash</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>hash_oid</name> <operator>=</operator> <name><name>HASH_OID</name><index>[<expr><name>hash</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>hash_oid</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>irsavrfy</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>pad</name></name></expr></argument>, <argument><expr><name>sig_len</name></expr></argument>,
			<argument><expr><name>hash_oid</name></expr></argument>, <argument><expr><name>hv_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call>
			<operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>hv</name></expr></argument>, <argument><expr><name>hv_len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><name>BR_ERR_BAD_SIGNATURE</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>iecdsa</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>iec</name></name></expr></argument>, <argument><expr><name>hv</name></expr></argument>, <argument><expr><name>hv_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name></name></expr></argument>,
			<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>pad</name></name></expr></argument>, <argument><expr><name>sig_len</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><name>BR_ERR_BAD_SIGNATURE</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Perform client-side ECDH (or ECDHE). The point that should be sent to
 * the server is written in the pad; returned value is either the point
 * length (in bytes), or -x on error, with 'x' being an error code.
 *
 * The point _from_ the server is taken from ecdhe_point[] if 'ecdhe'
 * is non-zero, or from the X.509 engine context if 'ecdhe' is zero
 * (for static ECDH).
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>make_pms_ecdh</name><parameter_list>(<parameter><decl><type><name>br_ssl_client_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ecdhe</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prf_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>curve</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">66</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>point</name><index>[<expr><literal type="number">133</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>order</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>point_src</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>glen</name></decl>, <decl><type ref="prev"/><name>olen</name></decl>, <decl><type ref="prev"/><name>point_len</name></decl>, <decl><type ref="prev"/><name>xoff</name></decl>, <decl><type ref="prev"/><name>xlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>mask</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ecdhe</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>curve</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>ecdhe_curve</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>point_src</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>ecdhe_point</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>point_len</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>ecdhe_point_len</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>xc</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_pkey</name> <modifier>*</modifier></type><name>pk</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>xc</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>x509ctx</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pk</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>xc</name><operator>)</operator><operator>-&gt;</operator><name>get_pkey</name></name><argument_list>(<argument><expr><name>xc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>curve</name> <operator>=</operator> <name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>curve</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>point_src</name> <operator>=</operator> <name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>q</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>point_len</name> <operator>=</operator> <name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>qlen</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>iec</name><operator>-&gt;</operator><name>supported_curves</name></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>curve</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><name>BR_ERR_INVALID_ALGORITHM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * We need to generate our key, as a non-zero random value which
	 * is lower than the curve order, in a "large enough" range. We
	 * force top bit to 0 and bottom bit to 1, which guarantees that
	 * the value is in the proper range.
	 */</comment>
	<expr_stmt><expr><name>order</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>iec</name><operator>-&gt;</operator><name>order</name></name><argument_list>(<argument><expr><name>curve</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>mask</name> <operator>&gt;=</operator> <name><name>order</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>br_hmac_drbg_generate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>rng</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>olen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;=</operator> <name>mask</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><index>[<expr><name>olen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Compute the common ECDH point, whose X coordinate is the
	 * pre-master secret.
	 */</comment>
	<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>iec</name><operator>-&gt;</operator><name>generator</name></name><argument_list>(<argument><expr><name>curve</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>glen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>glen</name> <operator>!=</operator> <name>point_len</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><name>BR_ERR_INVALID_ALGORITHM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>point</name></expr></argument>, <argument><expr><name>point_src</name></expr></argument>, <argument><expr><name>glen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>iec</name><operator>-&gt;</operator><name>mul</name></name><argument_list>(<argument><expr><name>point</name></expr></argument>, <argument><expr><name>glen</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>olen</name></expr></argument>, <argument><expr><name>curve</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><name>BR_ERR_INVALID_ALGORITHM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * The pre-master secret is the X coordinate.
	 */</comment>
	<expr_stmt><expr><name>xoff</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>iec</name><operator>-&gt;</operator><name>xoff</name></name><argument_list>(<argument><expr><name>curve</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_ssl_engine_compute_master</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>eng</name></name></expr></argument>, <argument><expr><name>prf_id</name></expr></argument>, <argument><expr><name>point</name> <operator>+</operator> <name>xoff</name></expr></argument>, <argument><expr><name>xlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>iec</name><operator>-&gt;</operator><name>mulgen</name></name><argument_list>(<argument><expr><name>point</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>olen</name></expr></argument>, <argument><expr><name>curve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>pad</name></name></expr></argument>, <argument><expr><name>point</name></expr></argument>, <argument><expr><name>glen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>glen</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Perform full static ECDH. This occurs only in the context of client
 * authentication with certificates: the server uses an EC public key,
 * the cipher suite is of type ECDH (not ECDHE), the server requested a
 * client certificate and accepts static ECDH, the client has a
 * certificate with an EC public key in the same curve, and accepts
 * static ECDH as well.
 *
 * Returned value is 0 on success, -1 on error.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>make_pms_static_ecdh</name><parameter_list>(<parameter><decl><type><name>br_ssl_client_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prf_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>point</name><index>[<expr><literal type="number">133</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>point_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>xc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_pkey</name> <modifier>*</modifier></type><name>pk</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>xc</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>x509ctx</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pk</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>xc</name><operator>)</operator><operator>-&gt;</operator><name>get_pkey</name></name><argument_list>(<argument><expr><name>xc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>point_len</name> <operator>=</operator> <name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>qlen</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>point_len</name> <operator>&gt;</operator> <sizeof>sizeof <name>point</name></sizeof></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>point</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>q</name></name></expr></argument>, <argument><expr><name>point_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><operator>(</operator><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>client_auth_vtable</name></name><operator>)</operator><operator>-&gt;</operator><name>do_keyx</name></name><argument_list>(
		<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>client_auth_vtable</name></name></expr></argument>, <argument><expr><name>point</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>point_len</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>br_ssl_engine_compute_master</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>eng</name></name></expr></argument>,
		<argument><expr><name>prf_id</name></expr></argument>, <argument><expr><name>point</name></expr></argument>, <argument><expr><name>point_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Compute the client-side signature. This is invoked only when a
 * signature-based client authentication was selected. The computed
 * signature is in the pad; its length (in bytes) is returned. On
 * error, 0 is returned.
 */</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>make_client_sign</name><parameter_list>(<parameter><decl><type><name>br_ssl_client_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>hv_len</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Compute hash of handshake messages so far. This "cannot" fail
	 * because the list of supported hash functions provided to the
	 * client certificate handler was trimmed to include only the
	 * hash functions that the multi-hasher supports.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>hash_id</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>hv_len</name> <operator>=</operator> <call><name>br_multihash_out</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>mhash</name></name></expr></argument>,
			<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hash_id</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>pad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>br_multihash_out</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>mhash</name></name></expr></argument>,
			<argument><expr><name>br_md5_ID</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>pad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_multihash_out</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>mhash</name></name></expr></argument>,
			<argument><expr><name>br_sha1_ID</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>pad</name></name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>hv_len</name> <operator>=</operator> <literal type="number">36</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><call><name><operator>(</operator><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>client_auth_vtable</name></name><operator>)</operator><operator>-&gt;</operator><name>do_sign</name></name><argument_list>(
		<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>client_auth_vtable</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hash_id</name></name></expr></argument>, <argument><expr><name>hv_len</name></expr></argument>,
		<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>pad</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>pad</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>t0_datablock</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
	<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x41</literal></expr>,
	<expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x21</literal></expr>,
	<expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x31</literal></expr>,
	<expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x11</literal></expr>,
	<expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x22</literal></expr>,
	<expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x11</literal></expr>,
	<expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x32</literal></expr>,
	<expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0x43</literal></expr>,
	<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x14</literal></expr>,
	<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0x09</literal></expr>,
	<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x28</literal></expr>,
	<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0x25</literal></expr>,
	<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>t0_codeblock</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x08</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_BAD_CCS</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_BAD_CIPHER_SUITE</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_BAD_COMPRESSION</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_BAD_FINISHED</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_BAD_FRAGLEN</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_BAD_HANDSHAKE</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_BAD_HELLO_DONE</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_BAD_PARAM</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_BAD_SECRENEG</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_BAD_SNI</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_BAD_VERSION</name></expr></argument>)</argument_list></call></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_EXTRA_EXTENSION</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_INVALID_ALGORITHM</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_OK</name></expr></argument>)</argument_list></call></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_OVERSIZED_ID</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_RESUME_MISMATCH</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_UNEXPECTED</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_UNSUPPORTED_VERSION</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_WRONG_KEY_USAGE</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_engine_context</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_engine_context</name></expr></argument>, <argument><expr><name>alert</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_engine_context</name></expr></argument>, <argument><expr><name>application_data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_client_context</name></expr></argument>, <argument><expr><name>auth_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_engine_context</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_session_parameters</name></expr></argument>, <argument><expr><name>cipher_suite</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_engine_context</name></expr></argument>, <argument><expr><name>client_random</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_engine_context</name></expr></argument>, <argument><expr><name>close_received</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_engine_context</name></expr></argument>, <argument><expr><name>ecdhe_curve</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_engine_context</name></expr></argument>, <argument><expr><name>ecdhe_point</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_engine_context</name></expr></argument>, <argument><expr><name>ecdhe_point_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_engine_context</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_client_context</name></expr></argument>, <argument><expr><name>hash_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_client_context</name></expr></argument>, <argument><expr><name>hashes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_engine_context</name></expr></argument>, <argument><expr><name>log_max_frag_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_client_context</name></expr></argument>, <argument><expr><name>min_clienthello_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_engine_context</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_engine_context</name></expr></argument>, <argument><expr><name>protocol_names_num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_engine_context</name></expr></argument>, <argument><expr><name>record_type_in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_engine_context</name></expr></argument>, <argument><expr><name>record_type_out</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_engine_context</name></expr></argument>, <argument><expr><name>reneg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_engine_context</name></expr></argument>, <argument><expr><name>saved_finished</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_engine_context</name></expr></argument>, <argument><expr><name>selected_protocol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_engine_context</name></expr></argument>, <argument><expr><name>server_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_engine_context</name></expr></argument>, <argument><expr><name>server_random</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_engine_context</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_session_parameters</name></expr></argument>, <argument><expr><name>session_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_engine_context</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_session_parameters</name></expr></argument>, <argument><expr><name>session_id_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_engine_context</name></expr></argument>, <argument><expr><name>shutdown_recv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_engine_context</name></expr></argument>, <argument><expr><name>suites_buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_engine_context</name></expr></argument>, <argument><expr><name>suites_num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_engine_context</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_session_parameters</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_engine_context</name></expr></argument>, <argument><expr><name>version_in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_engine_context</name></expr></argument>, <argument><expr><name>version_max</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_engine_context</name></expr></argument>, <argument><expr><name>version_min</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_ssl_engine_context</name></expr></argument>, <argument><expr><name>version_out</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0x26</literal></expr>,
	<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x9D</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x26</literal></expr>,
	<expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0x1C</literal></expr>,
	<expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x44</literal></expr>,
	<expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x36</literal></expr>,
	<expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x26</literal></expr>,
	<expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xD5</literal></expr>,
	<expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x80</literal></expr>,
	<expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_KEYTYPE_SIGN</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x17</literal></expr>,
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xB7</literal></expr>,
	<expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0E</literal></expr>,
	<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x72</literal></expr>,
	<expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x0E</literal></expr>,
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0xAB</literal></expr>,
	<expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xD4</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7F</literal></expr>,
	<expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x3E</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_KEYTYPE_RSA</name> <operator>|</operator> <name>BR_KEYTYPE_KEYX</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_KEYTYPE_RSA</name> <operator>|</operator> <name>BR_KEYTYPE_SIGN</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_KEYTYPE_EC</name>  <operator>|</operator> <name>BR_KEYTYPE_SIGN</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
	<expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_KEYTYPE_EC</name>  <operator>|</operator> <name>BR_KEYTYPE_KEYX</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x04</literal></expr>,
	<expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_KEYTYPE_EC</name>  <operator>|</operator> <name>BR_KEYTYPE_KEYX</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x08</literal></expr>,
	<expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0B</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x09</literal></expr>,
	<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x26</literal></expr>,
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0x88</literal></expr>,
	<expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x1A</literal></expr>,
	<expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
	<expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x26</literal></expr>,
	<expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0F</literal></expr>,
	<expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x25</literal></expr>,
	<expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x25</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x78</literal></expr>,
	<expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xBF</literal></expr>,
	<expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x28</literal></expr>,
	<expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x86</literal></expr>,
	<expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x28</literal></expr>,
	<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x61</literal></expr>,
	<expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0B</literal></expr>,
	<expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xC0</literal></expr>,
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x26</literal></expr>,
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x82</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x04</literal></expr>,
	<expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x35</literal></expr>,
	<expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x74</literal></expr>,
	<expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x72</literal></expr>,
	<expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xB9</literal></expr>,
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x95</literal></expr>,
	<expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x28</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x96</literal></expr>,
	<expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x17</literal></expr>,
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x28</literal></expr>,
	<expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x62</literal></expr>,
	<expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
	<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
	<expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0F</literal></expr>,
	<expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xBE</literal></expr>,
	<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x05</literal></expr>,
	<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x6A</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xBD</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x28</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
	<expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x08</literal></expr>,
	<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x28</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xFE</literal></expr>,
	<expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x05</literal></expr>,
	<expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x17</literal></expr>,
	<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x86</literal></expr>,
	<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x44</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x28</literal></expr>,
	<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x26</literal></expr>,
	<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x84</literal></expr>,
	<expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x97</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x60</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x26</literal></expr>,
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x25</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x38</literal></expr>,
	<expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x79</literal></expr>,
	<expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x81</literal></expr>,
	<expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x17</literal></expr>,
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x80</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x88</literal></expr>,
	<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0x88</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xAA</literal></expr>,
	<expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x05</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xB6</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x9B</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x44</literal></expr>,
	<expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xC6</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x0C</literal></expr>,
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>,
	<expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x05</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0E</literal></expr>,
	<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x28</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x69</literal></expr>,
	<expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x18</literal></expr>,
	<expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x08</literal></expr>,
	<expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xD0</literal></expr>,
	<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x26</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x2C</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7F</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x29</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x44</literal></expr>,
	<expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x26</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x9A</literal></expr>,
	<expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x04</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x25</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x4A</literal></expr>,
	<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x80</literal></expr>,
	<expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x04</literal></expr>,
	<expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
	<expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0C</literal></expr>,
	<expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x26</literal></expr>,
	<expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x17</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x46</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x17</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x9A</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x22</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x14</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0E</literal></expr>,
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x7B</literal></expr>,
	<expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x0E</literal></expr>,
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x0E</literal></expr>,
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x25</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x37</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0x29</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xDD</literal></expr>,
	<expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x5E</literal></expr>,
	<expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xA2</literal></expr>,
	<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0B</literal></expr>,
	<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x38</literal></expr>,
	<expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x44</literal></expr>,
	<expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x26</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x08</literal></expr>,
	<expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0x94</literal></expr>,
	<expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x1C</literal></expr>,
	<expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x26</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x2C</literal></expr>,
	<expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x6E</literal></expr>,
	<expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x5A</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x89</literal></expr>,
	<expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x09</literal></expr>,
	<expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0C</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xDE</literal></expr>,
	<expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xDC</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x82</literal></expr>,
	<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>,
	<expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0xA0</literal></expr>,
	<expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x60</literal></expr>,
	<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xDC</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0x0F</literal></expr>,
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x72</literal></expr>,
	<expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0xDC</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x04</literal></expr>,
	<expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0x04</literal></expr>,
	<expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x84</literal></expr>,
	<expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0x84</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x10</literal></expr>,
	<expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x08</literal></expr>,
	<expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x20</literal></expr>,
	<expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x80</literal></expr>,
	<expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x04</literal></expr>,
	<expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x26</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0xDE</literal></expr>,
	<expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x04</literal></expr>,
	<expr><literal type="number">0x76</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>t0_caddr</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0</literal></expr>,
	<expr><literal type="number">5</literal></expr>,
	<expr><literal type="number">10</literal></expr>,
	<expr><literal type="number">15</literal></expr>,
	<expr><literal type="number">20</literal></expr>,
	<expr><literal type="number">25</literal></expr>,
	<expr><literal type="number">30</literal></expr>,
	<expr><literal type="number">35</literal></expr>,
	<expr><literal type="number">40</literal></expr>,
	<expr><literal type="number">44</literal></expr>,
	<expr><literal type="number">48</literal></expr>,
	<expr><literal type="number">52</literal></expr>,
	<expr><literal type="number">56</literal></expr>,
	<expr><literal type="number">60</literal></expr>,
	<expr><literal type="number">64</literal></expr>,
	<expr><literal type="number">68</literal></expr>,
	<expr><literal type="number">72</literal></expr>,
	<expr><literal type="number">76</literal></expr>,
	<expr><literal type="number">80</literal></expr>,
	<expr><literal type="number">84</literal></expr>,
	<expr><literal type="number">88</literal></expr>,
	<expr><literal type="number">92</literal></expr>,
	<expr><literal type="number">96</literal></expr>,
	<expr><literal type="number">100</literal></expr>,
	<expr><literal type="number">104</literal></expr>,
	<expr><literal type="number">108</literal></expr>,
	<expr><literal type="number">112</literal></expr>,
	<expr><literal type="number">116</literal></expr>,
	<expr><literal type="number">120</literal></expr>,
	<expr><literal type="number">124</literal></expr>,
	<expr><literal type="number">129</literal></expr>,
	<expr><literal type="number">134</literal></expr>,
	<expr><literal type="number">139</literal></expr>,
	<expr><literal type="number">144</literal></expr>,
	<expr><literal type="number">149</literal></expr>,
	<expr><literal type="number">154</literal></expr>,
	<expr><literal type="number">159</literal></expr>,
	<expr><literal type="number">164</literal></expr>,
	<expr><literal type="number">169</literal></expr>,
	<expr><literal type="number">174</literal></expr>,
	<expr><literal type="number">179</literal></expr>,
	<expr><literal type="number">184</literal></expr>,
	<expr><literal type="number">189</literal></expr>,
	<expr><literal type="number">194</literal></expr>,
	<expr><literal type="number">199</literal></expr>,
	<expr><literal type="number">204</literal></expr>,
	<expr><literal type="number">209</literal></expr>,
	<expr><literal type="number">214</literal></expr>,
	<expr><literal type="number">219</literal></expr>,
	<expr><literal type="number">224</literal></expr>,
	<expr><literal type="number">229</literal></expr>,
	<expr><literal type="number">234</literal></expr>,
	<expr><literal type="number">239</literal></expr>,
	<expr><literal type="number">244</literal></expr>,
	<expr><literal type="number">249</literal></expr>,
	<expr><literal type="number">254</literal></expr>,
	<expr><literal type="number">259</literal></expr>,
	<expr><literal type="number">264</literal></expr>,
	<expr><literal type="number">269</literal></expr>,
	<expr><literal type="number">274</literal></expr>,
	<expr><literal type="number">279</literal></expr>,
	<expr><literal type="number">284</literal></expr>,
	<expr><literal type="number">289</literal></expr>,
	<expr><literal type="number">294</literal></expr>,
	<expr><literal type="number">303</literal></expr>,
	<expr><literal type="number">316</literal></expr>,
	<expr><literal type="number">320</literal></expr>,
	<expr><literal type="number">345</literal></expr>,
	<expr><literal type="number">351</literal></expr>,
	<expr><literal type="number">370</literal></expr>,
	<expr><literal type="number">381</literal></expr>,
	<expr><literal type="number">422</literal></expr>,
	<expr><literal type="number">542</literal></expr>,
	<expr><literal type="number">546</literal></expr>,
	<expr><literal type="number">611</literal></expr>,
	<expr><literal type="number">626</literal></expr>,
	<expr><literal type="number">637</literal></expr>,
	<expr><literal type="number">655</literal></expr>,
	<expr><literal type="number">684</literal></expr>,
	<expr><literal type="number">694</literal></expr>,
	<expr><literal type="number">730</literal></expr>,
	<expr><literal type="number">740</literal></expr>,
	<expr><literal type="number">818</literal></expr>,
	<expr><literal type="number">832</literal></expr>,
	<expr><literal type="number">838</literal></expr>,
	<expr><literal type="number">897</literal></expr>,
	<expr><literal type="number">916</literal></expr>,
	<expr><literal type="number">951</literal></expr>,
	<expr><literal type="number">1000</literal></expr>,
	<expr><literal type="number">1076</literal></expr>,
	<expr><literal type="number">1103</literal></expr>,
	<expr><literal type="number">1134</literal></expr>,
	<expr><literal type="number">1145</literal></expr>,
	<expr><literal type="number">1497</literal></expr>,
	<expr><literal type="number">1644</literal></expr>,
	<expr><literal type="number">1668</literal></expr>,
	<expr><literal type="number">1884</literal></expr>,
	<expr><literal type="number">1898</literal></expr>,
	<expr><literal type="number">1907</literal></expr>,
	<expr><literal type="number">1911</literal></expr>,
	<expr><literal type="number">2006</literal></expr>,
	<expr><literal type="number">2027</literal></expr>,
	<expr><literal type="number">2083</literal></expr>,
	<expr><literal type="number">2090</literal></expr>,
	<expr><literal type="number">2101</literal></expr>,
	<expr><literal type="number">2117</literal></expr>,
	<expr><literal type="number">2123</literal></expr>,
	<expr><literal type="number">2134</literal></expr>,
	<expr><literal type="number">2169</literal></expr>,
	<expr><literal type="number">2181</literal></expr>,
	<expr><literal type="number">2187</literal></expr>,
	<expr><literal type="number">2202</literal></expr>,
	<expr><literal type="number">2218</literal></expr>,
	<expr><literal type="number">2411</literal></expr>,
	<expr><literal type="number">2420</literal></expr>,
	<expr><literal type="number">2433</literal></expr>,
	<expr><literal type="number">2442</literal></expr>,
	<expr><literal type="number">2449</literal></expr>,
	<expr><literal type="number">2459</literal></expr>,
	<expr><literal type="number">2565</literal></expr>,
	<expr><literal type="number">2590</literal></expr>,
	<expr><literal type="number">2603</literal></expr>,
	<expr><literal type="number">2619</literal></expr>,
	<expr><literal type="number">2637</literal></expr>,
	<expr><literal type="number">2669</literal></expr>,
	<expr><literal type="number">2703</literal></expr>,
	<expr><literal type="number">3071</literal></expr>,
	<expr><literal type="number">3107</literal></expr>,
	<expr><literal type="number">3120</literal></expr>,
	<expr><literal type="number">3134</literal></expr>,
	<expr><literal type="number">3139</literal></expr>,
	<expr><literal type="number">3144</literal></expr>,
	<expr><literal type="number">3210</literal></expr>,
	<expr><literal type="number">3218</literal></expr>,
	<expr><literal type="number">3226</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_INTERPRETED</name></cpp:macro>   <cpp:value>88</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_ENTER</name><parameter_list>(<parameter><type><name>ip</name></type></parameter>, <parameter><type><name>rp</name></type></parameter>, <parameter><type><name>slot</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>do { \
		const unsigned char *t0_newip; \
		uint32_t t0_lnum; \
		t0_newip = &amp;t0_codeblock[t0_caddr[(slot) - T0_INTERPRETED]]; \
		t0_lnum = t0_parse7E_unsigned(&amp;t0_newip); \
		(rp) += t0_lnum; \
		*((rp) ++) = (uint32_t)((ip) - &amp;t0_codeblock[0]) + (t0_lnum &lt;&lt; 16); \
		(ip) = t0_newip; \
	} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_DEFENTRY</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>slot</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>void \
name(void *ctx) \
{ \
	t0_context *t0ctx = ctx; \
	t0ctx-&gt;ip = &amp;t0_codeblock[0]; \
	T0_ENTER(t0ctx-&gt;ip, t0ctx-&gt;rp, slot); \
}</cpp:value></cpp:define>

<macro><name>T0_DEFENTRY</name><argument_list>(<argument>br_ssl_hs_client_init_main</argument>, <argument><literal type="number">169</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_NEXT</name><parameter_list>(<parameter><type><name>t0ipp</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>(*(*(t0ipp)) ++)</cpp:value></cpp:define>

<function><type><name>void</name></type>
<name>br_ssl_hs_client_run</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>t0ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_LOCAL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>(*(rp - 2 - (x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_POP</name><parameter_list>()</parameter_list></cpp:macro>       <cpp:value>(*-- dp)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_POPi</name><parameter_list>()</parameter_list></cpp:macro>      <cpp:value>(*(int32_t *)(-- dp))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_PEEK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>(*(dp - 1 - (x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_PEEKi</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>(*(int32_t *)(dp - 1 - (x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_PUSH</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>do { *dp = (v); dp ++; } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_PUSHi</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>do { *(int32_t *)dp = (v); dp ++; } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_RPOP</name><parameter_list>()</parameter_list></cpp:macro>      <cpp:value>(*-- rp)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_RPOPi</name><parameter_list>()</parameter_list></cpp:macro>     <cpp:value>(*(int32_t *)(-- rp))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_RPUSH</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>do { *rp = (v); rp ++; } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_RPUSHi</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>do { *(int32_t *)rp = (v); rp ++; } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_ROLL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>do { \
	size_t t0len = (size_t)(x); \
	uint32_t t0tmp = *(dp - 1 - t0len); \
	memmove(dp - t0len - 1, dp - t0len, t0len * sizeof *dp); \
	*(dp - 1) = t0tmp; \
} while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_SWAP</name><parameter_list>()</parameter_list></cpp:macro>      <cpp:value>do { \
	uint32_t t0tmp = *(dp - 2); \
	*(dp - 2) = *(dp - 1); \
	*(dp - 1) = t0tmp; \
} while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_ROT</name><parameter_list>()</parameter_list></cpp:macro>       <cpp:value>do { \
	uint32_t t0tmp = *(dp - 3); \
	*(dp - 3) = *(dp - 2); \
	*(dp - 2) = *(dp - 1); \
	*(dp - 1) = t0tmp; \
} while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_NROT</name><parameter_list>()</parameter_list></cpp:macro>       <cpp:value>do { \
	uint32_t t0tmp = *(dp - 1); \
	*(dp - 1) = *(dp - 2); \
	*(dp - 2) = *(dp - 3); \
	*(dp - 3) = t0tmp; \
} while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_PICK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>do { \
	uint32_t t0depth = (x); \
	T0_PUSH(T0_PEEK(t0depth)); \
} while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_CO</name><parameter_list>()</parameter_list></cpp:macro>         <cpp:value>do { \
	goto t0_exit; \
} while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_RET</name><parameter_list>()</parameter_list></cpp:macro>        <cpp:value>goto t0_next</cpp:value></cpp:define>

	<expr_stmt><expr><name>dp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t0_context</name> <operator>*</operator><operator>)</operator><name>t0ctx</name><operator>)</operator><operator>-&gt;</operator><name>dp</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t0_context</name> <operator>*</operator><operator>)</operator><name>t0ctx</name><operator>)</operator><operator>-&gt;</operator><name>rp</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ip</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t0_context</name> <operator>*</operator><operator>)</operator><name>t0ctx</name><operator>)</operator><operator>-&gt;</operator><name>ip</name></expr>;</expr_stmt>
	<goto>goto <name>t0_next</name>;</goto>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>t0x</name></decl>;</decl_stmt>

	<label><name>t0_next</name>:</label>
		<expr_stmt><expr><name>t0x</name> <operator>=</operator> <call><name>T0_NEXT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>t0x</name> <operator>&lt;</operator> <name>T0_INTERPRETED</name></expr>)</condition> <block>{<block_content>
			<switch>switch <condition>(<expr><name>t0x</name></expr>)</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>int32_t</name></type> <name>t0off</name></decl>;</decl_stmt>

			<case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="block">/* ret */</comment>
				<expr_stmt><expr><name>t0x</name> <operator>=</operator> <call><name>T0_RPOP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>rp</name> <operator>-=</operator> <operator>(</operator><name>t0x</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>t0x</name> <operator>&amp;=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>t0x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>ip</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<goto>goto <name>t0_exit</name>;</goto>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>ip</name> <operator>=</operator> <operator>&amp;</operator><name><name>t0_codeblock</name><index>[<expr><name>t0x</name></expr>]</index></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="block">/* literal constant */</comment>
				<expr_stmt><expr><call><name>T0_PUSHi</name><argument_list>(<argument><expr><call><name>t0_parse7E_signed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="block">/* read local */</comment>
				<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><call><name>T0_LOCAL</name><argument_list>(<argument><expr><call><name>t0_parse7E_unsigned</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">3</literal></expr>:</case> <comment type="block">/* write local */</comment>
				<expr_stmt><expr><call><name>T0_LOCAL</name><argument_list>(<argument><expr><call><name>t0_parse7E_unsigned</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">4</literal></expr>:</case> <comment type="block">/* jump */</comment>
				<expr_stmt><expr><name>t0off</name> <operator>=</operator> <call><name>t0_parse7E_signed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ip</name> <operator>+=</operator> <name>t0off</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">5</literal></expr>:</case> <comment type="block">/* jump if */</comment>
				<expr_stmt><expr><name>t0off</name> <operator>=</operator> <call><name>t0_parse7E_signed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>ip</name> <operator>+=</operator> <name>t0off</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">6</literal></expr>:</case> <comment type="block">/* jump if not */</comment>
				<expr_stmt><expr><name>t0off</name> <operator>=</operator> <call><name>t0_parse7E_signed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>T0_POP</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>ip</name> <operator>+=</operator> <name>t0off</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">7</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* * */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">8</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* + */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">9</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* - */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>a</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">10</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* &lt; */</comment>

	<decl_stmt><decl><type><name>int32_t</name></type> <name>b</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>a</name> <operator>&lt;</operator> <name>b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">11</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* &lt;&lt; */</comment>

	<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>x</name> <operator>&lt;&lt;</operator> <name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">12</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* &lt;= */</comment>

	<decl_stmt><decl><type><name>int32_t</name></type> <name>b</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>a</name> <operator>&lt;=</operator> <name>b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">13</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* &lt;&gt; */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>a</name> <operator>!=</operator> <name>b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">14</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* = */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>a</name> <operator>==</operator> <name>b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">15</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* &gt; */</comment>

	<decl_stmt><decl><type><name>int32_t</name></type> <name>b</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>a</name> <operator>&gt;</operator> <name>b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">16</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* &gt;= */</comment>

	<decl_stmt><decl><type><name>int32_t</name></type> <name>b</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>a</name> <operator>&gt;=</operator> <name>b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">17</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* &gt;&gt; */</comment>

	<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32_t</name></type> <name>x</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSHi</name><argument_list>(<argument><expr><name>x</name> <operator>&gt;&gt;</operator> <name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">18</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* anchor-dn-append-name */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>CTX</name><operator>-&gt;</operator><name>client_auth_vtable</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>CTX</name><operator>-&gt;</operator><name>client_auth_vtable</name></name><operator>)</operator><operator>-&gt;</operator><name>append_name</name></name><argument_list>(
			<argument><expr><name><name>CTX</name><operator>-&gt;</operator><name>client_auth_vtable</name></name></expr></argument>, <argument><expr><name><name>ENG</name><operator>-&gt;</operator><name>pad</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">19</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* anchor-dn-end-name */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>CTX</name><operator>-&gt;</operator><name>client_auth_vtable</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>CTX</name><operator>-&gt;</operator><name>client_auth_vtable</name></name><operator>)</operator><operator>-&gt;</operator><name>end_name</name></name><argument_list>(
			<argument><expr><name><name>CTX</name><operator>-&gt;</operator><name>client_auth_vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">20</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* anchor-dn-end-name-list */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>CTX</name><operator>-&gt;</operator><name>client_auth_vtable</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>CTX</name><operator>-&gt;</operator><name>client_auth_vtable</name></name><operator>)</operator><operator>-&gt;</operator><name>end_name_list</name></name><argument_list>(
			<argument><expr><name><name>CTX</name><operator>-&gt;</operator><name>client_auth_vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">21</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* anchor-dn-start-name */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>CTX</name><operator>-&gt;</operator><name>client_auth_vtable</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>CTX</name><operator>-&gt;</operator><name>client_auth_vtable</name></name><operator>)</operator><operator>-&gt;</operator><name>start_name</name></name><argument_list>(
			<argument><expr><name><name>CTX</name><operator>-&gt;</operator><name>client_auth_vtable</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">22</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* anchor-dn-start-name-list */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>CTX</name><operator>-&gt;</operator><name>client_auth_vtable</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>CTX</name><operator>-&gt;</operator><name>client_auth_vtable</name></name><operator>)</operator><operator>-&gt;</operator><name>start_name_list</name></name><argument_list>(
			<argument><expr><name><name>CTX</name><operator>-&gt;</operator><name>client_auth_vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">23</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* and */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>a</name> <operator>&amp;</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">24</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* begin-cert */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>ENG</name><operator>-&gt;</operator><name>chain_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>T0_PUSHi</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>ENG</name><operator>-&gt;</operator><name>cert_cur</name></name> <operator>=</operator> <name><name>ENG</name><operator>-&gt;</operator><name>chain</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ENG</name><operator>-&gt;</operator><name>cert_len</name></name> <operator>=</operator> <name><name>ENG</name><operator>-&gt;</operator><name>chain</name><operator>-&gt;</operator><name>data_len</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ENG</name><operator>-&gt;</operator><name>chain</name></name> <operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ENG</name><operator>-&gt;</operator><name>chain_len</name></name> <operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name><name>ENG</name><operator>-&gt;</operator><name>cert_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">25</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* bzero */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>ENG</name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">26</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* can-output? */</comment>

	<expr_stmt><expr><call><name>T0_PUSHi</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name><name>ENG</name><operator>-&gt;</operator><name>hlen_out</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">27</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* co */</comment>
 <expr_stmt><expr><call><name>T0_CO</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">28</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* compute-Finished-inner */</comment>

	<decl_stmt><decl><type><name>int</name></type> <name>prf_id</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>from_client</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>br_tls_prf_seed_chunk</name></type> <name>seed</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>br_tls_prf_impl</name></type> <name>prf</name> <init>= <expr><call><name>br_ssl_engine_get_PRF</name><argument_list>(<argument><expr><name>ENG</name></expr></argument>, <argument><expr><name>prf_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>seed</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ENG</name><operator>-&gt;</operator><name>session</name><operator>.</operator><name>version</name></name> <operator>&gt;=</operator> <name>BR_TLS12</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>seed</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>br_multihash_out</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ENG</name><operator>-&gt;</operator><name>mhash</name></name></expr></argument>, <argument><expr><name>prf_id</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>br_multihash_out</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ENG</name><operator>-&gt;</operator><name>mhash</name></name></expr></argument>, <argument><expr><name>br_md5_ID</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_multihash_out</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ENG</name><operator>-&gt;</operator><name>mhash</name></name></expr></argument>, <argument><expr><name>br_sha1_ID</name></expr></argument>, <argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>seed</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">36</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>prf</name><argument_list>(<argument><expr><name><name>ENG</name><operator>-&gt;</operator><name>pad</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name><name>ENG</name><operator>-&gt;</operator><name>session</name><operator>.</operator><name>master_secret</name></name></expr></argument>,
		<argument><expr><sizeof>sizeof <name><name>ENG</name><operator>-&gt;</operator><name>session</name><operator>.</operator><name>master_secret</name></name></sizeof></expr></argument>,
		<argument><expr><ternary><condition><expr><name>from_client</name></expr> ?</condition><then> <expr><literal type="string">"client finished"</literal></expr> </then><else>: <expr><literal type="string">"server finished"</literal></expr></else></ternary></expr></argument>,
		<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">29</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* copy-cert-chunk */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>clen</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>clen</name> <operator>=</operator> <name><name>ENG</name><operator>-&gt;</operator><name>cert_len</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>clen</name> <operator>&gt;</operator> <sizeof>sizeof <name><name>ENG</name><operator>-&gt;</operator><name>pad</name></name></sizeof></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>clen</name> <operator>=</operator> <sizeof>sizeof <name><name>ENG</name><operator>-&gt;</operator><name>pad</name></name></sizeof></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ENG</name><operator>-&gt;</operator><name>pad</name></name></expr></argument>, <argument><expr><name><name>ENG</name><operator>-&gt;</operator><name>cert_cur</name></name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ENG</name><operator>-&gt;</operator><name>cert_cur</name></name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ENG</name><operator>-&gt;</operator><name>cert_len</name></name> <operator>-=</operator> <name>clen</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">30</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* copy-protocol-name */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ENG</name><operator>-&gt;</operator><name>protocol_names</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ENG</name><operator>-&gt;</operator><name>pad</name></name></expr></argument>, <argument><expr><name><name>ENG</name><operator>-&gt;</operator><name>protocol_names</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">31</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* data-get8 */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>addr</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name><name>t0_datablock</name><index>[<expr><name>addr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">32</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* discard-input */</comment>

	<expr_stmt><expr><name><name>ENG</name><operator>-&gt;</operator><name>hlen_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">33</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* do-client-sign */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>sig_len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sig_len</name> <operator>=</operator> <call><name>make_client_sign</name><argument_list>(<argument><expr><name>CTX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>sig_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>br_ssl_engine_fail</name><argument_list>(<argument><expr><name>ENG</name></expr></argument>, <argument><expr><name>BR_ERR_INVALID_ALGORITHM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>T0_CO</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>sig_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">34</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* do-ecdh */</comment>

	<decl_stmt><decl><type><name>unsigned</name></type> <name>prf_id</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>ecdhe</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>make_pms_ecdh</name><argument_list>(<argument><expr><name>CTX</name></expr></argument>, <argument><expr><name>ecdhe</name></expr></argument>, <argument><expr><name>prf_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>br_ssl_engine_fail</name><argument_list>(<argument><expr><name>ENG</name></expr></argument>, <argument><expr><operator>-</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>T0_CO</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">35</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* do-rsa-encrypt */</comment>

	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>make_pms_rsa</name><argument_list>(<argument><expr><name>CTX</name></expr></argument>, <argument><expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>br_ssl_engine_fail</name><argument_list>(<argument><expr><name>ENG</name></expr></argument>, <argument><expr><operator>-</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>T0_CO</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">36</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* do-static-ecdh */</comment>

	<decl_stmt><decl><type><name>unsigned</name></type> <name>prf_id</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>make_pms_static_ecdh</name><argument_list>(<argument><expr><name>CTX</name></expr></argument>, <argument><expr><name>prf_id</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>br_ssl_engine_fail</name><argument_list>(<argument><expr><name>ENG</name></expr></argument>, <argument><expr><name>BR_ERR_INVALID_ALGORITHM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>T0_CO</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">37</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* drop */</comment>
 <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">38</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* dup */</comment>
 <expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><call><name>T0_PEEK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">39</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* ext-ALPN-length */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ENG</name><operator>-&gt;</operator><name>protocol_names_num</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>T0_RET</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name><name>ENG</name><operator>-&gt;</operator><name>protocol_names_num</name></name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ENG</name><operator>-&gt;</operator><name>protocol_names</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">40</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* fail */</comment>

	<expr_stmt><expr><call><name>br_ssl_engine_fail</name><argument_list>(<argument><expr><name>ENG</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>T0_CO</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">41</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* flush-record */</comment>

	<expr_stmt><expr><call><name>br_ssl_engine_flush_record</name><argument_list>(<argument><expr><name>ENG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">42</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* get-client-chain */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>auth_types</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>auth_types</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>CTX</name><operator>-&gt;</operator><name>client_auth_vtable</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>br_ssl_client_certificate</name></type> <name>ux</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>CTX</name><operator>-&gt;</operator><name>client_auth_vtable</name></name><operator>)</operator><operator>-&gt;</operator><name>choose</name></name><argument_list>(<argument><expr><name><name>CTX</name><operator>-&gt;</operator><name>client_auth_vtable</name></name></expr></argument>,
			<argument><expr><name>CTX</name></expr></argument>, <argument><expr><name>auth_types</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>auth_type</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>ux</name><operator>.</operator><name>auth_type</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>hash_id</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>ux</name><operator>.</operator><name>hash_id</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ENG</name><operator>-&gt;</operator><name>chain</name></name> <operator>=</operator> <name><name>ux</name><operator>.</operator><name>chain</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ENG</name><operator>-&gt;</operator><name>chain_len</name></name> <operator>=</operator> <name><name>ux</name><operator>.</operator><name>chain_len</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>hash_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ENG</name><operator>-&gt;</operator><name>chain_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">43</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* get-key-type-usages */</comment>

	<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier></type><name>xc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_pkey</name> <modifier>*</modifier></type><name>pk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>usages</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>xc</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>ENG</name><operator>-&gt;</operator><name>x509ctx</name></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>pk</name> <operator>=</operator> <call><name><name>xc</name><operator>-&gt;</operator><name>get_pkey</name></name><argument_list>(<argument><expr><name><name>ENG</name><operator>-&gt;</operator><name>x509ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>usages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>pk</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>key_type</name></name> <operator>|</operator> <name>usages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">44</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* get16 */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>addr</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>ENG</name> <operator>+</operator> <name>addr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">45</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* get32 */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>addr</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>ENG</name> <operator>+</operator> <name>addr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">46</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* get8 */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>addr</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>ENG</name> <operator>+</operator> <name>addr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">47</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* has-input? */</comment>

	<expr_stmt><expr><call><name>T0_PUSHi</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name><name>ENG</name><operator>-&gt;</operator><name>hlen_in</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">48</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* memcmp */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>addr2</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>ENG</name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>addr1</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>ENG</name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>addr1</name></expr></argument>, <argument><expr><name>addr2</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>-</operator><operator>(</operator><name>x</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">49</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* memcpy */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>ENG</name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>ENG</name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">50</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* mkrand */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>ENG</name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>br_hmac_drbg_generate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ENG</name><operator>-&gt;</operator><name>rng</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">51</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* more-incoming-bytes? */</comment>

	<expr_stmt><expr><call><name>T0_PUSHi</name><argument_list>(<argument><expr><name><name>ENG</name><operator>-&gt;</operator><name>hlen_in</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name>br_ssl_engine_recvrec_finished</name><argument_list>(<argument><expr><name>ENG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">52</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* multihash-init */</comment>

	<expr_stmt><expr><call><name>br_multihash_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ENG</name><operator>-&gt;</operator><name>mhash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">53</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* neg */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><operator>-</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">54</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* not */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><operator>~</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">55</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* or */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>a</name> <operator>|</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">56</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* over */</comment>
 <expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><call><name>T0_PEEK</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">57</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* read-chunk-native */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>clen</name> <init>= <expr><name><name>ENG</name><operator>-&gt;</operator><name>hlen_in</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>clen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>addr</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name> <operator>&lt;</operator> <name>clen</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>clen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>ENG</name> <operator>+</operator> <name>addr</name></expr></argument>, <argument><expr><name><name>ENG</name><operator>-&gt;</operator><name>hbuf_in</name></name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>ENG</name><operator>-&gt;</operator><name>record_type_in</name></name> <operator>==</operator> <name>BR_SSL_HANDSHAKE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>br_multihash_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ENG</name><operator>-&gt;</operator><name>mhash</name></name></expr></argument>, <argument><expr><name><name>ENG</name><operator>-&gt;</operator><name>hbuf_in</name></name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>addr</name> <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ENG</name><operator>-&gt;</operator><name>hbuf_in</name></name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ENG</name><operator>-&gt;</operator><name>hlen_in</name></name> <operator>-=</operator> <name>clen</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">58</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* read8-native */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>ENG</name><operator>-&gt;</operator><name>hlen_in</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>x</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>*</operator><name><name>ENG</name><operator>-&gt;</operator><name>hbuf_in</name></name> <operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>ENG</name><operator>-&gt;</operator><name>record_type_in</name></name> <operator>==</operator> <name>BR_SSL_HANDSHAKE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>br_multihash_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ENG</name><operator>-&gt;</operator><name>mhash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ENG</name><operator>-&gt;</operator><name>hlen_in</name></name> <operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>T0_PUSHi</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">59</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* set-server-curve */</comment>

	<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier></type><name>xc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_pkey</name> <modifier>*</modifier></type><name>pk</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>xc</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>ENG</name><operator>-&gt;</operator><name>x509ctx</name></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>pk</name> <operator>=</operator> <call><name><name>xc</name><operator>-&gt;</operator><name>get_pkey</name></name><argument_list>(<argument><expr><name><name>ENG</name><operator>-&gt;</operator><name>x509ctx</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>server_curve</name></name> <operator>=</operator>
		<ternary><condition><expr><operator>(</operator><name><name>pk</name><operator>-&gt;</operator><name>key_type</name></name> <operator>==</operator> <name>BR_KEYTYPE_EC</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>curve</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">60</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* set16 */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>addr</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>ENG</name> <operator>+</operator> <name>addr</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">61</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* set32 */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>addr</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>ENG</name> <operator>+</operator> <name>addr</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">62</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* set8 */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>addr</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>ENG</name> <operator>+</operator> <name>addr</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">63</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* strlen */</comment>

	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>ENG</name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">64</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* supported-curves */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name> <init>= <expr><ternary><condition><expr><name><name>ENG</name><operator>-&gt;</operator><name>iec</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>ENG</name><operator>-&gt;</operator><name>iec</name><operator>-&gt;</operator><name>supported_curves</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">65</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* supported-hash-functions */</comment>

	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>num</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>br_sha1_ID</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>br_sha512_ID</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>br_multihash_getimpl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ENG</name><operator>-&gt;</operator><name>mhash</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>x</name> <operator>|=</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>num</name> <operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">66</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* supports-ecdsa? */</comment>

	<expr_stmt><expr><call><name>T0_PUSHi</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name><name>ENG</name><operator>-&gt;</operator><name>iecdsa</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">67</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* supports-rsa-sign? */</comment>

	<expr_stmt><expr><call><name>T0_PUSHi</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name><name>ENG</name><operator>-&gt;</operator><name>irsavrfy</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">68</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* swap */</comment>
 <expr_stmt><expr><call><name>T0_SWAP</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">69</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* switch-aesccm-in */</comment>

	<decl_stmt><decl><type><name>int</name></type> <name>is_client</name></decl>, <decl><type ref="prev"/><name>prf_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>cipher_key_len</name></decl>, <decl><type ref="prev"/><name>tag_len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tag_len</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cipher_key_len</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>prf_id</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>is_client</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_ssl_engine_switch_ccm_in</name><argument_list>(<argument><expr><name>ENG</name></expr></argument>, <argument><expr><name>is_client</name></expr></argument>, <argument><expr><name>prf_id</name></expr></argument>,
		<argument><expr><name><name>ENG</name><operator>-&gt;</operator><name>iaes_ctrcbc</name></name></expr></argument>, <argument><expr><name>cipher_key_len</name></expr></argument>, <argument><expr><name>tag_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">70</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* switch-aesccm-out */</comment>

	<decl_stmt><decl><type><name>int</name></type> <name>is_client</name></decl>, <decl><type ref="prev"/><name>prf_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>cipher_key_len</name></decl>, <decl><type ref="prev"/><name>tag_len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tag_len</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cipher_key_len</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>prf_id</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>is_client</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_ssl_engine_switch_ccm_out</name><argument_list>(<argument><expr><name>ENG</name></expr></argument>, <argument><expr><name>is_client</name></expr></argument>, <argument><expr><name>prf_id</name></expr></argument>,
		<argument><expr><name><name>ENG</name><operator>-&gt;</operator><name>iaes_ctrcbc</name></name></expr></argument>, <argument><expr><name>cipher_key_len</name></expr></argument>, <argument><expr><name>tag_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">71</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* switch-aesgcm-in */</comment>

	<decl_stmt><decl><type><name>int</name></type> <name>is_client</name></decl>, <decl><type ref="prev"/><name>prf_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>cipher_key_len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cipher_key_len</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>prf_id</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>is_client</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_ssl_engine_switch_gcm_in</name><argument_list>(<argument><expr><name>ENG</name></expr></argument>, <argument><expr><name>is_client</name></expr></argument>, <argument><expr><name>prf_id</name></expr></argument>,
		<argument><expr><name><name>ENG</name><operator>-&gt;</operator><name>iaes_ctr</name></name></expr></argument>, <argument><expr><name>cipher_key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">72</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* switch-aesgcm-out */</comment>

	<decl_stmt><decl><type><name>int</name></type> <name>is_client</name></decl>, <decl><type ref="prev"/><name>prf_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>cipher_key_len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cipher_key_len</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>prf_id</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>is_client</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_ssl_engine_switch_gcm_out</name><argument_list>(<argument><expr><name>ENG</name></expr></argument>, <argument><expr><name>is_client</name></expr></argument>, <argument><expr><name>prf_id</name></expr></argument>,
		<argument><expr><name><name>ENG</name><operator>-&gt;</operator><name>iaes_ctr</name></name></expr></argument>, <argument><expr><name>cipher_key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">73</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* switch-cbc-in */</comment>

	<decl_stmt><decl><type><name>int</name></type> <name>is_client</name></decl>, <decl><type ref="prev"/><name>prf_id</name></decl>, <decl><type ref="prev"/><name>mac_id</name></decl>, <decl><type ref="prev"/><name>aes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>cipher_key_len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cipher_key_len</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>aes</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>mac_id</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>prf_id</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>is_client</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_ssl_engine_switch_cbc_in</name><argument_list>(<argument><expr><name>ENG</name></expr></argument>, <argument><expr><name>is_client</name></expr></argument>, <argument><expr><name>prf_id</name></expr></argument>, <argument><expr><name>mac_id</name></expr></argument>,
		<argument><expr><ternary><condition><expr><name>aes</name></expr> ?</condition><then> <expr><name><name>ENG</name><operator>-&gt;</operator><name>iaes_cbcdec</name></name></expr> </then><else>: <expr><name><name>ENG</name><operator>-&gt;</operator><name>ides_cbcdec</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>cipher_key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">74</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* switch-cbc-out */</comment>

	<decl_stmt><decl><type><name>int</name></type> <name>is_client</name></decl>, <decl><type ref="prev"/><name>prf_id</name></decl>, <decl><type ref="prev"/><name>mac_id</name></decl>, <decl><type ref="prev"/><name>aes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>cipher_key_len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cipher_key_len</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>aes</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>mac_id</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>prf_id</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>is_client</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_ssl_engine_switch_cbc_out</name><argument_list>(<argument><expr><name>ENG</name></expr></argument>, <argument><expr><name>is_client</name></expr></argument>, <argument><expr><name>prf_id</name></expr></argument>, <argument><expr><name>mac_id</name></expr></argument>,
		<argument><expr><ternary><condition><expr><name>aes</name></expr> ?</condition><then> <expr><name><name>ENG</name><operator>-&gt;</operator><name>iaes_cbcenc</name></name></expr> </then><else>: <expr><name><name>ENG</name><operator>-&gt;</operator><name>ides_cbcenc</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>cipher_key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">75</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* switch-chapol-in */</comment>

	<decl_stmt><decl><type><name>int</name></type> <name>is_client</name></decl>, <decl><type ref="prev"/><name>prf_id</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>prf_id</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>is_client</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_ssl_engine_switch_chapol_in</name><argument_list>(<argument><expr><name>ENG</name></expr></argument>, <argument><expr><name>is_client</name></expr></argument>, <argument><expr><name>prf_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">76</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* switch-chapol-out */</comment>

	<decl_stmt><decl><type><name>int</name></type> <name>is_client</name></decl>, <decl><type ref="prev"/><name>prf_id</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>prf_id</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>is_client</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_ssl_engine_switch_chapol_out</name><argument_list>(<argument><expr><name>ENG</name></expr></argument>, <argument><expr><name>is_client</name></expr></argument>, <argument><expr><name>prf_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">77</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* test-protocol-name */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name><name>ENG</name><operator>-&gt;</operator><name>protocol_names_num</name></name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>ENG</name><operator>-&gt;</operator><name>protocol_names</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>ENG</name><operator>-&gt;</operator><name>pad</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>T0_RET</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>T0_PUSHi</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">78</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* total-chain-length */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>total</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>total</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name><name>ENG</name><operator>-&gt;</operator><name>chain_len</name></name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>total</name> <operator>+=</operator> <literal type="number">3</literal> <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>ENG</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>data_len</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">79</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* u&gt;&gt; */</comment>

	<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>x</name> <operator>&gt;&gt;</operator> <name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">80</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* verify-SKE-sig */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>sig_len</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>use_rsa</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>hash</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><call><name>verify_SKE_sig</name><argument_list>(<argument><expr><name>CTX</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>use_rsa</name></expr></argument>, <argument><expr><name>sig_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">81</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* write-blob-chunk */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>clen</name> <init>= <expr><name><name>ENG</name><operator>-&gt;</operator><name>hlen_out</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>clen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>addr</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name> <operator>&lt;</operator> <name>clen</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>clen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ENG</name><operator>-&gt;</operator><name>hbuf_out</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>ENG</name> <operator>+</operator> <name>addr</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>ENG</name><operator>-&gt;</operator><name>record_type_out</name></name> <operator>==</operator> <name>BR_SSL_HANDSHAKE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>br_multihash_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ENG</name><operator>-&gt;</operator><name>mhash</name></name></expr></argument>, <argument><expr><name><name>ENG</name><operator>-&gt;</operator><name>hbuf_out</name></name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>addr</name> <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ENG</name><operator>-&gt;</operator><name>hbuf_out</name></name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ENG</name><operator>-&gt;</operator><name>hlen_out</name></name> <operator>-=</operator> <name>clen</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">82</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* write8-native */</comment>

	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>x</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ENG</name><operator>-&gt;</operator><name>hlen_out</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>ENG</name><operator>-&gt;</operator><name>record_type_out</name></name> <operator>==</operator> <name>BR_SSL_HANDSHAKE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>br_multihash_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ENG</name><operator>-&gt;</operator><name>mhash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name><name>ENG</name><operator>-&gt;</operator><name>hbuf_out</name></name> <operator>++</operator> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ENG</name><operator>-&gt;</operator><name>hlen_out</name></name> <operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>T0_PUSHi</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>T0_PUSHi</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">83</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* x509-append */</comment>

	<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier></type><name>xc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>xc</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>ENG</name><operator>-&gt;</operator><name>x509ctx</name></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>xc</name><operator>-&gt;</operator><name>append</name></name><argument_list>(<argument><expr><name><name>ENG</name><operator>-&gt;</operator><name>x509ctx</name></name></expr></argument>, <argument><expr><name><name>ENG</name><operator>-&gt;</operator><name>pad</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">84</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* x509-end-cert */</comment>

	<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier></type><name>xc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>xc</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>ENG</name><operator>-&gt;</operator><name>x509ctx</name></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>xc</name><operator>-&gt;</operator><name>end_cert</name></name><argument_list>(<argument><expr><name><name>ENG</name><operator>-&gt;</operator><name>x509ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">85</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* x509-end-chain */</comment>

	<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier></type><name>xc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>xc</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>ENG</name><operator>-&gt;</operator><name>x509ctx</name></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><call><name><name>xc</name><operator>-&gt;</operator><name>end_chain</name></name><argument_list>(<argument><expr><name><name>ENG</name><operator>-&gt;</operator><name>x509ctx</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">86</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* x509-start-cert */</comment>

	<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier></type><name>xc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>xc</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>ENG</name><operator>-&gt;</operator><name>x509ctx</name></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>xc</name><operator>-&gt;</operator><name>start_cert</name></name><argument_list>(<argument><expr><name><name>ENG</name><operator>-&gt;</operator><name>x509ctx</name></name></expr></argument>, <argument><expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">87</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* x509-start-chain */</comment>

	<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier></type><name>xc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>bc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>bc</name> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>xc</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>ENG</name><operator>-&gt;</operator><name>x509ctx</name></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>xc</name><operator>-&gt;</operator><name>start_chain</name></name><argument_list>(<argument><expr><name><name>ENG</name><operator>-&gt;</operator><name>x509ctx</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>bc</name></expr> ?</condition><then> <expr><name><name>ENG</name><operator>-&gt;</operator><name>server_name</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			</block_content>}</block></switch>

		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>T0_ENTER</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name>t0x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
<label><name>t0_exit</name>:</label>
	<expr_stmt><expr><operator>(</operator><operator>(</operator><name>t0_context</name> <operator>*</operator><operator>)</operator><name>t0ctx</name><operator>)</operator><operator>-&gt;</operator><name>dp</name> <operator>=</operator> <name>dp</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><operator>(</operator><name>t0_context</name> <operator>*</operator><operator>)</operator><name>t0ctx</name><operator>)</operator><operator>-&gt;</operator><name>rp</name> <operator>=</operator> <name>rp</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><operator>(</operator><name>t0_context</name> <operator>*</operator><operator>)</operator><name>t0ctx</name><operator>)</operator><operator>-&gt;</operator><name>ip</name> <operator>=</operator> <name>ip</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
