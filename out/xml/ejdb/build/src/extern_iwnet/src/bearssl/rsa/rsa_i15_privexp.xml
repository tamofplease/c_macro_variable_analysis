<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/bearssl/rsa/rsa_i15_privexp.c"><comment type="block">/*
 * Copyright (c) 2018 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/* see bearssl_rsa.h */</comment>
<function><type><name>size_t</name></type>
<name>br_rsa_i15_compute_privexp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>br_rsa_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * We want to invert e modulo phi = (p-1)(q-1). This first
	 * requires computing phi, which is easy since we have the factors
	 * p and q in the private key structure.
	 *
	 * Since p = 3 mod 4 and q = 3 mod 4, phi/4 is an odd integer.
	 * We could invert e modulo phi/4 then patch the result to
	 * modulo phi, but this would involve assembling three modulus-wide
	 * values (phi/4, 1 and e) and calling moddiv, that requires
	 * three more temporaries, for a total of six big integers, or
	 * slightly more than 3 kB of stack space for RSA-4096. This
	 * exceeds our stack requirements.
	 *
	 * Instead, we first use one step of the extended GCD:
	 *
	 *   - We compute phi = k*e + r  (Euclidean division of phi by e).
	 *     If public exponent e is correct, then r != 0 (e must be
	 *     invertible modulo phi). We also have k != 0 since we
	 *     enforce non-ridiculously-small factors.
	 *
	 *   - We find small u, v such that u*e - v*r = 1  (using a
	 *     binary GCD; we can arrange for u &lt; r and v &lt; e, i.e. all
	 *     values fit on 32 bits).
	 *
	 *   - Solution is: d = u + v*k
	 *     This last computation is exact: since u &lt; r and v &lt; e,
	 *     the above implies d &lt; r + e*((phi-r)/e) = phi
	 */</comment>

	<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>BR_MAX_RSA_FACTOR</name> <operator>+</operator> <literal type="number">14</literal><operator>)</operator> <operator>/</operator> <literal type="number">15</literal><operator>)</operator> <operator>+</operator> <literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>k</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>m</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>z</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>phi</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pbuf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>qbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>plen</name></decl>, <decl><type ref="prev"/><name>qlen</name></decl>, <decl><type ref="prev"/><name>u</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>dlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>u0</name></decl>, <decl><type ref="prev"/><name>v0</name></decl>, <decl><type ref="prev"/><name>u1</name></decl>, <decl><type ref="prev"/><name>v1</name></decl>, <decl><type ref="prev"/><name>he</name></decl>, <decl><type ref="prev"/><name>hr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Check that e is correct.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <operator>(</operator><name>e</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Check lengths of p and q, and that they are both odd.
	 */</comment>
	<expr_stmt><expr><name>pbuf</name> <operator>=</operator> <name><name>sk</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>plen</name> <operator>=</operator> <name><name>sk</name><operator>-&gt;</operator><name>plen</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>plen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>pbuf</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>pbuf</name> <operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>plen</name> <operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><call><name><name>plen</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">5</literal> <operator>||</operator> <name>plen</name></expr></argument> &gt;</argument_list></name> <argument_list>(<argument><expr><name>BR_MAX_RSA_FACTOR</name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call>
		<operator>||</operator> <operator>(</operator><name><name>pbuf</name><index>[<expr><name>plen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>qbuf</name> <operator>=</operator> <name><name>sk</name><operator>-&gt;</operator><name>q</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>qlen</name> <operator>=</operator> <name><name>sk</name><operator>-&gt;</operator><name>qlen</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>qlen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>qbuf</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>qbuf</name> <operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>qlen</name> <operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><call><name><name>qlen</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">5</literal> <operator>||</operator> <name>qlen</name></expr></argument> &gt;</argument_list></name> <argument_list>(<argument><expr><name>BR_MAX_RSA_FACTOR</name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call>
		<operator>||</operator> <operator>(</operator><name><name>qbuf</name><index>[<expr><name>qlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Output length is that of the modulus.
	 */</comment>
	<expr_stmt><expr><name>dlen</name> <operator>=</operator> <operator>(</operator><name><name>sk</name><operator>-&gt;</operator><name>n_bitlen</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>dlen</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_decode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pbuf</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>plen</name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>plen</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_decode</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>qbuf</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>qlen</name> <operator>=</operator> <operator>(</operator><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Compute phi = (p-1)*(q-1), then move it over p-1 and q-1 (that
	 * we do not need anymore). The mulacc function sets the announced
	 * bit length of t to be the sum of the announced bit lengths of
	 * p-1 and q-1, which is usually exact but may overshoot by one 1
	 * bit in some cases; we readjust it to its true length.
	 */</comment>
	<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>phi</name> <operator>=</operator> <name>q</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>qlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_zero</name><argument_list>(<argument><expr><name>phi</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_mulacc</name><argument_list>(<argument><expr><name>phi</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name><name>phi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>phi</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>len</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>phi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>phi</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>phi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>br_i15_bit_length</name><argument_list>(<argument><expr><name>phi</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name><name>phi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Divide phi by public exponent e. The final remainder r must be
	 * non-zero (otherwise, the key is invalid). The quotient is k,
	 * which we write over phi, since we don't need phi after that.
	 */</comment>
	<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <name>len</name></expr>;</init> <condition><expr><name>u</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>u</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="block">/*
		 * Upon entry, r &lt; e, and phi[u] &lt; 2^15; hence,
		 * hi:lo &lt; e*2^15. Thus, the produced word k[u]
		 * must be lower than 2^15, and the new remainder r
		 * is lower than e.
		 */</comment>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>hi</name></decl>, <decl><type ref="prev"/><name>lo</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>hi</name> <operator>=</operator> <name>r</name> <operator>&gt;&gt;</operator> <literal type="number">17</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>lo</name> <operator>=</operator> <operator>(</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>+</operator> <name><name>phi</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>phi</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <call><name>br_divrem</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>k</name> <operator>=</operator> <name>phi</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Compute u and v such that u*e - v*r = GCD(e,r). We use
	 * a binary GCD algorithm, with 6 extra integers a, b,
	 * u0, u1, v0 and v1. Initial values are:
	 *   a = e    u0 = 1   v0 = 0
	 *   b = r    u1 = r   v1 = e-1
	 * The following invariants are maintained:
	 *   a = u0*e - v0*r
	 *   b = u1*e - v1*r
	 *   0 &lt; a &lt;= e
	 *   0 &lt; b &lt;= r
	 *   0 &lt;= u0 &lt;= r
	 *   0 &lt;= v0 &lt;= e
	 *   0 &lt;= u1 &lt;= r
	 *   0 &lt;= v1 &lt;= e
	 *
	 * At each iteration, we reduce either a or b by one bit, and
	 * adjust u0, u1, v0 and v1 to maintain the invariants:
	 *  - if a is even, then a &lt;- a/2
	 *  - otherwise, if b is even, then b &lt;- b/2
	 *  - otherwise, if a &gt; b, then a &lt;- (a-b)/2
	 *  - otherwise, if b &gt; a, then b &lt;- (b-a)/2
	 * Algorithm stops when a = b. At that point, the common value
	 * is the GCD of e and r; it must be 1 (otherwise, the private
	 * key or public exponent is not valid). The (u0,v0) or (u1,v1)
	 * pairs are the solution we are looking for.
	 *
	 * Since either a or b is reduced by at least 1 bit at each
	 * iteration, 62 iterations are enough to reach the end
	 * condition.
	 *
	 * To maintain the invariants, we must compute the same operations
	 * on the u* and v* values that we do on a and b:
	 *  - When a is divided by 2, u0 and v0 must be divided by 2.
	 *  - When b is divided by 2, u1 and v1 must be divided by 2.
	 *  - When b is subtracted from a, u1 and v1 are subtracted from
	 *    u0 and v0, respectively.
	 *  - When a is subtracted from b, u0 and v0 are subtracted from
	 *    u1 and v1, respectively.
	 *
	 * However, we want to keep the u* and v* values in their proper
	 * ranges. The following remarks apply:
	 *
	 *  - When a is divided by 2, then a is even. Therefore:
	 *
	 *     * If r is odd, then u0 and v0 must have the same parity;
	 *       if they are both odd, then adding r to u0 and e to v0
	 *       makes them both even, and the division by 2 brings them
	 *       back to the proper range.
	 *
	 *     * If r is even, then u0 must be even; if v0 is odd, then
	 *       adding r to u0 and e to v0 makes them both even, and the
	 *       division by 2 brings them back to the proper range.
	 *
	 *    Thus, all we need to do is to look at the parity of v0,
	 *    and add (r,e) to (u0,v0) when v0 is odd. In order to avoid
	 *    a 32-bit overflow, we can add ((r+1)/2,(e/2)+1) after the
	 *    division (r+1 does not overflow since r &lt; e; and (e/2)+1
	 *    is equal to (e+1)/2 since e is odd).
	 *
	 *  - When we subtract b from a, three cases may occur:
	 *
	 *     * u1 &lt;= u0 and v1 &lt;= v0: just do the subtractions
	 *
	 *     * u1 &gt; u0 and v1 &gt; v0: compute:
	 *         (u0, v0) &lt;- (u0 + r - u1, v0 + e - v1)
	 *
	 *     * u1 &lt;= u0 and v1 &gt; v0: compute:
	 *         (u0, v0) &lt;- (u0 + r - u1, v0 + e - v1)
	 *
	 *    The fourth case (u1 &gt; u0 and v1 &lt;= v0) is not possible
	 *    because it would contradict "b &lt; a" (which is the reason
	 *    why we subtract b from a).
	 *
	 *    The tricky case is the third one: from the equations, it
	 *    seems that u0 may go out of range. However, the invariants
	 *    and ranges of other values imply that, in that case, the
	 *    new u0 does not actually exceed the range.
	 *
	 *    We can thus handle the subtraction by adding (r,e) based
	 *    solely on the comparison between v0 and v1.
	 */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>u0</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>v0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>u1</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>v1</name> <operator>=</operator> <name>e</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>hr</name> <operator>=</operator> <operator>(</operator><name>r</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>he</name> <operator>=</operator> <operator>(</operator><name>e</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">62</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>oa</name></decl>, <decl><type ref="prev"/><name>ob</name></decl>, <decl><type ref="prev"/><name>agtb</name></decl>, <decl><type ref="prev"/><name>bgta</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>sab</name></decl>, <decl><type ref="prev"/><name>sba</name></decl>, <decl><type ref="prev"/><name>da</name></decl>, <decl><type ref="prev"/><name>db</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>ctl</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>oa</name> <operator>=</operator> <name>a</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>                  <comment type="block">/* 1 if a is odd */</comment>
		<expr_stmt><expr><name>ob</name> <operator>=</operator> <name>b</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>                  <comment type="block">/* 1 if b is odd */</comment>
		<expr_stmt><expr><name>agtb</name> <operator>=</operator> <call><name>GT</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="block">/* 1 if a &gt; b */</comment>
		<expr_stmt><expr><name>bgta</name> <operator>=</operator> <call><name>GT</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="block">/* 1 if b &gt; a */</comment>

		<expr_stmt><expr><name>sab</name> <operator>=</operator> <name>oa</name> <operator>&amp;</operator> <name>ob</name> <operator>&amp;</operator> <name>agtb</name></expr>;</expr_stmt>        <comment type="block">/* 1 if a &lt;- a-b */</comment>
		<expr_stmt><expr><name>sba</name> <operator>=</operator> <name>oa</name> <operator>&amp;</operator> <name>ob</name> <operator>&amp;</operator> <name>bgta</name></expr>;</expr_stmt>        <comment type="block">/* 1 if b &lt;- b-a */</comment>

		<comment type="block">/* a &lt;- a-b, u0 &lt;- u0-u1, v0 &lt;- v0-v1 */</comment>
		<expr_stmt><expr><name>ctl</name> <operator>=</operator> <call><name>GT</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name> <operator>-=</operator> <name>b</name> <operator>&amp;</operator> <operator>-</operator><name>sab</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>u0</name> <operator>-=</operator> <operator>(</operator><name>u1</name> <operator>-</operator> <operator>(</operator><name>r</name> <operator>&amp;</operator> <operator>-</operator><name>ctl</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>-</operator><name>sab</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>v0</name> <operator>-=</operator> <operator>(</operator><name>v1</name> <operator>-</operator> <operator>(</operator><name>e</name> <operator>&amp;</operator> <operator>-</operator><name>ctl</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>-</operator><name>sab</name></expr>;</expr_stmt>

		<comment type="block">/* b &lt;- b-a, u1 &lt;- u1-u0 mod r, v1 &lt;- v1-v0 mod e */</comment>
		<expr_stmt><expr><name>ctl</name> <operator>=</operator> <call><name>GT</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name> <operator>-=</operator> <name>a</name> <operator>&amp;</operator> <operator>-</operator><name>sba</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>u1</name> <operator>-=</operator> <operator>(</operator><name>u0</name> <operator>-</operator> <operator>(</operator><name>r</name> <operator>&amp;</operator> <operator>-</operator><name>ctl</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>-</operator><name>sba</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>v1</name> <operator>-=</operator> <operator>(</operator><name>v0</name> <operator>-</operator> <operator>(</operator><name>e</name> <operator>&amp;</operator> <operator>-</operator><name>ctl</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>-</operator><name>sba</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>da</name> <operator>=</operator> <call><name>NOT</name><argument_list>(<argument><expr><name>oa</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>sab</name></expr>;</expr_stmt>          <comment type="block">/* 1 if a &lt;- a/2 */</comment>
		<expr_stmt><expr><name>db</name> <operator>=</operator> <operator>(</operator><name>oa</name> <operator>&amp;</operator> <call><name>NOT</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>|</operator> <name>sba</name></expr>;</expr_stmt>   <comment type="block">/* 1 if b &lt;- b/2 */</comment>

		<comment type="block">/* a &lt;- a/2, u0 &lt;- u0/2, v0 &lt;- v0/2 */</comment>
		<expr_stmt><expr><name>ctl</name> <operator>=</operator> <name>v0</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name> <operator>^=</operator> <operator>(</operator><name>a</name> <operator>^</operator> <operator>(</operator><name>a</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>-</operator><name>da</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>u0</name> <operator>^=</operator> <operator>(</operator><name>u0</name> <operator>^</operator> <operator>(</operator><operator>(</operator><name>u0</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>hr</name> <operator>&amp;</operator> <operator>-</operator><name>ctl</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>-</operator><name>da</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>v0</name> <operator>^=</operator> <operator>(</operator><name>v0</name> <operator>^</operator> <operator>(</operator><operator>(</operator><name>v0</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>he</name> <operator>&amp;</operator> <operator>-</operator><name>ctl</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>-</operator><name>da</name></expr>;</expr_stmt>

		<comment type="block">/* b &lt;- b/2, u1 &lt;- u1/2 mod r, v1 &lt;- v1/2 mod e */</comment>
		<expr_stmt><expr><name>ctl</name> <operator>=</operator> <name>v1</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name> <operator>^=</operator> <operator>(</operator><name>b</name> <operator>^</operator> <operator>(</operator><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>-</operator><name>db</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>u1</name> <operator>^=</operator> <operator>(</operator><name>u1</name> <operator>^</operator> <operator>(</operator><operator>(</operator><name>u1</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>hr</name> <operator>&amp;</operator> <operator>-</operator><name>ctl</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>-</operator><name>db</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>v1</name> <operator>^=</operator> <operator>(</operator><name>v1</name> <operator>^</operator> <operator>(</operator><operator>(</operator><name>v1</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>he</name> <operator>&amp;</operator> <operator>-</operator><name>ctl</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>-</operator><name>db</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Check that the GCD is indeed 1. If not, then the key is invalid
	 * (and there's no harm in leaking that piece of information).
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>a</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Now we have u0*e - v0*r = 1. Let's compute the result as:
	 *   d = u0 + v0*k
	 * We still have k in the tmp[] array, and its announced bit
	 * length is that of phi.
	 */</comment>
	<expr_stmt><expr><name>m</name> <operator>=</operator> <name>k</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>  <comment type="block">/* bit length is 32 bits, encoded */</comment>
	<expr_stmt><expr><name><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>v0</name> <operator>&amp;</operator> <literal type="number">0x7FFF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>v0</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7FFF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>v0</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>z</name> <operator>=</operator> <name>m</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_zero</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>u0</name> <operator>&amp;</operator> <literal type="number">0x7FFF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>u0</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7FFF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>z</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>u0</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_mulacc</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Encode the result.
	 */</comment>
	<expr_stmt><expr><call><name>br_i15_encode</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>dlen</name></expr>;</return>
</block_content>}</block></function>
</unit>
