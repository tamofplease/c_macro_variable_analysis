<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/bearssl/ec/ecdsa_i15_sign_raw.c"><comment type="block">/*
 * Copyright (c) 2017 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I15_LEN</name></cpp:macro>     <cpp:value>((BR_MAX_EC_SIZE + 29) / 15)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POINT_LEN</name></cpp:macro>   <cpp:value>(1 + (((BR_MAX_EC_SIZE + 7) &gt;&gt; 3) &lt;&lt; 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORDER_LEN</name></cpp:macro>   <cpp:value>((BR_MAX_EC_SIZE + 7) &gt;&gt; 3)</cpp:value></cpp:define>

<comment type="block">/* see bearssl_ec.h */</comment>
<function><type><name>size_t</name></type>
<name>br_ecdsa_i15_sign_raw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>impl</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>hf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>hash_value</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>br_ec_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * IMPORTANT: this code is fit only for curves with a prime
	 * order. This is needed so that modular reduction of the X
	 * coordinate of a point can be done with a simple subtraction.
	 * We also rely on the last byte of the curve order to be distinct
	 * from 0 and 1.
	 */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>br_ec_curve_def</name> <modifier>*</modifier></type><name>cd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>n</name><index>[<expr><name>I15_LEN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>r</name><index>[<expr><name>I15_LEN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>s</name><index>[<expr><name>I15_LEN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>x</name><index>[<expr><name>I15_LEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>m</name><index>[<expr><name>I15_LEN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>k</name><index>[<expr><name>I15_LEN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t1</name><index>[<expr><name>I15_LEN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t2</name><index>[<expr><name>I15_LEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tt</name><index>[<expr><name>ORDER_LEN</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>eU</name><index>[<expr><name>POINT_LEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>hash_len</name></decl>, <decl><type ref="prev"/><name>nlen</name></decl>, <decl><type ref="prev"/><name>ulen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16_t</name></type> <name>n0i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>ctl</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>br_hmac_drbg_context</name></type> <name>drbg</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * If the curve is not supported, then exit with an error.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>impl</name><operator>-&gt;</operator><name>supported_curves</name></name> <operator>&gt;&gt;</operator> <name><name>sk</name><operator>-&gt;</operator><name>curve</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Get the curve parameters (generator and order).
	 */</comment>
	<switch>switch <condition>(<expr><name><name>sk</name><operator>-&gt;</operator><name>curve</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>BR_EC_secp256r1</name></expr>:</case>
		<expr_stmt><expr><name>cd</name> <operator>=</operator> <operator>&amp;</operator><name>br_secp256r1</name></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>BR_EC_secp384r1</name></expr>:</case>
		<expr_stmt><expr><name>cd</name> <operator>=</operator> <operator>&amp;</operator><name>br_secp384r1</name></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>BR_EC_secp521r1</name></expr>:</case>
		<expr_stmt><expr><name>cd</name> <operator>=</operator> <operator>&amp;</operator><name>br_secp521r1</name></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></switch>

	<comment type="block">/*
	 * Get modulus.
	 */</comment>
	<expr_stmt><expr><name>nlen</name> <operator>=</operator> <name><name>cd</name><operator>-&gt;</operator><name>order_len</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_decode</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>cd</name><operator>-&gt;</operator><name>order</name></name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>n0i</name> <operator>=</operator> <call><name>br_i15_ninv15</name><argument_list>(<argument><expr><name><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Get private key as an i15 integer. This also checks that the
	 * private key is well-defined (not zero, and less than the
	 * curve order).
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>br_i15_decode_mod</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>xlen</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>br_i15_iszero</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Get hash length.
	 */</comment>
	<expr_stmt><expr><name>hash_len</name> <operator>=</operator> <operator>(</operator><name><name>hf</name><operator>-&gt;</operator><name>desc</name></name> <operator>&gt;&gt;</operator> <name>BR_HASHDESC_OUT_OFF</name><operator>)</operator> <operator>&amp;</operator> <name>BR_HASHDESC_OUT_MASK</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Truncate and reduce the hash value modulo the curve order.
	 */</comment>
	<expr_stmt><expr><call><name>br_ecdsa_i15_bits2int</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>hash_value</name></expr></argument>, <argument><expr><name>hash_len</name></expr></argument>, <argument><expr><name><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_sub</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>br_i15_sub</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>^</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * RFC 6979 generation of the "k" value.
	 *
	 * The process uses HMAC_DRBG (with the hash function used to
	 * process the message that is to be signed). The seed is the
	 * concatenation of the encodings of the private key and
	 * the hash value (after truncation and modular reduction).
	 */</comment>
	<expr_stmt><expr><call><name>br_i15_encode</name><argument_list>(<argument><expr><name>tt</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_encode</name><argument_list>(<argument><expr><name>tt</name> <operator>+</operator> <name>nlen</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_hmac_drbg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>drbg</name></expr></argument>, <argument><expr><name>hf</name></expr></argument>, <argument><expr><name>tt</name></expr></argument>, <argument><expr><name>nlen</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>br_hmac_drbg_generate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>drbg</name></expr></argument>, <argument><expr><name>tt</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_ecdsa_i15_bits2int</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>tt</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><name><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>br_i15_iszero</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>br_i15_sub</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Compute k*G and extract the X coordinate, then reduce it
	 * modulo the curve order. Since we support only curves with
	 * prime order, that reduction is only a matter of computing
	 * a subtraction.
	 */</comment>
	<expr_stmt><expr><call><name>br_i15_encode</name><argument_list>(<argument><expr><name>tt</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ulen</name> <operator>=</operator> <call><name><name>impl</name><operator>-&gt;</operator><name>mulgen</name></name><argument_list>(<argument><expr><name>eU</name></expr></argument>, <argument><expr><name>tt</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>curve</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_zero</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_decode</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>eU</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ulen</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_sub</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>br_i15_sub</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>^</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Compute 1/k in double-Montgomery representation. We do so by
	 * first converting _from_ Montgomery representation (twice),
	 * then using a modular exponentiation.
	 */</comment>
	<expr_stmt><expr><call><name>br_i15_from_monty</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n0i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_from_monty</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n0i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tt</name></expr></argument>, <argument><expr><name><name>cd</name><operator>-&gt;</operator><name>order</name></name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tt</name><index>[<expr><name>nlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_modpow</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>tt</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n0i</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Compute s = (m+xr)/k (mod n).
	 * The k[] array contains R^2/k (double-Montgomery representation);
	 * we thus can use direct Montgomery multiplications and conversions
	 * from Montgomery, avoiding any call to br_i15_to_monty() (which
	 * is slower).
	 */</comment>
	<expr_stmt><expr><call><name>br_i15_from_monty</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n0i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_montymul</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n0i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ctl</name> <operator>=</operator> <call><name>br_i15_add</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ctl</name> <operator>|=</operator> <call><name>br_i15_sub</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>^</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_sub</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_montymul</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n0i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Encode r and s in the signature.
	 */</comment>
	<expr_stmt><expr><call><name>br_i15_encode</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_encode</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>sig</name> <operator>+</operator> <name>nlen</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>nlen</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
