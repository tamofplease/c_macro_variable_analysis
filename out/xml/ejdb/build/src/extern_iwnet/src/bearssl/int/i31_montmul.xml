<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/bearssl/int/i31_montmul.c"><comment type="block">/*
 * Copyright (c) 2016 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/* see inner.h */</comment>
<function><type><name>void</name></type>
<name>br_i31_montymul</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>y</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>m0i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Each outer loop iteration computes:
	 *   d &lt;- (d + xu*y + f*m) / 2^31
	 * We have xu &lt;= 2^31-1 and f &lt;= 2^31-1.
	 * Thus, if d &lt;= 2*m-1 on input, then:
	 *   2*m-1 + 2*(2^31-1)*m &lt;= (2^32)*m-1
	 * and the new d value is less than 2*m.
	 *
	 * We represent d over 31-bit words, with an extra word 'dh'
	 * which can thus be only 0 or 1.
	 */</comment>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>len4</name></decl>, <decl><type ref="prev"/><name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>dh</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>len4</name> <operator>=</operator> <name>len</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i31_zero</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dh</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="block">/*
		 * The carry for each operation fits on 32 bits:
		 *   d[v+1] &lt;= 2^31-1
		 *   xu*y[v+1] &lt;= (2^31-1)*(2^31-1)
		 *   f*m[v+1] &lt;= (2^31-1)*(2^31-1)
		 *   r &lt;= 2^32-1
		 *   (2^31-1) + 2*(2^31-1)*(2^31-1) + (2^32-1) = 2^63 - 2^31
		 * After division by 2^31, the new r is then at most 2^32-1
		 *
		 * Using a 32-bit carry has performance benefits on 32-bit
		 * systems; however, on 64-bit architectures, we prefer to
		 * keep the carry (r) in a 64-bit register, thus avoiding some
		 * "clear high bits" operations.
		 */</comment>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>f</name></decl>, <decl><type ref="prev"/><name>xu</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_64</name></expr></cpp:if>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<expr_stmt><expr><name>xu</name> <operator>=</operator> <name><name>x</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>MUL31_lo</name><argument_list>(<argument><expr><operator>(</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <call><name>MUL31_lo</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name>m0i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name>len4</name></expr>;</condition> <incr><expr><name>v</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>uint64_t</name></type> <name>z</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>d</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name>xu</name></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>
				<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>m</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>r</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>d</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>z</name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>d</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name>xu</name></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>
				<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>m</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>r</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>d</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>z</name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>d</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name>xu</name></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call>
				<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>m</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>r</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>d</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>z</name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>d</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name>xu</name></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call>
				<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>m</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>r</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>d</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>z</name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal></expr>;</expr_stmt>
		</block_content>}</block></for>
		<for>for <control>(<init>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>v</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>uint64_t</name></type> <name>z</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>d</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name>xu</name></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>
				<operator>+</operator> <call><name>MUL31</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>m</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>r</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>d</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>z</name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="block">/*
		 * Since the new dh can only be 0 or 1, the addition of
		 * the old dh with the carry MUST fit on 32 bits, and
		 * thus can be done into dh itself.
		 */</comment>
		<expr_stmt><expr><name>dh</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>d</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>dh</name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>dh</name> <operator>&gt;&gt;=</operator> <literal type="number">31</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * We must write back the bit length because it was overwritten in
	 * the loop (not overwriting it would require a test in the loop,
	 * which would yield bigger and slower code).
	 */</comment>
	<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * d[] may still be greater than m[] at that point; notably, the
	 * 'dh' word may be non-zero.
	 */</comment>
	<expr_stmt><expr><call><name>br_i31_sub</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><call><name>NEQ</name><argument_list>(<argument><expr><name>dh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>NOT</name><argument_list>(<argument><expr><call><name>br_i31_sub</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
