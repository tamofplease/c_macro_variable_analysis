<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/bearssl/ssl/ssl_io.c"><comment type="block">/*
 * Copyright (c) 2016 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/* see bearssl_ssl.h */</comment>
<function><type><name>void</name></type>
<name>br_sslio_init</name><parameter_list>(<parameter><decl><type><name>br_sslio_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>engine</name></decl></parameter>,
	<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>low_read</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>read_context</name></decl></parameter>,
		<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list></function_decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>read_context</name></decl></parameter>,
	<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>low_write</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>write_context</name></decl></parameter>,
		<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list></function_decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>write_context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name> <operator>=</operator> <name>engine</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>low_read</name></name> <operator>=</operator> <name>low_read</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>read_context</name></name> <operator>=</operator> <name>read_context</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>low_write</name></name> <operator>=</operator> <name>low_write</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>write_context</name></name> <operator>=</operator> <name>write_context</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Run the engine, until the specified target state is achieved, or
 * an error occurs. The target state is SENDAPP, RECVAPP, or the
 * combination of both (the combination matches either). When a match is
 * achieved, this function returns 0. On error, it returns -1.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>run_until</name><parameter_list>(<parameter><decl><type><name>br_sslio_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>state</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>br_ssl_engine_current_state</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&amp;</operator> <name>BR_SSL_CLOSED</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * If there is some record data to send, do it. This takes
		 * precedence over everything else.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&amp;</operator> <name>BR_SSL_SENDREC</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>wlen</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>br_ssl_engine_sendrec_buf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>wlen</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>low_write</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>write_context</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>wlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<comment type="block">/*
				 * If we received a close_notify and we
				 * still send something, then we have our
				 * own response close_notify to send, and
				 * the peer is allowed by RFC 5246 not to
				 * wait for it.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>engine</name><operator>-&gt;</operator><name>shutdown_recv</name></name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>br_ssl_engine_fail</name><argument_list>(
						<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><name>BR_ERR_IO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>wlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>br_ssl_engine_sendrec_ack</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><name>wlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * If we reached our target, then we are finished.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&amp;</operator> <name>target</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * If some application data must be read, and we did not
		 * exit, then this means that we are trying to write data,
		 * and that's not possible until the application data is
		 * read. This may happen if using a shared in/out buffer,
		 * and the underlying protocol is not strictly half-duplex.
		 * This is unrecoverable here, so we report an error.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&amp;</operator> <name>BR_SSL_RECVAPP</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * If we reached that point, then either we are trying
		 * to read data and there is some, or the engine is stuck
		 * until a new record is obtained.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&amp;</operator> <name>BR_SSL_RECVREC</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>rlen</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>br_ssl_engine_recvrec_buf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>rlen</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>low_read</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>read_context</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>br_ssl_engine_fail</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><name>BR_ERR_IO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>br_ssl_engine_recvrec_ack</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><name>rlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * We can reach that point if the target RECVAPP, and
		 * the state contains SENDAPP only. This may happen with
		 * a shared in/out buffer. In that case, we must flush
		 * the buffered data to "make room" for a new incoming
		 * record.
		 */</comment>
		<expr_stmt><expr><call><name>br_ssl_engine_flush</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* see bearssl_ssl.h */</comment>
<function><type><name>int</name></type>
<name>br_sslio_read</name><parameter_list>(<parameter><decl><type><name>br_sslio_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>alen</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>run_until</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>BR_SSL_RECVAPP</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>br_ssl_engine_recvapp_buf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>alen</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>alen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>alen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_ssl_engine_recvapp_ack</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><name>alen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>alen</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see bearssl_ssl.h */</comment>
<function><type><name>int</name></type>
<name>br_sslio_read_all</name><parameter_list>(<parameter><decl><type><name>br_sslio_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>rlen</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>rlen</name> <operator>=</operator> <call><name>br_sslio_read</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>rlen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>rlen</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see bearssl_ssl.h */</comment>
<function><type><name>int</name></type>
<name>br_sslio_write</name><parameter_list>(<parameter><decl><type><name>br_sslio_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>alen</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>run_until</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>BR_SSL_SENDAPP</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>br_ssl_engine_sendapp_buf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>alen</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>alen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>alen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_ssl_engine_sendapp_ack</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><name>alen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>alen</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see bearssl_ssl.h */</comment>
<function><type><name>int</name></type>
<name>br_sslio_write_all</name><parameter_list>(<parameter><decl><type><name>br_sslio_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>wlen</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>wlen</name> <operator>=</operator> <call><name>br_sslio_write</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>wlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>wlen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>wlen</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see bearssl_ssl.h */</comment>
<function><type><name>int</name></type>
<name>br_sslio_flush</name><parameter_list>(<parameter><decl><type><name>br_sslio_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * We trigger a flush. We know the data is gone when there is
	 * no longer any record data to send, and we can either read
	 * or write application data. The call to run_until() does the
	 * job because it ensures that any assembled record data is
	 * first sent down the wire before considering anything else.
	 */</comment>
	<expr_stmt><expr><call><name>br_ssl_engine_flush</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>run_until</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>BR_SSL_SENDAPP</name> <operator>|</operator> <name>BR_SSL_RECVAPP</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see bearssl_ssl.h */</comment>
<function><type><name>int</name></type>
<name>br_sslio_close</name><parameter_list>(<parameter><decl><type><name>br_sslio_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>br_ssl_engine_close</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><call><name>br_ssl_engine_current_state</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>BR_SSL_CLOSED</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * Discard any incoming application data.
		 */</comment>
		<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>run_until</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>BR_SSL_RECVAPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>br_ssl_engine_recvapp_buf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>br_ssl_engine_recvapp_ack</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
	<return>return <expr><call><name>br_ssl_engine_last_error</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BR_ERR_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
