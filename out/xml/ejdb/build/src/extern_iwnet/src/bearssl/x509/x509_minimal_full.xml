<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/bearssl/x509/x509_minimal_full.c"><comment type="block">/*
 * Copyright (c) 2016 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/* see bearssl_x509.h */</comment>
<function><type><name>void</name></type>
<name>br_x509_minimal_init_full</name><parameter_list>(<parameter><decl><type><name>br_x509_minimal_context</name> <modifier>*</modifier></type><name>xc</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>br_x509_trust_anchor</name> <modifier>*</modifier></type><name>trust_anchors</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>trust_anchors_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * All hash functions are activated.
	 * Note: the X.509 validation engine will nonetheless refuse to
	 * validate signatures that use MD5 as hash function.
	 */</comment>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name><name>hashes</name><index>[]</index></name> <init>= <expr><block>{
		<expr><operator>&amp;</operator><name>br_md5_vtable</name></expr>,
		<expr><operator>&amp;</operator><name>br_sha1_vtable</name></expr>,
		<expr><operator>&amp;</operator><name>br_sha224_vtable</name></expr>,
		<expr><operator>&amp;</operator><name>br_sha256_vtable</name></expr>,
		<expr><operator>&amp;</operator><name>br_sha384_vtable</name></expr>,
		<expr><operator>&amp;</operator><name>br_sha512_vtable</name></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>br_x509_minimal_init</name><argument_list>(<argument><expr><name>xc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_sha256_vtable</name></expr></argument>,
		<argument><expr><name>trust_anchors</name></expr></argument>, <argument><expr><name>trust_anchors_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_x509_minimal_set_rsa</name><argument_list>(<argument><expr><name>xc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_rsa_i31_pkcs1_vrfy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_x509_minimal_set_ecdsa</name><argument_list>(<argument><expr><name>xc</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>br_ec_prime_i31</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_ecdsa_i31_vrfy_asn1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>id</name> <operator>=</operator> <name>br_md5_ID</name></expr>;</init> <condition><expr><name>id</name> <operator>&lt;=</operator> <name>br_sha512_ID</name></expr>;</condition> <incr><expr><name>id</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>hc</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>hc</name> <operator>=</operator> <name><name>hashes</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_x509_minimal_set_hash</name><argument_list>(<argument><expr><name>xc</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>hc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>
</unit>
