<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/ws/iwn_ws_client.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_ws_client.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_poller.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"poller/iwn_direct_poller_adapter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ssl/iwn_brssl_poller_adapter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_url.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_scheduler.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bearssl/bearssl_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wslay/wslay.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwlog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwxstr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwutils.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/tcp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_STATE_HANDSHAKE_SEND</name></cpp:macro> <cpp:value>0x01U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_STATE_HANDSHAKE_RECV</name></cpp:macro> <cpp:value>0x02U</cpp:value></cpp:define>

<struct>struct <name>iwn_ws_client</name> <block>{
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_ws_client_ctx</name></name></type>   <name>ctx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_ws_client_spec</name></name></type>  <name>spec</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_poller_adapter</name></name> <modifier>*</modifier></type><name>pa</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>query</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>urlbuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>wslay_event_context_ptr</name></type> <name>wsl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mtx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>port</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>fd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>secure</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>state</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>atomic_uchar</name></type>  <name>reconnect_attempt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>close_cas</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>dispose_cas</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>client_key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>_initialized</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_ecodefn</name><parameter_list>(<parameter><decl><type><name>locale_t</name></type> <name>locale</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ecode</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>IW_INLINE</name> <name>iwrc</name></type> <name>_wslayrc</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>wslay_error</name></name></type> <name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <switch>switch <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>WSLAY_ERR_NO_MORE_MSG</name></expr>:</case>
      <return>return <expr><name>WS_ERROR_CHANNEL_CLOSED</name></expr>;</return>
    <case>case <expr><name>WSLAY_ERR_INVALID_ARGUMENT</name></expr>:</case>
      <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
    <case>case <expr><name>WSLAY_ERR_NOMEM</name></expr>:</case>
      <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
      <return>return <expr><name>WS_ERROR</name></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_ws_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_client</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ws</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>urlbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>wslay_event_context_free</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>wsl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fd_make_non_blocking</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>flags</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
  <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>rci</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>O_NONBLOCK</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
  <if_stmt><if>if <condition>(<expr><name>rci</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_connect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port_</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>async</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out_fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>host</name> <operator>&amp;&amp;</operator> <name>out_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>out_fd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>nbuf</name><index>[<expr><name>IWNUMBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>port_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>port</name> <init>= <expr><name>nbuf</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>rci</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>si</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"/><name>hints</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>ai_family</name>   <operator>=</operator> <name>PF_UNSPEC</name></expr>,
    <expr><operator>.</operator><name>ai_socktype</name> <operator>=</operator> <name>SOCK_STREAM</name></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>rci</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error</name><argument_list>(<argument><expr><name>WS_ERROR_PEER_CONNECT</name></expr></argument>, <argument><expr><literal type="string">"ws | %s"</literal></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>WS_ERROR_PEER_CONNECT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>si</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>saddr</name><index>[<expr><name>INET6_ADDRSTRLEN</name> <operator>+</operator> <literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name><operator>*</operator><operator>)</operator> <name>sa</name><operator>)</operator><operator>-&gt;</operator><name>sin_addr</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name><operator>*</operator><operator>)</operator> <name>sa</name><operator>)</operator><operator>-&gt;</operator><name>sin6_addr</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_ecode_error</name><argument_list>(<argument><expr><name>WS_ERROR_PEER_CONNECT</name></expr></argument>, <argument><expr><literal type="string">"ws | Unsupported address family: 0x%x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>WS_ERROR_PEER_CONNECT</name></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>inet_ntop</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>saddr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>saddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_warn</name><argument_list>(<argument><expr><literal type="string">"ws | Error opening socket %s:%s %s %s"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>saddr</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>async</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_fd_make_non_blocking</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <do>do <block>{<block_content>
      <expr_stmt><expr><name>rci</name> <operator>=</operator> <call><name>connect</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>;</do>

    <if_stmt><if>if <condition>(<expr><name>rci</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>async</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>EAGAIN</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EINPROGRESS</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>iwlog_warn</name><argument_list>(<argument><expr><literal type="string">"ws | Error connecting %s:%s %s %s"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>saddr</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <break>break;</break>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>out_fd</name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>WS_ERROR_PEER_CONNECT</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>async</name></expr>)</condition> <block>{<block_content> <comment type="line">// Non-blocking after connection established</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_fd_make_non_blocking</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_make_tcp_nodelay</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_NODELAY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>_wslay_event_recv_callback</name><parameter_list>(
  <parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>,
  <parameter><decl><type><name>uint8_t</name>                <modifier>*</modifier></type><name>buf</name></decl></parameter>,
  <parameter><decl><type><name>size_t</name></type>                  <name>len</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type>                     <name>flags</name></decl></parameter>,
  <parameter><decl><type><name>void</name>                   <modifier>*</modifier></type><name>user_data</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>rci</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_ws_client</name></name> <modifier>*</modifier></type><name>ws</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_poller_adapter</name></name> <modifier>*</modifier></type><name>pa</name> <init>= <expr><name><name>ws</name><operator>-&gt;</operator><name>pa</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>again</name>:</label>
  <expr_stmt><expr><name>rci</name> <operator>=</operator> <call><name><name>pa</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>again</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EAGAIN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>wslay_event_set_error</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>wsl</name></name></expr></argument>, <argument><expr><name>WSLAY_ERR_WOULDBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>wslay_event_set_error</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>wsl</name></name></expr></argument>, <argument><expr><name>WSLAY_ERR_CALLBACK_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rci</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wslay_event_shutdown_read</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>wsl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rci</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rci</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>_wslay_event_send_callback</name><parameter_list>(
  <parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name>          <modifier>*</modifier></type><name>buf</name></decl></parameter>,
  <parameter><decl><type><name>size_t</name></type>                  <name>len</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type>                     <name>flags</name></decl></parameter>,
  <parameter><decl><type><name>void</name>                   <modifier>*</modifier></type><name>user_data</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>rci</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_ws_client</name></name> <modifier>*</modifier></type><name>ws</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_poller_adapter</name></name> <modifier>*</modifier></type><name>pa</name> <init>= <expr><name><name>ws</name><operator>-&gt;</operator><name>pa</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>again</name>:</label>
  <expr_stmt><expr><name>rci</name> <operator>=</operator> <call><name><name>pa</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>again</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EAGAIN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>wslay_event_set_error</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>wsl</name></name></expr></argument>, <argument><expr><name>WSLAY_ERR_WOULDBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>wslay_event_set_error</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>wsl</name></name></expr></argument>, <argument><expr><name>WSLAY_ERR_CALLBACK_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rci</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wslay_event_shutdown_write</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>wsl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rci</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rci</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_wslay_event_on_msg_recv_callback</name><parameter_list>(
  <parameter><decl><type><name>wslay_event_context_ptr</name></type>                   <name>ctx</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>wslay_event_on_msg_recv_arg</name></name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
  <parameter><decl><type><name>void</name>                                     <modifier>*</modifier></type><name>user_data</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_ws_client</name></name> <modifier>*</modifier></type><name>ws</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(  <expr><operator>(</operator>  <name><name>arg</name><operator>-&gt;</operator><name>msg_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
        <operator>&amp;&amp;</operator> <operator>(</operator><name><name>arg</name><operator>-&gt;</operator><name>opcode</name></name> <operator>==</operator> <name>WSLAY_TEXT_FRAME</name> <operator>||</operator> <name><name>arg</name><operator>-&gt;</operator><name>opcode</name></name> <operator>==</operator> <name>WSLAY_BINARY_FRAME</name><operator>)</operator><operator>)</operator>
     <operator>||</operator> <operator>(</operator>  <operator>(</operator><name><name>ws</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>WS_HANDLE_PING_PONG</name><operator>)</operator>
        <operator>&amp;&amp;</operator> <operator>(</operator><name><name>arg</name><operator>-&gt;</operator><name>opcode</name></name> <operator>==</operator> <name>WSLAY_PING</name> <operator>||</operator> <name><name>arg</name><operator>-&gt;</operator><name>opcode</name></name> <operator>==</operator> <name>WSLAY_PONG</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>ws</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>on_message</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>arg</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>msg_length</name></name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_wslay_genmask_callback</name><parameter_list>(
  <parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>tow</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>tow</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>rn</name> <init>= <expr><call><name>iwu_rand_u32</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>wl</name> <init>= <expr><ternary><condition><expr><name>tow</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rn</name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr><name>rn</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><name>tow</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rn</name></expr></argument>, <argument><expr><name>wl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tow</name> <operator>-=</operator> <name>wl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>wl</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_handshake_write_client_key_b64</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name><name>out</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"/dev/urandom"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_IO_ERRNO</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>iwn_base64_encode</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>base64_VARIANT_ORIGINAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_FAIL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_handshake_output_fill</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_client</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>iwxstr_clear</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>RCR</name><argument_list>(<argument><expr><call><name>_handshake_write_client_key_b64</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>client_key</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>er_default</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>er</name> <init>= <expr><name>er_default</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ws</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>on_handshake</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>er</name> <operator>=</operator> <call><name><name>ws</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>on_handshake</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>er</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>er</name> <operator>=</operator> <name>er_default</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>RCR</name><argument_list>(<argument><expr><call><name>iwxstr_printf</name><argument_list>(
        <argument><expr><name><name>ws</name><operator>-&gt;</operator><name>output</name></name></expr></argument>,
        <argument><expr><literal type="string">"GET %s%s%s HTTP/1.1\r\n"</literal>
        <literal type="string">"Host: %s:%d\r\n"</literal>
        <literal type="string">"Upgrade: websocket\r\n"</literal>
        <literal type="string">"Connection: Upgrade\r\n"</literal>
        <literal type="string">"%s"</literal>
        <literal type="string">"Sec-Websocket-Key: %s\r\n"</literal>
        <literal type="string">"Sec-Websocket-Version: 13\r\n"</literal>
        <literal type="string">"\r\n"</literal></expr></argument>,
        <argument><expr><name><name>ws</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>ws</name><operator>-&gt;</operator><name>query</name></name></expr> ?</condition><then> <expr><literal type="string">"?"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>ws</name><operator>-&gt;</operator><name>query</name></name></expr> ?</condition><then> <expr><name><name>ws</name><operator>-&gt;</operator><name>query</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>,
        <argument><expr><name><name>ws</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>ws</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,
        <argument><expr><name>er</name></expr></argument>,
        <argument><expr><name><name>ws</name><operator>-&gt;</operator><name>client_key</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>er</name> <operator>!=</operator> <name>er_default</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>er</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_handshake_validate_accept_key</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_client</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>accept_key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>accept_key_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>client_key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name>len</name> <operator>+</operator> <call><name>IW_LLEN</name><argument_list>(<argument><expr><name>WS_MAGIC13</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sbuf</name><index>[<expr><name>br_sha1_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>vbuf</name><index>[<expr><name>br_sha1_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>ws</name><operator>-&gt;</operator><name>client_key</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>WS_MAGIC13</name></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><name>WS_MAGIC13</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>br_sha1_context</name></type> <name>ctx</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>br_sha1_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>br_sha1_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>br_sha1_out</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>sbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>iwn_base64_encode</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>sbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>base64_VARIANT_ORIGINAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>accept_key_len</name> <operator>!=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>strncmp</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>, <argument><expr><name>accept_key</name></expr></argument>, <argument><expr><name>accept_key_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>_on_handshake_event</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller_adapter</name></name> <modifier>*</modifier></type><name>pa</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>events</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_ws_client</name></name> <modifier>*</modifier></type><name>ws</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ws</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>_STATE_HANDSHAKE_SEND</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>IWN_POLLOUT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_handshake_output_fill</name><argument_list>(<argument><expr><name>ws</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>tow</name> <init>= <expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>tow</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name> <init>= <expr><call><name><name>pa</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <goto>goto <name>finish</name>;</goto>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <goto>goto <name>finish</name>;</goto>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>iwxstr_shift</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tow</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>state</name></name> <operator>|=</operator> <name>_STATE_HANDSHAKE_SEND</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ws</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>_STATE_HANDSHAKE_RECV</name><operator>)</operator></expr>)</condition> <block>{<block_content>  <comment type="line">// Recieve response</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>IWN_POLLIN</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name> <init>= <expr><call><name><name>pa</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <goto>goto <name>finish</name>;</goto>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <goto>goto <name>finish</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ws</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>_STATE_HANDSHAKE_RECV</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_cat</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>WS_ERROR_HANDSHAKE</name></expr>;</expr_stmt>
          <goto>goto <name>finish</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"\r\n\r\n"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>state</name></name> <operator>|=</operator> <name>_STATE_HANDSHAKE_RECV</name></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>iwn_strcasestr</name><argument_list>(<argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"sec-websocket-accept:"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>WS_ERROR_HANDSHAKE_CLIENT_KEY</name></expr>;</expr_stmt>
            <goto>goto <name>finish</name>;</goto>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"sec-websocket-accept:"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <call><name>isblank</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
          <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><name>q</name> <operator>||</operator> <operator>!</operator><call><name>_handshake_validate_accept_key</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>q</name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>WS_ERROR_HANDSHAKE_CLIENT_KEY</name></expr>;</expr_stmt>
            <goto>goto <name>finish</name>;</goto>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_make_tcp_nodelay</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"ws | state=%d input=%s output=%s"</literal></expr></argument>, <argument><expr><name><name>ws</name><operator>-&gt;</operator><name>state</name></name></expr></argument>,
                      <argument><expr><ternary><condition><expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
                      <argument><expr><ternary><condition><expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ws</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>_STATE_HANDSHAKE_RECV</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ws</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>on_connected</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>ws</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>on_connected</name></name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>_on_poller_adapter_event</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller_adapter</name></name> <modifier>*</modifier></type><name>pa</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>events</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_ws_client</name></name> <modifier>*</modifier></type><name>ws</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ws</name><operator>-&gt;</operator><name>pa</name></name> <operator>!=</operator> <name>pa</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>pa</name></name> <operator>=</operator> <name>pa</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IW_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>ws</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>_STATE_HANDSHAKE_RECV</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_on_handshake_event</name><argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><name>user_data</name></expr></argument>, <argument><expr><name>events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>ws</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>_STATE_HANDSHAKE_RECV</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>wslay_event_want_write</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>wsl</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>wslay_event_send</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>wsl</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>wslay_event_want_read</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>wsl</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>wslay_event_recv</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>wsl</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>wslay_event_want_read</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>wsl</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>|=</operator> <name>IWN_POLLIN</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>wslay_event_want_write</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>wsl</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>|=</operator> <name>IWN_POLLOUT</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>ret</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_on_poller_adapter_dispose</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller_adapter</name></name> <modifier>*</modifier></type><name>pa</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_ws_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_client</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_ws_client_spec</name></name> <modifier>*</modifier></type><name>spec</name> <init>= <expr><operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>spec</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwxstr_clear</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwxstr_clear</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ws</name><operator>-&gt;</operator><name>wsl</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wslay_event_context_free</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>wsl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>wsl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Now do the initial handshake</comment>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_connect</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>ws</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>spec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WS_CONNECT_ASYNC</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>_wslayrc(wslay_event_context_client_init(&amp;ws-&gt;wsl, &amp;(struct wslay_event_callbacks) {
    .recv_callback = _wslay_event_recv_callback,
    .send_callback = _wslay_event_send_callback,
    .on_msg_recv_callback = _wslay_event_on_msg_recv_callback,
    .genmask_callback = _wslay_genmask_callback
  }, ws))</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ws</name><operator>-&gt;</operator><name>secure</name></name></expr>)</condition> <block>{<block_content>
    <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_brssl_client_poller_adapter(&amp;(struct iwn_brssl_client_poller_adapter_spec) {
      .poller = spec-&gt;poller,
      .host = ws-&gt;host,
      .on_event = _on_poller_adapter_event,
      .on_dispose = _on_poller_adapter_dispose,
      .user_data = ws,
      .timeout_sec = spec-&gt;timeout_sec,
      .events = IWN_POLLOUT,
      .events_mod = IWN_POLLET,
      .fd = ws-&gt;fd,
      .verify_peer = spec-&gt;flags &amp; WS_VERIFY_PEER,
      .verify_host = spec-&gt;flags &amp; WS_VERIFY_HOST
    })</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>,
        <argument><expr><call><name>iwn_direct_poller_adapter</name><argument_list>(<argument><expr><name><name>spec</name><operator>-&gt;</operator><name>poller</name></name></expr></argument>, <argument><expr><name><name>ws</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,
                                  <argument><expr><name>_on_poller_adapter_event</name></expr></argument>,
                                  <argument><expr><name>_on_poller_adapter_dispose</name></expr></argument>,
                                  <argument><expr><name>ws</name></expr></argument>, <argument><expr><name>IWN_POLLOUT</name></expr></argument>, <argument><expr><name>IWN_POLLET</name></expr></argument>,
                                  <argument><expr><name><name>spec</name><operator>-&gt;</operator><name>timeout_sec</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ws</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>shutdown</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SHUT_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_ws_dispose</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_client</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>dispose_cas</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ws</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>on_dispose</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>ws</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>on_dispose</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_ws_client_is_can_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_client</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>ws</name> <operator>&amp;&amp;</operator> <name><name>ws</name><operator>-&gt;</operator><name>dispose_cas</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_ws_client_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_client</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ws</name> <operator>&amp;&amp;</operator> <name><name>ws</name><operator>-&gt;</operator><name>dispose_cas</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_ws_destroy</name><argument_list>(<argument><expr><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_ws_reconnect</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_ws_client</name></name> <modifier>*</modifier></type><name>ws</name> <init>= <expr><name>d</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ws</name><operator>-&gt;</operator><name>reconnect_attempt</name></name><operator>++</operator> <operator>&lt;</operator> <name><name>ws</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>reconnect_attempts_num</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_ws_connect</name><argument_list>(<argument><expr><name>ws</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>reconnect_attempt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>_on_poller_adapter_dispose</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>pa</name></name></expr></argument>, <argument><expr><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_ws_reconnect_cancel</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_ws_client</name></name> <modifier>*</modifier></type><name>ws</name> <init>= <expr><name>d</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>_ws_dispose</name><argument_list>(<argument><expr><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_on_poller_adapter_dispose</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller_adapter</name></name> <modifier>*</modifier></type><name>pa</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_ws_client</name></name> <modifier>*</modifier></type><name>ws</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>pa</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(  <expr><name><name>ws</name><operator>-&gt;</operator><name>close_cas</name></name>
     <operator>||</operator> <name><name>ws</name><operator>-&gt;</operator><name>wsl</name></name> <operator>==</operator> <literal type="number">0</literal>
     <operator>||</operator> <call><name>wslay_event_get_close_received</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>wsl</name></name></expr></argument>)</argument_list></call>
     <operator>||</operator> <call><name>wslay_event_get_close_sent</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>wsl</name></name></expr></argument>)</argument_list></call>
     <operator>||</operator> <name><name>ws</name><operator>-&gt;</operator><name>reconnect_attempt</name></name> <operator>&gt;=</operator> <name><name>ws</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>reconnect_attempts_num</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_ws_dispose</name><argument_list>(<argument><expr><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// Try reconnect</comment>
    <if_stmt><if>if <condition>(<expr><macro><name>iwn_schedule</name><argument_list>(<argument>&amp;(struct iwn_scheduler_spec) {
      .user_data = ws</argument>,
      <argument>.poller = ws-&gt;spec.poller</argument>,
      <argument>.timeout_ms = (uint32_t) ws-&gt;spec.reconnect_attempt_pause_sec * <literal type="number">1000</literal></argument>,
      <argument>.on_cancel = _ws_reconnect_cancel</argument>,
      <argument>.task_fn = _ws_reconnect
    }</argument>)</argument_list></macro></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_ws_dispose</name><argument_list>(<argument><expr><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_client</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>wslay_opcode</name></name></type> <name>opc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ws</name> <operator>||</operator> <operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>buf_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><macro><name>wslay_event_queue_msg</name><argument_list>(<argument>ws-&gt;wsl</argument>, <argument>&amp;(struct wslay_event_msg) {
    .opcode = opc</argument>,
    <argument>.msg = (void*) buf</argument>,
    <argument>.msg_length = buf_len
  }</argument>)</argument_list></macro></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ws</name><operator>-&gt;</operator><name>pa</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal> <operator>==</operator> <call><name><name>ws</name><operator>-&gt;</operator><name>pa</name><operator>-&gt;</operator><name>arm</name></name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>pa</name></name></expr></argument>, <argument><expr><name>IWN_POLLOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>write_fd_ctx</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>      <name>buf_len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>enum</name> <name>wslay_opcode</name></name></type> <name>opc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_write_fd_probe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>slot_user_data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fn_user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_poller_adapter</name></name> <modifier>*</modifier></type><name>pa</name> <init>= <expr><name>slot_user_data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_ws_client</name></name> <modifier>*</modifier></type><name>ws</name> <init>= <expr><name><name>pa</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt> <comment type="line">// It is a struct iwn_poller_adapter-&gt;user_data actually</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>write_fd_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>fn_user_data</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ret</name></name> <operator>=</operator> <call><name>_write</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf_len</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>opc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_write_fd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>wslay_opcode</name></name></type> <name>opc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>write_fd_ctx</name></name></type> <name>ctx</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>buf</name>     <operator>=</operator> <name>buf</name></expr>,
    <expr><operator>.</operator><name>buf_len</name> <operator>=</operator> <name>buf_len</name></expr>,
    <expr><operator>.</operator><name>opc</name>     <operator>=</operator> <name>opc</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>iwn_poller_probe</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>_write_fd_probe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>ctx</name><operator>.</operator><name>ret</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_ws_client_write_text</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_client</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_write</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>WSLAY_TEXT_FRAME</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_ws_client_write_text_fd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_write_fd</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>WSLAY_TEXT_FRAME</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_ws_client_write_binary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_client</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_write</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>WSLAY_BINARY_FRAME</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_ws_client_write_binary_fd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_write_fd</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>WSLAY_BINARY_FRAME</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_ws_client_ping</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_client</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_write</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>WSLAY_PING</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_ws_client_ping_fd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_write_fd</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>WSLAY_PING</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_ws_client_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_ws_client_spec</name></name> <modifier>*</modifier></type><name>spec</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iwn_ws_client</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>out_ws</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_initialized</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCR</name><argument_list>(<argument><expr><call><name>iwlog_register_ecodefn</name><argument_list>(<argument><expr><name>_ecodefn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>out_ws</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>out_ws</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>spec</name> <operator>||</operator> <operator>!</operator><name><name>spec</name><operator>-&gt;</operator><name>url</name></name> <operator>||</operator> <operator>!</operator><name><name>spec</name><operator>-&gt;</operator><name>poller</name></name> <operator>||</operator> <operator>!</operator><name><name>spec</name><operator>-&gt;</operator><name>on_message</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_ws_client</name></name> <modifier>*</modifier></type><name>ws</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ws</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ws</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>spec</name></name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>spec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>poller</name></name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>poller</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>user_data</name></name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>user_data</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>ws</name></name> <operator>=</operator> <name>ws</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ws</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>reconnect_attempt_pause_sec</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>reconnect_attempt_pause_sec</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>pthread_mutexattr_t</name></type> <name>attr</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_mutexattr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutexattr_settype</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>PTHREAD_MUTEX_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutexattr_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>RCB</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name><name>ws</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCB</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name><name>ws</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCB</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name><name>ws</name><operator>-&gt;</operator><name>urlbuf</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>spec</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_url</name></name></type> <name>u</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>iwn_url_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><name><name>ws</name><operator>-&gt;</operator><name>urlbuf</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"Failed to parse url: %s"</literal></expr></argument>, <argument><expr><name><name>spec</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_INVALID_VALUE</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>host</name></name> <operator>=</operator> <name><name>u</name><operator>.</operator><name>host</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name><name>u</name><operator>.</operator><name>path</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name><name>u</name><operator>.</operator><name>port</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>query</name></name> <operator>=</operator> <name><name>u</name><operator>.</operator><name>query</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ws</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCB</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name><name>ws</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>RCB</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name><name>ws</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>u</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>path</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>u</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>u</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>u</name><operator>.</operator><name>scheme</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"wss"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>secure</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ws</name><operator>-&gt;</operator><name>port</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <ternary><condition><expr><name><name>ws</name><operator>-&gt;</operator><name>secure</name></name></expr> ?</condition><then> <expr><literal type="number">443</literal></expr> </then><else>: <expr><literal type="number">80</literal></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_ws_connect</name><argument_list>(<argument><expr><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_ws_destroy</name><argument_list>(<argument><expr><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>out_ws</name> <operator>=</operator> <name>ws</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_close_fd_probe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>slot_user_data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fn_user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_poller_adapter</name></name> <modifier>*</modifier></type><name>pa</name> <init>= <expr><name>slot_user_data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_ws_client</name></name> <modifier>*</modifier></type><name>ws</name> <init>= <expr><name><name>pa</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt> <comment type="line">// It is a struct iwn_poller_adapter-&gt;user_data actually</comment>
  <expr_stmt><expr><call><name>iwn_ws_client_close</name><argument_list>(<argument><expr><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwn_ws_client_close_by_fd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>iwn_poller_probe</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>_close_fd_probe</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwn_ws_client_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_client</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>close_cas</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwn_poller_remove</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>poller</name></name></expr></argument>, <argument><expr><name><name>ws</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_send_close_fd_probe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>slot_user_data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fn_user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_poller_adapter</name></name> <modifier>*</modifier></type><name>pa</name> <init>= <expr><name>slot_user_data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_ws_client</name></name> <modifier>*</modifier></type><name>ws</name> <init>= <expr><name><name>pa</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt> <comment type="line">// It is a struct iwn_poller_adapter-&gt;user_data actually</comment>
  <expr_stmt><expr><call><name>iwn_ws_client_send_close</name><argument_list>(<argument><expr><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwn_ws_client_send_close_by_fd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>iwn_poller_probe</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>_send_close_fd_probe</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_ws_client_send_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_client</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ws</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>wslay_event_queue_close</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>wsl</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>iwn_ws_client_fd_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_client</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><ternary><condition><expr><name>ws</name></expr> ?</condition><then> <expr><name><name>ws</name><operator>-&gt;</operator><name>fd</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_ecodefn</name><parameter_list>(<parameter><decl><type><name>locale_t</name></type> <name>locale</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ecode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ecode</name> <operator>&lt;=</operator> <name>_WS_ERROR_START</name> <operator>||</operator> <name>ecode</name> <operator>&gt;=</operator> <name>_WS_ERROR_END</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <switch>switch <condition>(<expr><name>ecode</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>WS_ERROR_INVALID_URL</name></expr>:</case>
      <return>return <expr><literal type="string">"Websocket invalid URL (WS_ERROR_INVALID_URL)"</literal></expr>;</return>
    <case>case <expr><name>WS_ERROR_PEER_CONNECT</name></expr>:</case>
      <return>return <expr><literal type="string">"Websocket peer connection failed (WS_ERROR_PEER_CONNECT)"</literal></expr>;</return>
    <case>case <expr><name>WS_ERROR_HANDSHAKE</name></expr>:</case>
      <return>return <expr><literal type="string">"Websocket handshake error (WS_ERROR_HANDSHAKE)"</literal></expr>;</return>
    <case>case <expr><name>WS_ERROR_HANDSHAKE_CLIENT_KEY</name></expr>:</case>
      <return>return <expr><literal type="string">"Websocket handshake client key validation error (WS_ERROR_HANDSHAKE_CLIENT_KEY)"</literal></expr>;</return>
    <case>case <expr><name>WS_ERROR_CHANNEL_CLOSED</name></expr>:</case>
      <return>return <expr><literal type="string">"Websocket communication channel is closed (WS_ERROR_CHANNEL_CLOSED)"</literal></expr>;</return>
    <case>case <expr><name>WS_ERROR</name></expr>:</case>
      <return>return <expr><literal type="string">"Websocket generic error (WS_ERROR)"</literal></expr>;</return>
  </block_content>}</block></switch>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
