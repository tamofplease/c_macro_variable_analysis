<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/wslay/wslay_frame.c"><comment type="block">/*
 * Wslay - The WebSocket Library
 *
 * Copyright (c) 2011, 2012 Tatsuhiro Tsujikawa
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wslay_frame.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wslay_net.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wslay_min</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((A) &lt; (B)) ? (A) : (B))</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>wslay_frame_context_init</name><parameter_list>(
  <parameter><decl><type><name>wslay_frame_context_ptr</name>            <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>wslay_frame_callbacks</name></name> <modifier>*</modifier></type><name>callbacks</name></decl></parameter>,
  <parameter><decl><type><name>void</name>                               <modifier>*</modifier></type><name>user_data</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>ctx</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>wslay_frame_context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>wslay_frame_context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>istate</name></name> <operator>=</operator> <name>RECV_HEADER1</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>ireqread</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>ostate</name></name> <operator>=</operator> <name>PREP_HEADER</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>user_data</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>ibufmark</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>ibuflimit</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>ibuf</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>callbacks</name></name> <operator>=</operator> <operator>*</operator><name>callbacks</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>wslay_frame_context_free</name><parameter_list>(<parameter><decl><type><name>wslay_frame_context_ptr</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>wslay_frame_send</name><parameter_list>(
  <parameter><decl><type><name>wslay_frame_context_ptr</name></type>  <name>ctx</name></decl></parameter>,
  <parameter><decl><type><name><name>struct</name> <name>wslay_frame_iocb</name></name> <modifier>*</modifier></type><name>iocb</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ostate</name></name> <operator>==</operator> <name>PREP_HEADER</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><name>WSLAY_FRAME_HDR_SIZ</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>wp</name> <operator>|=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><name><name>iocb</name><operator>-&gt;</operator><name>fin</name></name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x80u</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>wp</name> <operator>|=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><name><name>iocb</name><operator>-&gt;</operator><name>rsv</name></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x70u</literal><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Suppress stubborn gcc-10 warning */</comment>
    <expr_stmt><expr><operator>*</operator><name>wp</name> <operator>|=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><name><name>iocb</name><operator>-&gt;</operator><name>opcode</name></name> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xfu</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name>wp</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>wp</name> <operator>|=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><name><name>iocb</name><operator>-&gt;</operator><name>mask</name></name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x80u</literal><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>wslay_is_ctrl_frame</name><argument_list>(<argument><expr><name><name>iocb</name><operator>-&gt;</operator><name>opcode</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>iocb</name><operator>-&gt;</operator><name>payload_length</name></name> <operator>&gt;</operator> <literal type="number">125</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>WSLAY_ERR_INVALID_ARGUMENT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>iocb</name><operator>-&gt;</operator><name>payload_length</name></name> <operator>&lt;</operator> <literal type="number">126</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>wp</name> <operator>|=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <name><name>iocb</name><operator>-&gt;</operator><name>payload_length</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name>wp</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>iocb</name><operator>-&gt;</operator><name>payload_length</name></name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>uint16_t</name></type> <name>len</name> <init>= <expr><call><name>htons</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <name><name>iocb</name><operator>-&gt;</operator><name>payload_length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><operator>*</operator><name>wp</name> <operator>|=</operator> <literal type="number">126</literal></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name>wp</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>wp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>iocb</name><operator>-&gt;</operator><name>payload_length</name></name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1ull</literal> <operator>&lt;&lt;</operator> <literal type="number">63</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>uint64_t</name></type> <name>len</name> <init>= <expr><call><name>hton64</name><argument_list>(<argument><expr><name><name>iocb</name><operator>-&gt;</operator><name>payload_length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><operator>*</operator><name>wp</name> <operator>|=</operator> <literal type="number">127</literal></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name>wp</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>wp</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="block">/* Too large payload length */</comment>
      <return>return <expr><name>WSLAY_ERR_INVALID_ARGUMENT</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>iocb</name><operator>-&gt;</operator><name>mask</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>ctx</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>genmask_callback</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>omaskkey</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call> <operator>!=</operator>
          <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>WSLAY_ERR_INVALID_CALLBACK</name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>omask</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>omaskkey</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>wp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hdrtow</name></name> <operator>=</operator> <name>wp</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hdrtow</name></name> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>iocb</name><operator>-&gt;</operator><name>data</name></name> <operator>-=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>hdrtow</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iocb</name><operator>-&gt;</operator><name>data_length</name></name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>hdrtow</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>iocb</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hdrtow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>opayloadlen</name></name> <operator>=</operator> <name><name>iocb</name><operator>-&gt;</operator><name>data_length</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>opayloadoff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>opayloadmaskoff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ostate</name></name> <operator>=</operator> <name>SEND_PAYLOAD</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>hdrtow</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>iocb</name><operator>-&gt;</operator><name>data</name></name> <operator>-=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>hdrtow</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iocb</name><operator>-&gt;</operator><name>data_length</name></name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>hdrtow</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ostate</name></name> <operator>==</operator> <name>SEND_PAYLOAD</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>totallen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>iocb</name><operator>-&gt;</operator><name>data_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>omask</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>temp</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>datamark</name> <init>= <expr><name><name>iocb</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>,
                      <decl><type ref="prev"><modifier>*</modifier></type><name>datalimit</name> <init>= <expr><name><name>iocb</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>iocb</name><operator>-&gt;</operator><name>data_length</name></name></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><name>datamark</name> <operator>&lt;</operator> <name>datalimit</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>datalen</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>datalimit</name> <operator>-</operator> <name>datamark</name><operator>)</operator></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>writelimit</name>
            <init>= <expr><name>datamark</name> <operator>+</operator> <call><name>wslay_min</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>datalen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>size_t</name></type> <name>writelen</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>writelimit</name> <operator>-</operator> <name>datamark</name><operator>)</operator></expr></init></decl>;</decl_stmt>

          <comment type="block">/* header part */</comment>
          <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>writelen</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>hdrtow</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>datamark</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
          </block_content>}</block></for>

          <comment type="block">/* payload */</comment>
          <for>for <control>(<init><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>writelen</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><operator>++</operator><name>l</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>datamark</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>omaskkey</name><index>[<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>opayloadmaskoff</name></name> <operator>+</operator> <name>l</name><operator>)</operator> <operator>%</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
          </block_content>}</block></for>

          <decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name> <init>= <expr><call><name><name>ctx</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>send_callback</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>writelen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>datamark</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>opayloadoff</name></name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name>r</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>totallen</name> <operator>+=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <name>r</name></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>opayloadmaskoff</name></name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>hdrtow</name></name></expr>)</condition> <block>{<block_content>
              <decl_stmt><decl><type><name>uint64_t</name></type> <name>hp</name> <init>= <expr><call><name>wslay_min</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hdrtow</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>opayloadmaskoff</name></name> <operator>-=</operator> <name>hp</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hdrtow</name></name> <operator>-=</operator> <name>hp</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>iocb</name><operator>-&gt;</operator><name>data</name></name> <operator>+=</operator> <name>hp</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>iocb</name><operator>-&gt;</operator><name>data_length</name></name> <operator>-=</operator> <name>hp</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>totallen</name> <operator>-=</operator> <name>hp</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>totallen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
              <break>break;</break>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <return>return <expr><name>WSLAY_ERR_WANT_WRITE</name></expr>;</return>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name> <init>= <expr><call><name><name>ctx</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>send_callback</name></name><argument_list>(<argument><expr><name><name>iocb</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>iocb</name><operator>-&gt;</operator><name>data_length</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>opayloadoff</name></name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name>r</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>totallen</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <name>r</name></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>hdrtow</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>uint64_t</name></type> <name>hp</name> <init>= <expr><call><name>wslay_min</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hdrtow</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hdrtow</name></name> <operator>-=</operator> <name>hp</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>iocb</name><operator>-&gt;</operator><name>data</name></name> <operator>+=</operator> <name>hp</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>iocb</name><operator>-&gt;</operator><name>data_length</name></name> <operator>-=</operator> <name>hp</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>totallen</name> <operator>-=</operator> <name>hp</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <return>return <expr><name>WSLAY_ERR_WANT_WRITE</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>hdrtow</name></name></expr>)</condition> <block>{<block_content>
      <comment type="block">/* Only part of header was sent */</comment>
      <return>return <expr><name>WSLAY_ERR_WANT_WRITE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>opayloadoff</name></name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>opayloadlen</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ostate</name></name> <operator>=</operator> <name>PREP_HEADER</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>totallen</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>WSLAY_ERR_INVALID_ARGUMENT</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wslay_shift_ibuf</name><parameter_list>(<parameter><decl><type><name>wslay_frame_context_ptr</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>len</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>ibuflimit</name></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ibufmark</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ibuf</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ibufmark</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ibuflimit</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ibuf</name></name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ibufmark</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ibuf</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>wslay_recv</name><parameter_list>(<parameter><decl><type><name>wslay_frame_context_ptr</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ibufmark</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ibuf</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wslay_shift_ibuf</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>recv_callback</name></name><argument_list>(
    <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ibuflimit</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>ibuf</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ibuf</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ibuflimit</name></name><operator>)</operator></expr></argument>,
    <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ibuflimit</name></name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <name>WSLAY_ERR_WANT_READ</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WSLAY_AVAIL_IBUF</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((size_t) (ctx-&gt;ibuflimit - ctx-&gt;ibufmark))</cpp:value></cpp:define>

<function><type><name>ssize_t</name></type> <name>wslay_frame_recv</name><parameter_list>(
  <parameter><decl><type><name>wslay_frame_context_ptr</name></type>  <name>ctx</name></decl></parameter>,
  <parameter><decl><type><name><name>struct</name> <name>wslay_frame_iocb</name></name> <modifier>*</modifier></type><name>iocb</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>istate</name></name> <operator>==</operator> <name>RECV_HEADER1</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>fin</name></decl>, <decl><type ref="prev"/><name>opcode</name></decl>, <decl><type ref="prev"/><name>rsv</name></decl>, <decl><type ref="prev"/><name>payloadlen</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>WSLAY_AVAIL_IBUF</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ireqread</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>wslay_recv</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>r</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>WSLAY_AVAIL_IBUF</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ireqread</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>WSLAY_ERR_WANT_READ</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>fin</name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>ibufmark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>rsv</name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>ibufmark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ibufmark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xfu</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>iom</name><operator>.</operator><name>opcode</name></name> <operator>=</operator> <name>opcode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>iom</name><operator>.</operator><name>fin</name></name> <operator>=</operator> <name>fin</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>iom</name><operator>.</operator><name>rsv</name></name> <operator>=</operator> <name>rsv</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name><name>ctx</name><operator>-&gt;</operator><name>ibufmark</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>imask</name></name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>ibufmark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>payloadlen</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ibufmark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7fu</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name><name>ctx</name><operator>-&gt;</operator><name>ibufmark</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>wslay_is_ctrl_frame</name><argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>payloadlen</name> <operator>&gt;</operator> <literal type="number">125</literal> <operator>||</operator> <operator>!</operator><name>fin</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>WSLAY_ERR_PROTO</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>payloadlen</name> <operator>==</operator> <literal type="number">126</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>istate</name></name> <operator>=</operator> <name>RECV_EXT_PAYLOADLEN</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ireqread</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>payloadlen</name> <operator>==</operator> <literal type="number">127</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>istate</name></name> <operator>=</operator> <name>RECV_EXT_PAYLOADLEN</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ireqread</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ipayloadlen</name></name> <operator>=</operator> <name>payloadlen</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ipayloadoff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>imask</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>istate</name></name> <operator>=</operator> <name>RECV_MASKKEY</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ireqread</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>istate</name></name> <operator>=</operator> <name>RECV_PAYLOAD</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>istate</name></name> <operator>==</operator> <name>RECV_EXT_PAYLOADLEN</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>WSLAY_AVAIL_IBUF</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ireqread</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>wslay_recv</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>r</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>WSLAY_AVAIL_IBUF</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ireqread</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>WSLAY_ERR_WANT_READ</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ipayloadlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ipayloadoff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ipayloadlen</name></name> <operator>+</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ireqread</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ibufmark</name></name></expr></argument>,
           <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ireqread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ipayloadlen</name></name> <operator>=</operator> <call><name>ntoh64</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ipayloadlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ibufmark</name></name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ireqread</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ireqread</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ipayloadlen</name></name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ipayloadlen</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1ull</literal> <operator>&lt;&lt;</operator> <literal type="number">63</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>WSLAY_ERR_PROTO</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ipayloadlen</name></name> <operator>&lt;</operator> <literal type="number">126</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>WSLAY_ERR_PROTO</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>imask</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>istate</name></name> <operator>=</operator> <name>RECV_MASKKEY</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ireqread</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>istate</name></name> <operator>=</operator> <name>RECV_PAYLOAD</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>istate</name></name> <operator>==</operator> <name>RECV_MASKKEY</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>WSLAY_AVAIL_IBUF</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ireqread</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>wslay_recv</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>r</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>WSLAY_AVAIL_IBUF</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ireqread</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>WSLAY_ERR_WANT_READ</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>imaskkey</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ibufmark</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ibufmark</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>istate</name></name> <operator>=</operator> <name>RECV_PAYLOAD</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>istate</name></name> <operator>==</operator> <name>RECV_PAYLOAD</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>readlimit</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>readmark</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>rempayloadlen</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>ipayloadlen</name></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ipayloadoff</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>WSLAY_AVAIL_IBUF</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>rempayloadlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>wslay_recv</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>r</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>readmark</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ibufmark</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>readlimit</name> <operator>=</operator> <ternary><condition><expr><call><name>WSLAY_AVAIL_IBUF</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>rempayloadlen</name></expr>
                ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>ibuflimit</name></name></expr>
                </then><else>: <expr><name><name>ctx</name><operator>-&gt;</operator><name>ibufmark</name></name> <operator>+</operator> <name>rempayloadlen</name></expr></else></ternary></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>imask</name></name></expr>)</condition> <block>{<block_content>
      <for>for <control>( <init>;</init> <condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>ibufmark</name></name> <operator>!=</operator> <name>readlimit</name></expr>;</condition> <incr><expr><operator>++</operator><name><name>ctx</name><operator>-&gt;</operator><name>ibufmark</name></name></expr><operator>,</operator> <expr><operator>++</operator><name><name>ctx</name><operator>-&gt;</operator><name>ipayloadoff</name></name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ibufmark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>imaskkey</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>ipayloadoff</name></name> <operator>%</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ibufmark</name></name> <operator>=</operator> <name>readlimit</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ipayloadoff</name></name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <operator>(</operator><name>readlimit</name> <operator>-</operator> <name>readmark</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>iocb</name><operator>-&gt;</operator><name>fin</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>iom</name><operator>.</operator><name>fin</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iocb</name><operator>-&gt;</operator><name>rsv</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>iom</name><operator>.</operator><name>rsv</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iocb</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>iom</name><operator>.</operator><name>opcode</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iocb</name><operator>-&gt;</operator><name>payload_length</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ipayloadlen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iocb</name><operator>-&gt;</operator><name>mask</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>imask</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iocb</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>readmark</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iocb</name><operator>-&gt;</operator><name>data_length</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>ibufmark</name></name> <operator>-</operator> <name>readmark</name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ipayloadlen</name></name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ipayloadoff</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>istate</name></name> <operator>=</operator> <name>RECV_HEADER1</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ireqread</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>ssize_t</name><operator>)</operator> <name><name>iocb</name><operator>-&gt;</operator><name>data_length</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>WSLAY_ERR_INVALID_ARGUMENT</name></expr>;</return>
</block_content>}</block></function>
</unit>
