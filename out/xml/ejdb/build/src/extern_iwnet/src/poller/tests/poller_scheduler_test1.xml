<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/poller/tests/poller_scheduler_test1.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_tests.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_scheduler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwtp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>st</name></decl>, <decl><type ref="prev"/><name>et</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>poller</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_on_timeout</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>iwn_ts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>et</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name>et</name> <operator>-</operator> <name>st</name> <operator>&lt;</operator> <literal type="number">200</literal> <operator>&amp;&amp;</operator> <name>et</name> <operator>-</operator> <name>st</name> <operator>&gt;=</operator> <literal type="number">150</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwn_poller_shutdown_request</name><argument_list>(<argument><expr><name>poller</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>iwlog_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_poller_create</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>poller</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_ts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_schedule(&amp;(struct iwn_scheduler_spec) {
    .task_fn = _on_timeout,
    .poller = poller,
    .timeout_ms = <literal type="number">155</literal>,
  })</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <expr_stmt><expr><call><name>iwn_poller_poll</name><argument_list>(<argument><expr><name>poller</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>iwn_poller_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>poller</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name>et</name> <operator>&gt;=</operator> <name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><name>iwn_assertions_failed</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
