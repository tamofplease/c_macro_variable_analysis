<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/poller/iwn_poller.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_poller.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwutils.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwlog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwtp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwhmap.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IWN_KQUEUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/event.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IWN_EPOLL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/epoll.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/timerfd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/eventfd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLOT_REMOVE_PENDING</name></cpp:macro> <cpp:value>0x01U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLOT_REMOVED</name></cpp:macro>        <cpp:value>0x02U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLOT_PROCESSING</name></cpp:macro>     <cpp:value>0x04U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLOT_UNSUBSCRIBED</name></cpp:macro>   <cpp:value>0x08U</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF_SET_LOCKED</name></cpp:macro>    <cpp:value>0x01U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF_LOCKED</name></cpp:macro>        <cpp:value>0x02U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF_DESTROY_DEFER</name></cpp:macro> <cpp:value>0x04U</cpp:value></cpp:define>

<struct>struct <name>iwn_poller</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>IWN_EPOLL</name></cpp:ifdef>
  <decl_stmt><decl><type><name>int</name></type> <name>event_fd</name></decl>;</decl_stmt>        <comment type="line" format="doxygen">///&lt; fd to signal internal changes on poller.</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>timer_fd</name></decl>;</decl_stmt>        <comment type="line" format="doxygen">///&lt; fd to set up timeouts</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>IWN_KQUEUE</name></cpp:ifdef>
  <decl_stmt><decl><type><name>int</name></type> <name>identity_seq</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name>int</name></type> <name>fds_count</name></decl>;</decl_stmt>              <comment type="line" format="doxygen">///&lt; Numbver of active file descriptors</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>max_poll_events</name></decl>;</decl_stmt>        <comment type="line" format="doxygen">///&lt; Max wait epoll_wait fd events at once</comment>

  <decl_stmt><decl><type><name>atomic_long</name></type> <name>timeout_next</name></decl>;</decl_stmt>      <comment type="line" format="doxygen">///&lt; Next timeout check</comment>
  <decl_stmt><decl><type><name>atomic_long</name></type> <name>timeout_checktime</name></decl>;</decl_stmt> <comment type="line" format="doxygen">///&lt; Last time of timeout check</comment>

  <decl_stmt><decl><type><name>IWTP</name></type>    <name>tp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWHMAP</name> <modifier>*</modifier></type><name>slots</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>thread_name</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mtx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt> <comment type="line" format="doxygen">///&lt; Poller mode flags. See iwn_poller_flags_set()</comment>

  <decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>stop</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>housekeeping</name></decl>;</decl_stmt>          <comment type="line" format="doxygen">///&lt; CAS barrier for timeout cleaner</comment>
}</block>;</struct>

<struct>struct <name>poller_slot</name> <block>{
  <decl_stmt><decl><type><name>int</name></type>      <name>fd</name></decl>;</decl_stmt>                                                   <comment type="line" format="doxygen">///&lt; File descriptor beeng polled</comment>
  <decl_stmt><decl><type><name>void</name>    <modifier>*</modifier></type><name>user_data</name></decl>;</decl_stmt>                                            <comment type="line" format="doxygen">///&lt; Arbitrary user data associated with poller_task</comment>
  <function_decl><type><name>int64_t</name></type>  (<modifier>*</modifier><name>on_ready</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_poller_task</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl> <comment type="line" format="doxygen">///&lt; On fd event ready</comment>
  <function_decl><type><name>void</name></type>     (<modifier>*</modifier><name>on_dispose</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_poller_task</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>         <comment type="line" format="doxygen">///&lt; On destroy handler</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>events</name></decl>;</decl_stmt>                                               <comment type="line" format="doxygen">///&lt; Default epoll monitoring events</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>events_mod</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>     <name>timeout</name></decl>;</decl_stmt>                                      <comment type="line" format="doxygen">///&lt; Optional slot timeout</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>poller</name></decl>;</decl_stmt>                             <comment type="line" format="doxygen">///&lt; Poller</comment>

  <decl_stmt><decl><type><name>int</name></type>      <name>refs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>events_processing</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>events_update</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>events_armed</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>atomic_long</name></type> <name>timeout_limit</name></decl>;</decl_stmt>           <comment type="line" format="doxygen">///&lt; Limit in seconds for use with time function.</comment>

  <decl_stmt><decl><type><name><name>struct</name> <name>poller_slot</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>destroy_cas</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>abort</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>IW_INLINE</name> <name>time_t</name></type> <name>_time_sec</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>t</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC_COARSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC_FAST</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name><name>t</name><operator>.</operator><name>tv_sec</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_slot_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>poller_slot</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>destroy_cas</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="line">// Avoid recursion</comment>
    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>on_dispose</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>on_dispose</name></name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>shutdown</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SHUT_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>IWN_KQUEUE</name></cpp:ifdef>

<function><type><name>IW_INLINE</name> <name>unsigned</name> <name>short</name></type> <name>_events_to_kflags</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>events</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>action</name> <init>= <expr><name>EV_ENABLE</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>IWN_POLLET</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>action</name> <operator>|=</operator> <name>EV_CLEAR</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>IWN_POLLONESHOT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>action</name> <operator>|=</operator> <name>EV_ONESHOT</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>action</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>_rw_fd_unsubscribe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>poller_slot</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SLOT_UNSUBSCRIBED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SLOT_UNSUBSCRIBED</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>kevent</name></name></type> <name><name>ev</name><index>[]</index></name> <init>= <expr><block>{
      <expr><block>{ <expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr>, <expr><name>EVFILT_READ</name></expr>,  <expr><name>EV_DELETE</name></expr> }</block></expr>,
      <expr><block>{ <expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr>, <expr><name>EVFILT_WRITE</name></expr>, <expr><name>EV_DELETE</name></expr> }</block></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>kevent</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>poller</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ev</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>_service_fds_unsubcribe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>kevent</name></name></type> <name>ev</name> <init>= <expr><block>{
      <expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr>, <expr><name>EVFILT_TIMER</name></expr>, <expr><name>EV_DELETE</name></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>kevent</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>_rw_fd_unsubscribe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>poller_slot</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SLOT_UNSUBSCRIBED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SLOT_UNSUBSCRIBED</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>epoll_ctl</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>poller</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>EPOLL_CTL_DEL</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_slot_unref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>poller_slot</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>poller</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>REF_LOCKED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SLOT_REMOVED</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>--</operator><name><name>s</name><operator>-&gt;</operator><name>refs</name></name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>destroy</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>refs</name></name> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>destroy</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SLOT_REMOVED</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_rw_fd_unsubscribe</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>iwhmap_remove_u32</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>slots</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>--</operator><name><name>p</name><operator>-&gt;</operator><name>fds_count</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IWN_EPOLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fds_count</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IWN_KQUEUE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
      <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fds_count</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>iwn_poller_shutdown_request</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>REF_SET_LOCKED</name> <operator>|</operator> <name>REF_LOCKED</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>destroy</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>REF_DESTROY_DEFER</name> <operator>|</operator> <name>REF_SET_LOCKED</name> <operator>|</operator> <name>REF_LOCKED</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_slot_destroy</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>destroy</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_slot_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>poller_slot</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>poller</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>s</name><operator>-&gt;</operator><name>refs</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>poller_slot</name></name> <modifier>*</modifier></type><name>os</name> <init>= <expr><call><name>iwhmap_get_u32</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>slots</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>os</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"FD: %d is managed already, poller: %d"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>IW_ERROR_INVALID_STATE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwhmap_put_u32</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>slots</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>++</operator><name><name>p</name><operator>-&gt;</operator><name>fds_count</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>poller_slot</name></name><modifier>*</modifier></type> <name>_slot_ref_id</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>poller_slot</name></name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>REF_LOCKED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>iwhmap_get_u32</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>slots</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SLOT_REMOVED</name> <operator>|</operator> <name>SLOT_REMOVE_PENDING</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>++</operator><name><name>s</name><operator>-&gt;</operator><name>refs</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>REF_SET_LOCKED</name> <operator>|</operator> <name>REF_LOCKED</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name><name>struct</name> <name>poller_slot</name></name><modifier>*</modifier></type> <name>_slot_peek_leave_locked</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>iwhmap_get_u32</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>slots</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_slot_remove_unref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>poller_slot</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>_slot_peek_leave_locked</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SLOT_REMOVE_PENDING</name> <operator>|</operator> <name>SLOT_REMOVED</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SLOT_REMOVE_PENDING</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>destroy</name> <init>= <expr><call><name>_slot_unref</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>REF_LOCKED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>destroy</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>destroy</name> <operator>=</operator> <call><name>_slot_unref</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>REF_LOCKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>destroy</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_slot_destroy</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwn_poller_remove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>poller_slot</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>_slot_peek_leave_locked</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SLOT_REMOVE_PENDING</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SLOT_REMOVE_PENDING</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_rw_fd_unsubscribe</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>destroy</name> <init>= <expr><call><name>_slot_unref</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>REF_LOCKED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>destroy</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_slot_destroy</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_poller_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>fds</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWHMAP_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>sz</name> <init>= <expr><call><name>iwhmap_count</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>slots</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>fds</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>fds</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fds</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fds</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>iwhmap_iter_init</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>slots</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>iwhmap_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator> <name><name>iter</name><operator>.</operator><name>key</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwn_poller_remove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>fds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>fds</name> <operator>!=</operator> <name>buf</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwn_poller_shutdown_request</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwtp_shutdown</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>tp</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_poller_cleanup</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IWN_EPOLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>timer_fd</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>timer_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>event_fd</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>event_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IWN_KQUEUE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <expr_stmt><expr><call><name>_service_fds_unsubcribe</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>iwhmap_destroy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>slots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_timer_ready_impl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>time_t</name></type> <name>ctime</name> <init>= <expr><call><name>_time_sec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>time_t</name></type> <name>timeout_next</name> <init>= <expr><name>ctime</name> <operator>+</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>ctime</name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>timeout_checktime</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>IWHMAP_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>poller_slot</name></name> <modifier>*</modifier></type><name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>timeout_checktime</name></name> <operator>=</operator> <name>ctime</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwhmap_iter_init</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>slots</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><call><name>iwhmap_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>poller_slot</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator>struct <name>poller_slot</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>val</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SLOT_REMOVED</name> <operator>|</operator> <name>SLOT_REMOVE_PENDING</name> <operator>|</operator> <name>SLOT_PROCESSING</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>timeout_limit</name></name> <operator>&lt;=</operator> <name>ctime</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>++</operator><name><name>s</name><operator>-&gt;</operator><name>refs</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>timeout_limit</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>h</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>timeout_limit</name></name> <operator>&lt;</operator> <name>timeout_next</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>timeout_next</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>timeout_limit</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>timeout_next</name></name> <operator>=</operator> <name>timeout_next</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>poller_slot</name></name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>_slot_remove_unref</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>h</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IWN_EPOLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>itimerspec</name></name></type> <name>next</name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><name>timeout_next</name> <operator>-</operator> <name>ctime</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>timerfd_settime</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>timer_fd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IWN_KQUEUE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>kevent</name></name></type> <name>ev</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>ident</name>  <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr>,
      <expr><operator>.</operator><name>filter</name> <operator>=</operator> <name>EVFILT_TIMER</name></expr>,
      <expr><operator>.</operator><name>flags</name>  <operator>=</operator> <name>EV_ADD</name> <operator>|</operator> <name>EV_ENABLE</name> <operator>|</operator> <name>EV_CLEAR</name> <operator>|</operator> <name>EV_ONESHOT</name></expr>,
      <expr><operator>.</operator><name>fflags</name> <operator>=</operator> <name>NOTE_SECONDS</name></expr>,
      <expr><operator>.</operator><name>data</name>   <operator>=</operator> <name>timeout_next</name> <operator>-</operator> <name>ctime</name></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>kevent</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>int64_t</name></type> <name>_timer_ready</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_poller_task</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>events</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>poller</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>housekeeping</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_timer_ready_impl</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>housekeeping</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>_timer_ready_fd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_poller_task</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>events</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>buf</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
  <return>return <expr><call><name>_timer_ready</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>events</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>_timer_check</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_poller_task</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>time_limit</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>long</name></type> <name>timeout_next</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>poller</name><operator>-&gt;</operator><name>timeout_next</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>time_limit</name> <operator>&lt;</operator> <name>timeout_next</name> <operator>||</operator> <name>timeout_next</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_timer_ready</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IWN_KQUEUE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>iwrc</name></type> <name>iwn_poller_arm_events</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>events</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>poller_slot</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>_slot_peek_leave_locked</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>abort</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SLOT_PROCESSING</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>events_armed</name></name> <operator>|=</operator> <name>events</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>events</name> <operator>|=</operator> <name><name>s</name><operator>-&gt;</operator><name>events_mod</name></name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>ka</name> <init>= <expr><call><name>_events_to_kflags</name><argument_list>(<argument><expr><name>events</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>struct</name> <name>kevent</name></name></type> <name><name>ev</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>IWN_POLLIN</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ev</name><index>[<expr><name>rci</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>kevent</name><operator>)</operator> <block>{
          <expr><name>fd</name></expr>, <expr><name>EVFILT_READ</name></expr>, <expr><name>EV_ADD</name> <operator>|</operator> <name>ka</name></expr>
        }</block></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>IWN_POLLOUT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ev</name><index>[<expr><name>rci</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>kevent</name><operator>)</operator> <block>{
          <expr><name>fd</name></expr>, <expr><name>EVFILT_WRITE</name></expr>, <expr><name>EV_ADD</name> <operator>|</operator> <name>ka</name> <operator>|</operator> <name>EV_DISPATCH</name></expr>
        }</block></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>rci</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rci</name> <operator>=</operator> <call><name>kevent</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IWN_EPOLL</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><name>iwrc</name></type> <name>iwn_poller_arm_events</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>events</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>epoll_event</name></name></type> <name>ev</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ev</name><operator>.</operator><name>events</name></name> <operator>=</operator> <name>events</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ev</name><operator>.</operator><name>data</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>poller_slot</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>_slot_peek_leave_locked</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>abort</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SLOT_PROCESSING</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>events_armed</name></name> <operator>|=</operator> <name><name>ev</name><operator>.</operator><name>events</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>ev</name><operator>.</operator><name>events</name></name> <operator>|=</operator> <name><name>s</name><operator>-&gt;</operator><name>events_mod</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>rci</name> <operator>=</operator> <call><name>epoll_ctl</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>EPOLL_CTL_MOD</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IWN_KQUEUE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_next_kevent_identity</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>poller_slot</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>poller</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>poller</name><operator>-&gt;</operator><name>identity_seq</name></name> <operator>==</operator> <name>INT_MIN</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>poller</name><operator>-&gt;</operator><name>identity_seq</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>poller</name><operator>-&gt;</operator><name>identity_seq</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>--</operator><name><name>s</name><operator>-&gt;</operator><name>poller</name><operator>-&gt;</operator><name>identity_seq</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>poller</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_poller_timeout_create_fd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>poller_slot</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>timeout_limit</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>timeout</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IWN_KQUEUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>_next_kevent_identity</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IWN_EPOLL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>timerfd_create</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><name>TFD_NONBLOCK</name> <operator>|</operator> <name>TFD_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_poller_timeout_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>poller_slot</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IWN_KQUEUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name><name>struct</name> <name>kevent</name></name></type> <name>ev</name> <init>= <expr><block>{
    <expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr>, <expr><name>EVFILT_TIMER</name></expr>, <expr><name>EV_ADD</name> <operator>|</operator> <name>EV_ONESHOT</name></expr>, <expr><name>NOTE_USECONDS</name></expr>, <expr><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>timeout</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>kevent</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>poller</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IWN_EPOLL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><name><name>struct</name> <name>epoll_event</name></name></type> <name>ev</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ev</name><operator>.</operator><name>events</name></name> <operator>=</operator> <name>EPOLLIN</name> <operator>|</operator> <name>EPOLLET</name> <operator>|</operator> <name>EPOLLONESHOT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ev</name><operator>.</operator><name>data</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>epoll_ctl</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>poller</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>EPOLL_CTL_ADD</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><macro><name>timerfd_settime</name><argument_list>(<argument>s-&gt;fd</argument>, <argument><literal type="number">0</literal></argument>, <argument>&amp;(struct itimerspec) {
    .it_value = {
      .tv_sec  = s-&gt;timeout / <literal type="number">1000</literal></argument>,
      <argument>.tv_nsec = (int64_t) (s-&gt;timeout % <literal type="number">1000</literal>) * <literal type="number">1000000</literal>
    }
  }</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_poller_add2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_poller_task</name></name> <modifier>*</modifier></type><name>task</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out_fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>task</name> <operator>||</operator> <operator>!</operator><name><name>task</name><operator>-&gt;</operator><name>poller</name></name> <operator>||</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name><name>task</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <name>IWN_POLLTIMEOUT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>task</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>task</name><operator>-&gt;</operator><name>poller</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>poller_slot</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>task</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <name>IWN_POLLTIMEOUT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_poller_timeout_create_fd</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_slot_ref</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>task</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <name>IWN_POLLTIMEOUT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IW_UNLIKELY</name><argument_list>(<argument><expr><name><name>task</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <name>IWN_POLLTIMEOUT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_poller_timeout_add</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IWN_KQUEUE</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>kevent</name></name></type> <name><name>ev</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>events</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>events</name></name> <operator>|</operator> <name><name>s</name><operator>-&gt;</operator><name>events_mod</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>ka</name> <init>= <expr><call><name>_events_to_kflags</name><argument_list>(<argument><expr><name>events</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>IWN_POLLIN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>ev</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>kevent</name><operator>)</operator> <block>{
        <expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr>, <expr><name>EVFILT_READ</name></expr>, <expr><name>EV_ADD</name> <operator>|</operator> <name>ka</name></expr>
      }</block></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>IWN_POLLOUT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>ev</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>kevent</name><operator>)</operator> <block>{
        <expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr>, <expr><name>EVFILT_WRITE</name></expr>, <expr><name>EV_ADD</name> <operator>|</operator> <name>ka</name> <operator>|</operator> <name>EV_DISPATCH</name></expr>
      }</block></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>kevent</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IWN_EPOLL</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <decl_stmt><decl><type><name><name>struct</name> <name>epoll_event</name></name></type> <name>ev</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ev</name><operator>.</operator><name>events</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>events</name></name> <operator>|</operator> <name><name>s</name><operator>-&gt;</operator><name>events_mod</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ev</name><operator>.</operator><name>data</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>epoll_ctl</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>EPOLL_CTL_ADD</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>timeout</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>timeout_limit</name></name> <operator>=</operator> <call><name>_time_sec</name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>timeout</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>_timer_check</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>timeout_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>timeout_limit</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>on_dispose</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwn_poller_remove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>out_fd</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>out_fd</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_poller_add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_poller_task</name></name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>iwn_poller_add2</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_poller_fd_is_managed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iwhmap_get_u32</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>slots</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_poller_fd_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>refs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>destroy</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>poller_slot</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>iwhmap_get_u32</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>slots</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>refs</name></name> <operator>+=</operator> <name>refs</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>destroy</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>refs</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>destroy</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SLOT_REMOVED</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>_rw_fd_unsubscribe</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>iwhmap_remove_u32</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>slots</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>--</operator><name><name>p</name><operator>-&gt;</operator><name>fds_count</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IWN_EPOLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fds_count</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IWN_KQUEUE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fds_count</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
          <expr_stmt><expr><call><name>iwn_poller_shutdown_request</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>destroy</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_slot_destroy</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<function><type><name>void</name></type> <name>iwn_poller_set_timeout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timeout_sec</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>poller_slot</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>_slot_peek_leave_locked</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>timeout</name></name> <operator>==</operator> <name>timeout_sec</name> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <name>IWN_POLLTIMEOUT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>timeout_sec</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name>timeout_sec</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>timeout_limit</name></name> <operator>=</operator> <call><name>_time_sec</name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>timeout</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>timeout_limit</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>timeout_sec</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_timer_check</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>timeout_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwn_poller_poke</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IWN_KQUEUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>kevent</name></name></type> <name><name>ev</name><index>[]</index></name> <init>= <expr><block>{
      <expr><block>{ <expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr>, <expr><name>EVFILT_USER</name></expr>, <expr><name>EV_ADD</name> <operator>|</operator> <name>EV_ONESHOT</name></expr> }</block></expr>,
      <expr><block>{ <expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr>, <expr><name>EVFILT_USER</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NOTE_TRIGGER</name></expr>     }</block></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>kevent</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ev</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IWN_EPOLL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>event_fd</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>data</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>event_fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwn_poller_shutdown_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwn_poller_poke</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwn_poller_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_destroy</name><argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IWN_EPOLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_on_eventfd_dispose</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_poller_task</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>poller</name><operator>-&gt;</operator><name>event_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_eventfd_ensure</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>event_fd</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>eventfd</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EFD_CLOEXEC</name> <operator>|</operator> <name>EFD_NONBLOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCN</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>event_fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

   <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EFD_CLOEXEC</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>RCN</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>event_fd</name></name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><name>FD_CLOEXEC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_poller_add(&amp;(struct iwn_poller_task) {
    .poller = p,
    .fd = p-&gt;event_fd,
    .on_dispose = _on_eventfd_dispose,
    .events = IWN_POLLIN
  })</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_on_timerfd_dispose</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_poller_task</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>poller</name><operator>-&gt;</operator><name>timer_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_timerfd_ensure</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>timer_fd</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>timerfd_create</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><name>TFD_CLOEXEC</name> <operator>|</operator> <name>TFD_NONBLOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCN</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>timer_fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_poller_add(&amp;(struct iwn_poller_task) {
    .poller = p,
    .fd = p-&gt;timer_fd,
    .on_ready = _timer_ready_fd,
    .on_dispose = _on_timerfd_dispose,
    .events = IWN_POLLIN,
    .events_mod = IWN_POLLET
  })</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_poller_spec</name></name> <modifier>*</modifier></type><name>spec_</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>out_poller</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>out_poller</name> <operator>||</operator> <operator>!</operator><name>spec_</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_poller_spec</name></name></type> <name>spec</name> <init>= <expr><operator>*</operator><name>spec_</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>out_poller</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>.</operator><name>num_threads</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>spec</name><operator>.</operator><name>num_threads</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>.</operator><name>one_shot_events</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>spec</name><operator>.</operator><name>one_shot_events</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>.</operator><name>one_shot_events</name></name> <operator>&gt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>spec</name><operator>.</operator><name>one_shot_events</name></name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>IWN_EPOLL</name></cpp:ifdef>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>timer_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>event_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>max_poll_events</name></name> <operator>=</operator> <name><name>spec</name><operator>.</operator><name>one_shot_events</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>RCN</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCB</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>slots</name></name> <operator>=</operator> <call><name>iwhmap_create_u32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwtp_start_by_spec(&amp;(struct iwtp_spec) {
    .num_threads = spec.num_threads,
    .overflow_threads_factor = spec.overflow_threads_factor,
    .queue_limit = spec.queue_limit,
    .thread_name_prefix = <literal type="string">"poller-tp-"</literal>,
    .warn_on_overflow_thread_spawn = spec.warn_on_overflow_thread_spawn,
  }, &amp;p-&gt;tp)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IWN_KQUEUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>RCN</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>kqueue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IWN_EPOLL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><call><name>RCN</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>epoll_create1</name><argument_list>(<argument><expr><name>EPOLL_CLOEXEC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_eventfd_ensure</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_timerfd_ensure</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_destroy</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>out_poller</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_poller_create_by_spec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_poller_spec</name></name> <modifier>*</modifier></type><name>spec</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>out_poller</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_create</name><argument_list>(<argument><expr><name>spec</name></expr></argument>, <argument><expr><name>out_poller</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_poller_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num_threads</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>one_shot_events</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>out_poller</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <macro><name>_create</name><argument_list>(<argument>&amp;(struct iwn_poller_spec) {
    .num_threads = num_threads</argument>,
    <argument>.one_shot_events = one_shot_events</argument>,
  <argument>}</argument>, <argument>out_poller</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_worker_fn</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type> <name>timeout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>destroy</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>abort</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>poller_slot</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>poller</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>events</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>events_processing</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></init></decl>;</decl_stmt>

<label><name>start</name>:</label>

  <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>on_ready</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>on_ready</name></name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>s</name></expr></argument>, <argument><expr><name>events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <name>IWN_POLLTIMEOUT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rci</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>destroy</name> <operator>=</operator> <call><name>_slot_unref</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>REF_DESTROY_DEFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>events</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name>n</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>events</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>events</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>abort</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>abort</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>events_update</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>events</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>events_update</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>events_update</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>start</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SLOT_PROCESSING</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>events</name> <operator>=</operator> <name>events</name> <operator>|</operator> <name><name>s</name><operator>-&gt;</operator><name>events_mod</name></name> <operator>|</operator> <name><name>s</name><operator>-&gt;</operator><name>events_armed</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>events_armed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>abort</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IWN_KQUEUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <block>{<block_content>
      <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>ka</name> <init>= <expr><call><name>_events_to_kflags</name><argument_list>(<argument><expr><name>events</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>struct</name> <name>kevent</name></name></type> <name><name>ev</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>IWN_POLLIN</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ev</name><index>[<expr><name>rci</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>kevent</name><operator>)</operator> <block>{
          <expr><name>fd</name></expr>, <expr><name>EVFILT_READ</name></expr>, <expr><name>EV_ADD</name> <operator>|</operator> <name>ka</name></expr>
        }</block></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>IWN_POLLOUT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ev</name><index>[<expr><name>rci</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>kevent</name><operator>)</operator> <block>{
          <expr><name>fd</name></expr>, <expr><name>EVFILT_WRITE</name></expr>, <expr><name>EV_ADD</name> <operator>|</operator> <name>ka</name> <operator>|</operator> <name>EV_DISPATCH</name></expr>
        }</block></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>rci</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rci</name> <operator>=</operator> <call><name>kevent</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IWN_EPOLL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <decl_stmt><decl><type><name><name>struct</name> <name>epoll_event</name></name></type> <name>ev</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ev</name><operator>.</operator><name>data</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ev</name><operator>.</operator><name>events</name></name> <operator>=</operator> <name>events</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rci</name> <operator>=</operator> <call><name>epoll_ctl</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>EPOLL_CTL_MOD</name></expr></argument>, <argument><expr><name><name>ev</name><operator>.</operator><name>data</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>destroy</name> <operator>=</operator> <call><name>_slot_unref</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>REF_LOCKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>timeout</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>timeout</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>destroy</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_slot_destroy</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>abort</name> <operator>||</operator> <name>rci</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwn_poller_remove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>timeout_limit</name> <init>= <expr><call><name>_time_sec</name><argument_list>()</argument_list></call> <operator>+</operator> <name>timeout</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>timeout_limit</name></name> <operator>=</operator> <name>timeout_limit</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_timer_check</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>s</name></expr></argument>, <argument><expr><name>timeout_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_poller_alive</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>p</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>stop</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_poller_task</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>task</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>iwtp_schedule</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>tp</name></name></expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_poller_probe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>iwn_poller_probe_fn</name></type> <name>probe</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fn_user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>poller_slot</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>_slot_ref_id</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>probe</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>, <argument><expr><name>fn_user_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_slot_unref</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>_poll_worker</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>d</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>iwn_poller_poll</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_poller_poll_in_thread</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>thr_name</name></decl></parameter>, <parameter><decl><type><name>pthread_t</name> <modifier>*</modifier></type><name>out_thr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>thr_name</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>thread_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>thr_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCN</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>pthread_create</name><argument_list>(<argument><expr><name>out_thr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>_poll_worker</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwn_poller_flags_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwn_poller_poll</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>thread_name</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwp_set_current_thread_name</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>thread_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>thread_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>thread_name</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>max_events</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>max_poll_events</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IWN_KQUEUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>fds_count</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>kevent</name></name></type> <name><name>event</name><index>[<expr><name>max_events</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IWN_EPOLL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><call><name>_eventfd_ensure</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_timerfd_ensure</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>fds_count</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>epoll_event</name></name></type> <name><name>event</name><index>[<expr><name>max_events</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IWN_POLLER_POLL_NO_FDS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>stop</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IWN_KQUEUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>int</name></type> <name>nfds</name> <init>= <expr><call><name>kevent</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>max_events</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IWN_EPOLL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <decl_stmt><decl><type><name>int</name></type> <name>nfds</name> <init>= <expr><call><name>epoll_wait</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>max_events</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if <condition>(<expr><name>nfds</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfds</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>events</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>bool</name></type> <name>abort</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IWN_KQUEUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <if_stmt><if>if <condition>(<expr><name><name>event</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ident</name> <operator>==</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>fd</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>event</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ident</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr>)</condition> <block>{<block_content> <comment type="line">// Own, not fd related event</comment>
        <if_stmt><if>if <condition>(<expr><name><name>event</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>filter</name> <operator>==</operator> <name>EVFILT_TIMER</name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>housekeeping</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>_timer_ready_impl</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>housekeeping</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <switch>switch <condition>(<expr><name><name>event</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>filter</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>EVFILT_READ</name></expr>:</case>
          <expr_stmt><expr><name>events</name> <operator>|=</operator> <name>IWN_POLLIN</name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>EVFILT_WRITE</name></expr>:</case>
          <expr_stmt><expr><name>events</name> <operator>|=</operator> <name>IWN_POLLOUT</name></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>
      <if_stmt><if>if <condition>(<expr><name><name>event</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>EV_EOF</name> <operator>|</operator> <name>EV_ERROR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>abort</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IWN_EPOLL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
      <expr_stmt><expr><name>fd</name> <operator>=</operator> <name><name>event</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>fd</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>events</name> <operator>=</operator> <name><name>event</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <operator>(</operator><name>EPOLLRDHUP</name> <operator>|</operator> <name>EPOLLHUP</name> <operator>|</operator> <name>EPOLLERR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>events</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>EPOLLRDHUP</name> <operator>|</operator> <name>EPOLLHUP</name> <operator>|</operator> <name>EPOLLERR</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>abort</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      <decl_stmt><decl><type><name><name>struct</name> <name>poller_slot</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>_slot_ref_id</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>REF_SET_LOCKED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>IW_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>abort</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>iwn_poller_remove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IW_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><name>events</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type> <name>destroy</name> <init>= <expr><call><name>_slot_unref</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>REF_LOCKED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>abort</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>abort</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>abort</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>abort</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>destroy</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>_slot_destroy</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>abort</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>iwn_poller_remove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SLOT_PROCESSING</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>abort</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>abort</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>events_update</name></name> <operator>|=</operator> <name>events</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>destroy</name> <init>= <expr><call><name>_slot_unref</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>REF_LOCKED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>destroy</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>_slot_destroy</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>abort</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>abort</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SLOT_PROCESSING</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>events_update</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>events_processing</name></name> <operator>=</operator> <name>events</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>timeout_limit</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>iwtp_schedule</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>tp</name></name></expr></argument>, <argument><expr><name>_worker_fn</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>_slot_remove_unref</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></while>
  <comment type="line">// Close all polled descriptors</comment>
  <expr_stmt><expr><call><name>_poller_cleanup</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function></block_content></block></function></block_content></block></function>
</unit>
