<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/poller/iwn_direct_poller_adapter.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_direct_poller_adapter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwlog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<struct>struct <name>pa</name> <block>{
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_poller_adapter</name></name></type>     <name>b</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwn_on_poller_adapter_event</name></type>   <name>on_event</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwn_on_poller_adapter_dispose</name></type> <name>on_dispose</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_has_pending_write_bytes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller_adapter</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_arm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller_adapter</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>events</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>iwn_poller_arm_events</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>poller</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>events</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller_adapter</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>read</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller_adapter</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>write</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pa</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>_on_ready</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_poller_task</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>events</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>pa</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>a</name><operator>-&gt;</operator><name>on_event</name></name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>a</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name>events</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_on_dispose</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_poller_task</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>pa</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>on_dispose</name></name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>a</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_destroy</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_direct_poller_adapter</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name>            <modifier>*</modifier></type><name>p</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type>                           <name>fd</name></decl></parameter>,
  <parameter><decl><type><name>iwn_on_poller_adapter_event</name></type>   <name>on_event</name></decl></parameter>,
  <parameter><decl><type><name>iwn_on_poller_adapter_dispose</name></type> <name>on_dispose</name></decl></parameter>,
  <parameter><decl><type><name>void</name>                         <modifier>*</modifier></type><name>user_data</name></decl></parameter>,
  <parameter><decl><type><name>uint32_t</name></type>                      <name>events</name></decl></parameter>,
  <parameter><decl><type><name>uint32_t</name></type>                      <name>events_mod</name></decl></parameter>,
  <parameter><decl><type><name>long</name></type>                          <name>timeout_sec</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>pa</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>user_data</name></name> <operator>=</operator> <name>user_data</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>poller</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>read</name></name> <operator>=</operator> <name>_read</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>write</name></name> <operator>=</operator> <name>_write</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>arm</name></name> <operator>=</operator> <name>_arm</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>b</name><operator>.</operator><name>has_pending_write_bytes</name></name> <operator>=</operator> <name>_has_pending_write_bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>on_event</name></name> <operator>=</operator> <name>on_event</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>on_dispose</name></name> <operator>=</operator> <name>on_dispose</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <macro><name>iwn_poller_add</name><argument_list>(<argument>&amp;(struct iwn_poller_task) {
    .fd = fd</argument>,
    <argument>.user_data = a</argument>,
    <argument>.on_ready = _on_ready</argument>,
    <argument>.on_dispose = _on_dispose</argument>,
    <argument>.timeout = timeout_sec</argument>,
    <argument>.poller = p</argument>,
    <argument>.events = events</argument>,
    <argument>.events_mod = events_mod
  }</argument>)</argument_list></macro></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_destroy</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
</unit>
