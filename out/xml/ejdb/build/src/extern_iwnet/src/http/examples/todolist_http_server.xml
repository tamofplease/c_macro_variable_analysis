<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/http/examples/todolist_http_server.c"><comment type="line" format="doxygen">/// Sample `todo list` HTTP REST API server</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_wf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwconv.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwxstr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>poller</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>iwn_wf_ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<struct>struct <name>item</name> <block>{
  <decl_stmt><decl><type><name>int</name></type>   <name>id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>brief</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>  <name>done</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>item</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>item</name></name> <modifier>*</modifier></type><name>items</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_on_signal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nExiting...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwn_poller_shutdown_request</name><argument_list>(<argument><expr><name>poller</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_item_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>brief</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_item_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>item</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>items</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name><name>struct</name> <name>item</name></name> <modifier>*</modifier><name>n</name></type> <init>= <expr><name>items</name></expr></init></decl>;</init> <condition><expr><name>n</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>id</name></name> <operator>&gt;</operator> <name>id</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>items</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><operator>++</operator><name><name>a</name><operator>-&gt;</operator><name>id</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_item_remove</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name><name>struct</name> <name>item</name></name> <modifier>*</modifier><name>n</name></type> <init>= <expr><name>items</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name>n</name></expr><operator>,</operator> <expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>items</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>_item_destroy</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>item</name></name><modifier>*</modifier></type> <name>_item_get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name><name>struct</name> <name>item</name></name> <modifier>*</modifier><name>n</name></type> <init>= <expr><name>items</name></expr></init></decl>;</init> <condition><expr><name>n</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>n</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line" format="doxygen">/// Todo list create item.</comment>
<comment type="line" format="doxygen">///</comment>
<comment type="line" format="doxygen">/// * curl -XPUT -d'Say Hello' http://localhost:8080/todo/Hello</comment>
<comment type="line" format="doxygen">/// * curl -XPUT -d'Say Hello' http://localhost:8080/todo/Hello?done=1</comment>
<comment type="line" format="doxygen">///</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_todo_create</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>IWN_WF_RES_INTERNAL_ERROR</name></expr></init></decl>;</decl_stmt> <comment type="line">// 500 code by default</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_wf_route_submatch</name></name> <modifier>*</modifier></type><name>m</name> <init>= <expr><call><name>iwn_wf_request_submatch_first</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCB</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name>item</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>RCB</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>title</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>ep</name></name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>sp</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>title</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>sp</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>ep</name></name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>sp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>title</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>ep</name></name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>sp</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>body_len</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCB</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>brief</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>body</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>body_len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>RCB</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>brief</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// Get done flag from query parameter:</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>val</name> <init>= <expr><call><name>iwn_pair_find_val</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>query_params</name></name></expr></argument>, <argument><expr><literal type="string">"done"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"done"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>val</name><operator>.</operator><name>len</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>_item_add</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Write response to the client</comment>
  <if_stmt><if>if <condition>(<expr><call><name>iwn_http_response_printf</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="number">201</literal></expr></argument>, <argument><expr><literal type="string">"text/plain"</literal></expr></argument>, <argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>IWN_WF_RES_PROCESSED</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_item_destroy</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="line" format="doxygen">/// List all todo list items.</comment>
<comment type="line" format="doxygen">///</comment>
<comment type="line" format="doxygen">/// * curl http://localhost:8080/todo</comment>
<comment type="line" format="doxygen">///</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_todo_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>IWN_WF_RES_INTERNAL_ERROR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl>;</decl_stmt>

  <comment type="line">// For the sake of simplicity response is not streamed and assembled as buffer.</comment>
  <expr_stmt><expr><call><name>RCB</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name>xstr</name> <operator>=</operator> <call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>iwxstr_printf</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"#  \tDone\tTitle\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name><name>struct</name> <name>item</name></name> <modifier>*</modifier><name>n</name></type> <init>= <expr><name>items</name></expr></init></decl>;</init> <condition><expr><name>n</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_printf</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"%03d\t%s\t%s\n"</literal></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>n</name><operator>-&gt;</operator><name>done</name></name></expr> ?</condition><then> <expr><literal type="string">"done"</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><call><name>iwn_http_response_write</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="string">"text/plain"</literal></expr></argument>, <argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>IWN_WF_RES_PROCESSED</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="line" format="doxygen">/// Get todo item by id.</comment>
<comment type="line" format="doxygen">///</comment>
<comment type="line" format="doxygen">/// * curl http://localhost:8080/todo/2</comment>
<comment type="line" format="doxygen">///</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_todo_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>IWN_WF_RES_INTERNAL_ERROR</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_wf_route_submatch</name></name> <modifier>*</modifier></type><name>m</name> <init>= <expr><call><name>iwn_wf_request_submatch_first</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name>iwatoi2</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>sp</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>ep</name></name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>sp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>item</name></name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>_item_get</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">404</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>RCB</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name>xstr</name> <operator>=</operator> <call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_printf</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"ID:\t%d\n"</literal></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_printf</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"Title:\t%s\n"</literal></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_printf</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"Done:\t%s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>n</name><operator>-&gt;</operator><name>done</name></name></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_printf</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"Brief:\t%s\n"</literal></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>brief</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>iwn_http_response_write</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="string">"text/plain"</literal></expr></argument>, <argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>IWN_WF_RES_PROCESSED</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="line" format="doxygen">/// Remove todo item with id.</comment>
<comment type="line" format="doxygen">///</comment>
<comment type="line" format="doxygen">/// * curl -XDELETE http://localhost:8080/todo/2</comment>
<comment type="line" format="doxygen">///</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_todo_remove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_wf_route_submatch</name></name> <modifier>*</modifier></type><name>m</name> <init>= <expr><call><name>iwn_wf_request_submatch_first</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name>iwatoi2</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>sp</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>ep</name></name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>sp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>item</name></name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>_item_get</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">404</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>_item_remove</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">204</literal></expr>;</return> <comment type="line">// No content</comment>
</block_content>}</block></function>

<comment type="line" format="doxygen">/// Update todo item `done` status.</comment>
<comment type="line" format="doxygen">///</comment>
<comment type="line" format="doxygen">/// * curl -XPOST -d'id=2&amp;done=1' http://localhost:8080/todo</comment>
<comment type="line" format="doxygen">///</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_todo_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>val</name> <init>= <expr><call><name>iwn_pair_find_val</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>form_params</name></name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>val</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">400</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>iwatoi2</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>item</name></name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>_item_get</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">404</literal></expr>;</return>    
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>iwn_pair_find_val</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>form_params</name></name></expr></argument>, <argument><expr><literal type="string">"done"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"done"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>val</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <operator>!</operator><name><name>n</name><operator>-&gt;</operator><name>done</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">200</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(  <expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>_on_signal</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SIG_ERR</name>
     <operator>||</operator> <call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>_on_signal</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SIG_ERR</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ssl</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><literal type="number">8080</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--ssl"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ssl</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--port"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>iwatoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iw_init</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>              <comment type="line">// Init iowow runtime, logging, etc..</comment>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_wf_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Create web server context</comment>

  <comment type="line">// Configure routes</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_wf_route</name></name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_route(&amp;(struct iwn_wf_route) {
    .ctx = ctx,
    .pattern = <literal type="string">"/todo"</literal>,
    .flags = IWN_WF_METHODS_ALL <comment type="line">// Matched all HTTP methods</comment>
  }, &amp;parent)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <comment type="line">// Creates a new todo item</comment>
  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_route(&amp;(struct iwn_wf_route) {
    .parent = parent,
    .pattern = <literal type="string">"^/([a-zA-z]+[a-z0-9A-Z]*)"</literal>,
    .flags = IWN_WF_PUT,
    <comment type="line">// If pattern starts with `^` it will be processed as regexp.</comment>
    .handler = _todo_create,
    .tag = <literal type="string">"create"</literal>
  }, <literal type="number">0</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <comment type="line">// Gets todo item by id</comment>
  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_route(&amp;(struct iwn_wf_route) {
    .parent = parent,
    .pattern = <literal type="string">"^/([0-9]+)"</literal>,
    .handler = _todo_get,
    .tag = <literal type="string">"get"</literal>
  }, <literal type="number">0</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <comment type="line">// Removes todo item by id</comment>
  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_route(&amp;(struct iwn_wf_route) {
    .parent = parent,
    .pattern = <literal type="string">"^/([0-9]+)"</literal>,
    .handler = _todo_remove,
    .flags = IWN_WF_DELETE,
    .tag = <literal type="string">"remove"</literal>
  }, <literal type="number">0</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <comment type="line">// List all todo items</comment>
  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_route(&amp;(struct iwn_wf_route) {
    .parent = parent,
    .handler = _todo_list,
    .tag = <literal type="string">"list"</literal>
  }, <literal type="number">0</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <comment type="line">// Update task status</comment>
  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_route(&amp;(struct iwn_wf_route) {
    .parent = parent,
    .handler = _todo_done,
    .flags = IWN_WF_POST,
    .tag = <literal type="string">"done"</literal>
  }, <literal type="number">0</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_poller_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>poller</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_wf_server_spec</name></name></type> <name>spec</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>listen</name> <operator>=</operator> <literal type="string">"localhost"</literal></expr>,
    <expr><operator>.</operator><name>port</name>   <operator>=</operator> <name>port</name></expr>,
    <expr><operator>.</operator><name>poller</name> <operator>=</operator> <name>poller</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ssl</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>spec</name><operator>.</operator><name>ssl</name><operator>.</operator><name>private_key</name></name> <operator>=</operator> <literal type="string">"./server-eckey.pem"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>spec</name><operator>.</operator><name>ssl</name><operator>.</operator><name>private_key_len</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>spec</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certs</name></name> <operator>=</operator> <literal type="string">"./server-ecdsacert.pem"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>spec</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certs_len</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Print out a routes configuration.</comment>
  <expr_stmt><expr><call><name>iwn_wf_route_print</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// Configure HTTP server.</comment>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_wf_server</name><argument_list>(<argument><expr><operator>&amp;</operator><name>spec</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name> <init>= <expr><ternary><condition><expr><name>ssl</name></expr> ?</condition><then> <expr><literal type="string">"https"</literal></expr> </then><else>: <expr><literal type="string">"http"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n Create a new 'Hello' todo entry:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\tcurl -k -XPUT -d'Say Hello' %s://%s:%d/todo/Hello\n"</literal></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name><name>spec</name><operator>.</operator><name>listen</name></name></expr></argument>, <argument><expr><name><name>spec</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\tcurl -k -XPUT -d'Say Hello' %s://%s:%d/todo/Hello?done=1\n"</literal></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name><name>spec</name><operator>.</operator><name>listen</name></name></expr></argument>, <argument><expr><name><name>spec</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n List all todo list items:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\tcurl -k %s://%s:%d/todo\n"</literal></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name><name>spec</name><operator>.</operator><name>listen</name></name></expr></argument>, <argument><expr><name><name>spec</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n Get task #1 details:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\tcurl -k %s://%s:%d/todo/1\n"</literal></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name><name>spec</name><operator>.</operator><name>listen</name></name></expr></argument>, <argument><expr><name><name>spec</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n Remove task #2 from todo list:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\tcurl -k -XDELETE %s://%s:%d/todo/2\n"</literal></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name><name>spec</name><operator>.</operator><name>listen</name></name></expr></argument>, <argument><expr><name><name>spec</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n Update done status of task #2:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\tcurl -k -XPOST -d'id=2&amp;done=1' %s://%s:%d/todo\n"</literal></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name><name>spec</name><operator>.</operator><name>listen</name></name></expr></argument>, <argument><expr><name><name>spec</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <comment type="line">// Start fds poller reactor.</comment>
  <expr_stmt><expr><call><name>iwn_poller_poll</name><argument_list>(<argument><expr><name>poller</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>iwn_poller_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>poller</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name><name>struct</name> <name>item</name></name> <modifier>*</modifier><name>t</name></type> <init>= <expr><name>items</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name></expr>;</condition> <incr><expr><name>t</name> <operator>=</operator> <name>n</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><call><name>_item_destroy</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
