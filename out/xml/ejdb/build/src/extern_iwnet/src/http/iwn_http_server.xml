<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/src/http/iwn_http_server.c"><comment type="block">/*
 * HTTP protocol parser is based on https://github.com/jeremycw/httpserver.h MIT code.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_http_server_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_poller_adapter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_url.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_scheduler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"poller/iwn_direct_poller_adapter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ssl/iwn_brssl_poller_adapter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwlog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwutils.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwpool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwxstr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/tcp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<struct>struct <name>server</name> <block>{
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_http_server</name></name></type>      <name>server</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_http_server_spec</name></name></type> <name>spec</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type> <name>stime</name></decl>;</decl_stmt>  <comment type="line" format="doxygen">///&lt; Server time second since epoch.</comment>
  <decl_stmt><decl><type><name>int</name></type>  <name>fd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>  <name>refs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mtx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mtx_ssl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>stime_text</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line" format="doxygen">///&lt; Formatted as: `%a, %d %b %Y %T GMT`</comment>
  <decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>https</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>token</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>tokens_buf</name> <block>{
  <decl_stmt><decl><type><name><name>struct</name> <name>token</name></name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type>       <name>capacity</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type>       <name>size</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>stream</name> <block>{
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type>  (<modifier>*</modifier><name>buf_free</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name><name>struct</name> <name>token</name></name></type> <name>token</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type>      <name>bytes_total</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type>      <name>capacity</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type>      <name>length</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type>      <name>index</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type>      <name>anchor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>      <name>flags</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>parser</name> <block>{
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>content_length</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>body_consumed</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>match_index</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>header_count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>state</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>meta</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>header</name> <block>{
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>header</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>response</name> <block>{
  <decl_stmt><decl><type><name><name>struct</name> <name>header</name></name> <modifier>*</modifier></type><name>headers</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWPOOL</name>     <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>body</name></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type>   (<modifier>*</modifier><name>body_free</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>size_t</name></type> <name>body_len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>code</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>proxy</name> <block>{
  <decl_stmt><decl><type><name>iwrc</name></type>    <name>rc</name></decl>;</decl_stmt>                <comment type="line" format="doxygen">///&lt; Not zero if proxy connection failed</comment>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>from_endpoint_buf</name></decl>;</decl_stmt> <comment type="line" format="doxygen">///&lt; proxy &lt;- proxied endpoint buffer</comment>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>to_endpoint_buf</name></decl>;</decl_stmt>   <comment type="line" format="doxygen">///&lt; proxy -&gt; proxied endpoint buffer</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>      <modifier>*</modifier></type><name>url_raw</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_pairs</name></name></type> <name>headers</name></decl>;</decl_stmt>  <comment type="line" format="doxygen">///&lt; Extra headers to add to the proxied request</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_url</name></name></type>   <name>url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pthread_mutex_t</name></type>  <name>mtx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>channel_buf_max_size</name></decl>;</decl_stmt>       <comment type="line" format="doxygen">///&lt; Max size of intemediate data buffer for read/write proxy channels.</comment>
                                     <comment type="line" format="doxygen">/// Default: 1048576(1MB)</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type>      <name>timeout_connect_sec</name></decl>;</decl_stmt> <comment type="line" format="doxygen">///&lt; Socket connect timeout in seconds.</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type>      <name>timeout_data_sec</name></decl>;</decl_stmt>    <comment type="line" format="doxygen">///&lt; Socket data events timeout in seconds.</comment>
  <decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type>  <name>fd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type>  <name>fd_timeout</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>connected</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>disconnected</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>client</name> <block>{
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_http_req</name></name></type> <name>request</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_poller</name></name>  <modifier>*</modifier></type><name>poller</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwn_http_server_chunk_handler</name></type> <name>chunk_cb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwn_on_poller_adapter_event</name></type> <name>injected_poller_evh</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name>    <modifier>*</modifier></type><name>server</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>tokens_buf</name></name></type> <name>tokens</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>stream</name></name></type>     <name>stream</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>parser</name></name></type>     <name>parser</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>response</name></name></type>   <name>response</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>proxy</name></name></type>      <name>proxy</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>sockaddr</name></decl>;</decl_stmt>

  <comment type="line">// Web-framework implementation hooks (do not use these in app)</comment>
  <comment type="line">// TODO: Review it</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>_ws_data</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>_wf_data</name></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type>  (<modifier>*</modifier><name>_wf_on_request_dispose</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type>  (<modifier>*</modifier><name>_wf_on_response_headers_write</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>atomic_int</name></type> <name>refs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>fd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>state</name></decl>;</decl_stmt>     <comment type="line" format="doxygen">///&lt; HTTP_SESSION_{INIT,READ,WRITE,NOP}</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>flags</name></decl>;</decl_stmt>     <comment type="line" format="doxygen">///&lt; HTTP_END_SESSION,HTTP_AUTOMATIC,HTTP_CHUNKED_RESPONSE</comment>

  <decl_stmt><decl><type><name>char</name></type> <name><name>ip</name><index>[<expr><literal type="number">46</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line" format="doxygen">///&lt; Client ip address</comment>
}</block>;</struct>

<comment type="line">// stream flags</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HS_SF_CONSUMED</name></cpp:macro> <cpp:value>0x01U</cpp:value></cpp:define>

<comment type="line">// parser flags</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HS_PF_IN_CONTENT_LEN</name></cpp:macro>  <cpp:value>0x01U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HS_PF_IN_TRANSFER_ENC</name></cpp:macro> <cpp:value>0x02U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HS_PF_CHUNKED</name></cpp:macro>         <cpp:value>0x04U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HS_PF_CKEND</name></cpp:macro>           <cpp:value>0x08U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HS_PF_REQ_END</name></cpp:macro>         <cpp:value>0x10U</cpp:value></cpp:define>

<comment type="line">// http session states</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_SESSION_INIT</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_SESSION_READ</name></cpp:macro>  <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_SESSION_WRITE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_SESSION_NOP</name></cpp:macro>   <cpp:value>3</cpp:value></cpp:define>

<comment type="line">// http session flags</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_KEEP_ALIVE</name></cpp:macro>       <cpp:value>0x01U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_STREAMED</name></cpp:macro>         <cpp:value>0x02U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_END_SESSION</name></cpp:macro>      <cpp:value>0x04U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_AUTOMATIC</name></cpp:macro>        <cpp:value>0x08U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_CHUNKED_RESPONSE</name></cpp:macro> <cpp:value>0x10U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_STREAM_RESPONSE</name></cpp:macro>  <cpp:value>0x20U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_UPGRADE</name></cpp:macro>          <cpp:value>0x40U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_HAS_CONTENT_LEN</name></cpp:macro>  <cpp:value>0x80U</cpp:value></cpp:define>

<comment type="line">// http version indicators</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_1_0</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_1_1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HS_META_NOT_CHUNKED</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HS_META_NON_ZERO</name></cpp:macro>     <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HS_META_END_CHK_SIZE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HS_META_END_CHUNK</name></cpp:macro>    <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HS_META_NEXT</name></cpp:macro>         <cpp:value>0</cpp:value></cpp:define>

<comment type="line">// *INDENT-OFF*</comment>
<enum>enum <name>token_e</name> <block>{
  <decl><name>HS_TOK_NONE</name></decl>,        <decl><name>HS_TOK_METHOD</name></decl>,     <decl><name>HS_TOK_TARGET</name></decl>,     <decl><name>HS_TOK_VERSION</name></decl>,
  <decl><name>HS_TOK_HEADER_KEY</name></decl>,  <decl><name>HS_TOK_HEADER_VAL</name></decl>, <decl><name>HS_TOK_CHUNK_BODY</name></decl>, <decl><name>HS_TOK_BODY</name></decl>,
  <decl><name>HS_TOK_BODY_STREAM</name></decl>, <decl><name>HS_TOK_REQ_END</name></decl>,    <decl><name>HS_TOK_EOF</name></decl>,        <decl><name>HS_TOK_ERROR</name></decl>
}</block>;</enum>

<enum>enum <name>char_type_e</name> <block>{
  <decl><name>HS_SPC</name></decl>,   <decl><name>HS_NL</name></decl>,  <decl><name>HS_CR</name></decl>,    <decl><name>HS_COLN</name></decl>,  <decl><name>HS_TAB</name></decl>,   <decl><name>HS_SCOLN</name></decl>,
  <decl><name>HS_DIGIT</name></decl>, <decl><name>HS_HEX</name></decl>, <decl><name>HS_ALPHA</name></decl>, <decl><name>HS_TCHAR</name></decl>, <decl><name>HS_VCHAR</name></decl>, <decl><name>HS_ETC</name></decl>,   <decl><name>HS_CHAR_TYPE_LEN</name></decl>
}</block>;</enum>

<enum>enum <name>meta_state_e</name> <block>{
  <decl><name>M_WFK</name></decl>, <decl><name>M_ANY</name></decl>, <decl><name>M_MTE</name></decl>, <decl><name>M_MCL</name></decl>, <decl><name>M_CLV</name></decl>, <decl><name>M_MCK</name></decl>, <decl><name>M_SML</name></decl>, <decl><name>M_CHK</name></decl>, <decl><name>M_BIG</name></decl>, <decl><name>M_ZER</name></decl>, <decl><name>M_CSZ</name></decl>,
  <decl><name>M_CBD</name></decl>, <decl><name>M_LST</name></decl>, <decl><name>M_STR</name></decl>, <decl><name>M_SEN</name></decl>, <decl><name>M_BDY</name></decl>, <decl><name>M_END</name></decl>, <decl><name>M_ERR</name></decl>
}</block>;</enum>

<enum>enum <name>meta_type_e</name> <block>{
  <decl><name>HS_META_NOT_CONTENT_LEN</name></decl>, <decl><name>HS_META_NOT_TRANSFER_ENC</name></decl>, <decl><name>HS_META_END_KEY</name></decl>,
  <decl><name>HS_META_END_VALUE</name></decl>,       <decl><name>HS_META_END_HEADERS</name></decl>,      <decl><name>HS_META_LARGE_BODY</name></decl>,
  <decl><name>HS_META_TYPE_LEN</name></decl>
}</block>;</enum>

<enum>enum <name>state_e</name> <block>{
  <decl><name>ST</name></decl>, <decl><name>MT</name></decl>, <decl><name>MS</name></decl>, <decl><name>TR</name></decl>, <decl><name>TS</name></decl>, <decl><name>VN</name></decl>, <decl><name>RR</name></decl>, <decl><name>RN</name></decl>, <decl><name>HK</name></decl>, <decl><name>HS</name></decl>, <decl><name>HV</name></decl>, <decl><name>HR</name></decl>, <decl><name>HE</name></decl>,
  <decl><name>ER</name></decl>, <decl><name>HN</name></decl>, <decl><name>BD</name></decl>, <decl><name>CS</name></decl>, <decl><name>CB</name></decl>, <decl><name>CE</name></decl>, <decl><name>CR</name></decl>, <decl><name>CN</name></decl>, <decl><name>CD</name></decl>, <decl><name>C1</name></decl>, <decl><name>C2</name></decl>, <decl><name>BR</name></decl>, <decl><name>HS_STATE_LEN</name></decl>
}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>_transitions</name><index>[]</index></name> <init>= <expr><block>{
<comment type="line">//                                            A-Z G-Z</comment>
<comment type="line">//                spc \n  \r  :   \t  ;   0-9 a-f g-z tch vch etc</comment>
<comment type="block">/* ST start */</comment>    <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>MT</name></expr>, <expr><name>MT</name></expr>, <expr><name>MT</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>,
<comment type="block">/* MT method */</comment>   <expr><name>MS</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>MT</name></expr>, <expr><name>MT</name></expr>, <expr><name>MT</name></expr>, <expr><name>MT</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>,
<comment type="block">/* MS methodsp */</comment> <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>TR</name></expr>, <expr><name>TR</name></expr>, <expr><name>TR</name></expr>, <expr><name>TR</name></expr>, <expr><name>TR</name></expr>, <expr><name>BR</name></expr>,
<comment type="block">/* TR target */</comment>   <expr><name>TS</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>TR</name></expr>, <expr><name>BR</name></expr>, <expr><name>TR</name></expr>, <expr><name>TR</name></expr>, <expr><name>TR</name></expr>, <expr><name>TR</name></expr>, <expr><name>TR</name></expr>, <expr><name>TR</name></expr>, <expr><name>BR</name></expr>,
<comment type="block">/* TS targetsp */</comment> <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>VN</name></expr>, <expr><name>VN</name></expr>, <expr><name>VN</name></expr>, <expr><name>VN</name></expr>, <expr><name>VN</name></expr>, <expr><name>BR</name></expr>,
<comment type="block">/* VN version */</comment>  <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>RR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>VN</name></expr>, <expr><name>VN</name></expr>, <expr><name>VN</name></expr>, <expr><name>VN</name></expr>, <expr><name>VN</name></expr>, <expr><name>BR</name></expr>,
<comment type="block">/* RR rl \r */</comment>    <expr><name>BR</name></expr>, <expr><name>RN</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>,
<comment type="block">/* RN rl \n */</comment>    <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>HK</name></expr>, <expr><name>HK</name></expr>, <expr><name>HK</name></expr>, <expr><name>HK</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>,
<comment type="block">/* HK headkey */</comment>  <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>HS</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>HK</name></expr>, <expr><name>HK</name></expr>, <expr><name>HK</name></expr>, <expr><name>HK</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>,
<comment type="block">/* HS headspc */</comment>  <expr><name>HS</name></expr>, <expr><name>HS</name></expr>, <expr><name>HS</name></expr>, <expr><name>HV</name></expr>, <expr><name>HS</name></expr>, <expr><name>HV</name></expr>, <expr><name>HV</name></expr>, <expr><name>HV</name></expr>, <expr><name>HV</name></expr>, <expr><name>HV</name></expr>, <expr><name>HV</name></expr>, <expr><name>BR</name></expr>,
<comment type="block">/* HV headval */</comment>  <expr><name>HV</name></expr>, <expr><name>BR</name></expr>, <expr><name>HR</name></expr>, <expr><name>HV</name></expr>, <expr><name>HV</name></expr>, <expr><name>HV</name></expr>, <expr><name>HV</name></expr>, <expr><name>HV</name></expr>, <expr><name>HV</name></expr>, <expr><name>HV</name></expr>, <expr><name>HV</name></expr>, <expr><name>BR</name></expr>,
<comment type="block">/* HR head\r */</comment>   <expr><name>BR</name></expr>, <expr><name>HE</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>,
<comment type="block">/* HE head\n */</comment>   <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>ER</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>HK</name></expr>, <expr><name>HK</name></expr>, <expr><name>HK</name></expr>, <expr><name>HK</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>,
<comment type="block">/* ER hend\r */</comment>   <expr><name>BR</name></expr>, <expr><name>HN</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>,
<comment type="block">/* HN hend\n */</comment>   <expr><name>BD</name></expr>, <expr><name>BD</name></expr>, <expr><name>BD</name></expr>, <expr><name>BD</name></expr>, <expr><name>BD</name></expr>, <expr><name>BD</name></expr>, <expr><name>BD</name></expr>, <expr><name>BD</name></expr>, <expr><name>BD</name></expr>, <expr><name>BD</name></expr>, <expr><name>BD</name></expr>, <expr><name>BD</name></expr>,
<comment type="block">/* BD body */</comment>     <expr><name>BD</name></expr>, <expr><name>BD</name></expr>, <expr><name>BD</name></expr>, <expr><name>BD</name></expr>, <expr><name>BD</name></expr>, <expr><name>BD</name></expr>, <expr><name>BD</name></expr>, <expr><name>BD</name></expr>, <expr><name>BD</name></expr>, <expr><name>BD</name></expr>, <expr><name>BD</name></expr>, <expr><name>BD</name></expr>,
<comment type="block">/* CS chksz */</comment>    <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>CR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>CE</name></expr>, <expr><name>CS</name></expr>, <expr><name>CS</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>,
<comment type="block">/* CB chkbd */</comment>    <expr><name>CB</name></expr>, <expr><name>CB</name></expr>, <expr><name>CB</name></expr>, <expr><name>CB</name></expr>, <expr><name>CB</name></expr>, <expr><name>CB</name></expr>, <expr><name>CB</name></expr>, <expr><name>CB</name></expr>, <expr><name>CB</name></expr>, <expr><name>CB</name></expr>, <expr><name>CB</name></expr>, <expr><name>CB</name></expr>,
<comment type="block">/* CE chkext */</comment>   <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>CR</name></expr>, <expr><name>CE</name></expr>, <expr><name>CE</name></expr>, <expr><name>CE</name></expr>, <expr><name>CE</name></expr>, <expr><name>CE</name></expr>, <expr><name>CE</name></expr>, <expr><name>CE</name></expr>, <expr><name>CE</name></expr>, <expr><name>BR</name></expr>,
<comment type="block">/* CR chksz\r */</comment>  <expr><name>BR</name></expr>, <expr><name>CN</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>,
<comment type="block">/* CN chksz\n */</comment>  <expr><name>CB</name></expr>, <expr><name>CB</name></expr>, <expr><name>CB</name></expr>, <expr><name>CB</name></expr>, <expr><name>CB</name></expr>, <expr><name>CB</name></expr>, <expr><name>CB</name></expr>, <expr><name>CB</name></expr>, <expr><name>CB</name></expr>, <expr><name>CB</name></expr>, <expr><name>CB</name></expr>, <expr><name>CB</name></expr>,
<comment type="block">/* CD chkend */</comment>   <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>C1</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>,
<comment type="block">/* C1 chkend\r */</comment> <expr><name>BR</name></expr>, <expr><name>C2</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>,
<comment type="block">/* C2 chkend\n */</comment> <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>CS</name></expr>, <expr><name>CS</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>, <expr><name>BR</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>_meta_transitions</name><index>[]</index></name> <init>= <expr><block>{
<comment type="line">//                 no chk</comment>
<comment type="line">//                 not cl not te endkey endval end h  toobig</comment>
<comment type="block">/* WFK wait */</comment>     <expr><name>M_WFK</name></expr>, <expr><name>M_WFK</name></expr>, <expr><name>M_WFK</name></expr>, <expr><name>M_ANY</name></expr>, <expr><name>M_END</name></expr>, <expr><name>M_ERR</name></expr>,
<comment type="block">/* ANY matchkey */</comment> <expr><name>M_MTE</name></expr>, <expr><name>M_MCL</name></expr>, <expr><name>M_WFK</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_END</name></expr>, <expr><name>M_ERR</name></expr>,
<comment type="block">/* MTE matchte */</comment>  <expr><name>M_MTE</name></expr>, <expr><name>M_WFK</name></expr>, <expr><name>M_MCK</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>,
<comment type="block">/* MCL matchcl */</comment>  <expr><name>M_WFK</name></expr>, <expr><name>M_MCL</name></expr>, <expr><name>M_CLV</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>,
<comment type="block">/* CLV clvalue */</comment>  <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_SML</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>,
<comment type="block">/* MCK matchchk */</comment> <expr><name>M_WFK</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_CHK</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>,
<comment type="block">/* SML smallbdy */</comment> <expr><name>M_SML</name></expr>, <expr><name>M_SML</name></expr>, <expr><name>M_SML</name></expr>, <expr><name>M_SML</name></expr>, <expr><name>M_BDY</name></expr>, <expr><name>M_BIG</name></expr>,
<comment type="block">/* CHK chunkbdy */</comment> <expr><name>M_CHK</name></expr>, <expr><name>M_CHK</name></expr>, <expr><name>M_CHK</name></expr>, <expr><name>M_CHK</name></expr>, <expr><name>M_ZER</name></expr>, <expr><name>M_ERR</name></expr>,
<comment type="block">/* BIG bigbody */</comment>  <expr><name>M_BIG</name></expr>, <expr><name>M_BIG</name></expr>, <expr><name>M_BIG</name></expr>, <expr><name>M_BIG</name></expr>, <expr><name>M_STR</name></expr>, <expr><name>M_ERR</name></expr>,

<comment type="line">//                         *** chunked body ***</comment>

<comment type="line">//                 nonzer endsz  endchk</comment>
<comment type="block">/* ZER zerochk */</comment>  <expr><name>M_CSZ</name></expr>, <expr><name>M_LST</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>,
<comment type="block">/* CSZ chksize */</comment>  <expr><name>M_CSZ</name></expr>, <expr><name>M_CBD</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>,
<comment type="block">/* CBD readchk */</comment>  <expr><name>M_CBD</name></expr>, <expr><name>M_CBD</name></expr>, <expr><name>M_ZER</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>,
<comment type="block">/* LST lastchk */</comment>  <expr><name>M_LST</name></expr>, <expr><name>M_END</name></expr>, <expr><name>M_END</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>,

<comment type="line">//                         *** streamed body ***</comment>

<comment type="line">//                 next</comment>
<comment type="block">/* STR readstr */</comment>  <expr><name>M_SEN</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>,
<comment type="block">/* SEN strend */</comment>   <expr><name>M_END</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>,

<comment type="line">//                         *** small body ***</comment>

<comment type="line">//                 next</comment>
<comment type="block">/* BDY readbody */</comment> <expr><name>M_END</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>,
<comment type="block">/* END reqend */</comment>   <expr><name>M_WFK</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>, <expr><name>M_ERR</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>_ctype</name><index>[]</index></name> <init>= <expr><block>{
  <expr><name>HS_ETC</name></expr>,   <expr><name>HS_ETC</name></expr>,   <expr><name>HS_ETC</name></expr>,   <expr><name>HS_ETC</name></expr>,   <expr><name>HS_ETC</name></expr>,   <expr><name>HS_ETC</name></expr>,   <expr><name>HS_ETC</name></expr>,
  <expr><name>HS_ETC</name></expr>,   <expr><name>HS_ETC</name></expr>,   <expr><name>HS_TAB</name></expr>,   <expr><name>HS_NL</name></expr>,    <expr><name>HS_ETC</name></expr>,   <expr><name>HS_ETC</name></expr>,   <expr><name>HS_CR</name></expr>,
  <expr><name>HS_ETC</name></expr>,   <expr><name>HS_ETC</name></expr>,   <expr><name>HS_ETC</name></expr>,   <expr><name>HS_ETC</name></expr>,   <expr><name>HS_ETC</name></expr>,   <expr><name>HS_ETC</name></expr>,   <expr><name>HS_ETC</name></expr>,
  <expr><name>HS_ETC</name></expr>,   <expr><name>HS_ETC</name></expr>,   <expr><name>HS_ETC</name></expr>,   <expr><name>HS_ETC</name></expr>,   <expr><name>HS_ETC</name></expr>,   <expr><name>HS_ETC</name></expr>,   <expr><name>HS_ETC</name></expr>,
  <expr><name>HS_ETC</name></expr>,   <expr><name>HS_ETC</name></expr>,   <expr><name>HS_ETC</name></expr>,   <expr><name>HS_ETC</name></expr>,   <expr><name>HS_SPC</name></expr>,   <expr><name>HS_TCHAR</name></expr>, <expr><name>HS_VCHAR</name></expr>,
  <expr><name>HS_TCHAR</name></expr>, <expr><name>HS_TCHAR</name></expr>, <expr><name>HS_TCHAR</name></expr>, <expr><name>HS_TCHAR</name></expr>, <expr><name>HS_TCHAR</name></expr>, <expr><name>HS_VCHAR</name></expr>, <expr><name>HS_VCHAR</name></expr>,
  <expr><name>HS_TCHAR</name></expr>, <expr><name>HS_TCHAR</name></expr>, <expr><name>HS_TCHAR</name></expr>, <expr><name>HS_TCHAR</name></expr>, <expr><name>HS_TCHAR</name></expr>, <expr><name>HS_VCHAR</name></expr>, <expr><name>HS_DIGIT</name></expr>,
  <expr><name>HS_DIGIT</name></expr>, <expr><name>HS_DIGIT</name></expr>, <expr><name>HS_DIGIT</name></expr>, <expr><name>HS_DIGIT</name></expr>, <expr><name>HS_DIGIT</name></expr>, <expr><name>HS_DIGIT</name></expr>, <expr><name>HS_DIGIT</name></expr>,
  <expr><name>HS_DIGIT</name></expr>, <expr><name>HS_DIGIT</name></expr>, <expr><name>HS_COLN</name></expr>,  <expr><name>HS_SCOLN</name></expr>, <expr><name>HS_VCHAR</name></expr>, <expr><name>HS_VCHAR</name></expr>, <expr><name>HS_VCHAR</name></expr>,
  <expr><name>HS_VCHAR</name></expr>, <expr><name>HS_VCHAR</name></expr>, <expr><name>HS_HEX</name></expr>,   <expr><name>HS_HEX</name></expr>,   <expr><name>HS_HEX</name></expr>,   <expr><name>HS_HEX</name></expr>,   <expr><name>HS_HEX</name></expr>,
  <expr><name>HS_HEX</name></expr>,   <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>,
  <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>,
  <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>,
  <expr><name>HS_VCHAR</name></expr>, <expr><name>HS_VCHAR</name></expr>, <expr><name>HS_VCHAR</name></expr>, <expr><name>HS_TCHAR</name></expr>, <expr><name>HS_TCHAR</name></expr>, <expr><name>HS_TCHAR</name></expr>, <expr><name>HS_HEX</name></expr>,
  <expr><name>HS_HEX</name></expr>,   <expr><name>HS_HEX</name></expr>,   <expr><name>HS_HEX</name></expr>,   <expr><name>HS_HEX</name></expr>,   <expr><name>HS_HEX</name></expr>,   <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>,
  <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>,
  <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>,
  <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_ALPHA</name></expr>, <expr><name>HS_VCHAR</name></expr>, <expr><name>HS_TCHAR</name></expr>, <expr><name>HS_VCHAR</name></expr>,
  <expr><name>HS_TCHAR</name></expr>, <expr><name>HS_ETC</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int8_t</name> <specifier>const</specifier></type> <name><name>_token_start_states</name><index>[]</index></name> <init>= <expr><block>{
<comment type="line">//ST MT             MS TR             TS VN              RR RN HK</comment>
  <expr><literal type="number">0</literal></expr>, <expr><name>HS_TOK_METHOD</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HS_TOK_TARGET</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HS_TOK_VERSION</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HS_TOK_HEADER_KEY</name></expr>,
<comment type="line">//HS HV                 HR HE ER HN BD           CS CB                 CE CR CN</comment>
  <expr><literal type="number">0</literal></expr>, <expr><name>HS_TOK_HEADER_VAL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HS_TOK_BODY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HS_TOK_CHUNK_BODY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<comment type="line">//CD C1 C2 BR</comment>
  <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name><name>_status_text</name><index>[]</index></name> <init>= <expr><block>{
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,

  <comment type="line">//100s</comment>
  <expr><literal type="string">"Continue"</literal></expr>, <expr><literal type="string">"Switching Protocols"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,

  <comment type="line">//200s</comment>
  <expr><literal type="string">"OK"</literal></expr>, <expr><literal type="string">"Created"</literal></expr>, <expr><literal type="string">"Accepted"</literal></expr>, <expr><literal type="string">"Non-Authoritative Information"</literal></expr>, <expr><literal type="string">"No Content"</literal></expr>,
  <expr><literal type="string">"Reset Content"</literal></expr>, <expr><literal type="string">"Partial Content"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,

  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,

  <comment type="line">//300s</comment>
  <expr><literal type="string">"Multiple Choices"</literal></expr>, <expr><literal type="string">"Moved Permanently"</literal></expr>, <expr><literal type="string">"Found"</literal></expr>, <expr><literal type="string">"See Other"</literal></expr>, <expr><literal type="string">"Not Modified"</literal></expr>,
  <expr><literal type="string">"Use Proxy"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Temporary Redirect"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,

  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,

  <comment type="line">//400s</comment>
  <expr><literal type="string">"Bad Request"</literal></expr>, <expr><literal type="string">"Unauthorized"</literal></expr>, <expr><literal type="string">"Payment Required"</literal></expr>, <expr><literal type="string">"Forbidden"</literal></expr>, <expr><literal type="string">"Not Found"</literal></expr>,
  <expr><literal type="string">"Method Not Allowed"</literal></expr>, <expr><literal type="string">"Not Acceptable"</literal></expr>, <expr><literal type="string">"Proxy Authentication Required"</literal></expr>,
  <expr><literal type="string">"Request Timeout"</literal></expr>, <expr><literal type="string">"Conflict"</literal></expr>,

  <expr><literal type="string">"Gone"</literal></expr>, <expr><literal type="string">"Length Required"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"Payload Too Large"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,

  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,

  <comment type="line">//500s</comment>
  <expr><literal type="string">"Internal Server Error"</literal></expr>, <expr><literal type="string">"Not Implemented"</literal></expr>, <expr><literal type="string">"Bad Gateway"</literal></expr>, <expr><literal type="string">"Service Unavailable"</literal></expr>,
  <expr><literal type="string">"Gateway Timeout"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,

  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>,
  <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<comment type="line">// *INDENT-ON*</comment>

<function_decl><type><specifier>static</specifier> <name>iwrc</name></type> <name>_server_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_server_unref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>server</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>_proxy_client_on_ready</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller_adapter</name></name> <modifier>*</modifier></type><name>pa</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>events</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_noop_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_server_time</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>out_buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>stime_text</name></name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"sizeof(server-&gt;stime) == 32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>time_t</name></type> <name>rawtime</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rawtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>-&gt;</operator><name>stime</name></name> <operator>!=</operator> <name>rawtime</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>stime</name></name> <operator>=</operator> <name>rawtime</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>timeinfo</name> <init>= <expr><call><name>gmtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rawtime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>timeinfo</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>stime_text</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>stime_text</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%a, %d %b %Y %T %Z"</literal></expr></argument>, <argument><expr><name>timeinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>out_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out_buf</name></expr></argument>, <argument><expr><name><name>server</name><operator>-&gt;</operator><name>stime_text</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>stime_text</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>_stream_free_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>IW_UNLIKELY</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>buf_free</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>client</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>buf_free</name></name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>_tokens_free_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>_request_data_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>on_request_dispose</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>client</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>on_request_dispose</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>on_request_dispose</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>_wf_on_request_dispose</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>client</name><operator>-&gt;</operator><name>_wf_on_request_dispose</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>_wf_on_request_dispose</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>_wf_data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>_ws_data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>user_data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>user_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_stream_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HS_SF_CONSUMED</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>index</name></name> <operator>&gt;=</operator> <name><name>stream</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>stream</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_stream_consume</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HS_SF_CONSUMED</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>HS_SF_CONSUMED</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>index</name></name><operator>++</operator></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nlen</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>len</name></name> <operator>=</operator> <ternary><condition><expr><name><name>stream</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>type</name></name></expr> ?</condition><then> <expr><name>nlen</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_stream_shift</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>index</name></name> <operator>==</operator> <name><name>stream</name><operator>-&gt;</operator><name>anchor</name></name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>stream</name><operator>-&gt;</operator><name>anchor</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>stream</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>index</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <name><name>stream</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>index</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>anchor</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>anchor</name></name> <operator>+</operator> <name><name>stream</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>_stream_anchor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>anchor</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>_stream_begin_token</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>token_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>token_type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name><name>struct</name> <name>token</name></name></type> <name>_stream_emit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>token</name></name></type> <name>token</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>token</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>token</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>token</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>bool</name></type> <name>_stream_can_contain</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>client</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>request_buf_max_size</name></name> <operator>-</operator> <name><name>client</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>index</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_stream_jump</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>HS_SF_CONSUMED</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <name>offset</name> <operator>&gt;</operator> <name><name>stream</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>index</name></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nlen</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>len</name></name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>len</name></name> <operator>=</operator> <ternary><condition><expr><name><name>stream</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>nlen</name></expr></else></ternary></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>_stream_jumpall</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stream</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>HS_SF_CONSUMED</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>offset</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <name><name>stream</name><operator>-&gt;</operator><name>index</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>index</name></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nlen</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>stream</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>len</name></name> <operator>+</operator> <name>offset</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>len</name></name> <operator>=</operator> <ternary><condition><expr><name><name>stream</name><operator>-&gt;</operator><name>token</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>nlen</name></expr></else></ternary></expr>;</expr_stmt>
  <return>return <expr><name>offset</name></expr>;</return>
</block_content>}</block></function>

<comment type="line" format="doxygen">///////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">//								              Client                                   //</comment>
<comment type="line" format="doxygen">///////////////////////////////////////////////////////////////////////////</comment>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>_response_body_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>response</name></name> <modifier>*</modifier></type><name>response</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>response</name><operator>-&gt;</operator><name>body</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>response</name><operator>-&gt;</operator><name>body_free</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>response</name><operator>-&gt;</operator><name>body_free</name></name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>response</name><operator>-&gt;</operator><name>body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>response</name><operator>-&gt;</operator><name>body_free</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>response</name><operator>-&gt;</operator><name>body</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>_response_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>response</name></name> <modifier>*</modifier></type><name>response</name> <init>= <expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>response</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>response</name><operator>-&gt;</operator><name>pool</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name><name>response</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>response</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>_response_body_free</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>response</name><operator>-&gt;</operator><name>headers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>response</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_client_response_error</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>response</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>iwn_http_response_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"text/plain"</literal></expr></argument>, <argument><expr><name>response</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_client_reset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>_request_data_free</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_stream_free_buffer</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_tokens_free_buffer</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_response_free</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_proxy_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>proxy</name></name> <modifier>*</modifier></type><name>proxy</name> <init>= <expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>proxy</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proxy</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>from_endpoint_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>to_endpoint_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>proxy</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>proxy</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_client_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>client</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>injected_poller_evh</name></name> <operator>==</operator> <name>_proxy_client_on_ready</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_proxy_destroy</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>_client_reset</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>server</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_server_unref</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>user_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_client_unref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>client</name><operator>-&gt;</operator><name>refs</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_client_destroy</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_client_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>_client_reset</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>HTTP_AUTOMATIC</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>chunk_cb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>client</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>client</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>request_timeout_sec</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwn_poller_set_timeout</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>poller</name></name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>request_timeout_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>bool</name></type> <name>_client_write_bytes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_poller_adapter</name></name> <modifier>*</modifier></type><name>pa</name> <init>= <expr><name><name>client</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>poller_adapter</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>stream</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>stream</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <name><name>stream</name><operator>-&gt;</operator><name>bytes_total</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes</name> <init>= <expr><call><name><name>pa</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name>pa</name></expr></argument>,
                              <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>stream</name><operator>-&gt;</operator><name>bytes_total</name></name></expr></argument>,
                              <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <name><name>stream</name><operator>-&gt;</operator><name>bytes_total</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>bytes_total</name></name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>errno</name> <operator>!=</operator> <name>EPIPE</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_client_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>stream</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>stream</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_poller_adapter</name></name> <modifier>*</modifier></type><name>pa</name> <init>= <expr><name><name>client</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>poller_adapter</name></name></expr></init></decl>;</decl_stmt>

<label><name>again</name>:</label>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_client_write_bytes</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>HTTP_END_SESSION</name></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>bytes_total</name></name> <operator>!=</operator> <name><name>stream</name><operator>-&gt;</operator><name>length</name></name> <operator>||</operator> <call><name><name>pa</name><operator>-&gt;</operator><name>has_pending_write_bytes</name></name><argument_list>(<argument><expr><name>pa</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pa</name><operator>-&gt;</operator><name>arm</name></name><argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><name>IWN_POLLOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>HTTP_CHUNKED_RESPONSE</name> <operator>|</operator> <name>HTTP_STREAM_RESPONSE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_stream_free_buffer</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>request_timeout_sec</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwn_poller_set_timeout</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>poller</name></name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>request_timeout_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>again</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>client</name><operator>-&gt;</operator><name>chunk_cb</name></name> <operator>||</operator> <operator>!</operator><call><name><name>client</name><operator>-&gt;</operator><name>chunk_cb</name></name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>client</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>again</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>HTTP_END_SESSION</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>again</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>again</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>on_response_completed</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name><name>client</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>on_response_completed</name></name></expr></init>;</function_decl>
    <if_stmt><if>if <condition>(<expr><call><name>IW_UNLIKELY</name><argument_list>(<argument><expr><name>on_response_completed</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>on_response_completed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>on_response_completed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>request</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>HTTP_END_SESSION</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HTTP_KEEP_ALIVE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>HTTP_SESSION_INIT</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>request_timeout_keepalive_sec</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>iwn_poller_set_timeout</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>poller</name></name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,
                               <argument><expr><name><name>client</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>request_timeout_keepalive_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>HTTP_END_SESSION</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>HTTP_END_SESSION</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_client_read_bytes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_poller_adapter</name></name> <modifier>*</modifier></type><name>pa</name> <init>= <expr><name><name>client</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>poller_adapter</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>stream</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>stream</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>server</name> <init>= <expr><name><name>client</name><operator>-&gt;</operator><name>server</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>index</name></name> <operator>&lt;</operator> <name><name>stream</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>request_buf_size</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> <comment type="block">/* \0 */</comment>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>request_buf_size</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes</name></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name><name>pa</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>stream</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>capacity</name></name> <operator>-</operator> <name><name>stream</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>length</name></name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>bytes_total</name></name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>length</name></name> <operator>==</operator> <name><name>stream</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>capacity</name></name> <operator>!=</operator> <name><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>request_buf_max_size</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>ssize_t</name></type> <name>ncap</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ncap</name> <operator>&gt;</operator> <name><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>request_buf_max_size</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>ncap</name> <operator>=</operator> <name><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>request_buf_max_size</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nbuf</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>ncap</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> <comment type="block">/* \0 */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nbuf</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>bytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>ncap</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>nbuf</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block> while <condition>(<expr><name>bytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

  <return>return <expr><name>bytes</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>_meta_trigger</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>to</name> <init>= <expr><name><name>_meta_transitions</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>meta</name></name> <operator>*</operator> <name>HS_META_TYPE_LEN</name> <operator>+</operator> <name>event</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>meta</name></name> <operator>=</operator> <name>to</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>token</name></name></type> <name>_meta_emit_token</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>parser</name></name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>token</name></name></type> <name>token</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>meta</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>M_SEN</name></expr>:</case>
      <expr_stmt><expr><name><name>token</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>HS_TOK_CHUNK_BODY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>_meta_trigger</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>HS_META_NEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>M_END</name></expr>:</case>
      <expr_stmt><expr><name><name>token</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>HS_TOK_REQ_END</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>parser</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>token</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>token</name></name></type> <name>_transition</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>to</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>server</name> <init>= <expr><name><name>client</name><operator>-&gt;</operator><name>server</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>parser</name></name> <modifier>*</modifier></type><name>parser</name> <init>= <expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>parser</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>stream</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>stream</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>token</name></name></type> <name>emitted</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>from</name> <operator>==</operator> <name>HN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_stream_anchor</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>from</name> <operator>!=</operator> <name>to</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int8_t</name></type> <name>type</name> <init>= <expr><name><name>_token_start_states</name><index>[<expr><name>to</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>HS_TOK_NONE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_stream_begin_token</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>from</name> <operator>==</operator> <name>CS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_meta_trigger</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>HS_META_END_CHK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>to</name> <operator>==</operator> <name>HK</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>++</operator><name><name>parser</name><operator>-&gt;</operator><name>header_count</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>header_count</name></name> <operator>&gt;</operator> <name><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>request_max_headers_count</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>emitted</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>HS_TOK_ERROR</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>to</name> <operator>==</operator> <name>HS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_meta_trigger</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>HS_META_END_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>emitted</name> <operator>=</operator> <call><name>_stream_emit</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>match_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name>low</name></decl>, <decl><type ref="prev"/><name>m</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>in_bounds</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>body_left</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATCH</name><parameter_list>(<parameter><type><name>str__</name></type></parameter>, <parameter><type><name>meta__</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>in_bounds = parser-&gt;match_index &lt; (int) sizeof(str__) - 1; \
  m = in_bounds ? str__[parser-&gt;match_index] : m; \
  low = c &gt;= 'A' &amp;&amp; c &lt;= 'Z' ? c + 32 : c; \
  if (low != m) _meta_trigger(parser, meta__)</cpp:value></cpp:define>

  <switch>switch <condition>(<expr><name>to</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>MS</name></expr>:</case>
    <case>case <expr><name>TS</name></expr>:</case>
      <expr_stmt><expr><name>emitted</name> <operator>=</operator> <call><name>_stream_emit</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>RR</name></expr>:</case>
    <case>case <expr><name>HR</name></expr>:</case>
      <expr_stmt><expr><call><name>_meta_trigger</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>HS_META_END_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>emitted</name> <operator>=</operator> <call><name>_stream_emit</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HK</name></expr>:</case>
      <expr_stmt><expr><call><name>MATCH</name><argument_list>(<argument><expr><literal type="string">"transfer-encoding"</literal></expr></argument>, <argument><expr><name>HS_META_NOT_TRANSFER_ENC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>MATCH</name><argument_list>(<argument><expr><literal type="string">"content-length"</literal></expr></argument>, <argument><expr><name>HS_META_NOT_CONTENT_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>match_index</name></name><operator>++</operator></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HV</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>meta</name></name> <operator>==</operator> <name>M_MCK</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>MATCH</name><argument_list>(<argument><expr><literal type="string">"chunked"</literal></expr></argument>, <argument><expr><name>HS_META_NOT_CHUNKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>match_index</name></name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>meta</name></name> <operator>==</operator> <name>M_CLV</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>content_length</name></name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>content_length</name></name> <operator>+=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>HN</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>meta</name></name> <operator>==</operator> <name>M_SML</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>_stream_can_contain</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>content_length</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>_meta_trigger</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>HS_META_LARGE_BODY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>meta</name></name> <operator>==</operator> <name>M_BIG</name> <operator>||</operator> <name><name>parser</name><operator>-&gt;</operator><name>meta</name></name> <operator>==</operator> <name>M_CHK</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>emitted</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>HS_TOK_BODY_STREAM</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>_meta_trigger</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>HS_META_END_HEADERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>content_length</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>meta</name></name> <operator>==</operator> <name>M_BDY</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>meta</name></name> <operator>=</operator> <name>M_END</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>meta</name></name> <operator>==</operator> <name>M_END</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>emitted</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>HS_TOK_BODY</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>CS</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>_meta_trigger</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>HS_META_NON_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>content_length</name></name> <operator>*=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>content_length</name></name> <operator>+=</operator> <name>c</name> <operator>-</operator> <literal type="number">55</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>content_length</name></name> <operator>*=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>content_length</name></name> <operator>+=</operator> <name>c</name> <operator>-</operator> <literal type="number">87</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>content_length</name></name> <operator>*=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>content_length</name></name> <operator>+=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>CB</name></expr>:</case>
    <case>case <expr><name>BD</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>meta</name></name> <operator>==</operator> <name>M_STR</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>_stream_begin_token</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>HS_TOK_CHUNK_BODY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>body_left</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>content_length</name></name> <operator>-</operator> <name><name>parser</name><operator>-&gt;</operator><name>body_consumed</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>_stream_jump</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>body_left</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>emitted</name> <operator>=</operator> <call><name>_stream_emit</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>_meta_trigger</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>HS_META_NEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>to</name> <operator>==</operator> <name>CB</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>CD</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>content_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>body_consumed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>body_consumed</name></name> <operator>+=</operator> <call><name>_stream_jumpall</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>meta</name></name> <operator>==</operator> <name>M_STR</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>emitted</name> <operator>=</operator> <call><name>_stream_emit</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>_stream_shift</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    <case>case <expr><name>C2</name></expr>:</case>
      <expr_stmt><expr><call><name>_meta_trigger</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>HS_META_END_CHUNK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>BR</name></expr>:</case>
      <expr_stmt><expr><name><name>emitted</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>HS_TOK_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MATCH</name></cpp:undef>

  <return>return <expr><name>emitted</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_fd_make_non_blocking</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>flags</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
  <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>rci</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>O_NONBLOCK</name> <operator>|</operator> <name>O_CLOEXEC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
  <if_stmt><if>if <condition>(<expr><name>rci</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_proxy_connect_check_timeout</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><name>d</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>client</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>proxy</name></name> <modifier>*</modifier></type><name>proxy</name> <init>= <expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>proxy</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>proxy</name><operator>-&gt;</operator><name>fd_timeout</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proxy</name><operator>-&gt;</operator><name>connected</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_warn</name><argument_list>(<argument><expr><literal type="string">"Proxy | Connection timeout %s on timeout %u sec"</literal></expr></argument>, <argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>url_raw</name></name></expr></argument>, <argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>timeout_connect_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><name><name>proxy</name><operator>-&gt;</operator><name>fd</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>iwn_poller_remove</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>poller</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>_client_unref</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_proxy_connect_check_cancel</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><name>d</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>client</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>proxy</name><operator>.</operator><name>fd_timeout</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_proxy_endpoint_on_dispose</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_poller_task</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>client</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>proxy</name><operator>.</operator><name>connected</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>proxy</name><operator>.</operator><name>disconnected</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>proxy</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><name><name>client</name><operator>-&gt;</operator><name>fd</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> <comment type="line">// Flush rest of buffers if any</comment>
      <expr_stmt><expr><call><name>iwn_poller_arm_events</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>poller</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IWN_POLLOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>fd</name> <operator>=</operator> <name><name>client</name><operator>-&gt;</operator><name>proxy</name><operator>.</operator><name>fd_timeout</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> <comment type="line">// Close timeout checker</comment>
      <expr_stmt><expr><call><name>iwn_poller_remove</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>poller</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>_client_unref</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_proxy_to_endpoint_write_lk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>proxy</name></name> <modifier>*</modifier></type><name>proxy</name> <init>= <expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>proxy</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>to_endpoint_buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>rci</name> <init>= <expr><call><name>write</name><argument_list>(<argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>to_endpoint_buf</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>to_endpoint_buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rci</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EAGAIN</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rci</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_EOF</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>iwxstr_shift</name><argument_list>(<argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>to_endpoint_buf</name></name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_proxy_from_endpoint_read_lk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>rci</name> <init>= <expr><call><name>read</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>proxy</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rci</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EAGAIN</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rci</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_EOF</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwxstr_cat</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>proxy</name><operator>.</operator><name>from_endpoint_buf</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>_proxy_endpoint_on_ready</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_poller_task</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>events</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>arm_client</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>ret</name> <init>= <expr><name>IWN_POLLET</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>proxy</name></name> <modifier>*</modifier></type><name>proxy</name> <init>= <expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>proxy</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proxy</name><operator>-&gt;</operator><name>connected</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>sa</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>socklen_t</name></type> <name>sa_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>getpeername</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>proxy</name><operator>-&gt;</operator><name>connected</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>arm_client</name> <operator>|=</operator> <name>IWN_POLLIN</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>ret</name> <operator>|=</operator> <name>IWN_POLLOUT</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>proxy</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>proxy</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>iwlog_ecode_error</name><argument_list>(<argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><literal type="string">"Proxy | Connection to the proxy endpoint: %s failed"</literal></expr></argument>, <argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>url_raw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><name><name>proxy</name><operator>-&gt;</operator><name>fd_timeout</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> <comment type="line">// Cancel connection timeout watcher</comment>
        <expr_stmt><expr><call><name>iwn_poller_remove</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>poller</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>IWN_POLLIN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proxy</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_proxy_from_endpoint_read_lk</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proxy</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>IWN_POLLOUT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proxy</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_proxy_to_endpoint_write_lk</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proxy</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proxy</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>from_endpoint_buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>arm_client</name> <operator>|=</operator> <name>IWN_POLLOUT</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proxy</name><operator>-&gt;</operator><name>channel_buf_max_size</name></name> <operator>||</operator> <call><name>iwxstr_size</name><argument_list>(<argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>from_endpoint_buf</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>proxy</name><operator>-&gt;</operator><name>channel_buf_max_size</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>|=</operator> <name>IWN_POLLIN</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>to_endpoint_buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>|=</operator> <name>IWN_POLLOUT</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>arm_client</name> <operator>|=</operator> <name>IWN_POLLIN</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proxy</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>arm_client</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwn_poller_arm_events</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>poller</name></name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>arm_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <return>return <expr><ternary><condition><expr><name>rc</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>ret</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_proxy_endpoint_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>proxy</name></name> <modifier>*</modifier></type><name>proxy</name> <init>= <expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>proxy</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>proxy</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_STATE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>nbuf</name><index>[<expr><name>IWNUMBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>port</name> <init>= <expr><name>nbuf</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>si</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"/><name>hints</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>ai_family</name>   <operator>=</operator> <name>PF_UNSPEC</name></expr>,
    <expr><operator>.</operator><name>ai_socktype</name> <operator>=</operator> <name>SOCK_STREAM</name></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>rci</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>host</name></name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_FAIL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_ecode_error</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"Proxy | getaddrinfo() fail %s:%d %s"</literal></expr></argument>, <argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>port</name></name></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>si</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>saddr</name><index>[<expr><name>INET6_ADDRSTRLEN</name> <operator>+</operator> <literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name><operator>*</operator><operator>)</operator> <name>sa</name><operator>)</operator><operator>-&gt;</operator><name>sin_addr</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name><operator>*</operator><operator>)</operator> <name>sa</name><operator>)</operator><operator>-&gt;</operator><name>sin6_addr</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_FAIL</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>iwlog_ecode_error</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"Proxy | Unsupported address family: 0x%x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>inet_ntop</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>saddr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>saddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_warn</name><argument_list>(<argument><expr><literal type="string">"Proxy | Error opening socket %s:%d %s %s"</literal></expr></argument>, <argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>port</name></name></expr></argument>, <argument><expr><name>saddr</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_fd_make_non_blocking</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TCP_SYNCNT</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name><name>proxy</name><operator>-&gt;</operator><name>timeout_connect_sec</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <comment type="line">// Apply 7s default timeout on Linux</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>syn_ret</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>                     <comment type="line">// Send a total of 3 SYN packets</comment>
      <expr_stmt><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_SYNCNT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>syn_ret</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>syn_ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <do>do <block>{<block_content>
      <expr_stmt><expr><name>rci</name> <operator>=</operator> <call><name>connect</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>;</do>

    <if_stmt><if>if <condition>(<expr><name>rci</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EAGAIN</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EINPROGRESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_warn</name><argument_list>(<argument><expr><literal type="string">"Proxy | Error connecting %s %s %s"</literal></expr></argument>, <argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>url_raw</name></name></expr></argument>, <argument><expr><name>saddr</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <break>break;</break>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_FAIL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_ecode_error</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"Proxy | Invalid endpoint address provided: %s"</literal></expr></argument>, <argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>url_raw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>++</operator><name><name>client</name><operator>-&gt;</operator><name>refs</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <macro><name>iwn_poller_add</name><argument_list>(<argument>&amp;(struct iwn_poller_task) {
    .fd = fd</argument>,
    <argument>.user_data = client</argument>,
    <argument>.poller = client-&gt;poller</argument>,
    <argument>.on_ready = _proxy_endpoint_on_ready</argument>,
    <argument>.on_dispose = _proxy_endpoint_on_dispose</argument>,
    <argument>.timeout = proxy-&gt;timeout_data_sec</argument>,
    <argument>.events = IWN_POLLOUT</argument>,
    <argument>.events_mod = IWN_POLLET</argument>,
  <argument>}</argument>)</argument_list></macro></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_client_unref</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>proxy</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>proxy</name><operator>-&gt;</operator><name>timeout_connect_sec</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>++</operator><name><name>client</name><operator>-&gt;</operator><name>refs</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <macro><name>iwn_schedule2</name><argument_list>(<argument>&amp;(struct iwn_scheduler_spec) {
      .poller = client-&gt;poller</argument>,
      <argument>.user_data = client</argument>,
      <argument>.task_fn = _proxy_connect_check_timeout</argument>,
      <argument>.on_cancel = _proxy_connect_check_cancel</argument>,
      <argument>.timeout_ms = <literal type="number">1000U</literal> * proxy-&gt;timeout_connect_sec</argument>,
    <argument>}</argument>, <argument>&amp;fd</argument>)</argument_list></macro></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_client_unref</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="line">// Do not allow this error to be propagated</comment>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>proxy</name><operator>-&gt;</operator><name>fd_timeout</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_proxy_to_client_write_lk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>proxy</name></name> <modifier>*</modifier></type><name>proxy</name> <init>= <expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>proxy</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>from_endpoint_buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>rci</name> <init>= <expr><call><name>write</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>from_endpoint_buf</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>from_endpoint_buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rci</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EAGAIN</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rci</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_EOF</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>iwxstr_shift</name><argument_list>(<argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>from_endpoint_buf</name></name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_proxy_from_client_read_lk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>rci</name> <init>= <expr><call><name>read</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rci</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EAGAIN</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rci</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_EOF</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwxstr_cat</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>proxy</name><operator>.</operator><name>to_endpoint_buf</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>_proxy_client_on_ready</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller_adapter</name></name> <modifier>*</modifier></type><name>pa</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>events</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <comment type="line">// force ret to be &gt; 0 in order to not apply default slot events mask (IWN_POLLIN)</comment>
  <comment type="line">// do read client channel only if proxy endpoint in connected state.</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>ret</name> <init>= <expr><name>IWN_POLLET</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>arm_endpoint</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>proxy</name></name> <modifier>*</modifier></type><name>proxy</name> <init>= <expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>proxy</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>IWN_POLLIN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proxy</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_proxy_from_client_read_lk</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proxy</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>IWN_POLLOUT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proxy</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_proxy_to_client_write_lk</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proxy</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proxy</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>proxy</name><operator>-&gt;</operator><name>connected</name></name> <operator>&amp;&amp;</operator> <call><name>iwxstr_size</name><argument_list>(<argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>to_endpoint_buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>arm_endpoint</name> <operator>|=</operator> <name>IWN_POLLOUT</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proxy</name><operator>-&gt;</operator><name>channel_buf_max_size</name></name> <operator>||</operator> <call><name>iwxstr_size</name><argument_list>(<argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>to_endpoint_buf</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>proxy</name><operator>-&gt;</operator><name>channel_buf_max_size</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>|=</operator> <name>IWN_POLLIN</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>from_endpoint_buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>|=</operator> <name>IWN_POLLOUT</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>proxy</name><operator>-&gt;</operator><name>disconnected</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>arm_endpoint</name> <operator>|=</operator> <name>IWN_POLLIN</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proxy</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>arm_endpoint</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwn_poller_arm_events</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>poller</name></name></expr></argument>, <argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>arm_endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <return>return <expr><ternary><condition><expr><name>rc</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>ret</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_proxy_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>proxy</name></name> <modifier>*</modifier></type><name>proxy</name> <init>= <expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>proxy</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proxy</name><operator>-&gt;</operator><name>url_raw</name></name> <operator>||</operator> <name><name>proxy</name><operator>-&gt;</operator><name>rc</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>proxy</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>IW_ERROR_INVALID_STATE</name></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proxy</name><operator>-&gt;</operator><name>channel_buf_max_size</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>proxy</name><operator>-&gt;</operator><name>channel_buf_max_size</name></name> <operator>=</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt> <comment type="line">// 1 Mb</comment>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proxy</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCB</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>from_endpoint_buf</name></name> <operator>=</operator> <call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>RCB</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>to_endpoint_buf</name></name> <operator>=</operator> <call><name>iwxstr_wrap</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>proxy</name><operator>-&gt;</operator><name>headers</name><operator>.</operator><name>first</name></name></expr>)</condition> <block>{<block_content>              <comment type="line">// We have an extra headers for proxy endpoint</comment>
    <for>for <control>(<init><decl><type><name><name>struct</name> <name>iwn_pair</name></name> <modifier>*</modifier><name>p</name></type> <init>= <expr><name><name>proxy</name><operator>-&gt;</operator><name>headers</name><operator>.</operator><name>first</name></name></expr></init></decl>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>iwxstr_insert_printf</name><argument_list>(<argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>to_endpoint_buf</name></name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>index</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
                           <argument><expr><literal type="string">"%.*s: %.*s\r\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>p</name><operator>-&gt;</operator><name>key_len</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>p</name><operator>-&gt;</operator><name>val_len</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_proxy_endpoint_connect</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// Restore the original stream buffer</comment>
    <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <call><name>iwxstr_asize</name><argument_list>(<argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>to_endpoint_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>iwxstr_size</name><argument_list>(<argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>to_endpoint_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <call><name>iwxstr_destroy_keep_ptr</name><argument_list>(<argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>to_endpoint_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>proxy</name><operator>-&gt;</operator><name>to_endpoint_buf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name><name>client</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>injected_poller_evh</name></name> <operator>=</operator> <name>_proxy_client_on_ready</name></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>proxy</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_proxy_destroy</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_http_proxy_is_error</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>req</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>client</name><operator>-&gt;</operator><name>proxy</name><operator>.</operator><name>rc</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_http_proxy_is_enabled</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>req</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>client</name><operator>-&gt;</operator><name>proxy</name><operator>.</operator><name>url_raw</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_http_proxy_timeout_connect_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>timeout_sec</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>req</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>proxy</name><operator>.</operator><name>timeout_connect_sec</name></name> <operator>=</operator> <name>timeout_sec</name></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_http_proxy_timeout_data_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>timeout_sec</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>req</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>proxy</name><operator>.</operator><name>timeout_data_sec</name></name> <operator>=</operator> <name>timeout_sec</name></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_http_proxy_channel_buf_max_size_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>req</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>proxy</name><operator>.</operator><name>channel_buf_max_size</name></name> <operator>=</operator> <name>max_size</name></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_http_proxy_header_set</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>          <modifier>*</modifier></type><name>header_name</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>          <modifier>*</modifier></type><name>header_value</name></decl></parameter>,
  <parameter><decl><type><name>ssize_t</name></type>              <name>header_value_len</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>req</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>header_name_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>header_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hname</name> <init>= <expr><call><name>iwpool_strndup2</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>header_name</name></expr></argument>, <argument><expr><name>header_name_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hname</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hvalue</name> <init>= <expr><call><name>iwpool_strndup2</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>header_value</name></expr></argument>, <argument><expr><name>header_value_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hvalue</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>iwn_pair_add_pool</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>,
                           <argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>proxy</name><operator>.</operator><name>headers</name></name></expr></argument>,
                           <argument><expr><name>hname</name></expr></argument>, <argument><expr><name>header_name_len</name></expr></argument>,
                           <argument><expr><name>hvalue</name></expr></argument>, <argument><expr><name>header_value_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_http_proxy_url_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>url_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>url</name> <operator>||</operator> <operator>!</operator><name>req</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>url_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>url_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>req</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>proxy</name></name> <modifier>*</modifier></type><name>proxy</name> <init>= <expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>proxy</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>proxy</name><operator>.</operator><name>url_raw</name></name></expr>)</condition> <block>{<block_content> <comment type="line">// url is set already</comment>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>urlbuf</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCB</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name>urlbuf</name> <operator>=</operator> <call><name>iwpool_strndup2</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>url_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCB</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>proxy</name><operator>.</operator><name>url_raw</name></name> <operator>=</operator> <call><name>iwpool_strndup2</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>url_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>iwn_url_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proxy</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>urlbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_INVALID_VALUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_ecode_error</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"Proxy | Malformed endpoint url: %s"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proxy</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>scheme</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>proxy</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>scheme</name></name> <operator>=</operator> <literal type="string">"http"</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>scheme</name></name></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_UNSUPPORTED</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_ecode_error</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"Proxy | %s protocol is not supported, url: %s"</literal></expr></argument>, <argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>scheme</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proxy</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>path</name></name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>proxy</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>path</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_UNSUPPORTED</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_ecode_error</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"Proxy | Non root url paths are not supported, url: %s"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proxy</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>port</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>proxy</name><operator>-&gt;</operator><name>url</name><operator>.</operator><name>port</name></name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>proxy</name><operator>.</operator><name>rc</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_proxy_check</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>proxy_handler</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(  <expr><call><name><name>client</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>proxy_handler</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>request</name></name></expr></argument>)</argument_list></call>
       <operator>&amp;&amp;</operator> <name><name>client</name><operator>-&gt;</operator><name>proxy</name><operator>.</operator><name>url_raw</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>_proxy_init</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>token</name></name></type> <name>_token_parse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>server</name> <init>= <expr><name><name>client</name><operator>-&gt;</operator><name>server</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>parser</name></name> <modifier>*</modifier></type><name>parser</name> <init>= <expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>parser</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>stream</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>stream</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>token</name></name></type> <name>token</name> <init>= <expr><call><name>_meta_emit_token</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>token</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>HS_TOK_NONE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>token</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><call><name>_stream_next</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int8_t</name></type> <name>type</name> <init>= <expr><ternary><condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>HS_ETC</name></expr> </then><else>: <expr><name><name>_ctype</name><index>[<expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>c</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int8_t</name></type> <name>to</name> <init>= <expr><name><name>_transitions</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>*</operator> <name>HS_CHAR_TYPE_LEN</name> <operator>+</operator> <name>type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>to</name> <operator>==</operator> <name>HN</name></expr>)</condition> <block>{<block_content> <comment type="line">// Headers end</comment>
      <if_stmt><if>if <condition>(<expr><call><name>_proxy_check</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>token</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>HS_TOK_NONE</name></expr>;</expr_stmt>
        <return>return <expr><name>token</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>to</name> <operator>==</operator> <name>BD</name> <operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>HN</name> <operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>meta</name></name> <operator>==</operator> <name>M_ZER</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>to</name> <operator>=</operator> <name>CS</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int8_t</name></type> <name>from</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>to</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>token</name></name></type> <name>emitted</name> <init>= <expr><call><name>_transition</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>_stream_consume</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>emitted</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>HS_TOK_NONE</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>emitted</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>CB</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_stream_shift</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>_meta_emit_token</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>token</name></name> <modifier>*</modifier></type><name>ct</name> <init>= <expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>token</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(  <expr><name><name>ct</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>HS_TOK_CHUNK_BODY</name>
     <operator>&amp;&amp;</operator> <name><name>ct</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>HS_TOK_BODY</name>
     <operator>&amp;&amp;</operator> <name><name>ct</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>request_token_max_len</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>token</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>HS_TOK_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>token</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>iwn_val</name></name></type> <name>_token_get_string</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>token_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>ret</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>buf</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>client</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>token</name></name></type> <name>token</name> <init>= <expr><name><name>client</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>token</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>token_type</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>ret</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>buf</name><index>[<expr><name><name>token</name><operator>.</operator><name>index</name></name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ret</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>token</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
      <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_client_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>token</name></name></type> <name>token</name></decl>;</decl_stmt>

<label><name>again</name>:</label>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>HTTP_SESSION_READ</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>request_timeout_sec</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwn_poller_set_timeout</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>poller</name></name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>request_timeout_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_client_read_bytes</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>HTTP_END_SESSION</name></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>_token_parse</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>token</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>HS_TOK_NONE</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>IW_UNLIKELY</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>size</name></name> <operator>==</operator> <name><name>client</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>ssize_t</name></type> <name>ncap</name> <init>= <expr><name><name>client</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>capacity</name></name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>token</name></name> <modifier>*</modifier></type><name>nbuf</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>ncap</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nbuf</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>HTTP_END_SESSION</name></expr>;</expr_stmt>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>nbuf</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <name>ncap</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>buf</name><index>[<expr><name><name>client</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>size</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <switch>switch <condition>(<expr><name><name>token</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>HS_TOK_ERROR</name></expr>:</case>
        <expr_stmt><expr><call><name>_client_response_error</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>, <argument><expr><literal type="string">"Bad request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>HS_TOK_BODY</name></expr>:</case>
        <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>HTTP_SESSION_NOP</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>token</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <comment type="line">// We have allocated one extra byte behind client-&gt;stream-capacity</comment>
          <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>buf</name><index>[<expr><name><name>token</name><operator>.</operator><name>index</name></name> <operator>+</operator> <name><name>token</name><operator>.</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>client</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>request_handler</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>request</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>HTTP_END_SESSION</name></expr>;</expr_stmt>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      <case>case <expr><name>HS_TOK_BODY_STREAM</name></expr>:</case>
        <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>HTTP_SESSION_NOP</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>HTTP_STREAMED</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>client</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>request_handler</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>request</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>HTTP_END_SESSION</name></expr>;</expr_stmt>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      <case>case <expr><name>HS_TOK_CHUNK_BODY</name></expr>:</case>
        <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>HTTP_SESSION_NOP</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>again</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>client</name><operator>-&gt;</operator><name>chunk_cb</name></name> <operator>||</operator> <operator>!</operator><call><name><name>client</name><operator>-&gt;</operator><name>chunk_cb</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>again</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>HTTP_END_SESSION</name></expr>;</expr_stmt>
          <return>return;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>again</name></expr>)</condition> <block>{<block_content>
          <goto>goto <name>again</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block> while <condition>(<expr><name><name>token</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>HS_TOK_NONE</name> <operator>&amp;&amp;</operator> <name><name>client</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>HTTP_SESSION_READ</name></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>_client_on_poller_adapter_event</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller_adapter</name></name> <modifier>*</modifier></type><name>pa</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>events</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>poller_adapter</name></name> <operator>!=</operator> <name>pa</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>poller_adapter</name></name> <operator>=</operator> <name>pa</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>injected_poller_evh</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name><name>client</name><operator>-&gt;</operator><name>injected_poller_evh</name></name><argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name>events</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>resp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>HTTP_SESSION_INIT</name></expr>:</case>
      <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_client_init</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>HTTP_SESSION_READ</name></expr>;</expr_stmt>
    <comment type="line">// NOTE: Fallthrough</comment>
    <case>case <expr><name>HTTP_SESSION_READ</name></expr>:</case>
      <expr_stmt><expr><call><name>_client_read</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HTTP_SESSION_WRITE</name></expr>:</case>
      <expr_stmt><expr><call><name>_client_write</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
  <if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HTTP_END_SESSION</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>resp</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>resp</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>resp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwn_http_inject_poller_events_handler</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>, <parameter><decl><type><name>iwn_on_poller_adapter_event</name></type> <name>eh</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>request</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>injected_poller_evh</name></name> <operator>=</operator> <name>eh</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_client_on_poller_adapter_dispose</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller_adapter</name></name> <modifier>*</modifier></type><name>pa</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>proxy</name><operator>.</operator><name>fd</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> <comment type="line">// Shutdown associated proxy channel</comment>
    <expr_stmt><expr><call><name>iwn_poller_remove</name><argument_list>(<argument><expr><name><name>pa</name><operator>-&gt;</operator><name>poller</name></name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>proxy</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>_client_unref</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_client_accept</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>sockaddr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>iwpool_create_empty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><call><name>iwpool_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>client</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>client</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>poller</name></name> <operator>=</operator> <name><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>poller</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>proxy</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>proxy</name><operator>.</operator><name>fd_timeout</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>refs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>sockaddr</name></name></expr></argument>, <argument><expr><name>sockaddr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>sockaddr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>sockaddr</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name><operator>*</operator><operator>)</operator> <name>sa</name><operator>)</operator><operator>-&gt;</operator><name>sin_addr</name><operator>)</operator></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name><operator>*</operator><operator>)</operator> <name>sa</name><operator>)</operator><operator>-&gt;</operator><name>sin6_addr</name><operator>)</operator></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>pthread_mutexattr_t</name></type> <name>attr</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_mutexattr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutexattr_settype</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>PTHREAD_MUTEX_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>user_mtx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutexattr_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_server_ref</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>server_user_data</name></name> <operator>=</operator> <name><name>client</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>user_data</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCN</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCN</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>-&gt;</operator><name>https</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>mtx_ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <macro><name>iwn_brssl_server_poller_adapter</name><argument_list>(<argument>&amp;(struct iwn_brssl_server_poller_adapter_spec) {
      .certs = server-&gt;spec.ssl.certs</argument>,
      <argument>.certs_in_buffer = server-&gt;spec.ssl.certs_in_buffer</argument>,
      <argument>.certs_len = server-&gt;spec.ssl.certs_len</argument>,
      <argument>.events = IWN_POLLIN</argument>,
      <argument>.events_mod = IWN_POLLET</argument>,
      <argument>.fd = fd</argument>,
      <argument>.on_dispose = _client_on_poller_adapter_dispose</argument>,
      <argument>.on_event = _client_on_poller_adapter_event</argument>,
      <argument>.poller = server-&gt;spec.poller</argument>,
      <argument>.private_key = server-&gt;spec.ssl.private_key</argument>,
      <argument>.private_key_in_buffer = server-&gt;spec.ssl.private_key_in_buffer</argument>,
      <argument>.private_key_len = server-&gt;spec.ssl.private_key_len</argument>,
      <argument>.timeout_sec = server-&gt;spec.request_timeout_sec</argument>,
      <argument>.user_data = client</argument>,
    <argument>}</argument>)</argument_list></macro></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>mtx_ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwn_direct_poller_adapter</name><argument_list>(
      <argument><expr><name><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>poller</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>,
      <argument><expr><name>_client_on_poller_adapter_event</name></expr></argument>,
      <argument><expr><name>_client_on_poller_adapter_dispose</name></expr></argument>,
      <argument><expr><name>client</name></expr></argument>, <argument><expr><name>IWN_POLLIN</name></expr></argument>, <argument><expr><name>IWN_POLLET</name></expr></argument>,
      <argument><expr><name><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>request_timeout_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>client</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_client_unref</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="line" format="doxygen">///////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">//								      Client Public API                                //</comment>
<comment type="line" format="doxygen">///////////////////////////////////////////////////////////////////////////</comment>

<function><type><name>bool</name></type> <name>iwn_http_request_is_streamed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>request</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HTTP_STREAMED</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_http_request_is_secure</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>request</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>client</name><operator>-&gt;</operator><name>server</name><operator>-&gt;</operator><name>https</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>iwn_http_request_remote_ip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>request</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>client</name><operator>-&gt;</operator><name>ip</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>iwn_http_request_target</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_token_get_string</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>request</name></expr></argument>, <argument><expr><name>HS_TOK_TARGET</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_http_request_target_is</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>target_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>val</name> <init>= <expr><call><name>iwn_http_request_target</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>target_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>target_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><name>val</name><operator>.</operator><name>len</name></name> <operator>==</operator> <name>target_len</name> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>target_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>iwn_http_request_method</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_token_get_string</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>request</name></expr></argument>, <argument><expr><name>HS_TOK_METHOD</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>iwn_http_request_body</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_token_get_string</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>request</name></expr></argument>, <argument><expr><name>HS_TOK_BODY</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwn_http_request_user_lock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>user_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwn_http_request_user_unlock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>user_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwn_http_request_chunk_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>, <parameter><decl><type><name>iwn_http_server_chunk_handler</name></type> <name>chunk_cb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>request</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>chunk_cb</name></name> <operator>=</operator> <name>chunk_cb</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_client_read</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>iwn_http_request_chunk_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>request</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>token</name></name> <modifier>*</modifier></type><name>token</name> <init>= <expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>buf</name><index>[<expr><name><name>client</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator>struct <name>iwn_val</name><operator>)</operator> <block>{
           <expr><operator>.</operator><name>buf</name> <operator>=</operator> <operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>buf</name><index>[<expr><name><name>token</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr>,
           <expr><operator>.</operator><name>len</name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>len</name></name></expr>
  }</block></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwn_http_connection_set_automatic</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>request</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>HTTP_AUTOMATIC</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_KEEP_ALIVE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwn_http_connection_set_keep_alive</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>keep_alive</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>request</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_AUTOMATIC</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>keep_alive</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>HTTP_KEEP_ALIVE</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_KEEP_ALIVE</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwn_http_connection_set_upgrade</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>request</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_AUTOMATIC</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_KEEP_ALIVE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>HTTP_UPGRADE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_http_connection_is_upgrade</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>request</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HTTP_UPGRADE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>iwn_http_request_header_get</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>          <modifier>*</modifier></type><name>header_name</name></decl></parameter>,
  <parameter><decl><type><name>ssize_t</name></type>              <name>header_name_len</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>request</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>header_name_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>header_name_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>header_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>client</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>token</name></name></type> <name>token</name> <init>= <expr><name><name>client</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>token</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>HS_TOK_HEADER_KEY</name> <operator>&amp;&amp;</operator> <name><name>token</name><operator>.</operator><name>len</name></name> <operator>==</operator> <name>header_name_len</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>buf</name><index>[<expr><name><name>token</name><operator>.</operator><name>index</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>header_name</name></expr></argument>, <argument><expr><name>header_name_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>token</name> <operator>=</operator> <name><name>client</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator>struct <name>iwn_val</name><operator>)</operator> <block>{
                 <expr><operator>.</operator><name>buf</name> <operator>=</operator> <operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>buf</name><index>[<expr><name><name>token</name><operator>.</operator><name>index</name></name></expr>]</index></name></expr>,
                 <expr><operator>.</operator><name>len</name> <operator>=</operator> <name><name>token</name><operator>.</operator><name>len</name></name></expr>
        }</block></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><operator>(</operator>struct <name>iwn_val</name><operator>)</operator> <block>{}</block></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_iteration_headers_assign</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>client</name></name>  <modifier>*</modifier></type><name>client</name></decl></parameter>,
  <parameter><decl><type><name><name>struct</name> <name>iwn_val</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
  <parameter><decl><type><name><name>struct</name> <name>iwn_val</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>,
  <parameter><decl><type><name>int</name>            <modifier>*</modifier></type><name>iter</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>token</name></name></type> <name>token</name> <init>= <expr><name><name>client</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>buf</name><index>[<expr><operator>*</operator><name>iter</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>buf</name><index>[<expr><operator>*</operator><name>iter</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>HS_TOK_BODY</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <operator>(</operator>struct <name>iwn_val</name><operator>)</operator> <block>{
    <expr><operator>.</operator><name>buf</name> <operator>=</operator> <operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>buf</name><index>[<expr><name><name>token</name><operator>.</operator><name>index</name></name></expr>]</index></name></expr>,
    <expr><operator>.</operator><name>len</name> <operator>=</operator> <name><name>token</name><operator>.</operator><name>len</name></name></expr>
  }</block></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>iter</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>token</name> <operator>=</operator> <name><name>client</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>buf</name><index>[<expr><operator>*</operator><name>iter</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <operator>(</operator>struct <name>iwn_val</name><operator>)</operator> <block>{
    <expr><operator>.</operator><name>buf</name> <operator>=</operator> <operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>buf</name><index>[<expr><name><name>token</name><operator>.</operator><name>index</name></name></expr>]</index></name></expr>,
    <expr><operator>.</operator><name>len</name> <operator>=</operator> <name><name>token</name><operator>.</operator><name>len</name></name></expr>
  }</block></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_http_request_headers_iterate</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>,
  <parameter><decl><type><name><name>struct</name> <name>iwn_val</name></name>      <modifier>*</modifier></type><name>key</name></decl></parameter>,
  <parameter><decl><type><name><name>struct</name> <name>iwn_val</name></name>      <modifier>*</modifier></type><name>val</name></decl></parameter>,
  <parameter><decl><type><name>int</name>                 <modifier>*</modifier></type><name>iter</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>request</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>iter</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <for>for <control>( <init>;</init> <condition><expr><operator>*</operator><name>iter</name> <operator>&lt;</operator> <name><name>client</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>(</operator><operator>*</operator><name>iter</name><operator>)</operator><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>token</name></name></type> <name>token</name> <init>= <expr><name><name>client</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>buf</name><index>[<expr><operator>*</operator><name>iter</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>token</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>HS_TOK_HEADER_KEY</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>_iteration_headers_assign</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>iter</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
    <return>return <expr><call><name>_iteration_headers_assign</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>iwn_http_response_code_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><operator>(</operator>struct <name>client</name><operator>*</operator><operator>)</operator> <name>request</name><operator>)</operator><operator>-&gt;</operator><name><name>response</name><operator>.</operator><name>code</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_http_response_code_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>code</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>code</name></expr></argument> &gt;</argument_list></name> <literal type="number">599</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>request</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>iwn_http_response_header_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>request</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name><name>struct</name> <name>header</name></name> <modifier>*</modifier><name>h</name></type> <init>= <expr><name><name>client</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>headers</name></name></expr></init></decl>;</init> <condition><expr><name>h</name></expr>;</condition> <incr><expr><name>h</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>header_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>(</operator>struct <name>iwn_val</name><operator>)</operator> <block>{
               <expr><operator>.</operator><name>buf</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>value</name></name></expr>,
               <expr><operator>.</operator><name>len</name> <operator>=</operator> <macro><name>strlen</name><argument_list>(<argument>h-&gt;value</argument>)</argument_list></macro></expr>
      }</block></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><operator>(</operator>struct <name>iwn_val</name><operator>)</operator> <block>{}</block></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_http_response_header_add</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>          <modifier>*</modifier></type><name>header_name</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>          <modifier>*</modifier></type><name>header_value</name></decl></parameter>,
  <parameter><decl><type><name>ssize_t</name></type>              <name>header_value_len</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>request</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>response</name></name> <modifier>*</modifier></type><name>response</name> <init>= <expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>response</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>header</name></name> <modifier>*</modifier></type><name>header</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>header_value_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>header_value_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>header_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>response</name><operator>-&gt;</operator><name>pool</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name><name>response</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <call><name>iwpool_create_empty</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name>header</name> <operator>=</operator> <call><name>iwpool_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>response</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>iwpool_strdup2</name><argument_list>(<argument><expr><name><name>response</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>header_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>header</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <call><name>tolower</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>iwpool_strndup2</name><argument_list>(<argument><expr><name><name>response</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>header_value</name></expr></argument>, <argument><expr><name>header_value_len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>response</name><operator>-&gt;</operator><name>headers</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>response</name><operator>-&gt;</operator><name>headers</name></name> <operator>=</operator> <name>header</name></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_http_response_header_set</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>          <modifier>*</modifier></type><name>header_name</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>          <modifier>*</modifier></type><name>header_value</name></decl></parameter>,
  <parameter><decl><type><name>ssize_t</name></type>              <name>header_value_len</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>request</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>response</name></name> <modifier>*</modifier></type><name>response</name> <init>= <expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>response</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>header</name></name> <modifier>*</modifier></type><name>header</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>header_value_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>header_value_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>header_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>response</name><operator>-&gt;</operator><name>pool</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name><name>response</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <call><name>iwpool_create_empty</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name><name>struct</name> <name>header</name></name> <modifier>*</modifier><name>h</name></type> <init>= <expr><name><name>response</name><operator>-&gt;</operator><name>headers</name></name></expr></init></decl>;</init> <condition><expr><name>h</name></expr>;</condition> <incr><expr><name>h</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>header_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>header</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><call><name>IW_LIKELY</name><argument_list>(<argument><expr><name>header</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name>header</name> <operator>=</operator> <call><name>iwpool_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>response</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>iwpool_strdup2</name><argument_list>(<argument><expr><name><name>response</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>header_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>header</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <call><name>tolower</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>iwpool_strndup2</name><argument_list>(<argument><expr><name><name>response</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>header_value</name></expr></argument>, <argument><expr><name>header_value_len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>response</name><operator>-&gt;</operator><name>headers</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>response</name><operator>-&gt;</operator><name>headers</name></name> <operator>=</operator> <name>header</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>iwpool_strndup2</name><argument_list>(<argument><expr><name><name>response</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>header_value</name></expr></argument>, <argument><expr><name>header_value_len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_http_response_header_i64_set</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>          <modifier>*</modifier></type><name>header_name</name></decl></parameter>,
  <parameter><decl><type><name>int64_t</name></type>              <name>header_value</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>header_value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>iwn_http_response_header_set</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>header_name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_http_response_header_printf_va</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>          <modifier>*</modifier></type><name>header_name</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>          <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
  <parameter><decl><type><name>va_list</name></type>              <name>va</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>va_list</name></type> <name>cva</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>cva</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_FAIL</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name>wp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>cva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_FAIL</name></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwn_http_response_header_set</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>header_name</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>cva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>buf</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_http_response_header_printf</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>          <modifier>*</modifier></type><name>header_name</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>          <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
  <parameter><decl><type><modifier>...</modifier></type></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwn_http_response_header_printf_va</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>header_name</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwn_http_response_body_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>request</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>body</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>body_free</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>client</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>body_free</name></name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>client</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>body_free</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>body</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwn_http_response_body_set</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>          <modifier>*</modifier></type><name>body</name></decl></parameter>,
  <parameter><decl><type><name>ssize_t</name></type>              <name>body_len</name></decl></parameter>,
  <parameter><function_decl><type><name>void</name></type> (              <modifier>*</modifier><name>body_free</name> )<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>
  )</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>body</name> <operator>||</operator> <name>body_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwn_http_response_body_clear</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>request</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>body_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>body_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>iwn_http_response_body_clear</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>body</name></name> <operator>=</operator> <name>body</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>body_len</name></name> <operator>=</operator> <name>body_len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>body_free</name></name> <operator>=</operator> <name>body_free</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_client_autodetect_keep_alive</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>val</name> <init>= <expr><call><name>_token_get_string</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>HS_TOK_VERSION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>val</name><operator>.</operator><name>buf</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>version</name> <init>= <expr><name><name>val</name><operator>.</operator><name>buf</name><index>[<expr><name><name>val</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>iwn_http_request_header_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><literal type="string">"connection"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"connection"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(  <expr><operator>(</operator><name><name>val</name><operator>.</operator><name>len</name></name> <operator>==</operator> <call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>
     <operator>||</operator> <operator>(</operator><name><name>val</name><operator>.</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>version</name> <operator>==</operator> <name>HTTP_1_0</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_KEEP_ALIVE</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>HTTP_KEEP_ALIVE</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_client_response_headers_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name><name>struct</name> <name>header</name></name> <modifier>*</modifier><name>h</name></type> <init>= <expr><name><name>client</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>headers</name></name></expr></init></decl>;</init> <condition><expr><name>h</name></expr>;</condition> <incr><expr><name>h</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_printf</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"%s: %s\r\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>HTTP_CHUNKED_RESPONSE</name> <operator>|</operator> <name>HTTP_STREAM_RESPONSE</name> <operator>|</operator> <name>HTTP_HAS_CONTENT_LEN</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_printf</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"content-length: %d\r\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>client</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>body_len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwxstr_cat</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_client_response_headers_write_http</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>val</name> <init>= <expr><call><name>iwn_http_response_header_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><literal type="string">"content-length"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>val</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>HTTP_HAS_CONTENT_LEN</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HTTP_AUTOMATIC</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_client_autodetect_keep_alive</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>on_response_headers_write</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>client</name><operator>-&gt;</operator><name>request</name><operator>.</operator><name>on_response_headers_write</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>_wf_on_response_headers_write</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>client</name><operator>-&gt;</operator><name>_wf_on_response_headers_write</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IW_UNLIKELY</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HTTP_UPGRADE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwn_http_response_header_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><literal type="string">"connection"</literal></expr></argument>, <argument><expr><literal type="string">"upgrade"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"upgrade"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HTTP_KEEP_ALIVE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwn_http_response_header_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><literal type="string">"connection"</literal></expr></argument>, <argument><expr><literal type="string">"keep-alive"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"keep-alive"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>iwn_http_response_header_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><literal type="string">"connection"</literal></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>code</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>code</name></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>dbuf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>_server_time</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name>dbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_printf</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"HTTP/1.1 %d %s\r\ndate: %s\r\n"</literal></expr></argument>,
                                <argument><expr><name><name>client</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>code</name></name></expr></argument>,
                                <argument><expr><name><name>_status_text</name><index>[<expr><name><name>client</name><operator>-&gt;</operator><name>response</name><operator>.</operator><name>code</name></name></expr>]</index></name></expr></argument>,
                                <argument><expr><name>dbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_client_response_headers_write</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>_client_response_setbuf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>_stream_free_buffer</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>stream</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>stream</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>iwxstr_size</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>iwxstr_destroy_keep_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>HTTP_SESSION_WRITE</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_response_free</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>_client_response_setbuf2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>buf_len</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>buf_free</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>_stream_free_buffer</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>stream</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>stream</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_free</name></name> <operator>=</operator> <name>buf_free</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>buf_len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>HTTP_SESSION_WRITE</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_response_free</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_http_response_end</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>request</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>response</name></name> <modifier>*</modifier></type><name>response</name> <init>= <expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>response</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>xstr</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_client_response_headers_write_http</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>response</name><operator>-&gt;</operator><name>body</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_cat</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><name><name>response</name><operator>-&gt;</operator><name>body</name></name></expr></argument>, <argument><expr><name><name>response</name><operator>-&gt;</operator><name>body_len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>_client_response_setbuf</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_client_write</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_http_response_stream_start</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name>          <modifier>*</modifier></type><name>request</name></decl></parameter>,
  <parameter><decl><type><name>iwn_http_server_chunk_handler</name></type> <name>chunk_cb</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>request</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>xstr</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>chunk_cb</name></name> <operator>=</operator> <name>chunk_cb</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HTTP_STREAM_RESPONSE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>HTTP_STREAM_RESPONSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_client_response_headers_write_http</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>_client_response_setbuf</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_client_write</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwn_http_response_stream_write</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name>          <modifier>*</modifier></type><name>request</name></decl></parameter>,
  <parameter><decl><type><name>char</name>                         <modifier>*</modifier></type><name>buf</name></decl></parameter>,
  <parameter><decl><type><name>ssize_t</name></type>                       <name>buf_len</name></decl></parameter>,
  <parameter><function_decl><type><name>void</name></type> (                       <modifier>*</modifier><name>buf_free</name> )<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
  <parameter><decl><type><name>iwn_http_server_chunk_handler</name></type> <name>chunk_cb</name></decl></parameter>,
  <parameter><decl><type><name>bool</name>                         <modifier>*</modifier></type><name>again</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf_free</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>buf_free</name> <operator>=</operator> <name>_noop_free</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>buf_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>buf_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>request</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>chunk_cb</name></name> <operator>=</operator> <name>chunk_cb</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>chunk_cb</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>again</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>again</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_STREAM_RESPONSE</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>_client_response_setbuf2</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>buf_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>again</name> <operator>||</operator> <operator>*</operator><name>again</name> <operator>!=</operator> <name>true</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_client_write</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwn_http_response_stream_end</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>iwn_http_response_stream_write</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_http_response_chunk_write</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name>          <modifier>*</modifier></type><name>request</name></decl></parameter>,
  <parameter><decl><type><name>char</name>                         <modifier>*</modifier></type><name>body</name></decl></parameter>,
  <parameter><decl><type><name>ssize_t</name></type>                       <name>body_len</name></decl></parameter>,
  <parameter><decl><type><name>iwn_http_server_chunk_handler</name></type> <name>chunk_cb</name></decl></parameter>,
  <parameter><decl><type><name>bool</name>                         <modifier>*</modifier></type><name>again</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>request</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>body_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>body_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>xstr</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>chunk_cb</name></name> <operator>=</operator> <name>chunk_cb</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>chunk_cb</name> <operator>&amp;&amp;</operator> <name>again</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>again</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HTTP_CHUNKED_RESPONSE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>HTTP_CHUNKED_RESPONSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwn_http_response_header_set</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"transfer-encoding"</literal></expr></argument>, <argument><expr><literal type="string">"chunked"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"chunked"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_client_response_headers_write_http</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_printf</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"%X\r\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>body_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_cat</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>body_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_cat</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>_client_response_setbuf</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>again</name> <operator>||</operator> <operator>*</operator><name>again</name> <operator>!=</operator> <name>true</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_client_write</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_http_response_chunk_end</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>request</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>xstr</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_cat</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"0\r\n"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"0\r\n"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_client_response_headers_write</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_cat</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_CHUNKED_RESPONSE</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>_client_response_setbuf</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_client_write</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_http_response_write</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type>                  <name>status_code</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>          <modifier>*</modifier></type><name>content_type</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>          <modifier>*</modifier></type><name>body</name></decl></parameter>,
  <parameter><decl><type><name>ssize_t</name></type>              <name>body_len</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_http_response_code_set</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>status_code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>content_type</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>content_type</name> <operator>=</operator> <literal type="string">"text/plain"</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>content_type</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// Content-type header disabled if empty</comment>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_http_response_header_set</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"content-type"</literal></expr></argument>, <argument><expr><name>content_type</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>iwn_http_response_body_set</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>body_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwn_http_response_end</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_http_response_write_jbl</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type>                  <name>status_code</name></decl></parameter>,
  <parameter><decl><type><name>JBL</name></type>                  <name>jbl</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCB</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name>xstr</name> <operator>=</operator> <call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_as_json</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>, <argument><expr><name>jbl_xstr_json_printer</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>,
      <argument><expr><call><name>iwn_http_response_header_set</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"content-type"</literal></expr></argument>, <argument><expr><literal type="string">"application/json"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"application/json"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwn_http_response_body_set</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwn_http_response_end</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_http_response_write_jbn</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type>                  <name>status_code</name></decl></parameter>,
  <parameter><decl><type><name>JBL_NODE</name></type>             <name>n</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCB</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name>xstr</name> <operator>=</operator> <call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbn_as_json</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>jbl_xstr_json_printer</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>,
      <argument><expr><call><name>iwn_http_response_header_set</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"content-type"</literal></expr></argument>, <argument><expr><literal type="string">"application/json"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"application/json"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwn_http_response_body_set</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwn_http_response_end</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_http_response_by_code</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><name><name>_status_text</name><index>[<expr><name>code</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>iwn_http_response_write</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"text/plain"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_http_response_printf_va</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>status_code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content_type</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>va</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>va_list</name></type> <name>cva</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>cva</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_FAIL</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name>wp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>cva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_FAIL</name></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iwn_http_response_write</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>status_code</name></expr></argument>, <argument><expr><name>content_type</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>cva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>buf</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name> <operator>&amp;&amp;</operator> <name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_http_response_printf</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>status_code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content_type</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><call><name>iwn_http_response_printf_va</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>status_code</name></expr></argument>, <argument><expr><name>content_type</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="line" format="doxygen">///////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">//								             Server                                    //</comment>
<comment type="line" format="doxygen">///////////////////////////////////////////////////////////////////////////</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_server_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>server</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>server</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>on_server_dispose</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>on_server_dispose</name></name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>ssl</name><operator>.</operator><name>private_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>mtx_ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>_server_on_ready</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_poller_task</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>events</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>server</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>client_fd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>sockaddr</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>socklen_t</name></type> <name>sockaddr_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>sockaddr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

  <do>do <block>{<block_content>
    <expr_stmt><expr><name>client_fd</name> <operator>=</operator> <call><name>accept</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>sockaddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sockaddr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>client_fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_client_accept</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>client_fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sockaddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_ecode_error</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"Failed to initiate client connection fd: %d"</literal></expr></argument>, <argument><expr><name>client_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block> while <condition>(<expr><literal type="number">1</literal></expr>)</condition>;</do>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_server_ref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>-&gt;</operator><name>refs</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_ASSERTION</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_ecode_error</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"Server instance fd: %d is already disposed"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>server</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name><name>server</name><operator>-&gt;</operator><name>refs</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_server_unref</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>server</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>refs</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>refs</name> <operator>=</operator> <operator>--</operator><name><name>server</name><operator>-&gt;</operator><name>refs</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>refs</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_server_destroy</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_server_on_dispose</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_poller_task</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>server</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>_server_unref</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwn_http_request_wf_set</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>,
  <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>wf_on_request_dispose</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
  <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>wf_on_response_headers_write</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>request</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>_wf_data</name></name> <operator>=</operator> <name>user_data</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>_wf_on_request_dispose</name></name> <operator>=</operator> <name>wf_on_request_dispose</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>_wf_on_response_headers_write</name></name> <operator>=</operator> <name>wf_on_response_headers_write</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>iwn_http_request_wf_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>request</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>client</name><operator>-&gt;</operator><name>_wf_data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwn_http_request_ws_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>request</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>_ws_data</name></name> <operator>=</operator> <name>user_data</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>iwn_http_request_ws_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>client</name></name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>request</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>client</name><operator>-&gt;</operator><name>_ws_data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_probe_ssl_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>slot_data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fn_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>server</name> <init>= <expr><name>slot_data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_http_server_ssl_spec</name></name> <modifier>*</modifier></type><name>ssl</name> <init>= <expr><name>fn_data</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>mtx_ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>ssl</name><operator>.</operator><name>private_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certs_len</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>certs_len</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>ssl</name><operator>.</operator><name>private_key_len</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>private_key_len</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ssl</name><operator>-&gt;</operator><name>certs</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ssl</name><operator>-&gt;</operator><name>certs_len</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certs_len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>certs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certs</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>certs</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certs_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ssl</name><operator>-&gt;</operator><name>private_key</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ssl</name><operator>-&gt;</operator><name>private_key_len</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>ssl</name><operator>.</operator><name>private_key_len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>private_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>ssl</name><operator>.</operator><name>private_key</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>private_key</name></name></expr></argument>, <argument><expr><name><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>ssl</name><operator>.</operator><name>private_key_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>ssl</name><operator>.</operator><name>private_key</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certs_in_buffer</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>certs_in_buffer</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>ssl</name><operator>.</operator><name>private_key_in_buffer</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>private_key_in_buffer</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>https</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>certs</name></name> <operator>&amp;&amp;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>certs_len</name></name> <operator>&amp;&amp;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>private_key</name></name> <operator>&amp;&amp;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>private_key_len</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>mtx_ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_http_server_ssl_set</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name>                     <modifier>*</modifier></type><name>poller</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type>                                    <name>server_fd</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_http_server_ssl_spec</name></name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>iwn_poller_probe</name><argument_list>(<argument><expr><name>poller</name></expr></argument>, <argument><expr><name>server_fd</name></expr></argument>, <argument><expr><name>_probe_ssl_set</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ssl</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_http_server_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_http_server_spec</name></name> <modifier>*</modifier></type><name>spec_</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out_fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>out_fd</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>out_fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>optval</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>server</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_http_server_spec</name></name> <modifier>*</modifier></type><name>spec</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>iwpool_create_empty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name>server</name> <operator>=</operator> <call><name>iwpool_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>server</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>mtx_ssl</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>refs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>spec</name> <operator>=</operator> <operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>spec</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>spec</name></expr></argument>, <argument><expr><name>spec_</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>spec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>spec</name><operator>-&gt;</operator><name>request_handler</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_INVALID_ARGS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_ecode_error2</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"No request_handler specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>spec</name><operator>-&gt;</operator><name>poller</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_INVALID_ARGS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_ecode_error2</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"No poller specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>socket_queue_size</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>spec</name><operator>-&gt;</operator><name>socket_queue_size</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>request_buf_size</name></name> <operator>&lt;</operator> <literal type="number">1023</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>spec</name><operator>-&gt;</operator><name>request_buf_size</name></name> <operator>=</operator> <literal type="number">1023</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>request_timeout_sec</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>spec</name><operator>-&gt;</operator><name>request_timeout_sec</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>request_timeout_keepalive_sec</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>spec</name><operator>-&gt;</operator><name>request_timeout_keepalive_sec</name></name> <operator>=</operator> <literal type="number">120</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>request_token_max_len</name></name> <operator>&lt;</operator> <literal type="number">8191</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>spec</name><operator>-&gt;</operator><name>request_token_max_len</name></name> <operator>=</operator> <literal type="number">8191</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>request_max_headers_count</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>spec</name><operator>-&gt;</operator><name>request_max_headers_count</name></name> <operator>=</operator> <literal type="number">127</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>request_buf_max_size</name></name> <operator>&lt;</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>spec</name><operator>-&gt;</operator><name>request_buf_max_size</name></name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>https</name></name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>ssl</name><operator>.</operator><name>certs</name></name> <operator>&amp;&amp;</operator> <name><name>spec</name><operator>-&gt;</operator><name>ssl</name><operator>.</operator><name>certs_len</name></name> <operator>&amp;&amp;</operator> <name><name>spec</name><operator>-&gt;</operator><name>ssl</name><operator>.</operator><name>private_key</name></name> <operator>&amp;&amp;</operator> <name><name>spec</name><operator>-&gt;</operator><name>ssl</name><operator>.</operator><name>private_key_len</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>server</name><operator>-&gt;</operator><name>https</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>ssl</name><operator>.</operator><name>certs_len</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>spec</name><operator>-&gt;</operator><name>ssl</name><operator>.</operator><name>certs_len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>spec</name><operator>-&gt;</operator><name>ssl</name><operator>.</operator><name>certs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>ssl</name><operator>.</operator><name>private_key_len</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>spec</name><operator>-&gt;</operator><name>ssl</name><operator>.</operator><name>private_key_len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>spec</name><operator>-&gt;</operator><name>ssl</name><operator>.</operator><name>private_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name><name>spec</name><operator>-&gt;</operator><name>ssl</name><operator>.</operator><name>certs</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name><name>spec</name><operator>-&gt;</operator><name>ssl</name><operator>.</operator><name>certs</name></name></expr></argument>, <argument><expr><name><name>spec</name><operator>-&gt;</operator><name>ssl</name><operator>.</operator><name>certs_len</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name><name>spec</name><operator>-&gt;</operator><name>ssl</name><operator>.</operator><name>private_key</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name><name>spec</name><operator>-&gt;</operator><name>ssl</name><operator>.</operator><name>private_key</name></name></expr></argument>, <argument><expr><name><name>spec</name><operator>-&gt;</operator><name>ssl</name><operator>.</operator><name>private_key_len</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>spec</name><operator>-&gt;</operator><name>port</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>spec</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <ternary><condition><expr><name><name>server</name><operator>-&gt;</operator><name>https</name></name></expr> ?</condition><then> <expr><literal type="number">8443</literal></expr> </then><else>: <expr><literal type="number">8080</literal></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>spec</name><operator>-&gt;</operator><name>listen</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>spec</name><operator>-&gt;</operator><name>listen</name></name> <operator>=</operator> <literal type="string">"localhost"</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name><name>spec</name><operator>-&gt;</operator><name>listen</name></name> <operator>=</operator> <call><name>iwpool_strdup2</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>spec</name><operator>-&gt;</operator><name>listen</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_poller_task</name></name></type> <name>task</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>user_data</name>  <operator>=</operator> <name>server</name></expr>,
    <expr><operator>.</operator><name>on_ready</name>   <operator>=</operator> <name>_server_on_ready</name></expr>,
    <expr><operator>.</operator><name>on_dispose</name> <operator>=</operator> <name>_server_on_dispose</name></expr>,
    <expr><operator>.</operator><name>events</name>     <operator>=</operator> <name>IWN_POLLIN</name></expr>,
    <expr><operator>.</operator><name>events_mod</name> <operator>=</operator> <name>IWN_POLLET</name></expr>,
    <expr><operator>.</operator><name>poller</name>     <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>poller</name></name></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>ai_socktype</name> <operator>=</operator> <name>SOCK_STREAM</name></expr>,
    <expr><operator>.</operator><name>ai_family</name>   <operator>=</operator> <name>AF_UNSPEC</name></expr>,
    <expr><operator>.</operator><name>ai_flags</name>    <operator>=</operator> <name>AI_PASSIVE</name></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>result</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>port</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>spec</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><call><name>getaddrinfo</name><argument_list>(<argument><expr><name><name>spec</name><operator>-&gt;</operator><name>listen</name></name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_FAIL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"Error getting local address and port: %s"</literal></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>optval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>rp</name> <operator>=</operator> <name>result</name></expr>;</init> <condition><expr><name>rp</name></expr>;</condition> <incr><expr><name>rp</name> <operator>=</operator> <name><name>rp</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>task</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>rp</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name><name>rp</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr></argument>, <argument><expr><name><name>rp</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name><name>task</name><operator>.</operator><name>fd</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>task</name><operator>.</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>task</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><name>FD_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>task</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_REUSEADDR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optval</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>optval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name><name>task</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>rp</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>rp</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>task</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_ecode_error2</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"Could not find any suitable address to bind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCN</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name>optval</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name><name>task</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCN</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>task</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>optval</name> <operator>|</operator> <name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>listen</name></name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>listen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name><name>task</name><operator>.</operator><name>fd</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>port</name></name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>port</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>server</name><operator>.</operator><name>user_data</name></name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>user_data</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwn_poller_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>task</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>listen</name><argument_list>(<argument><expr><name><name>task</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>spec</name><operator>-&gt;</operator><name>socket_queue_size</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwn_poller_remove</name><argument_list>(<argument><expr><name><name>task</name><operator>.</operator><name>poller</name></name></expr></argument>, <argument><expr><name><name>task</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>server</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_server_destroy</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>out_fd</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>out_fd</name> <operator>=</operator> <name><name>server</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
</unit>
