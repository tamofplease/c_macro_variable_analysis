<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/tools/mimegen.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR</name><parameter_list>(<parameter><type><name>x_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#x_</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q</name><parameter_list>(<parameter><type><name>x_</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>STR(x_)</cpp:value></cpp:define>

<struct>struct <name>node</name> <block>{
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>node</name></name> <modifier>*</modifier></type><name>ctype</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>node</name></name> <modifier>*</modifier></type><name>nnext</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>node</name></name> <modifier>*</modifier></type><name>hnext</name></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><name><name>enodes</name><index>[<expr><name>NSIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nnode</name></decl>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>_h</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>hash</name> <init>= <expr><literal type="number">5381</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>str</name><operator>++</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>hash</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>hash</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>+</operator> <name>hash</name><operator>)</operator> <operator>+</operator> <name>c</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>hash</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_line</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><name>sp</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name> <init>= <expr><name>p1</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p1</name> <operator>==</operator> <literal type="char">'#'</literal> <operator>||</operator> <operator>*</operator><name>p1</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><operator>*</operator><name>p1</name> <operator>&gt;</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p1</name> <operator>&lt;</operator> <literal type="number">127</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>p1</name></expr>;</expr_stmt></block_content></block></while>

  <expr_stmt><expr><name>p2</name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>*</operator><name>p2</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>p2</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>p2</name></expr>;</expr_stmt></block_content></block></while>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p2</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>node</name></name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>p1</name> <operator>-</operator> <name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>hnext</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>ctype</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name>p1</name> <operator>=</operator> <name>p2</name></expr>;</expr_stmt>

  <while>while <condition>(<expr><operator>*</operator><name>p2</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
    <while>while <condition>(<expr><operator>*</operator><name>p2</name> <operator>&gt;</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p2</name> <operator>&lt;</operator> <literal type="number">127</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>p2</name></expr>;</expr_stmt></block_content></block></while>
    <if_stmt><if>if <condition>(<expr><name>p2</name> <operator>&gt;</operator> <name>p1</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>node</name></name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name> <operator>-</operator> <name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><call><name>_h</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>%</operator> <name>NSIZE</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>ctype</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>enodes</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>enodes</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <for>for <control>(<init><decl><type><name><name>struct</name> <name>node</name></name> <modifier>*</modifier><name>ee</name></type> <init>= <expr><name><name>enodes</name><index>[<expr><name>b</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>ee</name></expr>;</condition> <incr><expr><name>ee</name> <operator>=</operator> <name><name>ee</name><operator>-&gt;</operator><name>hnext</name></name></expr></incr>)</control> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ee</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>ee</name><operator>-&gt;</operator><name>hnext</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ee</name><operator>-&gt;</operator><name>hnext</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
    <while>while <condition>(<expr><operator>*</operator><name>p2</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>p2</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <operator>*</operator><name>p2</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <operator>*</operator><name>p2</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>p2</name></expr>;</expr_stmt></block_content></block></while>
    <expr_stmt><expr><name>p1</name> <operator>=</operator> <name>p2</name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>nnext</name></name> <operator>=</operator> <name>nnode</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nnode</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_code</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>fbuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WF</name><parameter_list>(<parameter><type><name>f_</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>do { \
    int n = snprintf(fbuf, sizeof(fbuf), f_, __VA_ARGS__); \
    fwrite(fbuf, n, 1, f); \
  } while (0)</cpp:value></cpp:define>

  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WW</name><parameter_list>(<parameter><type><name>f_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fwrite(f_, sizeof(f_) - 1, 1, f)</cpp:value></cpp:define>

  <expr_stmt><expr><call><name>WW</name><argument_list>(<argument><expr><literal type="string">"#include &lt;string.h&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>WW</name><argument_list>(<argument><expr><literal type="string">"#include &lt;stdint.h&gt;\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>hf</name><index>[]</index></name>
    <init>= <expr><literal type="string">"static inline uint32_t _hash(const char *str) {\n"</literal>
      <literal type="string">"  unsigned char c;\n"</literal>
      <literal type="string">"  uint32_t hash = 5381;\n"</literal>
      <literal type="string">"  while ((c = *str++)) {\n"</literal>
      <literal type="string">"    hash = ((hash &lt;&lt; 5) + hash) + c;\n"</literal>
      <literal type="string">"  }\n"</literal>
      <literal type="string">"  return hash;\n"</literal>
      <literal type="string">"}\n"</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>WW</name><argument_list>(<argument><expr><name>hf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>WW</name><argument_list>(<argument><expr><literal type="string">"static const char* _mimetype_find(const char *ext) {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>WW</name><argument_list>(<argument><expr><literal type="string">"  uint32_t b = _hash(ext) % "</literal> <call><name>Q</name><argument_list>(<argument><expr><name>NSIZE</name></expr></argument>)</argument_list></call> <literal type="string">";\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>WW</name><argument_list>(<argument><expr><literal type="string">"  switch(b) {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NSIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>enodes</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <block>{<block_content>
      <expr_stmt><expr><call><name>WF</name><argument_list>(<argument><expr><literal type="string">"    case %d:\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <decl_stmt><decl><type><name><name>struct</name> <name>node</name></name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>enodes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>WF</name><argument_list>(<argument><expr><literal type="string">"      if (strcmp(ext, \"%s\") == 0) return \"%s\";\n"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>ctype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>hnext</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <block>{<block_content>
      <expr_stmt><expr><call><name>WW</name><argument_list>(<argument><expr><literal type="string">"      break;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>WW</name><argument_list>(<argument><expr><literal type="string">"  }\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>WW</name><argument_list>(<argument><expr><literal type="string">"  return 0;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>WW</name><argument_list>(<argument><expr><literal type="string">"}\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>W</name></cpp:undef>
  <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>WF</name></cpp:undef>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><ternary><condition><expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="string">"/etc/mime.types"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error reading file %s\n"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>l</name> <operator>=</operator> <call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_line</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>_code</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
