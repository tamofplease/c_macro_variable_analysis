<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/build/src/extern_iwnet/tools/strliteral.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>make_identifier</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>c</name> <operator>=</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator>
          <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator><operator>)</operator>
          <operator>||</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator> <operator>)</operator>
          <operator>||</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator> <operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* strdup is actually a POSIX thing, not a C thing, so don't use it */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>dupstr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dup</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dup</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dup</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <return>return <expr><name>dup</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argv0</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Usage: %s [options] [infile] [outfile]\n"</literal></expr></argument>, <argument><expr><name>argv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>puts</name><argument_list>(
    <argument><expr><literal type="string">"Options:\n"</literal>
    <literal type="string">"\t-h, --help                  Show this help text\n"</literal>
    <literal type="string">"\t--no-const                  Output mutable variables instead of consts\n"</literal>
    <literal type="string">"\t--always-escape             Unconditionally escape every character\n"</literal>
    <literal type="string">"\t-l, --line-length &lt;length&gt;  Specify how long a line should be\n"</literal>
    <literal type="string">"\t-i, --ident &lt;ident&gt;         Overwrite the identifier instead of using the file name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>inp</name> <init>= <expr><literal type="string">"stdin"</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>outp</name> <init>= <expr><literal type="string">"stdout"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>inf</name> <init>= <expr><name>stdin</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>outf</name> <init>= <expr><name>stdout</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ident</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>conststr</name> <init>= <expr><literal type="string">"static const "</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>alwaysescape</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>maxlength</name> <init>= <expr><literal type="number">120</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>argidx</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>argidx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>argidx</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><operator>++</operator><name>argidx</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>argv</name><index>[<expr><name>argidx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--help"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-h"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--no-const"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>conststr</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--always-escape"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>alwaysescape</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--line-length"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-l"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>argidx</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s requires an argument\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>fail</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>maxlength</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>argidx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--ident"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-i"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>argidx</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s requires an argument\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>fail</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>ident</name> <operator>=</operator> <call><name>dupstr</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>argidx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>make_identifier</name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unknown option: %s\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>fail</name>;</goto>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>-</operator> <name>argidx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>ident</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ident</name> <operator>=</operator> <call><name>dupstr</name><argument_list>(<argument><expr><literal type="string">"stdin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>argc</name> <operator>-</operator> <name>argidx</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>argc</name> <operator>-</operator> <name>argidx</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>inp</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>argidx</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>inf</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>inp</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>inf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>inp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>fail</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>ident</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ident</name> <operator>=</operator> <call><name>dupstr</name><argument_list>(<argument><expr><name>inp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>make_identifier</name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>-</operator> <name>argidx</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>outp</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>argidx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>outf</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>outp</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>outf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>outp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>fail</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unexpected number of non-option arguments: %i\n"</literal></expr></argument>, <argument><expr><name>argc</name> <operator>-</operator> <name>argidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>fail</name>;</goto>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">"%sunsigned char %s[] =\n\t\""</literal></expr></argument>, <argument><expr><name>conststr</name></expr></argument>, <argument><expr><name>ident</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"write d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>fail</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>maxlength</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>linechar</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name>inf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>alwaysescape</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>linechar</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>linechar</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0700</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>linechar</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0070</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>linechar</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0007</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="number">126</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>!=</operator> <literal type="char">'"'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>!=</operator> <literal type="char">'\\'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>!=</operator> <literal type="char">'?'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>!=</operator> <literal type="char">':'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>!=</operator> <literal type="char">'%'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>linechar</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>c</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>linechar</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>linechar</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'r'</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>linechar</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>linechar</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>linechar</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>linechar</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'t'</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\"'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>linechar</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>linechar</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>linechar</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>linechar</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>linechar</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>linechar</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0700</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>linechar</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0070</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>linechar</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0007</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>length</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>linechar</name> <operator>&gt;=</operator> <name>maxlength</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>linechar</name></expr></argument>, <argument><expr><name>outf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>linechar</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>fail</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><literal type="string">"\"\n\t\""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>outf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>fail</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>linechar</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>linechar</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>linechar</name></expr></argument>, <argument><expr><name>outf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>linechar</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"write b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>fail</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>inf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>fail</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><literal type="string">"\";\n%sunsigned int %s_len = %u;\n"</literal></expr></argument>,
              <argument><expr><name>conststr</name></expr></argument>, <argument><expr><name>ident</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>length</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"write c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>fail</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name>inf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>fail</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name>outf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>fail</name>;</goto>
  </block_content>}</block></if></if_stmt>

<label><name>exit</name>:</label>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>

<label><name>fail</name>:</label>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <goto>goto <name>exit</name>;</goto>
</block_content>}</block></function>
</unit>
