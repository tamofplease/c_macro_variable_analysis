<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/ejdb/src/ejdb2.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ejdb2_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/murmur3.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jb_put_new_lw</name><parameter_list>(<parameter><decl><type><name>JBCOLL</name></type> <name>jbc</name></decl></parameter>, <parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>IWKV_val</name></type> <name>EMPTY_VAL</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><name>IW_INLINE</name> <name>iwrc</name></type> <name>_jb_meta_nrecs_removedb</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>dbid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>dbid</name> <operator>=</operator> <call><name>IW_HTOIL</name><argument_list>(<argument><expr><name>dbid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>IWKV_val</name></type> <name>key</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dbid</name></expr></argument>)</argument_list></sizeof></expr>,
    <expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>dbid</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>iwkv_del</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>nrecdb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>iwrc</name></type> <name>_jb_meta_nrecs_update</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>dbid</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>delta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>dbid</name> <operator>=</operator> <call><name>IW_HTOIL</name><argument_list>(<argument><expr><name>dbid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>IWKV_val</name></type> <name>val</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></sizeof></expr>,
    <expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>delta</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV_val</name></type> <name>key</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dbid</name></expr></argument>)</argument_list></sizeof></expr>,
    <expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>dbid</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>iwkv_put</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>nrecdb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>IWKV_VAL_INCREMENT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>_jb_meta_nrecs_get</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>dbid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>vsz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>dbid</name> <operator>=</operator> <call><name>IW_HTOIL</name><argument_list>(<argument><expr><name>dbid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>IWKV_val</name></type> <name>key</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dbid</name></expr></argument>)</argument_list></sizeof></expr>,
    <expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>dbid</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>iwkv_get_copy</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>nrecdb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>vsz</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>IW_ITOHLL</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_jb_idx_release</name><parameter_list>(<parameter><decl><type><name>JBIDX</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_jb_coll_release</name><parameter_list>(<parameter><decl><type><name>JBCOLL</name></type> <name>jbc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>jbc</name><operator>-&gt;</operator><name>meta</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbc</name><operator>-&gt;</operator><name>meta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JBIDX</name></type> <name>nidx</name></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>JBIDX</name></type> <name>idx</name> <init>= <expr><name><name>jbc</name><operator>-&gt;</operator><name>idx</name></name></expr></init></decl>;</init> <condition><expr><name>idx</name></expr>;</condition> <incr><expr><name>idx</name> <operator>=</operator> <name>nidx</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>nidx</name> <operator>=</operator> <name><name>idx</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_jb_idx_release</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>jbc</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_rwlock_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbc</name><operator>-&gt;</operator><name>rwl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>jbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jb_coll_load_index_lr</name><parameter_list>(<parameter><decl><type><name>JBCOLL</name></type> <name>jbc</name></decl></parameter>, <parameter><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>mval</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>binn</name> <modifier>*</modifier></type><name>bn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JBL</name></name></type> <name>imeta</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBIDX</name></type> <name>idx</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>idx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>idx</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_from_buf_keep_onstack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>imeta</name></expr></argument>, <argument><expr><name><name>mval</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>mval</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>bn</name> <operator>=</operator> <operator>&amp;</operator><name><name>imeta</name><operator>.</operator><name>bn</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(  <expr><operator>!</operator><call><name>binn_object_get_str</name><argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><literal type="string">"ptr"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call>
     <operator>||</operator> <operator>!</operator><call><name>binn_object_get_uint8</name><argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call>
     <operator>||</operator> <operator>!</operator><call><name>binn_object_get_uint8</name><argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><literal type="string">"idbf"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>idbf</name></name></expr></argument>)</argument_list></call>
     <operator>||</operator> <operator>!</operator><call><name>binn_object_get_uint32</name><argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><literal type="string">"dbid"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJDB_ERROR_INVALID_COLLECTION_INDEX_META</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_ptr_alloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwkv_db</name><argument_list>(<argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name></name></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>idbf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>idb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>jbc</name></name> <operator>=</operator> <name>jbc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>rnum</name></name> <operator>=</operator> <call><name>_jb_meta_nrecs_get</name><argument_list>(<argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>jbc</name><operator>-&gt;</operator><name>idx</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbc</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_jb_idx_release</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jb_coll_load_indexes_lr</name><parameter_list>(<parameter><decl><type><name>JBCOLL</name></type> <name>jbc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV_cursor</name></type> <name>cur</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV_val</name></type> <name>kval</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>KEY_PREFIX_IDXMETA</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>IWNUMBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
  <comment type="line">// Full key format: i.&lt;coldbid&gt;.&lt;idxdbid&gt;</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>KEY_PREFIX_IDXMETA</name> <literal type="string">"%u."</literal></expr></argument>, <argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_OVERFLOW</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>kval</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kval</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_cursor_open</name><argument_list>(<argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>metadb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>, <argument><expr><name>IWKV_CURSOR_GE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>IWKV_ERROR_NOTFOUND</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <do>do <block>{<block_content>
    <decl_stmt><decl><type><name>IWKV_val</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwkv_cursor_key</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>key</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <name>sz</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwkv_val_dispose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwkv_cursor_val</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jb_coll_load_index_lr</name><argument_list>(<argument><expr><name>jbc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>iwkv_val_dispose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCBREAK</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>iwkv_val_dispose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block> while <condition>(<expr><operator>!</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>iwkv_cursor_to</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>IWKV_CURSOR_PREV</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>;</do>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>IWKV_ERROR_NOTFOUND</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>iwkv_cursor_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jb_coll_load_meta_lr</name><parameter_list>(<parameter><decl><type><name>JBCOLL</name></type> <name>jbc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JBL</name></type> <name>jbv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV_cursor</name></type> <name>cur</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL</name></type> <name>jbm</name> <init>= <expr><name><name>jbc</name><operator>-&gt;</operator><name>meta</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jbl_at</name><argument_list>(<argument><expr><name>jbm</name></expr></argument>, <argument><expr><literal type="string">"/name"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbc</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>jbl_get_str</name><argument_list>(<argument><expr><name>jbv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>jbc</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>EJDB_ERROR_INVALID_COLLECTION_META</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_at</name><argument_list>(<argument><expr><name>jbm</name></expr></argument>, <argument><expr><literal type="string">"/id"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbc</name><operator>-&gt;</operator><name>dbid</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>jbl_get_i64</name><argument_list>(<argument><expr><name>jbv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>jbc</name><operator>-&gt;</operator><name>dbid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>EJDB_ERROR_INVALID_COLLECTION_META</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_db</name><argument_list>(<argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name></name></expr></argument>, <argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>, <argument><expr><name>IWDB_VNUM64_KEYS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>jbc</name><operator>-&gt;</operator><name>cdb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>jbc</name><operator>-&gt;</operator><name>rnum</name></name> <operator>=</operator> <call><name>_jb_meta_nrecs_get</name><argument_list>(<argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jb_coll_load_indexes_lr</name><argument_list>(<argument><expr><name>jbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_cursor_open</name><argument_list>(<argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>cdb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>, <argument><expr><name>IWKV_CURSOR_BEFORE_FIRST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_cursor_to</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>IWKV_CURSOR_NEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>IWKV_ERROR_NOTFOUND</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwkv_cursor_copy_key</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>jbc</name><operator>-&gt;</operator><name>id_seq</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>id_seq</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>iwkv_cursor_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jb_coll_init</name><parameter_list>(<parameter><decl><type><name>JBCOLL</name></type> <name>jbc</name></decl></parameter>, <parameter><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>meta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pthread_rwlockattr_t</name></type> <name>attr</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_rwlockattr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__linux__</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>defined</name> <name>__USE_UNIX98</name> <operator>||</operator> <name>defined</name> <name>__USE_XOPEN2K</name><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name>pthread_rwlockattr_setkind_np</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>pthread_rwlock_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbc</name><operator>-&gt;</operator><name>rwl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>meta</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_from_buf_keep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbc</name><operator>-&gt;</operator><name>meta</name></name></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>jbc</name><operator>-&gt;</operator><name>meta</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"Collection %s seems to be initialized"</literal></expr></argument>, <argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>IW_ERROR_INVALID_STATE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jb_coll_load_meta_lr</name><argument_list>(<argument><expr><name>jbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwhmap_put</name><argument_list>(<argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>mcolls</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>jbc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>jbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jb_idx_add_meta_lr</name><parameter_list>(<parameter><decl><type><name>JBIDX</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>binn</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>xstr</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>binn</name> <modifier>*</modifier></type><name>meta</name> <init>= <expr><call><name>binn_object</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>meta</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_ptr_serialize</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(  <expr><operator>!</operator><call><name>binn_object_set_str</name><argument_list>(<argument><expr><name>meta</name></expr></argument>, <argument><expr><literal type="string">"ptr"</literal></expr></argument>, <argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
     <operator>||</operator> <operator>!</operator><call><name>binn_object_set_uint32</name><argument_list>(<argument><expr><name>meta</name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call>
     <operator>||</operator> <operator>!</operator><call><name>binn_object_set_uint32</name><argument_list>(<argument><expr><name>meta</name></expr></argument>, <argument><expr><literal type="string">"idbf"</literal></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>idbf</name></name></expr></argument>)</argument_list></call>
     <operator>||</operator> <operator>!</operator><call><name>binn_object_set_uint32</name><argument_list>(<argument><expr><name>meta</name></expr></argument>, <argument><expr><literal type="string">"dbid"</literal></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>)</argument_list></call>
     <operator>||</operator> <operator>!</operator><call><name>binn_object_set_int64</name><argument_list>(<argument><expr><name>meta</name></expr></argument>, <argument><expr><literal type="string">"rnum"</literal></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>rnum</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBL_ERROR_CREATION</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_list_add_object</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>meta</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBL_ERROR_CREATION</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jb_coll_add_meta_lr</name><parameter_list>(<parameter><decl><type><name>JBCOLL</name></type> <name>jbc</name></decl></parameter>, <parameter><decl><type><name>binn</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>binn</name> <modifier>*</modifier></type><name>ilist</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>binn</name> <modifier>*</modifier></type><name>meta</name> <init>= <expr><call><name>binn_object</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>meta</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(  <expr><operator>!</operator><call><name>binn_object_set_str</name><argument_list>(<argument><expr><name>meta</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call>
     <operator>||</operator> <operator>!</operator><call><name>binn_object_set_uint32</name><argument_list>(<argument><expr><name>meta</name></expr></argument>, <argument><expr><literal type="string">"dbid"</literal></expr></argument>, <argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>)</argument_list></call>
     <operator>||</operator> <operator>!</operator><call><name>binn_object_set_int64</name><argument_list>(<argument><expr><name>meta</name></expr></argument>, <argument><expr><literal type="string">"rnum"</literal></expr></argument>, <argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>rnum</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBL_ERROR_CREATION</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>ilist</name> <operator>=</operator> <call><name>binn_list</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ilist</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>JBIDX</name></type> <name>idx</name> <init>= <expr><name><name>jbc</name><operator>-&gt;</operator><name>idx</name></name></expr></init></decl>;</init> <condition><expr><name>idx</name></expr>;</condition> <incr><expr><name>idx</name> <operator>=</operator> <name><name>idx</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_jb_idx_add_meta_lr</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>ilist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_object_set_list</name><argument_list>(<argument><expr><name>meta</name></expr></argument>, <argument><expr><literal type="string">"indexes"</literal></expr></argument>, <argument><expr><name>ilist</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBL_ERROR_CREATION</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_list_add_value</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>meta</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBL_ERROR_CREATION</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ilist</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>ilist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jb_db_meta_load</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>metadb</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_db</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>iwkv</name></name></expr></argument>, <argument><expr><name>METADB_ID</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>metadb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>nrecdb</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_db</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>iwkv</name></name></expr></argument>, <argument><expr><name>NUMRECSDB_ID</name></expr></argument>, <argument><expr><name>IWDB_VNUM64_KEYS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>nrecdb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>IWKV_cursor</name></type> <name>cur</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_cursor_open</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>metadb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>, <argument><expr><name>IWKV_CURSOR_BEFORE_FIRST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>!</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>iwkv_cursor_to</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>IWKV_CURSOR_NEXT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>IWKV_val</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwkv_cursor_get</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>KEY_PREFIX_COLLMETA</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>KEY_PREFIX_COLLMETA</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>JBCOLL</name></type> <name>jbc</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>jbc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>jbc</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>iwkv_val_dispose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>finish</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>jbc</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jb_coll_init</name><argument_list>(<argument><expr><name>jbc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>_jb_coll_release</name><argument_list>(<argument><expr><name>jbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>iwkv_val_dispose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>finish</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>iwkv_val_dispose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>iwkv_val_dispose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>IWKV_ERROR_NOTFOUND</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>iwkv_cursor_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jb_db_release</name><parameter_list>(<parameter><decl><type><name>EJDB</name> <modifier>*</modifier></type><name>dbp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name> <init>= <expr><operator>*</operator><name>dbp</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>dbp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JB_HTTP</name></cpp:ifdef>
  <expr_stmt><expr><call><name>jbr_shutdown_wait</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>jbr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>mcolls</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwhmap_destroy</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mcolls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>mcolls</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>iwkv</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>iwkv_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>iwkv</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>pthread_rwlock_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>rwl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>EJDB_HTTP</name> <modifier>*</modifier></type><name>http</name> <init>= <expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>http</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>http</name><operator>-&gt;</operator><name>bind</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>http</name><operator>-&gt;</operator><name>bind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>http</name><operator>-&gt;</operator><name>access_token</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>http</name><operator>-&gt;</operator><name>access_token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jb_coll_acquire_keeplock2</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name></decl></parameter>, <parameter><decl><type><name>jb_coll_acquire_t</name></type> <name>acm</name></decl></parameter>, <parameter><decl><type><name>JBCOLL</name> <modifier>*</modifier></type><name>jbcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>coll</name> <operator>||</operator> <operator>*</operator><name>coll</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>coll</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>EJDB_COLLECTION_NAME_MAX_LEN</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>EJDB_ERROR_INVALID_COLLECTION_NAME</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>jbcp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>JBCOLL</name></type> <name>jbc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>wl</name> <init>= <expr><name>acm</name> <operator>&amp;</operator> <name>JB_COLL_ACQUIRE_WRITE</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>API_RLOCK</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>jbc</name> <operator>=</operator> <call><name>iwhmap_get</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mcolls</name></name></expr></argument>, <argument><expr><name>coll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>jbc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><ternary><condition><expr><name>wl</name></expr> ?</condition><then> <expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbc</name><operator>-&gt;</operator><name>rwl</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>pthread_rwlock_rdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbc</name><operator>-&gt;</operator><name>rwl</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>jbcp</name> <operator>=</operator> <name>jbc</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>rwl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// relock</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>IWKV_RDONLY</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>acm</name> <operator>&amp;</operator> <name>JB_COLL_ACQUIRE_EXISTING</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>IW_ERROR_NOT_EXISTS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>API_WLOCK</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>jbc</name> <operator>=</operator> <call><name>iwhmap_get</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mcolls</name></name></expr></argument>, <argument><expr><name>coll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>jbc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>pthread_rwlock_rdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbc</name><operator>-&gt;</operator><name>rwl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>jbcp</name> <operator>=</operator> <name>jbc</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>JBL</name></type> <name>meta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>IWDB</name></type> <name>cdb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>dbid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type> <name><name>keybuf</name><index>[<expr><name>IWNUMBUF_SIZE</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>KEY_PREFIX_COLLMETA</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>IWKV_val</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>create_finish</name></expr></argument>, <argument><expr><call><name>iwkv_new_db</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>iwkv</name></name></expr></argument>, <argument><expr><name>IWDB_VNUM64_KEYS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cdb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>jbc</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>jbc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>jbc</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>create_finish</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>create_finish</name></expr></argument>, <argument><expr><call><name>jbl_create_empty_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name>meta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_object_set_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>meta</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>coll</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBL_ERROR_CREATION</name></expr>;</expr_stmt>
        <goto>goto <name>create_finish</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_object_set_uint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>meta</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><name>dbid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBL_ERROR_CREATION</name></expr>;</expr_stmt>
        <goto>goto <name>create_finish</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>create_finish</name></expr></argument>, <argument><expr><call><name>jbl_as_buf</name><argument_list>(<argument><expr><name>meta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>key</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>keybuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>keybuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>KEY_PREFIX_COLLMETA</name> <literal type="string">"%u"</literal></expr></argument>, <argument><expr><name>dbid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>key</name><operator>.</operator><name>size</name></name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>keybuf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_OVERFLOW</name></expr>;</expr_stmt>
        <goto>goto <name>create_finish</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>key</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>keybuf</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>create_finish</name></expr></argument>, <argument><expr><call><name>iwkv_put</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>metadb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>IWKV_SYNC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>jbc</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>jbc</name><operator>-&gt;</operator><name>meta</name></name> <operator>=</operator> <name>meta</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jb_coll_init</name><argument_list>(<argument><expr><name>jbc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>iwkv_del</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>metadb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>IWKV_SYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>create_finish</name>;</goto>
      </block_content>}</block></if></if_stmt>

<label><name>create_finish</name>:</label>
      <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>meta</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>cdb</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>iwkv_db_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>jbc</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>jbc</name><operator>-&gt;</operator><name>meta</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="line">// meta was cleared</comment>
          <expr_stmt><expr><call><name>_jb_coll_release</name><argument_list>(<argument><expr><name>jbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>rci</name> <operator>=</operator> <ternary><condition><expr><name>wl</name></expr> ?</condition><then> <expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbc</name><operator>-&gt;</operator><name>rwl</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>pthread_rwlock_rdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbc</name><operator>-&gt;</operator><name>rwl</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt> <comment type="line">// -V522</comment>
        <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>finish</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>jbcp</name> <operator>=</operator> <name>jbc</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>rwl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>iwrc</name></type> <name>_jb_coll_acquire_keeplock</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>wl</name></decl></parameter>, <parameter><decl><type><name>JBCOLL</name> <modifier>*</modifier></type><name>jbcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_jb_coll_acquire_keeplock2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><ternary><condition><expr><name>wl</name></expr> ?</condition><then> <expr><name>JB_COLL_ACQUIRE_WRITE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>jbcp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jb_idx_record_add</name><parameter_list>(<parameter><decl><type><name>JBIDX</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><name>JBL</name></type> <name>jblprev</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWKV_val</name></type> <name>key</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>step</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>vnbuf</name><index>[<expr><name>IW_VNUMBUFSZ</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>numbuf</name><index>[<expr><name>IWNUMBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>jbv_found</name></decl>, <decl><type ref="prev"/><name>jbvprev_found</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JBL</name></name></type> <name>jbv</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>jbvprev</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jbl_type_t</name></type> <name>jbv_type</name></decl>, <decl><type ref="prev"/><name>jbvprev_type</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>delta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="line">// delta of added/removed index records</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>compound</name> <init>= <expr><name><name>idx</name><operator>-&gt;</operator><name>idbf</name></name> <operator>&amp;</operator> <name>IWDB_COMPOUND_KEYS</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>jbvprev_found</name> <operator>=</operator> <ternary><condition><expr><name>jblprev</name></expr> ?</condition><then> <expr><call><name>_jbl_at</name><argument_list>(<argument><expr><name>jblprev</name></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbvprev</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name>jbv_found</name> <operator>=</operator> <ternary><condition><expr><name>jbl</name></expr> ?</condition><then> <expr><call><name>_jbl_at</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbv</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>

  <expr_stmt><expr><name>jbv_type</name> <operator>=</operator> <call><name>jbl_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>jbvprev_type</name> <operator>=</operator> <call><name>jbl_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbvprev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Do not index NULLs, OBJECTs, ARRAYs (in `EJDB_IDX_UNIQUE` mode)</comment>
  <if_stmt><if>if <condition>(  <expr><operator>(</operator><operator>(</operator><name>jbvprev_type</name> <operator>==</operator> <name>JBV_OBJECT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>jbvprev_type</name> <operator>&lt;=</operator> <name>JBV_NULL</name><operator>)</operator><operator>)</operator>
     <operator>||</operator> <operator>(</operator><operator>(</operator><name>jbvprev_type</name> <operator>==</operator> <name>JBV_ARRAY</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>compound</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>jbvprev_found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(  <expr><operator>(</operator><operator>(</operator><name>jbv_type</name> <operator>==</operator> <name>JBV_OBJECT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>jbv_type</name> <operator>&lt;=</operator> <name>JBV_NULL</name><operator>)</operator><operator>)</operator>
     <operator>||</operator> <operator>(</operator><operator>(</operator><name>jbv_type</name> <operator>==</operator> <name>JBV_ARRAY</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>compound</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>jbv_found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(  <expr><name>compound</name>
     <operator>&amp;&amp;</operator> <operator>(</operator><name>jbv_type</name> <operator>==</operator> <name>jbvprev_type</name><operator>)</operator>
     <operator>&amp;&amp;</operator> <operator>(</operator><name>jbvprev_type</name> <operator>==</operator> <name>JBV_ARRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>  <comment type="line">// compare next/prev obj arrays</comment>
    <expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name>iwpool_create</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>jbvprev_node</name></decl>, <decl><type ref="prev"/><name>jbv_node</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_to_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbv_node</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>jbv</name><operator>.</operator><name>node</name></name> <operator>=</operator> <name>jbv_node</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_to_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbvprev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbvprev_node</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>jbvprev</name><operator>.</operator><name>node</name></name> <operator>=</operator> <name>jbvprev_node</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>_jbl_compare_nodes</name><argument_list>(<argument><expr><name>jbv_node</name></expr></argument>, <argument><expr><name>jbvprev_node</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <goto>goto <name>finish</name>;</goto> <comment type="line">// Arrays are equal or error</comment>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>_jbl_is_eq_atomic_values</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbvprev</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>jbvprev_found</name></expr>)</condition> <block>{<block_content>               <comment type="line">// Remove old index elements</comment>
    <if_stmt><if>if <condition>(<expr><name>jbvprev_type</name> <operator>==</operator> <name>JBV_ARRAY</name></expr>)</condition> <block>{<block_content> <comment type="line">// TODO: array modification delta?</comment>
      <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>n</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name>iwpool_create</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_to_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbvprev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>child</name></name></expr>;</init> <condition><expr><name>n</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>jbi_node_fill_ikey</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>numbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>key</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>key</name><operator>.</operator><name>compound</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_del</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>idb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>--</operator><name>delta</name></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rc</name> <operator>==</operator> <name>IWKV_ERROR_NOTFOUND</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>jbi_jbl_fill_ikey</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbvprev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>numbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>key</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>key</name><operator>.</operator><name>compound</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_del</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>idb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>--</operator><name>delta</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rc</name> <operator>==</operator> <name>IWKV_ERROR_NOTFOUND</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>jbv_found</name></expr>)</condition> <block>{<block_content>               <comment type="line">// Add index record</comment>
    <if_stmt><if>if <condition>(<expr><name>jbv_type</name> <operator>==</operator> <name>JBV_ARRAY</name></expr>)</condition> <block>{<block_content> <comment type="line">// TODO: array modification delta?</comment>
      <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>n</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name>iwpool_create</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_to_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>child</name></name></expr>;</init> <condition><expr><name>n</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>jbi_node_fill_ikey</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>numbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>key</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>key</name><operator>.</operator><name>compound</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_put</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>idb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>EMPTY_VAL</name></expr></argument>, <argument><expr><name>IWKV_NO_OVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>++</operator><name>delta</name></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rc</name> <operator>==</operator> <name>IWKV_ERROR_KEY_EXISTS</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <goto>goto <name>finish</name>;</goto>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>jbi_jbl_fill_ikey</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>numbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>key</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>compound</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>key</name><operator>.</operator><name>compound</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_put</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>idb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>EMPTY_VAL</name></expr></argument>, <argument><expr><name>IWKV_NO_OVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>++</operator><name>delta</name></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rc</name> <operator>==</operator> <name>IWKV_ERROR_KEY_EXISTS</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>IW_SETVNUMBUF64</name><argument_list>(<argument><expr><name>step</name></expr></argument>, <argument><expr><name>vnbuf</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>IWKV_val</name></type> <name>idval</name> <init>= <expr><block>{
            <expr><operator>.</operator><name>data</name> <operator>=</operator> <name>vnbuf</name></expr>,
            <expr><operator>.</operator><name>size</name> <operator>=</operator> <name>step</name></expr>
          }</block></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_put</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>idb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idval</name></expr></argument>, <argument><expr><name>IWKV_NO_OVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>++</operator><name>delta</name></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rc</name> <operator>==</operator> <name>IWKV_ERROR_KEY_EXISTS</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJDB_ERROR_UNIQUE_INDEX_CONSTRAINT_VIOLATED</name></expr>;</expr_stmt>
            <goto>goto <name>finish</name>;</goto>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>pool</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>_jb_meta_nrecs_update</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>jbc</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>rnum</name></name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>iwrc</name></type> <name>_jb_idx_record_remove</name><parameter_list>(<parameter><decl><type><name>JBIDX</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_jb_idx_record_add</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>jbl</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jb_idx_fill</name><parameter_list>(<parameter><decl><type><name>JBIDX</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWKV_cursor</name></type> <name>cur</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV_val</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JBL</name></name></type> <name>jbs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>llv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name> <init>= <expr><operator>&amp;</operator><name>jbs</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwkv_cursor_open</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>jbc</name><operator>-&gt;</operator><name>cdb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>, <argument><expr><name>IWKV_CURSOR_BEFORE_FIRST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_cursor_to</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>IWKV_CURSOR_NEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>IWKV_ERROR_NOTFOUND</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_cursor_get</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCBREAK</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_load</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>jbs</name><operator>.</operator><name>bn</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBL_ERROR_CREATION</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>llv</name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jb_idx_record_add</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>llv</name></expr></argument>, <argument><expr><name>jbl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwkv_kv_dispose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>iwkv_cursor_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Used to avoid deadlocks within a `iwkv_put` context</comment>
<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jb_put_handler_after</name><parameter_list>(<parameter><decl><type><name>iwrc</name></type> <name>rc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_JBPHCTX</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>oldval</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>oldval</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>oldval</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwkv_val_dispose</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JBL</name></type> <name>prev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JBL</name></name></type> <name>jblprev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBCOLL</name></type> <name>jbc</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>jbc</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>oldval</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_from_buf_keep_onstack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jblprev</name></expr></argument>, <argument><expr><name><name>oldval</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>oldval</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>&amp;</operator><name>jblprev</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>prev</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <decl_stmt><decl><type><name>JBIDX</name></type> <name>fail_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>JBIDX</name></type> <name>idx</name> <init>= <expr><name><name>jbc</name><operator>-&gt;</operator><name>idx</name></name></expr></init></decl>;</init> <condition><expr><name>idx</name></expr>;</condition> <incr><expr><name>idx</name> <operator>=</operator> <name><name>idx</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jb_idx_record_add</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jbl</name></name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>fail_idx</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>prev</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_jb_meta_nrecs_update</name><argument_list>(<argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>jbc</name><operator>-&gt;</operator><name>rnum</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name><name>oldval</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwkv_val_dispose</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>oldval</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// Cleanup on error inserting new record</comment>
    <decl_stmt><decl><type><name>IWKV_val</name></type> <name>key</name> <init>= <expr><block>{ <expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>id</name></name></expr>, <expr><operator>.</operator><name>size</name> <operator>=</operator> sizeof<operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>id</name></name><operator>)</operator></expr> }</block></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>JBIDX</name></type> <name>idx</name> <init>= <expr><name><name>jbc</name><operator>-&gt;</operator><name>idx</name></name></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>!=</operator> <name>fail_idx</name></expr>;</condition> <incr><expr><name>idx</name> <operator>=</operator> <name><name>idx</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_jb_idx_record_remove</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jbl</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>iwkv_del</name><argument_list>(<argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>cdb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jb_put_handler</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>oldval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JBPHCTX</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>op</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>oldval</name> <operator>&amp;&amp;</operator> <name><name>oldval</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>oldval</name></name></expr></argument>, <argument><expr><name>oldval</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>oldval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jb_exec_scan_init</name><parameter_list>(<parameter><decl><type><name>JBEXEC</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>istep</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>jblbufsz</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>jbc</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>document_buffer_sz</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>jblbuf</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jblbufsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>jblbuf</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>jblbufsz</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>JQP_AUX</name></name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>-&gt;</operator><name>q</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JQP_EXPR_NODE_FLAG_PK</name></expr>)</condition> <block>{<block_content> <comment type="line">// Select by primary key</comment>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scanner</name></name> <operator>=</operator> <name>jbi_pk_scanner</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>-&gt;</operator><name>log</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>-&gt;</operator><name>log</name></name></expr></argument>, <argument><expr><literal type="string">"[INDEX] PK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jbi_selection</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>midx</name><operator>.</operator><name>idx</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>midx</name><operator>.</operator><name>idx</name><operator>-&gt;</operator><name>idbf</name></name> <operator>&amp;</operator> <name>IWDB_COMPOUND_KEYS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scanner</name></name> <operator>=</operator> <name>jbi_dup_scanner</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scanner</name></name> <operator>=</operator> <name>jbi_uniq_scanner</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>scanner</name></name> <operator>=</operator> <name>jbi_full_scanner</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>-&gt;</operator><name>log</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>-&gt;</operator><name>log</name></name></expr></argument>, <argument><expr><literal type="string">"[INDEX] NO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_jb_exec_scan_release</name><parameter_list>(<parameter><decl><type><name>JBEXEC</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>proj_joined_nodes_cache</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// Destroy projected nodes key</comment>
    <expr_stmt><expr><call><name>iwhmap_destroy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>proj_joined_nodes_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>proj_joined_nodes_cache</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>proj_joined_nodes_pool</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>proj_joined_nodes_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jblbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jb_noop_visitor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_EJDB_EXEC</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>EJDB_DOC</name></type> <name>doc</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>step</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>iwrc</name></type> <name>_jb_put_impl</name><parameter_list>(<parameter><decl><type><name>JBCOLL</name></type> <name>jbc</name></decl></parameter>, <parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWKV_val</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>key</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>id</name></expr>,
    <expr><operator>.</operator><name>size</name> <operator>=</operator> sizeof<operator>(</operator><name>id</name><operator>)</operator></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JBPHCTX</name></name></type> <name>pctx</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>id</name>  <operator>=</operator> <name>id</name></expr>,
    <expr><operator>.</operator><name>jbc</name> <operator>=</operator> <name>jbc</name></expr>,
    <expr><operator>.</operator><name>jbl</name> <operator>=</operator> <name>jbl</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jbl_as_buf</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>_jb_put_handler_after</name><argument_list>(<argument><expr><call><name>iwkv_puth</name><argument_list>(<argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>cdb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>_jb_put_handler</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>pctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jb_put</name><parameter_list>(<parameter><decl><type><name>JBCOLL</name></type> <name>jbc</name></decl></parameter>, <parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_jb_put_impl</name><argument_list>(<argument><expr><name>jbc</name></expr></argument>, <argument><expr><name>jbl</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jb_cursor_set</name><parameter_list>(<parameter><decl><type><name>JBCOLL</name></type> <name>jbc</name></decl></parameter>, <parameter><decl><type><name>IWKV_cursor</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWKV_val</name></type> <name>val</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JBPHCTX</name></name></type> <name>pctx</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>id</name>  <operator>=</operator> <name>id</name></expr>,
    <expr><operator>.</operator><name>jbc</name> <operator>=</operator> <name>jbc</name></expr>,
    <expr><operator>.</operator><name>jbl</name> <operator>=</operator> <name>jbl</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jbl_as_buf</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>_jb_put_handler_after</name><argument_list>(<argument><expr><call><name>iwkv_cursor_seth</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>_jb_put_handler</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>pctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jb_exec_upsert_lw</name><parameter_list>(<parameter><decl><type><name>JBEXEC</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB_EXEC</name> <modifier>*</modifier></type><name>ux</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQL</name></type> <name>q</name> <init>= <expr><name><name>ux</name><operator>-&gt;</operator><name>q</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>apply_placeholder</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>pv</name> <init>= <expr><call><name>jql_find_placeholder</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>apply_placeholder</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pv</name> <operator>||</operator> <operator>(</operator><name><name>pv</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JQVAL_JBLNODE</name><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>pv</name><operator>-&gt;</operator><name>vnode</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JQL_ERROR_INVALID_PLACEHOLDER_VALUE_TYPE</name></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>pv</name><operator>-&gt;</operator><name>vnode</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>apply</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// Skip silently, nothing to do.</comment>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_from_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_jb_put_new_lw</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jbc</name></name></expr></argument>, <argument><expr><name>jbl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>qmode</name></name> <operator>&amp;</operator> <name>JQP_QRY_AGGREGATE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>_EJDB_DOC</name></name></type> <name>doc</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>id</name>   <operator>=</operator> <name>id</name></expr>,
      <expr><operator>.</operator><name>raw</name>  <operator>=</operator> <name>jbl</name></expr>,
      <expr><operator>.</operator><name>node</name> <operator>=</operator> <name>n</name></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <do>do <block>{<block_content>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>istep</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name><name>ux</name><operator>-&gt;</operator><name>visitor</name></name><argument_list>(<argument><expr><name>ux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>doc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>istep</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>istep</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>;</do>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>++</operator><name><name>ux</name><operator>-&gt;</operator><name>cnt</name></name></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//----------------------- Public API</comment>

<function><type><name>iwrc</name></type> <name>ejdb_exec</name><parameter_list>(<parameter><decl><type><name>EJDB_EXEC</name> <modifier>*</modifier></type><name>ux</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ux</name> <operator>||</operator> <operator>!</operator><name><name>ux</name><operator>-&gt;</operator><name>db</name></name> <operator>||</operator> <operator>!</operator><name><name>ux</name><operator>-&gt;</operator><name>q</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ux</name><operator>-&gt;</operator><name>visitor</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ux</name><operator>-&gt;</operator><name>visitor</name></name> <operator>=</operator> <name>_jb_noop_visitor</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ux</name><operator>-&gt;</operator><name>q</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>projection</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="line">// Actually we don't need projection if exists</comment>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ux</name><operator>-&gt;</operator><name>log</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// set terminating NULL to current pos of log</comment>
    <expr_stmt><expr><call><name>iwxstr_cat</name><argument_list>(<argument><expr><name><name>ux</name><operator>-&gt;</operator><name>log</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JBEXEC</name></type> <name>ctx</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>ux</name> <operator>=</operator> <name>ux</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ux</name><operator>-&gt;</operator><name>limit</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_get_limit</name><argument_list>(<argument><expr><name><name>ux</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ux</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ux</name><operator>-&gt;</operator><name>limit</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>ux</name><operator>-&gt;</operator><name>limit</name></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ux</name><operator>-&gt;</operator><name>skip</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_get_skip</name><argument_list>(<argument><expr><name><name>ux</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ux</name><operator>-&gt;</operator><name>skip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jb_coll_acquire_keeplock2</name><argument_list>(<argument><expr><name><name>ux</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>ux</name><operator>-&gt;</operator><name>q</name><operator>-&gt;</operator><name>coll</name></name></expr></argument>,
                                  <argument><expr><ternary><condition><expr><call><name>jql_has_apply</name><argument_list>(<argument><expr><name><name>ux</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>JB_COLL_ACQUIRE_WRITE</name></expr> </then><else>: <expr><name>JB_COLL_ACQUIRE_EXISTING</name></expr></else></ternary></expr></argument>,
                                  <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>jbc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>IW_ERROR_NOT_EXISTS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_jb_exec_scan_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>.</operator><name>sorting</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ux</name><operator>-&gt;</operator><name>log</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name><name>ux</name><operator>-&gt;</operator><name>log</name></name></expr></argument>, <argument><expr><literal type="string">" [COLLECTOR] SORTER\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>ctx</name><operator>.</operator><name>scanner</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>jbi_sorter_consumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ux</name><operator>-&gt;</operator><name>log</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name><name>ux</name><operator>-&gt;</operator><name>log</name></name></expr></argument>, <argument><expr><literal type="string">" [COLLECTOR] PLAIN\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>ctx</name><operator>.</operator><name>scanner</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>jbi_consumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ux</name><operator>-&gt;</operator><name>cnt</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>jql_has_apply_upsert</name><argument_list>(<argument><expr><name><name>ux</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">// No records found trying to upsert new record</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jb_exec_upsert_lw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>_jb_exec_scan_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>API_COLL_UNLOCK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>jbc</name></name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>jql_reset</name><argument_list>(<argument><expr><name><name>ux</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>JB_LIST_VISITOR_CTX</name> <block>{
  <decl_stmt><decl><type><name>EJDB_DOC</name></type> <name>head</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB_DOC</name></type> <name>tail</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jb_exec_list_visitor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_EJDB_EXEC</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>EJDB_DOC</name></type> <name>doc</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>step</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>JB_LIST_VISITOR_CTX</name></name> <modifier>*</modifier></type><name>lvc</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>_EJDB_DOC</name></name> <modifier>*</modifier></type><name>ndoc</name> <init>= <expr><call><name>iwpool_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ndoc</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>doc</name><operator>-&gt;</operator><name>raw</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>doc</name><operator>-&gt;</operator><name>raw</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ndoc</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>ndoc</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>doc</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ndoc</name><operator>-&gt;</operator><name>raw</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <name>ndoc</name><operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ndoc</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ndoc</name><operator>-&gt;</operator><name>raw</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ndoc</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name><name>doc</name><operator>-&gt;</operator><name>node</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ndoc</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ndoc</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ndoc</name><operator>-&gt;</operator><name>raw</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>doc</name><operator>-&gt;</operator><name>raw</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ndoc</name><operator>-&gt;</operator><name>raw</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ndoc</name><operator>-&gt;</operator><name>raw</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <name>ndoc</name><operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ndoc</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>doc</name><operator>-&gt;</operator><name>raw</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ndoc</name><operator>-&gt;</operator><name>raw</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>doc</name><operator>-&gt;</operator><name>raw</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>doc</name><operator>-&gt;</operator><name>raw</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lvc</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>lvc</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>ndoc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lvc</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>ndoc</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>lvc</name><operator>-&gt;</operator><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>ndoc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ndoc</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>lvc</name><operator>-&gt;</operator><name>tail</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lvc</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>ndoc</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jb_list</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>EJDB_DOC</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>limit</name></decl></parameter>, <parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>log</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>db</name> <operator>||</operator> <operator>!</operator><name>q</name> <operator>||</operator> <operator>!</operator><name>first</name> <operator>||</operator> <operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>JB_LIST_VISITOR_CTX</name></name></type> <name>lvc</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>_EJDB_EXEC</name></name></type> <name>ux</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>db</name>      <operator>=</operator> <name>db</name></expr>,
    <expr><operator>.</operator><name>q</name>       <operator>=</operator> <name>q</name></expr>,
    <expr><operator>.</operator><name>visitor</name> <operator>=</operator> <name>_jb_exec_list_visitor</name></expr>,
    <expr><operator>.</operator><name>pool</name>    <operator>=</operator> <name>pool</name></expr>,
    <expr><operator>.</operator><name>limit</name>   <operator>=</operator> <name>limit</name></expr>,
    <expr><operator>.</operator><name>log</name>     <operator>=</operator> <name>log</name></expr>,
    <expr><operator>.</operator><name>opaque</name>  <operator>=</operator> <operator>&amp;</operator><name>lvc</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_exec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>first</name> <operator>=</operator> <name><name>lvc</name><operator>.</operator><name>head</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jb_count</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>count</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>limit</name></decl></parameter>, <parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>log</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>db</name> <operator>||</operator> <operator>!</operator><name>q</name> <operator>||</operator> <operator>!</operator><name>count</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>_EJDB_EXEC</name></name></type> <name>ux</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>db</name>    <operator>=</operator> <name>db</name></expr>,
    <expr><operator>.</operator><name>q</name>     <operator>=</operator> <name>q</name></expr>,
    <expr><operator>.</operator><name>limit</name> <operator>=</operator> <name>limit</name></expr>,
    <expr><operator>.</operator><name>log</name>   <operator>=</operator> <name>log</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>ejdb_exec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ux</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <name><name>ux</name><operator>.</operator><name>cnt</name></name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>ejdb_count</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>count</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>limit</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_jb_count</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>ejdb_count2</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>count</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>limit</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQL</name></type> <name>jql</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jql_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jql</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jb_count</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>jql</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>jql_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>ejdb_update</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>count</name></decl>;</decl_stmt>
  <return>return <expr><call><name>ejdb_count</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>ejdb_update2</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>count</name></decl>;</decl_stmt>
  <return>return <expr><call><name>ejdb_count2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>ejdb_list</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>EJDB_DOC</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>limit</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_jb_list</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>ejdb_list3</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>limit</name></decl></parameter>, <parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>log</name></decl></parameter>, <parameter><decl><type><name>EJDB_LIST</name> <modifier>*</modifier></type><name>listp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>listp</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>listp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>iwpool_create</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>EJDB_LIST</name></type> <name>list</name> <init>= <expr><call><name>iwpool_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>list</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jql_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>list</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jb_list</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>list</name><operator>-&gt;</operator><name>first</name></name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>log</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>listp</name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>ejdb_list4</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>limit</name></decl></parameter>, <parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>log</name></decl></parameter>, <parameter><decl><type><name>EJDB_LIST</name> <modifier>*</modifier></type><name>listp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>listp</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>listp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>iwpool_create</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>EJDB_LIST</name></type> <name>list</name> <init>= <expr><call><name>iwpool_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>list</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>q</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jb_list</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>list</name><operator>-&gt;</operator><name>first</name></name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>log</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>listp</name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>ejdb_list2</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>limit</name></decl></parameter>, <parameter><decl><type><name>EJDB_LIST</name> <modifier>*</modifier></type><name>listp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>ejdb_list3</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>listp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ejdb_list_destroy</name><parameter_list>(<parameter><decl><type><name>EJDB_LIST</name> <modifier>*</modifier></type><name>listp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>listp</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>EJDB_LIST</name></type> <name>list</name> <init>= <expr><operator>*</operator><name>listp</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>q</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>jql_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>list</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>pool</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>listp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>ejdb_remove_index</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>ejdb_idx_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>db</name> <operator>||</operator> <operator>!</operator><name>coll</name> <operator>||</operator> <operator>!</operator><name>path</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBCOLL</name></type> <name>jbc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV_val</name></type> <name>key</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL_PTR</name></type> <name>ptr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>keybuf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>KEY_PREFIX_IDXMETA</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>IWNUMBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt> <comment type="line">// Full key format: i.&lt;coldbid&gt;.&lt;idxdbid&gt;</comment>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_jb_coll_acquire_keeplock2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>JB_COLL_ACQUIRE_WRITE</name> <operator>|</operator> <name>JB_COLL_ACQUIRE_EXISTING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_ptr_alloc</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>JBIDX</name></type> <name>idx</name> <init>= <expr><name><name>jbc</name><operator>-&gt;</operator><name>idx</name></name></expr></init></decl>, <decl><type ref="prev"/><name>prev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name></expr>;</condition> <incr><expr><name>idx</name> <operator>=</operator> <name><name>idx</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>idx</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <operator>~</operator><name>EJDB_IDX_UNIQUE</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>mode</name> <operator>&amp;</operator> <operator>~</operator><name>EJDB_IDX_UNIQUE</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>jbl_ptr_cmp</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>key</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>keybuf</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>key</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>keybuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>keybuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>KEY_PREFIX_IDXMETA</name> <literal type="string">"%u"</literal> <literal type="string">"."</literal> <literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>key</name><operator>.</operator><name>size</name></name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>keybuf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_OVERFLOW</name></expr>;</expr_stmt>
        <goto>goto <name>finish</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwkv_del</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>metadb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>_jb_meta_nrecs_removedb</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>idx</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>jbc</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name><name>idx</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>idx</name><operator>-&gt;</operator><name>idb</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>iwkv_db_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>idb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>_jb_idx_release</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
  </block_content>}</block></for>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>API_COLL_UNLOCK</name><argument_list>(<argument><expr><name>jbc</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>ejdb_ensure_index</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>ejdb_idx_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>db</name> <operator>||</operator> <operator>!</operator><name>coll</name> <operator>||</operator> <operator>!</operator><name>path</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBCOLL</name></type> <name>jbc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV_val</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>keybuf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>KEY_PREFIX_IDXMETA</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>IWNUMBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt> <comment type="line">// Full key format: i.&lt;coldbid&gt;.&lt;idxdbid&gt;</comment>

  <decl_stmt><decl><type><name>JBIDX</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL_PTR</name></type> <name>ptr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>binn</name> <modifier>*</modifier></type><name>imeta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name>mode</name> <operator>&amp;</operator> <operator>(</operator><name>EJDB_IDX_STR</name> <operator>|</operator> <name>EJDB_IDX_I64</name> <operator>|</operator> <name>EJDB_IDX_F64</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>EJDB_IDX_STR</name></expr>:</case>
    <case>case <expr><name>EJDB_IDX_I64</name></expr>:</case>
    <case>case <expr><name>EJDB_IDX_F64</name></expr>:</case>
      <break>break;</break>
    <default>default:</default>
      <return>return <expr><name>EJDB_ERROR_INVALID_INDEX_MODE</name></expr>;</return>
  </block_content>}</block></switch>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_jb_coll_acquire_keeplock</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_ptr_alloc</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <name><name>jbc</name><operator>-&gt;</operator><name>idx</name></name></expr>;</init> <condition><expr><name>idx</name></expr>;</condition> <incr><expr><name>idx</name> <operator>=</operator> <name><name>idx</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>idx</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <operator>~</operator><name>EJDB_IDX_UNIQUE</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>mode</name> <operator>&amp;</operator> <operator>~</operator><name>EJDB_IDX_UNIQUE</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>jbl_ptr_cmp</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>idx</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>mode</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJDB_ERROR_MISMATCHED_INDEX_UNIQUENESS_MODE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>idx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>idx</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>jbc</name></name> <operator>=</operator> <name>jbc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>idbf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>EJDB_IDX_I64</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>idbf</name></name> <operator>|=</operator> <name>IWDB_VNUM64_KEYS</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>EJDB_IDX_F64</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>idbf</name></name> <operator>|=</operator> <name>IWDB_REALNUM_KEYS</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>EJDB_IDX_UNIQUE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>idbf</name></name> <operator>|=</operator> <name>IWDB_COMPOUND_KEYS</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwkv_new_db</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>iwkv</name></name></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>idbf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>idb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_jb_idx_fill</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// save index meta into metadb</comment>
  <expr_stmt><expr><name>imeta</name> <operator>=</operator> <call><name>binn_object</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>imeta</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(  <expr><operator>!</operator><call><name>binn_object_set_str</name><argument_list>(<argument><expr><name>imeta</name></expr></argument>, <argument><expr><literal type="string">"ptr"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call>
     <operator>||</operator> <operator>!</operator><call><name>binn_object_set_uint32</name><argument_list>(<argument><expr><name>imeta</name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call>
     <operator>||</operator> <operator>!</operator><call><name>binn_object_set_uint32</name><argument_list>(<argument><expr><name>imeta</name></expr></argument>, <argument><expr><literal type="string">"idbf"</literal></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>idbf</name></name></expr></argument>)</argument_list></call>
     <operator>||</operator> <operator>!</operator><call><name>binn_object_set_uint32</name><argument_list>(<argument><expr><name>imeta</name></expr></argument>, <argument><expr><literal type="string">"dbid"</literal></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBL_ERROR_CREATION</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>key</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>keybuf</name></expr>;</expr_stmt>
  <comment type="line">// Full key format: i.&lt;coldbid&gt;.&lt;idxdbid&gt;</comment>
  <expr_stmt><expr><name><name>key</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>keybuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>keybuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>KEY_PREFIX_IDXMETA</name> <literal type="string">"%u"</literal> <literal type="string">"."</literal> <literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>key</name><operator>.</operator><name>size</name></name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>keybuf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_OVERFLOW</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>val</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>binn_ptr</name><argument_list>(<argument><expr><name>imeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>val</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>binn_size</name><argument_list>(<argument><expr><name>imeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwkv_put</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>metadb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>jbc</name><operator>-&gt;</operator><name>idx</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbc</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>idx</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>idx</name><operator>-&gt;</operator><name>idb</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>iwkv_db_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>idb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>idb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>_jb_idx_release</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>imeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>API_COLL_UNLOCK</name><argument_list>(<argument><expr><name>jbc</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jb_patch</name><parameter_list>(
  <parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>upsert</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>patchjson</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>patchjbn</name></decl></parameter>, <parameter><decl><type><name>JBL</name></type> <name>patchjbl</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBCOLL</name></type> <name>jbc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JBL</name></name></type> <name>sjbl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>root</name></decl>, <decl><type ref="prev"/><name>patch</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL</name></type> <name>ujbl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV_val</name></type> <name>val</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV_val</name></type> <name>key</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>id</name></expr>,
    <expr><operator>.</operator><name>size</name> <operator>=</operator> sizeof<operator>(</operator><name>id</name><operator>)</operator></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_jb_coll_acquire_keeplock</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_get</name><argument_list>(<argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>cdb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>upsert</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>rc</name> <operator>==</operator> <name>IWKV_ERROR_NOTFOUND</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>patchjson</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_from_json</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ujbl</name></expr></argument>, <argument><expr><name>patchjson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>patchjbl</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ujbl</name> <operator>=</operator> <name>patchjbl</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>patchjbn</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_from_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ujbl</name></expr></argument>, <argument><expr><name>patchjbn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_INVALID_ARGS</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>jbl_type</name><argument_list>(<argument><expr><name>ujbl</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>JBV_OBJECT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJDB_ERROR_PATCH_JSON_NOT_OBJECT</name></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jb_put_impl</name><argument_list>(<argument><expr><name>jbc</name></expr></argument>, <argument><expr><name>ujbl</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>jbc</name><operator>-&gt;</operator><name>id_seq</name></name> <operator>&lt;</operator> <name>id</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>jbc</name><operator>-&gt;</operator><name>id_seq</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_from_buf_keep_onstack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sjbl</name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name>iwpool_create_empty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_to_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sjbl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>root</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>patchjson</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_from_json</name><argument_list>(<argument><expr><name>patchjson</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>patch</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>patchjbl</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_to_node</name><argument_list>(<argument><expr><name>patchjbl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>patch</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>patchjbn</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>patch</name> <operator>=</operator> <name>patchjbn</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_INVALID_ARGS</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbn_patch_auto</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_OBJECT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_create_empty_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ujbl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_ARRAY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_create_empty_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ujbl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBL_ERROR_CREATION</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_fill_from_node</name><argument_list>(<argument><expr><name>ujbl</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jb_put_impl</name><argument_list>(<argument><expr><name>jbc</name></expr></argument>, <argument><expr><name>ujbl</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>API_COLL_UNLOCK</name><argument_list>(<argument><expr><name>jbc</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ujbl</name> <operator>!=</operator> <name>patchjbl</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ujbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>val</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwkv_val_dispose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jb_wal_lock_interceptor</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>before</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name> <init>= <expr><name>op</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>before</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>API_WLOCK2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>API_UNLOCK</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>ejdb_patch</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>patchjson</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_jb_patch</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>patchjson</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>ejdb_patch_jbn</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>patch</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_jb_patch</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>patch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>ejdb_patch_jbl</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name></decl></parameter>, <parameter><decl><type><name>JBL</name></type> <name>patch</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_jb_patch</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>ejdb_merge_or_put</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>patchjson</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_jb_patch</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>patchjson</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>ejdb_merge_or_put_jbn</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>patch</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_jb_patch</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>patch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>ejdb_merge_or_put_jbl</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name></decl></parameter>, <parameter><decl><type><name>JBL</name></type> <name>patch</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_jb_patch</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>ejdb_put</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name></decl></parameter>, <parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>jbl</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBCOLL</name></type> <name>jbc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_jb_coll_acquire_keeplock</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jb_put_impl</name><argument_list>(<argument><expr><name>jbc</name></expr></argument>, <argument><expr><name>jbl</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>jbc</name><operator>-&gt;</operator><name>id_seq</name></name> <operator>&lt;</operator> <name>id</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>jbc</name><operator>-&gt;</operator><name>id_seq</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>API_COLL_UNLOCK</name><argument_list>(<argument><expr><name>jbc</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>ejdb_put_jbn</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>jbn</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jbl_from_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>, <argument><expr><name>jbn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_put</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>jbl</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jb_put_new_lw</name><parameter_list>(<parameter><decl><type><name>JBCOLL</name></type> <name>jbc</name></decl></parameter>, <parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>oid</name> <init>= <expr><name><name>jbc</name><operator>-&gt;</operator><name>id_seq</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV_val</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>key</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>oid</name></expr>,
    <expr><operator>.</operator><name>size</name> <operator>=</operator> sizeof<operator>(</operator><name>oid</name><operator>)</operator></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JBPHCTX</name></name></type> <name>pctx</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>id</name>  <operator>=</operator> <name>oid</name></expr>,
    <expr><operator>.</operator><name>jbc</name> <operator>=</operator> <name>jbc</name></expr>,
    <expr><operator>.</operator><name>jbl</name> <operator>=</operator> <name>jbl</name></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_as_buf</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_jb_put_handler_after</name><argument_list>(<argument><expr><call><name>iwkv_puth</name><argument_list>(<argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>cdb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>_jb_put_handler</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>pctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>jbc</name><operator>-&gt;</operator><name>id_seq</name></name> <operator>=</operator> <name>oid</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>id</name> <operator>=</operator> <name>oid</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>ejdb_put_new</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name></decl></parameter>, <parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>jbl</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBCOLL</name></type> <name>jbc</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_jb_coll_acquire_keeplock</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jb_put_new_lw</name><argument_list>(<argument><expr><name>jbc</name></expr></argument>, <argument><expr><name>jbl</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>API_COLL_UNLOCK</name><argument_list>(<argument><expr><name>jbc</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>ejdb_put_new_jbn</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>jbn</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jbl_from_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>, <argument><expr><name>jbn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_put_new</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>jbl</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jb_get</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>jb_coll_acquire_t</name></type> <name>acm</name></decl></parameter>, <parameter><decl><type><name>JBL</name> <modifier>*</modifier></type><name>jblp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>id</name> <operator>||</operator> <operator>!</operator><name>jblp</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>jblp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBCOLL</name></type> <name>jbc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV_val</name></type> <name>val</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV_val</name></type> <name>key</name> <init>= <expr><block>{ <expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>id</name></expr>, <expr><operator>.</operator><name>size</name> <operator>=</operator> sizeof<operator>(</operator><name>id</name><operator>)</operator></expr> }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_jb_coll_acquire_keeplock2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>acm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwkv_get</name><argument_list>(<argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>cdb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_from_buf_keep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>jblp</name> <operator>=</operator> <name>jbl</name></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>jbl</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>iwkv_val_dispose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>API_COLL_UNLOCK</name><argument_list>(<argument><expr><name>jbc</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>ejdb_get</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>JBL</name> <modifier>*</modifier></type><name>jblp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>jb_get</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>JB_COLL_ACQUIRE_EXISTING</name></expr></argument>, <argument><expr><name>jblp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>ejdb_del</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBCOLL</name></type> <name>jbc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JBL</name></name></type> <name>jbl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV_val</name></type> <name>val</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV_val</name></type> <name>key</name> <init>= <expr><block>{ <expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>id</name></expr>, <expr><operator>.</operator><name>size</name> <operator>=</operator> sizeof<operator>(</operator><name>id</name><operator>)</operator></expr> }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_jb_coll_acquire_keeplock2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>JB_COLL_ACQUIRE_WRITE</name> <operator>|</operator> <name>JB_COLL_ACQUIRE_EXISTING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwkv_get</name><argument_list>(<argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>cdb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_from_buf_keep_onstack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>JBIDX</name></type> <name>idx</name> <init>= <expr><name><name>jbc</name><operator>-&gt;</operator><name>idx</name></name></expr></init></decl>;</init> <condition><expr><name>idx</name></expr>;</condition> <incr><expr><name>idx</name> <operator>=</operator> <name><name>idx</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_jb_idx_record_remove</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwkv_del</name><argument_list>(<argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>cdb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jb_meta_nrecs_update</name><argument_list>(<argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbc</name><operator>-&gt;</operator><name>rnum</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name><name>val</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwkv_val_dispose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>API_COLL_UNLOCK</name><argument_list>(<argument><expr><name>jbc</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jb_del</name><parameter_list>(<parameter><decl><type><name>JBCOLL</name></type> <name>jbc</name></decl></parameter>, <parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV_val</name></type> <name>key</name> <init>= <expr><block>{ <expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>id</name></expr>, <expr><operator>.</operator><name>size</name> <operator>=</operator> sizeof<operator>(</operator><name>id</name><operator>)</operator></expr> }</block></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>JBIDX</name></type> <name>idx</name> <init>= <expr><name><name>jbc</name><operator>-&gt;</operator><name>idx</name></name></expr></init></decl>;</init> <condition><expr><name>idx</name></expr>;</condition> <incr><expr><name>idx</name> <operator>=</operator> <name><name>idx</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_jb_idx_record_remove</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>jbl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_del</name><argument_list>(<argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>cdb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jb_meta_nrecs_update</name><argument_list>(<argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbc</name><operator>-&gt;</operator><name>rnum</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jb_cursor_del</name><parameter_list>(<parameter><decl><type><name>JBCOLL</name></type> <name>jbc</name></decl></parameter>, <parameter><decl><type><name>IWKV_cursor</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>JBIDX</name></type> <name>idx</name> <init>= <expr><name><name>jbc</name><operator>-&gt;</operator><name>idx</name></name></expr></init></decl>;</init> <condition><expr><name>idx</name></expr>;</condition> <incr><expr><name>idx</name> <operator>=</operator> <name><name>idx</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_jb_idx_record_remove</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>jbl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_cursor_del</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jb_meta_nrecs_update</name><argument_list>(<argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbc</name><operator>-&gt;</operator><name>rnum</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>ejdb_ensure_collection</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBCOLL</name></type> <name>jbc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_jb_coll_acquire_keeplock</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>API_COLL_UNLOCK</name><argument_list>(<argument><expr><name>jbc</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>ejdb_remove_collection</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>IWKV_RDONLY</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_READONLY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>API_WLOCK</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>JBCOLL</name></type> <name>jbc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV_val</name></type> <name>key</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>keybuf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>KEY_PREFIX_IDXMETA</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>IWNUMBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt> <comment type="line">// Full key format: i.&lt;coldbid&gt;.&lt;idxdbid&gt;</comment>

  <expr_stmt><expr><name>jbc</name> <operator>=</operator> <call><name>iwhmap_get</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mcolls</name></name></expr></argument>, <argument><expr><name>coll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>jbc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>key</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>keybuf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>keybuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>keybuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>KEY_PREFIX_COLLMETA</name> <literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwkv_del</name><argument_list>(<argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>metadb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>IWKV_SYNC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>_jb_meta_nrecs_removedb</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>JBIDX</name></type> <name>idx</name> <init>= <expr><name><name>jbc</name><operator>-&gt;</operator><name>idx</name></name></expr></init></decl>;</init> <condition><expr><name>idx</name></expr>;</condition> <incr><expr><name>idx</name> <operator>=</operator> <name><name>idx</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>key</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>keybuf</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>key</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>keybuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>keybuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>KEY_PREFIX_IDXMETA</name> <literal type="string">"%u"</literal> <literal type="string">"."</literal> <literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwkv_del</name><argument_list>(<argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>metadb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>_jb_meta_nrecs_removedb</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><decl><type><name>JBIDX</name></type> <name>idx</name> <init>= <expr><name><name>jbc</name><operator>-&gt;</operator><name>idx</name></name></expr></init></decl>, <decl><type ref="prev"/><name>nidx</name></decl>;</init> <condition><expr><name>idx</name></expr>;</condition> <incr><expr><name>idx</name> <operator>=</operator> <name>nidx</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>iwkv_db_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>idb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>idb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>nidx</name> <operator>=</operator> <name><name>idx</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>_jb_idx_release</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>jbc</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>iwkv_db_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbc</name><operator>-&gt;</operator><name>cdb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwhmap_remove</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mcolls</name></name></expr></argument>, <argument><expr><name>coll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>API_UNLOCK</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jb_collection_join_resolver</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name></decl></parameter>, <parameter><decl><type><name>JBL</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>JBEXEC</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>out</name> <operator>&amp;&amp;</operator> <name>ctx</name> <operator>&amp;&amp;</operator> <name>coll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>jbc</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>jb_get</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>JB_COLL_ACQUIRE_EXISTING</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>jb_proj_node_cache_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>_JBDOCREF</name></name> <modifier>*</modifier></type><name>r1</name> <init>= <expr><name>v1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>_JBDOCREF</name></name> <modifier>*</modifier></type><name>r2</name> <init>= <expr><name>v2</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><ternary><condition><expr><name><name>r1</name><operator>-&gt;</operator><name>id</name></name> <operator>&gt;</operator> <name><name>r2</name><operator>-&gt;</operator><name>id</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><name><name>r1</name><operator>-&gt;</operator><name>id</name></name> <operator>&lt;</operator> <name><name>r2</name><operator>-&gt;</operator><name>id</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>r1</name><operator>-&gt;</operator><name>coll</name></name></expr></argument>, <argument><expr><name><name>r2</name><operator>-&gt;</operator><name>coll</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jb_proj_node_kvfree</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>jb_proj_node_hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>_JBDOCREF</name></name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><name>key</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>murmur3</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ref</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>ejdb_rename_collection</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_coll</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>coll</name> <operator>||</operator> <operator>!</operator><name>new_coll</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>IWKV_RDONLY</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_READONLY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>IWKV_val</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL</name></type> <name>nmeta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>jbv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>keybuf</name><index>[<expr><name>IWNUMBUF_SIZE</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>KEY_PREFIX_COLLMETA</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>API_WLOCK</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>JBCOLL</name></type> <name>jbc</name> <init>= <expr><call><name>iwhmap_get</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mcolls</name></name></expr></argument>, <argument><expr><name>coll</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>jbc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJDB_ERROR_COLLECTION_NOT_FOUND</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>iwhmap_get</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mcolls</name></name></expr></argument>, <argument><expr><name>new_coll</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJDB_ERROR_TARGET_COLLECTION_EXISTS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_create_empty_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nmeta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_object_set_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nmeta</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>new_coll</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBL_ERROR_CREATION</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_object_set_uint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nmeta</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBL_ERROR_CREATION</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_as_buf</name><argument_list>(<argument><expr><name>nmeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>key</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>keybuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>keybuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>KEY_PREFIX_COLLMETA</name> <literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>jbc</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>key</name><operator>.</operator><name>size</name></name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>keybuf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_OVERFLOW</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>key</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>keybuf</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_at</name><argument_list>(<argument><expr><name>nmeta</name></expr></argument>, <argument><expr><literal type="string">"/name"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_name</name> <init>= <expr><call><name>jbl_get_str</name><argument_list>(<argument><expr><name>jbv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwkv_put</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>metadb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>IWKV_SYNC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwhmap_rename</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mcolls</name></name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>new_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>jbc</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>new_name</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbc</name><operator>-&gt;</operator><name>meta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbc</name><operator>-&gt;</operator><name>meta</name></name> <operator>=</operator> <name>nmeta</name></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>jbv</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>nmeta</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nmeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>API_UNLOCK</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>ejdb_get_meta</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>JBL</name> <modifier>*</modifier></type><name>jblp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>jblp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jbl_create_empty_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>binn</name> <modifier>*</modifier></type><name>clist</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>API_RLOCK</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_object_set_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>, <argument><expr><call><name>ejdb_version_full</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBL_ERROR_CREATION</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM_STATE</name></type> <name>sfsm</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_state</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>iwkv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sfsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(  <expr><operator>!</operator><call><name>binn_object_set_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><name><name>sfsm</name><operator>.</operator><name>exfile</name><operator>.</operator><name>file</name><operator>.</operator><name>opts</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call>
     <operator>||</operator> <operator>!</operator><call><name>binn_object_set_int64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><name><name>sfsm</name><operator>.</operator><name>exfile</name><operator>.</operator><name>fsize</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBL_ERROR_CREATION</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>clist</name> <operator>=</operator> <call><name>binn_list</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>clist</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>IWHMAP_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>iwhmap_iter_init</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mcolls</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><call><name>iwhmap_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>JBCOLL</name></type> <name>jbc</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>val</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_jb_coll_add_meta_lr</name><argument_list>(<argument><expr><name>jbc</name></expr></argument>, <argument><expr><name>clist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_object_set_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><literal type="string">"collections"</literal></expr></argument>, <argument><expr><name>clist</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBL_ERROR_CREATION</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>clist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>clist</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>API_UNLOCK</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>clist</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><name>clist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>jblp</name> <operator>=</operator> <name>jbl</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>ejdb_online_backup</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target_file</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ENSURE_OPEN</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>iwkv_online_backup</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>iwkv</name></name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>target_file</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>ejdb_get_iwkv</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>IWKV</name> <modifier>*</modifier></type><name>kvp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>db</name> <operator>||</operator> <operator>!</operator><name>kvp</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>kvp</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>iwkv</name></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_mcolls_map_entry_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_jb_coll_release</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>ejdb_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>EJDB_OPTS</name> <modifier>*</modifier></type><name>_opts</name></decl></parameter>, <parameter><decl><type><name>EJDB</name> <modifier>*</modifier></type><name>ejdbp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>ejdbp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>ejdb_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>_opts</name> <operator>||</operator> <operator>!</operator><name><name>_opts</name><operator>-&gt;</operator><name>kv</name><operator>.</operator><name>path</name></name> <operator>||</operator> <operator>!</operator><name>ejdbp</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>db</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>db</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>opts</name></name></expr></argument>, <argument><expr><name>_opts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>opts</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>sort_buffer_sz</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>sort_buffer_sz</name></name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt> <comment type="line">// 16Mb</comment>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>sort_buffer_sz</name></name> <operator>&lt;</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content> <comment type="line">// Min 1Mb</comment>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>sort_buffer_sz</name></name> <operator>=</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>document_buffer_sz</name></name></expr>)</condition> <block>{<block_content> <comment type="line">// 64Kb</comment>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>document_buffer_sz</name></name> <operator>=</operator> <literal type="number">64</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>document_buffer_sz</name></name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content> <comment type="line">// Min 16Kb</comment>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>document_buffer_sz</name></name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>EJDB_HTTP</name> <modifier>*</modifier></type><name>http</name> <init>= <expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>http</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>http</name><operator>-&gt;</operator><name>bind</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>bind</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>http</name><operator>-&gt;</operator><name>bind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>http</name><operator>-&gt;</operator><name>access_token</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>access_token</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>http</name><operator>-&gt;</operator><name>access_token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>http</name><operator>-&gt;</operator><name>access_token</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>access_token_len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>http</name><operator>-&gt;</operator><name>access_token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>pthread_rwlockattr_t</name></type> <name>attr</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_rwlockattr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__linux__</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>defined</name> <name>__USE_UNIX98</name> <operator>||</operator> <name>defined</name> <name>__USE_XOPEN2K</name><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name>pthread_rwlockattr_setkind_np</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name>rci</name> <operator>=</operator> <call><name>pthread_rwlock_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>rwl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCB</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>mcolls</name></name> <operator>=</operator> <call><name>iwhmap_create_str</name><argument_list>(<argument><expr><name>_mcolls_map_entry_free</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>IWKV_OPTS</name></type> <name>kvopts</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>kvopts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>kv</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>kv</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kvopts</name><operator>.</operator><name>wal</name><operator>.</operator><name>enabled</name></name> <operator>=</operator> <operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>no_wal</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kvopts</name><operator>.</operator><name>wal</name><operator>.</operator><name>wal_lock_interceptor</name></name> <operator>=</operator> <name>_jb_wal_lock_interceptor</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kvopts</name><operator>.</operator><name>wal</name><operator>.</operator><name>wal_lock_interceptor_opaque</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwkv_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>kvopts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>iwkv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>oflags</name></name> <operator>=</operator> <name><name>kvopts</name><operator>.</operator><name>oflags</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_jb_db_meta_load</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>enabled</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// Maximum WS/HTTP API body size. Default: 64Mb, Min: 512K</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>max_body_size</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>max_body_size</name></name> <operator>=</operator> <literal type="number">64</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>max_body_size</name></name> <operator>&lt;</operator> <literal type="number">512</literal> <operator>*</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>max_body_size</name></name> <operator>=</operator> <literal type="number">512</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JB_HTTP</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>enabled</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>blocking</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbr_start</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>opts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>jbr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_jb_db_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>open</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ejdbp</name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JB_HTTP</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>enabled</name></name> <operator>&amp;&amp;</operator> <name><name>db</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>blocking</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbr_start</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>opts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>jbr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>ejdb_close</name><parameter_list>(<parameter><decl><type><name>EJDB</name> <modifier>*</modifier></type><name>ejdbp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ejdbp</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>ejdbp</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name> <init>= <expr><operator>*</operator><name>ejdbp</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>open</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error2</name><argument_list>(<argument><expr><literal type="string">"Database is closed already"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>IW_ERROR_INVALID_STATE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_jb_db_release</name><argument_list>(<argument><expr><name>ejdbp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ejdb_git_revision</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>EJDB2_GIT_REVISION</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ejdb_version_full</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>EJDB2_VERSION</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>ejdb_version_major</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>EJDB2_VERSION_MAJOR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>ejdb_version_minor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>EJDB2_VERSION_MINOR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>ejdb_version_patch</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>EJDB2_VERSION_PATCH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_ejdb_ecodefn</name><parameter_list>(<parameter><decl><type><name>locale_t</name></type> <name>locale</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ecode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>ecode</name> <operator>&gt;</operator> <name>_EJDB_ERROR_START</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ecode</name> <operator>&lt;</operator> <name>_EJDB_ERROR_END</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <switch>switch <condition>(<expr><name>ecode</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>EJDB_ERROR_INVALID_COLLECTION_META</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid collection metadata (EJDB_ERROR_INVALID_COLLECTION_META)"</literal></expr>;</return>
    <case>case <expr><name>EJDB_ERROR_INVALID_COLLECTION_INDEX_META</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid collection index metadata (EJDB_ERROR_INVALID_COLLECTION_INDEX_META)"</literal></expr>;</return>
    <case>case <expr><name>EJDB_ERROR_INVALID_INDEX_MODE</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid index mode specified (EJDB_ERROR_INVALID_INDEX_MODE)"</literal></expr>;</return>
    <case>case <expr><name>EJDB_ERROR_MISMATCHED_INDEX_UNIQUENESS_MODE</name></expr>:</case>
      <return>return <expr><literal type="string">"Index exists but mismatched uniqueness constraint (EJDB_ERROR_MISMATCHED_INDEX_UNIQUENESS_MODE)"</literal></expr>;</return>
    <case>case <expr><name>EJDB_ERROR_UNIQUE_INDEX_CONSTRAINT_VIOLATED</name></expr>:</case>
      <return>return <expr><literal type="string">"Unique index constraint violated (EJDB_ERROR_UNIQUE_INDEX_CONSTRAINT_VIOLATED)"</literal></expr>;</return>
    <case>case <expr><name>EJDB_ERROR_INVALID_COLLECTION_NAME</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid collection name (EJDB_ERROR_INVALID_COLLECTION_NAME)"</literal></expr>;</return>
    <case>case <expr><name>EJDB_ERROR_COLLECTION_NOT_FOUND</name></expr>:</case>
      <return>return <expr><literal type="string">"Collection not found (EJDB_ERROR_COLLECTION_NOT_FOUND)"</literal></expr>;</return>
    <case>case <expr><name>EJDB_ERROR_TARGET_COLLECTION_EXISTS</name></expr>:</case>
      <return>return <expr><literal type="string">"Target collection exists (EJDB_ERROR_TARGET_COLLECTION_EXISTS)"</literal></expr>;</return>
    <case>case <expr><name>EJDB_ERROR_PATCH_JSON_NOT_OBJECT</name></expr>:</case>
      <return>return <expr><literal type="string">"Patch JSON must be an object (map) (EJDB_ERROR_PATCH_JSON_NOT_OBJECT)"</literal></expr>;</return>
  </block_content>}</block></switch>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>ejdb_init</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>jb_initialized</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jb_initialized</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="line">// initialized already</comment>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iw_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JB_HTTP</name></cpp:ifdef>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbr_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><call><name>iwlog_register_ecodefn</name><argument_list>(<argument><expr><name>_ejdb_ecodefn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
