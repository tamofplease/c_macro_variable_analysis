<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/src/bindings/ejdb2_jni/src/ejdb2jni.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ejdb2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jni.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"com_softmotions_ejdb2_EJDB2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"com_softmotions_ejdb2_JQL.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JBN_JSON_FLUSH_BUFFER_SZ</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>JBN_STR</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>utf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jstring</name></type>     <name>str</name></decl>;</decl_stmt>
}</block></struct></type> <name>JBN_STR</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
  <decl><name>_JBN_ERROR_START</name> <init>= <expr><operator>(</operator><name>IW_ERROR_START</name> <operator>+</operator> <literal type="number">15000UL</literal> <operator>+</operator> <literal type="number">5000</literal><operator>)</operator></expr></init></decl>,
  <decl><name>JBN_ERROR_INVALID_FIELD</name></decl>,          <comment type="block" format="doxygen">/**&lt; Failed to get class field (JBN_ERROR_INVALID_FIELD) */</comment>
  <decl><name>JBN_ERROR_INVALID_METHOD</name></decl>,         <comment type="block" format="doxygen">/**&lt; Failed to get class method (JBN_ERROR_INVALID_METHOD) */</comment>
  <decl><name>JBN_ERROR_INVALID_OPTIONS</name></decl>,
  <comment type="block" format="doxygen">/**&lt; Invalid com.softmotions.ejdb2.EJDB2Builder configuration provided
     (JBN_ERROR_INVALID_OPTIONS) */</comment>
  <decl><name>JBN_ERROR_INVALID_STATE</name></decl>,          <comment type="block" format="doxygen">/**&lt; Invalid com.softmotions.ejdb2.EJDB2 JNI state (JBN_ERROR_INVALID_STATE) */</comment>
  <decl><name>JBN_ERROR_CREATION_OBJ</name></decl>,           <comment type="block" format="doxygen">/**&lt; Failed to create/allocate JNI object (JBN_ERROR_CREATION_OBJ) */</comment>
  <decl><name>_JBN_ERROR_END</name></decl>,
}</block></enum></type> <name>jbn_ecode_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>jclass</name></type> <name>k_EJDB2Exception_clazz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>jmethodID</name></type> <name>k_EJDB2Exception_constructor</name></decl>;</decl_stmt> <comment type="line">// EJDB2Exception(int code, String message)</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>jclass</name></type> <name>k_EJDB2_clazz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>jfieldID</name></type> <name>k_EJDB2_handle_fid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>jclass</name></type> <name>k_JQL_clazz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>jfieldID</name></type> <name>k_JQL_handle_fid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>jfieldID</name></type> <name>k_JQL_db_fid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>jfieldID</name></type> <name>k_JQL_query_fid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>jfieldID</name></type> <name>k_JQL_collection_fid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>jfieldID</name></type> <name>k_JQL_skip_fid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>jfieldID</name></type> <name>k_JQL_limit_fid</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JBNFIELD</name><parameter_list>(<parameter><type><name>fid_</name></type></parameter>, <parameter><type><name>env_</name></type></parameter>, <parameter><type><name>clazz_</name></type></parameter>, <parameter><type><name>name_</name></type></parameter>, <parameter><type><name>type_</name></type></parameter>)</parameter_list></cpp:macro>           \
  <cpp:value>fid_ = (*(env_))-&gt;GetFieldID(env_, clazz_, name_, type_);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JBNFIELD2</name><parameter_list>(<parameter><type><name>fid_</name></type></parameter>, <parameter><type><name>env_</name></type></parameter>, <parameter><type><name>clazz_</name></type></parameter>, <parameter><type><name>name_</name></type></parameter>, <parameter><type><name>type_</name></type></parameter>, <parameter><type><name>label_</name></type></parameter>)</parameter_list></cpp:macro>  \
  <cpp:value>fid_ = (*(env_))-&gt;GetFieldID(env_, clazz_, name_, type_);  \
  if (!fid_) goto label_;</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>JBN_JSPRINT_CTX</name> <block>{
  <decl_stmt><decl><type><name>int</name></type>     <name>flush_buffer_sz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl>;</decl_stmt>
  <function_decl><type><name>iwrc</name></type> (<modifier>*</modifier><name>flushFn</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>JBN_JSPRINT_CTX</name></name> <modifier>*</modifier></type><name>pctx</name></decl></parameter>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>JNIEnv</name>   <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jclass</name></type>    <name>osClazz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jobject</name></type>   <name>osObj</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jmethodID</name></type> <name>write_mid</name></decl>;</decl_stmt>
}</block></struct></type> <name>JBN_JSPRINT_CTX</name>;</typedef>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>jbn_json_printer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JBN_JSPRINT_CTX</name> <modifier>*</modifier></type><name>pctx</name> <init>= <expr><name>op</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><name><name>pctx</name><operator>-&gt;</operator><name>xstr</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>count</name></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwxstr_cat</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>count</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwxstr_cat</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>pctx</name><operator>-&gt;</operator><name>flush_buffer_sz</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name><name>pctx</name><operator>-&gt;</operator><name>flushFn</name></name><argument_list>(<argument><expr><name>pctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>iwrc</name></type> <name>jbn_db</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>thisObj</name></decl></parameter>, <parameter><decl><type><name>EJDB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>db</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>jlong</name></type> <name>ptr</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetLongField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><name>k_EJDB2_handle_fid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBN_ERROR_INVALID_STATE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>db</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>iwrc</name></type> <name>jbn_jql_q</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>thisObj</name></decl></parameter>, <parameter><decl><type><name>JQL</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>jlong</name></type> <name>ptr</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetLongField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><name>k_JQL_handle_fid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBN_ERROR_INVALID_STATE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>jbn_flush_to_stream</name><parameter_list>(<parameter><decl><type><name>JBN_JSPRINT_CTX</name> <modifier>*</modifier></type><name>pctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name><name>pctx</name><operator>-&gt;</operator><name>env</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><name><name>pctx</name><operator>-&gt;</operator><name>xstr</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>xsz</name> <init>= <expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>xsz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>jbyteArray</name></type> <name>arr</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewByteArray</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>xsz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>arr</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBN_ERROR_CREATION_OBJ</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>SetByteArrayRegion</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>arr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>xsz</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwxstr_clear</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>pctx</name><operator>-&gt;</operator><name>osObj</name></name></expr></argument>, <argument><expr><name><name>pctx</name><operator>-&gt;</operator><name>write_mid</name></name></expr></argument>, <argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>jbn_init_pctx</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>JBN_JSPRINT_CTX</name> <modifier>*</modifier></type><name>pctx</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>thisObj</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>osObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jclass</name></type> <name>osClazz</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetObjectClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>osObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jmethodID</name></type> <name>writeMid</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>osClazz</name></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>, <argument><expr><literal type="string">"([B)V"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>xstr</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pctx</name><operator>-&gt;</operator><name>xstr</name></name> <operator>=</operator> <name>xstr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pctx</name><operator>-&gt;</operator><name>flush_buffer_sz</name></name> <operator>=</operator> <name>JBN_JSON_FLUSH_BUFFER_SZ</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pctx</name><operator>-&gt;</operator><name>env</name></name> <operator>=</operator> <name>env</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pctx</name><operator>-&gt;</operator><name>osClazz</name></name> <operator>=</operator> <name>osClazz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pctx</name><operator>-&gt;</operator><name>osObj</name></name> <operator>=</operator> <name>osObj</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pctx</name><operator>-&gt;</operator><name>write_mid</name></name> <operator>=</operator> <name>writeMid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pctx</name><operator>-&gt;</operator><name>flushFn</name></name> <operator>=</operator> <name>jbn_flush_to_stream</name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jbn_destroy_pctx</name><parameter_list>(<parameter><decl><type><name>JBN_JSPRINT_CTX</name> <modifier>*</modifier></type><name>pctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pctx</name><operator>-&gt;</operator><name>xstr</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name><name>pctx</name><operator>-&gt;</operator><name>xstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pctx</name><operator>-&gt;</operator><name>xstr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jbn_throw_rc_exception</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>iwrc</name></type> <name>rc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg_</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>msg_</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>msg</name> <operator>=</operator> <name>msg_</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>iwlog_ecode_explained</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>msg</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>msg</name> <operator>=</operator> <literal type="string">"Unknown iwrc error"</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>eno</name> <init>= <expr><call><name>iwrc_strip_errno</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jstring</name></type> <name>msgStr</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewStringUTF</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jobject</name></type> <name>exObj</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewObject</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>k_EJDB2Exception_clazz</name></expr></argument>,
                                    <argument><expr><name>k_EJDB2Exception_constructor</name></expr></argument>, <argument><expr><operator>(</operator><name>jlong</name><operator>)</operator> <name>rc</name></expr></argument>, <argument><expr><operator>(</operator><name>jlong</name><operator>)</operator> <name>eno</name></expr></argument>, <argument><expr><name>msgStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>Throw</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>exObj</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"Failed to throw exception for EJDB2Exception: %s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>void</name> <name>JNICALL</name></type> <name>Java_com_softmotions_ejdb2_EJDB2__1open</name><parameter_list>(
  <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>,
  <parameter><decl><type><name>jobject</name></type> <name>thisObj</name></decl></parameter>,
  <parameter><decl><type><name>jobject</name></type> <name>optsObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB_OPTS</name></type> <name>opts</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JNIEnv</name></type> <name>e</name> <init>= <expr><operator>*</operator><name>env</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jfieldID</name></type> <name>fid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jobject</name></type> <name>iwkv</name></decl>, <decl><type ref="prev"/><name>http</name></decl>, <decl><type ref="prev"/><name>wal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jclass</name></type> <name>iwkvClazz</name></decl>, <decl><type ref="prev"/><name>httpClazz</name></decl>, <decl><type ref="prev"/><name>walClazz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jclass</name></type> <name>optsClazz</name> <init>= <expr><call><name><name>e</name><operator>-&gt;</operator><name>GetObjectClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>optsObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>sc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBN_STR</name></type> <name><name>strings</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

  <comment type="line">// opts</comment>
  <expr_stmt><expr><call><name>JBNFIELD</name><argument_list>(<argument><expr><name>fid</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><name>optsClazz</name></expr></argument>, <argument><expr><literal type="string">"no_wal"</literal></expr></argument>, <argument><expr><literal type="string">"Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>no_wal</name></name> <operator>=</operator> <call><name><name>e</name><operator>-&gt;</operator><name>GetBooleanField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>optsObj</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>JBNFIELD</name><argument_list>(<argument><expr><name>fid</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><name>optsClazz</name></expr></argument>, <argument><expr><literal type="string">"sort_buffer_sz"</literal></expr></argument>, <argument><expr><literal type="string">"I"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>sort_buffer_sz</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name><name>e</name><operator>-&gt;</operator><name>GetIntField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>optsObj</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>JBNFIELD</name><argument_list>(<argument><expr><name>fid</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><name>optsClazz</name></expr></argument>, <argument><expr><literal type="string">"document_buffer_sz"</literal></expr></argument>, <argument><expr><literal type="string">"I"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>document_buffer_sz</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name><name>e</name><operator>-&gt;</operator><name>GetIntField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>optsObj</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// iwkv</comment>
  <expr_stmt><expr><call><name>JBNFIELD</name><argument_list>(<argument><expr><name>fid</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><name>optsClazz</name></expr></argument>, <argument><expr><literal type="string">"iwkv"</literal></expr></argument>, <argument><expr><literal type="string">"Lcom/softmotions/ejdb2/IWKVOptions;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>iwkv</name> <operator>=</operator> <call><name><name>e</name><operator>-&gt;</operator><name>GetObjectField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>optsObj</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>iwkv</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbn_throw_rc_exception</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>JBN_ERROR_INVALID_OPTIONS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>iwkvClazz</name> <operator>=</operator> <call><name><name>e</name><operator>-&gt;</operator><name>GetObjectClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>iwkv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>JBNFIELD</name><argument_list>(<argument><expr><name>fid</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><name>iwkvClazz</name></expr></argument>, <argument><expr><literal type="string">"random_seed"</literal></expr></argument>, <argument><expr><literal type="string">"J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>random_seed</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name><name>e</name><operator>-&gt;</operator><name>GetLongField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>iwkv</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>JBNFIELD</name><argument_list>(<argument><expr><name>fid</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><name>iwkvClazz</name></expr></argument>, <argument><expr><literal type="string">"oflags"</literal></expr></argument>, <argument><expr><literal type="string">"J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>oflags</name></name> <operator>=</operator> <operator>(</operator><name>iwkv_openflags</name><operator>)</operator> <call><name><name>e</name><operator>-&gt;</operator><name>GetLongField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>iwkv</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>JBNFIELD</name><argument_list>(<argument><expr><name>fid</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><name>iwkvClazz</name></expr></argument>, <argument><expr><literal type="string">"file_lock_fail_fast"</literal></expr></argument>, <argument><expr><literal type="string">"Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>file_lock_fail_fast</name></name> <operator>=</operator> <call><name><name>e</name><operator>-&gt;</operator><name>GetBooleanField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>iwkv</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>JBNFIELD</name><argument_list>(<argument><expr><name>fid</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><name>iwkvClazz</name></expr></argument>, <argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><literal type="string">"Ljava/lang/String;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>strings</name><index>[<expr><name>sc</name></expr>]</index></name><operator>.</operator><name>str</name> <operator>=</operator> <call><name><name>e</name><operator>-&gt;</operator><name>GetObjectField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>iwkv</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>strings</name><index>[<expr><name>sc</name></expr>]</index></name><operator>.</operator><name>utf</name> <operator>=</operator> <ternary><condition><expr><name><name>strings</name><index>[<expr><name>sc</name></expr>]</index></name><operator>.</operator><name>str</name></expr> ?</condition><then> <expr><call><name><name>e</name><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>strings</name><index>[<expr><name>sc</name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>path</name></name> <operator>=</operator> <name><name>strings</name><index>[<expr><name>sc</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>utf</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>path</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBN_ERROR_INVALID_OPTIONS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// wal</comment>
  <expr_stmt><expr><call><name>JBNFIELD2</name><argument_list>(<argument><expr><name>fid</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><name>iwkvClazz</name></expr></argument>, <argument><expr><literal type="string">"wal"</literal></expr></argument>, <argument><expr><literal type="string">"Lcom/softmotions/ejdb2/IWKVOptions$WALOptions;"</literal></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>wal</name> <operator>=</operator> <call><name><name>e</name><operator>-&gt;</operator><name>GetObjectField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>iwkv</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>wal</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbn_throw_rc_exception</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>JBN_ERROR_INVALID_OPTIONS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>walClazz</name> <operator>=</operator> <call><name><name>e</name><operator>-&gt;</operator><name>GetObjectClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>JBNFIELD2</name><argument_list>(<argument><expr><name>fid</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><name>walClazz</name></expr></argument>, <argument><expr><literal type="string">"check_crc_on_checkpoint"</literal></expr></argument>, <argument><expr><literal type="string">"Z"</literal></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>wal</name><operator>.</operator><name>check_crc_on_checkpoint</name></name> <operator>=</operator> <call><name><name>e</name><operator>-&gt;</operator><name>GetBooleanField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>wal</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>JBNFIELD2</name><argument_list>(<argument><expr><name>fid</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><name>walClazz</name></expr></argument>, <argument><expr><literal type="string">"savepoint_timeout_sec"</literal></expr></argument>, <argument><expr><literal type="string">"I"</literal></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>wal</name><operator>.</operator><name>savepoint_timeout_sec</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name><name>e</name><operator>-&gt;</operator><name>GetIntField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>wal</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>JBNFIELD2</name><argument_list>(<argument><expr><name>fid</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><name>walClazz</name></expr></argument>, <argument><expr><literal type="string">"checkpoint_timeout_sec"</literal></expr></argument>, <argument><expr><literal type="string">"I"</literal></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>wal</name><operator>.</operator><name>checkpoint_timeout_sec</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name><name>e</name><operator>-&gt;</operator><name>GetIntField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>wal</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>JBNFIELD2</name><argument_list>(<argument><expr><name>fid</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><name>walClazz</name></expr></argument>, <argument><expr><literal type="string">"buffer_sz"</literal></expr></argument>, <argument><expr><literal type="string">"J"</literal></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>wal</name><operator>.</operator><name>wal_buffer_sz</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <call><name><name>e</name><operator>-&gt;</operator><name>GetLongField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>wal</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>JBNFIELD2</name><argument_list>(<argument><expr><name>fid</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><name>walClazz</name></expr></argument>, <argument><expr><literal type="string">"checkpoint_buffer_sz"</literal></expr></argument>, <argument><expr><literal type="string">"J"</literal></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>wal</name><operator>.</operator><name>checkpoint_buffer_sz</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <call><name><name>e</name><operator>-&gt;</operator><name>GetLongField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>wal</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// http</comment>
  <expr_stmt><expr><call><name>JBNFIELD2</name><argument_list>(<argument><expr><name>fid</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><name>optsClazz</name></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><literal type="string">"Lcom/softmotions/ejdb2/EJDB2Builder$EJDB2HttpOptions;"</literal></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>http</name> <operator>=</operator> <call><name><name>e</name><operator>-&gt;</operator><name>GetObjectField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>optsObj</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>httpClazz</name> <operator>=</operator> <call><name><name>e</name><operator>-&gt;</operator><name>GetObjectClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>JBNFIELD2</name><argument_list>(<argument><expr><name>fid</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><name>httpClazz</name></expr></argument>, <argument><expr><literal type="string">"enabled"</literal></expr></argument>, <argument><expr><literal type="string">"Z"</literal></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>enabled</name></name> <operator>=</operator> <call><name><name>e</name><operator>-&gt;</operator><name>GetBooleanField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>http</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>JBNFIELD2</name><argument_list>(<argument><expr><name>fid</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><name>httpClazz</name></expr></argument>, <argument><expr><literal type="string">"port"</literal></expr></argument>, <argument><expr><literal type="string">"I"</literal></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>port</name></name> <operator>=</operator> <call><name><name>e</name><operator>-&gt;</operator><name>GetIntField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>http</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>JBNFIELD2</name><argument_list>(<argument><expr><name>fid</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><name>httpClazz</name></expr></argument>, <argument><expr><literal type="string">"bind"</literal></expr></argument>, <argument><expr><literal type="string">"Ljava/lang/String;"</literal></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>strings</name><index>[<expr><name>sc</name></expr>]</index></name><operator>.</operator><name>str</name> <operator>=</operator> <call><name><name>e</name><operator>-&gt;</operator><name>GetObjectField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>http</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>strings</name><index>[<expr><name>sc</name></expr>]</index></name><operator>.</operator><name>utf</name> <operator>=</operator> <ternary><condition><expr><name><name>strings</name><index>[<expr><name>sc</name></expr>]</index></name><operator>.</operator><name>str</name></expr> ?</condition><then> <expr><call><name><name>e</name><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>strings</name><index>[<expr><name>sc</name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>bind</name></name> <operator>=</operator> <name><name>strings</name><index>[<expr><name>sc</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>utf</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>JBNFIELD2</name><argument_list>(<argument><expr><name>fid</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><name>httpClazz</name></expr></argument>, <argument><expr><literal type="string">"access_token"</literal></expr></argument>, <argument><expr><literal type="string">"Ljava/lang/String;"</literal></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>strings</name><index>[<expr><name>sc</name></expr>]</index></name><operator>.</operator><name>str</name> <operator>=</operator> <call><name><name>e</name><operator>-&gt;</operator><name>GetObjectField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>http</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>strings</name><index>[<expr><name>sc</name></expr>]</index></name><operator>.</operator><name>utf</name> <operator>=</operator> <ternary><condition><expr><name><name>strings</name><index>[<expr><name>sc</name></expr>]</index></name><operator>.</operator><name>str</name></expr> ?</condition><then> <expr><call><name><name>e</name><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>strings</name><index>[<expr><name>sc</name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>access_token</name></name> <operator>=</operator> <name><name>strings</name><index>[<expr><name>sc</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>utf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>access_token_len</name></name> <operator>=</operator> <ternary><condition><expr><name><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>access_token</name></name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>access_token</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>JBNFIELD2</name><argument_list>(<argument><expr><name>fid</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><name>httpClazz</name></expr></argument>, <argument><expr><literal type="string">"read_anon"</literal></expr></argument>, <argument><expr><literal type="string">"Z"</literal></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>read_anon</name></name> <operator>=</operator> <call><name><name>e</name><operator>-&gt;</operator><name>GetBooleanField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>http</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>JBNFIELD2</name><argument_list>(<argument><expr><name>fid</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><name>httpClazz</name></expr></argument>, <argument><expr><literal type="string">"max_body_size"</literal></expr></argument>, <argument><expr><literal type="string">"I"</literal></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>max_body_size</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <call><name><name>e</name><operator>-&gt;</operator><name>GetIntField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>http</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>SetLongField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><name>k_EJDB2_handle_fid</name></expr></argument>, <argument><expr><operator>(</operator><name>jlong</name><operator>)</operator> <name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>strings</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>strings</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>strings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>str</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>e</name><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>strings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>, <argument><expr><name><name>strings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>utf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbn_throw_rc_exception</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// DISPOSE</comment>
<function><type><name>JNIEXPORT</name> <name>void</name> <name>JNICALL</name></type> <name>Java_com_softmotions_ejdb2_EJDB2__1dispose</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>thisObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>jlong</name></type> <name>ptr</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetLongField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><name>k_EJDB2_handle_fid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>SetLongField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><name>k_EJDB2_handle_fid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>ejdb_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>jbn_throw_rc_exception</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// PUT</comment>
<function><type><name>JNIEXPORT</name> <name>jlong</name> <name>JNICALL</name></type> <name>Java_com_softmotions_ejdb2_EJDB2__1put</name><parameter_list>(
  <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>,
  <parameter><decl><type><name>jobject</name></type> <name>thisObj</name></decl></parameter>,
  <parameter><decl><type><name>jstring</name></type> <name>coll_</name></decl></parameter>,
  <parameter><decl><type><name>jstring</name></type> <name>json_</name></decl></parameter>,
  <parameter><decl><type><name>jlong</name></type>   <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jlong</name></type> <name>ret</name> <init>= <expr><name>id</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>coll_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>json_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>coll</name> <operator>||</operator> <operator>!</operator><name>json</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_INVALID_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_db</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_from_json</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>, <argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_put</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>jbl</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_put_new</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>jbl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>jbl</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>coll</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>coll_</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>json</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>json_</name></expr></argument>, <argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbn_throw_rc_exception</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jlong</name> <name>JNICALL</name></type> <name>Java_com_softmotions_ejdb2_EJDB2__1online_1backup</name><parameter_list>(
  <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>thisObj</name></decl></parameter>,
  <parameter><decl><type><name>jstring</name></type> <name>target_</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>ts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>target_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jbn_db</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_online_backup</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>target</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>target_</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbn_throw_rc_exception</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ts</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// GET</comment>
<function><type><name>JNIEXPORT</name> <name>void</name> <name>JNICALL</name></type> <name>Java_com_softmotions_ejdb2_EJDB2__1get</name><parameter_list>(
  <parameter><decl><type><name>JNIEnv</name>  <modifier>*</modifier></type><name>env</name></decl></parameter>,
  <parameter><decl><type><name>jobject</name></type>  <name>thisObj</name></decl></parameter>,
  <parameter><decl><type><name>jstring</name></type>  <name>coll_</name></decl></parameter>,
  <parameter><decl><type><name>jlong</name></type>    <name>id</name></decl></parameter>,
  <parameter><decl><type><name>jobject</name></type>  <name>osObj</name></decl></parameter>,
  <parameter><decl><type><name>jboolean</name></type> <name>pretty</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBN_JSPRINT_CTX</name></type> <name>pctx</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>coll_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>coll</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_INVALID_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_db</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_init_pctx</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pctx</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><name>osObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_get</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_as_json</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>, <argument><expr><name>jbn_json_printer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pctx</name><operator>.</operator><name>flushFn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>pctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>coll</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>coll_</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>jbl</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>jbn_destroy_pctx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbn_throw_rc_exception</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// INFO</comment>
<function><type><name>JNIEXPORT</name> <name>void</name> <name>JNICALL</name></type> <name>Java_com_softmotions_ejdb2_EJDB2__1info</name><parameter_list>(
  <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>,
  <parameter><decl><type><name>jobject</name></type> <name>thisObj</name></decl></parameter>,
  <parameter><decl><type><name>jobject</name></type> <name>osObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBN_JSPRINT_CTX</name></type> <name>pctx</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_db</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_init_pctx</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pctx</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><name>osObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_get_meta</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_as_json</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>, <argument><expr><name>jbn_json_printer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pctx</name><operator>.</operator><name>flushFn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>pctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>jbl</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>jbn_destroy_pctx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbn_throw_rc_exception</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// DEL</comment>
<function><type><name>JNIEXPORT</name> <name>void</name> <name>JNICALL</name></type> <name>Java_com_softmotions_ejdb2_EJDB2__1del</name><parameter_list>(
  <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>,
  <parameter><decl><type><name>jobject</name></type> <name>thisObj</name></decl></parameter>,
  <parameter><decl><type><name>jstring</name></type> <name>coll_</name></decl></parameter>,
  <parameter><decl><type><name>jlong</name></type>   <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>coll_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>coll</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_INVALID_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_db</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_del</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>coll</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>coll_</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbn_throw_rc_exception</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// RENAME COLLECTION</comment>
<function><type><name>JNIEXPORT</name> <name>void</name> <name>JNICALL</name></type> <name>Java_com_softmotions_ejdb2_EJDB2__1rename_1collection</name><parameter_list>(
  <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>thisObj</name></decl></parameter>,
  <parameter><decl><type><name>jstring</name></type> <name>oldColl_</name></decl></parameter>, <parameter><decl><type><name>jstring</name></type> <name>newColl_</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newColl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oldColl</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>oldColl_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>oldColl</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_INVALID_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>newColl</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>newColl_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>newColl</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_INVALID_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_db</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_rename_collection</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>oldColl</name></expr></argument>, <argument><expr><name>newColl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>oldColl</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>oldColl_</name></expr></argument>, <argument><expr><name>oldColl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>newColl</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>newColl_</name></expr></argument>, <argument><expr><name>newColl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbn_throw_rc_exception</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// PATCH</comment>
<function><type><name>JNIEXPORT</name> <name>void</name> <name>JNICALL</name></type> <name>Java_com_softmotions_ejdb2_EJDB2__1patch</name><parameter_list>(
  <parameter><decl><type><name>JNIEnv</name>  <modifier>*</modifier></type><name>env</name></decl></parameter>,
  <parameter><decl><type><name>jobject</name></type>  <name>thisObj</name></decl></parameter>,
  <parameter><decl><type><name>jstring</name></type>  <name>coll_</name></decl></parameter>,
  <parameter><decl><type><name>jstring</name></type>  <name>patch_</name></decl></parameter>,
  <parameter><decl><type><name>jlong</name></type>    <name>id</name></decl></parameter>,
  <parameter><decl><type><name>jboolean</name></type> <name>upsert</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>coll_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>patch</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>patch_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>coll</name> <operator>||</operator> <operator>!</operator><name>patch</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_INVALID_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_db</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>upsert</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_merge_or_put</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_patch</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>coll</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>coll_</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>patch_</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>patch_</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbn_throw_rc_exception</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>void</name> <name>JNICALL</name></type> <name>Java_com_softmotions_ejdb2_EJDB2__1remove_1collection</name><parameter_list>(
  <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>,
  <parameter><decl><type><name>jobject</name></type> <name>thisObj</name></decl></parameter>,
  <parameter><decl><type><name>jstring</name></type> <name>coll_</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>coll_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>coll</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_INVALID_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_db</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_remove_collection</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>coll</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>coll_</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbn_throw_rc_exception</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>void</name> <name>JNICALL</name></type> <name>Java_com_softmotions_ejdb2_EJDB2__1ensure_1index</name><parameter_list>(
  <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>,
  <parameter><decl><type><name>jobject</name></type> <name>thisObj</name></decl></parameter>,
  <parameter><decl><type><name>jstring</name></type> <name>coll_</name></decl></parameter>,
  <parameter><decl><type><name>jstring</name></type> <name>path_</name></decl></parameter>,
  <parameter><decl><type><name>jint</name></type>    <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>coll_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>path_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>coll</name> <operator>||</operator> <operator>!</operator><name>path</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_INVALID_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_db</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_ensure_index</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>(</operator><name>ejdb_idx_mode_t</name><operator>)</operator> <name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>coll</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>coll_</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>path</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>path_</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbn_throw_rc_exception</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>void</name> <name>JNICALL</name></type> <name>Java_com_softmotions_ejdb2_EJDB2__1remove_1index</name><parameter_list>(
  <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>,
  <parameter><decl><type><name>jobject</name></type> <name>thisObj</name></decl></parameter>,
  <parameter><decl><type><name>jstring</name></type> <name>coll_</name></decl></parameter>,
  <parameter><decl><type><name>jstring</name></type> <name>path_</name></decl></parameter>,
  <parameter><decl><type><name>jint</name></type>    <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>coll_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>path_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>coll</name> <operator>||</operator> <operator>!</operator><name>path</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_INVALID_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_db</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_remove_index</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>(</operator><name>ejdb_idx_mode_t</name><operator>)</operator> <name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>coll</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>coll_</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>path</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>path_</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbn_throw_rc_exception</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// JQL INIT</comment>
<function><type><name>JNIEXPORT</name> <name>void</name> <name>JNICALL</name></type> <name>Java_com_softmotions_ejdb2_JQL__1init</name><parameter_list>(
  <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>,
  <parameter><decl><type><name>jobject</name></type> <name>thisObj</name></decl></parameter>,
  <parameter><decl><type><name>jobject</name></type> <name>dbObj</name></decl></parameter>,
  <parameter><decl><type><name>jstring</name></type> <name>queryStr</name></decl></parameter>,
  <parameter><decl><type><name>jstring</name></type> <name>collStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQL</name></type> <name>q</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>coll</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbObj</name> <operator>||</operator> <operator>!</operator><name>queryStr</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_INVALID_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_db</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>dbObj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>queryStr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>query</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_INVALID_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>collStr</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>coll</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>collStr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_create2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>JQL_KEEP_QUERY_ON_PARSE_ERROR</name> <operator>|</operator> <name>JQL_SILENT_ON_PARSE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>SetLongField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><name>k_JQL_handle_fid</name></expr></argument>, <argument><expr><operator>(</operator><name>jlong</name><operator>)</operator> <name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>coll</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>collStr</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewStringUTF</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>jql_collection</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>SetObjectField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><name>k_JQL_collection_fid</name></expr></argument>, <argument><expr><name>collStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>query</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>queryStr</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>coll</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>collStr</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>q</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>rc</name> <operator>==</operator> <name>JQL_ERROR_QUERY_PARSE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>jbn_throw_rc_exception</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>jql_error</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>jbn_throw_rc_exception</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>q</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>jql_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// JQL RESET</comment>
<function><type><name>JNIEXPORT</name> <name>void</name> <name>JNICALL</name></type> <name>Java_com_softmotions_ejdb2_JQL__1reset</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>thisObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>jlong</name></type> <name>ptr</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetLongField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><name>k_JQL_handle_fid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>JQL</name></type> <name>q</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>jql_reset</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// JQL DESTROY</comment>
<function><type><name>JNIEXPORT</name> <name>void</name> <name>JNICALL</name></type> <name>Java_com_softmotions_ejdb2_JQL__1destroy</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jclass</name></type> <name>clazz</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>handle</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>JQL</name></type> <name>q</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>handle</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>jql_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>JBN_EXEC_CTX</name> <block>{
  <decl_stmt><decl><type><name>JNIEnv</name>   <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jobject</name></type>   <name>cbObj</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jclass</name></type>    <name>cbClazz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jmethodID</name></type> <name>cbMid</name></decl>;</decl_stmt>
}</block></struct></type> <name>JBN_EXEC_CTX</name>;</typedef>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>jbn_exec_visitor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_EJDB_EXEC</name></name> <modifier>*</modifier></type><name>ux</name></decl></parameter>, <parameter><decl><type><name>EJDB_DOC</name></type> <name>doc</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>step</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jstring</name></type> <name>json</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBN_EXEC_CTX</name> <modifier>*</modifier></type><name>ectx</name> <init>= <expr><name><name>ux</name><operator>-&gt;</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name><name>ectx</name><operator>-&gt;</operator><name>env</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><call><name>iwxstr_new2</name><argument_list>(<argument><expr><call><name>jbl_size</name><argument_list>(<argument><expr><name><name>doc</name><operator>-&gt;</operator><name>raw</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>xstr</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>doc</name><operator>-&gt;</operator><name>node</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_as_json</name><argument_list>(<argument><expr><name><name>doc</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>jbl_xstr_json_printer</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_as_json</name><argument_list>(<argument><expr><name><name>doc</name><operator>-&gt;</operator><name>raw</name></name></expr></argument>, <argument><expr><name>jbl_xstr_json_printer</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>json</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewStringUTF</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>json</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionOccurred</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBN_ERROR_CREATION_OBJ</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>llv</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallLongMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>ectx</name><operator>-&gt;</operator><name>cbObj</name></name></expr></argument>, <argument><expr><name><name>ectx</name><operator>-&gt;</operator><name>cbMid</name></name></expr></argument>, <argument><expr><operator>(</operator><name>jlong</name><operator>)</operator> <name><name>doc</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>llv</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>step</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>step</name> <operator>=</operator> <name>llv</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>json</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// JQL EXECUTE</comment>
<function><type><name>JNIEXPORT</name> <name>void</name> <name>JNICALL</name></type> <name>Java_com_softmotions_ejdb2_JQL__1execute</name><parameter_list>(
  <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>,
  <parameter><decl><type><name>jobject</name></type> <name>thisObj</name></decl></parameter>,
  <parameter><decl><type><name>jobject</name></type> <name>dbObj</name></decl></parameter>,
  <parameter><decl><type><name>jobject</name></type> <name>cbObj</name></decl></parameter>,
  <parameter><decl><type><name>jobject</name></type> <name>logStreamObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQL</name></type> <name>q</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>log</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbObj</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbn_throw_rc_exception</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>IW_ERROR_INVALID_ARGS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_jql_q</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_db</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>dbObj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>JBN_EXEC_CTX</name></type> <name>ectx</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>env</name>   <operator>=</operator> <name>env</name></expr>,
    <expr><operator>.</operator><name>cbObj</name> <operator>=</operator> <name>cbObj</name></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>cbObj</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ectx</name><operator>.</operator><name>cbClazz</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetObjectClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>cbObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ectx</name><operator>.</operator><name>cbMid</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>ectx</name><operator>.</operator><name>cbClazz</name></name></expr></argument>, <argument><expr><literal type="string">"onRecord"</literal></expr></argument>, <argument><expr><literal type="string">"(JLjava/lang/String;)J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ectx</name><operator>.</operator><name>cbMid</name></name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>jlong</name></type> <name>skip</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetLongField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><name>k_JQL_skip_fid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jlong</name></type> <name>limit</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetLongField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><name>k_JQL_limit_fid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>logStreamObj</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>log</name> <operator>=</operator> <call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>log</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>EJDB_EXEC</name></type> <name>ux</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>db</name>      <operator>=</operator> <name>db</name></expr>,
    <expr><operator>.</operator><name>q</name>       <operator>=</operator> <name>q</name></expr>,
    <expr><operator>.</operator><name>skip</name>    <operator>=</operator> <name>skip</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>?</operator> <name>skip</name> <operator>:</operator> <literal type="number">0</literal></expr>,
    <expr><operator>.</operator><name>limit</name>   <operator>=</operator> <name>limit</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>?</operator> <name>limit</name> <operator>:</operator> <literal type="number">0</literal></expr>,
    <expr><operator>.</operator><name>opaque</name>  <operator>=</operator> <operator>&amp;</operator><name>ectx</name></expr>,
    <expr><operator>.</operator><name>visitor</name> <operator>=</operator> <name>cbObj</name> <operator>?</operator> <name>jbn_exec_visitor</name> <operator>:</operator> <literal type="number">0</literal></expr>,
    <expr><operator>.</operator><name>log</name>     <operator>=</operator> <name>log</name></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_exec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>log</name></expr>)</condition> <block>{<block_content> <comment type="line">// Send query execution log</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>xsz</name> <init>= <expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jclass</name></type> <name>logStreamClazz</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetObjectClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>logStreamObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jmethodID</name></type> <name>writeMid</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>logStreamClazz</name></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>, <argument><expr><literal type="string">"([B)V"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>writeMid</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>jbyteArray</name></type> <name>arr</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewByteArray</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>xsz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>arr</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>SetByteArrayRegion</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>arr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>xsz</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>logStreamObj</name></expr></argument>, <argument><expr><name>writeMid</name></expr></argument>, <argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>log</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbn_throw_rc_exception</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// JQL EXECUTE SCALAR LONG</comment>
<function><type><name>JNIEXPORT</name> <name>jlong</name> <name>JNICALL</name></type> <name>Java_com_softmotions_ejdb2_JQL__1execute_1scalar_1long</name><parameter_list>(
  <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>,
  <parameter><decl><type><name>jobject</name></type> <name>thisObj</name></decl></parameter>,
  <parameter><decl><type><name>jobject</name></type> <name>dbObj</name></decl></parameter>,
  <parameter><decl><type><name>jobject</name></type> <name>logStreamObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQL</name></type> <name>q</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>log</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jlong</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbObj</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbn_throw_rc_exception</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>IW_ERROR_INVALID_ARGS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_jql_q</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_db</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>dbObj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>jlong</name></type> <name>skip</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetLongField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><name>k_JQL_skip_fid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jlong</name></type> <name>limit</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetLongField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><name>k_JQL_limit_fid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>logStreamObj</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>log</name> <operator>=</operator> <call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>log</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>EJDB_EXEC</name></type> <name>ux</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>db</name>    <operator>=</operator> <name>db</name></expr>,
    <expr><operator>.</operator><name>q</name>     <operator>=</operator> <name>q</name></expr>,
    <expr><operator>.</operator><name>skip</name>  <operator>=</operator> <name>skip</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>?</operator> <name>skip</name> <operator>:</operator> <literal type="number">0</literal></expr>,
    <expr><operator>.</operator><name>limit</name> <operator>=</operator> <name>limit</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>?</operator> <name>limit</name> <operator>:</operator> <literal type="number">0</literal></expr>,
    <expr><operator>.</operator><name>log</name>   <operator>=</operator> <name>log</name></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_exec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>log</name></expr>)</condition> <block>{<block_content> <comment type="line">// Send query execution log</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>xsz</name> <init>= <expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jclass</name></type> <name>logStreamClazz</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetObjectClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>logStreamObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jmethodID</name></type> <name>writeMid</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>logStreamClazz</name></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>, <argument><expr><literal type="string">"([B)V"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>writeMid</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>jbyteArray</name></type> <name>arr</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewByteArray</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>xsz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>arr</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>SetByteArrayRegion</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>arr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>xsz</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>logStreamObj</name></expr></argument>, <argument><expr><name>writeMid</name></expr></argument>, <argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>ux</name><operator>.</operator><name>cnt</name></name></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>log</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbn_throw_rc_exception</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jbn_free_json_node</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><name>op</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pool</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jbn_free_str</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>void</name> <name>JNICALL</name></type> <name>Java_com_softmotions_ejdb2_JQL__1set_1string</name><parameter_list>(
  <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>,
  <parameter><decl><type><name>jobject</name></type> <name>thisObj</name></decl></parameter>,
  <parameter><decl><type><name>jint</name></type>    <name>pos</name></decl></parameter>,
  <parameter><decl><type><name>jstring</name></type> <name>placeholder_</name></decl></parameter>,
  <parameter><decl><type><name>jstring</name></type> <name>val_</name></decl></parameter>,
  <parameter><decl><type><name>jint</name></type>    <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQL</name></type> <name>q</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>placeholder</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>val_</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbn_throw_rc_exception</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>IW_ERROR_INVALID_ARGS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>val_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_jql_q</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>placeholder_</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>placeholder</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>placeholder_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// JSON</comment>
    <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>node</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>iwpool_create</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_from_json</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_set_json2</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>placeholder</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>jbn_free_json_node</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content> <comment type="line">// Regexp</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_set_regexp2</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>placeholder</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>jbn_free_str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content> <comment type="line">// All other cases</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_set_str2</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>placeholder</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>jbn_free_str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>val_</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>placeholder</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>placeholder_</name></expr></argument>, <argument><expr><name>placeholder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbn_throw_rc_exception</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>void</name> <name>JNICALL</name></type> <name>Java_com_softmotions_ejdb2_JQL__1set_1long</name><parameter_list>(
  <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>,
  <parameter><decl><type><name>jobject</name></type> <name>thisObj</name></decl></parameter>,
  <parameter><decl><type><name>jint</name></type>    <name>pos</name></decl></parameter>,
  <parameter><decl><type><name>jstring</name></type> <name>placeholder_</name></decl></parameter>,
  <parameter><decl><type><name>jlong</name></type>   <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>

  <decl_stmt><decl><type><name>JQL</name></type> <name>q</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>placeholder</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_jql_q</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>placeholder_</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>placeholder</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>placeholder_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_set_i64</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>placeholder</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>placeholder</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>placeholder_</name></expr></argument>, <argument><expr><name>placeholder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbn_throw_rc_exception</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>void</name> <name>JNICALL</name></type> <name>Java_com_softmotions_ejdb2_JQL__1set_1double</name><parameter_list>(
  <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>,
  <parameter><decl><type><name>jobject</name></type> <name>thisObj</name></decl></parameter>,
  <parameter><decl><type><name>jint</name></type>    <name>pos</name></decl></parameter>,
  <parameter><decl><type><name>jstring</name></type> <name>placeholder_</name></decl></parameter>,
  <parameter><decl><type><name>jdouble</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQL</name></type> <name>q</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>placeholder</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_jql_q</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>placeholder_</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>placeholder</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>placeholder_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_set_f64</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>placeholder</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>placeholder</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>placeholder_</name></expr></argument>, <argument><expr><name>placeholder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbn_throw_rc_exception</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>void</name> <name>JNICALL</name></type> <name>Java_com_softmotions_ejdb2_JQL__1set_1boolean</name><parameter_list>(
  <parameter><decl><type><name>JNIEnv</name>  <modifier>*</modifier></type><name>env</name></decl></parameter>,
  <parameter><decl><type><name>jobject</name></type>  <name>thisObj</name></decl></parameter>,
  <parameter><decl><type><name>jint</name></type>     <name>pos</name></decl></parameter>,
  <parameter><decl><type><name>jstring</name></type>  <name>placeholder_</name></decl></parameter>,
  <parameter><decl><type><name>jboolean</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQL</name></type> <name>q</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>placeholder</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_jql_q</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>placeholder_</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>placeholder</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>placeholder_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_set_bool</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>placeholder</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>placeholder</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>placeholder_</name></expr></argument>, <argument><expr><name>placeholder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbn_throw_rc_exception</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>void</name> <name>JNICALL</name></type> <name>Java_com_softmotions_ejdb2_JQL__1set_1null</name><parameter_list>(
  <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>,
  <parameter><decl><type><name>jobject</name></type> <name>thisObj</name></decl></parameter>,
  <parameter><decl><type><name>jint</name></type>    <name>pos</name></decl></parameter>,
  <parameter><decl><type><name>jstring</name></type> <name>placeholder_</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQL</name></type> <name>q</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>placeholder</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_jql_q</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>placeholder_</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>placeholder</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>placeholder_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_set_null</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>placeholder</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>placeholder</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>placeholder_</name></expr></argument>, <argument><expr><name>placeholder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbn_throw_rc_exception</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jlong</name> <name>JNICALL</name></type> <name>Java_com_softmotions_ejdb2_JQL__1get_1limit</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>thisObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQL</name></type> <name>q</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>limit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jbn_jql_q</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_get_limit</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbn_throw_rc_exception</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>jlong</name><operator>)</operator> <name>limit</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jlong</name> <name>JNICALL</name></type> <name>Java_com_softmotions_ejdb2_JQL__1get_1skip</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>thisObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQL</name></type> <name>q</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>skip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jbn_jql_q</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>thisObj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_get_skip</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbn_throw_rc_exception</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>jlong</name><operator>)</operator> <name>skip</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>jbn_ecodefn</name><parameter_list>(<parameter><decl><type><name>locale_t</name></type> <name>locale</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ecode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>ecode</name> <operator>&gt;</operator> <name>_JBN_ERROR_START</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ecode</name> <operator>&lt;</operator> <name>_JBN_ERROR_END</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <switch>switch <condition>(<expr><name>ecode</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>JBN_ERROR_INVALID_FIELD</name></expr>:</case>
      <return>return <expr><literal type="string">"Failed to get class field (JBN_ERROR_INVALID_FIELD)"</literal></expr>;</return>
    <case>case <expr><name>JBN_ERROR_INVALID_METHOD</name></expr>:</case>
      <return>return <expr><literal type="string">"Failed to get class method (JBN_ERROR_INVALID_METHOD)"</literal></expr>;</return>
    <case>case <expr><name>JBN_ERROR_INVALID_OPTIONS</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid com.softmotions.ejdb2.EJDB2Builder configuration provided (JBN_ERROR_INVALID_OPTIONS)"</literal></expr>;</return>
    <case>case <expr><name>JBN_ERROR_INVALID_STATE</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid com.softmotions.ejdb2.EJDB2 JNI state. Database closed? (JBN_ERROR_INVALID_STATE)"</literal></expr>;</return>
    <case>case <expr><name>JBN_ERROR_CREATION_OBJ</name></expr>:</case>
      <return>return <expr><literal type="string">"Failed to create/allocate JNI object (JBN_ERROR_CREATION_OBJ)"</literal></expr>;</return>
  </block_content>}</block></switch>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jint</name></type> <name>JNI_OnLoad</name><parameter_list>(<parameter><decl><type><name>JavaVM</name> <modifier>*</modifier></type><name>vm</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reserved</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>vm</name><operator>)</operator><operator>-&gt;</operator><name>GetEnv</name></name><argument_list>(<argument><expr><name>vm</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>env</name></expr></argument>, <argument><expr><name>JNI_VERSION_1_6</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>JNI_OK</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>jbn_ecodefn_initialized</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbn_ecodefn_initialized</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>ejdb_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>JNI_ERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>iwlog_register_ecodefn</name><argument_list>(<argument><expr><name>jbn_ecodefn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>jclass</name></type> <name>clazz</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>FindClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="string">"com/softmotions/ejdb2/EJDB2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>clazz</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error2</name><argument_list>(<argument><expr><literal type="string">"Cannot find com.softmotions.ejdb2.EJDB2 class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>k_EJDB2_clazz</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>k_EJDB2_handle_fid</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetFieldID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>k_EJDB2_clazz</name></expr></argument>, <argument><expr><literal type="string">"_handle"</literal></expr></argument>, <argument><expr><literal type="string">"J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>clazz</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>FindClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="string">"com/softmotions/ejdb2/EJDB2Exception"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>clazz</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error2</name><argument_list>(<argument><expr><literal type="string">"Cannot find com.softmotions.ejdb2.EJDB2Exception class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>k_EJDB2Exception_clazz</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>k_EJDB2Exception_constructor</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>k_EJDB2Exception_clazz</name></expr></argument>,
                                                     <argument><expr><literal type="string">"&lt;init&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"(JJLjava/lang/String;)V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>k_EJDB2Exception_constructor</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error2</name><argument_list>(<argument><expr><literal type="string">"Cannot find com.softmotions.ejdb2.EJDB2Exception#&lt;init&gt;(long,String)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>clazz</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>FindClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="string">"com/softmotions/ejdb2/JQL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>clazz</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error2</name><argument_list>(<argument><expr><literal type="string">"Cannot find com.softmotions.ejdb2.JQL class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>k_JQL_clazz</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>k_JQL_handle_fid</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetFieldID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>k_JQL_clazz</name></expr></argument>, <argument><expr><literal type="string">"_handle"</literal></expr></argument>, <argument><expr><literal type="string">"J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>k_JQL_db_fid</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetFieldID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>k_JQL_clazz</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>, <argument><expr><literal type="string">"Lcom/softmotions/ejdb2/EJDB2;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>k_JQL_query_fid</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetFieldID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>k_JQL_clazz</name></expr></argument>, <argument><expr><literal type="string">"query"</literal></expr></argument>, <argument><expr><literal type="string">"Ljava/lang/String;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>k_JQL_collection_fid</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetFieldID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>k_JQL_clazz</name></expr></argument>, <argument><expr><literal type="string">"collection"</literal></expr></argument>, <argument><expr><literal type="string">"Ljava/lang/String;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>k_JQL_skip_fid</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetFieldID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>k_JQL_clazz</name></expr></argument>, <argument><expr><literal type="string">"skip"</literal></expr></argument>, <argument><expr><literal type="string">"J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>k_JQL_limit_fid</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetFieldID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>k_JQL_clazz</name></expr></argument>, <argument><expr><literal type="string">"limit"</literal></expr></argument>, <argument><expr><literal type="string">"J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>JNI_VERSION_1_6</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>void</name></type> <name>JNI_OnUnload</name><parameter_list>(<parameter><decl><type><name>JavaVM</name> <modifier>*</modifier></type><name>vm</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reserved</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="line">// Not really useless</comment>
  <decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>vm</name><operator>)</operator><operator>-&gt;</operator><name>GetEnv</name></name><argument_list>(<argument><expr><name>vm</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>env</name></expr></argument>, <argument><expr><name>JNI_VERSION_1_6</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>JNI_OK</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>k_EJDB2_clazz</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>k_EJDB2_clazz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>k_JQL_clazz</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>k_JQL_clazz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>k_EJDB2Exception_clazz</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>k_EJDB2Exception_clazz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
