<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/ejdb/src/bindings/ejdb2_node/ejdb2_node.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ejdb2.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAPI_EXPERIMENTAL</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"node_api.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR_HELPER</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>STR_HELPER(x)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>jn_resultset_tsf</name><parameter_list>(
  <parameter><decl><type><name>napi_env</name></type>   <name>env</name></decl></parameter>,
  <parameter><decl><type><name>napi_value</name></type> <name>js_add_stream</name></decl></parameter>,
  <parameter><decl><type><name>void</name>      <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>void</name>      <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>jn_throw_error</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>iwrc</name></type> <name>rc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>location</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>napi_value</name></type> <name>jn_create_error</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>iwrc</name></type> <name>rc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>location</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>IW_INLINE</name> <name>bool</name></type> <name>jn_is_exception_pending</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>rv</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>napi_is_exception_pending</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNTHROW</name><parameter_list>(<parameter><type><name>env</name></type></parameter>, <parameter><type><name>rc</name></type></parameter>, <parameter><type><name>message</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>jn_throw_error(env, rc, "ejdb2_node.c" ":" STR(__LINE__), message)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNTHROW_LAST</name><parameter_list>(<parameter><type><name>env</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {                         \
    const napi_extended_error_info *info = 0;          \
    napi_get_last_error_info((env), &amp;info);            \
    if (info) JNTHROW((env), 0, info-&gt;error_message);  \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNCHECK</name><parameter_list>(<parameter><type><name>ns</name></type></parameter>, <parameter><type><name>env</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {                   \
    if (ns &amp;&amp; ns != napi_pending_exception) {   \
      JNTHROW_LAST(env);                        \
    }                                           \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNRC</name><parameter_list>(<parameter><type><name>env</name></type></parameter>, <parameter><type><name>rc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {                      \
    if (rc &amp;&amp; !jn_is_exception_pending(env)) {  \
      JNTHROW(env, rc, 0);                      \
    }                                           \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNRET</name><parameter_list>(<parameter><type><name>ns</name></type></parameter>, <parameter><type><name>env</name></type></parameter>, <parameter><type><name>call</name></type></parameter>, <parameter><type><name>res</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {          \
    ns = (call);                                \
    if (ns) {                                   \
      if (ns != napi_pending_exception) {       \
        JNTHROW_LAST(env);                      \
      }                                         \
      return (res);                             \
    }                                           \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNGO</name><parameter_list>(<parameter><type><name>ns</name></type></parameter>, <parameter><type><name>env</name></type></parameter>, <parameter><type><name>call</name></type></parameter>, <parameter><type><name>label</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {         \
    ns = (call);                                \
    if (ns) {                                   \
      if (ns != napi_pending_exception) {       \
        JNTHROW_LAST(env);                      \
      }                                         \
      goto label;                               \
    }                                           \
} while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>napi_value</name></type> <name>jn_create_error</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>iwrc</name></type> <name>rc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>location</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// Eg:</comment>
  <comment type="line">//  Error [@ejdb IWRC:70002 open]: IO error with expected errno status set. (IW_ERROR_IO_ERRNO)</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>codebuf</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>code</name> <init>= <expr><name>codebuf</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>msg</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>iwlog_ecode_explained</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>msg</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwrc_strip_code</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>location</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>codebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>codebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"@ejdb IWRC:%"</literal> <name>PRId64</name> <literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>codebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>codebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"@ejdb IWRC:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="string">"@ejdb"</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>vcode</name></decl>, <decl><type ref="prev"/><name>vmsg</name></decl>, <decl><type ref="prev"/><name>verr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_create_string_utf8</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>NAPI_AUTO_LENGTH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vcode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_create_string_utf8</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>NAPI_AUTO_LENGTH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vmsg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_create_error</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>vcode</name></expr></argument>, <argument><expr><name>vmsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>verr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <return>return <expr><name>verr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>bool</name></type> <name>jn_throw_error</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>iwrc</name></type> <name>rc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>location</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>verr</name> <init>= <expr><call><name>jn_create_error</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>location</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>verr</name> <operator>&amp;&amp;</operator> <call><name>napi_throw</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>verr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>napi_ok</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><enum>enum <block>{
  <decl><name>_JN_ERROR_START</name> <init>= <expr><operator>(</operator><name>IW_ERROR_START</name> <operator>+</operator> <literal type="number">15000UL</literal> <operator>+</operator> <literal type="number">6000</literal><operator>)</operator></expr></init></decl>,
  <decl><name>JN_ERROR_INVALID_NATIVE_CALL_ARGS</name></decl>, <comment type="block" format="doxygen">/**&lt; Invalid native function call args (JN_ERROR_INVALID_NATIVE_CALL_ARGS) */</comment>
  <decl><name>JN_ERROR_INVALID_STATE</name></decl>,            <comment type="block" format="doxygen">/**&lt; Invalid native extension state (JN_ERROR_INVALID_STATE) */</comment>
  <decl><name>JN_ERROR_QUERY_IN_USE</name></decl>,
  <comment type="block" format="doxygen">/**&lt; Query object is in use by active async iteration, and cannot be changed
     (JN_ERROR_QUERY_IN_USE) */</comment>
  <decl><name>JN_ERROR_NAPI</name></decl>,                     <comment type="block">/*&lt; N-API Error (JN_ERROR_NAPI) */</comment>
  <decl><name>_JN_ERROR_END</name></decl>,
}</block></enum></type> <name>jn_ecode_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>JBN</name> <block>{
  <decl_stmt><decl><type><name>EJDB</name></type>      <name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWPOOL</name>   <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB_OPTS</name></type> <name>opts</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_threadsafe_function</name></type> <name>resultset_tsf</name></decl>;</decl_stmt>
}</block></struct></type> *<name>JBN</name>;</typedef>

<typedef>typedef <type><struct>struct <name>JNWORK</name> <block>{
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>        <comment type="line">// RC error</comment>
  <decl_stmt><decl><type><name>napi_status</name></type>     <name>ns</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_deferred</name></type>   <name>deferred</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_async_work</name></type> <name>async_work</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>     <modifier>*</modifier></type><name>async_resource</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>unwrapped</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>release_data</name>)<parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>JNWORK</name></name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>
}</block></struct></type> *<name>JNWORK</name>;</typedef>

<comment type="line">// Globals</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>napi_ref</name></type> <name>k_vadd_streamfn_ref</name></decl>;</decl_stmt>

<function><type><name>IW_INLINE</name> <name>napi_value</name></type> <name>jn_get_ref</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_ref</name></type> <name>ref</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>JNRET</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_get_reference_value</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>napi_value</name></type> <name>jn_null</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>JNRET</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_get_null</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>napi_value</name></type> <name>jn_global</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>JNRET</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_get_global</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>napi_value</name></type> <name>jn_undefined</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>JNRET</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_get_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>bool</name></type> <name>jn_is_null</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_value</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>bv</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>rv</name> <init>= <expr><call><name>jn_null</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rv</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>napi_strict_equals</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>bv</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>bool</name></type> <name>jn_is_undefined</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_value</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>bv</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>rv</name> <init>= <expr><call><name>jn_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rv</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>napi_strict_equals</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>bv</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>bool</name></type> <name>jn_is_null_or_undefined</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_value</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>jn_is_null</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>jn_is_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>napi_value</name></type> <name>jn_create_string</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>JNRET</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_create_string_utf8</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>NAPI_AUTO_LENGTH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>napi_value</name></type> <name>jn_create_int64</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>JNRET</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_create_int64</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>jn_string</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_value</name></type> <name>val_</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>nulls</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>coerce</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>val</name> <init>= <expr><name>val_</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>nulls</name> <operator>&amp;&amp;</operator> <call><name>jn_is_null_or_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>coerce</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ns</name> <operator>=</operator> <call><name>napi_coerce_to_string</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ns</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>JN_ERROR_NAPI</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>JNCHECK</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>ns</name> <operator>=</operator> <call><name>napi_get_value_string_utf8</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ns</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>JN_ERROR_NAPI</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JNCHECK</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>iwpool_alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>ns</name> <operator>=</operator> <call><name>napi_get_value_string_utf8</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ns</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>JN_ERROR_NAPI</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JNCHECK</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>jn_string_at</name><parameter_list>(
  <parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>napi_value</name></type> <name>arr</name></decl></parameter>,
  <parameter><decl><type><name>bool</name></type> <name>nulls</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>coerce</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>el</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name> <init>= <expr><call><name>napi_get_element</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>arr</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>el</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ns</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>JN_ERROR_NAPI</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JNCHECK</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>jn_string</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>el</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>coerce</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>jn_int</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_value</name></type> <name>val_</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>nulls</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>coerce</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>val</name> <init>= <expr><name>val_</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>nulls</name> <operator>&amp;&amp;</operator> <call><name>jn_is_null_or_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>coerce</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ns</name> <operator>=</operator> <call><name>napi_coerce_to_number</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ns</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>JN_ERROR_NAPI</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>JNCHECK</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>rv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ns</name> <operator>=</operator> <call><name>napi_get_value_int64</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ns</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>JN_ERROR_NAPI</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JNCHECK</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>jn_int_at</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_value</name></type> <name>arr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>nulls</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>coerce</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>el</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name> <init>= <expr><call><name>napi_get_element</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>arr</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>el</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ns</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>JN_ERROR_NAPI</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JNCHECK</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>jn_int</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>el</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>coerce</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>jn_double</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_value</name></type> <name>val_</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>nulls</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>coerce</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>val</name> <init>= <expr><name>val_</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>nulls</name> <operator>&amp;&amp;</operator> <call><name>jn_is_null_or_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>coerce</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ns</name> <operator>=</operator> <call><name>napi_coerce_to_number</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ns</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>JN_ERROR_NAPI</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>JNCHECK</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>rv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ns</name> <operator>=</operator> <call><name>napi_get_value_double</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ns</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>JN_ERROR_NAPI</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JNCHECK</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>jn_bool</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_value</name></type> <name>val_</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>nulls</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>coerce</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>val</name> <init>= <expr><name>val_</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>nulls</name> <operator>&amp;&amp;</operator> <call><name>jn_is_null_or_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>coerce</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ns</name> <operator>=</operator> <call><name>napi_coerce_to_bool</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ns</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>JN_ERROR_NAPI</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>JNCHECK</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>rv</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ns</name> <operator>=</operator> <call><name>napi_get_value_bool</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ns</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>JN_ERROR_NAPI</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JNCHECK</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>jn_bool_at</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_value</name></type> <name>arr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>nulls</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>coerce</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>el</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name> <init>= <expr><call><name>napi_get_element</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>arr</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>el</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ns</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>JN_ERROR_NAPI</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JNCHECK</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>jn_bool</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>el</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>coerce</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>jb_jbn_alloc</name><parameter_list>(<parameter><decl><type><name>JBN</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>vp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>iwpool_create</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JBN</name></type> <name>v</name> <init>= <expr><call><name>iwpool_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>v</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>v</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>vp</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jn_jbn_destroy</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>JBN</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>vp</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>vp</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JBN</name></type> <name>v</name> <init>= <expr><operator>*</operator><name>vp</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>ejdb_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>JNRC</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>resultset_tsf</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>napi_release_threadsafe_function</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>resultset_tsf</name></name></expr></argument>, <argument><expr><name>napi_tsfn_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>pool</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>vp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JNWORK</name></type> <name>jn_work_create</name><parameter_list>(<parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>iwpool_create</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JNWORK</name></type> <name>w</name> <init>= <expr><call><name>iwpool_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>w</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>w</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
  <return>return <expr><name>w</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>jn_work_alloc_data</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>siz</name></decl></parameter>, <parameter><decl><type><name>JNWORK</name></type> <name>work</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>iwpool_calloc</name><argument_list>(<argument><expr><name>siz</name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>work</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><name>work</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jn_work_destroy</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>JNWORK</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>wp</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>wp</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JNWORK</name></type> <name>w</name> <init>= <expr><operator>*</operator><name>wp</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>deferred</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// Reject promise with undefined value</comment>
    <expr_stmt><expr><call><name>napi_reject_deferred</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>deferred</name></name></expr></argument>, <argument><expr><call><name>jn_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>async_work</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>napi_delete_async_work</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>async_work</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>release_data</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>w</name><operator>-&gt;</operator><name>release_data</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>pool</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>wp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jn_ejdb2impl_finalize</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>hint</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JBN</name></type> <name>jbn</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>jn_jbn_destroy</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// string array opts</comment>
<function><type><specifier>static</specifier> <name>napi_value</name></type> <name>jn_ejdb2impl_ctor</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_callback_info</name></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>argc</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>bv</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>ulv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>JBN</name></type> <name>jbn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>varr</name></decl>, <decl><type ref="prev"/><name>this</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_get_cb_info</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>varr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JN_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JNRC</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>napi_is_array</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>varr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bv</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JN_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JNRC</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_get_array_length</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>varr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ulv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ulv</name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JN_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JNRC</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jb_jbn_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// opts.kv.path                         // non null</comment>
  <comment type="line">// opts.kv.oflags                       // non null</comment>
  <comment type="line">// opts.kv.wal.enabled                  // non null</comment>
  <comment type="line">// opts.kv.wal.check_crc_on_checkpoint</comment>
  <comment type="line">// opts.kv.wal.checkpoint_buffer_sz</comment>
  <comment type="line">// opts.kv.wal.checkpoint_timeout_sec</comment>
  <comment type="line">// opts.kv.wal.savepoint_timeout_sec</comment>
  <comment type="line">// opts.kv.wal.wal_buffer_sz</comment>
  <comment type="line">// opts.document_buffer_sz</comment>
  <comment type="line">// opts.sort_buffer_sz</comment>
  <comment type="line">// opts.http.enabled</comment>
  <comment type="line">// opts.http.access_token</comment>
  <comment type="line">// opts.http.bind</comment>
  <comment type="line">// opts.http.max_body_size</comment>
  <comment type="line">// opts.http.port</comment>
  <comment type="line">// opts.http.read_anon</comment>

  <expr_stmt><expr><name>argc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbn</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>path</name></name> <operator>=</operator> <call><name>jn_string_at</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>jbn</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>varr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>argc</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbn</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>oflags</name></name> <operator>=</operator> <call><name>jn_int_at</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>varr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>argc</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbn</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>wal</name><operator>.</operator><name>enabled</name></name> <operator>=</operator> <call><name>jn_bool_at</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>varr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>argc</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbn</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>wal</name><operator>.</operator><name>check_crc_on_checkpoint</name></name> <operator>=</operator> <call><name>jn_bool_at</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>varr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>argc</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbn</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>wal</name><operator>.</operator><name>checkpoint_buffer_sz</name></name> <operator>=</operator> <call><name>jn_int_at</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>varr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>argc</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbn</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>wal</name><operator>.</operator><name>checkpoint_timeout_sec</name></name> <operator>=</operator> <call><name>jn_int_at</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>varr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>argc</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbn</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>wal</name><operator>.</operator><name>savepoint_timeout_sec</name></name> <operator>=</operator> <call><name>jn_int_at</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>varr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>argc</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbn</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>wal</name><operator>.</operator><name>wal_buffer_sz</name></name> <operator>=</operator> <call><name>jn_int_at</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>varr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>argc</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbn</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>document_buffer_sz</name></name> <operator>=</operator> <call><name>jn_int_at</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>varr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>argc</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbn</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>sort_buffer_sz</name></name> <operator>=</operator> <call><name>jn_int_at</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>varr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>argc</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbn</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>enabled</name></name> <operator>=</operator> <call><name>jn_bool_at</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>varr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>argc</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbn</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>access_token</name></name> <operator>=</operator> <call><name>jn_string_at</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>jbn</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>varr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>argc</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbn</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>bind</name></name> <operator>=</operator> <call><name>jn_string_at</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>jbn</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>varr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>argc</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbn</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>max_body_size</name></name> <operator>=</operator> <call><name>jn_int_at</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>varr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>argc</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbn</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>port</name></name> <operator>=</operator> <call><name>jn_int_at</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>varr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>argc</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbn</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>read_anon</name></name> <operator>=</operator> <call><name>jn_bool_at</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>varr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>argc</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>jbn</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>file_lock_fail_fast</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbn</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>no_wal</name></name> <operator>=</operator> <operator>!</operator><name><name>jbn</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>wal</name><operator>.</operator><name>enabled</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbn</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>blocking</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbn</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>access_token_len</name></name> <operator>=</operator> <ternary><condition><expr><name><name>jbn</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>access_token</name></name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>jbn</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>access_token</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

  <comment type="line">// Result-set thread-save function initialization</comment>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>vadd_streamfn</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_get_reference_value</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>k_vadd_streamfn_ref</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vadd_streamfn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_create_threadsafe_function</name><argument_list>(
         <argument><expr><name>env</name></expr></argument>,                                           <comment type="line">// napi_env env,</comment>
         <argument><expr><name>vadd_streamfn</name></expr></argument>,                                 <comment type="line">// napi_value func,</comment>
         <argument><expr><literal type="number">0</literal></expr></argument>,                                             <comment type="line">// napi_value async_resource,</comment>
         <argument><expr><call><name>jn_create_string</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="string">"jn_add_stream_result"</literal></expr></argument>)</argument_list></call></expr></argument>, <comment type="line">// napi_value async_resource_name,</comment>
         <argument><expr><literal type="number">1</literal></expr></argument>,                                             <comment type="line">// size_t max_queue_size,</comment>
         <argument><expr><literal type="number">1</literal></expr></argument>,                                             <comment type="line">// size_t initial_thread_count,</comment>
         <argument><expr><literal type="number">0</literal></expr></argument>,                                             <comment type="line">// void* thread_finalize_data,</comment>
         <argument><expr><literal type="number">0</literal></expr></argument>,                                             <comment type="line">// napi_finalize thread_finalize_cb,</comment>
         <argument><expr><literal type="number">0</literal></expr></argument>,                                             <comment type="line">// void* context,</comment>
         <argument><expr><name>jn_resultset_tsf</name></expr></argument>,                              <comment type="line">// napi_threadsafe_function_call_js call_js_cb,</comment>
         <argument><expr><operator>&amp;</operator><name><name>jbn</name><operator>-&gt;</operator><name>resultset_tsf</name></name></expr></argument>                            <comment type="line">// napi_threadsafe_function* result</comment>
         )</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Wrap class instance</comment>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_wrap</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>jbn</name></expr></argument>, <argument><expr><name>jn_ejdb2impl_finalize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><call><name>jn_is_exception_pending</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>JNRC</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>jbn</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>jn_jbn_destroy</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>this</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNFUNC</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>{#func, 0, jn_ ## func, 0, 0, 0, napi_default, 0 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNVAL</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{#name, 0, 0, 0, 0, value, napi_default, 0 }</cpp:value></cpp:define>

<function><type><name>bool</name></type> <name>jn_resolve_pending_errors</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_status</name></type> <name>ns</name></decl></parameter>, <parameter><decl><type><name>JNWORK</name></type> <name>work</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>work</name><operator>-&gt;</operator><name>deferred</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>pending</name> <init>= <expr><call><name>jn_is_exception_pending</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>||</operator> <name>ns</name> <operator>||</operator> <name>pending</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>ex</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pending</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>||</operator> <operator>(</operator><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>==</operator> <name>JN_ERROR_NAPI</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ns</name> <operator>=</operator> <call><name>napi_get_and_clear_last_exception</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ns</name> <operator>==</operator> <name>napi_ok</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>napi_reject_deferred</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>deferred</name></name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>napi_value</name></type> <name>verr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>napi_extended_error_info</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ns</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>napi_get_last_error_info</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>pending</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>napi_get_and_clear_last_exception</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>verr</name> <operator>=</operator> <call><name>jn_create_error</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>async_resource</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>info</name></expr> ?</condition><then> <expr><name><name>info</name><operator>-&gt;</operator><name>error_message</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>verr</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>napi_reject_deferred</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>deferred</name></name></expr></argument>, <argument><expr><name>verr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>deferred</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>napi_value</name></type> <name>jn_launch_promise</name><parameter_list>(
  <parameter><decl><type><name>napi_env</name></type>                     <name>env</name></decl></parameter>,
  <parameter><decl><type><name>napi_callback_info</name></type>           <name>info</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>                  <modifier>*</modifier></type><name>async_resource_name</name></decl></parameter>,
  <parameter><decl><type><name>napi_async_execute_callback</name></type>  <name>execute</name></decl></parameter>,
  <parameter><decl><type><name>napi_async_complete_callback</name></type> <name>complete</name></decl></parameter>,
  <parameter><decl><type><name>JNWORK</name></type>                       <name>work</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>promise</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>this</name></decl>, <decl><type ref="prev"/><name>awork</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>async_resource</name></name> <operator>=</operator> <name>async_resource_name</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_get_cb_info</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_unwrap</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>work</name><operator>-&gt;</operator><name>unwrapped</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_create_promise</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>work</name><operator>-&gt;</operator><name>deferred</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>promise</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_create_string_utf8</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>async_resource_name</name></expr></argument>, <argument><expr><name>NAPI_AUTO_LENGTH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>awork</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_create_async_work</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>awork</name></expr></argument>, <argument><expr><name>execute</name></expr></argument>, <argument><expr><name>complete</name></expr></argument>, <argument><expr><name>work</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>work</name><operator>-&gt;</operator><name>async_work</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_queue_async_work</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>async_work</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>ns</name> <operator>||</operator> <call><name>jn_is_exception_pending</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>work</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>jn_resolve_pending_errors</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>jn_work_destroy</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>promise</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//  ---------------- EJDB2.open()</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jn_open_execute</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBN</name></type> <name>jbn</name> <init>= <expr><name><name>work</name><operator>-&gt;</operator><name>unwrapped</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>jbn</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <return>return;</return>            <comment type="line">// Database is already opened</comment>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>ejdb_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbn</name><operator>-&gt;</operator><name>opts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>jbn</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jn_open_complete</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_status</name></type> <name>ns</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>jn_resolve_pending_errors</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_resolve_deferred</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>deferred</name></name></expr></argument>, <argument><expr><call><name>jn_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>deferred</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>jn_work_destroy</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>napi_value</name></type> <name>jn_open</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_callback_info</name></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><call><name>jn_work_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>JNRC</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>jn_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>ret</name> <init>= <expr><call><name>jn_launch_promise</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"open"</literal></expr></argument>, <argument><expr><name>jn_open_execute</name></expr></argument>, <argument><expr><name>jn_open_complete</name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><name>ret</name></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><call><name>jn_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="line">//  ---------------- EJDB2.close()</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jn_close_execute</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBN</name></type> <name>jbn</name> <init>= <expr><name><name>work</name><operator>-&gt;</operator><name>unwrapped</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>jbn</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>ejdb_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbn</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jn_close_complete</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_status</name></type> <name>ns</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBN</name></type> <name>jbn</name> <init>= <expr><name><name>work</name><operator>-&gt;</operator><name>unwrapped</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>jn_resolve_pending_errors</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_resolve_deferred</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>deferred</name></name></expr></argument>, <argument><expr><call><name>jn_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>deferred</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name><name>jbn</name><operator>-&gt;</operator><name>resultset_tsf</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>napi_release_threadsafe_function</name><argument_list>(<argument><expr><name><name>jbn</name><operator>-&gt;</operator><name>resultset_tsf</name></name></expr></argument>, <argument><expr><name>napi_tsfn_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>jbn</name><operator>-&gt;</operator><name>resultset_tsf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>jn_work_destroy</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>napi_value</name></type> <name>jn_close</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_callback_info</name></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><call><name>jn_work_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>JNRC</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>jn_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>ret</name> <init>= <expr><call><name>jn_launch_promise</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>, <argument><expr><name>jn_close_execute</name></expr></argument>, <argument><expr><name>jn_close_complete</name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><name>ret</name></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><call><name>jn_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="line">//  ---------------- EJDB2.put/patch()</comment>

<struct>struct <name>JNPUT_DATA</name> <block>{
  <decl_stmt><decl><type><name>int64_t</name></type>     <name>id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>patch</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jn_put_execute</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBN</name></type> <name>jbn</name> <init>= <expr><name><name>work</name><operator>-&gt;</operator><name>unwrapped</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>jbn</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>JN_ERROR_INVALID_STATE</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>JNPUT_DATA</name></name> <modifier>*</modifier></type><name>wdata</name> <init>= <expr><name><name>work</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wdata</name><operator>-&gt;</operator><name>patch</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>jbl_from_json</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>, <argument><expr><name><name>wdata</name><operator>-&gt;</operator><name>json</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>wdata</name><operator>-&gt;</operator><name>id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>wdata</name><operator>-&gt;</operator><name>patch</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>ejdb_patch</name><argument_list>(<argument><expr><name><name>jbn</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>wdata</name><operator>-&gt;</operator><name>coll</name></name></expr></argument>, <argument><expr><name><name>wdata</name><operator>-&gt;</operator><name>json</name></name></expr></argument>, <argument><expr><name><name>wdata</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>ejdb_put</name><argument_list>(<argument><expr><name><name>jbn</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>wdata</name><operator>-&gt;</operator><name>coll</name></name></expr></argument>, <argument><expr><name>jbl</name></expr></argument>, <argument><expr><name><name>wdata</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>ejdb_put_new</name><argument_list>(<argument><expr><name><name>jbn</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>wdata</name><operator>-&gt;</operator><name>coll</name></name></expr></argument>, <argument><expr><name>jbl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wdata</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>jbl</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jn_put_complete</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_status</name></type> <name>ns</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>rv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>jn_resolve_pending_errors</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>JNPUT_DATA</name></name> <modifier>*</modifier></type><name>wdata</name> <init>= <expr><name><name>work</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ns</name> <operator>=</operator> <call><name>napi_create_int64</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>wdata</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ns</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jn_resolve_pending_errors</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_resolve_deferred</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>deferred</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>deferred</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>jn_work_destroy</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// collection, json, id</comment>
<function><type><specifier>static</specifier> <name>napi_value</name></type> <name>jn_put_patch</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_callback_info</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>patch</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>upsert</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>this</name></decl>, <decl><type ref="prev"/><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>argc</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><call><name>jn_work_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_get_cb_info</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JN_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>JNPUT_DATA</name></name> <modifier>*</modifier></type><name>wdata</name> <init>= <expr><call><name>jn_work_alloc_data</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>wdata</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>work</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wdata</name><operator>-&gt;</operator><name>patch</name></name> <operator>=</operator> <name>patch</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wdata</name><operator>-&gt;</operator><name>coll</name></name> <operator>=</operator> <call><name>jn_string</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wdata</name><operator>-&gt;</operator><name>json</name></name> <operator>=</operator> <call><name>jn_string</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wdata</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>jn_int</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>wdata</name><operator>-&gt;</operator><name>id</name></name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>wdata</name><operator>-&gt;</operator><name>patch</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JN_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>jn_launch_promise</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>wdata</name><operator>-&gt;</operator><name>patch</name></name></expr> ?</condition><then> <expr><literal type="string">"patch"</literal></expr> </then><else>: <expr><literal type="string">"put"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>jn_put_execute</name></expr></argument>, <argument><expr><name>jn_put_complete</name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>JNRC</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>work</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>jn_work_destroy</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><ternary><condition><expr><name>ret</name></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><call><name>jn_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>napi_value</name></type> <name>jn_put</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_callback_info</name></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>jn_put_patch</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>napi_value</name></type> <name>jn_patch</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_callback_info</name></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>jn_put_patch</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>napi_value</name></type> <name>jn_patch_or_put</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_callback_info</name></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>jn_put_patch</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">//  ---------------- EJDB2.get()</comment>

<struct>struct <name>JNGET_DATA</name> <block>{
  <decl_stmt><decl><type><name>int64_t</name></type>     <name>id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jn_get_data_destroy</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>JNWORK</name></type> <name>w</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>JNGET_DATA</name></name> <modifier>*</modifier></type><name>wdata</name> <init>= <expr><name><name>w</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>wdata</name> <operator>&amp;&amp;</operator> <name><name>wdata</name><operator>-&gt;</operator><name>jbl</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wdata</name><operator>-&gt;</operator><name>jbl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jn_get_execute</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBN</name></type> <name>jbn</name> <init>= <expr><name><name>work</name><operator>-&gt;</operator><name>unwrapped</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>jbn</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>JN_ERROR_INVALID_STATE</name></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>JNGET_DATA</name></name> <modifier>*</modifier></type><name>wdata</name> <init>= <expr><name><name>work</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>ejdb_get</name><argument_list>(<argument><expr><name><name>jbn</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>wdata</name><operator>-&gt;</operator><name>coll</name></name></expr></argument>, <argument><expr><name><name>wdata</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wdata</name><operator>-&gt;</operator><name>jbl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jn_get_complete</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_status</name></type> <name>ns</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>rv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>jn_resolve_pending_errors</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>JNGET_DATA</name></name> <modifier>*</modifier></type><name>wdata</name> <init>= <expr><name><name>work</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><call><name>iwxstr_new2</name><argument_list>(<argument><expr><call><name>jbl_size</name><argument_list>(<argument><expr><name><name>wdata</name><operator>-&gt;</operator><name>jbl</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>xstr</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish0</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>jbl_as_json</name><argument_list>(<argument><expr><name><name>wdata</name><operator>-&gt;</operator><name>jbl</name></name></expr></argument>, <argument><expr><name>jbl_xstr_json_printer</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name>finish0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_create_string_utf8</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_resolve_deferred</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>deferred</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>deferred</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>finish0</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>xstr</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>||</operator> <name>ns</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jn_resolve_pending_errors</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>jn_work_destroy</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>napi_value</name></type> <name>jn_get</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_callback_info</name></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>this</name></decl>, <decl><type ref="prev"/><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>argc</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><call><name>jn_work_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_get_cb_info</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JN_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>JNGET_DATA</name></name> <modifier>*</modifier></type><name>wdata</name> <init>= <expr><call><name>jn_work_alloc_data</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>wdata</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>work</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>release_data</name></name> <operator>=</operator> <name>jn_get_data_destroy</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wdata</name><operator>-&gt;</operator><name>coll</name></name> <operator>=</operator> <call><name>jn_string</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wdata</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>jn_int</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>jn_launch_promise</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"get"</literal></expr></argument>, <argument><expr><name>jn_get_execute</name></expr></argument>, <argument><expr><name>jn_get_complete</name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>JNRC</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>work</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>jn_work_destroy</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><ternary><condition><expr><name>ret</name></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><call><name>jn_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="line">//  ---------------- EJDB2.del()</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jn_del_execute</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBN</name></type> <name>jbn</name> <init>= <expr><name><name>work</name><operator>-&gt;</operator><name>unwrapped</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>jbn</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>JN_ERROR_INVALID_STATE</name></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>JNGET_DATA</name></name> <modifier>*</modifier></type><name>wdata</name> <init>= <expr><name><name>work</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>ejdb_del</name><argument_list>(<argument><expr><name><name>jbn</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>wdata</name><operator>-&gt;</operator><name>coll</name></name></expr></argument>, <argument><expr><name><name>wdata</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jn_del_complete</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_status</name></type> <name>ns</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>jn_resolve_pending_errors</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_resolve_deferred</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>deferred</name></name></expr></argument>, <argument><expr><call><name>jn_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>deferred</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>jn_work_destroy</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>napi_value</name></type> <name>jn_del</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_callback_info</name></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>this</name></decl>, <decl><type ref="prev"/><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>argc</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><call><name>jn_work_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_get_cb_info</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JN_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>JNGET_DATA</name></name> <modifier>*</modifier></type><name>wdata</name> <init>= <expr><call><name>jn_work_alloc_data</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>wdata</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>work</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wdata</name><operator>-&gt;</operator><name>coll</name></name> <operator>=</operator> <call><name>jn_string</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wdata</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>jn_int</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>jn_launch_promise</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"del"</literal></expr></argument>, <argument><expr><name>jn_del_execute</name></expr></argument>, <argument><expr><name>jn_del_complete</name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>JNRC</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>work</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>jn_work_destroy</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><ternary><condition><expr><name>ret</name></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><call><name>jn_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="line">//  ---------------- EJDB2.renameCollection()</comment>

<struct>struct <name>JNRENAME_DATA</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>old_name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_name</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jn_rename_collection_execute</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBN</name></type> <name>jbn</name> <init>= <expr><name><name>work</name><operator>-&gt;</operator><name>unwrapped</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>jbn</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>JN_ERROR_INVALID_STATE</name></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>JNRENAME_DATA</name></name> <modifier>*</modifier></type><name>wdata</name> <init>= <expr><name><name>work</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>ejdb_rename_collection</name><argument_list>(<argument><expr><name><name>jbn</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>wdata</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>, <argument><expr><name><name>wdata</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jn_rename_collection_complete</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_status</name></type> <name>ns</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>jn_resolve_pending_errors</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_resolve_deferred</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>deferred</name></name></expr></argument>, <argument><expr><call><name>jn_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>deferred</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>jn_work_destroy</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>napi_value</name></type> <name>jn_rename_collection</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_callback_info</name></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>this</name></decl>, <decl><type ref="prev"/><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>argc</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><call><name>jn_work_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_get_cb_info</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JN_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>JNRENAME_DATA</name></name> <modifier>*</modifier></type><name>wdata</name> <init>= <expr><call><name>jn_work_alloc_data</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>wdata</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>work</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>wdata</name><operator>-&gt;</operator><name>old_name</name></name> <operator>=</operator> <call><name>jn_string</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>wdata</name><operator>-&gt;</operator><name>new_name</name></name> <operator>=</operator> <call><name>jn_string</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>jn_launch_promise</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"rename"</literal></expr></argument>,
                          <argument><expr><name>jn_rename_collection_execute</name></expr></argument>, <argument><expr><name>jn_rename_collection_complete</name></expr></argument>,
                          <argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>JNRC</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>work</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>jn_work_destroy</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><ternary><condition><expr><name>ret</name></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><call><name>jn_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="line">//  ---------------- EJDB2.info()</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jn_info_execute</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBN</name></type> <name>jbn</name> <init>= <expr><name><name>work</name><operator>-&gt;</operator><name>unwrapped</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>jbn</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>JN_ERROR_INVALID_STATE</name></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>JNGET_DATA</name></name> <modifier>*</modifier></type><name>wdata</name> <init>= <expr><name><name>work</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>ejdb_get_meta</name><argument_list>(<argument><expr><name><name>jbn</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wdata</name><operator>-&gt;</operator><name>jbl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jn_info_complete</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_status</name></type> <name>ns</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>rv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>jn_resolve_pending_errors</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>JNGET_DATA</name></name> <modifier>*</modifier></type><name>wdata</name> <init>= <expr><name><name>work</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><call><name>iwxstr_new2</name><argument_list>(<argument><expr><call><name>jbl_size</name><argument_list>(<argument><expr><name><name>wdata</name><operator>-&gt;</operator><name>jbl</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>xstr</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish0</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>jbl_as_json</name><argument_list>(<argument><expr><name><name>wdata</name><operator>-&gt;</operator><name>jbl</name></name></expr></argument>, <argument><expr><name>jbl_xstr_json_printer</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name>finish0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_create_string_utf8</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_resolve_deferred</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>deferred</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>deferred</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>finish0</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>xstr</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>||</operator> <name>ns</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jn_resolve_pending_errors</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>jn_work_destroy</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>napi_value</name></type> <name>jn_info</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_callback_info</name></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>this</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><call><name>jn_work_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_get_cb_info</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>jn_work_alloc_data</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>JNGET_DATA</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>work</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>release_data</name></name> <operator>=</operator> <name>jn_get_data_destroy</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>jn_launch_promise</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"info"</literal></expr></argument>, <argument><expr><name>jn_info_execute</name></expr></argument>, <argument><expr><name>jn_info_complete</name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>JNRC</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>work</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>jn_work_destroy</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><ternary><condition><expr><name>ret</name></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><call><name>jn_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="line">//  ---------------- EJDB2.ensureIndex/removeIndex()</comment>

<struct>struct <name>JNIDX_DATA</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>     <modifier>*</modifier></type><name>coll</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>     <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ejdb_idx_mode_t</name></type> <name>mode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>remove</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jn_index_execute</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBN</name></type> <name>jbn</name> <init>= <expr><name><name>work</name><operator>-&gt;</operator><name>unwrapped</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>jbn</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>JN_ERROR_INVALID_STATE</name></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>JNIDX_DATA</name></name> <modifier>*</modifier></type><name>wdata</name> <init>= <expr><name><name>work</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>wdata</name><operator>-&gt;</operator><name>remove</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>ejdb_remove_index</name><argument_list>(<argument><expr><name><name>jbn</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>wdata</name><operator>-&gt;</operator><name>coll</name></name></expr></argument>, <argument><expr><name><name>wdata</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>wdata</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>ejdb_ensure_index</name><argument_list>(<argument><expr><name><name>jbn</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>wdata</name><operator>-&gt;</operator><name>coll</name></name></expr></argument>, <argument><expr><name><name>wdata</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>wdata</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jn_index_complete</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_status</name></type> <name>ns</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>jn_resolve_pending_errors</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_resolve_deferred</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>deferred</name></name></expr></argument>, <argument><expr><call><name>jn_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>deferred</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>jn_work_destroy</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>napi_value</name></type> <name>jn_index</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_callback_info</name></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>this</name></decl>, <decl><type ref="prev"/><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>argc</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><call><name>jn_work_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_get_cb_info</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JN_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>JNIDX_DATA</name></name> <modifier>*</modifier></type><name>wdata</name> <init>= <expr><call><name>jn_work_alloc_data</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>wdata</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>work</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wdata</name><operator>-&gt;</operator><name>coll</name></name> <operator>=</operator> <call><name>jn_string</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wdata</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>jn_string</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wdata</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <call><name>jn_int</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wdata</name><operator>-&gt;</operator><name>remove</name></name> <operator>=</operator> <call><name>jn_bool</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>jn_launch_promise</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"index"</literal></expr></argument>, <argument><expr><name>jn_index_execute</name></expr></argument>, <argument><expr><name>jn_index_complete</name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>JNRC</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>work</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>jn_work_destroy</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><ternary><condition><expr><name>ret</name></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><call><name>jn_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="line">// ---------------- EJDB2.removeCollection()</comment>

<struct>struct <name>JNRMC_DATA</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jn_rmcoll_execute</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBN</name></type> <name>jbn</name> <init>= <expr><name><name>work</name><operator>-&gt;</operator><name>unwrapped</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>jbn</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>JN_ERROR_INVALID_STATE</name></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>JNRMC_DATA</name></name> <modifier>*</modifier></type><name>wdata</name> <init>= <expr><name><name>work</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>ejdb_remove_collection</name><argument_list>(<argument><expr><name><name>jbn</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>wdata</name><operator>-&gt;</operator><name>coll</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jn_rmcoll_complete</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_status</name></type> <name>ns</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>jn_resolve_pending_errors</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_resolve_deferred</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>deferred</name></name></expr></argument>, <argument><expr><call><name>jn_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>deferred</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>jn_work_destroy</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>napi_value</name></type> <name>jn_rmcoll</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_callback_info</name></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>this</name></decl>, <decl><type ref="prev"/><name>argv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>argc</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><call><name>jn_work_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_get_cb_info</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JN_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>JNRMC_DATA</name></name> <modifier>*</modifier></type><name>wdata</name> <init>= <expr><call><name>jn_work_alloc_data</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>wdata</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>work</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wdata</name><operator>-&gt;</operator><name>coll</name></name> <operator>=</operator> <call><name>jn_string</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>jn_launch_promise</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"rmcoll"</literal></expr></argument>, <argument><expr><name>jn_rmcoll_execute</name></expr></argument>, <argument><expr><name>jn_rmcoll_complete</name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>JNRC</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>work</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>jn_work_destroy</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><ternary><condition><expr><name>ret</name></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><call><name>jn_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="line">//  ---------------- EJDB2.onlineBackup</comment>

<struct>struct <name>JNBK_DATA</name> <block>{
  <decl_stmt><decl><type><name>uint64_t</name></type>    <name>ts</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file_name</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jn_online_backup_execute</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBN</name></type> <name>jbn</name> <init>= <expr><name><name>work</name><operator>-&gt;</operator><name>unwrapped</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>jbn</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>JN_ERROR_INVALID_STATE</name></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>JNBK_DATA</name></name> <modifier>*</modifier></type><name>wdata</name> <init>= <expr><name><name>work</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>ejdb_online_backup</name><argument_list>(<argument><expr><name><name>jbn</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wdata</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>, <argument><expr><name><name>wdata</name><operator>-&gt;</operator><name>file_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jn_online_backup_complete</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_status</name></type> <name>ns</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>rv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>jn_resolve_pending_errors</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>JNBK_DATA</name></name> <modifier>*</modifier></type><name>wdata</name> <init>= <expr><name><name>work</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ns</name> <operator>=</operator> <call><name>napi_create_int64</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>wdata</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ns</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jn_resolve_pending_errors</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_resolve_deferred</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>deferred</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>deferred</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>jn_work_destroy</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>napi_value</name></type> <name>jn_online_backup</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_callback_info</name></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>this</name></decl>, <decl><type ref="prev"/><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>argc</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><call><name>jn_work_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_get_cb_info</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JN_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>JNBK_DATA</name></name> <modifier>*</modifier></type><name>wdata</name> <init>= <expr><call><name>jn_work_alloc_data</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>wdata</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>work</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wdata</name><operator>-&gt;</operator><name>file_name</name></name> <operator>=</operator> <call><name>jn_string</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>jn_launch_promise</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"online_backup"</literal></expr></argument>, <argument><expr><name>jn_online_backup_execute</name></expr></argument>, <argument><expr><name>jn_online_backup_complete</name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>JNRC</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>work</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>jn_work_destroy</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><ternary><condition><expr><name>ret</name></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><call><name>jn_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="line">// ---------------- jql_init</comment>

<typedef>typedef <type><struct>struct <name>JNQL</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>refs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQL</name></type> <name>jql</name></decl>;</decl_stmt>
}</block></struct></type> *<name>JNQL</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jn_jnql_destroy_mt</name><parameter_list>(<parameter><decl><type><name>JNQL</name> <modifier>*</modifier></type><name>qlp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>qlp</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>qlp</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JNQL</name></type> <name>ql</name> <init>= <expr><operator>*</operator><name>qlp</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ql</name><operator>-&gt;</operator><name>jql</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jql_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ql</name><operator>-&gt;</operator><name>jql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jn_jql_finalize</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>hint</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JNQL</name></type> <name>jnql</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>jnql</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jn_jnql_destroy_mt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jnql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// JQL._impl.jql_init(this, query, collection);</comment>
<function><type><specifier>static</specifier> <name>napi_value</name></type> <name>jn_jql_init</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_callback_info</name></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>this</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>argc</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JNQL</name></type> <name>jnql</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>iwpool_create</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>jnql</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>jnql</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>jnql</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_get_cb_info</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JN_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>jn_string</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>collection</name> <init>= <expr><call><name>jn_string</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_create2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jnql</name><operator>-&gt;</operator><name>jql</name></name></expr></argument>, <argument><expr><name>collection</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>JQL_KEEP_QUERY_ON_PARSE_ERROR</name> <operator>|</operator> <name>JQL_SILENT_ON_PARSE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_wrap</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>jnql</name></expr></argument>, <argument><expr><name>jn_jql_finalize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>napi_value</name></type> <name>vcoll</name> <init>= <expr><call><name>jn_create_string</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>jql_collection</name><argument_list>(<argument><expr><name><name>jnql</name><operator>-&gt;</operator><name>jql</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>vcoll</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_set_named_property</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"collection"</literal></expr></argument>, <argument><expr><name>vcoll</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>==</operator> <name>JQL_ERROR_QUERY_PARSE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>jnql</name> <operator>&amp;&amp;</operator> <name><name>jnql</name><operator>-&gt;</operator><name>jql</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>JNTHROW</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>jql_error</name><argument_list>(<argument><expr><name><name>jnql</name><operator>-&gt;</operator><name>jql</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>JNRC</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>jnql</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>jn_jnql_destroy_mt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jnql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>jn_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// ---------------- jql_stream_attach</comment>

<typedef>typedef <type><struct>struct <name>JNQS</name> <block>{ <comment type="line">// query stream associated data</comment>
  <decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>aborted</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>paused</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>refs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBN</name></type>      <name>jbn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JNQL</name></type>     <name>jnql</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_ref</name></type> <name>stream_ref</name></decl>;</decl_stmt>      <comment type="line">// Reference to the stream object</comment>
  <decl_stmt><decl><type><name>napi_ref</name></type> <name>explain_cb_ref</name></decl>;</decl_stmt>  <comment type="line">// Reference to the optional explain callback</comment>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>limit</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>JNWORK</name></name></type>   <name>work</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mtx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pthread_cond_t</name></type>  <name>cond</name></decl>;</decl_stmt>
}</block></struct></type> *<name>JNQS</name>;</typedef>

<typedef>typedef <type><struct>struct <name>JNCS</name> <block>{ <comment type="line">// call data to `k_add_stream_tsfn`</comment>
  <decl_stmt><decl><type><name>bool</name></type>     <name>has_count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name>  <modifier>*</modifier></type><name>log</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name>  <modifier>*</modifier></type><name>document</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>document_id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_ref</name></type> <name>stream_ref</name></decl>;</decl_stmt> <comment type="line">// copied from `JNQS`</comment>
}</block></struct></type> *<name>JNCS</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jn_cs_destroy</name><parameter_list>(<parameter><decl><type><name>JNCS</name> <modifier>*</modifier></type><name>csp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>csp</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>csp</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JNCS</name></type> <name>cs</name> <init>= <expr><operator>*</operator><name>csp</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>cs</name><operator>-&gt;</operator><name>document</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>document</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>cs</name><operator>-&gt;</operator><name>log</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>log</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>csp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// function addStreamResult(stream, id, jsondoc, log)</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>jn_resultset_tsf</name><parameter_list>(
  <parameter><decl><type><name>napi_env</name></type>   <name>env</name></decl></parameter>,
  <parameter><decl><type><name>napi_value</name></type> <name>js_add_stream</name></decl></parameter>,
  <parameter><decl><type><name>void</name>      <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>void</name>      <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>env</name></expr>)</condition> <block>{<block_content> <comment type="line">// shutdown pending</comment>
    <decl_stmt><decl><type><name>JNCS</name></type> <name>cs</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>jn_cs_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>JNCS</name></type> <name>cs</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>vstream</name></decl>, <decl><type ref="prev"/><name>vid</name></decl>, <decl><type ref="prev"/><name>vdoc</name></decl>, <decl><type ref="prev"/><name>vlog</name></decl>, <decl><type ref="prev"/><name>vresult</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>vglobal</name> <init>= <expr><call><name>jn_global</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>vnull</name> <init>= <expr><call><name>jn_null</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>vglobal</name> <operator>||</operator> <operator>!</operator><name>vnull</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>vstream</name> <operator>=</operator> <call><name>jn_get_ref</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>stream_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>vstream</name></expr>)</condition> <block>{<block_content> <comment type="line">// exception pending</comment>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>cs</name><operator>-&gt;</operator><name>document</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>vdoc</name> <operator>=</operator> <call><name>jn_create_string</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>document</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>document</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>document</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cs</name><operator>-&gt;</operator><name>has_count</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>vdoc</name> <operator>=</operator> <call><name>jn_create_int64</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>vdoc</name> <operator>=</operator> <name>vnull</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>vdoc</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>vid</name> <operator>=</operator> <call><name>jn_create_int64</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>document_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>vid</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>cs</name><operator>-&gt;</operator><name>log</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>vlog</name> <operator>=</operator> <call><name>jn_create_string</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>log</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>vlog</name> <operator>=</operator> <name>vnull</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>napi_value</name></type> <name><name>argv</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>vstream</name></expr>, <expr><name>vid</name></expr>, <expr><name>vdoc</name></expr>, <expr><name>vlog</name></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>argc</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_call_function</name><argument_list>(
         <argument><expr><name>env</name></expr></argument>,
         <argument><expr><name>vglobal</name></expr></argument>,
         <argument><expr><name>js_add_stream</name></expr></argument>,
         <argument><expr><name>argc</name></expr></argument>,
         <argument><expr><name>argv</name></expr></argument>,
         <argument><expr><operator>&amp;</operator><name>vresult</name></expr></argument>
         )</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name><name>cs</name><operator>-&gt;</operator><name>document_id</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>refs</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>napi_reference_unref</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>stream_ref</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>jn_cs_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jn_jnqs_destroy_mt</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>JNQS</name> <modifier>*</modifier></type><name>qsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>qsp</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>qsp</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JNQS</name></type> <name>qs</name> <init>= <expr><operator>*</operator><name>qsp</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>rcnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>qs</name><operator>-&gt;</operator><name>refs</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>qs</name><operator>-&gt;</operator><name>jnql</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>qs</name><operator>-&gt;</operator><name>jnql</name><operator>-&gt;</operator><name>refs</name></name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>qs</name><operator>-&gt;</operator><name>stream_ref</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>napi_reference_unref</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>qs</name><operator>-&gt;</operator><name>stream_ref</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rcnt</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>napi_ref</name></type> <name>ref</name> <init>= <expr><name><name>qs</name><operator>-&gt;</operator><name>stream_ref</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>qs</name><operator>-&gt;</operator><name>stream_ref</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>napi_delete_reference</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>qs</name><operator>-&gt;</operator><name>explain_cb_ref</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>napi_reference_unref</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>qs</name><operator>-&gt;</operator><name>explain_cb_ref</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rcnt</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>napi_ref</name></type> <name>ref</name> <init>= <expr><name><name>qs</name><operator>-&gt;</operator><name>explain_cb_ref</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>qs</name><operator>-&gt;</operator><name>explain_cb_ref</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>napi_delete_reference</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>qs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>jn_stream_pause_guard</name><parameter_list>(<parameter><decl><type><name>JNQS</name></type> <name>qs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qs</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><name><name>qs</name><operator>-&gt;</operator><name>paused</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rci</name> <operator>=</operator> <call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qs</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>qs</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qs</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>jn_jql_stream_visitor</name><parameter_list>(<parameter><decl><type><name>EJDB_EXEC</name> <modifier>*</modifier></type><name>ux</name></decl></parameter>, <parameter><decl><type><name>EJDB_DOC</name></type> <name>doc</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>step</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JNCS</name></type> <name>cs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JNQS</name></type> <name>qs</name> <init>= <expr><name><name>ux</name><operator>-&gt;</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><operator>&amp;</operator><name><name>qs</name><operator>-&gt;</operator><name>work</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>qs</name><operator>-&gt;</operator><name>aborted</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>step</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>jn_stream_pause_guard</name><argument_list>(<argument><expr><name>qs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>xstr</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>doc</name><operator>-&gt;</operator><name>node</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>jbn_as_json</name><argument_list>(<argument><expr><name><name>doc</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>jbl_xstr_json_printer</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>jbl_as_json</name><argument_list>(<argument><expr><name><name>doc</name><operator>-&gt;</operator><name>raw</name></name></expr></argument>, <argument><expr><name>jbl_xstr_json_printer</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>cs</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cs</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>has_count</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>stream_ref</name></name> <operator>=</operator> <name><name>qs</name><operator>-&gt;</operator><name>stream_ref</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>log</name></name> <operator>=</operator> <name><name>ux</name><operator>-&gt;</operator><name>log</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>document_id</name></name> <operator>=</operator> <name><name>doc</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>document</name></name> <operator>=</operator> <name>xstr</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name> <init>= <expr><call><name>napi_call_threadsafe_function</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>jbn</name><operator>-&gt;</operator><name>resultset_tsf</name></name></expr></argument>, <argument><expr><name>cs</name></expr></argument>, <argument><expr><name>napi_tsfn_blocking</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ns</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>JN_ERROR_NAPI</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>ns</name></name> <operator>=</operator> <name>ns</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>ux</name><operator>-&gt;</operator><name>log</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>cs</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>document</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="line">// kept in xstr</comment>
      <expr_stmt><expr><call><name>jn_cs_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jn_jql_stream_execute</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>refs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JNQS</name></type> <name>qs</name> <init>= <expr><name><name>work</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQL</name></type> <name>q</name> <init>= <expr><name><name>qs</name><operator>-&gt;</operator><name>jnql</name><operator>-&gt;</operator><name>jql</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JNCS</name></type> <name>cs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB_EXEC</name></type> <name>ux</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>has_count</name> <init>= <expr><call><name>jql_has_aggregate_count</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// Trying to stop on paused stream</comment>
  <comment type="line">// not in context of query execution</comment>
  <comment type="line">// hence we can avoid unnecessary database locking</comment>
  <comment type="line">// before start reading stream.</comment>
  <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>jn_stream_pause_guard</name><argument_list>(<argument><expr><name>qs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_reference_ref</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>qs</name><operator>-&gt;</operator><name>stream_ref</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>refs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>qs</name><operator>-&gt;</operator><name>explain_cb_ref</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ux</name><operator>.</operator><name>log</name></name> <operator>=</operator> <call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ux</name><operator>.</operator><name>log</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>ux</name><operator>.</operator><name>q</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ux</name><operator>.</operator><name>db</name></name> <operator>=</operator> <name><name>qs</name><operator>-&gt;</operator><name>jbn</name><operator>-&gt;</operator><name>db</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ux</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <name>qs</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ux</name><operator>.</operator><name>limit</name></name> <operator>=</operator> <name><name>qs</name><operator>-&gt;</operator><name>limit</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_count</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ux</name><operator>.</operator><name>visitor</name></name> <operator>=</operator> <name>jn_jql_stream_visitor</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>ejdb_exec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Stream close event</comment>
  <expr_stmt><expr><name>cs</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cs</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>has_count</name></name> <operator>=</operator> <name>has_count</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name><name>ux</name><operator>.</operator><name>cnt</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>stream_ref</name></name> <operator>=</operator> <name><name>qs</name><operator>-&gt;</operator><name>stream_ref</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>log</name></name> <operator>=</operator> <name><name>ux</name><operator>.</operator><name>log</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>document_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>document</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ux</name><operator>.</operator><name>log</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name>ns</name> <operator>=</operator> <call><name>napi_call_threadsafe_function</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>jbn</name><operator>-&gt;</operator><name>resultset_tsf</name></name></expr></argument>, <argument><expr><name>cs</name></expr></argument>, <argument><expr><name>napi_tsfn_blocking</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ns</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>JN_ERROR_NAPI</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>ns</name></name> <operator>=</operator> <name>ns</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>refs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>refs</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>napi_reference_unref</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>qs</name><operator>-&gt;</operator><name>stream_ref</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ux</name><operator>.</operator><name>log</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name><name>ux</name><operator>.</operator><name>log</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>work</name><operator>-&gt;</operator><name>rc</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jn_cs_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jn_jql_stream_complete</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_status</name></type> <name>ns</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JNWORK</name></type> <name>work</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JNQS</name></type> <name>qs</name> <init>= <expr><name><name>work</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ns</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ns</name> <operator>=</operator> <name><name>work</name><operator>-&gt;</operator><name>ns</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>jn_resolve_pending_errors</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_resolve_deferred</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>deferred</name></name></expr></argument>, <argument><expr><call><name>jn_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>deferred</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>jn_work_destroy</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>jn_jnqs_destroy_mt</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// this.jql._impl.jql_stream_destroy(this);</comment>
<function><type><specifier>static</specifier> <name>napi_value</name></type> <name>jn_jql_stream_destroy</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_callback_info</name></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>argc</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>ret</name> <init>= <expr><call><name>jn_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>argv</name></decl>, <decl><type ref="prev"/><name>this</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name> <init>= <expr><call><name>napi_get_cb_info</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ns</name> <operator>||</operator> <operator>(</operator><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>ns</name> <operator>=</operator> <call><name>napi_remove_wrap</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ns</name> <operator>||</operator> <operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>JNQS</name></type> <name>qs</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>jn_jnqs_destroy_mt</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>napi_value</name></type> <name>jn_jql_stream_set_paused</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_callback_info</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>paused</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>argv</name></decl>, <decl><type ref="prev"/><name>this</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>argc</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_get_cb_info</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><name>JN_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>JNRC</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_unwrap</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>JNQS</name></type> <name>qs</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>qs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qs</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>JNRC</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>qs</name><operator>-&gt;</operator><name>paused</name></name> <operator>!=</operator> <name>paused</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>qs</name><operator>-&gt;</operator><name>paused</name></name> <operator>=</operator> <name>paused</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qs</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qs</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <return>return <expr><call><name>jn_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>napi_value</name></type> <name>jn_jql_stream_pause</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_callback_info</name></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>jn_jql_stream_set_paused</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>napi_value</name></type> <name>jn_jql_stream_resume</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_callback_info</name></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>jn_jql_stream_set_paused</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>napi_value</name></type> <name>jn_jql_stream_abort</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_callback_info</name></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>argv</name></decl>, <decl><type ref="prev"/><name>this</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>argc</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_get_cb_info</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><name>JN_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>JNRC</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_unwrap</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>JNQS</name></type> <name>qs</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>qs</name><operator>-&gt;</operator><name>aborted</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<label><name>finish</name>:</label>
  <return>return <expr><call><name>jn_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// JQL._impl.jql_stream_attach(this, stream, [opts.limit, opts.explainCallback]);</comment>
<function><type><specifier>static</specifier> <name>napi_value</name></type> <name>jn_jql_stream_attach</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_callback_info</name></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>this</name></decl>, <decl><type ref="prev"/><name>vexplain</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>argc</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>JBN</name></type> <name>jbn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JNQL</name></type> <name>jnql</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JNQS</name></type> <name>qs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_get_cb_info</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JN_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_unwrap</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>jnql</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// -V580</comment>

  <expr_stmt><expr><name>qs</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>qs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>qs</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mtx</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>cond</name> <init>= <expr><name>PTHREAD_COND_INITIALIZER</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qs</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mtx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qs</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cond</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>qs</name><operator>-&gt;</operator><name>paused</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qs</name><operator>-&gt;</operator><name>jnql</name></name> <operator>=</operator> <name>jnql</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qs</name><operator>-&gt;</operator><name>jnql</name><operator>-&gt;</operator><name>refs</name></name><operator>++</operator></expr>;</expr_stmt> <comment type="line">// Query in use</comment>
  <expr_stmt><expr><name><name>qs</name><operator>-&gt;</operator><name>limit</name></name> <operator>=</operator> <call><name>jn_int_at</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_get_element</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vexplain</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>jn_is_null_or_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>vexplain</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>napi_valuetype</name></type> <name>vtype</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_typeof</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>vexplain</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vtype</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>vtype</name> <operator>!=</operator> <name>napi_function</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JN_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_create_reference</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>vexplain</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>qs</name><operator>-&gt;</operator><name>explain_cb_ref</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_unwrap</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>jbn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                   <comment type="line">// -V580</comment>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_create_reference</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>qs</name><operator>-&gt;</operator><name>stream_ref</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Reference to stream</comment>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_wrap</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>qs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Launch async work</comment>
  <expr_stmt><expr><name><name>qs</name><operator>-&gt;</operator><name>refs</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>     <comment type="line">// +1 for jn_jql_stream_complete</comment>
  <comment type="line">// +1 for jn_jql_stream_destroy</comment>
  <expr_stmt><expr><name><name>qs</name><operator>-&gt;</operator><name>jbn</name></name> <operator>=</operator> <name>jbn</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qs</name><operator>-&gt;</operator><name>work</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>qs</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>jn_launch_promise</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"query"</literal></expr></argument>, <argument><expr><name>jn_jql_stream_execute</name></expr></argument>, <argument><expr><name>jn_jql_stream_complete</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>qs</name><operator>-&gt;</operator><name>work</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>JNRC</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>qs</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>qs</name><operator>-&gt;</operator><name>refs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="line">// needed to destroy it completely</comment>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>jn_jnqs_destroy_mt</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><ternary><condition><expr><name>ret</name></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><call><name>jn_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jn_jql_free_set_string_value</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><name>op</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pool</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// this._impl.jql_set(jql, placeholder, val, 1);</comment>
<function><type><specifier>static</specifier> <name>napi_value</name></type> <name>jn_jql_set</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_callback_info</name></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iplh</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>this</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>argc</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>splh</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>svalue</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JNQL</name></type> <name>jnql</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_valuetype</name></type> <name>vtype</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>vpool</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="line">// jql_set_xxx value</comment>
  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>iwpool_create</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_get_cb_info</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JN_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_unwrap</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>jnql</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>jnql</name><operator>-&gt;</operator><name>refs</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JN_ERROR_QUERY_IN_USE</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Set type</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>stype</name> <init>= <expr><call><name>jn_int</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Placeholder</comment>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_typeof</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vtype</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>vtype</name> <operator>==</operator> <name>napi_string</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>iplh</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>splh</name> <operator>=</operator> <call><name>jn_string</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>vtype</name> <operator>==</operator> <name>napi_number</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>splh</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>iplh</name> <operator>=</operator> <call><name>jn_int</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JN_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name>stype</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">6</literal></expr>:</case>   <comment type="line">// String</comment>
    <case>case <expr><literal type="number">1</literal></expr>:</case>   <comment type="line">// JSON</comment>
    <case>case <expr><literal type="number">2</literal></expr>:</case> <block>{<block_content> <comment type="line">// Regexp</comment>
      <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>node</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>vpool</name> <operator>=</operator> <call><name>iwpool_create</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>vpool</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>finish</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <switch>switch <condition>(<expr><name>stype</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">6</literal></expr>:</case> <comment type="line">// String</comment>
        <case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="line">// Regexp</comment>
          <expr_stmt><expr><name>svalue</name> <operator>=</operator> <call><name>jn_string</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vpool</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>stype</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_set_str2</name><argument_list>(<argument><expr><name><name>jnql</name><operator>-&gt;</operator><name>jql</name></name></expr></argument>, <argument><expr><name>splh</name></expr></argument>, <argument><expr><name>iplh</name></expr></argument>, <argument><expr><name>svalue</name></expr></argument>, <argument><expr><name>jn_jql_free_set_string_value</name></expr></argument>, <argument><expr><name>vpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// -V614</comment>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_set_regexp2</name><argument_list>(<argument><expr><name><name>jnql</name><operator>-&gt;</operator><name>jql</name></name></expr></argument>, <argument><expr><name>splh</name></expr></argument>, <argument><expr><name>iplh</name></expr></argument>, <argument><expr><name>svalue</name></expr></argument>, <argument><expr><name>jn_jql_free_set_string_value</name></expr></argument>, <argument><expr><name>vpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
          <expr_stmt><expr><name>svalue</name> <operator>=</operator> <call><name>jn_string</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_from_json</name><argument_list>(<argument><expr><name>svalue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><name>vpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_set_json2</name><argument_list>(<argument><expr><name><name>jnql</name><operator>-&gt;</operator><name>jql</name></name></expr></argument>, <argument><expr><name>splh</name></expr></argument>, <argument><expr><name>iplh</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>jn_jql_free_set_string_value</name></expr></argument>, <argument><expr><name>vpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block>
    <break>break;</break>

    <case>case <expr><literal type="number">3</literal></expr>:</case> <block>{<block_content> <comment type="line">// Integer</comment>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>v</name> <init>= <expr><call><name>jn_int</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_set_i64</name><argument_list>(<argument><expr><name><name>jnql</name><operator>-&gt;</operator><name>jql</name></name></expr></argument>, <argument><expr><name>splh</name></expr></argument>, <argument><expr><name>iplh</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <break>break;</break>

    <case>case <expr><literal type="number">4</literal></expr>:</case> <block>{<block_content> <comment type="line">// Double</comment>
      <decl_stmt><decl><type><name>double</name></type> <name>v</name> <init>= <expr><call><name>jn_double</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_set_f64</name><argument_list>(<argument><expr><name><name>jnql</name><operator>-&gt;</operator><name>jql</name></name></expr></argument>, <argument><expr><name>splh</name></expr></argument>, <argument><expr><name>iplh</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <break>break;</break>

    <case>case <expr><literal type="number">5</literal></expr>:</case> <block>{<block_content> <comment type="line">// Boolean</comment>
      <decl_stmt><decl><type><name>bool</name></type> <name>v</name> <init>= <expr><call><name>jn_bool</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_set_bool</name><argument_list>(<argument><expr><name><name>jnql</name><operator>-&gt;</operator><name>jql</name></name></expr></argument>, <argument><expr><name>splh</name></expr></argument>, <argument><expr><name>iplh</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <break>break;</break>
  </block_content>}</block></switch>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>pool</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>vpool</name></expr>)</condition> <block>{<block_content> <comment type="line">// vpool will be destroyed when JQL freed</comment>
      <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>vpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>JNRC</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>jn_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// jql_limit(jql);</comment>
<function><type><specifier>static</specifier> <name>napi_value</name></type> <name>jn_jql_limit</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_callback_info</name></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>argv</name></decl>, <decl><type ref="prev"/><name>this</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>argc</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JNQL</name></type> <name>jnql</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>limit</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_get_cb_info</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JN_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_unwrap</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>jnql</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_get_limit</name><argument_list>(<argument><expr><name><name>jnql</name><operator>-&gt;</operator><name>jql</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>jn_create_int64</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>JNRC</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><ternary><condition><expr><name>ret</name></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><call><name>jn_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="line">// ----------------</comment>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>jn_ecodefn</name><parameter_list>(<parameter><decl><type><name>locale_t</name></type> <name>locale</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ecode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>ecode</name> <operator>&gt;</operator> <name>_JN_ERROR_START</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ecode</name> <operator>&lt;</operator> <name>_JN_ERROR_END</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <switch>switch <condition>(<expr><name>ecode</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>JN_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid native function call args (JN_ERROR_INVALID_NATIVE_CALL_ARGS)"</literal></expr>;</return>
    <case>case <expr><name>JN_ERROR_INVALID_STATE</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid native extension state (JN_ERROR_INVALID_STATE)"</literal></expr>;</return>
    <case>case <expr><name>JN_ERROR_QUERY_IN_USE</name></expr>:</case>
      <return>return <expr><literal type="string">"Query object is in-use by active async iteration, and cannot be changed (JN_ERROR_QUERY_IN_USE)"</literal></expr>;</return>
    <case>case <expr><name>JN_ERROR_NAPI</name></expr>:</case>
      <return>return <expr><literal type="string">"N-API Error (JN_ERROR_NAPI)"</literal></expr>;</return>
  </block_content>}</block></switch>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>napi_value</name></type> <name>Init</name><parameter_list>(<parameter><decl><type><name>napi_env</name></type> <name>env</name></decl></parameter>, <parameter><decl><type><name>napi_value</name></type> <name>exports</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>napi_status</name></type> <name>ns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>jn_ecodefn_initialized</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jn_ecodefn_initialized</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>ejdb_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>JNRC</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>iwlog_register_ecodefn</name><argument_list>(<argument><expr><name>jn_ecodefn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>vglobal</name></decl>, <decl><type ref="prev"/><name>vadd_streamfn</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_get_global</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vglobal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Define EJDB2Impl class</comment>
  <decl_stmt><decl><type><name>napi_value</name></type> <name>ejdb2impl_clazz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>napi_property_descriptor</name></type> <name><name>properties</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>JNFUNC</name><argument_list>(<argument><expr><name>open</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JNFUNC</name><argument_list>(<argument><expr><name>close</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JNFUNC</name><argument_list>(<argument><expr><name>put</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JNFUNC</name><argument_list>(<argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JNFUNC</name><argument_list>(<argument><expr><name>patch_or_put</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JNFUNC</name><argument_list>(<argument><expr><name>get</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JNFUNC</name><argument_list>(<argument><expr><name>del</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JNFUNC</name><argument_list>(<argument><expr><name>rename_collection</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JNFUNC</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JNFUNC</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JNFUNC</name><argument_list>(<argument><expr><name>rmcoll</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JNFUNC</name><argument_list>(<argument><expr><name>online_backup</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JNFUNC</name><argument_list>(<argument><expr><name>jql_init</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JNFUNC</name><argument_list>(<argument><expr><name>jql_set</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JNFUNC</name><argument_list>(<argument><expr><name>jql_limit</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JNFUNC</name><argument_list>(<argument><expr><name>jql_stream_destroy</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JNFUNC</name><argument_list>(<argument><expr><name>jql_stream_attach</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JNFUNC</name><argument_list>(<argument><expr><name>jql_stream_pause</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JNFUNC</name><argument_list>(<argument><expr><name>jql_stream_resume</name></expr></argument>)</argument_list></call></expr>,
    <macro><name>JNFUNC</name><argument_list>(<argument>jql_stream_abort</argument>)</argument_list></macro>
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_define_class</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="string">"EJDB2Impl"</literal></expr></argument>, <argument><expr><name>NAPI_AUTO_LENGTH</name></expr></argument>, <argument><expr><name>jn_ejdb2impl_ctor</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                  <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>properties</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>properties</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
                                  <argument><expr><name>properties</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ejdb2impl_clazz</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>napi_property_descriptor</name></type> <name><name>descriptors</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"EJDB2Impl"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ejdb2impl_clazz</name></expr>, <expr><name>napi_default</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_define_properties</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>exports</name></expr></argument>,
                                       <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>descriptors</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>descriptors</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
                                       <argument><expr><name>descriptors</name></expr></argument>)</argument_list></call></expr></argument>,
       <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_get_named_property</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>vglobal</name></expr></argument>, <argument><expr><literal type="string">"__ejdb_add_stream_result__"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vadd_streamfn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>jn_is_null_or_undefined</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>vadd_streamfn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><name>JN_ERROR_INVALID_STATE</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>JNRC</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>JNGO</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>napi_create_reference</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>vadd_streamfn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>k_vadd_streamfn_ref</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <return>return <expr><name>exports</name></expr>;</return>
</block_content>}</block></function>

<macro><name>NAPI_MODULE</name><argument_list>(<argument>NODE_GYP_MODULE_NAME</argument>, <argument>Init</argument>)</argument_list></macro>
</unit>
