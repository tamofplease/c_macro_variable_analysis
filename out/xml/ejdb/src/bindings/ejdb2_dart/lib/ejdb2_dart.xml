<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/ejdb/src/bindings/ejdb2_dart/lib/ejdb2_dart.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DART_SHARED_LIB</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dart_api.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dart_native_api.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ejdb2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ejdb2/iowow/iwconv.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>WrapperFunction</name>)<parameter_list>(<parameter><decl><type><name>Dart_Port</name></type> <name>receive_port</name></decl></parameter>, <parameter><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>Dart_Port</name></type> <name>reply_port</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><enum>enum <block>{
  <decl><name>_EJD_ERROR_START</name> <init>= <expr><operator>(</operator><name>IW_ERROR_START</name> <operator>+</operator> <literal type="number">15000UL</literal> <operator>+</operator> <literal type="number">4000</literal><operator>)</operator></expr></init></decl>,
  <decl><name>EJD_ERROR_CREATE_PORT</name></decl>,                 <comment type="block" format="doxygen">/**&lt; Failed to create a Dart port (EJD_ERROR_CREATE_PORT) */</comment>
  <decl><name>EJD_ERROR_POST_PORT</name></decl>,                   <comment type="block" format="doxygen">/**&lt; Failed to post message to Dart port (EJD_ERROR_POST_PORT) */</comment>
  <decl><name>EJD_ERROR_INVALID_NATIVE_CALL_ARGS</name></decl>,    <comment type="block" format="doxygen">/**&lt; Invalid native function call args (EJD_ERROR_INVALID_NATIVE_CALL_ARGS) */</comment>
  <decl><name>EJD_ERROR_INVALID_STATE</name></decl>,               <comment type="block" format="doxygen">/**&lt; Invalid native extension state (EJD_ERROR_INVALID_STATE) */</comment>
  <decl><name>_EJD_ERROR_END</name></decl>,
}</block></enum></type> <name>jbr_ecode_t</name>;</typedef>

<struct>struct <name>NativeFunctionLookup</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_NativeFunction</name></type> <name>fn</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>WrapperFunctionLookup</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>     <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>WrapperFunction</name></type> <name>fn</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <name>EJDB2Handle</name> <block>{
  <decl_stmt><decl><type><name>EJDB</name></type>    <name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>refs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>EJDB2Handle</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>EJDB2Handle</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
}</block></struct></type> <name>EJDB2Handle</name>;</typedef>

<typedef>typedef <type><struct>struct <name>EJDB2Context</name> <block>{
  <decl_stmt><decl><type><name>Dart_Port</name></type>    <name>port</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB2Handle</name> <modifier>*</modifier></type><name>dbh</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_WeakPersistentHandle</name></type> <name>wph</name></decl>;</decl_stmt>
}</block></struct></type> <name>EJDB2Context</name>;</typedef>

<typedef>typedef <type><struct>struct <name>EJDB2JQLContext</name> <block>{
  <decl_stmt><decl><type><name>JQL</name></type> <name>q</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_WeakPersistentHandle</name></type> <name>wph</name></decl>;</decl_stmt>
}</block></struct></type> <name>EJDB2JQLContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>k_shared_scope_mtx</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>EJDB2Handle</name> <modifier>*</modifier></type><name>k_head_handle</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>Dart_NativeFunction</name></type> <name>ejd_resolve_name</name><parameter_list>(<parameter><decl><type><name>Dart_Handle</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>auto_setup_scope</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>IW_INLINE</name> <name>Dart_Handle</name></type> <name>ejd_error_check_propagate</name><parameter_list>(<parameter><decl><type><name>Dart_Handle</name></type> <name>handle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>IW_INLINE</name> <name>Dart_Handle</name></type> <name>ejd_error_rc_create</name><parameter_list>(<parameter><decl><type><name>iwrc</name></type> <name>rc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>IW_INLINE</name> <name>void</name></type> <name>ejd_error_rc_throw</name><parameter_list>(<parameter><decl><type><name>iwrc</name></type> <name>rc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ejd_explain_rc</name><parameter_list>(<parameter><decl><type><name>Dart_NativeArguments</name></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ejd_exec</name><parameter_list>(<parameter><decl><type><name>Dart_NativeArguments</name></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ejd_exec_check</name><parameter_list>(<parameter><decl><type><name>Dart_NativeArguments</name></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ejd_jql_set</name><parameter_list>(<parameter><decl><type><name>Dart_NativeArguments</name></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ejd_jql_get_limit</name><parameter_list>(<parameter><decl><type><name>Dart_NativeArguments</name></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ejd_port_handler</name><parameter_list>(<parameter><decl><type><name>Dart_Port</name></type> <name>receive_port</name></decl></parameter>, <parameter><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ejd_ctx_finalizer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>isolate_callback_data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>peer</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ejd_port</name><parameter_list>(<parameter><decl><type><name>Dart_NativeArguments</name></type> <name>arguments</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ejd_set_handle</name><parameter_list>(<parameter><decl><type><name>Dart_NativeArguments</name></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ejd_get_handle</name><parameter_list>(<parameter><decl><type><name>Dart_NativeArguments</name></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ejd_create_query</name><parameter_list>(<parameter><decl><type><name>Dart_NativeArguments</name></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ejd_open_wrapped</name><parameter_list>(<parameter><decl><type><name>Dart_Port</name></type> <name>receive_port</name></decl></parameter>, <parameter><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>Dart_Port</name></type> <name>reply_port</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ejd_close_wrapped</name><parameter_list>(<parameter><decl><type><name>Dart_Port</name></type> <name>receive_port</name></decl></parameter>, <parameter><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>Dart_Port</name></type> <name>reply_port</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ejd_get_wrapped</name><parameter_list>(<parameter><decl><type><name>Dart_Port</name></type> <name>receive_port</name></decl></parameter>, <parameter><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>Dart_Port</name></type> <name>reply_port</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ejd_put_wrapped</name><parameter_list>(<parameter><decl><type><name>Dart_Port</name></type> <name>receive_port</name></decl></parameter>, <parameter><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>Dart_Port</name></type> <name>reply_port</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ejd_del_wrapped</name><parameter_list>(<parameter><decl><type><name>Dart_Port</name></type> <name>receive_port</name></decl></parameter>, <parameter><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>Dart_Port</name></type> <name>reply_port</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ejd_patch_wrapped</name><parameter_list>(<parameter><decl><type><name>Dart_Port</name></type> <name>receive_port</name></decl></parameter>, <parameter><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>Dart_Port</name></type> <name>reply_port</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ejd_idx_wrapped</name><parameter_list>(<parameter><decl><type><name>Dart_Port</name></type> <name>receive_port</name></decl></parameter>, <parameter><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>Dart_Port</name></type> <name>reply_port</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ejd_rmi_wrapped</name><parameter_list>(<parameter><decl><type><name>Dart_Port</name></type> <name>receive_port</name></decl></parameter>, <parameter><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>Dart_Port</name></type> <name>reply_port</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ejd_rmc_wrapped</name><parameter_list>(<parameter><decl><type><name>Dart_Port</name></type> <name>receive_port</name></decl></parameter>, <parameter><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>Dart_Port</name></type> <name>reply_port</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ejd_info_wrapped</name><parameter_list>(<parameter><decl><type><name>Dart_Port</name></type> <name>receive_port</name></decl></parameter>, <parameter><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>Dart_Port</name></type> <name>reply_port</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ejd_rename_wrapped</name><parameter_list>(<parameter><decl><type><name>Dart_Port</name></type> <name>receive_port</name></decl></parameter>, <parameter><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>Dart_Port</name></type> <name>reply_port</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ejd_bkp_wrapped</name><parameter_list>(<parameter><decl><type><name>Dart_Port</name></type> <name>receive_port</name></decl></parameter>, <parameter><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>Dart_Port</name></type> <name>reply_port</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>NativeFunctionLookup</name></name></type> <name><name>k_scoped_functions</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{ <expr><literal type="string">"port"</literal></expr>,          <expr><name>ejd_port</name></expr>          }</block></expr>,
  <expr><block>{ <expr><literal type="string">"exec"</literal></expr>,          <expr><name>ejd_exec</name></expr>          }</block></expr>,
  <expr><block>{ <expr><literal type="string">"check_exec"</literal></expr>,    <expr><name>ejd_exec_check</name></expr>    }</block></expr>,
  <expr><block>{ <expr><literal type="string">"jql_set"</literal></expr>,       <expr><name>ejd_jql_set</name></expr>       }</block></expr>,
  <expr><block>{ <expr><literal type="string">"jql_get_limit"</literal></expr>, <expr><name>ejd_jql_get_limit</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"create_query"</literal></expr>,  <expr><name>ejd_create_query</name></expr>  }</block></expr>,
  <expr><block>{ <expr><literal type="string">"set_handle"</literal></expr>,    <expr><name>ejd_set_handle</name></expr>    }</block></expr>,
  <expr><block>{ <expr><literal type="string">"get_handle"</literal></expr>,    <expr><name>ejd_get_handle</name></expr>    }</block></expr>,
  <expr><block>{ <expr><literal type="string">"explain_rc"</literal></expr>,    <expr><name>ejd_explain_rc</name></expr>    }</block></expr>,
  <expr><block>{ <expr><literal type="number">0</literal></expr>,               <expr><literal type="number">0</literal></expr>                 }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>WrapperFunctionLookup</name></name></type> <name><name>k_wrapped_functions</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{ <expr><literal type="string">"get"</literal></expr>,    <expr><name>ejd_get_wrapped</name></expr>    }</block></expr>,
  <expr><block>{ <expr><literal type="string">"put"</literal></expr>,    <expr><name>ejd_put_wrapped</name></expr>    }</block></expr>,
  <expr><block>{ <expr><literal type="string">"del"</literal></expr>,    <expr><name>ejd_del_wrapped</name></expr>    }</block></expr>,
  <expr><block>{ <expr><literal type="string">"rename"</literal></expr>, <expr><name>ejd_rename_wrapped</name></expr> }</block></expr>,
  <expr><block>{ <expr><literal type="string">"patch"</literal></expr>,  <expr><name>ejd_patch_wrapped</name></expr>  }</block></expr>,
  <expr><block>{ <expr><literal type="string">"idx"</literal></expr>,    <expr><name>ejd_idx_wrapped</name></expr>    }</block></expr>,
  <expr><block>{ <expr><literal type="string">"rmi"</literal></expr>,    <expr><name>ejd_rmi_wrapped</name></expr>    }</block></expr>,
  <expr><block>{ <expr><literal type="string">"rmc"</literal></expr>,    <expr><name>ejd_rmc_wrapped</name></expr>    }</block></expr>,
  <expr><block>{ <expr><literal type="string">"info"</literal></expr>,   <expr><name>ejd_info_wrapped</name></expr>   }</block></expr>,
  <expr><block>{ <expr><literal type="string">"open"</literal></expr>,   <expr><name>ejd_open_wrapped</name></expr>   }</block></expr>,
  <expr><block>{ <expr><literal type="string">"close"</literal></expr>,  <expr><name>ejd_close_wrapped</name></expr>  }</block></expr>,
  <expr><block>{ <expr><literal type="string">"bkp"</literal></expr>,    <expr><name>ejd_bkp_wrapped</name></expr>    }</block></expr>,
  <expr><block>{ <expr><literal type="number">0</literal></expr>,        <expr><literal type="number">0</literal></expr>                  }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EJTH</name><parameter_list>(<parameter><type><name>h_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ejd_error_check_propagate(h_)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EJGO</name><parameter_list>(<parameter><type><name>h_</name></type></parameter>, <parameter><type><name>rh_</name></type></parameter>, <parameter><type><name>label_</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>if (Dart_IsError(h_)) {   \
    rh_ = (h_);             \
    goto label_;            \
  }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EJLIB</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>EJTH(Dart_LookupLibrary(Dart_NewStringFromCString("package:ejdb2_dart/ejdb2_dart.dart")))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EJPORT_RC</name><parameter_list>(<parameter><type><name>co_</name></type></parameter>, <parameter><type><name>rc_</name></type></parameter>)</parameter_list></cpp:macro>               \
  <cpp:value>if (rc_) {                              \
    (co_)-&gt;type = Dart_CObject_kInt64;    \
    (co_)-&gt;value.as_int64 = (rc_);        \
  }</cpp:value></cpp:define>

<function><type><name>IW_INLINE</name> <name>char</name> <modifier>*</modifier></type><name>cobject_str</name><parameter_list>(<parameter><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name>co</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>nulls</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>co</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>co</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Dart_CObject_kString</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name><name>co</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_string</name></name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nulls</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>co</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Dart_CObject_kNull</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>EJD_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>int64_t</name></type> <name>cobject_int</name><parameter_list>(<parameter><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name>co</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>nulls</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>co</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>co</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Dart_CObject_kInt32</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name><name>co</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_int32</name></name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>co</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Dart_CObject_kInt64</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name><name>co</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_int64</name></name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nulls</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>co</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Dart_CObject_kNull</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>EJD_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>bool</name></type> <name>cobject_bool</name><parameter_list>(<parameter><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name>co</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>nulls</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>co</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>co</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Dart_CObject_kBool</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name><name>co</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_bool</name></name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nulls</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>co</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Dart_CObject_kNull</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>EJD_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>double</name></type> <name>cobject_double</name><parameter_list>(<parameter><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name>co</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>nulls</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>co</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>co</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Dart_CObject_kDouble</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name><name>co</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_double</name></name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nulls</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>co</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Dart_CObject_kNull</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>EJD_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>Dart_Handle</name></type> <name>ejd_error_check_propagate</name><parameter_list>(<parameter><decl><type><name>Dart_Handle</name></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>Dart_IsError</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>Dart_PropagateError</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>handle</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Dart_Handle</name></type> <name>ejd_error_object_handle</name><parameter_list>(<parameter><decl><type><name>iwrc</name></type> <name>rc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Dart_Handle</name></type> <name>hmsg</name> <init>= <expr><call><name>Dart_Null</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>hmsg</name> <operator>=</operator> <call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_NewStringFromCString</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>explained</name> <init>= <expr><call><name>iwlog_ecode_explained</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>explained</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>hmsg</name> <operator>=</operator> <call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_NewStringFromCString</name><argument_list>(<argument><expr><name>explained</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>Dart_Handle</name></type> <name>hrc</name> <init>= <expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_NewIntegerFromUint64</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_Handle</name></type> <name>hclass</name> <init>= <expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_GetClass</name><argument_list>(<argument><expr><call><name>EJLIB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>Dart_NewStringFromCString</name><argument_list>(<argument><expr><literal type="string">"EJDB2Error"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_Handle</name></type> <name><name>args</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>hrc</name></expr>, <expr><name>hmsg</name></expr> }</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>Dart_New</name><argument_list>(<argument><expr><name>hclass</name></expr></argument>, <argument><expr><call><name>Dart_Null</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>Dart_Handle</name></type> <name>ejd_error_rc_create</name><parameter_list>(<parameter><decl><type><name>iwrc</name></type> <name>rc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>iwlog_ecode_explained</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>Dart_NewUnhandledExceptionError</name><argument_list>(<argument><expr><call><name>ejd_error_object_handle</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>Dart_Handle</name></type> <name>ejd_error_rc_create2</name><parameter_list>(<parameter><decl><type><name>iwrc</name></type> <name>rc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>Dart_NewUnhandledExceptionError</name><argument_list>(<argument><expr><call><name>ejd_error_object_handle</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>ejd_error_rc_throw</name><parameter_list>(<parameter><decl><type><name>iwrc</name></type> <name>rc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>Dart_PropagateError</name><argument_list>(<argument><expr><call><name>ejd_error_rc_create</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ejd_port</name><parameter_list>(<parameter><decl><type><name>Dart_NativeArguments</name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>EJDB2Context</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>intptr_t</name></type> <name>ptr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>Dart_EnterScope</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>Dart_Handle</name></type> <name>self</name> <init>= <expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_GetNativeArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_GetNativeInstanceField</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>Dart_SetReturnValue</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>ejd_error_rc_create</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dbh</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <call><name>Dart_NewNativePort</name><argument_list>(<argument><expr><literal type="string">"ejd_port_handler"</literal></expr></argument>, <argument><expr><name>ejd_port_handler</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>port</name></name> <operator>==</operator> <name>ILLEGAL_PORT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>Dart_SetReturnValue</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>ejd_error_rc_create</name><argument_list>(<argument><expr><name>EJD_ERROR_CREATE_PORT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>wph</name></name> <operator>=</operator> <call><name>Dart_NewWeakPersistentHandle</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ejd_ctx_finalizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>wph</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>Dart_SetReturnValue</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>ejd_error_rc_create</name><argument_list>(<argument><expr><name>EJD_ERROR_INVALID_STATE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>Dart_SetNativeInstanceField</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator> <name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>Dart_SetReturnValue</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_NewSendPort</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>Dart_ExitScope</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ejd_get_handle</name><parameter_list>(<parameter><decl><type><name>Dart_NativeArguments</name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>intptr_t</name></type> <name>ptr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>Dart_EnterScope</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>Dart_Handle</name></type> <name>self</name> <init>= <expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_GetNativeArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_GetNativeInstanceField</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>EJDB2Context</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>dbh</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>Dart_SetReturnValue</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>Dart_NewInteger</name><argument_list>(<argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>dbh</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>Dart_SetReturnValue</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>Dart_Null</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>Dart_ExitScope</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ejd_set_handle</name><parameter_list>(<parameter><decl><type><name>Dart_NativeArguments</name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>intptr_t</name></type> <name>ptr</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>Dart_EnterScope</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Dart_SetReturnValue</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>Dart_Null</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>Dart_Handle</name></type> <name>self</name> <init>= <expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_GetNativeArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_GetNativeInstanceField</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>EJDB2Context</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>Dart_SetReturnValue</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>ejd_error_rc_create</name><argument_list>(<argument><expr><name>EJD_ERROR_INVALID_STATE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>Dart_Handle</name></type> <name>dh</name> <init>= <expr><call><name>Dart_GetNativeArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>Dart_IsInteger</name><argument_list>(<argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>llv</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_GetNativeIntegerArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>llv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dbh</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>llv</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>Dart_IsNull</name><argument_list>(<argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dbh</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>Dart_ExitScope</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ejd_jql_finalizer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>isolate_callback_data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>peer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>EJDB2JQLContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>peer</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>q</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>jql_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>wph</name></name> <operator>&amp;&amp;</operator> <call><name>Dart_CurrentIsolateGroup</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>Dart_DeleteWeakPersistentHandle</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>wph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ejd_create_query</name><parameter_list>(<parameter><decl><type><name>Dart_NativeArguments</name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>Dart_EnterScope</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQL</name></type> <name>q</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>intptr_t</name></type> <name>ptr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>collection</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB2JQLContext</name> <modifier>*</modifier></type><name>qctx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>Dart_Handle</name></type> <name>ret</name> <init>= <expr><call><name>Dart_Null</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_Handle</name></type> <name>hlib</name> <init>= <expr><call><name>EJLIB</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_Handle</name></type> <name>hself</name> <init>= <expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_GetNativeArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_Handle</name></type> <name>hquery</name> <init>= <expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_GetNativeArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_Handle</name></type> <name>hcoll</name> <init>= <expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_GetNativeArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_StringToCString</name><argument_list>(<argument><expr><name>hquery</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>Dart_IsString</name><argument_list>(<argument><expr><name>hcoll</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_StringToCString</name><argument_list>(<argument><expr><name>hcoll</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>collection</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_GetNativeInstanceField</name><argument_list>(<argument><expr><name>hself</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>EJDB2Context</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>dbh</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>dbh</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_INVALID_STATE</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_create2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name>collection</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>JQL_KEEP_QUERY_ON_PARSE_ERROR</name> <operator>|</operator> <name>JQL_SILENT_ON_PARSE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>collection</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>collection</name> <operator>=</operator> <call><name>jql_collection</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>hcoll</name> <operator>=</operator> <call><name>Dart_NewStringFromCString</name><argument_list>(<argument><expr><name>collection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>EJGO</name><argument_list>(<argument><expr><name>hcoll</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>Dart_Handle</name></type> <name>hclass</name> <init>= <expr><call><name>Dart_GetClass</name><argument_list>(<argument><expr><name>hlib</name></expr></argument>, <argument><expr><call><name>Dart_NewStringFromCString</name><argument_list>(<argument><expr><literal type="string">"JQL"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>EJGO</name><argument_list>(<argument><expr><name>hclass</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>Dart_Handle</name></type> <name><name>jqargs</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>hself</name></expr>, <expr><name>hquery</name></expr>, <expr><name>hcoll</name></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_Handle</name></type> <name>jqinst</name> <init>= <expr><call><name>Dart_New</name><argument_list>(<argument><expr><name>hclass</name></expr></argument>, <argument><expr><call><name>Dart_NewStringFromCString</name><argument_list>(<argument><expr><literal type="string">"_"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>jqargs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>EJGO</name><argument_list>(<argument><expr><name>jqinst</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>Dart_SetNativeInstanceField</name><argument_list>(<argument><expr><name>jqinst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator> <name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>EJGO</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>qctx</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>qctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>qctx</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>Dart_SetReturnValue</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>ejd_error_rc_create</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>qctx</name><operator>-&gt;</operator><name>q</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qctx</name><operator>-&gt;</operator><name>wph</name></name> <operator>=</operator> <call><name>Dart_NewWeakPersistentHandle</name><argument_list>(<argument><expr><name>jqinst</name></expr></argument>, <argument><expr><name>qctx</name></expr></argument>, <argument><expr><call><name>jql_estimate_allocated_size</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>qctx</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                                           <argument><expr><name>ejd_jql_finalizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>qctx</name><operator>-&gt;</operator><name>wph</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_INVALID_STATE</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>jqinst</name></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>||</operator> <call><name>Dart_IsError</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>q</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>rc</name> <operator>==</operator> <name>JQL_ERROR_QUERY_PARSE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ejd_error_rc_create2</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>jql_error</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ejd_error_rc_create</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>q</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>jql_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>qctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>Dart_SetReturnValue</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Dart_ExitScope</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Query execution context</comment>
<comment type="line">// Contains a state to manage resultset backpressure</comment>
<typedef>typedef <type><struct>struct <name>QCTX</name> <block>{
  <decl_stmt><decl><type><name>bool</name></type>      <name>aggregate_count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>      <name>explain</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>      <name>paused</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>       <name>pending_count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_Port</name></type> <name>reply_port</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQL</name></type>       <name>q</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB2Context</name> <modifier>*</modifier></type><name>dctx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>       <name>limit</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mtx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pthread_cond_t</name></type>  <name>cond</name></decl>;</decl_stmt>
}</block></struct></type> *<name>QCTX</name>;</typedef>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>ejd_exec_pause_guard</name><parameter_list>(<parameter><decl><type><name>QCTX</name></type> <name>qctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qctx</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><name><name>qctx</name><operator>-&gt;</operator><name>paused</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rci</name> <operator>=</operator> <call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qctx</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>qctx</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>qctx</name><operator>-&gt;</operator><name>pending_count</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qctx</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>ejd_exec_visitor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_EJDB_EXEC</name></name> <modifier>*</modifier></type><name>ux</name></decl></parameter>, <parameter><decl><type><name>EJDB_DOC</name></type> <name>doc</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>step</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>QCTX</name></type> <name>qctx</name> <init>= <expr><name><name>ux</name><operator>-&gt;</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejd_exec_pause_guard</name><argument_list>(<argument><expr><name>qctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>xstr</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>doc</name><operator>-&gt;</operator><name>node</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_as_json</name><argument_list>(<argument><expr><name><name>doc</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>jbl_xstr_json_printer</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_as_json</name><argument_list>(<argument><expr><name><name>doc</name><operator>-&gt;</operator><name>raw</name></name></expr></argument>, <argument><expr><name>jbl_xstr_json_printer</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>Dart_CObject</name></type> <name>result</name></decl>, <decl><type ref="prev"/><name>rv1</name></decl>, <decl><type ref="prev"/><name>rv2</name></decl>, <decl><type ref="prev"/><name>rv3</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name><name>rv</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>&amp;</operator><name>rv1</name></expr>, <expr><operator>&amp;</operator><name>rv2</name></expr>, <expr><operator>&amp;</operator><name>rv3</name></expr> }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>Dart_CObject_kArray</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>result</name><operator>.</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>result</name><operator>.</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name></name> <operator>=</operator> <name>rv</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rv1</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>Dart_CObject_kInt64</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rv1</name><operator>.</operator><name>value</name><operator>.</operator><name>as_int64</name></name> <operator>=</operator> <name><name>doc</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rv2</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>Dart_CObject_kString</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rv2</name><operator>.</operator><name>value</name><operator>.</operator><name>as_string</name></name> <operator>=</operator> <call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ux</name><operator>-&gt;</operator><name>log</name></name></expr>)</condition> <block>{<block_content> <comment type="line">// Add explain log to the first record</comment>
    <expr_stmt><expr><name><name>rv3</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>Dart_CObject_kString</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rv3</name><operator>.</operator><name>value</name><operator>.</operator><name>as_string</name></name> <operator>=</operator> <call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name><name>ux</name><operator>-&gt;</operator><name>log</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ux</name><operator>-&gt;</operator><name>log</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>rv3</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>Dart_CObject_kNull</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Dart_PostCObject</name><argument_list>(<argument><expr><name><name>qctx</name><operator>-&gt;</operator><name>reply_port</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>step</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="line">// End of cursor loop</comment>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ejd_exec_port_handler</name><parameter_list>(<parameter><decl><type><name>Dart_Port</name></type> <name>receive_port</name></decl></parameter>, <parameter><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_CObject</name></type> <name>result</name> <init>= <expr><block>{ <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>Dart_CObject_kNull</name></expr> }</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>Dart_CObject_kInt64</name><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_int64</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error2</name><argument_list>(<argument><expr><literal type="string">"Invalid message recieved"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>QCTX</name></type> <name>qctx</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_int64</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>exlog</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB_EXEC</name></type> <name>ux</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB2Context</name> <modifier>*</modifier></type><name>dctx</name> <init>= <expr><name><name>qctx</name><operator>-&gt;</operator><name>dctx</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>qctx</name><operator>-&gt;</operator><name>q</name></name> <operator>||</operator> <operator>!</operator><name>dctx</name> <operator>||</operator> <operator>!</operator><name><name>dctx</name><operator>-&gt;</operator><name>dbh</name></name> <operator>||</operator> <operator>!</operator><name><name>dctx</name><operator>-&gt;</operator><name>dbh</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>qctx</name><operator>-&gt;</operator><name>explain</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>exlog</name> <operator>=</operator> <call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>exlog</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>qctx</name><operator>-&gt;</operator><name>aggregate_count</name></name> <operator>=</operator> <call><name>jql_has_aggregate_count</name><argument_list>(<argument><expr><name><name>qctx</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>ux</name><operator>.</operator><name>q</name></name> <operator>=</operator> <name><name>qctx</name><operator>-&gt;</operator><name>q</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ux</name><operator>.</operator><name>db</name></name> <operator>=</operator> <name><name>dctx</name><operator>-&gt;</operator><name>dbh</name><operator>-&gt;</operator><name>db</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ux</name><operator>.</operator><name>visitor</name></name> <operator>=</operator> <ternary><condition><expr><name><name>qctx</name><operator>-&gt;</operator><name>aggregate_count</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>ejd_exec_visitor</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ux</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <name>qctx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ux</name><operator>.</operator><name>log</name></name> <operator>=</operator> <name>exlog</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ux</name><operator>.</operator><name>limit</name></name> <operator>=</operator> <name><name>qctx</name><operator>-&gt;</operator><name>limit</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_exec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>qctx</name><operator>-&gt;</operator><name>aggregate_count</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>Dart_CObject</name></type> <name>result</name></decl>, <decl><type ref="prev"/><name>rv1</name></decl>, <decl><type ref="prev"/><name>rv2</name></decl>, <decl><type ref="prev"/><name>rv3</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name><name>rv</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>&amp;</operator><name>rv1</name></expr>, <expr><operator>&amp;</operator><name>rv2</name></expr>, <expr><operator>&amp;</operator><name>rv3</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>Dart_CObject_kArray</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>length</name></name> <operator>=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name></name> <operator>=</operator> <name>rv</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rv1</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>Dart_CObject_kInt64</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rv1</name><operator>.</operator><name>value</name><operator>.</operator><name>as_int64</name></name> <operator>=</operator> <name><name>ux</name><operator>.</operator><name>cnt</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rv2</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>Dart_CObject_kNull</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>exlog</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>rv3</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>Dart_CObject_kString</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rv3</name><operator>.</operator><name>value</name><operator>.</operator><name>as_string</name></name> <operator>=</operator> <call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>exlog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>rv3</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>Dart_CObject_kNull</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>Dart_PostCObject</name><argument_list>(<argument><expr><name><name>qctx</name><operator>-&gt;</operator><name>reply_port</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>exlog</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ux</name><operator>.</operator><name>cnt</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>Dart_CObject_kString</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>value</name><operator>.</operator><name>as_string</name></name> <operator>=</operator> <call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>exlog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EJPORT_RC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>qctx</name><operator>-&gt;</operator><name>reply_port</name></name> <operator>!=</operator> <name>ILLEGAL_PORT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>Dart_PostCObject</name><argument_list>(<argument><expr><name><name>qctx</name><operator>-&gt;</operator><name>reply_port</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Last NULL or error(int)</comment>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>exlog</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>exlog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>Dart_CloseNativePort</name><argument_list>(<argument><expr><name>receive_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ejd_exec</name><parameter_list>(<parameter><decl><type><name>Dart_NativeArguments</name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>Dart_EnterScope</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>intptr_t</name></type> <name>qptr</name></decl>, <decl><type ref="prev"/><name>ptr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>explain</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>limit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>QCTX</name></type> <name>qctx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>Dart_Port</name></type> <name>reply_port</name> <init>= <expr><name>ILLEGAL_PORT</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_Port</name></type> <name>exec_port</name> <init>= <expr><name>ILLEGAL_PORT</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_Handle</name></type> <name>ret</name> <init>= <expr><call><name>Dart_Null</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>Dart_Handle</name></type> <name>hself</name> <init>= <expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_GetNativeArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_Handle</name></type> <name>hdb</name> <init>= <expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_GetField</name><argument_list>(<argument><expr><name>hself</name></expr></argument>, <argument><expr><call><name>Dart_NewStringFromCString</name><argument_list>(<argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_Handle</name></type> <name>hport</name> <init>= <expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_GetNativeArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_GetNativeBooleanArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>explain</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_GetNativeIntegerArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>limit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_SendPortGetId</name><argument_list>(<argument><expr><name>hport</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reply_port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_GetNativeInstanceField</name><argument_list>(<argument><expr><name>hdb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>EJDB2Context</name> <modifier>*</modifier></type><name>dctx</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dctx</name> <operator>||</operator> <operator>!</operator><name><name>dctx</name><operator>-&gt;</operator><name>dbh</name></name> <operator>||</operator> <operator>!</operator><name><name>dctx</name><operator>-&gt;</operator><name>dbh</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_INVALID_STATE</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// JQL pointer</comment>
  <expr_stmt><expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_GetNativeInstanceField</name><argument_list>(<argument><expr><name>hself</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>qptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>qptr</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_INVALID_STATE</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// JQL exec port</comment>
  <expr_stmt><expr><name>exec_port</name> <operator>=</operator> <call><name>Dart_NewNativePort</name><argument_list>(<argument><expr><literal type="string">"ejd_exec_port_handler"</literal></expr></argument>, <argument><expr><name>ejd_exec_port_handler</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>exec_port</name> <operator>==</operator> <name>ILLEGAL_PORT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_CREATE_PORT</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>qctx</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>qctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>qctx</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mtx</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>cond</name> <init>= <expr><name>PTHREAD_COND_INITIALIZER</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qctx</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mtx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qctx</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cond</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>qctx</name><operator>-&gt;</operator><name>reply_port</name></name> <operator>=</operator> <name>reply_port</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qctx</name><operator>-&gt;</operator><name>q</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>qptr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qctx</name><operator>-&gt;</operator><name>dctx</name></name> <operator>=</operator> <name>dctx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qctx</name><operator>-&gt;</operator><name>explain</name></name> <operator>=</operator> <name>explain</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qctx</name><operator>-&gt;</operator><name>limit</name></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>

  <comment type="line">// Now post a message to the query executor</comment>
  <decl_stmt><decl><type><name>Dart_CObject</name></type> <name>msg</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>Dart_CObject_kInt64</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>value</name><operator>.</operator><name>as_int64</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name>qctx</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Dart_PostCObject</name><argument_list>(<argument><expr><name>exec_port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_POST_PORT</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>||</operator> <call><name>Dart_IsError</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>qctx</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>qctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>qctx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>exec_port</name> <operator>!=</operator> <name>ILLEGAL_PORT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>Dart_CloseNativePort</name><argument_list>(<argument><expr><name>exec_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ejd_error_rc_create</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>qctx</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>Dart_NewInteger</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>qctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>Dart_SetReturnValue</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Dart_ExitScope</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ejd_exec_check</name><parameter_list>(<parameter><decl><type><name>Dart_NativeArguments</name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>Dart_EnterScope</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>Dart_Handle</name></type> <name>ret</name> <init>= <expr><call><name>Dart_Null</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>Dart_GetNativeArgumentCount</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>terminate</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>hptr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_GetNativeIntegerArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_GetNativeBooleanArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>terminate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>hptr</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>QCTX</name></type> <name>qctx</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>hptr</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>terminate</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>qctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qctx</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>qctx</name><operator>-&gt;</operator><name>pending_count</name></name><operator>--</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>qctx</name><operator>-&gt;</operator><name>paused</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>qctx</name><operator>-&gt;</operator><name>pending_count</name></name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>qctx</name><operator>-&gt;</operator><name>paused</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qctx</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>qctx</name><operator>-&gt;</operator><name>pending_count</name></name> <operator>&gt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>qctx</name><operator>-&gt;</operator><name>paused</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qctx</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qctx</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ejd_error_rc_create</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>Dart_SetReturnValue</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Dart_ExitScope</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ejd_free_str</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ejd_free_json_node</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><name>op</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pool</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ejd_jql_get_limit</name><parameter_list>(<parameter><decl><type><name>Dart_NativeArguments</name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>Dart_EnterScope</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>Dart_Handle</name></type> <name>ret</name> <init>= <expr><call><name>Dart_Null</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>limit</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>intptr_t</name></type> <name>ptr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_Handle</name></type> <name>hself</name> <init>= <expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_GetNativeArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_GetNativeInstanceField</name><argument_list>(<argument><expr><name>hself</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>JQL</name></type> <name>q</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>q</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_INVALID_STATE</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_get_limit</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>Dart_NewInteger</name><argument_list>(<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>||</operator> <call><name>Dart_IsError</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ejd_error_rc_create</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>Dart_SetReturnValue</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Dart_ExitScope</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ejd_jql_set</name><parameter_list>(<parameter><decl><type><name>Dart_NativeArguments</name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// void set(dynamic place, dynamic value) native 'ejd_jql_set';</comment>
  <expr_stmt><expr><call><name>Dart_EnterScope</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>Dart_Handle</name></type> <name>ret</name> <init>= <expr><call><name>Dart_Null</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>intptr_t</name></type> <name>ptr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_Handle</name></type> <name>hself</name> <init>= <expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_GetNativeArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_GetNativeInstanceField</name><argument_list>(<argument><expr><name>hself</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>JQL</name></type> <name>q</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>q</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_INVALID_STATE</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>npl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>svalue</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>spl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_Handle</name></type> <name>hpl</name> <init>= <expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_GetNativeArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_Handle</name></type> <name>hvalue</name> <init>= <expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_GetNativeArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_Handle</name></type> <name>htype</name> <init>= <expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_GetNativeArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>Dart_IsString</name><argument_list>(<argument><expr><name>hpl</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_StringToCString</name><argument_list>(<argument><expr><name>hpl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>spl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_IntegerToInt64</name><argument_list>(<argument><expr><name>hpl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>npl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>Dart_IsInteger</name><argument_list>(<argument><expr><name>htype</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_IntegerToInt64</name><argument_list>(<argument><expr><name>htype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> <comment type="line">// JSON</comment>
    <expr_stmt><expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_StringToCString</name><argument_list>(<argument><expr><name>hvalue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>svalue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>node</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>iwpool_create</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_from_json</name><argument_list>(<argument><expr><name>svalue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_set_json2</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>spl</name></expr></argument>, <argument><expr><name>npl</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>ejd_free_json_node</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content> <comment type="line">// Regexp</comment>
    <expr_stmt><expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_StringToCString</name><argument_list>(<argument><expr><name>hvalue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>svalue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>svalue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_set_regexp2</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>spl</name></expr></argument>, <argument><expr><name>npl</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>ejd_free_str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content> <comment type="line">// All other cases</comment>
    <if_stmt><if>if <condition>(<expr><call><name>Dart_IsString</name><argument_list>(<argument><expr><name>hvalue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_StringToCString</name><argument_list>(<argument><expr><name>hvalue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>svalue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>svalue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>finish</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_set_str2</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>spl</name></expr></argument>, <argument><expr><name>npl</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>ejd_free_str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>finish</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>Dart_IsInteger</name><argument_list>(<argument><expr><name>hvalue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>val</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_IntegerToInt64</name><argument_list>(<argument><expr><name>hvalue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_set_i64</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>spl</name></expr></argument>, <argument><expr><name>npl</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>Dart_IsDouble</name><argument_list>(<argument><expr><name>hvalue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>double</name></type> <name>val</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_DoubleValue</name><argument_list>(<argument><expr><name>hvalue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_set_f64</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>spl</name></expr></argument>, <argument><expr><name>npl</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>Dart_IsBoolean</name><argument_list>(<argument><expr><name>hvalue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>bool</name></type> <name>val</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_BooleanValue</name><argument_list>(<argument><expr><name>hvalue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_set_bool</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>spl</name></expr></argument>, <argument><expr><name>npl</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>Dart_IsNull</name><argument_list>(<argument><expr><name>hvalue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_set_null</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>spl</name></expr></argument>, <argument><expr><name>npl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>||</operator> <call><name>Dart_IsError</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ejd_error_rc_create</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>Dart_SetReturnValue</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Dart_ExitScope</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ejd_explain_rc</name><parameter_list>(<parameter><decl><type><name>Dart_NativeArguments</name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>Dart_EnterScope</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>llv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_GetNativeIntegerArgument</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>llv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>iwlog_ecode_explained</name><argument_list>(<argument><expr><operator>(</operator><name>iwrc</name><operator>)</operator> <name>llv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>Dart_SetReturnValue</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_NewStringFromCString</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>Dart_SetReturnValue</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>Dart_Null</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>Dart_ExitScope</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Dart_NativeFunction</name></type> <name>ejd_resolve_name</name><parameter_list>(
  <parameter><decl><type><name>Dart_Handle</name></type> <name>name</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type>         <name>argc</name></decl></parameter>,
  <parameter><decl><type><name>bool</name>       <modifier>*</modifier></type><name>auto_setup_scope</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Dart_IsString</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name>auto_setup_scope</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>Dart_EnterScope</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cname</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>EJTH</name><argument_list>(<argument><expr><call><name>Dart_StringToCString</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>k_scoped_functions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cname</name></expr></argument>, <argument><expr><name><name>k_scoped_functions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>auto_setup_scope</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>Dart_ExitScope</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name><name>k_scoped_functions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fn</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>Dart_ExitScope</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ejd_port_handler</name><parameter_list>(<parameter><decl><type><name>Dart_Port</name></type> <name>receive_port</name></decl></parameter>, <parameter><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(  <expr><operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>Dart_CObject_kArray</name><operator>)</operator>
     <operator>||</operator> <operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator>
     <operator>||</operator> <operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>Dart_CObject_kSendPort</name><operator>)</operator>
     <operator>||</operator> <operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>Dart_CObject_kString</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error2</name><argument_list>(<argument><expr><literal type="string">"Invalid message recieved"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>Dart_Port</name></type> <name>reply_port</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>value</name><operator>.</operator><name>as_send_port</name><operator>.</operator><name>id</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>value</name><operator>.</operator><name>as_string</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>k_wrapped_functions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>k_wrapped_functions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>k_wrapped_functions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>fn</name><argument_list>(<argument><expr><name>receive_port</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>reply_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>ejdb2_isolate_shared_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>EJDB_OPTS</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name>EJDB2Handle</name> <modifier>*</modifier><modifier>*</modifier></type><name>hptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>k_shared_scope_mtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name><name>opts</name><operator>-&gt;</operator><name>kv</name><operator>.</operator><name>path</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB2Handle</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name>k_head_handle</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>refs</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>hptr</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_open</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>h</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>refs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>k_head_handle</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>k_head_handle</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>k_head_handle</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>k_head_handle</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>hptr</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>k_shared_scope_mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>db</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ejdb_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>ejdb2_isolate_shared_release</name><parameter_list>(<parameter><decl><type><name>EJDB2Handle</name> <modifier>*</modifier><modifier>*</modifier></type><name>hp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>k_shared_scope_mtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>EJDB2Handle</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><operator>*</operator><name>hp</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>hp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>h</name><operator>-&gt;</operator><name>refs</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>k_head_handle</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>k_shared_scope_mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ejd_open_wrapped</name><parameter_list>(<parameter><decl><type><name>Dart_Port</name></type> <name>receive_port</name></decl></parameter>, <parameter><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>Dart_Port</name></type> <name>reply_port</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_CObject</name></type> <name>result</name></decl>, <decl><type ref="prev"/><name>rv1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name><name>rv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>&amp;</operator><name>rv1</name></expr> }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB_OPTS</name></type> <name>opts</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB2Handle</name> <modifier>*</modifier></type><name>dbh</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>Dart_CObject_kArray</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">16</literal> <operator>+</operator> <name>c</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>Dart_CObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>varr</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// opts.kv.path                         // non null</comment>
  <comment type="line">// opts.kv.oflags                       // non null</comment>
  <comment type="line">// opts.kv.wal.enabled                  // non null</comment>
  <comment type="line">// opts.kv.wal.check_crc_on_checkpoint</comment>
  <comment type="line">// opts.kv.wal.checkpoint_buffer_sz</comment>
  <comment type="line">// opts.kv.wal.checkpoint_timeout_sec</comment>
  <comment type="line">// opts.kv.wal.savepoint_timeout_sec</comment>
  <comment type="line">// opts.kv.wal.wal_buffer_sz</comment>
  <comment type="line">// opts.document_buffer_sz</comment>
  <comment type="line">// opts.sort_buffer_sz</comment>
  <comment type="line">// opts.http.enabled</comment>
  <comment type="line">// opts.http.access_token</comment>
  <comment type="line">// opts.http.bind</comment>
  <comment type="line">// opts.http.max_body_size</comment>
  <comment type="line">// opts.http.port</comment>
  <comment type="line">// opts.http.read_anon</comment>

  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>path</name></name> <operator>=</operator> <call><name>cobject_str</name><argument_list>(<argument><expr><name><name>varr</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>oflags</name></name> <operator>=</operator> <call><name>cobject_int</name><argument_list>(<argument><expr><name><name>varr</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>wal</name><operator>.</operator><name>enabled</name></name> <operator>=</operator> <call><name>cobject_bool</name><argument_list>(<argument><expr><name><name>varr</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>wal</name><operator>.</operator><name>check_crc_on_checkpoint</name></name> <operator>=</operator> <call><name>cobject_bool</name><argument_list>(<argument><expr><name><name>varr</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>wal</name><operator>.</operator><name>checkpoint_buffer_sz</name></name> <operator>=</operator> <call><name>cobject_int</name><argument_list>(<argument><expr><name><name>varr</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>wal</name><operator>.</operator><name>checkpoint_timeout_sec</name></name> <operator>=</operator> <call><name>cobject_int</name><argument_list>(<argument><expr><name><name>varr</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>wal</name><operator>.</operator><name>savepoint_timeout_sec</name></name> <operator>=</operator> <call><name>cobject_int</name><argument_list>(<argument><expr><name><name>varr</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>wal</name><operator>.</operator><name>wal_buffer_sz</name></name> <operator>=</operator> <call><name>cobject_int</name><argument_list>(<argument><expr><name><name>varr</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>document_buffer_sz</name></name> <operator>=</operator> <call><name>cobject_int</name><argument_list>(<argument><expr><name><name>varr</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>sort_buffer_sz</name></name> <operator>=</operator> <call><name>cobject_int</name><argument_list>(<argument><expr><name><name>varr</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>enabled</name></name> <operator>=</operator> <call><name>cobject_bool</name><argument_list>(<argument><expr><name><name>varr</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>access_token</name></name> <operator>=</operator> <call><name>cobject_str</name><argument_list>(<argument><expr><name><name>varr</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>bind</name></name> <operator>=</operator> <call><name>cobject_str</name><argument_list>(<argument><expr><name><name>varr</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>max_body_size</name></name> <operator>=</operator> <call><name>cobject_int</name><argument_list>(<argument><expr><name><name>varr</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>port</name></name> <operator>=</operator> <call><name>cobject_int</name><argument_list>(<argument><expr><name><name>varr</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>read_anon</name></name> <operator>=</operator> <call><name>cobject_bool</name><argument_list>(<argument><expr><name><name>varr</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>file_lock_fail_fast</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>no_wal</name></name> <operator>=</operator> <operator>!</operator><name><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>wal</name><operator>.</operator><name>enabled</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>blocking</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>access_token_len</name></name> <operator>=</operator> <ternary><condition><expr><name><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>access_token</name></name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>access_token</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb2_isolate_shared_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>rv1</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>Dart_CObject_kInt64</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rv1</name><operator>.</operator><name>value</name><operator>.</operator><name>as_int64</name></name> <operator>=</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator> <name>dbh</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>Dart_CObject_kArray</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>result</name><operator>.</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>result</name><operator>.</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name></name> <operator>=</operator> <name>rv</name></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>EJPORT_RC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Dart_PostCObject</name><argument_list>(<argument><expr><name>reply_port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ejd_close_wrapped</name><parameter_list>(<parameter><decl><type><name>Dart_Port</name></type> <name>receive_port</name></decl></parameter>, <parameter><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>Dart_Port</name></type> <name>reply_port</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_CObject</name></type> <name>result</name> <init>= <expr><block>{ <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>Dart_CObject_kArray</name></expr> }</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>intptr_t</name></type> <name>ptr</name> <init>= <expr><call><name>cobject_int</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>EJDB2Handle</name> <modifier>*</modifier></type><name>dbh</name> <init>= <expr><operator>(</operator><name>EJDB2Handle</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbh</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb2_isolate_shared_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dbh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>receive_port</name> <operator>!=</operator> <name>ILLEGAL_PORT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>Dart_CloseNativePort</name><argument_list>(<argument><expr><name>receive_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>EJPORT_RC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Dart_PostCObject</name><argument_list>(<argument><expr><name>reply_port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ejd_patch_wrapped</name><parameter_list>(<parameter><decl><type><name>Dart_Port</name></type> <name>receive_port</name></decl></parameter>, <parameter><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>Dart_Port</name></type> <name>reply_port</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_CObject</name></type> <name>result</name> <init>= <expr><block>{ <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>Dart_CObject_kArray</name></expr> }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>Dart_CObject_kArray</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">5</literal> <operator>+</operator> <name>c</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>intptr_t</name></type> <name>ptr</name> <init>= <expr><call><name>cobject_int</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>EJDB2Handle</name> <modifier>*</modifier></type><name>dbh</name> <init>= <expr><operator>(</operator><name>EJDB2Handle</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbh</name> <operator>||</operator> <operator>!</operator><name><name>dbh</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name> <init>= <expr><name><name>dbh</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name> <init>= <expr><call><name>cobject_str</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>patch</name> <init>= <expr><call><name>cobject_str</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>id</name> <init>= <expr><call><name>cobject_int</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>upsert</name> <init>= <expr><call><name>cobject_bool</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>upsert</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_merge_or_put</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_patch</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>EJPORT_RC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Dart_PostCObject</name><argument_list>(<argument><expr><name>reply_port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ejd_put_wrapped</name><parameter_list>(<parameter><decl><type><name>Dart_Port</name></type> <name>receive_port</name></decl></parameter>, <parameter><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>Dart_Port</name></type> <name>reply_port</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_CObject</name></type> <name>result</name></decl>, <decl><type ref="prev"/><name>rv1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name><name>rv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>&amp;</operator><name>rv1</name></expr> }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>Dart_CObject_kArray</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">4</literal> <operator>+</operator> <name>c</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>intptr_t</name></type> <name>ptr</name> <init>= <expr><call><name>cobject_int</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>EJDB2Handle</name> <modifier>*</modifier></type><name>dbh</name> <init>= <expr><operator>(</operator><name>EJDB2Handle</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbh</name> <operator>||</operator> <operator>!</operator><name><name>dbh</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name> <init>= <expr><name><name>dbh</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name> <init>= <expr><call><name>cobject_str</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json</name> <init>= <expr><call><name>cobject_str</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>id</name> <init>= <expr><call><name>cobject_int</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_from_json</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>, <argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_put</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>jbl</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_put_new</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>jbl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>rv1</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>Dart_CObject_kInt64</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rv1</name><operator>.</operator><name>value</name><operator>.</operator><name>as_int64</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>Dart_CObject_kArray</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>result</name><operator>.</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>result</name><operator>.</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name></name> <operator>=</operator> <name>rv</name></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>jbl</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>EJPORT_RC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Dart_PostCObject</name><argument_list>(<argument><expr><name>reply_port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ejd_del_wrapped</name><parameter_list>(<parameter><decl><type><name>Dart_Port</name></type> <name>receive_port</name></decl></parameter>, <parameter><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>Dart_Port</name></type> <name>reply_port</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_CObject</name></type> <name>result</name> <init>= <expr><block>{ <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>Dart_CObject_kArray</name></expr> }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>Dart_CObject_kArray</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">3</literal> <operator>+</operator> <name>c</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>intptr_t</name></type> <name>ptr</name> <init>= <expr><call><name>cobject_int</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>EJDB2Handle</name> <modifier>*</modifier></type><name>dbh</name> <init>= <expr><operator>(</operator><name>EJDB2Handle</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbh</name> <operator>||</operator> <operator>!</operator><name><name>dbh</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name> <init>= <expr><name><name>dbh</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name> <init>= <expr><call><name>cobject_str</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>id</name> <init>= <expr><call><name>cobject_int</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_del</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>EJPORT_RC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Dart_PostCObject</name><argument_list>(<argument><expr><name>reply_port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ejd_rename_wrapped</name><parameter_list>(<parameter><decl><type><name>Dart_Port</name></type> <name>receive_port</name></decl></parameter>, <parameter><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>Dart_Port</name></type> <name>reply_port</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_CObject</name></type> <name>result</name> <init>= <expr><block>{ <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>Dart_CObject_kArray</name></expr> }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>Dart_CObject_kArray</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">3</literal> <operator>+</operator> <name>c</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>intptr_t</name></type> <name>ptr</name> <init>= <expr><call><name>cobject_int</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>EJDB2Handle</name> <modifier>*</modifier></type><name>dbh</name> <init>= <expr><operator>(</operator><name>EJDB2Handle</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbh</name> <operator>||</operator> <operator>!</operator><name><name>dbh</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name> <init>= <expr><name><name>dbh</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oname</name> <init>= <expr><call><name>cobject_str</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nname</name> <init>= <expr><call><name>cobject_str</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_rename_collection</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>oname</name></expr></argument>, <argument><expr><name>nname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>EJPORT_RC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Dart_PostCObject</name><argument_list>(<argument><expr><name>reply_port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ejd_idx_wrapped</name><parameter_list>(<parameter><decl><type><name>Dart_Port</name></type> <name>receive_port</name></decl></parameter>, <parameter><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>Dart_Port</name></type> <name>reply_port</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_CObject</name></type> <name>result</name> <init>= <expr><block>{ <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>Dart_CObject_kArray</name></expr> }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>Dart_CObject_kArray</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">4</literal> <operator>+</operator> <name>c</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>intptr_t</name></type> <name>ptr</name> <init>= <expr><call><name>cobject_int</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>EJDB2Handle</name> <modifier>*</modifier></type><name>dbh</name> <init>= <expr><operator>(</operator><name>EJDB2Handle</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbh</name> <operator>||</operator> <operator>!</operator><name><name>dbh</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name> <init>= <expr><name><name>dbh</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name> <init>= <expr><call><name>cobject_str</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>cobject_str</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>mode</name> <init>= <expr><call><name>cobject_int</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_ensure_index</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>EJPORT_RC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Dart_PostCObject</name><argument_list>(<argument><expr><name>reply_port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ejd_rmi_wrapped</name><parameter_list>(<parameter><decl><type><name>Dart_Port</name></type> <name>receive_port</name></decl></parameter>, <parameter><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>Dart_Port</name></type> <name>reply_port</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_CObject</name></type> <name>result</name> <init>= <expr><block>{ <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>Dart_CObject_kArray</name></expr> }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>Dart_CObject_kArray</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">4</literal> <operator>+</operator> <name>c</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>intptr_t</name></type> <name>ptr</name> <init>= <expr><call><name>cobject_int</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>EJDB2Handle</name> <modifier>*</modifier></type><name>dbh</name> <init>= <expr><operator>(</operator><name>EJDB2Handle</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbh</name> <operator>||</operator> <operator>!</operator><name><name>dbh</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name> <init>= <expr><name><name>dbh</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name> <init>= <expr><call><name>cobject_str</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>cobject_str</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>mode</name> <init>= <expr><call><name>cobject_int</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_remove_index</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>EJPORT_RC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Dart_PostCObject</name><argument_list>(<argument><expr><name>reply_port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ejd_rmc_wrapped</name><parameter_list>(<parameter><decl><type><name>Dart_Port</name></type> <name>receive_port</name></decl></parameter>, <parameter><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>Dart_Port</name></type> <name>reply_port</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_CObject</name></type> <name>result</name> <init>= <expr><block>{ <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>Dart_CObject_kArray</name></expr> }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>Dart_CObject_kArray</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">2</literal> <operator>+</operator> <name>c</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>intptr_t</name></type> <name>ptr</name> <init>= <expr><call><name>cobject_int</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>EJDB2Handle</name> <modifier>*</modifier></type><name>dbh</name> <init>= <expr><operator>(</operator><name>EJDB2Handle</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbh</name> <operator>||</operator> <operator>!</operator><name><name>dbh</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name> <init>= <expr><name><name>dbh</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name> <init>= <expr><call><name>cobject_str</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_remove_collection</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>EJPORT_RC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Dart_PostCObject</name><argument_list>(<argument><expr><name>reply_port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ejd_bkp_wrapped</name><parameter_list>(<parameter><decl><type><name>Dart_Port</name></type> <name>receive_port</name></decl></parameter>, <parameter><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>Dart_Port</name></type> <name>reply_port</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_CObject</name></type> <name>result</name></decl>, <decl><type ref="prev"/><name>rv1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name><name>rv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>&amp;</operator><name>rv1</name></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>ts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>Dart_CObject_kArray</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">2</literal> <operator>+</operator> <name>c</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>intptr_t</name></type> <name>ptr</name> <init>= <expr><call><name>cobject_int</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>EJDB2Handle</name> <modifier>*</modifier></type><name>dbh</name> <init>= <expr><operator>(</operator><name>EJDB2Handle</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbh</name> <operator>||</operator> <operator>!</operator><name><name>dbh</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name> <init>= <expr><name><name>dbh</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name> <init>= <expr><call><name>cobject_str</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_online_backup</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>rv1</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>Dart_CObject_kInt64</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rv1</name><operator>.</operator><name>value</name><operator>.</operator><name>as_int64</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>Dart_CObject_kArray</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>result</name><operator>.</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>result</name><operator>.</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name></name> <operator>=</operator> <name>rv</name></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>EJPORT_RC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Dart_PostCObject</name><argument_list>(<argument><expr><name>reply_port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ejd_info_wrapped</name><parameter_list>(<parameter><decl><type><name>Dart_Port</name></type> <name>receive_port</name></decl></parameter>, <parameter><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>Dart_Port</name></type> <name>reply_port</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_CObject</name></type> <name>result</name></decl>, <decl><type ref="prev"/><name>rv1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name><name>rv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>&amp;</operator><name>rv1</name></expr> }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>Dart_CObject_kArray</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>+</operator> <name>c</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>intptr_t</name></type> <name>ptr</name> <init>= <expr><call><name>cobject_int</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>EJDB2Handle</name> <modifier>*</modifier></type><name>dbh</name> <init>= <expr><operator>(</operator><name>EJDB2Handle</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbh</name> <operator>||</operator> <operator>!</operator><name><name>dbh</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name> <init>= <expr><name><name>dbh</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_get_meta</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>xstr</name> <operator>=</operator> <call><name>iwxstr_new2</name><argument_list>(<argument><expr><call><name>jbl_size</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>xstr</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_as_json</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>, <argument><expr><name>jbl_xstr_json_printer</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>rv1</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>Dart_CObject_kString</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rv1</name><operator>.</operator><name>value</name><operator>.</operator><name>as_string</name></name> <operator>=</operator> <call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>Dart_CObject_kArray</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>result</name><operator>.</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>result</name><operator>.</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name></name> <operator>=</operator> <name>rv</name></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>jbl</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>EJPORT_RC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Dart_PostCObject</name><argument_list>(<argument><expr><name>reply_port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>xstr</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ejd_get_wrapped</name><parameter_list>(<parameter><decl><type><name>Dart_Port</name></type> <name>receive_port</name></decl></parameter>, <parameter><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>Dart_Port</name></type> <name>reply_port</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_CObject</name></type> <name>result</name></decl>, <decl><type ref="prev"/><name>rv1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dart_CObject</name> <modifier>*</modifier></type><name><name>rv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>&amp;</operator><name>rv1</name></expr> }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>Dart_CObject_kArray</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">3</literal> <operator>+</operator> <name>c</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>intptr_t</name></type> <name>ptr</name> <init>= <expr><call><name>cobject_int</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>EJDB2Handle</name> <modifier>*</modifier></type><name>dbh</name> <init>= <expr><operator>(</operator><name>EJDB2Handle</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbh</name> <operator>||</operator> <operator>!</operator><name><name>dbh</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EJD_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name> <init>= <expr><name><name>dbh</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name> <init>= <expr><call><name>cobject_str</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>id</name> <init>= <expr><call><name>cobject_int</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_get</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>xstr</name> <operator>=</operator> <call><name>iwxstr_new2</name><argument_list>(<argument><expr><call><name>jbl_size</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>xstr</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_as_json</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>, <argument><expr><name>jbl_xstr_json_printer</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>rv1</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>Dart_CObject_kString</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rv1</name><operator>.</operator><name>value</name><operator>.</operator><name>as_string</name></name> <operator>=</operator> <call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>Dart_CObject_kArray</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>result</name><operator>.</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>result</name><operator>.</operator><name>value</name><operator>.</operator><name>as_array</name><operator>.</operator><name>values</name></name> <operator>=</operator> <name>rv</name></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>jbl</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>EJPORT_RC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Dart_PostCObject</name><argument_list>(<argument><expr><name>reply_port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>xstr</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line" format="doxygen">///////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">//</comment>
<comment type="line" format="doxygen">///////////////////////////////////////////////////////////////////////////</comment>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ejd_ecodefn</name><parameter_list>(<parameter><decl><type><name>locale_t</name></type> <name>locale</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ecode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>ecode</name> <operator>&gt;</operator> <name>_EJD_ERROR_START</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ecode</name> <operator>&lt;</operator> <name>_EJD_ERROR_END</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <switch>switch <condition>(<expr><name>ecode</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>EJD_ERROR_CREATE_PORT</name></expr>:</case>
      <return>return <expr><literal type="string">"Failed to create a Dart port (EJD_ERROR_CREATE_PORT)"</literal></expr>;</return>
    <case>case <expr><name>EJD_ERROR_INVALID_NATIVE_CALL_ARGS</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid native function call args (EJD_ERROR_INVALID_NATIVE_CALL_ARGS)"</literal></expr>;</return>
    <case>case <expr><name>EJD_ERROR_INVALID_STATE</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid native extension state (EJD_ERROR_INVALID_STATE)"</literal></expr>;</return>
    <case>case <expr><name>EJD_ERROR_POST_PORT</name></expr>:</case>
      <return>return <expr><literal type="string">"Failed to post message to Dart port (EJD_ERROR_POST_PORT)"</literal></expr>;</return>
  </block_content>}</block></switch>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>DART_EXPORT</name> <name>Dart_Handle</name></type> <name>ejdb2dart_Init</name><parameter_list>(<parameter><decl><type><name>Dart_Handle</name></type> <name>parent_library</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>ejd_ecodefn_initialized</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ejd_ecodefn_initialized</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>ejdb_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>ejd_error_rc_create</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>iwlog_register_ecodefn</name><argument_list>(<argument><expr><name>ejd_ecodefn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>Dart_IsError</name><argument_list>(<argument><expr><name>parent_library</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>parent_library</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>Dart_Handle</name></type> <name>dh</name> <init>= <expr><call><name>Dart_SetNativeResolver</name><argument_list>(<argument><expr><name>parent_library</name></expr></argument>, <argument><expr><name>ejd_resolve_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>Dart_IsError</name><argument_list>(<argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>dh</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>Dart_Null</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ejd_ctx_finalizer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>isolate_callback_data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>peer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>EJDB2Context</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>peer</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>dbh</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>ejdb2_isolate_shared_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>dbh</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>wph</name></name> <operator>&amp;&amp;</operator> <call><name>Dart_CurrentIsolateGroup</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>Dart_DeleteWeakPersistentHandle</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>wph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
