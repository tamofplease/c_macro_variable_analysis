<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/src/jql/tests/jql_test1.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jqp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ejdb2_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ejdb2/iowow/iwxstr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ejdb2/iowow/iwutils.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CUnit/Basic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>init_suite</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>ejdb_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clean_suite</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_jql_test1_1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>iwrc</name></type> <name>expected</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%03d.jql\n"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>path_expected</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>edata</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_PTR_NOT_NULL_FATAL</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"data%c%03d.jql"</literal></expr></argument>, <argument><expr><name>IW_PATH_CHR</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path_expected</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path_expected</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"data%c%03d.expected.jql"</literal></expr></argument>, <argument><expr><name>IW_PATH_CHR</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>iwu_file_read_as_buf</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_PTR_NOT_NULL_FATAL</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jqp_aux_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aux</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jqp_parse</name><argument_list>(<argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>expected</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT_PTR_NOT_NULL_FATAL</name><argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>edata</name> <operator>=</operator> <call><name>iwu_file_read_as_buf</name><argument_list>(<argument><expr><name>path_expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_PTR_NOT_NULL_FATAL</name><argument_list>(<argument><expr><name>edata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jqp_print_query</name><argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>query</name></name></expr></argument>, <argument><expr><name>jbl_xstr_json_printer</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// fprintf(stderr, "%s\n", iwxstr_ptr(res));</comment>
  <comment type="line">// fprintf(stderr, "%s\n", path_expected);</comment>
  <comment type="line">// fprintf(stderr, "%s\n", edata);</comment>

  <comment type="line">//  fprintf(stderr, "%d\n", strcmp(edata, iwxstr_ptr(res)));</comment>
  <comment type="line">//  FILE *out = fopen("out.txt", "w+");</comment>
  <comment type="line">//  fprintf(out, "%s", iwxstr_ptr(res));</comment>
  <comment type="line">//  fclose(out);</comment>

  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>edata</name></expr></argument>, <argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>edata</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>edata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>jqp_aux_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jql_test1_1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>_jql_test1_1</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>_jql_test1_1</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">13</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>_jql_test1_1</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">22</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>_jql_test1_1</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_jql_test1_2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>jsondata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>match</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQL</name></type> <name>jql</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>json</name> <init>= <expr><call><name>iwu_replace_char</name><argument_list>(<argument><expr><call><name>strdup</name><argument_list>(<argument><expr><name>jsondata</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_PTR_NOT_NULL_FATAL</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jql_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jql</name></expr></argument>, <argument><expr><literal type="string">"c1"</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_from_json</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>, <argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>m</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_matched</name><argument_list>(<argument><expr><name>jql</name></expr></argument>, <argument><expr><name>jbl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>jql_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jql_test1_2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{}"</literal></expr></argument>, <argument><expr><literal type="string">"/*"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{}"</literal></expr></argument>, <argument><expr><literal type="string">"/**"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/*"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/**"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/foo/bar"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/foo/baz"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/foo/bar and /foo/bar or /foo"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/foo/baz or /foo"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/foo/baz and (/foo/daz or /foo/bar)"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"(/boo or /foo) and (/foo/daz or /foo/bar)"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22, 'bar2':'vvv2'}}"</literal></expr></argument>, <argument><expr><literal type="string">"/foo/bar2"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/foo/[bar = 22]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/foo/[bar eq 22]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/foo/[bar !eq 22]"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/foo/[bar != 22]"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/foo/[bar &gt;= 22]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/*/[bar &gt;= 22]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/foo/[bar &gt; 21]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/foo/[bar &gt; 22]"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/foo/[bar &lt; 23]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/foo/[bar &lt;= 22]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/foo/[bar &lt; 22]"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/*/[bar &lt; 22]"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/*/[bar &gt; 20 and bar &lt;= 23]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/*/[bar &gt; 22 and bar &lt;= 23]"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/*/[bar &gt; 23 or bar &lt; 23]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/*/[bar &lt; 23 or bar &gt; 23]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/foo/[[* = bar] = 22]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/foo/[[* = bar] != 23]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/[* = foo]/[[* = bar] != 23]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/[* != foo]/[[* = bar] != 23]"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// regexp</comment>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/[* re \"foo\"]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/[* re fo]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/[* re ^foo$]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/[* re ^fo$]"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/[* not re ^fo$]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/foo/[bar re 22]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/foo/[bar re \"2+\"]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// in</comment>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/foo/[bar in [21, \"22\"]]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/foo/[bar in [21, 23]]"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/[* in [\"foo\"]]/[bar in [21, 22]]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/[* not in [\"foo\"]]/[bar in [21, 22]]"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Array element</comment>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'tags':['bar', 'foo']}"</literal></expr></argument>, <argument><expr><literal type="string">"/tags/[** in [\"bar\", \"baz\"]]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'tags':['bar', 'foo']}"</literal></expr></argument>, <argument><expr><literal type="string">"/tags/[** in [\"zaz\", \"gaz\"]]"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// /**</comment>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/**"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/**/bar"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/**/baz"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/**/**/bar"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22, 'baz':{'zaz':33}}}"</literal></expr></argument>, <argument><expr><literal type="string">"/foo/**/zaz"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22, 'baz':{'zaz':33}}}"</literal></expr></argument>, <argument><expr><literal type="string">"/foo/**/[zaz &gt; 30]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'bar':22, 'baz':{'zaz':33}}}"</literal></expr></argument>, <argument><expr><literal type="string">"/foo/**/[zaz &lt; 30]"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// arr/obj</comment>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':[1,2]}"</literal></expr></argument>, <argument><expr><literal type="string">"/[foo = [1,2]]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':[1,2]}"</literal></expr></argument>, <argument><expr><literal type="string">"/[foo ni 2]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':[1,2]}"</literal></expr></argument>, <argument><expr><literal type="string">"/[foo in [[1,2]]]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'arr':[1,2,3,4]}}"</literal></expr></argument>, <argument><expr><literal type="string">"/foo/[arr = [1,2,3,4]]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'arr':[1,2,3,4]}}"</literal></expr></argument>, <argument><expr><literal type="string">"/foo/**/[arr = [1,2,3,4]]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'arr':[1,2,3,4]}}"</literal></expr></argument>, <argument><expr><literal type="string">"/foo/*/[arr = [1,2,3,4]]"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'arr':[1,2,3,4]}}"</literal></expr></argument>, <argument><expr><literal type="string">"/foo/[arr = [1,2,3]]"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'arr':[1,2,3,4]}}"</literal></expr></argument>, <argument><expr><literal type="string">"/foo/[arr = [1,12,3,4]]"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'obj':{'f':'d','e':'j'}}}"</literal></expr></argument>, <argument><expr><literal type="string">"/foo/[obj = {\"e\":\"j\",\"f\":\"d\"}]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'foo':{'obj':{'f':'d','e':'j'}}}"</literal></expr></argument>, <argument><expr><literal type="string">"/foo/[obj = {\"e\":\"j\",\"f\":\"dd\"}]"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'f':22}"</literal></expr></argument>, <argument><expr><literal type="string">"/f"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'a':'bar'}"</literal></expr></argument>, <argument><expr><literal type="string">"/f | asc /f"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// PK</comment>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'f':22}"</literal></expr></argument>, <argument><expr><literal type="string">"/=22"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><literal type="string">"{'f':22}"</literal></expr></argument>, <argument><expr><literal type="string">"@mycoll/=22"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">//</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>doc</name>
    <init>= <expr><literal type="string">"{"</literal>
      <literal type="string">" 'foo':{"</literal>
      <literal type="string">"   'bar': {'baz':{'zaz':33}},"</literal>
      <literal type="string">"   'sas': {'gaz':{'zaz':44, 'zarr':[42]}},"</literal>
      <literal type="string">"   'arr': [1,2,3,4]"</literal>
      <literal type="string">" }"</literal>
      <literal type="string">"}"</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><literal type="string">"/foo/sas/gaz/zaz"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><literal type="string">"/foo/sas/gaz/[zaz = 44]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><literal type="string">"/**/[zaz = 44]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><literal type="string">"/foo/**/[zaz = 44]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><literal type="string">"/foo/*/*/[zaz = 44]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><literal type="string">"/foo/[arr ni 3]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><literal type="string">"/**/[zarr ni 42]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_2</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><literal type="string">"/**/[[* in [\"zarr\"]] in [[42]]]"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_jql_test1_3</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>has_apply_or_project</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>jsondata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>eq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQL</name></type> <name>jql</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>eqn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>iwpool_create</name><argument_list>(<argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>json</name> <init>= <expr><call><name>iwu_replace_char</name><argument_list>(<argument><expr><call><name>strdup</name><argument_list>(<argument><expr><name>jsondata</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_PTR_NOT_NULL_FATAL</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eqjson</name> <init>= <expr><call><name>iwu_replace_char</name><argument_list>(<argument><expr><call><name>strdup</name><argument_list>(<argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_PTR_NOT_NULL_FATAL</name><argument_list>(<argument><expr><name>eqjson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>qstr</name> <init>= <expr><call><name>iwu_replace_char</name><argument_list>(<argument><expr><call><name>strdup</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_PTR_NOT_NULL_FATAL</name><argument_list>(<argument><expr><name>qstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jql_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jql</name></expr></argument>, <argument><expr><literal type="string">"c1"</literal></expr></argument>, <argument><expr><name>qstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_from_json</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>, <argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>m</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_matched</name><argument_list>(<argument><expr><name>jql</name></expr></argument>, <argument><expr><name>jbl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>hapl</name> <init>= <expr><call><name>jql_has_apply</name><argument_list>(<argument><expr><name>jql</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>jql_has_projection</name><argument_list>(<argument><expr><name>jql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>hapl</name></expr></argument>, <argument><expr><name>has_apply_or_project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hapl</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT_PTR_NOT_NULL_FATAL</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_apply_and_project</name><argument_list>(<argument><expr><name>jql</name></expr></argument>, <argument><expr><name>jbl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_PTR_NOT_NULL_FATAL</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_from_json</name><argument_list>(<argument><expr><name>eqjson</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eqn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>jbn_compare_nodes</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>eqn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>cmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>jql_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>eqjson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>qstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jql_test1_3</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>_jql_test1_3</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>,
               <argument><expr><literal type="string">"/foo/bar | apply [{'op':'add', 'path':'/baz', 'value':'qux'}]"</literal></expr></argument>,
               <argument><expr><literal type="string">"{'foo':{'bar':22},'baz':'qux'}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>_jql_test1_3</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>,
               <argument><expr><literal type="string">"/foo/bar | apply {'baz':'qux'}"</literal></expr></argument>,
               <argument><expr><literal type="string">"{'foo':{'bar':22},'baz':'qux'}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Test projections</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>jql_test_1_4</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>_jql_test1_3</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/** | all"</literal></expr></argument>, <argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_3</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/** | all+all + all"</literal></expr></argument>, <argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_3</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/** | all - all"</literal></expr></argument>, <argument><expr><literal type="string">"{}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_3</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/** | all-all +all"</literal></expr></argument>, <argument><expr><literal type="string">"{}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_3</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/** | /foo/bar"</literal></expr></argument>, <argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_3</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"{'foo':{'bar':22, 'baz':'gaz'}}"</literal></expr></argument>, <argument><expr><literal type="string">"/** | /foo/bar"</literal></expr></argument>, <argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_3</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"{'foo':{'bar':22, 'baz':'gaz'}}"</literal></expr></argument>, <argument><expr><literal type="string">"/** | /foo/{daz,bar}"</literal></expr></argument>, <argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_3</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"{'foo':{'bar':22, 'baz':{'gaz':444, 'zaz':555}}}"</literal></expr></argument>, <argument><expr><literal type="string">"/** | /foo/bar + /foo/baz/zaz"</literal></expr></argument>,
               <argument><expr><literal type="string">"{'foo':{'bar':22, 'baz':{'zaz':555}}}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_3</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"{'foo':{'bar':22, 'baz':{'gaz':444, 'zaz':555}}}"</literal></expr></argument>, <argument><expr><literal type="string">"/** | /foo/bar + /foo/baz/zaz - /*/bar"</literal></expr></argument>,
               <argument><expr><literal type="string">"{'foo':{'baz':{'zaz':555}}}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_3</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"{'foo':{'bar':22, 'baz':{'gaz':444, 'zaz':555}}}"</literal></expr></argument>, <argument><expr><literal type="string">"/** | all + /foo/bar + /foo/baz/zaz - /*/bar"</literal></expr></argument>,
               <argument><expr><literal type="string">"{'foo':{'baz':{'zaz':555}}}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_3</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/** | /zzz"</literal></expr></argument>, <argument><expr><literal type="string">"{}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_3</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>, <argument><expr><literal type="string">"/** | /fooo"</literal></expr></argument>, <argument><expr><literal type="string">"{}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jql_test1_3</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"{'foo':{'bar':22},'name':'test'}"</literal></expr></argument>, <argument><expr><literal type="string">"/** | all - /name"</literal></expr></argument>, <argument><expr><literal type="string">"{'foo':{'bar':22}}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Test placeholder projecttion</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>jql_test_1_5</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQL</name></type> <name>q</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>iwpool_create_empty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_PTR_NOT_NULL_FATAL</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jql_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><literal type="string">"c1"</literal></expr></argument>, <argument><expr><literal type="string">"/* | /:name+/:?"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_set_i64</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>JQL_ERROR_INVALID_PLACEHOLDER_VALUE_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_set_str</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_set_str</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"baz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_from_json</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>, <argument><expr><literal type="string">"{\"foo\":1,\"bar\":2,\"baz\":3}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>m</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_matched</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>jbl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_TRUE</name><argument_list>(<argument><expr><name>m</name> <operator>&amp;&amp;</operator> <call><name>jql_has_projection</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_apply_and_project</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>jbl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>jbn_as_json</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>jbl_xstr_json_printer</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_STRING_EQUAL</name><argument_list>(<argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{\"foo\":1,\"baz\":3}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>jql_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>CU_pSuite</name></type> <name>pSuite</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>CUE_SUCCESS</name> <operator>!=</operator> <call><name>CU_initialize_registry</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>pSuite</name> <operator>=</operator> <call><name>CU_add_suite</name><argument_list>(<argument><expr><literal type="string">"jql_test1"</literal></expr></argument>, <argument><expr><name>init_suite</name></expr></argument>, <argument><expr><name>clean_suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pSuite</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CU_cleanup_registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(  <expr><operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>CU_add_test</name><argument_list>(<argument><expr><name>pSuite</name></expr></argument>, <argument><expr><literal type="string">"jql_test1_1"</literal></expr></argument>, <argument><expr><name>jql_test1_1</name></expr></argument>)</argument_list></call><operator>)</operator>
     <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>CU_add_test</name><argument_list>(<argument><expr><name>pSuite</name></expr></argument>, <argument><expr><literal type="string">"jql_test1_2"</literal></expr></argument>, <argument><expr><name>jql_test1_2</name></expr></argument>)</argument_list></call><operator>)</operator>
     <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>CU_add_test</name><argument_list>(<argument><expr><name>pSuite</name></expr></argument>, <argument><expr><literal type="string">"jql_test1_3"</literal></expr></argument>, <argument><expr><name>jql_test1_3</name></expr></argument>)</argument_list></call><operator>)</operator>
     <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>CU_add_test</name><argument_list>(<argument><expr><name>pSuite</name></expr></argument>, <argument><expr><literal type="string">"jql_test1_4"</literal></expr></argument>, <argument><expr><name>jql_test_1_4</name></expr></argument>)</argument_list></call><operator>)</operator>
     <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>CU_add_test</name><argument_list>(<argument><expr><name>pSuite</name></expr></argument>, <argument><expr><literal type="string">"jql_test1_5"</literal></expr></argument>, <argument><expr><name>jql_test_1_5</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CU_cleanup_registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>CU_basic_set_mode</name><argument_list>(<argument><expr><name>CU_BRM_VERBOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_basic_run_tests</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>CU_get_number_of_failures</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CU_cleanup_registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
