<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/src/jql/jql.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ejdb2_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jql_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jqp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwre.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IWRE_UNUSED_PTR</name></cpp:macro> <cpp:value>((void*) (intptr_t) -1)</cpp:value></cpp:define>

<comment type="block" format="doxygen">/** Query matching context */</comment>
<typedef>typedef <type><struct>struct <name>MCTX</name> <block>{
  <decl_stmt><decl><type><name>int</name></type>   <name>lvl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>binn</name> <modifier>*</modifier></type><name>bv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>  <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JQL</name></name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQP_AUX</name>     <modifier>*</modifier></type><name>aux</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL_VCTX</name>    <modifier>*</modifier></type><name>vctx</name></decl>;</decl_stmt>
}</block></struct></type> <name>MCTX</name>;</typedef>

<comment type="block" format="doxygen">/** Expression node matching context */</comment>
<typedef>typedef <type><struct>struct <name>MENCTX</name> <block>{
  <decl_stmt><decl><type><name>bool</name></type> <name>matched</name></decl>;</decl_stmt>
}</block></struct></type> <name>MENCTX</name>;</typedef>

<comment type="block" format="doxygen">/** Filter matching context */</comment>
<typedef>typedef <type><struct>struct <name>MFCTX</name> <block>{
  <decl_stmt><decl><type><name>bool</name></type>      <name>matched</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>       <name>last_lvl</name></decl>;</decl_stmt>     <comment type="block" format="doxygen">/**&lt; Last matched level */</comment>
  <decl_stmt><decl><type><name>JQP_NODE</name> <modifier>*</modifier></type><name>nodes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQP_NODE</name> <modifier>*</modifier></type><name>last_node</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQP_FILTER</name> <modifier>*</modifier></type><name>qpf</name></decl>;</decl_stmt>
}</block></struct></type> <name>MFCTX</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>JQP_NODE</name><modifier>*</modifier></type> <name>_jql_match_node</name><parameter_list>(<parameter><decl><type><name>MCTX</name> <modifier>*</modifier></type><name>mctx</name></decl></parameter>, <parameter><decl><type><name>JQP_NODE</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>_jql_jqval_destroy</name><parameter_list>(<parameter><decl><type><name>JQP_STRING</name> <modifier>*</modifier></type><name>pv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>qv</name> <init>= <expr><name><name>pv</name><operator>-&gt;</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>qv</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name><name>qv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>JQVAL_STR</name></expr>:</case>
        <expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>qv</name><operator>-&gt;</operator><name>vstr</name></name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>JQVAL_RE</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name><name>qv</name><operator>-&gt;</operator><name>vre</name></name> <operator>!=</operator> <name>IWRE_UNUSED_PTR</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <call><name>iwre_pattern_get</name><argument_list>(<argument><expr><name><name>qv</name><operator>-&gt;</operator><name>vre</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>iwre_destroy</name><argument_list>(<argument><expr><name><name>qv</name><operator>-&gt;</operator><name>vre</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
      <case>case <expr><name>JQVAL_JBLNODE</name></expr>:</case>
        <expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>qv</name><operator>-&gt;</operator><name>vnode</name></name></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
    <if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>qv</name><operator>-&gt;</operator><name>refs</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <name><name>qv</name><operator>-&gt;</operator><name>freefn</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>qv</name><operator>-&gt;</operator><name>freefn</name></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>qv</name><operator>-&gt;</operator><name>freefn_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>qv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pv</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JQVAL</name><modifier>*</modifier></type> <name>_jql_find_placeholder</name><parameter_list>(<parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>JQP_STRING</name> <modifier>*</modifier></type><name>pv</name> <init>= <expr><name><name>aux</name><operator>-&gt;</operator><name>start_placeholder</name></name></expr></init></decl>;</init> <condition><expr><name>pv</name></expr>;</condition> <incr><expr><name>pv</name> <operator>=</operator> <name><name>pv</name><operator>-&gt;</operator><name>placeholder_next</name></name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name><name>pv</name><operator>-&gt;</operator><name>opaque</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>JQVAL</name><modifier>*</modifier></type> <name>jql_find_placeholder</name><parameter_list>(<parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_jql_find_placeholder</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jql_set_placeholder</name><parameter_list>(<parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>placeholder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><name>JQL_ERROR_INVALID_PLACEHOLDER</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>placeholder</name></expr>)</condition> <block>{<block_content> <comment type="line">// Index</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>nbuf</name><index>[<expr><name>IWNUMBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>iwitoa</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>, <argument><expr><name>IWNUMBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>JQP_STRING</name> <modifier>*</modifier></type><name>pv</name> <init>= <expr><name><name>aux</name><operator>-&gt;</operator><name>start_placeholder</name></name></expr></init></decl>;</init> <condition><expr><name>pv</name></expr>;</condition> <incr><expr><name>pv</name> <operator>=</operator> <name><name>pv</name><operator>-&gt;</operator><name>placeholder_next</name></name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pv</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pv</name><operator>-&gt;</operator><name>value</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pv</name><operator>-&gt;</operator><name>flavour</name></name> <operator>&amp;</operator> <operator>(</operator><name>JQP_STR_PROJFIELD</name> <operator>|</operator> <name>JQP_STR_PROJPATH</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>val</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JQVAL_STR</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>JQL_ERROR_INVALID_PLACEHOLDER_VALUE_TYPE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>_jql_jqval_destroy</name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pv</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>refs</name></name><operator>++</operator></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <for>for <control>(<init><decl><type><name>JQP_STRING</name> <modifier>*</modifier></type><name>pv</name> <init>= <expr><name><name>aux</name><operator>-&gt;</operator><name>start_placeholder</name></name></expr></init></decl>;</init> <condition><expr><name>pv</name></expr>;</condition> <incr><expr><name>pv</name> <operator>=</operator> <name><name>pv</name><operator>-&gt;</operator><name>placeholder_next</name></name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>placeholder</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pv</name><operator>-&gt;</operator><name>flavour</name></name> <operator>&amp;</operator> <operator>(</operator><name>JQP_STR_PROJFIELD</name> <operator>|</operator> <name>JQP_STR_PROJPATH</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>val</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JQVAL_STR</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JQL_ERROR_INVALID_PLACEHOLDER_VALUE_TYPE</name></expr>;</expr_stmt>
          <goto>goto <name>finish</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>_jql_jqval_destroy</name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pv</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>refs</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>refs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>JQP_STRING</name> <modifier>*</modifier></type><name>pv</name> <init>= <expr><name><name>aux</name><operator>-&gt;</operator><name>start_placeholder</name></name></expr></init></decl>;</init> <condition><expr><name>pv</name></expr>;</condition> <incr><expr><name>pv</name> <operator>=</operator> <name><name>pv</name><operator>-&gt;</operator><name>placeholder_next</name></name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pv</name><operator>-&gt;</operator><name>opaque</name></name> <operator>==</operator> <name>val</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pv</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jql_set_json2</name><parameter_list>(
  <parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>placeholder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>val</name></decl></parameter>,
  <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>freefn</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>qv</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>qv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>qv</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>refs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>freefn</name></name> <operator>=</operator> <name>freefn</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>freefn_op</name></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_JBLNODE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>vnode</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_jql_set_placeholder</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>placeholder</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>qv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>freefn</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>freefn</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>qv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jql_set_json</name><parameter_list>(<parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>placeholder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>jql_set_json2</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>placeholder</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_jql_free_iwpool</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><operator>(</operator><name>IWPOOL</name><operator>*</operator><operator>)</operator> <name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jql_set_json_jbl</name><parameter_list>(<parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>placeholder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>iwpool_create</name><argument_list>(<argument><expr><call><name>jbl_size</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>n</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_to_node</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_set_json2</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>placeholder</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>_jql_free_iwpool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jql_set_i64</name><parameter_list>(<parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>placeholder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>qv</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>qv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>qv</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>refs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>freefn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>freefn_op</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_I64</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>vi64</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_jql_set_placeholder</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>placeholder</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>qv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>qv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jql_set_f64</name><parameter_list>(<parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>placeholder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>qv</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>qv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>qv</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>refs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>freefn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>freefn_op</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_F64</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>vf64</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_jql_set_placeholder</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>placeholder</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>qv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>qv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jql_set_str2</name><parameter_list>(
  <parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>placeholder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>,
  <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>freefn</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>freefn</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>freefn</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>val</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>jql_set_null</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>placeholder</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>qv</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>qv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>qv</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>refs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>freefn</name></name> <operator>=</operator> <name>freefn</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>freefn_op</name></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_STR</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>vstr</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_jql_set_placeholder</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>placeholder</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>qv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>freefn</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>freefn</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>val</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>qv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jql_set_str</name><parameter_list>(<parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>placeholder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>jql_set_str2</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>placeholder</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_freefn_str</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jql_set_str3</name><parameter_list>(<parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>placeholder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val_</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>val_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>strndup</name><argument_list>(<argument><expr><name>val_</name></expr></argument>, <argument><expr><name>val_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>jql_set_str2</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>placeholder</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>_freefn_str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jql_set_bool</name><parameter_list>(<parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>placeholder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>qv</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>qv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>qv</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>refs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>freefn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>freefn_op</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_BOOL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>vbool</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_jql_set_placeholder</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>placeholder</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>qv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>qv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jql_set_regexp2</name><parameter_list>(
  <parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>placeholder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>,
  <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>freefn</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>qv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwre</name></name> <modifier>*</modifier></type><name>rx</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>expr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>expr</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>iwre_create</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>IWRE_UNUSED_PTR</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rx</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JQL_ERROR_REGEXP_INVALID</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name>qv</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>qv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>refs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rx</name> <operator>!=</operator> <name>IWRE_UNUSED_PTR</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>freefn</name></name> <operator>=</operator> <name>freefn</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>freefn_op</name></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_RE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>vre</name></name> <operator>=</operator> <name>rx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jql_set_placeholder</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>placeholder</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>qv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>freefn</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>freefn</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>expr</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>rx</name> <operator>!=</operator> <name>IWRE_UNUSED_PTR</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwre_destroy</name><argument_list>(<argument><expr><name>rx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>qv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rx</name> <operator>==</operator> <name>IWRE_UNUSED_PTR</name> <operator>&amp;&amp;</operator> <name>freefn</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>freefn</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>expr</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jql_set_regexp</name><parameter_list>(<parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>placeholder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>jql_set_regexp2</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>placeholder</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jql_set_null</name><parameter_list>(<parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>placeholder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>qv</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>qv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>qv</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>refs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>freefn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>freefn_op</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_NULL</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_jql_set_placeholder</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>placeholder</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>qv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>qv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_jql_need_deeper_match</name><parameter_list>(<parameter><decl><type><name>JQP_EXPR_NODE</name> <modifier>*</modifier></type><name>en</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lvl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><expr><name>en</name> <operator>=</operator> <name><name>en</name><operator>-&gt;</operator><name>chain</name></name></expr>;</init> <condition><expr><name>en</name></expr>;</condition> <incr><expr><name>en</name> <operator>=</operator> <name><name>en</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>en</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_EXPR_NODE_TYPE</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>_jql_need_deeper_match</name><argument_list>(<argument><expr><name>en</name></expr></argument>, <argument><expr><name>lvl</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>en</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_FILTER_TYPE</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>MFCTX</name> <modifier>*</modifier></type><name>fctx</name> <init>= <expr><operator>(</operator><operator>(</operator><name>JQP_FILTER</name><operator>*</operator><operator>)</operator> <name>en</name><operator>)</operator><operator>-&gt;</operator><name>opaque</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fctx</name><operator>-&gt;</operator><name>matched</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fctx</name><operator>-&gt;</operator><name>last_lvl</name></name> <operator>==</operator> <name>lvl</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_jql_reset_expression_node</name><parameter_list>(<parameter><decl><type><name>JQP_EXPR_NODE</name> <modifier>*</modifier></type><name>en</name></decl></parameter>, <parameter><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>reset_match_cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>MENCTX</name> <modifier>*</modifier></type><name>ectx</name> <init>= <expr><name><name>en</name><operator>-&gt;</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ectx</name><operator>-&gt;</operator><name>matched</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>en</name> <operator>=</operator> <name><name>en</name><operator>-&gt;</operator><name>chain</name></name></expr>;</init> <condition><expr><name>en</name></expr>;</condition> <incr><expr><name>en</name> <operator>=</operator> <name><name>en</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>en</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_EXPR_NODE_TYPE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_jql_reset_expression_node</name><argument_list>(<argument><expr><name>en</name></expr></argument>, <argument><expr><name>aux</name></expr></argument>, <argument><expr><name>reset_match_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>en</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_FILTER_TYPE</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>MFCTX</name> <modifier>*</modifier></type><name>fctx</name> <init>= <expr><operator>(</operator><operator>(</operator><name>JQP_FILTER</name><operator>*</operator><operator>)</operator> <name>en</name><operator>)</operator><operator>-&gt;</operator><name>opaque</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>matched</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>last_lvl</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>JQP_NODE</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name><name>fctx</name><operator>-&gt;</operator><name>nodes</name></name></expr></init></decl>;</init> <condition><expr><name>n</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><name><name>n</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>reset_match_cache</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_EXPR_TYPE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
          <for>for <control>(<init><decl><type><name>JQP_EXPR</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><operator>&amp;</operator><name><name>unit</name><operator>-&gt;</operator><name>expr</name></name></expr></init></decl>;</init> <condition><expr><name>expr</name></expr>;</condition> <incr><expr><name>expr</name> <operator>=</operator> <name><name>expr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>expr</name><operator>-&gt;</operator><name>prematched</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jql_init_expression_node</name><parameter_list>(<parameter><decl><type><name>JQP_EXPR_NODE</name> <modifier>*</modifier></type><name>en</name></decl></parameter>, <parameter><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>en</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <call><name>iwpool_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MENCTX</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>aux</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>en</name><operator>-&gt;</operator><name>opaque</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><expr><name>en</name> <operator>=</operator> <name><name>en</name><operator>-&gt;</operator><name>chain</name></name></expr>;</init> <condition><expr><name>en</name></expr>;</condition> <incr><expr><name>en</name> <operator>=</operator> <name><name>en</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>en</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_EXPR_NODE_TYPE</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_jql_init_expression_node</name><argument_list>(<argument><expr><name>en</name></expr></argument>, <argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>en</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_FILTER_TYPE</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>MFCTX</name> <modifier>*</modifier></type><name>fctx</name> <init>= <expr><call><name>iwpool_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fctx</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>aux</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>JQP_FILTER</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><operator>(</operator><name>JQP_FILTER</name><operator>*</operator><operator>)</operator> <name>en</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fctx</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>fctx</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>last_lvl</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>qpf</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>nodes</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>JQP_NODE</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></init></decl>;</init> <condition><expr><name>n</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>last_node</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jql_create2</name><parameter_list>(<parameter><decl><type><name>JQL</name> <modifier>*</modifier></type><name>qptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>jql_create_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>qptr</name> <operator>||</operator> <operator>!</operator><name>query</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>qptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>JQL</name></type> <name>q</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jqp_aux_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aux</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>iwpool_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>q</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>aux</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>q</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>aux</name></name> <operator>=</operator> <name>aux</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jqp_parse</name><argument_list>(<argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>coll</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>coll</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// Get a copy of collection name</comment>
    <expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>coll</name></name> <operator>=</operator> <call><name>iwpool_strdup2</name><argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>coll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>qp</name></name> <operator>=</operator> <name><name>aux</name><operator>-&gt;</operator><name>query</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>coll</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// Try to set collection from first query anchor</comment>
    <expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>coll</name></name> <operator>=</operator> <name><name>aux</name><operator>-&gt;</operator><name>first_anchor</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>coll</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JQL_ERROR_NO_COLLECTION</name></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jql_init_expression_node</name><argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>, <argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(  <expr><operator>(</operator><name>rc</name> <operator>==</operator> <name>JQL_ERROR_QUERY_PARSE</name><operator>)</operator>
       <operator>&amp;&amp;</operator> <operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>JQL_KEEP_QUERY_ON_PARSE_ERROR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>qptr</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>jqp_aux_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>qptr</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jql_create</name><parameter_list>(<parameter><decl><type><name>JQL</name> <modifier>*</modifier></type><name>qptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>jql_create2</name><argument_list>(<argument><expr><name>qptr</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>jql_estimate_allocated_size</name><parameter_list>(<parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>ret</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_JQL</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>aux</name></name> <operator>&amp;&amp;</operator> <name><name>q</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>pool</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>iwpool_allocated_size</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jql_collection</name><parameter_list>(<parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>q</name><operator>-&gt;</operator><name>coll</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jql_reset</name><parameter_list>(<parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>reset_match_cache</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>reset_placeholders</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>matched</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>_jql_reset_expression_node</name><argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>, <argument><expr><name>aux</name></expr></argument>, <argument><expr><name>reset_match_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>reset_placeholders</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>JQP_STRING</name> <modifier>*</modifier></type><name>pv</name> <init>= <expr><name><name>aux</name><operator>-&gt;</operator><name>start_placeholder</name></name></expr></init></decl>;</init> <condition><expr><name>pv</name></expr>;</condition> <incr><expr><name>pv</name> <operator>=</operator> <name><name>pv</name><operator>-&gt;</operator><name>placeholder_next</name></name></expr></incr>)</control> <block>{<block_content> <comment type="line">// Cleanup placeholders</comment>
      <expr_stmt><expr><call><name>_jql_jqval_destroy</name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jql_destroy</name><parameter_list>(<parameter><decl><type><name>JQL</name> <modifier>*</modifier></type><name>qptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>qptr</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JQL</name></type> <name>q</name> <init>= <expr><operator>*</operator><name>qptr</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>q</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>JQP_STRING</name> <modifier>*</modifier></type><name>pv</name> <init>= <expr><name><name>aux</name><operator>-&gt;</operator><name>start_placeholder</name></name></expr></init></decl>;</init> <condition><expr><name>pv</name></expr>;</condition> <incr><expr><name>pv</name> <operator>=</operator> <name><name>pv</name><operator>-&gt;</operator><name>placeholder_next</name></name></expr></incr>)</control> <block>{<block_content> <comment type="line">// Cleanup placeholders</comment>
      <expr_stmt><expr><call><name>_jql_jqval_destroy</name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><decl><type><name>JQP_OP</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><name><name>aux</name><operator>-&gt;</operator><name>start_op</name></name></expr></init></decl>;</init> <condition><expr><name>op</name></expr>;</condition> <incr><expr><name>op</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>opaque</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>JQP_OP_RE</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>opaque</name></name> <operator>!=</operator> <name>IWRE_UNUSED_PTR</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>iwre_destroy</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>jqp_aux_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>qptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>jqval_type_t</name></type> <name>_jql_binn_to_jqval</name><parameter_list>(<parameter><decl><type><name>binn</name> <modifier>*</modifier></type><name>vbinn</name></decl></parameter>, <parameter><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>qval</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name><name>vbinn</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>BINN_OBJECT</name></expr>:</case>
    <case>case <expr><name>BINN_MAP</name></expr>:</case>
    <case>case <expr><name>BINN_LIST</name></expr>:</case>
      <expr_stmt><expr><name><name>qval</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_BINN</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qval</name><operator>-&gt;</operator><name>vbinn</name></name> <operator>=</operator> <name>vbinn</name></expr>;</expr_stmt>
      <return>return <expr><name><name>qval</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>
    <case>case <expr><name>BINN_NULL</name></expr>:</case>
      <expr_stmt><expr><name><name>qval</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_NULL</name></expr>;</expr_stmt>
      <return>return <expr><name><name>qval</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>
    <case>case <expr><name>BINN_STRING</name></expr>:</case>
      <expr_stmt><expr><name><name>qval</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_STR</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qval</name><operator>-&gt;</operator><name>vstr</name></name> <operator>=</operator> <name><name>vbinn</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
      <return>return <expr><name><name>qval</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>
    <case>case <expr><name>BINN_BOOL</name></expr>:</case>
    <case>case <expr><name>BINN_TRUE</name></expr>:</case>
    <case>case <expr><name>BINN_FALSE</name></expr>:</case>
      <expr_stmt><expr><name><name>qval</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_BOOL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qval</name><operator>-&gt;</operator><name>vbool</name></name> <operator>=</operator> <name><name>vbinn</name><operator>-&gt;</operator><name>vbool</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <return>return <expr><name><name>qval</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>
    <case>case <expr><name>BINN_UINT8</name></expr>:</case>
      <expr_stmt><expr><name><name>qval</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_I64</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qval</name><operator>-&gt;</operator><name>vi64</name></name> <operator>=</operator> <name><name>vbinn</name><operator>-&gt;</operator><name>vuint8</name></name></expr>;</expr_stmt>
      <return>return <expr><name><name>qval</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>
    <case>case <expr><name>BINN_UINT16</name></expr>:</case>
      <expr_stmt><expr><name><name>qval</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_I64</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qval</name><operator>-&gt;</operator><name>vi64</name></name> <operator>=</operator> <name><name>vbinn</name><operator>-&gt;</operator><name>vuint16</name></name></expr>;</expr_stmt>
      <return>return <expr><name><name>qval</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>
    <case>case <expr><name>BINN_UINT32</name></expr>:</case>
      <expr_stmt><expr><name><name>qval</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_I64</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qval</name><operator>-&gt;</operator><name>vi64</name></name> <operator>=</operator> <name><name>vbinn</name><operator>-&gt;</operator><name>vuint32</name></name></expr>;</expr_stmt>
      <return>return <expr><name><name>qval</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>
    <case>case <expr><name>BINN_UINT64</name></expr>:</case>
      <expr_stmt><expr><name><name>qval</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_I64</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qval</name><operator>-&gt;</operator><name>vi64</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>vbinn</name><operator>-&gt;</operator><name>vuint64</name></name></expr>;</expr_stmt>
      <return>return <expr><name><name>qval</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>
    <case>case <expr><name>BINN_INT8</name></expr>:</case>
      <expr_stmt><expr><name><name>qval</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_I64</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qval</name><operator>-&gt;</operator><name>vi64</name></name> <operator>=</operator> <name><name>vbinn</name><operator>-&gt;</operator><name>vint8</name></name></expr>;</expr_stmt> <comment type="line">// NOLINT(bugprone-signed-char-misuse)</comment>
      <return>return <expr><name><name>qval</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>
    <case>case <expr><name>BINN_INT16</name></expr>:</case>
      <expr_stmt><expr><name><name>qval</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_I64</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qval</name><operator>-&gt;</operator><name>vi64</name></name> <operator>=</operator> <name><name>vbinn</name><operator>-&gt;</operator><name>vint16</name></name></expr>;</expr_stmt>
      <return>return <expr><name><name>qval</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>
    <case>case <expr><name>BINN_INT32</name></expr>:</case>
      <expr_stmt><expr><name><name>qval</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_I64</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qval</name><operator>-&gt;</operator><name>vi64</name></name> <operator>=</operator> <name><name>vbinn</name><operator>-&gt;</operator><name>vint32</name></name></expr>;</expr_stmt>
      <return>return <expr><name><name>qval</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>
    <case>case <expr><name>BINN_INT64</name></expr>:</case>
      <expr_stmt><expr><name><name>qval</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_I64</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qval</name><operator>-&gt;</operator><name>vi64</name></name> <operator>=</operator> <name><name>vbinn</name><operator>-&gt;</operator><name>vint64</name></name></expr>;</expr_stmt>
      <return>return <expr><name><name>qval</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>
    <case>case <expr><name>BINN_FLOAT32</name></expr>:</case>
      <expr_stmt><expr><name><name>qval</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_F64</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qval</name><operator>-&gt;</operator><name>vf64</name></name> <operator>=</operator> <name><name>vbinn</name><operator>-&gt;</operator><name>vfloat</name></name></expr>;</expr_stmt>
      <return>return <expr><name><name>qval</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>
    <case>case <expr><name>BINN_FLOAT64</name></expr>:</case>
      <expr_stmt><expr><name><name>qval</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_F64</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qval</name><operator>-&gt;</operator><name>vf64</name></name> <operator>=</operator> <name><name>vbinn</name><operator>-&gt;</operator><name>vdouble</name></name></expr>;</expr_stmt>
      <return>return <expr><name><name>qval</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>
    <default>default:</default>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>qval</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>qval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>JQVAL_NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>jqval_type_t</name></type> <name>jql_binn_to_jqval</name><parameter_list>(<parameter><decl><type><name>binn</name> <modifier>*</modifier></type><name>vbinn</name></decl></parameter>, <parameter><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>qval</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_jql_binn_to_jqval</name><argument_list>(<argument><expr><name>vbinn</name></expr></argument>, <argument><expr><name>qval</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>_jql_node_to_jqval</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>jn</name></decl></parameter>, <parameter><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>qv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name><name>jn</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>JBV_STR</name></expr>:</case>
      <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_STR</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>vstr</name></name> <operator>=</operator> <name><name>jn</name><operator>-&gt;</operator><name>vptr</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JBV_I64</name></expr>:</case>
      <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_I64</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>vi64</name></name> <operator>=</operator> <name><name>jn</name><operator>-&gt;</operator><name>vi64</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JBV_BOOL</name></expr>:</case>
      <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_BOOL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>vbool</name></name> <operator>=</operator> <name><name>jn</name><operator>-&gt;</operator><name>vbool</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JBV_F64</name></expr>:</case>
      <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_F64</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>vf64</name></name> <operator>=</operator> <name><name>jn</name><operator>-&gt;</operator><name>vf64</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JBV_NULL</name></expr>:</case>
    <case>case <expr><name>JBV_NONE</name></expr>:</case>
      <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_NULL</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JBV_OBJECT</name></expr>:</case>
    <case>case <expr><name>JBV_ARRAY</name></expr>:</case>
      <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_JBLNODE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>vnode</name></name> <operator>=</operator> <name>jn</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_NULL</name></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jql_node_to_jqval</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>jn</name></decl></parameter>, <parameter><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>qv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>_jql_node_to_jqval</name><argument_list>(<argument><expr><name>jn</name></expr></argument>, <argument><expr><name>qv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Allowed on left:   JQVAL_STR|JQVAL_I64|JQVAL_F64|JQVAL_BOOL|JQVAL_NULL|JQVAL_BINN
 * Allowed on right:  JQVAL_STR|JQVAL_I64|JQVAL_F64|JQVAL_BOOL|JQVAL_NULL|JQVAL_JBLNODE
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_jql_cmp_jqval_pair</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JQVAL</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>JQVAL</name> <modifier>*</modifier></type><name>right</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQVAL</name></type> <name>sleft</name></decl>, <decl><type ref="prev"/><name>sright</name></decl>;</decl_stmt>   <comment type="line">// Stack allocated left/right converted values</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>JQVAL</name> <modifier>*</modifier></type><name>lv</name> <init>= <expr><name>left</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rv</name> <init>= <expr><name>right</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>lv</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQVAL_BINN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_jql_binn_to_jqval</name><argument_list>(<argument><expr><name><name>lv</name><operator>-&gt;</operator><name>vbinn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sleft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lv</name> <operator>=</operator> <operator>&amp;</operator><name>sleft</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>rv</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQVAL_JBLNODE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_jql_node_to_jqval</name><argument_list>(<argument><expr><name><name>rv</name><operator>-&gt;</operator><name>vnode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <operator>&amp;</operator><name>sright</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><name><name>lv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>JQVAL_STR</name></expr>:</case>
      <switch>switch <condition>(<expr><name><name>rv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>JQVAL_STR</name></expr>:</case> <block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>l1</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>lv</name><operator>-&gt;</operator><name>vstr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>l2</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>rv</name><operator>-&gt;</operator><name>vstr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>l1</name> <operator>!=</operator> <name>l2</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>l1</name> <operator>-</operator> <name>l2</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <return>return <expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>lv</name><operator>-&gt;</operator><name>vstr</name></name></expr></argument>, <argument><expr><name><name>rv</name><operator>-&gt;</operator><name>vstr</name></name></expr></argument>, <argument><expr><name>l1</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <case>case <expr><name>JQVAL_BOOL</name></expr>:</case>
          <return>return <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>lv</name><operator>-&gt;</operator><name>vstr</name></name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>rv</name><operator>-&gt;</operator><name>vbool</name></name></expr>;</return>
        <case>case <expr><name>JQVAL_I64</name></expr>:</case> <block>{<block_content>
          <decl_stmt><decl><type><name>char</name></type> <name><name>nbuf</name><index>[<expr><name>IWNUMBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>iwitoa</name><argument_list>(<argument><expr><name><name>rv</name><operator>-&gt;</operator><name>vi64</name></name></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>, <argument><expr><name>IWNUMBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>lv</name><operator>-&gt;</operator><name>vstr</name></name></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <case>case <expr><name>JQVAL_F64</name></expr>:</case> <block>{<block_content>
          <decl_stmt><decl><type><name>size_t</name></type> <name>osz</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>char</name></type> <name><name>nbuf</name><index>[<expr><name>IWNUMBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>iwjson_ftoa</name><argument_list>(<argument><expr><name><name>rv</name><operator>-&gt;</operator><name>vf64</name></name></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>osz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>lv</name><operator>-&gt;</operator><name>vstr</name></name></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <case>case <expr><name>JQVAL_NULL</name></expr>:</case>
          <return>return <expr><ternary><condition><expr><operator>(</operator><operator>!</operator><name><name>lv</name><operator>-&gt;</operator><name>vstr</name></name> <operator>||</operator> <name><name>lv</name><operator>-&gt;</operator><name>vstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
        <default>default:</default>
          <break>break;</break>
      </block_content>}</block></switch>
      <break>break;</break>
    <case>case <expr><name>JQVAL_I64</name></expr>:</case>
      <switch>switch <condition>(<expr><name><name>rv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>JQVAL_I64</name></expr>:</case>
          <return>return <expr><ternary><condition><expr><name><name>lv</name><operator>-&gt;</operator><name>vi64</name></name> <operator>&gt;</operator> <name><name>rv</name><operator>-&gt;</operator><name>vi64</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><name><name>lv</name><operator>-&gt;</operator><name>vi64</name></name> <operator>&lt;</operator> <name><name>rv</name><operator>-&gt;</operator><name>vi64</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</return>
        <case>case <expr><name>JQVAL_F64</name></expr>:</case>
          <return>return <expr><ternary><condition><expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>lv</name><operator>-&gt;</operator><name>vi64</name></name> <operator>&gt;</operator> <name><name>rv</name><operator>-&gt;</operator><name>vf64</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>lv</name><operator>-&gt;</operator><name>vi64</name></name> <operator>&lt;</operator> <name><name>rv</name><operator>-&gt;</operator><name>vf64</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</return>
        <case>case <expr><name>JQVAL_STR</name></expr>:</case> <block>{<block_content>
          <decl_stmt><decl><type><name>int64_t</name></type> <name>rval</name> <init>= <expr><call><name>iwatoi</name><argument_list>(<argument><expr><name><name>rv</name><operator>-&gt;</operator><name>vstr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <return>return <expr><ternary><condition><expr><name><name>lv</name><operator>-&gt;</operator><name>vi64</name></name> <operator>&gt;</operator> <name>rval</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><name><name>lv</name><operator>-&gt;</operator><name>vi64</name></name> <operator>&lt;</operator> <name>rval</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</return>
        </block_content>}</block>
        <case>case <expr><name>JQVAL_NULL</name></expr>:</case>
          <return>return <expr><literal type="number">1</literal></expr>;</return>
        <case>case <expr><name>JQVAL_BOOL</name></expr>:</case> <block>{<block_content>
          <return>return <expr><operator>(</operator><name><name>lv</name><operator>-&gt;</operator><name>vi64</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>-</operator> <name><name>rv</name><operator>-&gt;</operator><name>vbool</name></name></expr>;</return>
        </block_content>}</block>
        <default>default:</default>
          <break>break;</break>
      </block_content>}</block></switch>
      <break>break;</break>
    <case>case <expr><name>JQVAL_F64</name></expr>:</case>
      <switch>switch <condition>(<expr><name><name>rv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>JQVAL_F64</name></expr>:</case>
          <return>return <expr><ternary><condition><expr><name><name>lv</name><operator>-&gt;</operator><name>vf64</name></name> <operator>&gt;</operator> <name><name>rv</name><operator>-&gt;</operator><name>vf64</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><name><name>lv</name><operator>-&gt;</operator><name>vf64</name></name> <operator>&lt;</operator> <name><name>rv</name><operator>-&gt;</operator><name>vf64</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</return>
        <case>case <expr><name>JQVAL_I64</name></expr>:</case>
          <return>return <expr><ternary><condition><expr><name><name>lv</name><operator>-&gt;</operator><name>vf64</name></name> <operator>&gt;</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>rv</name><operator>-&gt;</operator><name>vi64</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><name><name>lv</name><operator>-&gt;</operator><name>vf64</name></name> <operator>&lt;</operator> <name><name>rv</name><operator>-&gt;</operator><name>vf64</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</return>
        <case>case <expr><name>JQVAL_STR</name></expr>:</case> <block>{<block_content>
          <decl_stmt><decl><type><name>double</name></type> <name>rval</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator> <call><name>iwatof</name><argument_list>(<argument><expr><name><name>rv</name><operator>-&gt;</operator><name>vstr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <return>return <expr><ternary><condition><expr><name><name>lv</name><operator>-&gt;</operator><name>vf64</name></name> <operator>&gt;</operator> <name>rval</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><name><name>lv</name><operator>-&gt;</operator><name>vf64</name></name> <operator>&lt;</operator> <name>rval</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</return>
        </block_content>}</block>
        <case>case <expr><name>JQVAL_NULL</name></expr>:</case>
          <return>return <expr><literal type="number">1</literal></expr>;</return>
        <case>case <expr><name>JQVAL_BOOL</name></expr>:</case>
          <return>return <expr><ternary><condition><expr><name><name>lv</name><operator>-&gt;</operator><name>vf64</name></name> <operator>&gt;</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>rv</name><operator>-&gt;</operator><name>vbool</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><name><name>lv</name><operator>-&gt;</operator><name>vf64</name></name> <operator>&lt;</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>rv</name><operator>-&gt;</operator><name>vbool</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</return>
        <default>default:</default>
          <break>break;</break>
      </block_content>}</block></switch>
      <break>break;</break>
    <case>case <expr><name>JQVAL_BOOL</name></expr>:</case>
      <switch>switch <condition>(<expr><name><name>rv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>JQVAL_BOOL</name></expr>:</case>
          <return>return <expr><name><name>lv</name><operator>-&gt;</operator><name>vbool</name></name> <operator>-</operator> <name><name>rv</name><operator>-&gt;</operator><name>vbool</name></name></expr>;</return>
        <case>case <expr><name>JQVAL_I64</name></expr>:</case>
          <return>return <expr><name><name>lv</name><operator>-&gt;</operator><name>vbool</name></name> <operator>-</operator> <operator>(</operator><name><name>rv</name><operator>-&gt;</operator><name>vi64</name></name> <operator>!=</operator> <literal type="number">0L</literal><operator>)</operator></expr>;</return>
        <case>case <expr><name>JQVAL_F64</name></expr>:</case>
          <return>return <expr><name><name>lv</name><operator>-&gt;</operator><name>vbool</name></name> <operator>-</operator> <operator>(</operator><name><name>rv</name><operator>-&gt;</operator><name>vf64</name></name> <operator>!=</operator> <literal type="number">0.0</literal><operator>)</operator></expr>;</return> <comment type="line">// -V550</comment>
        <case>case <expr><name>JQVAL_STR</name></expr>:</case> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rv</name><operator>-&gt;</operator><name>vstr</name></name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>lv</name><operator>-&gt;</operator><name>vbool</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rv</name><operator>-&gt;</operator><name>vstr</name></name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>lv</name><operator>-&gt;</operator><name>vbool</name></name></expr>;</return>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block>
        <case>case <expr><name>JQVAL_NULL</name></expr>:</case>
          <return>return <expr><name><name>lv</name><operator>-&gt;</operator><name>vbool</name></name></expr>;</return>
        <default>default:</default>
          <break>break;</break>
      </block_content>}</block></switch>
      <break>break;</break>
    <case>case <expr><name>JQVAL_NULL</name></expr>:</case>
      <switch>switch <condition>(<expr><name><name>rv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>JQVAL_NULL</name></expr>:</case>
          <return>return <expr><literal type="number">0</literal></expr>;</return>
        <case>case <expr><name>JQVAL_STR</name></expr>:</case>
          <return>return <expr><ternary><condition><expr><operator>(</operator><operator>!</operator><name><name>rv</name><operator>-&gt;</operator><name>vstr</name></name> <operator>||</operator> <name><name>rv</name><operator>-&gt;</operator><name>vstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
        <default>default:</default>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></switch>
      <break>break;</break>
    <case>case <expr><name>JQVAL_BINN</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(  <expr><operator>(</operator><name><name>rv</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JQVAL_JBLNODE</name><operator>)</operator>
         <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>rv</name><operator>-&gt;</operator><name>vnode</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_ARRAY</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>lv</name><operator>-&gt;</operator><name>vbinn</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>BINN_LIST</name><operator>)</operator><operator>)</operator>
         <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>rv</name><operator>-&gt;</operator><name>vnode</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_OBJECT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>lv</name><operator>-&gt;</operator><name>vbinn</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>BINN_OBJECT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>lv</name><operator>-&gt;</operator><name>vbinn</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>BINN_MAP</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
        <comment type="line">// Incompatible types</comment>
        <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>_JQL_ERROR_UNMATCHED</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>lnode</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>iwpool_create</name><argument_list>(<argument><expr><name><name>rv</name><operator>-&gt;</operator><name>vbinn</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <call><name>_jbl_node_from_binn</name><argument_list>(<argument><expr><name><name>lv</name><operator>-&gt;</operator><name>vbinn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lnode</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>rcp</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>jbn_compare_nodes</name><argument_list>(<argument><expr><name>lnode</name></expr></argument>, <argument><expr><name><name>rv</name><operator>-&gt;</operator><name>vnode</name></name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>cmp</name></expr>;</return>
    </block_content>}</block>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>_JQL_ERROR_UNMATCHED</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>jql_cmp_jqval_pair</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JQVAL</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>JQVAL</name> <modifier>*</modifier></type><name>right</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_jql_cmp_jqval_pair</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_jql_match_regexp</name><parameter_list>(
  <parameter><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name></decl></parameter>,
  <parameter><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>JQP_OP</name> <modifier>*</modifier></type><name>jqop</name></decl></parameter>, <parameter><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>right</name></decl></parameter>,
  <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwre</name></name> <modifier>*</modifier></type><name>rx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>nbuf</name><index>[<expr><name>IWNUMBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQVAL</name></type> <name>sleft</name></decl>, <decl><type ref="prev"/><name>sright</name></decl>;</decl_stmt> <comment type="line">// Stack allocated left/right converted values</comment>
  <decl_stmt><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>lv</name> <init>= <expr><name>left</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rv</name> <init>= <expr><name>right</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>lv</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQVAL_JBLNODE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_jql_node_to_jqval</name><argument_list>(<argument><expr><name><name>lv</name><operator>-&gt;</operator><name>vnode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sleft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lv</name> <operator>=</operator> <operator>&amp;</operator><name>sleft</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>lv</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQVAL_BINN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_jql_binn_to_jqval</name><argument_list>(<argument><expr><name><name>lv</name><operator>-&gt;</operator><name>vbinn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sleft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lv</name> <operator>=</operator> <operator>&amp;</operator><name>sleft</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>lv</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;=</operator> <name>JQVAL_JBLNODE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>_JQL_ERROR_UNMATCHED</name></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>jqop</name><operator>-&gt;</operator><name>opaque</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rx</name> <operator>=</operator> <name><name>jqop</name><operator>-&gt;</operator><name>opaque</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>right</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQVAL_RE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rx</name> <operator>=</operator> <name><name>right</name><operator>-&gt;</operator><name>vre</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>rv</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQVAL_JBLNODE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_jql_node_to_jqval</name><argument_list>(<argument><expr><name><name>rv</name><operator>-&gt;</operator><name>vnode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rv</name> <operator>=</operator> <operator>&amp;</operator><name>sright</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <switch>switch <condition>(<expr><name><name>rv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>JQVAL_STR</name></expr>:</case>
        <expr_stmt><expr><name>expr</name> <operator>=</operator> <name><name>rv</name><operator>-&gt;</operator><name>vstr</name></name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>JQVAL_I64</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>iwitoa</name><argument_list>(<argument><expr><name><name>rv</name><operator>-&gt;</operator><name>vi64</name></name></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>, <argument><expr><name>IWNUMBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>expr</name> <operator>=</operator> <call><name>iwpool_strdup</name><argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>rcp</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>JQVAL_F64</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>osz</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>iwjson_ftoa</name><argument_list>(<argument><expr><name><name>rv</name><operator>-&gt;</operator><name>vf64</name></name></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>osz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>expr</name> <operator>=</operator> <call><name>iwpool_strdup</name><argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>rcp</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>JQVAL_BOOL</name></expr>:</case>
        <expr_stmt><expr><name>expr</name> <operator>=</operator> <ternary><condition><expr><name><name>rv</name><operator>-&gt;</operator><name>vbool</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>_JQL_ERROR_UNMATCHED</name></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><call><name>IW_UNLIKELY</name><argument_list>(<argument><expr><operator>*</operator><name>expr</name> <operator>==</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rx</name> <operator>=</operator> <name>IWRE_UNUSED_PTR</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>rx</name> <operator>=</operator> <call><name>iwre_create</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rx</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>JQL_ERROR_REGEXP_INVALID</name></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>jqop</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>rx</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <switch>switch <condition>(<expr><name><name>lv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>JQVAL_STR</name></expr>:</case>
      <expr_stmt><expr><name>input</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>lv</name><operator>-&gt;</operator><name>vstr</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JQVAL_I64</name></expr>:</case>
      <expr_stmt><expr><call><name>iwitoa</name><argument_list>(<argument><expr><name><name>lv</name><operator>-&gt;</operator><name>vi64</name></name></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>, <argument><expr><name>IWNUMBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>input</name> <operator>=</operator> <name>nbuf</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JQVAL_F64</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>osz</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>iwjson_ftoa</name><argument_list>(<argument><expr><name><name>lv</name><operator>-&gt;</operator><name>vf64</name></name></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>osz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>input</name> <operator>=</operator> <name>nbuf</name></expr>;</expr_stmt>
    </block_content>}</block>
    <break>break;</break>
    <case>case <expr><name>JQVAL_BOOL</name></expr>:</case>
      <expr_stmt><expr><name>input</name> <operator>=</operator> <ternary><condition><expr><name><name>lv</name><operator>-&gt;</operator><name>vbool</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>_JQL_ERROR_UNMATCHED</name></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></switch>

  <if_stmt><if>if <condition>(<expr><call><name>IW_UNLIKELY</name><argument_list>(<argument><expr><name>rx</name> <operator>==</operator> <name>IWRE_UNUSED_PTR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>*</operator><name>input</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>mpairs</name><index>[<expr><name>IWRE_MAX_MATCHES</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mret</name> <init>= <expr><call><name>iwre_match</name><argument_list>(<argument><expr><name>rx</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>mpairs</name></expr></argument>, <argument><expr><name>IWRE_MAX_MATCHES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>mret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_jql_match_in</name><parameter_list>(
  <parameter><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>JQP_OP</name> <modifier>*</modifier></type><name>jqop</name></decl></parameter>, <parameter><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>right</name></decl></parameter>,
  <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQVAL</name></type> <name>sleft</name></decl>;</decl_stmt> <comment type="line">// Stack allocated left/right converted values</comment>
  <decl_stmt><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>lv</name> <init>= <expr><name>left</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rv</name> <init>= <expr><name>right</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>rv</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JQVAL_JBLNODE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>rv</name><operator>-&gt;</operator><name>vnode</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JBV_ARRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>_JQL_ERROR_UNMATCHED</name></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>lv</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQVAL_JBLNODE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_jql_node_to_jqval</name><argument_list>(<argument><expr><name><name>lv</name><operator>-&gt;</operator><name>vnode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sleft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lv</name> <operator>=</operator> <operator>&amp;</operator><name>sleft</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>lv</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQVAL_BINN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_jql_binn_to_jqval</name><argument_list>(<argument><expr><name><name>lv</name><operator>-&gt;</operator><name>vbinn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sleft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lv</name> <operator>=</operator> <operator>&amp;</operator><name>sleft</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>JBL_NODE</name></type> <name>n</name> <init>= <expr><name><name>rv</name><operator>-&gt;</operator><name>vnode</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</init> <condition><expr><name>n</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>JQVAL</name></type> <name>qv</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>type</name>  <operator>=</operator> <name>JQVAL_JBLNODE</name></expr>,
      <expr><operator>.</operator><name>vnode</name> <operator>=</operator> <name>n</name></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_jql_cmp_jqval_pair</name><argument_list>(<argument><expr><name>lv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qv</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>rcp</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>rcp</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_jql_match_ni</name><parameter_list>(
  <parameter><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>JQP_OP</name> <modifier>*</modifier></type><name>jqop</name></decl></parameter>, <parameter><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>right</name></decl></parameter>,
  <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQVAL</name></type> <name>sleft</name></decl>;</decl_stmt> <comment type="line">// Stack allocated left/right converted values</comment>
  <decl_stmt><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>lv</name> <init>= <expr><name>left</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rv</name> <init>= <expr><name>right</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>binn</name></type> <name>bv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>binn_iter</name></type> <name>iter</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>rv</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JQVAL_BINN</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>rv</name><operator>-&gt;</operator><name>vbinn</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>BINN_LIST</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>_JQL_ERROR_UNMATCHED</name></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>lv</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQVAL_JBLNODE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_jql_node_to_jqval</name><argument_list>(<argument><expr><name><name>lv</name><operator>-&gt;</operator><name>vnode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sleft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lv</name> <operator>=</operator> <operator>&amp;</operator><name>sleft</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>lv</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQVAL_BINN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_jql_binn_to_jqval</name><argument_list>(<argument><expr><name><name>lv</name><operator>-&gt;</operator><name>vbinn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sleft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lv</name> <operator>=</operator> <operator>&amp;</operator><name>sleft</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>lv</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;=</operator> <name>JQVAL_JBLNODE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>_JQL_ERROR_UNMATCHED</name></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name><name>rv</name><operator>-&gt;</operator><name>vbinn</name></name></expr></argument>, <argument><expr><name><name>rv</name><operator>-&gt;</operator><name>vbinn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>JBL_ERROR_INVALID</name></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><call><name>binn_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>JQVAL</name></type> <name>qv</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>type</name>  <operator>=</operator> <name>JQVAL_BINN</name></expr>,
      <expr><operator>.</operator><name>vbinn</name> <operator>=</operator> <operator>&amp;</operator><name>bv</name></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_jql_cmp_jqval_pair</name><argument_list>(<argument><expr><operator>&amp;</operator><name>qv</name></expr></argument>, <argument><expr><name>lv</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>rcp</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>rcp</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_jql_match_starts</name><parameter_list>(
  <parameter><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>JQP_OP</name> <modifier>*</modifier></type><name>jqop</name></decl></parameter>, <parameter><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>right</name></decl></parameter>,
  <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQVAL</name></type> <name>sleft</name></decl>;</decl_stmt> <comment type="line">// Stack allocated left/right converted values</comment>
  <decl_stmt><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>lv</name> <init>= <expr><name>left</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rv</name> <init>= <expr><name>right</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>nbuf</name><index>[<expr><name>IWNUMBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>nbuf2</name><index>[<expr><name>IWNUMBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prefix</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>lv</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQVAL_JBLNODE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_jql_node_to_jqval</name><argument_list>(<argument><expr><name><name>lv</name><operator>-&gt;</operator><name>vnode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sleft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lv</name> <operator>=</operator> <operator>&amp;</operator><name>sleft</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>lv</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQVAL_BINN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_jql_binn_to_jqval</name><argument_list>(<argument><expr><name><name>lv</name><operator>-&gt;</operator><name>vbinn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sleft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lv</name> <operator>=</operator> <operator>&amp;</operator><name>sleft</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <switch>switch <condition>(<expr><name><name>lv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>JQVAL_STR</name></expr>:</case>
      <expr_stmt><expr><name>input</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>lv</name><operator>-&gt;</operator><name>vstr</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JQVAL_I64</name></expr>:</case>
      <expr_stmt><expr><call><name>iwitoa</name><argument_list>(<argument><expr><name><name>lv</name><operator>-&gt;</operator><name>vi64</name></name></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>, <argument><expr><name>IWNUMBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>input</name> <operator>=</operator> <name>nbuf</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JQVAL_F64</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>osz</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>iwjson_ftoa</name><argument_list>(<argument><expr><name><name>lv</name><operator>-&gt;</operator><name>vf64</name></name></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>osz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>input</name> <operator>=</operator> <name>nbuf</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>JQVAL_BOOL</name></expr>:</case>
      <expr_stmt><expr><name>input</name> <operator>=</operator> <ternary><condition><expr><name><name>lv</name><operator>-&gt;</operator><name>vbool</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>_JQL_ERROR_UNMATCHED</name></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></switch>
  <switch>switch <condition>(<expr><name><name>rv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>JQVAL_STR</name></expr>:</case>
      <expr_stmt><expr><name>prefix</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>rv</name><operator>-&gt;</operator><name>vstr</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JQVAL_I64</name></expr>:</case>
      <expr_stmt><expr><call><name>iwitoa</name><argument_list>(<argument><expr><name><name>rv</name><operator>-&gt;</operator><name>vi64</name></name></expr></argument>, <argument><expr><name>nbuf2</name></expr></argument>, <argument><expr><name>IWNUMBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>prefix</name> <operator>=</operator> <name>nbuf2</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JQVAL_F64</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>osz</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>iwjson_ftoa</name><argument_list>(<argument><expr><name><name>rv</name><operator>-&gt;</operator><name>vf64</name></name></expr></argument>, <argument><expr><name>nbuf2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>osz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>prefix</name> <operator>=</operator> <name>nbuf2</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>JQVAL_BOOL</name></expr>:</case>
      <expr_stmt><expr><name>prefix</name> <operator>=</operator> <ternary><condition><expr><name><name>rv</name><operator>-&gt;</operator><name>vbool</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>_JQL_ERROR_UNMATCHED</name></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></switch>
  <decl_stmt><decl><type><name>size_t</name></type> <name>plen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>plen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>strncmp</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_jql_match_jqval_pair</name><parameter_list>(
  <parameter><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name></decl></parameter>,
  <parameter><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>JQP_OP</name> <modifier>*</modifier></type><name>jqop</name></decl></parameter>, <parameter><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>right</name></decl></parameter>,
  <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>match</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jqp_op_t</name></type> <name>op</name> <init>= <expr><name><name>jqop</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>op</name> <operator>&gt;=</operator> <name>JQP_OP_EQ</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>op</name> <operator>&lt;=</operator> <name>JQP_OP_LTE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>_jql_cmp_jqval_pair</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>rcp</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>JQP_OP_EQ</name></expr>:</case>
        <expr_stmt><expr><name>match</name> <operator>=</operator> <operator>(</operator><name>cmp</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>JQP_OP_GT</name></expr>:</case>
        <expr_stmt><expr><name>match</name> <operator>=</operator> <operator>(</operator><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>JQP_OP_GTE</name></expr>:</case>
        <expr_stmt><expr><name>match</name> <operator>=</operator> <operator>(</operator><name>cmp</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>JQP_OP_LT</name></expr>:</case>
        <expr_stmt><expr><name>match</name> <operator>=</operator> <operator>(</operator><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>JQP_OP_LTE</name></expr>:</case>
        <expr_stmt><expr><name>match</name> <operator>=</operator> <operator>(</operator><name>cmp</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>JQP_OP_RE</name></expr>:</case>
        <expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>_jql_match_regexp</name><argument_list>(<argument><expr><name>aux</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>jqop</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>JQP_OP_IN</name></expr>:</case>
        <expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>_jql_match_in</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>jqop</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>JQP_OP_NI</name></expr>:</case>
        <expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>_jql_match_ni</name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name>jqop</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>JQP_OP_PREFIX</name></expr>:</case>
        <expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>_jql_match_starts</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>jqop</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>rcp</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>rcp</name> <operator>==</operator> <name>_JQL_ERROR_UNMATCHED</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>match</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>jqop</name><operator>-&gt;</operator><name>negate</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>match</name> <operator>=</operator> <operator>!</operator><name>match</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>match</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>jql_match_jqval_pair</name><parameter_list>(
  <parameter><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name></decl></parameter>,
  <parameter><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>JQP_OP</name> <modifier>*</modifier></type><name>jqop</name></decl></parameter>, <parameter><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>right</name></decl></parameter>,
  <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_jql_match_jqval_pair</name><argument_list>(<argument><expr><name>aux</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>jqop</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JQVAL</name><modifier>*</modifier></type> <name>_jql_unit_to_jqval</name><parameter_list>(<parameter><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name></decl></parameter>, <parameter><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>JQP_STRING_TYPE</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>opaque</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>JQVAL</name><operator>*</operator><operator>)</operator> <name><name>unit</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>opaque</name></name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_PLACEHOLDER</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>JQL_ERROR_INVALID_PLACEHOLDER</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>qv</name> <init>= <expr><call><name>iwpool_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>qv</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>aux</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>qv</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <name>qv</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_STR</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>vstr</name></name> <operator>=</operator> <name><name>unit</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <return>return <expr><name><name>unit</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>opaque</name></name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>JQP_JSON_TYPE</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>opaque</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>JQVAL</name><operator>*</operator><operator>)</operator> <name><name>unit</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>opaque</name></name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>qv</name> <init>= <expr><call><name>iwpool_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>qv</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>aux</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>qv</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <name>qv</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name><name>struct</name> <name>_JBL_NODE</name></name> <modifier>*</modifier></type><name>jn</name> <init>= <expr><operator>&amp;</operator><name><name>unit</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>jn</name></name></expr></init></decl>;</decl_stmt>
      <switch>switch <condition>(<expr><name><name>jn</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>JBV_BOOL</name></expr>:</case>
          <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_BOOL</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>vbool</name></name> <operator>=</operator> <name><name>jn</name><operator>-&gt;</operator><name>vbool</name></name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>JBV_I64</name></expr>:</case>
          <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_I64</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>vi64</name></name> <operator>=</operator> <name><name>jn</name><operator>-&gt;</operator><name>vi64</name></name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>JBV_F64</name></expr>:</case>
          <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_F64</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>vf64</name></name> <operator>=</operator> <name><name>jn</name><operator>-&gt;</operator><name>vf64</name></name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>JBV_STR</name></expr>:</case>
          <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_STR</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>vstr</name></name> <operator>=</operator> <name><name>jn</name><operator>-&gt;</operator><name>vptr</name></name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>JBV_NULL</name></expr>:</case>
          <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_NULL</name></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_JBLNODE</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>vnode</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>unit</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>jn</name></name></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>
      <return>return <expr><name><name>unit</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>opaque</name></name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>JQP_INTEGER_TYPE</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>intval</name><operator>.</operator><name>opaque</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>JQVAL</name><operator>*</operator><operator>)</operator> <name><name>unit</name><operator>-&gt;</operator><name>intval</name><operator>.</operator><name>opaque</name></name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>qv</name> <init>= <expr><call><name>iwpool_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>qv</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>aux</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>qv</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>intval</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <name>qv</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_I64</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>vi64</name></name> <operator>=</operator> <name><name>unit</name><operator>-&gt;</operator><name>intval</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>
      <return>return <expr><name><name>unit</name><operator>-&gt;</operator><name>intval</name><operator>.</operator><name>opaque</name></name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>JQP_DOUBLE_TYPE</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>dblval</name><operator>.</operator><name>opaque</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>JQVAL</name><operator>*</operator><operator>)</operator> <name><name>unit</name><operator>-&gt;</operator><name>dblval</name><operator>.</operator><name>opaque</name></name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>qv</name> <init>= <expr><call><name>iwpool_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>qv</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>aux</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>qv</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>dblval</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <name>qv</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_F64</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>qv</name><operator>-&gt;</operator><name>vf64</name></name> <operator>=</operator> <name><name>unit</name><operator>-&gt;</operator><name>dblval</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>
      <return>return <expr><name><name>unit</name><operator>-&gt;</operator><name>dblval</name><operator>.</operator><name>opaque</name></name></expr>;</return>
    </block_content>}</block>
    <default>default:</default>
      <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>IW_ERROR_ASSERTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>IW_ERROR_ASSERTION</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>JQVAL</name><modifier>*</modifier></type> <name>jql_unit_to_jqval</name><parameter_list>(<parameter><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name></decl></parameter>, <parameter><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_jql_unit_to_jqval</name><argument_list>(<argument><expr><name>aux</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>jql_jqval_as_int</name><parameter_list>(<parameter><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>jqval</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name><name>jqval</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>JQVAL_I64</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name><name>jqval</name><operator>-&gt;</operator><name>vi64</name></name></expr>;</expr_stmt>
      <return>return <expr><name>true</name></expr>;</return>
    <case>case <expr><name>JQVAL_STR</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <call><name>iwatoi</name><argument_list>(<argument><expr><name><name>jqval</name><operator>-&gt;</operator><name>vstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>true</name></expr>;</return>
    <case>case <expr><name>JQVAL_F64</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name><name>jqval</name><operator>-&gt;</operator><name>vf64</name></name></expr>;</expr_stmt>
      <return>return <expr><name>true</name></expr>;</return>
    <case>case <expr><name>JQVAL_BOOL</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <ternary><condition><expr><name><name>jqval</name><operator>-&gt;</operator><name>vbool</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
      <return>return <expr><name>true</name></expr>;</return>
    <case>case <expr><name>JQVAL_JBLNODE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>n</name> <init>= <expr><name><name>jqval</name><operator>-&gt;</operator><name>vnode</name></name></expr></init></decl>;</decl_stmt>
      <switch>switch <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>JBV_I64</name></expr>:</case>
          <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>vi64</name></name></expr>;</expr_stmt>
          <return>return <expr><name>true</name></expr>;</return>
        <case>case <expr><name>JBV_STR</name></expr>:</case>
          <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <call><name>iwatoi</name><argument_list>(<argument><expr><name><name>jqval</name><operator>-&gt;</operator><name>vstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>true</name></expr>;</return>
        <case>case <expr><name>JBV_F64</name></expr>:</case>
          <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>vf64</name></name></expr>;</expr_stmt>
          <return>return <expr><name>true</name></expr>;</return>
        <case>case <expr><name>JBV_BOOL</name></expr>:</case>
          <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <ternary><condition><expr><name><name>n</name><operator>-&gt;</operator><name>vbool</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
          <return>return <expr><name>true</name></expr>;</return>
        <default>default:</default>
          <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></switch>
    </block_content>}</block>
    <default>default:</default>
      <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_jql_match_node_expr_impl</name><parameter_list>(<parameter><decl><type><name>MCTX</name> <modifier>*</modifier></type><name>mctx</name></decl></parameter>, <parameter><decl><type><name>JQP_EXPR</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>prematched</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>negate</name> <init>= <expr><operator>(</operator><name><name>expr</name><operator>-&gt;</operator><name>join</name></name> <operator>&amp;&amp;</operator> <name><name>expr</name><operator>-&gt;</operator><name>join</name><operator>-&gt;</operator><name>negate</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><name><name>expr</name><operator>-&gt;</operator><name>left</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQP_OP</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><name><name>expr</name><operator>-&gt;</operator><name>op</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>right</name> <init>= <expr><name><name>expr</name><operator>-&gt;</operator><name>right</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>left</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_STRING_TYPE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>left</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_STAR</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>JQVAL</name></type> <name>lv</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rv</name> <init>= <expr><call><name>_jql_unit_to_jqval</name><argument_list>(<argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>aux</name></name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>rcp</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>lv</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_STR</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>lv</name><operator>.</operator><name>vstr</name></name> <operator>=</operator> <name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>_jql_match_jqval_pair</name><argument_list>(<argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>aux</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><name>negate</name> <operator>!=</operator> <operator>(</operator><literal type="number">0</literal> <operator>==</operator> <operator>!</operator><name>ret</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(  <expr><operator>!</operator><operator>(</operator><name><name>left</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_DBL_STAR</name><operator>)</operator>
              <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>left</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>negate</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>left</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_EXPR_TYPE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>left</name><operator>-&gt;</operator><name>expr</name><operator>.</operator><name>left</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JQP_STRING_TYPE</name><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>left</name><operator>-&gt;</operator><name>expr</name><operator>.</operator><name>left</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_STAR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>IW_ERROR_ASSERTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>IW_ERROR_ASSERTION</name></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>JQVAL</name></type> <name>lv</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rv</name> <init>= <expr><call><name>_jql_unit_to_jqval</name><argument_list>(<argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>aux</name></name></expr></argument>, <argument><expr><name><name>left</name><operator>-&gt;</operator><name>expr</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>rcp</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>lv</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_STR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lv</name><operator>.</operator><name>vstr</name></name> <operator>=</operator> <name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_jql_match_jqval_pair</name><argument_list>(<argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>aux</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><name><name>left</name><operator>-&gt;</operator><name>expr</name><operator>.</operator><name>op</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>negate</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JQVAL</name></type> <name>lv</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rv</name> <init>= <expr><call><name>_jql_unit_to_jqval</name><argument_list>(<argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>aux</name></name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>rcp</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>lv</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_BINN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lv</name><operator>.</operator><name>vbinn</name></name> <operator>=</operator> <name><name>mctx</name><operator>-&gt;</operator><name>bv</name></name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>_jql_match_jqval_pair</name><argument_list>(<argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>aux</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><name><name>expr</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>negate</name> <operator>!=</operator> <operator>(</operator><literal type="number">0</literal> <operator>==</operator> <operator>!</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_jql_match_node_expr</name><parameter_list>(<parameter><decl><type><name>MCTX</name> <modifier>*</modifier></type><name>mctx</name></decl></parameter>, <parameter><decl><type><name>JQP_NODE</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>mctx</name><operator>-&gt;</operator><name>lvl</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><name><name>n</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JQP_EXPR_TYPE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>IW_ERROR_ASSERTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>IW_ERROR_ASSERTION</name></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>prev</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>JQP_EXPR</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><operator>&amp;</operator><name><name>unit</name><operator>-&gt;</operator><name>expr</name></name></expr></init></decl>;</init> <condition><expr><name>expr</name></expr>;</condition> <incr><expr><name>expr</name> <operator>=</operator> <name><name>expr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>matched</name> <init>= <expr><call><name>_jql_match_node_expr_impl</name><argument_list>(<argument><expr><name>mctx</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>rcp</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>JQP_JOIN</name> <modifier>*</modifier></type><name>join</name> <init>= <expr><name><name>expr</name><operator>-&gt;</operator><name>join</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>join</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>matched</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>join</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>JQP_JOIN_AND</name></expr>)</condition> <block>{<block_content> <comment type="line">// AND</comment>
        <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>prev</name> <operator>&amp;&amp;</operator> <name>matched</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>prev</name> <operator>||</operator> <name>matched</name></expr>)</condition> <block>{<block_content>      <comment type="line">// OR</comment>
        <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>prev</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>bool</name></type> <name>_jql_match_node_field</name><parameter_list>(<parameter><decl><type><name>MCTX</name> <modifier>*</modifier></type><name>mctx</name></decl></parameter>, <parameter><decl><type><name>JQP_NODE</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>mctx</name><operator>-&gt;</operator><name>lvl</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JQP_STRING_TYPE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>IW_ERROR_ASSERTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>IW_ERROR_ASSERTION</name></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>JQP_NODE</name><modifier>*</modifier></type> <name>_jql_match_node_anys</name><parameter_list>(<parameter><decl><type><name>MCTX</name> <modifier>*</modifier></type><name>mctx</name></decl></parameter>, <parameter><decl><type><name>JQP_NODE</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>start</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>mctx</name><operator>-&gt;</operator><name>lvl</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>JQP_NODE</name> <modifier>*</modifier></type><name>nn</name> <init>= <expr><call><name>_jql_match_node</name><argument_list>(<argument><expr><name>mctx</name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>res</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <operator>-</operator><name><name>mctx</name><operator>-&gt;</operator><name>lvl</name></name></expr>;</expr_stmt> <comment type="line">// Exclude node from matching</comment>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <name>nn</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt> <comment type="line">// Gather next level</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JQP_NODE</name><modifier>*</modifier></type> <name>_jql_match_node</name><parameter_list>(<parameter><decl><type><name>MCTX</name> <modifier>*</modifier></type><name>mctx</name></decl></parameter>, <parameter><decl><type><name>JQP_NODE</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>ntype</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>JQP_NODE_FIELD</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <call><name>_jql_match_node_field</name><argument_list>(<argument><expr><name>mctx</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>n</name></expr>;</return>
    <case>case <expr><name>JQP_NODE_EXPR</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <call><name>_jql_match_node_expr</name><argument_list>(<argument><expr><name>mctx</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>n</name></expr>;</return>
    <case>case <expr><name>JQP_NODE_ANY</name></expr>:</case>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>mctx</name><operator>-&gt;</operator><name>lvl</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <return>return <expr><name>n</name></expr>;</return>
    <case>case <expr><name>JQP_NODE_ANYS</name></expr>:</case>
      <return>return <expr><call><name>_jql_match_node_anys</name><argument_list>(<argument><expr><name>mctx</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></switch>
  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_jql_match_filter</name><parameter_list>(<parameter><decl><type><name>JQP_FILTER</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>MCTX</name> <modifier>*</modifier></type><name>mctx</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>MFCTX</name> <modifier>*</modifier></type><name>fctx</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>fctx</name><operator>-&gt;</operator><name>matched</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>matched</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>lvl</name> <init>= <expr><name><name>mctx</name><operator>-&gt;</operator><name>lvl</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>fctx</name><operator>-&gt;</operator><name>last_lvl</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>lvl</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>fctx</name><operator>-&gt;</operator><name>last_lvl</name></name> <operator>&gt;=</operator> <name>lvl</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>last_lvl</name></name> <operator>=</operator> <name>lvl</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>JQP_NODE</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name><name>fctx</name><operator>-&gt;</operator><name>nodes</name></name></expr></init></decl>;</init> <condition><expr><name>n</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>n</name><operator>-&gt;</operator><name>start</name></name> <operator>&gt;=</operator> <name>lvl</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>-</operator><name><name>n</name><operator>-&gt;</operator><name>end</name></name> <operator>&gt;=</operator> <name>lvl</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>JQP_NODE</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name><name>fctx</name><operator>-&gt;</operator><name>nodes</name></name></expr></init></decl>;</init> <condition><expr><name>n</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>n</name><operator>-&gt;</operator><name>start</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>lvl</name> <operator>&gt;=</operator> <name><name>n</name><operator>-&gt;</operator><name>start</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>lvl</name> <operator>&lt;=</operator> <name><name>n</name><operator>-&gt;</operator><name>end</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>_jql_match_node</name><argument_list>(<argument><expr><name>mctx</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>matched</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>rcp</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>matched</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name><name>fctx</name><operator>-&gt;</operator><name>last_node</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>matched</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>mctx</name><operator>-&gt;</operator><name>q</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>last_lvl</name></name> <operator>=</operator> <name>lvl</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name><name>fctx</name><operator>-&gt;</operator><name>matched</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_jql_match_expression_node</name><parameter_list>(<parameter><decl><type><name>JQP_EXPR_NODE</name> <modifier>*</modifier></type><name>en</name></decl></parameter>, <parameter><decl><type><name>MCTX</name> <modifier>*</modifier></type><name>mctx</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>MENCTX</name> <modifier>*</modifier></type><name>enctx</name> <init>= <expr><name><name>en</name><operator>-&gt;</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>enctx</name><operator>-&gt;</operator><name>matched</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>prev</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>en</name> <operator>=</operator> <name><name>en</name><operator>-&gt;</operator><name>chain</name></name></expr>;</init> <condition><expr><name>en</name></expr>;</condition> <incr><expr><name>en</name> <operator>=</operator> <name><name>en</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>matched</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>en</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_EXPR_NODE_TYPE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>matched</name> <operator>=</operator> <call><name>_jql_match_expression_node</name><argument_list>(<argument><expr><name>en</name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>en</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_FILTER_TYPE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>matched</name> <operator>=</operator> <call><name>_jql_match_filter</name><argument_list>(<argument><expr><operator>(</operator><name>JQP_FILTER</name><operator>*</operator><operator>)</operator> <name>en</name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>rcp</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>JBL_VCMD_TERMINATE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>JQP_JOIN</name> <modifier>*</modifier></type><name>join</name> <init>= <expr><name><name>en</name><operator>-&gt;</operator><name>join</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>join</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>matched</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>join</name><operator>-&gt;</operator><name>negate</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>matched</name> <operator>=</operator> <operator>!</operator><name>matched</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>join</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>JQP_JOIN_AND</name></expr>)</condition> <block>{<block_content> <comment type="line">// AND</comment>
        <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>prev</name> <operator>&amp;&amp;</operator> <name>matched</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>prev</name> <operator>||</operator> <name>matched</name></expr>)</condition> <block>{<block_content>      <comment type="line">// OR</comment>
        <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>prev</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>jbl_visitor_cmd_t</name></type> <name>_jql_match_visitor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lvl</name></decl></parameter>, <parameter><decl><type><name>binn</name> <modifier>*</modifier></type><name>bv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>JBL_VCTX</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>nbuf</name><index>[<expr><name>IWNUMBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nkey</name> <init>= <expr><name>key</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQL</name></type> <name>q</name> <init>= <expr><name><name>vctx</name><operator>-&gt;</operator><name>op</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nkey</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwitoa</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nkey</name> <operator>=</operator> <name>nbuf</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>MCTX</name></type> <name>mctx</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>lvl</name>  <operator>=</operator> <name>lvl</name></expr>,
    <expr><operator>.</operator><name>bv</name>   <operator>=</operator> <name>bv</name></expr>,
    <expr><operator>.</operator><name>key</name>  <operator>=</operator> <name>nkey</name></expr>,
    <expr><operator>.</operator><name>vctx</name> <operator>=</operator> <name>vctx</name></expr>,
    <expr><operator>.</operator><name>q</name>    <operator>=</operator> <name>q</name></expr>,
    <expr><operator>.</operator><name>aux</name>  <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>aux</name></name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>matched</name></name> <operator>=</operator> <call><name>_jql_match_expression_node</name><argument_list>(<argument><expr><name><name>mctx</name><operator>.</operator><name>aux</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mctx</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>rcp</name> <operator>||</operator> <name><name>q</name><operator>-&gt;</operator><name>matched</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_VCMD_TERMINATE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>dirty</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_jql_need_deeper_match</name><argument_list>(<argument><expr><name><name>mctx</name><operator>.</operator><name>aux</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>, <argument><expr><name>lvl</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>JBL_VCMD_SKIP_NESTED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jql_matched</name><parameter_list>(<parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JBL_VCTX</name></type> <name>vctx</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>bn</name> <operator>=</operator> <operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr>,
    <expr><operator>.</operator><name>op</name> <operator>=</operator> <name>q</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQP_EXPR_NODE</name> <modifier>*</modifier></type><name>en</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>expr</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>en</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JQP_EXPR_NODE_FLAG_PK</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>matched</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>jql_reset</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>en</name><operator>-&gt;</operator><name>chain</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>en</name><operator>-&gt;</operator><name>chain</name><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>en</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>en</name> <operator>=</operator> <name><name>en</name><operator>-&gt;</operator><name>chain</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>en</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_FILTER_TYPE</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>JQP_NODE</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><operator>(</operator><operator>(</operator><name>JQP_FILTER</name><operator>*</operator><operator>)</operator> <name>en</name><operator>)</operator><operator>-&gt;</operator><name>node</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>n</name><operator>-&gt;</operator><name>ntype</name></name> <operator>==</operator> <name>JQP_NODE_ANYS</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>n</name><operator>-&gt;</operator><name>ntype</name></name> <operator>==</operator> <name>JQP_NODE_ANY</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// Single /* | /** matches anything</comment>
        <expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>matched</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_jbl_visit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vctx</name></expr></argument>, <argument><expr><name>_jql_match_visitor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>vctx</name><operator>.</operator><name>pool</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name><name>vctx</name><operator>.</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>matched</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jql_error</name><parameter_list>(<parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>q</name> <operator>&amp;&amp;</operator> <name><name>q</name><operator>-&gt;</operator><name>aux</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>xerr</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="string">""</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jql_first_anchor</name><parameter_list>(<parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>q</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>first_anchor</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>jql_has_apply</name><parameter_list>(<parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>q</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>apply</name></name> <operator>||</operator> <name><name>q</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>apply_placeholder</name></name> <operator>||</operator> <operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>qmode</name></name> <operator>&amp;</operator> <operator>(</operator><name>JQP_QRY_APPLY_DEL</name> <operator>|</operator> <name>JQP_QRY_APPLY_UPSERT</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>jql_has_apply_upsert</name><parameter_list>(<parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>qmode</name></name> <operator>&amp;</operator> <name>JQP_QRY_APPLY_UPSERT</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>jql_has_apply_delete</name><parameter_list>(<parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>qmode</name></name> <operator>&amp;</operator> <name>JQP_QRY_APPLY_DEL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>jql_has_projection</name><parameter_list>(<parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>q</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>projection</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>jql_has_orderby</name><parameter_list>(<parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>q</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>orderby_num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>jql_has_aggregate_count</name><parameter_list>(<parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>qmode</name></name> <operator>&amp;</operator> <name>JQP_QRY_AGGREGATE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jql_get_skip</name><parameter_list>(<parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>JQP_AUX</name></name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>skip</name> <init>= <expr><name><name>aux</name><operator>-&gt;</operator><name>skip</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>_jql_unit_to_jqval</name><argument_list>(<argument><expr><name>aux</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>val</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JQVAL_I64</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>val</name><operator>-&gt;</operator><name>vi64</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <comment type="line">// -V522</comment>
    <return>return <expr><name>JQL_ERROR_INVALID_PLACEHOLDER</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>vi64</name></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jql_get_limit</name><parameter_list>(<parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>JQP_AUX</name></name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>limit</name> <init>= <expr><name><name>aux</name><operator>-&gt;</operator><name>limit</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>limit</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>_jql_unit_to_jqval</name><argument_list>(<argument><expr><name>aux</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>val</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JQVAL_I64</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>val</name><operator>-&gt;</operator><name>vi64</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <comment type="line">// -V522</comment>
    <return>return <expr><name>JQL_ERROR_INVALID_PLACEHOLDER</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>vi64</name></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// ----------- JQL Projection</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROJ_MARK_PATH</name></cpp:macro>      <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROJ_MARK_KEEP</name></cpp:macro>      <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROJ_MARK_FROM_JOIN</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_PROJ_CTX</name> <block>{
  <decl_stmt><decl><type><name>JQL</name></type> <name>q</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQP_PROJECTION</name> <modifier>*</modifier></type><name>proj</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBEXEC</name> <modifier>*</modifier></type><name>exec_ctx</name></decl>;</decl_stmt> <comment type="line">// Optional!</comment>
}</block></struct></type> <name>PROJ_CTX</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_jql_proj_mark_up</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>amask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>amask</name></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>parent</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PROJ_MARK_PATH</name></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_jql_proj_matched</name><parameter_list>(
  <parameter><decl><type><name>int16_t</name></type> <name>lvl</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>n</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>,
  <parameter><decl><type><name>JBN_VCTX</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>, <parameter><decl><type><name>JQP_PROJECTION</name> <modifier>*</modifier></type><name>proj</name></decl></parameter>,
  <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>proj</name><operator>-&gt;</operator><name>cnt</name></name> <operator>&lt;=</operator> <name>lvl</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>proj</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;=</operator> <name>lvl</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>proj</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>lvl</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>proj</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>lvl</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>JQP_STRING</name> <modifier>*</modifier></type><name>ps</name> <init>= <expr><name><name>proj</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lvl</name></expr>;</condition> <incr><expr><name>ps</name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>  <comment type="line">// -V529</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_PROJFIELD</name></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>JQP_STRING</name> <modifier>*</modifier></type><name>sn</name> <init>= <expr><name>ps</name></expr></init></decl>;</init> <condition><expr><name>sn</name></expr>;</condition> <incr><expr><name>sn</name> <operator>=</operator> <name><name>sn</name><operator>-&gt;</operator><name>subnext</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pv</name> <init>= <expr><ternary><condition><expr><call><name>IW_UNLIKELY</name><argument_list>(<argument><expr><name><name>sn</name><operator>-&gt;</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_PLACEHOLDER</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>JQVAL</name><operator>*</operator><operator>)</operator> <name><name>sn</name><operator>-&gt;</operator><name>opaque</name></name><operator>)</operator><operator>-&gt;</operator><name>vstr</name></expr> </then><else>: <expr><name><name>sn</name><operator>-&gt;</operator><name>value</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pvlen</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pvlen</name> <operator>==</operator> <name>keylen</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>pv</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>proj</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>lvl</name></expr>;</expr_stmt>
          <return>return <expr><operator>(</operator><name><name>proj</name><operator>-&gt;</operator><name>cnt</name></name> <operator>==</operator> <name>lvl</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pv</name> <init>= <expr><ternary><condition><expr><call><name>IW_UNLIKELY</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_PLACEHOLDER</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>JQVAL</name><operator>*</operator><operator>)</operator> <name><name>ps</name><operator>-&gt;</operator><name>opaque</name></name><operator>)</operator><operator>-&gt;</operator><name>vstr</name></expr> </then><else>: <expr><name><name>ps</name><operator>-&gt;</operator><name>value</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>pvlen</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>pvlen</name> <operator>==</operator> <name>keylen</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>pv</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>pv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>proj</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>lvl</name></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><name><name>proj</name><operator>-&gt;</operator><name>cnt</name></name> <operator>==</operator> <name>lvl</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_jql_proj_join_matched</name><parameter_list>(
  <parameter><decl><type><name>int16_t</name></type> <name>lvl</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>n</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>,
  <parameter><decl><type><name>JBN_VCTX</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>, <parameter><decl><type><name>JQP_PROJECTION</name> <modifier>*</modifier></type><name>proj</name></decl></parameter>,
  <parameter><decl><type><name>JBL</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
  <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>PROJ_CTX</name> <modifier>*</modifier></type><name>pctx</name> <init>= <expr><name><name>vctx</name><operator>-&gt;</operator><name>op</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>proj</name><operator>-&gt;</operator><name>cnt</name></name> <operator>!=</operator> <name>lvl</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>_jql_proj_matched</name><argument_list>(<argument><expr><name>lvl</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>vctx</name></expr></argument>, <argument><expr><name>proj</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pv</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>spos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQP_STRING</name> <modifier>*</modifier></type><name>ps</name> <init>= <expr><name><name>proj</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lvl</name></expr>;</condition> <incr><expr><name>ps</name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>  <comment type="line">// -V529</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_PROJFIELD</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>JQP_STRING</name> <modifier>*</modifier></type><name>sn</name> <init>= <expr><name>ps</name></expr></init></decl>;</init> <condition><expr><name>sn</name></expr>;</condition> <incr><expr><name>sn</name> <operator>=</operator> <name><name>sn</name><operator>-&gt;</operator><name>subnext</name></name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>pv</name> <operator>=</operator> <ternary><condition><expr><call><name>IW_UNLIKELY</name><argument_list>(<argument><expr><name><name>sn</name><operator>-&gt;</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_PLACEHOLDER</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>JQVAL</name><operator>*</operator><operator>)</operator> <name><name>sn</name><operator>-&gt;</operator><name>opaque</name></name><operator>)</operator><operator>-&gt;</operator><name>vstr</name></expr> </then><else>: <expr><name><name>sn</name><operator>-&gt;</operator><name>value</name></name></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name>spos</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>pv</name></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>spos</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>keylen</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>pv</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>proj</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>lvl</name></expr>;</expr_stmt>
          <return>return <expr><name>true</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>pv</name></expr></argument>, <argument><expr><name>spos</name> <operator>-</operator> <name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>pv</name> <operator>=</operator> <ternary><condition><expr><call><name>IW_UNLIKELY</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_PLACEHOLDER</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>JQVAL</name><operator>*</operator><operator>)</operator> <name><name>ps</name><operator>-&gt;</operator><name>opaque</name></name><operator>)</operator><operator>-&gt;</operator><name>vstr</name></expr> </then><else>: <expr><name><name>ps</name><operator>-&gt;</operator><name>value</name></name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>spos</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>pv</name></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>spos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>pv</name></expr></argument>, <argument><expr><name>spos</name> <operator>-</operator> <name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>nn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JQVAL</name></type> <name>jqval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JBEXEC</name> <modifier>*</modifier></type><name>exec_ctx</name> <init>= <expr><name><name>pctx</name><operator>-&gt;</operator><name>exec_ctx</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>coll</name> <init>= <expr><name>spos</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>coll</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>jql_node_to_jqval</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jqval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>jql_jqval_as_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jqval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// Unable to convert current node value as int number</comment>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>IWHMAP</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><name><name>exec_ctx</name><operator>-&gt;</operator><name>proj_joined_nodes_cache</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><name><name>exec_ctx</name><operator>-&gt;</operator><name>ux</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pool</name> <operator>=</operator> <name><name>exec_ctx</name><operator>-&gt;</operator><name>proj_joined_nodes_pool</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name>iwpool_create</name><argument_list>(<argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCGA</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>exec_ctx</name><operator>-&gt;</operator><name>proj_joined_nodes_pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cache</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>iwpool_used_size</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">10</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <comment type="line">// 10Mb</comment>
        <expr_stmt><expr><name><name>exec_ctx</name><operator>-&gt;</operator><name>proj_joined_nodes_cache</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>iwhmap_destroy</name><argument_list>(<argument><expr><name><name>exec_ctx</name><operator>-&gt;</operator><name>proj_joined_nodes_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cache</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name>iwpool_create</name><argument_list>(<argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 1Mb</comment>
        <expr_stmt><expr><call><name>RCGA</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cache</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>RCB</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name>cache</name> <operator>=</operator> <call><name>iwhmap_create</name><argument_list>(<argument><expr><name>jb_proj_node_cache_cmp</name></expr></argument>, <argument><expr><name>jb_proj_node_hash</name></expr></argument>, <argument><expr><name>jb_proj_node_kvfree</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>exec_ctx</name><operator>-&gt;</operator><name>proj_joined_nodes_cache</name></name> <operator>=</operator> <name>cache</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>_JBDOCREF</name></name></type> <name>ref</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>id</name>   <operator>=</operator> <name>id</name></expr>,
      <expr><operator>.</operator><name>coll</name> <operator>=</operator> <name>coll</name></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>nn</name> <operator>=</operator> <call><name>iwhmap_get</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nn</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jb_collection_join_resolver</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>coll</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>, <argument><expr><name>exec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>==</operator> <name>IW_ERROR_NOT_EXISTS</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>rc</name> <operator>==</operator> <name>IWKV_ERROR_NOTFOUND</name><operator>)</operator></expr>)</condition> <block>{<block_content>
          <comment type="line">// If collection is not exists or record is not found just</comment>
          <comment type="line">// keep all untouched</comment>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <goto>goto <name>finish</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_to_node</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nn</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name><name>struct</name> <name>_JBDOCREF</name></name> <modifier>*</modifier></type><name>refkey</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>refkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>RCGA</name><argument_list>(<argument><expr><name>refkey</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>refkey</name> <operator>=</operator> <name>ref</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwhmap_put</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>refkey</name></expr></argument>, <argument><expr><name>nn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>jbn_apply_from</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>nn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>proj</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>lvl</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>jbn_visitor_cmd_t</name></type> <name>_jql_proj_visitor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lvl</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>klidx</name></decl></parameter>, <parameter><decl><type><name>JBN_VCTX</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>PROJ_CTX</name> <modifier>*</modifier></type><name>pctx</name> <init>= <expr><name><name>vctx</name><operator>-&gt;</operator><name>op</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>keyptr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>IWNUMBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>keyptr</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>lvl</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>iwitoa</name><argument_list>(<argument><expr><name>klidx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>IWNUMBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>keyptr</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>klidx</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>keyptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <for>for <control>(<init><decl><type><name>JQP_PROJECTION</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>pctx</name><operator>-&gt;</operator><name>proj</name></name></expr></init></decl>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>flags</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>matched</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>JQP_PROJECTION_FLAG_JOINS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>matched</name> <operator>=</operator> <call><name>_jql_proj_join_matched</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <name>lvl</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>keyptr</name></expr></argument>, <argument><expr><name>klidx</name></expr></argument>, <argument><expr><name>vctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>matched</name> <operator>=</operator> <call><name>_jql_proj_matched</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <name>lvl</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>keyptr</name></expr></argument>, <argument><expr><name>klidx</name></expr></argument>, <argument><expr><name>vctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><operator>*</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>matched</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>JQP_PROJECTION_FLAG_EXCLUDE</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>JBN_VCMD_DELETE</name></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>JQP_PROJECTION_FLAG_INCLUDE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>_jql_proj_mark_up</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>PROJ_MARK_KEEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>JQP_PROJECTION_FLAG_JOINS</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>pctx</name><operator>-&gt;</operator><name>q</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>has_keep_projections</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>_jql_proj_mark_up</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>PROJ_MARK_KEEP</name> <operator>|</operator> <name>PROJ_MARK_FROM_JOIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>jbn_visitor_cmd_t</name></type> <name>_jql_proj_keep_visitor</name><parameter_list>(
  <parameter><decl><type><name>int</name></type> <name>lvl</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>klidx</name></decl></parameter>, <parameter><decl><type><name>JBN_VCTX</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>,
  <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>lvl</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>n</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROJ_MARK_PATH</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROJ_MARK_KEEP</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>n</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROJ_MARK_FROM_JOIN</name><operator>)</operator></expr> ?</condition><then> <expr><name>JBL_VCMD_OK</name></expr> </then><else>: <expr><name>JBL_VCMD_SKIP_NESTED</name></expr></else></ternary></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>JBN_VCMD_DELETE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jql_project</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>JBEXEC</name> <modifier>*</modifier></type><name>exec_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>has_exclude_all_projection</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbn_data</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JQP_PROJECTION</name> <modifier>*</modifier></type><name>proj</name> <init>= <expr><name><name>aux</name><operator>-&gt;</operator><name>projection</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PROJ_CTX</name></type> <name>pctx</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>q</name>        <operator>=</operator> <name>q</name></expr>,
    <expr><operator>.</operator><name>proj</name>     <operator>=</operator> <name>proj</name></expr>,
    <expr><operator>.</operator><name>pool</name>     <operator>=</operator> <name>pool</name></expr>,
    <expr><operator>.</operator><name>exec_ctx</name> <operator>=</operator> <name>exec_ctx</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// No pool no exec_ctx</comment>
    <expr_stmt><expr><name><name>pctx</name><operator>.</operator><name>exec_ctx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>JQP_PROJECTION</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>proj</name></expr></init></decl>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>JQP_STRING</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</init> <condition><expr><name>s</name></expr>;</condition> <incr><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_PLACEHOLDER</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>opaque</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><operator>(</operator><name>JQVAL</name><operator>*</operator><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>opaque</name></name><operator>)</operator><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>JQVAL_STR</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>JQL_ERROR_INVALID_PLACEHOLDER_VALUE_TYPE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cnt</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>
  <decl_stmt><decl><type><name>JBN_VCTX</name></type> <name>vctx</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>root</name> <operator>=</operator> <name>root</name></expr>,
    <expr><operator>.</operator><name>op</name>   <operator>=</operator> <operator>&amp;</operator><name>pctx</name></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbn_visit</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vctx</name></expr></argument>, <argument><expr><name>_jql_proj_visitor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>has_keep_projections</name></name></expr>)</condition> <block>{<block_content> <comment type="line">// We have keep projections</comment>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbn_visit</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vctx</name></expr></argument>, <argument><expr><name>_jql_proj_keep_visitor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PROJ_MARK_PATH</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PROJ_MARK_KEEP</name></cpp:undef>

<comment type="line">//----------------------------------</comment>

<function><type><name>iwrc</name></type> <name>jql_apply</name><parameter_list>(<parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>apply_placeholder</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>pv</name> <init>= <expr><call><name>_jql_find_placeholder</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>apply_placeholder</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pv</name> <operator>||</operator> <operator>(</operator><name><name>pv</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JQVAL_JBLNODE</name><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>pv</name><operator>-&gt;</operator><name>vnode</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>JQL_ERROR_INVALID_PLACEHOLDER_VALUE_TYPE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>jbn_patch_auto</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>pv</name><operator>-&gt;</operator><name>vnode</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>apply</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>jbn_patch_auto</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>apply</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jql_project</name><parameter_list>(<parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>exec_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>projection</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>_jql_project</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>exec_ctx</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jql_apply_and_project</name><parameter_list>(<parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>exec_ctx</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>aux</name><operator>-&gt;</operator><name>apply</name></name> <operator>||</operator> <name><name>aux</name><operator>-&gt;</operator><name>apply_placeholder</name></name> <operator>||</operator> <name><name>aux</name><operator>-&gt;</operator><name>projection</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jbl_to_node</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>root</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>apply</name></name> <operator>||</operator> <name><name>aux</name><operator>-&gt;</operator><name>apply_placeholder</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_apply</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>projection</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_project</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>exec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_ecodefn</name><parameter_list>(<parameter><decl><type><name>locale_t</name></type> <name>locale</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ecode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>ecode</name> <operator>&gt;</operator> <name>_JQL_ERROR_START</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ecode</name> <operator>&lt;</operator> <name>_JQL_ERROR_END</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <switch>switch <condition>(<expr><name>ecode</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>JQL_ERROR_QUERY_PARSE</name></expr>:</case>
      <return>return <expr><literal type="string">"Query parsing error (JQL_ERROR_QUERY_PARSE)"</literal></expr>;</return>
    <case>case <expr><name>JQL_ERROR_INVALID_PLACEHOLDER</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid placeholder position (JQL_ERROR_INVALID_PLACEHOLDER)"</literal></expr>;</return>
    <case>case <expr><name>JQL_ERROR_UNSET_PLACEHOLDER</name></expr>:</case>
      <return>return <expr><literal type="string">"Found unset placeholder (JQL_ERROR_UNSET_PLACEHOLDER)"</literal></expr>;</return>
    <case>case <expr><name>JQL_ERROR_REGEXP_INVALID</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid regular expression (JQL_ERROR_REGEXP_INVALID)"</literal></expr>;</return>
    <case>case <expr><name>JQL_ERROR_SKIP_ALREADY_SET</name></expr>:</case>
      <return>return <expr><literal type="string">"Skip clause already specified (JQL_ERROR_SKIP_ALREADY_SET)"</literal></expr>;</return>
    <case>case <expr><name>JQL_ERROR_LIMIT_ALREADY_SET</name></expr>:</case>
      <return>return <expr><literal type="string">"Limit clause already specified (JQL_ERROR_SKIP_ALREADY_SET)"</literal></expr>;</return>
    <case>case <expr><name>JQL_ERROR_ORDERBY_MAX_LIMIT</name></expr>:</case>
      <return>return <expr><literal type="string">"Reached max number of asc/desc order clauses: 64 (JQL_ERROR_ORDERBY_MAX_LIMIT)"</literal></expr>;</return>
    <case>case <expr><name>JQL_ERROR_NO_COLLECTION</name></expr>:</case>
      <return>return <expr><literal type="string">"No collection specified in query (JQL_ERROR_NO_COLLECTION)"</literal></expr>;</return>
    <case>case <expr><name>JQL_ERROR_INVALID_PLACEHOLDER_VALUE_TYPE</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid type of placeholder value (JQL_ERROR_INVALID_PLACEHOLDER_VALUE_TYPE)"</literal></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jql_init</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_jql_initialized</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_jql_initialized</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>iwlog_register_ecodefn</name><argument_list>(<argument><expr><name>_ecodefn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
