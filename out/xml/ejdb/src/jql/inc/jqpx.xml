<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/ejdb/src/jql/inc/jqpx.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jqp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwconv.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/utf8proc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ORDER_BY_CLAUSES</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JQRC</name><parameter_list>(<parameter><type><name>yy_</name></type></parameter>, <parameter><type><name>rc_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {           \
    iwrc __rc = (rc_);                  \
    if (__rc) _jqp_fatal(yy_, __rc); \
} while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_jqp_debug</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"TEXT=%s\n"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_jqp_fatal</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><name>iwrc</name></type> <name>rc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>fatal_jmp</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>_jqp_malloc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_yycontext</name></name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>fatal_jmp</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>_jqp_realloc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_yycontext</name></name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>fatal_jmp</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jqp_aux_set_input</name><parameter_list>(<parameter><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>iwpool_alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>aux</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">//-----------------</comment>

<function><type><name>IW_INLINE</name> <name>char</name><modifier>*</modifier></type> <name>_jqp_strdup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_yycontext</name></name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>iwpool_strdup</name><argument_list>(<argument><expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JQPUNIT</name><modifier>*</modifier></type> <name>_jqp_unit</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>iwpool_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>JQPUNIT</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JQP_STACK</name><modifier>*</modifier></type> <name>_jqp_push</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQP_STACK</name> <modifier>*</modifier></type><name>stack</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>stackn</name></name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>stackpool</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>stackpool</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>stack</name> <operator>=</operator> <operator>&amp;</operator><name><name>aux</name><operator>-&gt;</operator><name>stackpool</name><index>[<expr><name><name>aux</name><operator>-&gt;</operator><name>stackn</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>stack</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>aux</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>stack</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>stackn</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>stack</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// -V575</comment>
  <expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>aux</name><operator>-&gt;</operator><name>stack</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>stack</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>aux</name><operator>-&gt;</operator><name>stack</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <name>stack</name></expr>;</expr_stmt>
  <return>return <expr><name><name>aux</name><operator>-&gt;</operator><name>stack</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JQP_STACK</name></type> <name>_jqp_pop</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQP_STACK</name> <modifier>*</modifier></type><name>stack</name> <init>= <expr><name><name>aux</name><operator>-&gt;</operator><name>stack</name></name></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>stack</name> <operator>||</operator> <operator>(</operator><name><name>aux</name><operator>-&gt;</operator><name>stackn</name></name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error2</name><argument_list>(<argument><expr><literal type="string">"Unbalanced stack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <name><name>stack</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>stack</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>*</operator><name>stack</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>stackn</name></name><operator>--</operator> <operator>&gt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>stackpool</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>stackpool</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_jqp_unit_push</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQP_STACK</name> <modifier>*</modifier></type><name>stack</name> <init>= <expr><call><name>_jqp_push</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>STACK_UNIT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>unit</name></name> <operator>=</operator> <name>unit</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JQPUNIT</name><modifier>*</modifier></type> <name>_jqp_unit_pop</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQP_STACK</name></type> <name>stack</name> <init>= <expr><call><name>_jqp_pop</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>stack</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>STACK_UNIT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"Unexpected type: %d"</literal></expr></argument>, <argument><expr><name><name>stack</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><name>stack</name><operator>.</operator><name>unit</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_jqp_string_push</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQP_STACK</name> <modifier>*</modifier></type><name>stack</name> <init>= <expr><call><name>_jqp_push</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>STACK_STRING</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>dup</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <call><name>iwpool_strdup</name><argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name><name>stack</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>_jqp_string_pop</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQP_STACK</name></type> <name>stack</name> <init>= <expr><call><name>_jqp_pop</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>stack</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>STACK_STRING</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"Unexpected type: %d"</literal></expr></argument>, <argument><expr><name><name>stack</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><name>stack</name><operator>.</operator><name>str</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JQPUNIT</name><modifier>*</modifier></type> <name>_jqp_string</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><name>jqp_string_flavours_t</name></type> <name>flavour</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><call><name>_jqp_unit</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQP_STRING_TYPE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>flavour</name></name> <operator>|=</operator> <name>flavour</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>_jqp_strdup</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>unit</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JQPUNIT</name><modifier>*</modifier></type> <name>_jqp_number</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><name>jqp_int_flavours_t</name></type> <name>flavour</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><call><name>_jqp_unit</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eptr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ival</name> <init>= <expr><call><name>strtoll</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>eptr</name> <operator>==</operator> <name>text</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>ERANGE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"Invalid number: %s"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>eptr</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>eptr</name> <operator>==</operator> <literal type="char">'e'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>eptr</name> <operator>==</operator> <literal type="char">'E'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQP_DOUBLE_TYPE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>dblval</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>strtod</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>eptr</name> <operator>==</operator> <name>text</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>ERANGE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"Invalid double number: %s"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>dblval</name><operator>.</operator><name>flavour</name></name> <operator>|=</operator> <name>flavour</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQP_INTEGER_TYPE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>intval</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>ival</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>intval</name><operator>.</operator><name>flavour</name></name> <operator>|=</operator> <name>flavour</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>unit</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JQPUNIT</name><modifier>*</modifier></type> <name>_jqp_json_number</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><call><name>_jqp_unit</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eptr</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQP_JSON_TYPE</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ival</name> <init>= <expr><call><name>strtoll</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>eptr</name> <operator>==</operator> <name>text</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>ERANGE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"Invalid number: %s"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>eptr</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>eptr</name> <operator>==</operator> <literal type="char">'e'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>eptr</name> <operator>==</operator> <literal type="char">'E'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>jn</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>JBV_F64</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>jn</name><operator>.</operator><name>vf64</name></name> <operator>=</operator> <call><name>strtod</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>eptr</name> <operator>==</operator> <name>text</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>ERANGE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"Invalid double number: %s"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>jn</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>JBV_I64</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>jn</name><operator>.</operator><name>vi64</name></name> <operator>=</operator> <name>ival</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>unit</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JQPUNIT</name><modifier>*</modifier></type> <name>_jqp_placeholder</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><call><name>_jqp_unit</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQP_STRING_TYPE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>flavour</name></name> <operator>|=</operator> <name>JQP_STR_PLACEHOLDER</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>nbuf</name><index>[<expr><name>IWNUMBUF_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>nbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>iwitoa</name><argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>num_placeholders</name></name><operator>++</operator></expr></argument>, <argument><expr><name>nbuf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>IWNUMBUF_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>nbuf</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>_jqp_strdup</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>_jqp_strdup</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>aux</name><operator>-&gt;</operator><name>start_placeholder</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>start_placeholder</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>unit</name><operator>-&gt;</operator><name>string</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>end_placeholder</name></name> <operator>=</operator> <name><name>aux</name><operator>-&gt;</operator><name>start_placeholder</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>end_placeholder</name><operator>-&gt;</operator><name>placeholder_next</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>unit</name><operator>-&gt;</operator><name>string</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>end_placeholder</name></name> <operator>=</operator> <name><name>aux</name><operator>-&gt;</operator><name>end_placeholder</name><operator>-&gt;</operator><name>placeholder_next</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>unit</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>int</name></type> <name>_jql_hex</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'f'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'F'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_jqp_unescape_json_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ds</name> <init>= <expr><name>d</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>de</name> <init>= <expr><name>d</name> <operator>+</operator> <name>dlen</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>d</name> <operator>-</operator> <name>ds</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
      <switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="char">'\\'</literal></expr>:</case>
        <case>case <expr><literal type="char">'/'</literal></expr>:</case>
        <case>case <expr><literal type="char">'"'</literal></expr>:</case>
          <if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <name>de</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><operator>++</operator><name>p</name></expr><operator>,</operator> <expr><operator>++</operator><name>d</name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="char">'b'</literal></expr>:</case>
          <if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <name>de</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <literal type="char">'\b'</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><operator>++</operator><name>p</name></expr><operator>,</operator> <expr><operator>++</operator><name>d</name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="char">'f'</literal></expr>:</case>
          <if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <name>de</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <literal type="char">'\f'</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><operator>++</operator><name>p</name></expr><operator>,</operator> <expr><operator>++</operator><name>d</name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="char">'n'</literal></expr>:</case>
        <case>case <expr><literal type="char">'r'</literal></expr>:</case>
          <if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <name>de</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><operator>++</operator><name>p</name></expr><operator>,</operator> <expr><operator>++</operator><name>d</name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="char">'t'</literal></expr>:</case>
          <if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <name>de</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><operator>++</operator><name>p</name></expr><operator>,</operator> <expr><operator>++</operator><name>d</name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="char">'u'</literal></expr>:</case> <block>{<block_content>
          <decl_stmt><decl><type><name>uint32_t</name></type> <name>cp</name></decl>, <decl><type ref="prev"/><name>cp2</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>h1</name></decl>, <decl><type ref="prev"/><name>h2</name></decl>, <decl><type ref="prev"/><name>h3</name></decl>, <decl><type ref="prev"/><name>h4</name></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(  <expr><operator>(</operator><operator>(</operator><name>h1</name> <operator>=</operator> <call><name>_jql_hex</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>h2</name> <operator>=</operator> <call><name>_jql_hex</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator>
             <operator>||</operator> <operator>(</operator><operator>(</operator><name>h3</name> <operator>=</operator> <call><name>_jql_hex</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>h4</name> <operator>=</operator> <call><name>_jql_hex</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>JBL_ERROR_PARSE_INVALID_CODEPOINT</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>cp</name> <operator>=</operator> <name>h1</name> <operator>&lt;&lt;</operator> <literal type="number">12</literal> <operator>|</operator> <name>h2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name>h3</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal> <operator>|</operator> <name>h4</name></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cp</name> <operator>&amp;</operator> <literal type="number">0xfc00</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xd800</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(  <expr><operator>(</operator><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'u'</literal><operator>)</operator>
               <operator>||</operator> <operator>(</operator><operator>(</operator><name>h1</name> <operator>=</operator> <call><name>_jql_hex</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>h2</name> <operator>=</operator> <call><name>_jql_hex</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator>
               <operator>||</operator> <operator>(</operator><operator>(</operator><name>h3</name> <operator>=</operator> <call><name>_jql_hex</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>h4</name> <operator>=</operator> <call><name>_jql_hex</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>JBL_ERROR_PARSE_INVALID_CODEPOINT</name></expr>;</expr_stmt>
              <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>cp2</name> <operator>=</operator> <name>h1</name> <operator>&lt;&lt;</operator> <literal type="number">12</literal> <operator>|</operator> <name>h2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name>h3</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal> <operator>|</operator> <name>h4</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cp2</name> <operator>&amp;</operator> <literal type="number">0xfc00</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0xdc00</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>JBL_ERROR_PARSE_INVALID_CODEPOINT</name></expr>;</expr_stmt>
              <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>cp</name> <operator>=</operator> <literal type="number">0x10000</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>cp</name> <operator>-</operator> <literal type="number">0xd800</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>cp2</name> <operator>-</operator> <literal type="number">0xdc00</literal><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>utf8proc_codepoint_valid</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>JBL_ERROR_PARSE_INVALID_CODEPOINT</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>uchars</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>utf8proc_ssize_t</name></type> <name>ulen</name> <init>= <expr><call><name>utf8proc_encode_char</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>uchars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ulen</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <name>de</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name><name>uchars</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><operator>++</operator><name>d</name></expr>;</expr_stmt>
          </block_content>}</block></for>
          <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <default>default:</default>
          <if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <name>de</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><operator>++</operator><name>d</name></expr>;</expr_stmt>
      </block_content>}</block></switch>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <name>de</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>++</operator><name>d</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>JQL_ERROR_QUERY_PARSE</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JQPUNIT</name><modifier>*</modifier></type> <name>_jqp_unescaped_string</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_yycontext</name></name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><name>jqp_string_flavours_t</name></type> <name>flv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><call><name>_jqp_unit</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQP_STRING_TYPE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>flavour</name></name> <operator>|=</operator> <name>flv</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>_jqp_unescape_json_string</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aux</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>rc</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name><name>aux</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            <comment type="line">// -V547</comment>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><call><name>iwpool_alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>aux</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dest</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>_jqp_unescape_json_string</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aux</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>rc</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name><name>aux</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            <comment type="line">// -V547</comment>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>dest</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> <comment type="line">// -V1004</comment>
  <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>
  <return>return <expr><name>unit</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JQPUNIT</name><modifier>*</modifier></type> <name>_jqp_json_string</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_yycontext</name></name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><call><name>_jqp_unit</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQP_JSON_TYPE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>jn</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>JBV_STR</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>_jqp_unescape_json_string</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aux</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>rc</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name><name>aux</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            <comment type="line">// -V547</comment>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><call><name>iwpool_alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>aux</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dest</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>_jqp_unescape_json_string</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aux</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>rc</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name><name>aux</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            <comment type="line">// -V547</comment>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>dest</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> <comment type="line">// -V1004</comment>
  <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>jn</name><operator>.</operator><name>vptr</name></name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>jn</name><operator>.</operator><name>vsize</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
  <return>return <expr><name>unit</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JQPUNIT</name><modifier>*</modifier></type> <name>_jqp_json_pair</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JQP_JSON_TYPE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>val</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JQP_JSON_TYPE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>jn</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>JBV_STR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error2</name><argument_list>(<argument><expr><literal type="string">"Invalid arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>jn</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>jn</name><operator>.</operator><name>vptr</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>jn</name><operator>.</operator><name>klidx</name></name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>jn</name><operator>.</operator><name>vsize</name></name></expr>;</expr_stmt>
  <return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JQPUNIT</name><modifier>*</modifier></type> <name>_jqp_json_collect</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><name>jbl_type_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>until</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>_jqp_unit</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQP_JSON_TYPE</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>jn</name> <init>= <expr><operator>&amp;</operator><name><name>ret</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>jn</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>jn</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>stack</name></name> <operator>&amp;&amp;</operator> <name><name>aux</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>STACK_UNIT</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><name><name>aux</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>unit</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>unit</name> <operator>==</operator> <name>until</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_jqp_pop</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JQP_JSON_TYPE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"Unexpected type: %d"</literal></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>ju</name> <init>= <expr><operator>&amp;</operator><name><name>unit</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>jn</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>jn</name><operator>-&gt;</operator><name>child</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>jn</name><operator>-&gt;</operator><name>child</name></name> <operator>=</operator> <name>ju</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>ju</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>jn</name><operator>-&gt;</operator><name>child</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ju</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>jn</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>jn</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>ju</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>jn</name><operator>-&gt;</operator><name>child</name></name> <operator>=</operator> <name>ju</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>_jqp_pop</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JQPUNIT</name><modifier>*</modifier></type> <name>_jqp_json_true_false_null</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><call><name>_jqp_unit</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQP_JSON_TYPE</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>jn</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>JBV_NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>jn</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>JBV_BOOL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>jn</name><operator>.</operator><name>vbool</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>jn</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>JBV_BOOL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>jn</name><operator>.</operator><name>vbool</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"Invalid json value: %s"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>unit</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_jqp_op_negate</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>negate</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_jqp_op_negate_reset</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>negate</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JQPUNIT</name><modifier>*</modifier></type> <name>_jqp_unit_op</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><call><name>_jqp_unit</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQP_OP_TYPE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>negate</name></name> <operator>=</operator> <name><name>aux</name><operator>-&gt;</operator><name>negate</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>negate</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">"eq"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>JQP_OP_EQ</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">"gt"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>JQP_OP_GT</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">"&gt;="</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">"gte"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>JQP_OP_GTE</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">"&lt;"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">"lt"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>JQP_OP_LT</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">"&lt;="</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">"lte"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>JQP_OP_LTE</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">"in"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>JQP_OP_IN</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">"ni"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>JQP_OP_NI</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">"re"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>JQP_OP_RE</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">"~"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>JQP_OP_PREFIX</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"Invalid operation: %s"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>aux</name><operator>-&gt;</operator><name>start_op</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>start_op</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>unit</name><operator>-&gt;</operator><name>op</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>end_op</name></name> <operator>=</operator> <name><name>aux</name><operator>-&gt;</operator><name>start_op</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>end_op</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>unit</name><operator>-&gt;</operator><name>op</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>end_op</name></name> <operator>=</operator> <name><name>aux</name><operator>-&gt;</operator><name>end_op</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>unit</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JQPUNIT</name><modifier>*</modifier></type> <name>_jqp_unit_join</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><call><name>_jqp_unit</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQP_JOIN_TYPE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>join</name><operator>.</operator><name>negate</name></name> <operator>=</operator> <name><name>aux</name><operator>-&gt;</operator><name>negate</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>negate</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">"and"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>join</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>JQP_JOIN_AND</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">"or"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>join</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>JQP_JOIN_OR</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>unit</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JQPUNIT</name><modifier>*</modifier></type> <name>_jqp_expr</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>right</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>left</name> <operator>||</operator> <operator>!</operator><name>op</name> <operator>||</operator> <operator>!</operator><name>right</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error2</name><argument_list>(<argument><expr><literal type="string">"Invalid arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JQP_OP_TYPE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JQP_JOIN_TYPE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"Unexpected type: %d"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><call><name>_jqp_unit</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQP_EXPR_TYPE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>expr</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>expr</name><operator>.</operator><name>op</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>op</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>expr</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>
  <return>return <expr><name>unit</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JQPUNIT</name><modifier>*</modifier></type> <name>_jqp_pop_expr_chain</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>until</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>stack</name></name> <operator>&amp;&amp;</operator> <name><name>aux</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>STACK_UNIT</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><name><name>aux</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>unit</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_EXPR_TYPE</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>expr</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>expr</name><operator>.</operator><name>next</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>expr</name><operator>-&gt;</operator><name>expr</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>expr</name> <operator>=</operator> <name>unit</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_JOIN_TYPE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>expr</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>expr</name><operator>-&gt;</operator><name>expr</name><operator>.</operator><name>join</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>unit</name><operator>-&gt;</operator><name>join</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"Unexpected type: %d"</literal></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>_jqp_pop</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>unit</name> <operator>==</operator> <name>until</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>expr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JQPUNIT</name><modifier>*</modifier></type> <name>_jqp_projection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_yycontext</name></name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JQP_STRING_TYPE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"Unexpected type: %d"</literal></expr></argument>, <argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><call><name>_jqp_unit</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQP_PROJECTION_TYPE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>projection</name><operator>.</operator><name>value</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>string</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>projection</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>flags</name></expr>;</expr_stmt>
  <return>return <expr><name>unit</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JQPUNIT</name><modifier>*</modifier></type> <name>_jqp_pop_projection_nodes</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>until</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>first</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>stack</name></name> <operator>&amp;&amp;</operator> <name><name>aux</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>STACK_UNIT</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><name><name>aux</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>unit</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JQP_STRING_TYPE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"Unexpected type: %d"</literal></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>next</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>first</name><operator>-&gt;</operator><name>string</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_PROJFIELD</name></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>JQP_STRING</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>unit</name><operator>-&gt;</operator><name>string</name></name></expr></init></decl>;</init> <condition><expr><name>s</name></expr>;</condition> <incr><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>subnext</name></name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_PROJOIN</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>JQP_PROJECTION_FLAG_JOINS</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>JQP_PROJECTION_FLAG_INCLUDE</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>unit</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <comment type="line">// JOIN Projection?</comment>
      <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>flavour</name></name> <operator>|=</operator> <name>JQP_STR_PROJOIN</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>JQP_PROJECTION_FLAG_JOINS</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>flavour</name></name> <operator>|=</operator> <name>JQP_STR_PROJPATH</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>first</name> <operator>=</operator> <name>unit</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_jqp_pop</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>unit</name> <operator>==</operator> <name>until</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>flags</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>JQP_PROJECTION_FLAG_INCLUDE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>_jqp_projection</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JQPUNIT</name><modifier>*</modifier></type> <name>_jqp_push_joined_projection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_yycontext</name></name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>aux</name><operator>-&gt;</operator><name>stack</name></name> <operator>||</operator> <operator>(</operator><name><name>aux</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>STACK_STRING</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error2</name><argument_list>(<argument><expr><literal type="string">"Invalid stack state"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>projection</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>JQP_PROJECTION_FLAG_INCLUDE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>projection</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>JQP_PROJECTION_FLAG_EXCLUDE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>_jqp_pop</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jqp_unit_push</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JQPUNIT</name><modifier>*</modifier></type> <name>_jqp_pop_joined_projections</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>until</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>first</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>stack</name></name> <operator>&amp;&amp;</operator> <name><name>aux</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>STACK_UNIT</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><name><name>aux</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>unit</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JQP_PROJECTION_TYPE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"Unexpected type: %d"</literal></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>projection</name><operator>.</operator><name>next</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>first</name><operator>-&gt;</operator><name>projection</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>first</name> <operator>=</operator> <name>unit</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_jqp_pop</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>unit</name> <operator>==</operator> <name>until</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>first</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JQPUNIT</name><modifier>*</modifier></type> <name>_jqp_pop_projfields_chain</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>until</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>stack</name></name> <operator>&amp;&amp;</operator> <name><name>aux</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>STACK_UNIT</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><name><name>aux</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>unit</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JQP_STRING_TYPE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"Unexpected type: %d"</literal></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>flavour</name></name> <operator>|=</operator> <name>JQP_STR_PROJFIELD</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>subnext</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>field</name><operator>-&gt;</operator><name>string</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>unit</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <comment type="line">// JOIN Projection?</comment>
      <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>flavour</name></name> <operator>|=</operator> <name>JQP_STR_PROJOIN</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>field</name> <operator>=</operator> <name>unit</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_jqp_pop</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>unit</name> <operator>==</operator> <name>until</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>field</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JQPUNIT</name><modifier>*</modifier></type> <name>_jqp_pop_ordernodes</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>until</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>first</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>stack</name></name> <operator>&amp;&amp;</operator> <name><name>aux</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>STACK_UNIT</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><name><name>aux</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>unit</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JQP_STRING_TYPE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"Unexpected type: %d"</literal></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>subnext</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>first</name><operator>-&gt;</operator><name>string</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>first</name> <operator>=</operator> <name>unit</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_jqp_pop</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>unit</name> <operator>==</operator> <name>until</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>until</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JQPUNIT</name><modifier>*</modifier></type> <name>_jqp_node</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><call><name>_jqp_unit</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQP_NODE_TYPE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_EXPR_TYPE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>ntype</name></name> <operator>=</operator> <name>JQP_NODE_EXPR</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_STRING_TYPE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name><name>value</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>ntype</name></name> <operator>=</operator> <name>JQP_NODE_ANY</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"**"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>ntype</name></name> <operator>=</operator> <name>JQP_NODE_ANYS</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>ntype</name></name> <operator>=</operator> <name>JQP_NODE_FIELD</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"Invalid node value type: %d"</literal></expr></argument>, <argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>unit</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JQPUNIT</name><modifier>*</modifier></type> <name>_jqp_pop_node_chain</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>until</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>filter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>first</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>stack</name></name> <operator>&amp;&amp;</operator> <name><name>aux</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>STACK_UNIT</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><name><name>aux</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>unit</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JQP_NODE_TYPE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"Unexpected type: %d"</literal></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>next</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>first</name><operator>-&gt;</operator><name>node</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>first</name> <operator>=</operator> <name>unit</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_jqp_pop</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>unit</name> <operator>==</operator> <name>until</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error2</name><argument_list>(<argument><expr><literal type="string">"Invalid state"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>_jqp_unit</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQP_FILTER_TYPE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>node</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>first</name><operator>-&gt;</operator><name>node</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(  <expr><name><name>aux</name><operator>-&gt;</operator><name>stack</name></name>
     <operator>&amp;&amp;</operator> <operator>(</operator><name><name>aux</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>STACK_UNIT</name><operator>)</operator>
     <operator>&amp;&amp;</operator> <operator>(</operator><name><name>aux</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_STRING_TYPE</name><operator>)</operator>
     <operator>&amp;&amp;</operator> <operator>(</operator><name><name>aux</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>unit</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_ANCHOR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>anchor</name></name> <operator>=</operator> <call><name>_jqp_unit_pop</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>string</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>aux</name><operator>-&gt;</operator><name>first_anchor</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>first_anchor</name></name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>anchor</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>filter</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JQPUNIT</name><modifier>*</modifier></type> <name>_jqp_pop_filter_factor_chain</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>until</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQP_EXPR_NODE</name> <modifier>*</modifier></type><name>factor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>exprnode</name> <init>= <expr><call><name>_jqp_unit</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>stack</name></name> <operator>&amp;&amp;</operator> <name><name>aux</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>STACK_UNIT</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><name><name>aux</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>unit</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_JOIN_TYPE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>factor</name><operator>-&gt;</operator><name>join</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>unit</name><operator>-&gt;</operator><name>join</name></name></expr>;</expr_stmt> <comment type="line">// -V522</comment>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_EXPR_NODE_TYPE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_FILTER_TYPE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>JQP_EXPR_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>JQP_EXPR_NODE</name><operator>*</operator><operator>)</operator> <name>unit</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>factor</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>factor</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>factor</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"Unexpected type: %d"</literal></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>_jqp_pop</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>unit</name> <operator>==</operator> <name>until</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>exprnode</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQP_EXPR_NODE_TYPE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>exprnode</name><operator>-&gt;</operator><name>exprnode</name><operator>.</operator><name>chain</name></name> <operator>=</operator> <name>factor</name></expr>;</expr_stmt>
  <return>return <expr><name>exprnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_jqp_set_filters_expr</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JQP_EXPR_NODE_TYPE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"Unexpected type: %d"</literal></expr></argument>, <argument><expr><name><name>expr</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>_jqp_unit</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQP_QUERY_TYPE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>query</name><operator>.</operator><name>aux</name></name> <operator>=</operator> <name>aux</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>expr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>expr</name><operator>-&gt;</operator><name>exprnode</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>query</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>query</name><operator>-&gt;</operator><name>query</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JQPUNIT</name><modifier>*</modifier></type> <name>_jqp_create_filterexpr_pk</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>argument</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>anchor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <comment type="line">// Looking for optional</comment>
  <if_stmt><if>if <condition>(  <expr><name><name>aux</name><operator>-&gt;</operator><name>stack</name></name>
     <operator>&amp;&amp;</operator> <operator>(</operator><name><name>aux</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>STACK_UNIT</name><operator>)</operator>
     <operator>&amp;&amp;</operator> <operator>(</operator><name><name>aux</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_STRING_TYPE</name><operator>)</operator>
     <operator>&amp;&amp;</operator> <operator>(</operator><name><name>aux</name><operator>-&gt;</operator><name>stack</name><operator>-&gt;</operator><name>unit</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_ANCHOR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>anchor</name> <operator>=</operator> <call><name>_jqp_unit_pop</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>string</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>aux</name><operator>-&gt;</operator><name>first_anchor</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>first_anchor</name></name> <operator>=</operator> <name>anchor</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><call><name>_jqp_unit</name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JQP_EXPR_NODE_TYPE</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>JQP_EXPR_NODE_PK</name> <modifier>*</modifier></type><name>exprnode_pk</name> <init>= <expr><operator>&amp;</operator><name><name>unit</name><operator>-&gt;</operator><name>exprnode_pk</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>exprnode_pk</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>JQP_EXPR_NODE_FLAG_PK</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>exprnode_pk</name><operator>-&gt;</operator><name>anchor</name></name> <operator>=</operator> <name>anchor</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>exprnode_pk</name><operator>-&gt;</operator><name>argument</name></name> <operator>=</operator> <name>argument</name></expr>;</expr_stmt>
  <return>return <expr><name>unit</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_jqp_set_apply</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>unit</name> <operator>||</operator> <operator>!</operator><name><name>aux</name><operator>-&gt;</operator><name>query</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error2</name><argument_list>(<argument><expr><literal type="string">"Invalid arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_JSON_TYPE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>apply</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>unit</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>jn</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>apply_placeholder</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_STRING_TYPE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>unit</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_PLACEHOLDER</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>apply_placeholder</name></name> <operator>=</operator> <name><name>unit</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>apply</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"Unexpected type: %d"</literal></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_jqp_set_apply_delete</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>qmode</name></name> <operator>|=</operator> <name>JQP_QRY_APPLY_DEL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_jqp_set_apply_upsert</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>qmode</name></name> <operator>|=</operator> <name>JQP_QRY_APPLY_UPSERT</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jqp_set_apply</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_jqp_add_orderby</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JQP_STRING_TYPE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"Unexpected type for order by: %d"</literal></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>aux</name><operator>-&gt;</operator><name>orderby</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>orderby</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>unit</name><operator>-&gt;</operator><name>string</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>orderby</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>unit</name><operator>-&gt;</operator><name>string</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_jqp_set_skip</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JQP_INTEGER_TYPE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator>  <operator>(</operator><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_STRING_TYPE</name><operator>)</operator>
                                           <operator>&amp;&amp;</operator> <operator>(</operator><name><name>unit</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_PLACEHOLDER</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"Unexpected type for skip: %d"</literal></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_SKIP_ALREADY_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>skip</name></name> <operator>=</operator> <name>unit</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_jqp_set_limit</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JQP_INTEGER_TYPE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator>  <operator>(</operator><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_STRING_TYPE</name><operator>)</operator>
                                           <operator>&amp;&amp;</operator> <operator>(</operator><name><name>unit</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_PLACEHOLDER</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"Unexpected type for limit: %d"</literal></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>limit</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_LIMIT_ALREADY_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>limit</name></name> <operator>=</operator> <name>unit</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_jqp_set_aggregate_count</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>qmode</name></name> <operator>|=</operator> <name>JQP_QRY_COUNT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>projection</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="line">// No projections in aggregate mode</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_jqp_set_noidx</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>qmode</name></name> <operator>|=</operator> <name>JQP_QRY_NOIDX</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_jqp_set_inverse</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>qmode</name></name> <operator>|=</operator> <operator>(</operator><name>JQP_QRY_NOIDX</name> <operator>|</operator> <name>JQP_QRY_INVERSE</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_jqp_set_projection</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>, <parameter><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>unit</name> <operator>||</operator> <operator>!</operator><name><name>aux</name><operator>-&gt;</operator><name>query</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error2</name><argument_list>(<argument><expr><literal type="string">"Invalid arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_PROJECTION_TYPE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>JQP_PROJECTION</name> <modifier>*</modifier></type><name>proj</name> <init>= <expr><operator>&amp;</operator><name><name>unit</name><operator>-&gt;</operator><name>projection</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>JQP_PROJECTION</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>proj</name></expr></init></decl>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_PROJALIAS</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JQP_PROJECTION_FLAG_EXCLUDE</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>has_exclude_all_projection</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>proj</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>aux</name><operator>-&gt;</operator><name>has_keep_projections</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JQP_PROJECTION_FLAG_INCLUDE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>has_keep_projections</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>projection</name></name> <operator>=</operator> <name>proj</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"Unexpected type: %d"</literal></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>JQL_ERROR_QUERY_PARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_jqp_finish</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>JQP_STRING</name> <modifier>*</modifier></type><name>orderby</name> <init>= <expr><name><name>aux</name><operator>-&gt;</operator><name>orderby</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>( <init>;</init> <condition><expr><name>orderby</name></expr>;</condition> <incr><expr><operator>++</operator><name>cnt</name></expr><operator>,</operator> <expr><name>orderby</name> <operator>=</operator> <name><name>orderby</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&gt;=</operator> <name>MAX_ORDER_BY_CLAUSES</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JQL_ERROR_ORDERBY_MAX_LIMIT</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>orderby_num</name></name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>cnt</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>orderby_ptrs</name></name> <operator>=</operator> <call><name>iwpool_alloc</name><argument_list>(<argument><expr><name>cnt</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>JBL_PTR</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>aux</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>aux</name><operator>-&gt;</operator><name>orderby_ptrs</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>xstr</name> <operator>=</operator> <call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>xstr</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>orderby</name> <operator>=</operator> <name><name>aux</name><operator>-&gt;</operator><name>orderby</name></name></expr>;</expr_stmt>
    <for>for <control>( <init>;</init> <condition><expr><name>orderby</name></expr>;</condition> <incr><expr><name>orderby</name> <operator>=</operator> <name><name>orderby</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>iwxstr_clear</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>JQP_STRING</name> <modifier>*</modifier></type><name>on</name> <init>= <expr><name>orderby</name></expr></init></decl>;</init> <condition><expr><name>on</name></expr>;</condition> <incr><expr><name>on</name> <operator>=</operator> <name><name>on</name><operator>-&gt;</operator><name>subnext</name></name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwxstr_cat</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>iwxstr_cat</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><name><name>on</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>on</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_ptr_alloc_pool</name><argument_list>(<argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aux</name><operator>-&gt;</operator><name>orderby_ptrs</name><index>[<expr><name>cnt</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>aux</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>JBL_PTR</name></type> <name>ptr</name> <init>= <expr><name><name>aux</name><operator>-&gt;</operator><name>orderby_ptrs</name><index>[<expr><name>cnt</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>orderby</name><operator>-&gt;</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_NEGATE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>  <comment type="line">// asc/desc</comment>
      <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>xstr</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>orderby_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JQRC</name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jqp_aux_create</name><parameter_list>(<parameter><decl><type><name>JQP_AUX</name> <modifier>*</modifier><modifier>*</modifier></type><name>auxp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>auxp</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>auxp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>auxp</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><operator>*</operator><name>auxp</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>xerr</name></name> <operator>=</operator> <call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>aux</name><operator>-&gt;</operator><name>xerr</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <call><name>iwpool_create</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>aux</name><operator>-&gt;</operator><name>pool</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jqp_aux_set_input</name><argument_list>(<argument><expr><name>aux</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jqp_aux_destroy</name><argument_list>(<argument><expr><name>auxp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jqp_aux_destroy</name><parameter_list>(<parameter><decl><type><name>JQP_AUX</name> <modifier>*</modifier><modifier>*</modifier></type><name>auxp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><operator>*</operator><name>auxp</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>aux</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>auxp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>pool</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>xerr</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>xerr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>iwrc</name></type> <name>_iwxstr_cat2</name><parameter_list>(<parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>iwxstr_cat</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yyerror</name><parameter_list>(<parameter><decl><type><name>yycontext</name> <modifier>*</modifier></type><name>yy</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>yy</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xerr</name> <init>= <expr><name><name>aux</name><operator>-&gt;</operator><name>xerr</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>yy</name><operator>-&gt;</operator><name>__pos</name></name> <operator>&amp;&amp;</operator> <name><name>yy</name><operator>-&gt;</operator><name>__text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_iwxstr_cat2</name><argument_list>(<argument><expr><name>xerr</name></expr></argument>, <argument><expr><literal type="string">"near token: '"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_iwxstr_cat2</name><argument_list>(<argument><expr><name>xerr</name></expr></argument>, <argument><expr><name><name>yy</name><operator>-&gt;</operator><name>__text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_iwxstr_cat2</name><argument_list>(<argument><expr><name>xerr</name></expr></argument>, <argument><expr><literal type="string">"'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>yy</name><operator>-&gt;</operator><name>__pos</name></name> <operator>&lt;</operator> <name><name>yy</name><operator>-&gt;</operator><name>__limit</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>yy</name><operator>-&gt;</operator><name>__buf</name><index>[<expr><name><name>yy</name><operator>-&gt;</operator><name>__limit</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_iwxstr_cat2</name><argument_list>(<argument><expr><name>xerr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name><name>yy</name><operator>-&gt;</operator><name>__pos</name></name> <operator>&lt;</operator> <name><name>yy</name><operator>-&gt;</operator><name>__limit</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>yy</name><operator>-&gt;</operator><name>__buf</name><index>[<expr><name><name>yy</name><operator>-&gt;</operator><name>__pos</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>iwxstr_cat</name><argument_list>(<argument><expr><name>xerr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>_iwxstr_cat2</name><argument_list>(<argument><expr><name>xerr</name></expr></argument>, <argument><expr><literal type="string">" &lt;--- \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jqp_parse</name><parameter_list>(<parameter><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>yycontext</name></type> <name>yy</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>yy</name><operator>.</operator><name>aux</name></name> <operator>=</operator> <name>aux</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>setjmp</name><argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>fatal_jmp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>rc</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yyparse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yy</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>aux</name><operator>-&gt;</operator><name>rc</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>aux</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>JQL_ERROR_QUERY_PARSE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>yyerror</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>xerr</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>aux</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>JQL_SILENT_ON_PARSE_ERROR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name> <init>= <expr><literal type="string">"Syntax error: "</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>iwxstr_unshift</name><argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>xerr</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>xerr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>yyrelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>aux</name><operator>-&gt;</operator><name>rc</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT</name><parameter_list>(<parameter><type><name>data_</name></type></parameter>, <parameter><type><name>size_</name></type></parameter>, <parameter><type><name>ch_</name></type></parameter>, <parameter><type><name>count_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
    rc = pt(data_, size_, ch_, count_, op); \
    RCRET(rc); \
} while (0)</cpp:value></cpp:define>

<function_decl><type><name>IW_INLINE</name> <name>iwrc</name></type> <name>_print_placeholder</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>jbl_json_printer</name></type> <name>pt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jqp_print_projection_nodes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JQP_STRING</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>jbl_json_printer</name></type> <name>pt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><specifier>const</specifier> <name>JQP_STRING</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>p</name></expr></init></decl>;</init> <condition><expr><name>s</name></expr>;</condition> <incr><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_PROJALIAS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_PROJFIELD</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'{'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><specifier>const</specifier> <name>JQP_STRING</name> <modifier>*</modifier></type><name>pf</name> <init>= <expr><name>s</name></expr></init></decl>;</init> <condition><expr><name>pf</name></expr>;</condition> <incr><expr><name>pf</name> <operator>=</operator> <name><name>pf</name><operator>-&gt;</operator><name>subnext</name></name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pf</name><operator>-&gt;</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_PLACEHOLDER</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>RCR</name><argument_list>(<argument><expr><call><name>_print_placeholder</name><argument_list>(<argument><expr><name><name>pf</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><name><name>pf</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pf</name><operator>-&gt;</operator><name>subnext</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_PLACEHOLDER</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>RCR</name><argument_list>(<argument><expr><call><name>_print_placeholder</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jqp_print_projection</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JQP_PROJECTION</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>jbl_json_printer</name></type> <name>pt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JQP_PROJECTION_FLAG_EXCLUDE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="string">"- "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="string">"+ "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JQP_PROJECTION_FLAG_EXCLUDE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="string">"all - "</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jqp_print_projection_nodes</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jqp_print_apply</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JQP_QUERY</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>jbl_json_printer</name></type> <name>pt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>qmode</name></name> <operator>&amp;</operator> <name>JQP_QRY_APPLY_DEL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="string">"| del "</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>qmode</name></name> <operator>&amp;</operator> <name>JQP_QRY_APPLY_UPSERT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="string">"| upsert "</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="string">"| apply "</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>apply_placeholder</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>apply_placeholder</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>apply</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_as_json</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>apply</name></name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jqp_print_join</name><parameter_list>(<parameter><decl><type><name>jqp_op_t</name></type> <name>jqop</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>negate</name></decl></parameter>, <parameter><decl><type><name>jbl_json_printer</name></type> <name>pt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>jqop</name> <operator>==</operator> <name>JQP_OP_EQ</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>negate</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'!'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="string">"= "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>jqop</name> <operator>==</operator> <name>JQP_JOIN_AND</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="string">"and "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>negate</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="string">"not "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>jqop</name> <operator>==</operator> <name>JQP_JOIN_OR</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="string">"or "</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>negate</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="string">"not "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>negate</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="string">"not "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <switch>switch <condition>(<expr><name>jqop</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>JQP_OP_GT</name></expr>:</case>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JQP_OP_LT</name></expr>:</case>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JQP_OP_GTE</name></expr>:</case>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="string">"&gt;="</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JQP_OP_LTE</name></expr>:</case>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="string">"&lt;="</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JQP_OP_IN</name></expr>:</case>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="string">"in"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JQP_OP_RE</name></expr>:</case>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="string">"re"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JQP_OP_PREFIX</name></expr>:</case>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'~'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>IW_ERROR_ASSERTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_ASSERTION</name></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
  <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>iwrc</name></type> <name>_print_placeholder</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>jbl_json_printer</name></type> <name>pt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jqp_print_filter_node_expr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JQP_EXPR</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>jbl_json_printer</name></type> <name>pt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_EXPR_TYPE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>jqp_print_filter_node_expr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_STRING_TYPE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_QUOTED</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_QUOTED</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>IW_ERROR_ASSERTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>IW_ERROR_ASSERTION</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jqp_print_join</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>negate</name></name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_STRING_TYPE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_PLACEHOLDER</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_print_placeholder</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_JSON_TYPE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_as_json</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>jn</name></name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>IW_ERROR_ASSERTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>IW_ERROR_ASSERTION</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jqp_print_filter_node</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JQP_NODE</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>jbl_json_printer</name></type> <name>pt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><name><name>n</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>u</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_STRING_TYPE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>u</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_EXPR_TYPE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>JQP_EXPR</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>&amp;</operator><name><name>u</name><operator>-&gt;</operator><name>expr</name></name></expr></init></decl>;</init> <condition><expr><name>e</name></expr>;</condition> <incr><expr><name>e</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>join</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jqp_print_join</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>join</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>join</name><operator>-&gt;</operator><name>negate</name></name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jqp_print_filter_node_expr</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>IW_ERROR_ASSERTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>IW_ERROR_ASSERTION</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jqp_print_filter</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>JQP_QUERY</name>  <modifier>*</modifier></type><name>q</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>JQP_FILTER</name> <modifier>*</modifier></type><name>f</name></decl></parameter>,
  <parameter><decl><type><name>jbl_json_printer</name></type>  <name>pt</name></decl></parameter>,
  <parameter><decl><type><name>void</name>             <modifier>*</modifier></type><name>op</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>anchor</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>anchor</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>JQP_NODE</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></init></decl>;</init> <condition><expr><name>n</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jqp_print_filter_node</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jqp_print_expression_node</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>JQP_QUERY</name>     <modifier>*</modifier></type><name>q</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>JQP_EXPR_NODE</name> <modifier>*</modifier></type><name>en</name></decl></parameter>,
  <parameter><decl><type><name>jbl_json_printer</name></type>     <name>pt</name></decl></parameter>,
  <parameter><decl><type><name>void</name>                <modifier>*</modifier></type><name>op</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>inbraces</name> <init>= <expr><operator>(</operator><name>en</name> <operator>!=</operator> <name><name>q</name><operator>-&gt;</operator><name>aux</name><operator>-&gt;</operator><name>expr</name></name> <operator>&amp;&amp;</operator> <name><name>en</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_EXPR_NODE_TYPE</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>inbraces</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Primary key expression</comment>
  <if_stmt><if>if <condition>(<expr><name><name>en</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JQP_EXPR_NODE_FLAG_PK</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>JQP_EXPR_NODE_PK</name> <modifier>*</modifier></type><name>pk</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>en</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pk</name><operator>-&gt;</operator><name>anchor</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>anchor</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="string">"/="</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pk</name><operator>-&gt;</operator><name>argument</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>IW_ERROR_ASSERTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>IW_ERROR_ASSERTION</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pk</name><operator>-&gt;</operator><name>argument</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_STRING_TYPE</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pk</name><operator>-&gt;</operator><name>argument</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_PLACEHOLDER</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_print_placeholder</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>argument</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>argument</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pk</name><operator>-&gt;</operator><name>argument</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_JSON_TYPE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_as_json</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pk</name><operator>-&gt;</operator><name>argument</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>jn</name></name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>IW_ERROR_ASSERTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>IW_ERROR_ASSERTION</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><expr><name>en</name> <operator>=</operator> <name><name>en</name><operator>-&gt;</operator><name>chain</name></name></expr>;</init> <condition><expr><name>en</name></expr>;</condition> <incr><expr><name>en</name> <operator>=</operator> <name><name>en</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>en</name><operator>-&gt;</operator><name>join</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jqp_print_join</name><argument_list>(<argument><expr><name><name>en</name><operator>-&gt;</operator><name>join</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>en</name><operator>-&gt;</operator><name>join</name><operator>-&gt;</operator><name>negate</name></name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>en</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_EXPR_NODE_TYPE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jqp_print_expression_node</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>en</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>en</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_FILTER_TYPE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jqp_print_filter</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>JQP_FILTER</name><operator>*</operator><operator>)</operator> <name>en</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// -V1027</comment>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>IW_ERROR_ASSERTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>IW_ERROR_ASSERTION</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name>inbraces</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jqp_print_opts</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JQP_QUERY</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>jbl_json_printer</name></type> <name>pt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>JQP_STRING</name> <modifier>*</modifier></type><name>ob</name> <init>= <expr><name><name>aux</name><operator>-&gt;</operator><name>orderby</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>ob</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>c</name><operator>++</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="string">"\n "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_NEGATE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="string">" desc "</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="string">" asc "</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_PLACEHOLDER</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_print_placeholder</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// print orderby subnext chain</comment>
      <decl_stmt><decl><type><name>JQP_STRING</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name>ob</name></expr></init></decl>;</decl_stmt>
      <do>do <block>{<block_content>
        <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> while <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>subnext</name></name><operator>)</operator></expr>)</condition>;</do>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>ob</name> <operator>=</operator> <name><name>ob</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>skip</name></name> <operator>||</operator> <name><name>aux</name><operator>-&gt;</operator><name>limit</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="string">"\n "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="string">" skip "</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>skip</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_STRING_TYPE</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>skip</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_PLACEHOLDER</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_print_placeholder</name><argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>skip</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>skip</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>skip</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_INTEGER_TYPE</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>nbuf</name><index>[<expr><name>IWNUMBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>iwitoa</name><argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>skip</name><operator>-&gt;</operator><name>intval</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>, <argument><expr><name>IWNUMBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>limit</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="string">" limit "</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>limit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_STRING_TYPE</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>limit</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_PLACEHOLDER</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_print_placeholder</name><argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>limit</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>limit</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>limit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_INTEGER_TYPE</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>nbuf</name><index>[<expr><name>IWNUMBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>iwitoa</name><argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>limit</name><operator>-&gt;</operator><name>intval</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>, <argument><expr><name>IWNUMBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jqp_print_query</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JQP_QUERY</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>jbl_json_printer</name></type> <name>pt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>q</name> <operator>||</operator> <operator>!</operator><name>pt</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_jqp_print_expression_node</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>aux</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>apply_placeholder</name></name> <operator>||</operator> <name><name>aux</name><operator>-&gt;</operator><name>apply</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jqp_print_apply</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>projection</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jqp_print_projection</name><argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>projection</name></name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>skip</name></name> <operator>||</operator> <name><name>aux</name><operator>-&gt;</operator><name>limit</name></name> <operator>||</operator> <name><name>aux</name><operator>-&gt;</operator><name>orderby</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jqp_print_opts</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PT</name></cpp:undef>
</unit>
