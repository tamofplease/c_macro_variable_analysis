<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/ejdb/src/tests/ejdb_test5.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ejdb_test.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CUnit/Basic.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK</name><parameter_list>(<parameter><type><name>rc_</name></type></parameter>)</parameter_list></cpp:macro>               \
  <cpp:value>if (rc_)                     \
  {                            \
    iwlog_ecode_error3(rc_); \
    return 1;                \
  }</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>print_message</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print_message</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>                                          \
  <cpp:value>{                                                                    \
    iwlog_info("Thread[%u] | " fmt, (unsigned int) 0, ## __VA_ARGS__); \
  }</cpp:value></cpp:define>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// IWKV_NO_TRIM_ON_CLOSE</comment>
<function><type><name>iwrc</name></type> <name>get_ejdb</name><parameter_list>(<parameter><decl><type><name>EJDB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>EJDB_OPTS</name></type> <name>opts</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>kv</name>                         <operator>=</operator> <block>{
      <expr><operator>.</operator><name>path</name>                     <operator>=</operator> <literal type="string">"ejdb_test5.db"</literal></expr>,
      <expr><operator>.</operator><name>oflags</name>                   <operator>=</operator> <name>IWKV_NO_TRIM_ON_CLOSE</name> <operator>|</operator> <name>IWKV_TRUNC</name></expr>,
      <expr><operator>.</operator><name>wal</name>                      <operator>=</operator> <block>{
        <expr><operator>.</operator><name>savepoint_timeout_sec</name>  <operator>=</operator> <literal type="number">5</literal></expr>,
        <expr><operator>.</operator><name>checkpoint_timeout_sec</name> <operator>=</operator> <literal type="number">10</literal></expr>,
        <expr><operator>.</operator><name>wal_buffer_sz</name>          <operator>=</operator> <literal type="number">4096</literal></expr>,
        <expr><operator>.</operator><name>checkpoint_buffer_sz</name>   <operator>=</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>
      }</block></expr>,
    }</block></expr>,
    <expr><operator>.</operator><name>no_wal</name>                     <operator>=</operator> <literal type="number">0</literal></expr>,
    <expr><operator>.</operator><name>sort_buffer_sz</name>             <operator>=</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>, <comment type="line">// 1M</comment>
    <expr><operator>.</operator><name>document_buffer_sz</name>         <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal></expr>    <comment type="line">// 16K</comment>
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>print_message</name><argument_list>(<argument><expr><literal type="string">"step-1 ejdb_init"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>ejdb_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>print_message</name><argument_list>(<argument><expr><literal type="string">"step-2 ejdb_open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</comment>
<function><type><name>iwrc</name></type> <name>show_db_meta</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>   <comment type="line">// Json document</comment>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>ejdb_get_meta</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_as_json</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>, <argument><expr><name>jbl_fstream_json_printer</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>JBL_PRINT_CODEPOINTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>jbl</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</comment>
<function><type><name>iwrc</name></type> <name>add_record_large</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>collection</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>total</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>   <comment type="line">// Json document</comment>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>id</name></decl>;</decl_stmt>    <comment type="line">// Document id placeholder</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>json</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>ii</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>total</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>json</name></expr></argument>,
            <argument><expr><literal type="string">"{\"name\":\"Darko\", \"time_\":%d, \"largeValue\": \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"}"</literal></expr></argument>,
            <argument><expr><name>ii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jbl_from_json</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>, <argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_put_new</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>collection</name></expr></argument>, <argument><expr><name>jbl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>jbl</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>jbl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>jbl</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// delete function /////////////////////////////////////////////////////////////////////////////////////////////////////</comment>
<function><type><name>iwrc</name></type> <name>delete_record_large</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>collection</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQL</name></type> <name>q</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>deleteSql</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>deleteSql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>deleteSql</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>deleteSql</name></expr></argument>, <argument><expr><literal type="string">"(/[time_ &lt;= %ld ]) | del | asc /time_ limit %d count"</literal></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_message</name><argument_list>(<argument><expr><literal type="string">"sql=%s\n"</literal></expr></argument>, <argument><expr><name>deleteSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jql_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name>collection</name></expr></argument>, <argument><expr><name>deleteSql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>EJDB_EXEC</name></type> <name>ux</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>db</name> <operator>=</operator> <name>db</name></expr>,
    <expr><operator>.</operator><name>q</name>  <operator>=</operator> <name>q</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_exec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_message</name><argument_list>(<argument><expr><literal type="string">"delete successful"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>q</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jql_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</comment>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>get_ejdb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>collection</name> <init>= <expr><literal type="string">"collection"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>addTotal</name> <init>= <expr><literal type="number">20000</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>add_record_large</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>collection</name></expr></argument>, <argument><expr><name>addTotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>time</name> <init>= <expr><name>addTotal</name> <operator>-</operator> <literal type="number">10000</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr><literal type="number">10000</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>show_db_meta</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>delete_record_large</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>collection</name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>show_db_meta</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ejdb_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
