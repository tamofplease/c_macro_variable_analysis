<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/ejdb/src/tests/ejdb_test2.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ejdb_test.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CUnit/Basic.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>init_suite</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>ejdb_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clean_suite</name><parameter_list>()</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Test document sorting overflow on disk</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ejdb_test2_2</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>EJDB_OPTS</name></type> <name>opts</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>kv</name>                 <operator>=</operator> <block>{
      <expr><operator>.</operator><name>path</name>             <operator>=</operator> <literal type="string">"ejdb_test2_2.db"</literal></expr>,
      <expr><operator>.</operator><name>oflags</name>           <operator>=</operator> <name>IWKV_TRUNC</name></expr>
    }</block></expr>,
    <expr><operator>.</operator><name>document_buffer_sz</name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal></expr>,   <comment type="line">// 16K</comment>
    <expr><operator>.</operator><name>sort_buffer_sz</name>     <operator>=</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>, <comment type="line">// 1M</comment>
    <expr><operator>.</operator><name>no_wal</name>             <operator>=</operator> <name>true</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB_LIST</name></type> <name>list</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>vbufsz</name> <init>= <expr><literal type="number">512</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dbufsz</name> <init>= <expr><name>vbufsz</name> <operator>+</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vbuf</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>vbufsz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dbuf</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>dbufsz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_PTR_NOT_NULL_FATAL</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_PTR_NOT_NULL_FATAL</name><argument_list>(<argument><expr><name>dbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>, <argument><expr><literal type="char">'z'</literal></expr></argument>, <argument><expr><name>vbufsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>vbuf</name><index>[<expr><name>vbufsz</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>ejdb_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>dbuf</name></expr></argument>, <argument><expr><name>dbufsz</name></expr></argument>, <argument><expr><literal type="string">"{\"f\":%d, \"d\":\"%s\"}"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>vbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>put_json</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"c1"</literal></expr></argument>, <argument><expr><name>dbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <comment type="line">// Here is we will overflow sort buffer</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_list2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"c1"</literal></expr></argument>, <argument><expr><literal type="string">"/f | asc /f"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>EJDB_DOC</name></type> <name>doc</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</init> <condition><expr><name>doc</name></expr>;</condition> <incr><expr><name>doc</name> <operator>=</operator> <name><name>doc</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_at</name><argument_list>(<argument><expr><name><name>doc</name><operator>-&gt;</operator><name>raw</name></name></expr></argument>, <argument><expr><literal type="string">"/f"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>llv</name> <init>= <expr><call><name>jbl_get_i64</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>llv</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>ejdb_list_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>TEST21_1</name> <block>{
  <decl_stmt><decl><type><name>int</name></type>     <name>stage</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>cnt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>ejdb_test2_1_exec_visitor1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_EJDB_EXEC</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EJDB_DOC</name></type> <name>doc</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>step</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>TEST21_1</name></name> <modifier>*</modifier></type><name>tc</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jbl_at</name><argument_list>(<argument><expr><name><name>doc</name><operator>-&gt;</operator><name>raw</name></name></expr></argument>, <argument><expr><literal type="string">"/f"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>llv</name> <init>= <expr><call><name>jbl_get_i64</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>tc</name><operator>-&gt;</operator><name>cnt</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>tc</name><operator>-&gt;</operator><name>stage</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>stage</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>step</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>tc</name><operator>-&gt;</operator><name>stage</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>stage</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>step</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwxstr_printf</name><argument_list>(<argument><expr><name><name>tc</name><operator>-&gt;</operator><name>xstr</name></name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>llv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>cnt</name></name><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ejdb_test2_1</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>EJDB_OPTS</name></type> <name>opts</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>kv</name>       <operator>=</operator> <block>{
      <expr><operator>.</operator><name>path</name>   <operator>=</operator> <literal type="string">"ejdb_test2_1.db"</literal></expr>,
      <expr><operator>.</operator><name>oflags</name> <operator>=</operator> <name>IWKV_TRUNC</name></expr>
    }</block></expr>,
    <expr><operator>.</operator><name>no_wal</name>   <operator>=</operator> <name>true</name></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB_LIST</name></type> <name>list</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_PTR_NOT_NULL_FATAL</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>ejdb_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>put_json</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"{'f':2}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>put_json</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"{'f':1}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>put_json</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"{'f':3}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>put_json</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"{'a':'foo'}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>put_json</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"{'a':'gaz'}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>put_json</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"{'a':'bar'}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_list2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"not_exists"</literal></expr></argument>, <argument><expr><literal type="string">"/*"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>EJDB_DOC</name></type> <name>doc</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</init> <condition><expr><name>doc</name></expr>;</condition> <incr><expr><name>doc</name> <operator>=</operator> <name><name>doc</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ejdb_list_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_list2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"/*"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>EJDB_DOC</name></type> <name>doc</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</init> <condition><expr><name>doc</name></expr>;</condition> <incr><expr><name>doc</name> <operator>=</operator> <name><name>doc</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_clear</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_as_json</name><argument_list>(<argument><expr><name><name>doc</name><operator>-&gt;</operator><name>raw</name></name></expr></argument>, <argument><expr><name>jbl_xstr_json_printer</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="number">0</literal></expr>:</case>
        <expr_stmt><expr><call><name>CU_ASSERT_STRING_EQUAL</name><argument_list>(<argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{\"a\":\"bar\"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="number">1</literal></expr>:</case>
        <expr_stmt><expr><call><name>CU_ASSERT_STRING_EQUAL</name><argument_list>(<argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{\"a\":\"gaz\"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="number">2</literal></expr>:</case>
        <expr_stmt><expr><call><name>CU_ASSERT_STRING_EQUAL</name><argument_list>(<argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{\"a\":\"foo\"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="number">5</literal></expr>:</case>
        <expr_stmt><expr><call><name>CU_ASSERT_STRING_EQUAL</name><argument_list>(<argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{\"f\":2}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ejdb_list_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_list2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"/*"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>EJDB_DOC</name></type> <name>doc</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</init> <condition><expr><name>doc</name></expr>;</condition> <incr><expr><name>doc</name> <operator>=</operator> <name><name>doc</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ejdb_list_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_list2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"/f"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>EJDB_DOC</name></type> <name>doc</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</init> <condition><expr><name>doc</name></expr>;</condition> <incr><expr><name>doc</name> <operator>=</operator> <name><name>doc</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ejdb_list_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_list2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"/* | skip 1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>EJDB_DOC</name></type> <name>doc</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</init> <condition><expr><name>doc</name></expr>;</condition> <incr><expr><name>doc</name> <operator>=</operator> <name><name>doc</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_clear</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_as_json</name><argument_list>(<argument><expr><name><name>doc</name><operator>-&gt;</operator><name>raw</name></name></expr></argument>, <argument><expr><name>jbl_xstr_json_printer</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="number">0</literal></expr>:</case>
        <expr_stmt><expr><call><name>CU_ASSERT_STRING_EQUAL</name><argument_list>(<argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{\"a\":\"gaz\"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ejdb_list_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_list2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"/* | skip 2 limit 3"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>EJDB_DOC</name></type> <name>doc</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</init> <condition><expr><name>doc</name></expr>;</condition> <incr><expr><name>doc</name> <operator>=</operator> <name><name>doc</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_clear</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_as_json</name><argument_list>(<argument><expr><name><name>doc</name><operator>-&gt;</operator><name>raw</name></name></expr></argument>, <argument><expr><name>jbl_xstr_json_printer</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="number">0</literal></expr>:</case>
        <expr_stmt><expr><call><name>CU_ASSERT_STRING_EQUAL</name><argument_list>(<argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{\"a\":\"foo\"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ejdb_list_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Add {f:5}, {f:6}</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>put_json</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"{'f':5}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>put_json</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"{'f':6}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_list2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"/f | asc /f"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>EJDB_DOC</name></type> <name>doc</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</init> <condition><expr><name>doc</name></expr>;</condition> <incr><expr><name>doc</name> <operator>=</operator> <name><name>doc</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_clear</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_as_json</name><argument_list>(<argument><expr><name><name>doc</name><operator>-&gt;</operator><name>raw</name></name></expr></argument>, <argument><expr><name>jbl_xstr_json_printer</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="number">0</literal></expr>:</case>
        <expr_stmt><expr><call><name>CU_ASSERT_STRING_EQUAL</name><argument_list>(<argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{\"f\":1}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="number">1</literal></expr>:</case>
        <expr_stmt><expr><call><name>CU_ASSERT_STRING_EQUAL</name><argument_list>(<argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{\"f\":2}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="number">2</literal></expr>:</case>
        <expr_stmt><expr><call><name>CU_ASSERT_STRING_EQUAL</name><argument_list>(<argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{\"f\":3}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="number">3</literal></expr>:</case>
        <expr_stmt><expr><call><name>CU_ASSERT_STRING_EQUAL</name><argument_list>(<argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{\"f\":5}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="number">4</literal></expr>:</case>
        <expr_stmt><expr><call><name>CU_ASSERT_STRING_EQUAL</name><argument_list>(<argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{\"f\":6}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ejdb_list_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_list2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"/f | desc /f"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>EJDB_DOC</name></type> <name>doc</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</init> <condition><expr><name>doc</name></expr>;</condition> <incr><expr><name>doc</name> <operator>=</operator> <name><name>doc</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_clear</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_as_json</name><argument_list>(<argument><expr><name><name>doc</name><operator>-&gt;</operator><name>raw</name></name></expr></argument>, <argument><expr><name>jbl_xstr_json_printer</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="number">0</literal></expr>:</case>
        <expr_stmt><expr><call><name>CU_ASSERT_STRING_EQUAL</name><argument_list>(<argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{\"f\":6}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="number">1</literal></expr>:</case>
        <expr_stmt><expr><call><name>CU_ASSERT_STRING_EQUAL</name><argument_list>(<argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{\"f\":5}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="number">2</literal></expr>:</case>
        <expr_stmt><expr><call><name>CU_ASSERT_STRING_EQUAL</name><argument_list>(<argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{\"f\":3}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="number">3</literal></expr>:</case>
        <expr_stmt><expr><call><name>CU_ASSERT_STRING_EQUAL</name><argument_list>(<argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{\"f\":2}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="number">4</literal></expr>:</case>
        <expr_stmt><expr><call><name>CU_ASSERT_STRING_EQUAL</name><argument_list>(<argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{\"f\":1}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ejdb_list_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">//</comment>
  <comment type="line">// Now test basic back/forward skips</comment>
  <comment type="line">//</comment>
  <decl_stmt><decl><type><name>JQL</name></type> <name>q</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>TEST21_1</name></name></type> <name>tc</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>tc</name><operator>.</operator><name>xstr</name></name> <operator>=</operator> <call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"/f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>EJDB_EXEC</name></type> <name>ux</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>db</name>      <operator>=</operator> <name>db</name></expr>,
    <expr><operator>.</operator><name>q</name>       <operator>=</operator> <name>q</name></expr>,
    <expr><operator>.</operator><name>opaque</name>  <operator>=</operator> <operator>&amp;</operator><name>tc</name></expr>,
    <expr><operator>.</operator><name>visitor</name> <operator>=</operator> <name>ejdb_test2_1_exec_visitor1</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_exec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_STRING_EQUAL</name><argument_list>(<argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name><name>tc</name><operator>.</operator><name>xstr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"65112"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>jql_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name><name>tc</name><operator>.</operator><name>xstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// back/forward skips for sorted output</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tc</name><operator>.</operator><name>xstr</name></name> <operator>=</operator> <call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"/f | asc /f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ux</name><operator>.</operator><name>q</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_exec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_STRING_EQUAL</name><argument_list>(<argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name><name>tc</name><operator>.</operator><name>xstr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"12556"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>jql_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name><name>tc</name><operator>.</operator><name>xstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>CU_pSuite</name></type> <name>pSuite</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>CUE_SUCCESS</name> <operator>!=</operator> <call><name>CU_initialize_registry</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>pSuite</name> <operator>=</operator> <call><name>CU_add_suite</name><argument_list>(<argument><expr><literal type="string">"ejdb_test1"</literal></expr></argument>, <argument><expr><name>init_suite</name></expr></argument>, <argument><expr><name>clean_suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pSuite</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CU_cleanup_registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(  <expr><operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>CU_add_test</name><argument_list>(<argument><expr><name>pSuite</name></expr></argument>, <argument><expr><literal type="string">"ejdb_test2_1"</literal></expr></argument>, <argument><expr><name>ejdb_test2_1</name></expr></argument>)</argument_list></call><operator>)</operator>
     <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>CU_add_test</name><argument_list>(<argument><expr><name>pSuite</name></expr></argument>, <argument><expr><literal type="string">"ejdb_test2_2"</literal></expr></argument>, <argument><expr><name>ejdb_test2_2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CU_cleanup_registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>CU_basic_set_mode</name><argument_list>(<argument><expr><name>CU_BRM_VERBOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_basic_run_tests</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>CU_get_number_of_failures</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CU_cleanup_registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
