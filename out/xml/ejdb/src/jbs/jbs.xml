<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/ejdb/src/jbs/jbs.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jbr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ejdb2cfg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwpool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwconv.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iwnet/iwn_utils.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;getopt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<struct>struct <name>env</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>program</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB</name></type>      <name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB_OPTS</name></type> <name>opts</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWPOOL</name>   <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>
}</block> <decl><name>env</name></decl>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n%s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\tEJDB "</literal> <name>EJDB2_VERSION</name> <literal type="string">" HTTP REST/Websocket server. http://ejdb.org\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nUsage:\n\n\t %s [options]\n\n"</literal></expr></argument>, <argument><expr><name><name>env</name><operator>.</operator><name>program</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\t-v, --version\t\tPrint program version.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\t-f, --file=&lt;&gt;\t\tDatabase file path. Default: ejdb2.db\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\t-p, --port=NUM\t\tHTTP server port numer. Default: 9191\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\t-l, --listen=&lt;&gt;\t\tNetwork address server will listen. Default: localhost\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\t-k, --key=&lt;&gt;\t\tPEM private key file for TLS 1.2 HTTP server.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\t-c, --certs=&lt;&gt;\t\tPEM certificates file for TLS 1.2 HTTP server.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\t-a, --access=TOKEN|@FILE\t\tAccess token to match 'X-Access-Token' HTTP header value.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\t-r, --access-read\t\tAllows unrestricted read-only data access.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\t-C, --cors\t\tEnable COSR response headers for HTTP server\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\t-t, --trunc\t\tCleanup/reset database file on open.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\t-w, --wal\t\tuse the write ahead log (WAL). Used to provide data durability.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nAdvanced options:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
          <argument><expr><literal type="string">"\t-S, --sbz=NUM\t\tMax sorting buffer size. If exceeded, an overflow temp file for data will be created."</literal>
          <literal type="string">"Default: 16777216, min: 1048576\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\t-D, --dsz=NUM\t\tInitial size of buffer to process/store document on queries."</literal>
          <literal type="string">" Preferable average size of document. Default: 65536, min: 16384\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\t-T, --trylock Exit with error if database is locked by another process."</literal>
          <literal type="string">" If not set, current process will wait for lock release."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_on_signal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>env</name><operator>.</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jbr_shutdown_request</name><argument_list>(<argument><expr><name><name>env</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>EJDB2_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGUSR1</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGUSR2</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>_on_signal</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SIG_ERR</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>_on_signal</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SIG_ERR</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>env</name><operator>.</operator><name>program</name></name> <operator>=</operator> <ternary><condition><expr><name>argc</name></expr> ?</condition><then> <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>env</name><operator>.</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>enabled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>env</name><operator>.</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>blocking</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>env</name><operator>.</operator><name>opts</name><operator>.</operator><name>no_wal</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>ejdb_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name>pool</name> <operator>=</operator> <name><name>env</name><operator>.</operator><name>pool</name></name> <operator>=</operator> <call><name>iwpool_create_empty</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>option</name></name></type> <name><name>long_options</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"help"</literal></expr>,        <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'h'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"version"</literal></expr>,     <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'v'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"file"</literal></expr>,        <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'f'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"port"</literal></expr>,        <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'p'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"bind"</literal></expr>,        <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'b'</literal></expr> }</block></expr>, <comment type="line">// for backward compatibility</comment>
    <expr><block>{ <expr><literal type="string">"listen"</literal></expr>,      <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'l'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"key"</literal></expr>,         <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'k'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"certs"</literal></expr>,       <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'c'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"access"</literal></expr>,      <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"access-read"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'r'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"cors"</literal></expr>,        <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'C'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"trunc"</literal></expr>,       <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'t'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wal"</literal></expr>,         <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'w'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"sbz"</literal></expr>,         <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'S'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"dsz"</literal></expr>,         <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'D'</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"trylock"</literal></expr>,     <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'T'</literal></expr> }</block></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>getopt_long</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"f:p:b:l:k:c:a:S:D:rCtwThv"</literal></expr></argument>, <argument><expr><name>long_options</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="char">'h'</literal></expr>:</case>
        <expr_stmt><expr><name>ec</name> <operator>=</operator> <call><name>_usage</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>finish</name>;</goto>
      <case>case <expr><literal type="char">'v'</literal></expr>:</case>
        <expr_stmt><expr><call><name>_version</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>finish</name>;</goto>
      <case>case <expr><literal type="char">'f'</literal></expr>:</case>
        <expr_stmt><expr><name><name>env</name><operator>.</operator><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>path</name></name> <operator>=</operator> <call><name>iwpool_strdup2</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="char">'p'</literal></expr>:</case>
        <expr_stmt><expr><name><name>env</name><operator>.</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>port</name></name> <operator>=</operator> <call><name>iwatoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="char">'b'</literal></expr>:</case>
      <case>case <expr><literal type="char">'l'</literal></expr>:</case>
        <expr_stmt><expr><name><name>env</name><operator>.</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>bind</name></name> <operator>=</operator> <call><name>iwpool_strdup2</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="char">'k'</literal></expr>:</case>
        <expr_stmt><expr><name><name>env</name><operator>.</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>ssl_private_key</name></name> <operator>=</operator> <call><name>iwpool_strdup2</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="char">'c'</literal></expr>:</case>
        <expr_stmt><expr><name><name>env</name><operator>.</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>ssl_certs</name></name> <operator>=</operator> <call><name>iwpool_strdup2</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="char">'a'</literal></expr>:</case>
        <expr_stmt><expr><name><name>env</name><operator>.</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>access_token</name></name> <operator>=</operator> <call><name>iwpool_strdup2</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>env</name><operator>.</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>access_token_len</name></name> <operator>=</operator> <ternary><condition><expr><name><name>env</name><operator>.</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>access_token</name></name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>env</name><operator>.</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>access_token</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="char">'C'</literal></expr>:</case>
        <expr_stmt><expr><name><name>env</name><operator>.</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>cors</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="char">'t'</literal></expr>:</case>
        <expr_stmt><expr><name><name>env</name><operator>.</operator><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>oflags</name></name> <operator>|=</operator> <name>IWKV_TRUNC</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="char">'w'</literal></expr>:</case>
        <expr_stmt><expr><name><name>env</name><operator>.</operator><name>opts</name><operator>.</operator><name>no_wal</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="char">'S'</literal></expr>:</case>
        <expr_stmt><expr><name><name>env</name><operator>.</operator><name>opts</name><operator>.</operator><name>sort_buffer_sz</name></name> <operator>=</operator> <call><name>iwatoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="char">'D'</literal></expr>:</case>
        <expr_stmt><expr><name><name>env</name><operator>.</operator><name>opts</name><operator>.</operator><name>document_buffer_sz</name></name> <operator>=</operator> <call><name>iwatoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="char">'T'</literal></expr>:</case>
        <expr_stmt><expr><name><name>env</name><operator>.</operator><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>file_lock_fail_fast</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="char">'r'</literal></expr>:</case>
        <expr_stmt><expr><name><name>env</name><operator>.</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>read_anon</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <expr_stmt><expr><name>ec</name> <operator>=</operator> <call><name>_usage</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></switch>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>env</name><operator>.</operator><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>path</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>env</name><operator>.</operator><name>opts</name><operator>.</operator><name>kv</name><operator>.</operator><name>path</name></name> <operator>=</operator> <literal type="string">"ejdb2.db"</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>env</name><operator>.</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>port</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>env</name><operator>.</operator><name>opts</name><operator>.</operator><name>http</name><operator>.</operator><name>port</name></name> <operator>=</operator> <literal type="number">9191</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>env</name><operator>.</operator><name>opts</name><operator>.</operator><name>sort_buffer_sz</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>env</name><operator>.</operator><name>opts</name><operator>.</operator><name>sort_buffer_sz</name></name> <operator>=</operator> <literal type="number">16777216</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>env</name><operator>.</operator><name>opts</name><operator>.</operator><name>sort_buffer_sz</name></name> <operator>&lt;</operator> <literal type="number">1048576</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>env</name><operator>.</operator><name>opts</name><operator>.</operator><name>sort_buffer_sz</name></name> <operator>=</operator> <literal type="number">1048576</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>env</name><operator>.</operator><name>opts</name><operator>.</operator><name>document_buffer_sz</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>env</name><operator>.</operator><name>opts</name><operator>.</operator><name>document_buffer_sz</name></name> <operator>=</operator> <literal type="number">65536</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>env</name><operator>.</operator><name>opts</name><operator>.</operator><name>document_buffer_sz</name></name> <operator>&lt;</operator> <literal type="number">16384</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>env</name><operator>.</operator><name>opts</name><operator>.</operator><name>document_buffer_sz</name></name> <operator>=</operator> <literal type="number">16384</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>ejdb_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>env</name><operator>.</operator><name>opts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>env</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>ejdb_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>env</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name><name>env</name><operator>.</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>ec</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
