<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/ejdb/src/jbr/jbr.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jbr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ejdb2_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iwnet/iwn_ws_server.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iwnet/iwn_pairs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwconv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JBR_MAX_KEY_LEN</name></cpp:macro>          <cpp:value>36</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JBR_WS_STR_PREMATURE_END</name></cpp:macro> <cpp:value>"Premature end of message"</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{
  <decl><name>_JBR_ERROR_START</name> <init>= <expr><operator>(</operator><name>IW_ERROR_START</name> <operator>+</operator> <literal type="number">15000UL</literal> <operator>+</operator> <literal type="number">3000</literal><operator>)</operator></expr></init></decl>,
  <decl><name>JBR_ERROR_WS_INVALID_MESSAGE</name></decl>, <comment type="block" format="doxygen">/**&lt; Invalid message recieved (JBR_ERROR_WS_INVALID_MESSAGE) */</comment>
  <decl><name>JBR_ERROR_WS_ACCESS_DENIED</name></decl>,   <comment type="block" format="doxygen">/**&lt; Access denied (JBR_ERROR_WS_ACCESS_DENIED) */</comment>
  <decl><name>_JBR_ERROR_END</name></decl>,
}</block></enum></type> <name>jbr_ecode_t</name>;</typedef>

<struct>struct <name>jbr</name> <block>{
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>poller</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pthread_t</name></type> <name>poller_thread</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>EJDB_HTTP</name>   <modifier>*</modifier></type><name>http</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_wf_ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>rctx</name> <block>{
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name>  <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_ws_sess</name></name> <modifier>*</modifier></type><name>ws</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>jbr</name></name>     <modifier>*</modifier></type><name>jbr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_vals</name></name></type> <name>vals</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mtx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pthread_cond_t</name></type>  <name>cond</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB_EXEC</name></type>       <name>ux</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>   <name>id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pthread_t</name></type> <name>request_thread</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>      <name>read_anon</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>      <name>visitor_started</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>      <name>visitor_finished</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>      <name><name>cname</name><index>[<expr><name>EJDB_COLLECTION_NAME_MAX_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>mctx</name> <block>{
  <decl_stmt><decl><type><name><name>struct</name> <name>rctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name>      <modifier>*</modifier></type><name>wbuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>      <name>id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>cname</name><index>[<expr><name>EJDB_COLLECTION_NAME_MAX_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><name>JBR_MAX_KEY_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JBR_RC_REPORT</name><parameter_list>(<parameter><type><name>ret_</name></type></parameter>, <parameter><type><name>r_</name></type></parameter>, <parameter><type><name>rc_</name></type></parameter>)</parameter_list></cpp:macro>                                 \
  <cpp:value>do {                                                                \
    if ((ret_) &gt;= 500) iwlog_ecode_error3(rc_);                      \
    const char *err = iwlog_ecode_explained(rc_);                     \
    if (!iwn_http_response_write(r_, ret_, "text/plain", err, -1)) { \
      ret_ = -1;                                                     \
    } else {                                                          \
      ret_ = 1;                                                      \
    }                                                                 \
  } while (0)</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>jbr_shutdown_request</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>jbr</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwn_poller_shutdown_request</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>jbr</name><operator>-&gt;</operator><name>poller</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jbr_shutdown_wait</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>jbr</name></name> <modifier>*</modifier></type><name>jbr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>jbr</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>pthread_t</name></type> <name>t</name> <init>= <expr><name><name>jbr</name><operator>-&gt;</operator><name>poller_thread</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>iwn_poller_shutdown_request</name><argument_list>(<argument><expr><name><name>jbr</name><operator>-&gt;</operator><name>poller</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>t</name> <operator>&amp;&amp;</operator> <name>t</name> <operator>!=</operator> <call><name>pthread_self</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>jbr</name><operator>-&gt;</operator><name>poller_thread</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>jbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>_poller_worker</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JBR</name></type> <name>jbr</name> <init>= <expr><name>op</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>iwn_poller_poll</name><argument_list>(<argument><expr><name><name>jbr</name><operator>-&gt;</operator><name>poller</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwn_poller_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbr</name><operator>-&gt;</operator><name>poller</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_rctx_dispose</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name><name>struct</name> <name>iwn_val</name></name> <modifier>*</modifier><name>v</name></type> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>vals</name><operator>.</operator><name>first</name></name></expr></init></decl>;</init> <condition><expr><name>v</name></expr>;</condition> <incr/>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>iwn_val</name></name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>v</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_on_http_request_dispose</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>rctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>_rctx_dispose</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_on_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nbytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">500</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>ejdb_get</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jbr</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cname</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>==</operator> <name>IWKV_ERROR_NOTFOUND</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>rc</name> <operator>==</operator> <name>IW_ERROR_NOT_EXISTS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">404</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IWN_WF_HEAD</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_as_json</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>, <argument><expr><name>jbl_count_json_printer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbytes</name></expr></argument>, <argument><expr><name>JBL_PRINT_PRETTY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_http_response_header_i64_set</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="string">"content-length"</literal></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name>xstr</name> <operator>=</operator> <call><name>iwxstr_new2</name><argument_list>(<argument><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>size</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_as_json</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>, <argument><expr><name>jbl_xstr_json_printer</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>, <argument><expr><name>JBL_PRINT_PRETTY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nbytes</name> <operator>=</operator> <call><name>iwxstr_size</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><call><name>iwn_http_response_write</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="string">"application/json"</literal></expr></argument>,
                                <argument><expr><ternary><condition><expr><name>xstr</name></expr> ?</condition><then> <expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>xstr</name></expr> ?</condition><then> <expr><name>nbytes</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>JBR_RC_REPORT</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_on_post</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>read_anon</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">403</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>body_len</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">400</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">500</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jbl_from_json</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>body</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">400</literal></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>ejdb_put_new</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jbr</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cname</name></name></expr></argument>, <argument><expr><name>jbl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><call><name>iwn_http_response_printf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="string">"text/plain"</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>JBR_RC_REPORT</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_on_put</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>read_anon</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">403</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>body_len</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">400</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">500</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jbl_from_json</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>body</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">400</literal></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>ejdb_put</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jbr</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cname</name></name></expr></argument>, <argument><expr><name>jbl</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>JBR_RC_REPORT</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_on_patch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>read_anon</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">403</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>body_len</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">400</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>ejdb_patch</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jbr</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cname</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>body</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwrc_strip_code</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>IWKV_ERROR_NOTFOUND</name></expr>:</case>
      <case>case <expr><name>IW_ERROR_NOT_EXISTS</name></expr>:</case>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">404</literal></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>JBL_ERROR_PARSE_JSON</name></expr>:</case>
      <case>case <expr><name>JBL_ERROR_PARSE_INVALID_CODEPOINT</name></expr>:</case>
      <case>case <expr><name>JBL_ERROR_PARSE_INVALID_UTF8</name></expr>:</case>
      <case>case <expr><name>JBL_ERROR_PARSE_UNQUOTED_STRING</name></expr>:</case>
      <case>case <expr><name>JBL_ERROR_PATCH_TARGET_INVALID</name></expr>:</case>
      <case>case <expr><name>JBL_ERROR_PATCH_NOVALUE</name></expr>:</case>
      <case>case <expr><name>JBL_ERROR_PATCH_INVALID_OP</name></expr>:</case>
      <case>case <expr><name>JBL_ERROR_PATCH_TEST_FAILED</name></expr>:</case>
      <case>case <expr><name>JBL_ERROR_PATCH_INVALID_ARRAY_INDEX</name></expr>:</case>
      <case>case <expr><name>JBL_ERROR_JSON_POINTER</name></expr>:</case>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">400</literal></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">500</literal></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>JBR_RC_REPORT</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_on_delete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>read_anon</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">403</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>ejdb_del</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jbr</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cname</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>IWKV_ERROR_NOTFOUND</name> <operator>||</operator> <name>rc</name> <operator>==</operator> <name>IW_ERROR_NOT_EXISTS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">404</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">500</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>JBR_RC_REPORT</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">200</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_on_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">500</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>ejdb_get_meta</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jbr</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name>xstr</name> <operator>=</operator> <call><name>iwxstr_new2</name><argument_list>(<argument><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>size</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_as_json</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>, <argument><expr><name>jbl_xstr_json_printer</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>, <argument><expr><name>JBL_PRINT_PRETTY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>jbr</name><operator>-&gt;</operator><name>http</name><operator>-&gt;</operator><name>read_anon</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_http_response_header_add</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="string">"Allow"</literal></expr></argument>, <argument><expr><literal type="string">"GET, HEAD, POST, OPTIONS"</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_http_response_header_add</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="string">"Allow"</literal></expr></argument>,
                                                 <argument><expr><literal type="string">"GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS"</literal></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>jbr</name><operator>-&gt;</operator><name>http</name><operator>-&gt;</operator><name>cors</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_http_response_header_add</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="string">"Access-Control-Allow-Origin"</literal></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_http_response_header_add</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="string">"Access-Control-Allow-Headers"</literal></expr></argument>,
                                                 <argument><expr><literal type="string">"X-Requested-With, Content-Type, Accept, Origin, Authorization"</literal></expr></argument>, <argument><expr><literal type="number">61</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>jbr</name><operator>-&gt;</operator><name>http</name><operator>-&gt;</operator><name>read_anon</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_http_response_header_add</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="string">"Access-Control-Allow-Methods"</literal></expr></argument>,
                                                   <argument><expr><literal type="string">"GET, HEAD, POST, OPTIONS"</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_http_response_header_add</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="string">"Access-Control-Allow-Methods"</literal></expr></argument>,
                                                   <argument><expr><literal type="string">"GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS"</literal></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><call><name>iwn_http_response_write</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="string">"application/json"</literal></expr></argument>, <argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>JBR_RC_REPORT</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_query_chunk_write_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>again</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_val</name></name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>rctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>request_thread</name></name> <operator>==</operator> <call><name>pthread_self</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwn_poller_arm_events</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>poller_adapter</name><operator>-&gt;</operator><name>poller</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>poller_adapter</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>IWN_POLLOUT</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>start</name>:</label>
  <expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>vals</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>vals</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>vals</name><operator>.</operator><name>last</name></name> <operator>==</operator> <name>val</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>vals</name><operator>.</operator><name>last</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>visitor_finished</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>start</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwn_http_response_chunk_write</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>_query_chunk_write_next</name></expr></argument>, <argument><expr><name>again</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwn_http_response_chunk_end</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_query_visitor</name><parameter_list>(<parameter><decl><type><name>EJDB_EXEC</name> <modifier>*</modifier></type><name>ux</name></decl></parameter>, <parameter><decl><type><name>EJDB_DOC</name></type> <name>doc</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>step</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>rctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>ux</name><operator>-&gt;</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ux</name><operator>-&gt;</operator><name>log</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_cat</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name><name>ux</name><operator>-&gt;</operator><name>log</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name><name>ux</name><operator>-&gt;</operator><name>log</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_cat</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"--------------------"</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name><name>ux</name><operator>-&gt;</operator><name>log</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ux</name><operator>-&gt;</operator><name>log</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_printf</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"\r\n%"</literal> <name>PRId64</name> <literal type="string">"\t"</literal></expr></argument>, <argument><expr><name><name>doc</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>doc</name><operator>-&gt;</operator><name>node</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbn_as_json</name><argument_list>(<argument><expr><name><name>doc</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>jbl_xstr_json_printer</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_as_json</name><argument_list>(<argument><expr><name><name>doc</name><operator>-&gt;</operator><name>raw</name></name></expr></argument>, <argument><expr><name>jbl_xstr_json_printer</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>visitor_started</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>iwxstr_destroy_keep_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwn_val_add_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>vals</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>visitor_started</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_http_response_chunk_write</name><argument_list>(
          <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>_query_chunk_write_next</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>xstr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_on_query</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>body_len</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">400</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">500</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>.</operator><name>db</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>jbr</name><operator>-&gt;</operator><name>db</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>.</operator><name>visitor</name></name> <operator>=</operator> <name>_query_visitor</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>,
      <argument><expr><call><name>jql_create2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>.</operator><name>q</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>body</name></name></expr></argument>, <argument><expr><name>JQL_SILENT_ON_PARSE_ERROR</name> <operator>|</operator> <name>JQL_KEEP_QUERY_ON_PARSE_ERROR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>read_anon</name></name> <operator>&amp;&amp;</operator> <call><name>jql_has_apply</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>.</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jql_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>.</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">403</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>val</name> <init>= <expr><call><name>iwn_http_request_header_get</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="string">"x-hints"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"x-hints"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>val</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name><name>val</name><operator>.</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><name><name>val</name><operator>.</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"explain"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>.</operator><name>log</name></name> <operator>=</operator> <call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ejdb_exec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ux</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>visitor_finished</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>visitor_started</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>.</operator><name>log</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwxstr_cat</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>.</operator><name>log</name></name></expr></argument>, <argument><expr><literal type="string">"--------------------"</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>jql_has_aggregate_count</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>.</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>iwxstr_printf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>.</operator><name>log</name></name></expr></argument>, <argument><expr><literal type="string">"\n%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>.</operator><name>cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><call><name>iwn_http_response_write</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="string">"text/plain"</literal></expr></argument>,
                                    <argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>.</operator><name>log</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>.</operator><name>log</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
            ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>jql_has_aggregate_count</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>.</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><call><name>iwn_http_response_printf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="string">"text/plain"</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>.</operator><name>cnt</name></name></expr></argument>)</argument_list></call></expr>
            ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>iwrc</name></type> <name>rcs</name> <init>= <expr><name>rc</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>iwrc_strip_code</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>rcs</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>JQL_ERROR_QUERY_PARSE</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name> <init>= <expr><call><name>jql_error</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>.</operator><name>q</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><call><name>iwn_http_response_write</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>, <argument><expr><literal type="string">"text/plain"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>JQL_ERROR_NO_COLLECTION</name></expr>:</case>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">400</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JBR_RC_REPORT</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <expr_stmt><expr><call><name>JBR_RC_REPORT</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>jql_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>.</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>.</operator><name>log</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_on_http_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>jbr</name></name> <modifier>*</modifier></type><name>jbr</name> <init>= <expr><name>op</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>rctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">500</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>jbr</name></name> <operator>=</operator> <name>jbr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>request_thread</name></name> <operator>=</operator> <call><name>pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>method</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IWN_WF_METHODS_ALL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>http</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>http</name><operator>-&gt;</operator><name>on_request_dispose</name></name> <operator>=</operator> <name>_on_http_request_dispose</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IWN_WF_OPTIONS</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>req</name><operator>-&gt;</operator><name>path_unmatched</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">400</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <block>{<block_content>
    <comment type="line">// Parse {collection name}/{id}</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cname</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>path_unmatched</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>path_unmatched</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(  <expr><name>len</name> <operator>&gt;</operator> <name>EJDB_COLLECTION_NAME_MAX_LEN</name>
         <operator>||</operator> <operator>(</operator><name>method</name> <operator>&amp;</operator> <operator>(</operator><name>IWN_WF_GET</name> <operator>|</operator> <name>IWN_WF_HEAD</name> <operator>|</operator> <name>IWN_WF_PUT</name> <operator>|</operator> <name>IWN_WF_DELETE</name> <operator>|</operator> <name>IWN_WF_PATCH</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">400</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <name>c</name> <operator>-</operator> <name>cname</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(  <expr><name>len</name> <operator>&gt;</operator> <name>EJDB_COLLECTION_NAME_MAX_LEN</name>
         <operator>||</operator> <name>method</name> <operator>==</operator> <name>IWN_WF_POST</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">400</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ep</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ep</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>id</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">400</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cname</name></name></expr></argument>, <argument><expr><name>cname</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cname</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  </block_content>}</block>

  <if_stmt><if>if <condition>(<expr><name><name>jbr</name><operator>-&gt;</operator><name>http</name><operator>-&gt;</operator><name>access_token</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>val</name> <init>= <expr><call><name>iwn_http_request_header_get</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="string">"x-access-token"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"x-access-token"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>val</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>jbr</name><operator>-&gt;</operator><name>http</name><operator>-&gt;</operator><name>read_anon</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(  <expr><operator>(</operator><name>method</name> <operator>&amp;</operator> <operator>(</operator><name>IWN_WF_GET</name> <operator>|</operator> <name>IWN_WF_HEAD</name><operator>)</operator><operator>)</operator>
           <operator>||</operator> <operator>(</operator><name>method</name> <operator>==</operator> <name>IWN_WF_POST</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>read_anon</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
          <goto>goto <name>process</name>;</goto>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><literal type="number">401</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(  <expr><name><name>val</name><operator>.</operator><name>len</name></name> <operator>!=</operator> <name><name>jbr</name><operator>-&gt;</operator><name>http</name><operator>-&gt;</operator><name>access_token_len</name></name>
         <operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>jbr</name><operator>-&gt;</operator><name>http</name><operator>-&gt;</operator><name>access_token</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">403</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>process</name>:</label>
  <if_stmt><if>if <condition>(<expr><name><name>jbr</name><operator>-&gt;</operator><name>http</name><operator>-&gt;</operator><name>cors</name></name> <operator>&amp;&amp;</operator> <call><name>iwn_http_response_header_set</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="string">"access-control-allow-origin"</literal></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">500</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>cname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
    <switch>switch <condition>(<expr><name>method</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>IWN_WF_GET</name></expr>:</case>
      <case>case <expr><name>IWN_WF_HEAD</name></expr>:</case>
        <return>return <expr><call><name>_on_get</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
      <case>case <expr><name>IWN_WF_POST</name></expr>:</case>
        <return>return <expr><call><name>_on_post</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
      <case>case <expr><name>IWN_WF_PUT</name></expr>:</case>
        <return>return <expr><call><name>_on_put</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
      <case>case <expr><name>IWN_WF_PATCH</name></expr>:</case>
        <return>return <expr><call><name>_on_patch</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
      <case>case <expr><name>IWN_WF_DELETE</name></expr>:</case>
        <return>return <expr><call><name>_on_delete</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
      <default>default:</default>
        <return>return <expr><literal type="number">400</literal></expr>;</return>
    </block_content>}</block></switch>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>method</name> <operator>==</operator> <name>IWN_WF_POST</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>_on_query</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>method</name> <operator>==</operator> <name>IWN_WF_OPTIONS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>_on_options</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">400</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<typedef>typedef <type><enum>enum <block>{
  <decl><name>JBWS_NONE</name></decl>,
  <decl><name>JBWS_SET</name></decl>,
  <decl><name>JBWS_GET</name></decl>,
  <decl><name>JBWS_ADD</name></decl>,
  <decl><name>JBWS_DEL</name></decl>,
  <decl><name>JBWS_PATCH</name></decl>,
  <decl><name>JBWS_QUERY</name></decl>,
  <decl><name>JBWS_EXPLAIN</name></decl>,
  <decl><name>JBWS_INFO</name></decl>,
  <decl><name>JBWS_IDX</name></decl>,
  <decl><name>JBWS_NIDX</name></decl>,
  <decl><name>JBWS_REMOVE_COLL</name></decl>,
}</block></enum></type> <name>jbws_e</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_on_ws_session_http</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iwn_ws_handler_spec</name></name> <modifier>*</modifier></type><name>spec</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>jbr</name></name> <modifier>*</modifier></type><name>jbr</name> <init>= <expr><name><name>spec</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>rctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">500</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>jbr</name></name> <operator>=</operator> <name>jbr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>http</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>jbr</name><operator>-&gt;</operator><name>http</name><operator>-&gt;</operator><name>access_token</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>val</name> <init>= <expr><call><name>iwn_http_request_header_get</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="string">"x-access-token"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"x-access-token"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>val</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>val</name><operator>.</operator><name>len</name></name> <operator>!=</operator> <name><name>jbr</name><operator>-&gt;</operator><name>http</name><operator>-&gt;</operator><name>access_token_len</name></name> <operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>jbr</name><operator>-&gt;</operator><name>http</name><operator>-&gt;</operator><name>access_token</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">403</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>jbr</name><operator>-&gt;</operator><name>http</name><operator>-&gt;</operator><name>read_anon</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>read_anon</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><literal type="number">401</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_on_ws_session_dispose</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_sess</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>_on_http_request_dispose</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_on_ws_session_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_sess</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>rctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>ws</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ws</name></name> <operator>=</operator> <name>ws</name></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_ws_error_send</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_sess</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>extra</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwn_ws_server_printf</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><literal type="string">"%s ERROR: %s %s"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><call><name>iwn_ws_server_printf</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><literal type="string">"%s ERROR: %s"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_ws_rc_send</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_sess</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>iwrc</name></type> <name>rc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><call><name>iwlog_ecode_explained</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>_ws_error_send</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><ternary><condition><expr><name>error</name></expr> ?</condition><then> <expr><name>error</name></expr> </then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_ws_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_sess</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mctx</name></name> <modifier>*</modifier></type><name>mctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>rctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>mctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>read_anon</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBR_ERROR_WS_ACCESS_DENIED</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>ejdb_get_meta</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jbr</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name>xstr</name> <operator>=</operator> <call><name>iwxstr_new2</name><argument_list>(<argument><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>size</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_printf</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"%s\t"</literal></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_as_json</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>, <argument><expr><name>jbl_xstr_json_printer</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>, <argument><expr><name>JBL_PRINT_PRETTY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iwn_ws_server_write</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>_ws_rc_send</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_ws_coll_remove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_sess</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mctx</name></name> <modifier>*</modifier></type><name>mctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>rctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>mctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>read_anon</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBR_ERROR_WS_ACCESS_DENIED</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>ejdb_remove_collection</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jbr</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>cname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iwn_ws_server_write</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>_ws_rc_send</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_ws_document_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_sess</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mctx</name></name> <modifier>*</modifier></type><name>mctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>rctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>ws</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>read_anon</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBR_ERROR_WS_ACCESS_DENIED</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_from_json</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>, <argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>ejdb_put_new</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jbr</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>cname</name></name></expr></argument>, <argument><expr><name>jbl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iwn_ws_server_printf</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><literal type="string">"%s\t%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>_ws_rc_send</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_ws_document_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_sess</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mctx</name></name> <modifier>*</modifier></type><name>mctx</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>rctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>ws</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>ejdb_get</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jbr</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>cname</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name>xstr</name> <operator>=</operator> <call><name>iwxstr_new2</name><argument_list>(<argument><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>size</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_printf</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"%s\t%"</literal> <name>PRId64</name> <literal type="string">"\t"</literal></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_as_json</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>, <argument><expr><name>jbl_xstr_json_printer</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>, <argument><expr><name>JBL_PRINT_PRETTY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iwn_ws_server_write</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>_ws_rc_send</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_ws_document_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_sess</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mctx</name></name> <modifier>*</modifier></type><name>mctx</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>rctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>ws</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>read_anon</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBR_ERROR_WS_ACCESS_DENIED</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_from_json</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>, <argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>ejdb_put</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jbr</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>cname</name></name></expr></argument>, <argument><expr><name>jbl</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iwn_ws_server_printf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ws</name></name></expr></argument>, <argument><expr><literal type="string">"%s\t%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>_ws_rc_send</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_ws_document_del</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_sess</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mctx</name></name> <modifier>*</modifier></type><name>mctx</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>rctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>ws</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>read_anon</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBR_ERROR_WS_ACCESS_DENIED</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>ejdb_del</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jbr</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>cname</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iwn_ws_server_printf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ws</name></name></expr></argument>, <argument><expr><literal type="string">"%s\t%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>_ws_rc_send</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_ws_document_patch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_sess</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mctx</name></name> <modifier>*</modifier></type><name>mctx</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>rctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>ws</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>read_anon</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBR_ERROR_WS_ACCESS_DENIED</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>ejdb_patch</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jbr</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>cname</name></name></expr></argument>, <argument><expr><name>json</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iwn_ws_server_printf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ws</name></name></expr></argument>, <argument><expr><literal type="string">"%s\t%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>_ws_rc_send</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_ws_index_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_sess</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mctx</name></name> <modifier>*</modifier></type><name>mctx</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>rctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>ws</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>read_anon</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBR_ERROR_WS_ACCESS_DENIED</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>ejdb_ensure_index</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jbr</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>cname</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iwn_ws_server_write</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>_ws_rc_send</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_ws_index_del</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_sess</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mctx</name></name> <modifier>*</modifier></type><name>mctx</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>rctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>ws</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>read_anon</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBR_ERROR_WS_ACCESS_DENIED</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>ejdb_remove_index</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jbr</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>cname</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iwn_ws_server_write</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>_ws_rc_send</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_ws_query_visitor</name><parameter_list>(<parameter><decl><type><name>EJDB_EXEC</name> <modifier>*</modifier></type><name>ux</name></decl></parameter>, <parameter><decl><type><name>EJDB_DOC</name></type> <name>doc</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>step</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>mctx</name></name> <modifier>*</modifier></type><name>mctx</name> <init>= <expr><name><name>ux</name><operator>-&gt;</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mctx</name><operator>-&gt;</operator><name>wbuf</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>wbuf</name></name> <operator>=</operator> <call><name>iwxstr_new2</name><argument_list>(<argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_clear</name><argument_list>(<argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>wbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ux</name><operator>-&gt;</operator><name>log</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwn_ws_server_printf</name><argument_list>(<argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>ws</name></name></expr></argument>, <argument><expr><literal type="string">"%s\texplain\t%s"</literal></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name><name>ux</name><operator>-&gt;</operator><name>log</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name><name>ux</name><operator>-&gt;</operator><name>log</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ux</name><operator>-&gt;</operator><name>log</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_printf</name><argument_list>(<argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>wbuf</name></name></expr></argument>, <argument><expr><literal type="string">"%s\t%"</literal> <name>PRId64</name> <literal type="string">"\t"</literal></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>doc</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>doc</name><operator>-&gt;</operator><name>node</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbn_as_json</name><argument_list>(<argument><expr><name><name>doc</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>jbl_xstr_json_printer</name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>wbuf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_as_json</name><argument_list>(<argument><expr><name><name>doc</name><operator>-&gt;</operator><name>raw</name></name></expr></argument>, <argument><expr><name>jbl_xstr_json_printer</name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>wbuf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>iwn_ws_server_write</name><argument_list>(<argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>ws</name></name></expr></argument>, <argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>wbuf</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>wbuf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>step</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_ws_query</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_sess</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mctx</name></name> <modifier>*</modifier></type><name>mctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>explain</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>rctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>mctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>EJDB_EXEC</name></type> <name>ux</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>db</name>      <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>jbr</name><operator>-&gt;</operator><name>db</name></name></expr>,
    <expr><operator>.</operator><name>opaque</name>  <operator>=</operator> <name>mctx</name></expr>,
    <expr><operator>.</operator><name>visitor</name> <operator>=</operator> <name>_ws_query_visitor</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>,
      <argument><expr><call><name>jql_create2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ux</name><operator>.</operator><name>q</name></name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>cname</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>JQL_SILENT_ON_PARSE_ERROR</name> <operator>|</operator> <name>JQL_KEEP_QUERY_ON_PARSE_ERROR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>read_anon</name></name> <operator>&amp;&amp;</operator> <call><name>jql_has_apply</name><argument_list>(<argument><expr><name><name>ux</name><operator>.</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBR_ERROR_WS_ACCESS_DENIED</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>explain</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name><name>ux</name><operator>.</operator><name>log</name></name> <operator>=</operator> <call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>ejdb_exec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ux</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ux</name><operator>.</operator><name>log</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iwn_ws_server_printf</name><argument_list>(<argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>ws</name></name></expr></argument>, <argument><expr><literal type="string">"%s\texplain\t%s"</literal></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name><name>ux</name><operator>.</operator><name>log</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>iwrc</name></type> <name>rcs</name> <init>= <expr><name>rc</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>iwrc_strip_code</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>rcs</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>JQL_ERROR_QUERY_PARSE</name></expr>:</case>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_ws_error_send</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><call><name>jql_error</name><argument_list>(<argument><expr><name><name>ux</name><operator>.</operator><name>q</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_ws_rc_send</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>jql_has_aggregate_count</name><argument_list>(<argument><expr><name><name>ux</name><operator>.</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iwn_ws_server_printf</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><literal type="string">"%s\t%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>ux</name><operator>.</operator><name>cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iwn_ws_server_write</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>jql_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ux</name><operator>.</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name><name>ux</name><operator>.</operator><name>log</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_on_ws_msg_impl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_sess</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mctx</name></name> <modifier>*</modifier></type><name>mctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg_</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jbws_e</name></type> <name>wsop</name> <init>= <expr><name>JBWS_NONE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>msg_</name></expr></init></decl>;</decl_stmt> <comment type="line">// Discard const</comment>

  <comment type="line">// Trim left/right</comment>
  <for>for <control>( <init>;</init> <condition><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><name><name>msg</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>--</operator><name>len</name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
  <for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><name><name>msg</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>pos</name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
  <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>pos</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>msg</name> <operator>+=</operator> <name>pos</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>help</name><index>[]</index></name>
      <init>= <expr><literal type="string">"&lt;key&gt; info"</literal>
        <literal type="string">"\n&lt;key&gt; get     &lt;collection&gt; &lt;id&gt;"</literal>
        <literal type="string">"\n&lt;key&gt; set     &lt;collection&gt; &lt;id&gt; &lt;document json&gt;"</literal>
        <literal type="string">"\n&lt;key&gt; add     &lt;collection&gt; &lt;document json&gt;"</literal>
        <literal type="string">"\n&lt;key&gt; del     &lt;collection&gt; &lt;id&gt;"</literal>
        <literal type="string">"\n&lt;key&gt; patch   &lt;collection&gt; &lt;id&gt; &lt;patch json&gt;"</literal>
        <literal type="string">"\n&lt;key&gt; idx     &lt;collection&gt; &lt;mode&gt; &lt;path&gt;"</literal>
        <literal type="string">"\n&lt;key&gt; rmi     &lt;collection&gt; &lt;mode&gt; &lt;path&gt;"</literal>
        <literal type="string">"\n&lt;key&gt; rmc     &lt;collection&gt;"</literal>
        <literal type="string">"\n&lt;key&gt; query   &lt;collection&gt; &lt;query&gt;"</literal>
        <literal type="string">"\n&lt;key&gt; explain &lt;collection&gt; &lt;query&gt;"</literal>
        <literal type="string">"\n&lt;key&gt; &lt;query&gt;"</literal></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>iwn_ws_server_write</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>help</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>help</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Fetch key, after we can do good errors reporting</comment>
  <for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><name><name>msg</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>pos</name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
  <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;</operator> <name>JBR_MAX_KEY_LEN</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>_ws_rc_send</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>JBR_ERROR_WS_INVALID_MESSAGE</name></expr></argument>, <argument><expr><name>JBR_WS_STR_PREMATURE_END</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>( <init>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><name><name>msg</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>pos</name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
  <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>pos</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>msg</name> <operator>+=</operator> <name>pos</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>_ws_rc_send</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>JBR_ERROR_WS_INVALID_MESSAGE</name></expr></argument>, <argument><expr><name>JBR_WS_STR_PREMATURE_END</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Fetch command</comment>
  <for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><name><name>msg</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>pos</name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

  <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"get"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>wsop</name> <operator>=</operator> <name>JBWS_GET</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"add"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>wsop</name> <operator>=</operator> <name>JBWS_ADD</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"set"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>wsop</name> <operator>=</operator> <name>JBWS_SET</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"query"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>wsop</name> <operator>=</operator> <name>JBWS_QUERY</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"del"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>wsop</name> <operator>=</operator> <name>JBWS_DEL</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"patch"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>wsop</name> <operator>=</operator> <name>JBWS_PATCH</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"explain"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>wsop</name> <operator>=</operator> <name>JBWS_EXPLAIN</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"info"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>wsop</name> <operator>=</operator> <name>JBWS_INFO</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"idx"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>wsop</name> <operator>=</operator> <name>JBWS_IDX</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"rmi"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>wsop</name> <operator>=</operator> <name>JBWS_NIDX</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"rmc"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>wsop</name> <operator>=</operator> <name>JBWS_REMOVE_COLL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>wsop</name> <operator>&gt;</operator> <name>JBWS_NONE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>wsop</name> <operator>==</operator> <name>JBWS_INFO</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>_ws_info</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <for>for <control>( <init>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><name><name>msg</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>pos</name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
    <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>pos</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>msg</name> <operator>+=</operator> <name>pos</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rp</name> <init>= <expr><name>msg</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><name><name>msg</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>pos</name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
    <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>pos</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>msg</name> <operator>+=</operator> <name>pos</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>wsop</name> <operator>!=</operator> <name>JBWS_REMOVE_COLL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>_ws_rc_send</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>JBR_ERROR_WS_INVALID_MESSAGE</name></expr></argument>, <argument><expr><name>JBR_WS_STR_PREMATURE_END</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pos</name> <operator>&gt;</operator> <name>EJDB_COLLECTION_NAME_MAX_LEN</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>_ws_rc_send</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>JBR_ERROR_WS_INVALID_MESSAGE</name></expr></argument>,
                         <argument><expr><literal type="string">"Collection name exceeds maximum length allowed: "</literal>
                         <literal type="string">"EJDB_COLLECTION_NAME_MAX_LEN"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>cname</name></name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mctx</name><operator>-&gt;</operator><name>cname</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>wsop</name> <operator>==</operator> <name>JBWS_REMOVE_COLL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>_ws_coll_remove</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><name><name>msg</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>pos</name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
    <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>pos</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>msg</name> <operator>+=</operator> <name>pos</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>_ws_rc_send</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>JBR_ERROR_WS_INVALID_MESSAGE</name></expr></argument>, <argument><expr><name>JBR_WS_STR_PREMATURE_END</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <switch>switch <condition>(<expr><name>wsop</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>JBWS_ADD</name></expr>:</case>
        <expr_stmt><expr><name><name>msg</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <return>return <expr><call><name>_ws_document_add</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</return>
      <case>case <expr><name>JBWS_QUERY</name></expr>:</case>
      <case>case <expr><name>JBWS_EXPLAIN</name></expr>:</case>
        <expr_stmt><expr><name><name>msg</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <return>return <expr><call><name>_ws_query</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>(</operator><name>wsop</name> <operator>==</operator> <name>JBWS_EXPLAIN</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
      <default>default:</default> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>nbuf</name><index>[<expr><name>IWNUMBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name>pos</name> <operator>&lt;</operator> <name>IWNUMBUF_SIZE</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><name><name>msg</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>pos</name></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><name><name>nbuf</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name><name>msg</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>nbuf</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <for>for <control>( <init>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><name><name>msg</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>pos</name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
        <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>pos</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>msg</name> <operator>+=</operator> <name>pos</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>id</name> <init>= <expr><call><name>iwatoi</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>id</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><call><name>_ws_rc_send</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>JBR_ERROR_WS_INVALID_MESSAGE</name></expr></argument>, <argument><expr><literal type="string">"Invalid document id specified"</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>msg</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <switch>switch <condition>(<expr><name>wsop</name></expr>)</condition> <block>{<block_content>
          <case>case <expr><name>JBWS_GET</name></expr>:</case>
            <return>return <expr><call><name>_ws_document_get</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
          <case>case <expr><name>JBWS_SET</name></expr>:</case>
            <return>return <expr><call><name>_ws_document_set</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</return>
          <case>case <expr><name>JBWS_DEL</name></expr>:</case>
            <return>return <expr><call><name>_ws_document_del</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
          <case>case <expr><name>JBWS_PATCH</name></expr>:</case>
            <return>return <expr><call><name>_ws_document_patch</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</return>
          <case>case <expr><name>JBWS_IDX</name></expr>:</case>
            <return>return <expr><call><name>_ws_index_set</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</return>
          <case>case <expr><name>JBWS_NIDX</name></expr>:</case>
            <return>return <expr><call><name>_ws_index_del</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</return>
          <default>default:</default>
            <return>return <expr><call><name>_ws_rc_send</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>JBR_ERROR_WS_INVALID_MESSAGE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></switch>
      </block_content>}</block>
    </block_content>}</block></switch>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>msg</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <return>return <expr><call><name>_ws_query</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_on_ws_msg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_sess</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>frame</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>mctx</name></name></type> <name>mctx</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>ctx</name> <operator>=</operator> <name><name>ws</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name><operator>-&gt;</operator><name>user_data</name></name></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>_on_ws_msg_impl</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mctx</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name><name>mctx</name><operator>.</operator><name>wbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_configure</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>jbr</name></name> <modifier>*</modifier></type><name>jbr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>

  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_create(&amp;(struct iwn_wf_route) {
    .handler = <literal type="number">0</literal>
  }, &amp;jbr-&gt;ctx)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_route(iwn_ws_server_route_attach(&amp;(struct iwn_wf_route) {
    .ctx = jbr-&gt;ctx,
    .pattern = <literal type="string">"/"</literal>,
    .flags = IWN_WF_GET,
  }, &amp;(struct iwn_ws_handler_spec) {
    .handler = _on_ws_msg,
    .on_http_init = _on_ws_session_http,
    .on_session_init = _on_ws_session_init,
    .on_session_dispose = _on_ws_session_dispose,
    .user_data = jbr
  }), <literal type="number">0</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_route(&amp;(struct iwn_wf_route) {
    .ctx = jbr-&gt;ctx,
    .pattern = <literal type="string">"/"</literal>,
    .flags = IWN_WF_MATCH_PREFIX | IWN_WF_METHODS_ALL,
    .handler = _on_http_request,
    .user_data = jbr
  }, <literal type="number">0</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_start</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>jbr</name></name> <modifier>*</modifier></type><name>jbr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>EJDB_HTTP</name> <modifier>*</modifier></type><name>http</name> <init>= <expr><name><name>jbr</name><operator>-&gt;</operator><name>http</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_wf_server_spec</name></name></type> <name>spec</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>poller</name> <operator>=</operator> <name><name>jbr</name><operator>-&gt;</operator><name>poller</name></name></expr>,
    <expr><operator>.</operator><name>listen</name> <operator>=</operator> <name><name>http</name><operator>-&gt;</operator><name>bind</name></name> <operator>?</operator> <name><name>http</name><operator>-&gt;</operator><name>bind</name></name> <operator>:</operator> <literal type="string">"localhost"</literal></expr>,
    <expr><operator>.</operator><name>port</name>   <operator>=</operator> <name><name>http</name><operator>-&gt;</operator><name>port</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>?</operator> <name><name>http</name><operator>-&gt;</operator><name>port</name></name> <operator>:</operator> <literal type="number">9292</literal></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>http</name><operator>-&gt;</operator><name>ssl_private_key</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>spec</name><operator>.</operator><name>ssl</name><operator>.</operator><name>private_key</name></name> <operator>=</operator> <name><name>http</name><operator>-&gt;</operator><name>ssl_private_key</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>spec</name><operator>.</operator><name>ssl</name><operator>.</operator><name>private_key_len</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>http</name><operator>-&gt;</operator><name>ssl_certs</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>spec</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certs</name></name> <operator>=</operator> <name><name>http</name><operator>-&gt;</operator><name>ssl_certs</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>spec</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certs_len</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>iwn_wf_server</name><argument_list>(<argument><expr><operator>&amp;</operator><name>spec</name></expr></argument>, <argument><expr><name><name>jbr</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbr_start</name><parameter_list>(<parameter><decl><type><name>EJDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EJDB_OPTS</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>jbr</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>jbrp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>jbrp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>http</name><operator>.</operator><name>enabled</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JBR</name></type> <name>jbr</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>jbr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>jbr</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>jbr</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbr</name><operator>-&gt;</operator><name>http</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>http</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>jbrp</name> <operator>=</operator> <name>jbr</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint16_t</name></type> <name>cores</name> <init>= <expr><call><name>iwp_num_cpu_cores</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>cores</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>cores</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>cores</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_configure</name><argument_list>(<argument><expr><name>jbr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_poller_create</name><argument_list>(<argument><expr><name>cores</name></expr></argument>, <argument><expr><name>cores</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>jbr</name><operator>-&gt;</operator><name>poller</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_start</name><argument_list>(<argument><expr><name>jbr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>jbr</name><operator>-&gt;</operator><name>http</name><operator>-&gt;</operator><name>blocking</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbr</name><operator>-&gt;</operator><name>poller_thread</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>_poller_worker</name></expr></argument>, <argument><expr><name>jbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>iwn_poller_poll</name><argument_list>(<argument><expr><name><name>jbr</name><operator>-&gt;</operator><name>poller</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwn_poller_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbr</name><operator>-&gt;</operator><name>poller</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>jbrp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>jbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>jbrp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwn_wf_destroy</name><argument_list>(<argument><expr><name><name>jbr</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwn_poller_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbr</name><operator>-&gt;</operator><name>poller</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>jbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_jbr_ecodefn</name><parameter_list>(<parameter><decl><type><name>locale_t</name></type> <name>locale</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ecode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>ecode</name> <operator>&gt;</operator> <name>_JBR_ERROR_START</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ecode</name> <operator>&lt;</operator> <name>_JBR_ERROR_END</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <switch>switch <condition>(<expr><name>ecode</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>JBR_ERROR_WS_INVALID_MESSAGE</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid message recieved (JBR_ERROR_WS_INVALID_MESSAGE)"</literal></expr>;</return>
    <case>case <expr><name>JBR_ERROR_WS_ACCESS_DENIED</name></expr>:</case>
      <return>return <expr><literal type="string">"Access denied (JBR_ERROR_WS_ACCESS_DENIED)"</literal></expr>;</return>
  </block_content>}</block></switch>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbr_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_jbr_initialized</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_jbr_initialized</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>iwlog_register_ecodefn</name><argument_list>(<argument><expr><name>_jbr_ecodefn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
