<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/ejdb/src/jbi/jbi_uniq_scanner.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ejdb2_internal.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>IW_VNUMBUFSZ</name> <operator>&lt;=</operator> <name>IWNUMBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"IW_VNUMBUFSZ &lt;= JBNUMBUF_SIZE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jbi_consume_eq</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_JBEXEC</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>jqval</name></decl></parameter>, <parameter><decl><type><name>JB_SCAN_CONSUMER</name></type> <name>consumer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>step</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>matched</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JBMIDX</name></name> <modifier>*</modifier></type><name>midx</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>midx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>numbuf</name><index>[<expr><name>IWNUMBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV_val</name></type> <name>key</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>jbi_jqval_fill_ikey</name><argument_list>(<argument><expr><name><name>midx</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><name>jqval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>numbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>key</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>consumer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwkv_get_copy</name><argument_list>(<argument><expr><name><name>midx</name><operator>-&gt;</operator><name>idx</name><operator>-&gt;</operator><name>idb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>numbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>numbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>IWKV_ERROR_NOTFOUND</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>consumer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>IW_READVNUMBUF64_2</name><argument_list>(<argument><expr><name>numbuf</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>consumer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>step</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>matched</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>consumer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jbi_consume_in_node</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_JBEXEC</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>jqval</name></decl></parameter>, <parameter><decl><type><name>JB_SCAN_CONSUMER</name></type> <name>consumer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQVAL</name></type> <name>jqv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>matched</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>numbuf</name><index>[<expr><name>IWNUMBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>step</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV_val</name></type> <name>key</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JBMIDX</name></name> <modifier>*</modifier></type><name>midx</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>midx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>nv</name> <init>= <expr><name><name>jqval</name><operator>-&gt;</operator><name>vnode</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nv</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>consumer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><call><name>jql_node_to_jqval</name><argument_list>(<argument><expr><name>nv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jqv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>jbi_jqval_fill_ikey</name><argument_list>(<argument><expr><name><name>midx</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jqv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>numbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>key</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_get_copy</name><argument_list>(<argument><expr><name><name>midx</name><operator>-&gt;</operator><name>idx</name><operator>-&gt;</operator><name>idb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>numbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>numbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>IWKV_ERROR_NOTFOUND</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <goto>goto <name>finish</name>;</goto>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>step</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>--</operator><name>step</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>step</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>++</operator><name>step</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>step</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>IW_READVNUMBUF64_2</name><argument_list>(<argument><expr><name>numbuf</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>step</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>consumer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>step</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>matched</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block> while <condition>(<expr><name>step</name> <operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name>step</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>nv</name> <operator>=</operator> <name><name>nv</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>nv</name> <operator>=</operator> <name><name>nv</name><operator>-&gt;</operator><name>prev</name></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr>)</condition>;</do>

<label><name>finish</name>:</label>
  <return>return <expr><call><name>consumer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jbi_consume_scan</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_JBEXEC</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>jqval</name></decl></parameter>, <parameter><decl><type><name>JB_SCAN_CONSUMER</name></type> <name>consumer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV_cursor</name></type> <name>cur</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>numbuf</name><index>[<expr><name>IWNUMBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>step</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JBMIDX</name></name> <modifier>*</modifier></type><name>midx</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>midx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBIDX</name></type> <name>idx</name> <init>= <expr><name><name>midx</name><operator>-&gt;</operator><name>idx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jqp_op_t</name></type> <name>expr1_op</name> <init>= <expr><name><name>midx</name><operator>-&gt;</operator><name>expr1</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>IWKV_val</name></type> <name>key</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>jbi_jqval_fill_ikey</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>jqval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>numbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwkv_cursor_open</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>idb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>, <argument><expr><name><name>midx</name><operator>-&gt;</operator><name>cursor_init</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>==</operator> <name>IWKV_ERROR_NOTFOUND</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>expr1_op</name> <operator>==</operator> <name>JQP_OP_LT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>expr1_op</name> <operator>==</operator> <name>JQP_OP_LTE</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwkv_cursor_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>midx</name><operator>-&gt;</operator><name>cursor_init</name></name> <operator>=</operator> <name>IWKV_CURSOR_BEFORE_FIRST</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>midx</name><operator>-&gt;</operator><name>cursor_step</name></name> <operator>=</operator> <name>IWKV_CURSOR_NEXT</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwkv_cursor_open</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>idb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>, <argument><expr><name><name>midx</name><operator>-&gt;</operator><name>cursor_init</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>midx</name><operator>-&gt;</operator><name>expr2</name></name></expr>)</condition> <block>{<block_content> <comment type="line">// Fail fast</comment>
      <expr_stmt><expr><name><name>midx</name><operator>-&gt;</operator><name>expr2</name></name> <operator>=</operator> <name><name>midx</name><operator>-&gt;</operator><name>expr1</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>IWKV_cursor_op</name></type> <name>cursor_reverse_step</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>midx</name><operator>-&gt;</operator><name>cursor_step</name></name> <operator>==</operator> <name>IWKV_CURSOR_NEXT</name><operator>)</operator></expr>
                                       ?</condition><then> <expr><name>IWKV_CURSOR_PREV</name></expr> </then><else>: <expr><name>IWKV_CURSOR_NEXT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>midx</name><operator>-&gt;</operator><name>cursor_init</name></name> <operator>&lt;</operator> <name>IWKV_CURSOR_NEXT</name></expr>)</condition> <block>{<block_content> <comment type="line">// IWKV_CURSOR_BEFORE_FIRST || IWKV_CURSOR_AFTER_LAST</comment>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwkv_cursor_to</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>midx</name><operator>-&gt;</operator><name>cursor_step</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <do>do <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>step</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>--</operator><name>step</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>step</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>++</operator><name>step</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>step</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>id</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>bool</name></type> <name>matched</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwkv_cursor_copy_val</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numbuf</name></expr></argument>, <argument><expr><name>IW_VNUMBUFSZ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&gt;</operator> <name>IW_VNUMBUFSZ</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWKV_ERROR_CORRUPTED</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>IW_READVNUMBUF64_2</name><argument_list>(<argument><expr><name>numbuf</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(  <expr><name><name>midx</name><operator>-&gt;</operator><name>expr2</name></name>
         <operator>&amp;&amp;</operator> <operator>!</operator><name><name>midx</name><operator>-&gt;</operator><name>expr2</name><operator>-&gt;</operator><name>prematched</name></name>
         <operator>&amp;&amp;</operator> <operator>!</operator><call><name>jbi_node_expr_matched</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>-&gt;</operator><name>q</name><operator>-&gt;</operator><name>aux</name></name></expr></argument>, <argument><expr><name><name>midx</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>midx</name><operator>-&gt;</operator><name>expr2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(  <expr><operator>(</operator><name>expr1_op</name> <operator>==</operator> <name>JQP_OP_PREFIX</name><operator>)</operator>
         <operator>&amp;&amp;</operator> <operator>!</operator><call><name>jbi_node_expr_matched</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>-&gt;</operator><name>q</name><operator>-&gt;</operator><name>aux</name></name></expr></argument>, <argument><expr><name><name>midx</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>midx</name><operator>-&gt;</operator><name>expr1</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>step</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>consumer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>step</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>matched</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>midx</name><operator>-&gt;</operator><name>expr1</name><operator>-&gt;</operator><name>prematched</name></name> <operator>&amp;&amp;</operator> <name>matched</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>expr1_op</name> <operator>!=</operator> <name>JQP_OP_PREFIX</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <comment type="line">// Further scan will always match the main index expression</comment>
        <expr_stmt><expr><name><name>midx</name><operator>-&gt;</operator><name>expr1</name><operator>-&gt;</operator><name>prematched</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block> while <condition>(<expr><name>step</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>iwkv_cursor_to</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><ternary><condition><expr><name>step</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>midx</name><operator>-&gt;</operator><name>cursor_step</name></name></expr> </then><else>: <expr><name>cursor_reverse_step</name></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>;</do>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>IWKV_ERROR_NOTFOUND</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>cur</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwkv_cursor_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>consumer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>_jbi_consume_noxpr_scan</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_JBEXEC</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>JB_SCAN_CONSUMER</name></type> <name>consumer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV_cursor</name></type> <name>cur</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>numbuf</name><index>[<expr><name>IWNUMBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>step</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JBMIDX</name></name> <modifier>*</modifier></type><name>midx</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>midx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV_cursor_op</name></type> <name>cursor_reverse_step</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>midx</name><operator>-&gt;</operator><name>cursor_step</name></name> <operator>==</operator> <name>IWKV_CURSOR_NEXT</name><operator>)</operator></expr>
                                       ?</condition><then> <expr><name>IWKV_CURSOR_PREV</name></expr> </then><else>: <expr><name>IWKV_CURSOR_NEXT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwkv_cursor_open</name><argument_list>(<argument><expr><name><name>midx</name><operator>-&gt;</operator><name>idx</name><operator>-&gt;</operator><name>idb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>, <argument><expr><name><name>midx</name><operator>-&gt;</operator><name>cursor_init</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>midx</name><operator>-&gt;</operator><name>cursor_init</name></name> <operator>&lt;</operator> <name>IWKV_CURSOR_NEXT</name></expr>)</condition> <block>{<block_content> <comment type="line">// IWKV_CURSOR_BEFORE_FIRST || IWKV_CURSOR_AFTER_LAST</comment>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwkv_cursor_to</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>midx</name><operator>-&gt;</operator><name>cursor_step</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <do>do <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>step</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>--</operator><name>step</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>step</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>++</operator><name>step</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>step</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>id</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>bool</name></type> <name>matched</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwkv_cursor_copy_val</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numbuf</name></expr></argument>, <argument><expr><name>IW_VNUMBUFSZ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&gt;</operator> <name>IW_VNUMBUFSZ</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWKV_ERROR_CORRUPTED</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>IW_READVNUMBUF64_2</name><argument_list>(<argument><expr><name>numbuf</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>step</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>consumer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>step</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>matched</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block> while <condition>(<expr><name>step</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>iwkv_cursor_to</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><ternary><condition><expr><name>step</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>midx</name><operator>-&gt;</operator><name>cursor_step</name></name></expr> </then><else>: <expr><name>cursor_reverse_step</name></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>;</do>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>IWKV_ERROR_NOTFOUND</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>cur</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwkv_cursor_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>consumer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbi_uniq_scanner</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_JBEXEC</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>JB_SCAN_CONSUMER</name></type> <name>consumer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JBMIDX</name></name> <modifier>*</modifier></type><name>midx</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>midx</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>midx</name><operator>-&gt;</operator><name>expr1</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>_jbi_consume_noxpr_scan</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>consumer</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JQP_QUERY</name> <modifier>*</modifier></type><name>qp</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>-&gt;</operator><name>q</name><operator>-&gt;</operator><name>qp</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>jqval</name> <init>= <expr><call><name>jql_unit_to_jqval</name><argument_list>(<argument><expr><name><name>qp</name><operator>-&gt;</operator><name>aux</name></name></expr></argument>, <argument><expr><name><name>midx</name><operator>-&gt;</operator><name>expr1</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name><name>midx</name><operator>-&gt;</operator><name>expr1</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>JQP_OP_EQ</name></expr>:</case>
      <return>return <expr><call><name>_jbi_consume_eq</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>jqval</name></expr></argument>, <argument><expr><name>consumer</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>JQP_OP_IN</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name><name>jqval</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQVAL_JBLNODE</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>_jbi_consume_in_node</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>jqval</name></expr></argument>, <argument><expr><name>consumer</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>IW_ERROR_ASSERTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>IW_ERROR_ASSERTION</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>midx</name><operator>-&gt;</operator><name>expr1</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>JQP_OP_GT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>jqval</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQVAL_I64</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>JQVAL</name></type> <name>mjqv</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mjqv</name></expr></argument>, <argument><expr><name>jqval</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>jqval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mjqv</name><operator>.</operator><name>vi64</name></name> <operator>=</operator> <name><name>mjqv</name><operator>.</operator><name>vi64</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// Because for index scan we use `IWKV_CURSOR_GE`</comment>
    <return>return <expr><call><name>_jbi_consume_scan</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mjqv</name></expr></argument>, <argument><expr><name>consumer</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><call><name>_jbi_consume_scan</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>jqval</name></expr></argument>, <argument><expr><name>consumer</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
