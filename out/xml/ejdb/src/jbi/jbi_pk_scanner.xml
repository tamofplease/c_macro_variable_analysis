<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/ejdb/src/jbi/jbi_pk_scanner.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ejdb2_internal.h"</cpp:file></cpp:include>

<comment type="line">// Primary key scanner</comment>
<function><type><name>iwrc</name></type> <name>jbi_pk_scanner</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_JBEXEC</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>JB_SCAN_CONSUMER</name></type> <name>consumer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>id</name></decl>, <decl><type ref="prev"/><name>step</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>matched</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>JQP_AUX</name></name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>-&gt;</operator><name>q</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JQP_EXPR_NODE_FLAG_PK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>JQP_EXPR_NODE_PK</name> <modifier>*</modifier></type><name>pk</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>aux</name><operator>-&gt;</operator><name>expr</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>argument</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>jqvp</name> <init>= <expr><call><name>jql_unit_to_jqval</name><argument_list>(<argument><expr><name>aux</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>argument</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>jqvp</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQVAL_JBLNODE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>jqvp</name><operator>-&gt;</operator><name>vnode</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_ARRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>JQVAL</name></type> <name>jqv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>nv</name> <init>= <expr><name><name>jqvp</name><operator>-&gt;</operator><name>vnode</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nv</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>step</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <do>do <block>{<block_content>
      <expr_stmt><expr><call><name>jql_node_to_jqval</name><argument_list>(<argument><expr><name>nv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jqv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>jql_jqval_as_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jqv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>step</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>--</operator><name>step</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>step</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>++</operator><name>step</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>step</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>step</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>consumer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>step</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>matched</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block> while <condition>(<expr><name>step</name> <operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name>step</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>nv</name> <operator>=</operator> <name><name>nv</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>nv</name> <operator>=</operator> <name><name>nv</name><operator>-&gt;</operator><name>prev</name></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr>)</condition>;</do>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>jql_jqval_as_int</name><argument_list>(<argument><expr><name>jqvp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>consumer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>step</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>matched</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <return>return <expr><call><name>consumer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
