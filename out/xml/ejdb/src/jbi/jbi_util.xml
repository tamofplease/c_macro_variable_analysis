<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/ejdb/src/jbi/jbi_util.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ejdb2_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwutils.h&gt;</cpp:file></cpp:include>

<comment type="line">// ---------------------------------------------------------------------------</comment>

<comment type="line">// fixme: code duplication below</comment>
<function><type><name>void</name></type> <name>jbi_jbl_fill_ikey</name><parameter_list>(<parameter><decl><type><name>JBIDX</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>JBL</name></type> <name>jbv</name></decl></parameter>, <parameter><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>ikey</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>numbuf</name><index>[<expr><specifier>static</specifier> <name>IWNUMBUF_SIZE</name></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>llv</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>numbuf</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jbl_type_t</name></type> <name>jbvt</name> <init>= <expr><call><name>jbl_type</name><argument_list>(<argument><expr><name>jbv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ejdb_idx_mode_t</name></type> <name>itype</name> <init>= <expr><operator>(</operator><name><name>idx</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>EJDB_IDX_UNIQUE</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name>itype</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>EJDB_IDX_STR</name></expr>:</case>
      <switch>switch <condition>(<expr><name>jbvt</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>JBV_STR</name></expr>:</case>
          <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>jbl_size</name><argument_list>(<argument><expr><name>jbv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <call><name>jbl_get_str</name><argument_list>(<argument><expr><name>jbv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>JBV_I64</name></expr>:</case>
          <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <call><name>iwitoa</name><argument_list>(<argument><expr><call><name>jbl_get_i64</name><argument_list>(<argument><expr><name>jbv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>numbuf</name></expr></argument>, <argument><expr><name>IWNUMBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>numbuf</name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>JBV_BOOL</name></expr>:</case>
          <if_stmt><if>if <condition>(<expr><call><name>jbl_get_i32</name><argument_list>(<argument><expr><name>jbv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <literal type="string">"true"</literal></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <literal type="string">"false"</literal></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <break>break;</break>
        <case>case <expr><name>JBV_F64</name></expr>:</case>
          <expr_stmt><expr><call><name>iwjson_ftoa</name><argument_list>(<argument><expr><call><name>jbl_get_f64</name><argument_list>(<argument><expr><name>jbv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>numbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>numbuf</name></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <break>break;</break>
      </block_content>}</block></switch>
      <break>break;</break>
    <case>case <expr><name>EJDB_IDX_I64</name></expr>:</case>
      <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>llv</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>llv</name></expr>;</expr_stmt>
      <switch>switch <condition>(<expr><name>jbvt</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>JBV_I64</name></expr>:</case>
        <case>case <expr><name>JBV_F64</name></expr>:</case>
        <case>case <expr><name>JBV_BOOL</name></expr>:</case>
          <expr_stmt><expr><operator>*</operator><name>llv</name> <operator>=</operator> <call><name>jbl_get_i64</name><argument_list>(<argument><expr><name>jbv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>JBV_STR</name></expr>:</case>
          <expr_stmt><expr><operator>*</operator><name>llv</name> <operator>=</operator> <call><name>iwatoi</name><argument_list>(<argument><expr><call><name>jbl_get_str</name><argument_list>(<argument><expr><name>jbv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>
      <break>break;</break>
    <case>case <expr><name>EJDB_IDX_F64</name></expr>:</case>
      <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>numbuf</name></expr>;</expr_stmt>
      <switch>switch <condition>(<expr><name>jbvt</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>JBV_F64</name></expr>:</case>
        <case>case <expr><name>JBV_I64</name></expr>:</case>
        <case>case <expr><name>JBV_BOOL</name></expr>:</case>
          <expr_stmt><expr><call><name>iwjson_ftoa</name><argument_list>(<argument><expr><call><name>jbl_get_f64</name><argument_list>(<argument><expr><name>jbv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>numbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>JBV_STR</name></expr>:</case>
          <expr_stmt><expr><call><name>iwjson_ftoa</name><argument_list>(<argument><expr><call><name>iwatof</name><argument_list>(<argument><expr><call><name>jbl_get_str</name><argument_list>(<argument><expr><name>jbv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>numbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="line">// -V1048</comment>
          <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>
      <break>break;</break>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jbi_jqval_fill_ikey</name><parameter_list>(<parameter><decl><type><name>JBIDX</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>JQVAL</name> <modifier>*</modifier></type><name>jqval</name></decl></parameter>, <parameter><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>ikey</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>numbuf</name><index>[<expr><specifier>static</specifier> <name>IWNUMBUF_SIZE</name></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>llv</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>numbuf</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>numbuf</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>ejdb_idx_mode_t</name></type> <name>itype</name> <init>= <expr><operator>(</operator><name><name>idx</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>EJDB_IDX_UNIQUE</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jqval_type_t</name></type> <name>jqvt</name> <init>= <expr><name><name>jqval</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name>itype</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>EJDB_IDX_STR</name></expr>:</case>
      <switch>switch <condition>(<expr><name>jqvt</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>JQVAL_STR</name></expr>:</case>
          <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>jqval</name><operator>-&gt;</operator><name>vstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>jqval</name><operator>-&gt;</operator><name>vstr</name></name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>JQVAL_I64</name></expr>:</case>
          <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <call><name>iwitoa</name><argument_list>(<argument><expr><name><name>jqval</name><operator>-&gt;</operator><name>vi64</name></name></expr></argument>, <argument><expr><name>numbuf</name></expr></argument>, <argument><expr><name>IWNUMBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>JQVAL_BOOL</name></expr>:</case>
          <if_stmt><if>if <condition>(<expr><name><name>jqval</name><operator>-&gt;</operator><name>vbool</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <literal type="string">"true"</literal></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <literal type="string">"false"</literal></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <break>break;</break>
        <case>case <expr><name>JQVAL_F64</name></expr>:</case>
          <expr_stmt><expr><call><name>iwjson_ftoa</name><argument_list>(<argument><expr><name><name>jqval</name><operator>-&gt;</operator><name>vf64</name></name></expr></argument>, <argument><expr><name>numbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <break>break;</break>
      </block_content>}</block></switch>
      <break>break;</break>
    <case>case <expr><name>EJDB_IDX_I64</name></expr>:</case>
      <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>llv</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <switch>switch <condition>(<expr><name>jqvt</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>JQVAL_I64</name></expr>:</case>
          <expr_stmt><expr><operator>*</operator><name>llv</name> <operator>=</operator> <name><name>jqval</name><operator>-&gt;</operator><name>vi64</name></name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>JQVAL_F64</name></expr>:</case>
          <expr_stmt><expr><operator>*</operator><name>llv</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>jqval</name><operator>-&gt;</operator><name>vf64</name></name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>JQVAL_BOOL</name></expr>:</case>
          <expr_stmt><expr><operator>*</operator><name>llv</name> <operator>=</operator> <name><name>jqval</name><operator>-&gt;</operator><name>vbool</name></name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>JQVAL_STR</name></expr>:</case>
          <expr_stmt><expr><operator>*</operator><name>llv</name> <operator>=</operator> <call><name>iwatoi</name><argument_list>(<argument><expr><name><name>jqval</name><operator>-&gt;</operator><name>vstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>
      <break>break;</break>
    <case>case <expr><name>EJDB_IDX_F64</name></expr>:</case>
      <switch>switch <condition>(<expr><name>jqvt</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>JQVAL_F64</name></expr>:</case>
          <expr_stmt><expr><call><name>iwjson_ftoa</name><argument_list>(<argument><expr><name><name>jqval</name><operator>-&gt;</operator><name>vf64</name></name></expr></argument>, <argument><expr><name>numbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>JQVAL_I64</name></expr>:</case>
          <expr_stmt><expr><call><name>iwjson_ftoa</name><argument_list>(<argument><expr><name><name>jqval</name><operator>-&gt;</operator><name>vi64</name></name></expr></argument>, <argument><expr><name>numbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>JQVAL_BOOL</name></expr>:</case>
          <expr_stmt><expr><call><name>iwjson_ftoa</name><argument_list>(<argument><expr><name><name>jqval</name><operator>-&gt;</operator><name>vbool</name></name></expr></argument>, <argument><expr><name>numbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>JQVAL_STR</name></expr>:</case>
          <expr_stmt><expr><call><name>iwjson_ftoa</name><argument_list>(<argument><expr><call><name>iwatof</name><argument_list>(<argument><expr><name><name>jqval</name><operator>-&gt;</operator><name>vstr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>numbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>
      <break>break;</break>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jbi_node_fill_ikey</name><parameter_list>(<parameter><decl><type><name>JBIDX</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>ikey</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>numbuf</name><index>[<expr><specifier>static</specifier> <name>IWNUMBUF_SIZE</name></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>llv</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>numbuf</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>numbuf</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>ejdb_idx_mode_t</name></type> <name>itype</name> <init>= <expr><operator>(</operator><name><name>idx</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>EJDB_IDX_UNIQUE</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jbl_type_t</name></type> <name>jbvt</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name>itype</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>EJDB_IDX_STR</name></expr>:</case>
      <switch>switch <condition>(<expr><name>jbvt</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>JBV_STR</name></expr>:</case>
          <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>vsize</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>vptr</name></name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>JBV_I64</name></expr>:</case>
          <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <call><name>iwitoa</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>vi64</name></name></expr></argument>, <argument><expr><name>numbuf</name></expr></argument>, <argument><expr><name>IWNUMBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>JBV_BOOL</name></expr>:</case>
          <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>vbool</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <literal type="string">"true"</literal></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <literal type="string">"false"</literal></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <break>break;</break>
        <case>case <expr><name>JBV_F64</name></expr>:</case>
          <expr_stmt><expr><call><name>iwjson_ftoa</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>vf64</name></name></expr></argument>, <argument><expr><name>numbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <break>break;</break>
      </block_content>}</block></switch>
      <break>break;</break>
    <case>case <expr><name>EJDB_IDX_I64</name></expr>:</case>
      <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>llv</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <switch>switch <condition>(<expr><name>jbvt</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>JBV_I64</name></expr>:</case>
          <expr_stmt><expr><operator>*</operator><name>llv</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>vi64</name></name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>JBV_F64</name></expr>:</case>
          <expr_stmt><expr><operator>*</operator><name>llv</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>vf64</name></name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>JBV_BOOL</name></expr>:</case>
          <expr_stmt><expr><operator>*</operator><name>llv</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>vbool</name></name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>JBV_STR</name></expr>:</case>
          <expr_stmt><expr><operator>*</operator><name>llv</name> <operator>=</operator> <call><name>iwatoi</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>vptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>
      <break>break;</break>
    <case>case <expr><name>EJDB_IDX_F64</name></expr>:</case>
      <switch>switch <condition>(<expr><name>jbvt</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>JBV_F64</name></expr>:</case>
          <expr_stmt><expr><call><name>iwjson_ftoa</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>vf64</name></name></expr></argument>, <argument><expr><name>numbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>JBV_I64</name></expr>:</case>
          <expr_stmt><expr><call><name>iwjson_ftoa</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>vi64</name></name></expr></argument>, <argument><expr><name>numbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>JBV_BOOL</name></expr>:</case>
          <expr_stmt><expr><call><name>iwjson_ftoa</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>vbool</name></name></expr></argument>, <argument><expr><name>numbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>JBV_STR</name></expr>:</case>
          <expr_stmt><expr><call><name>iwjson_ftoa</name><argument_list>(<argument><expr><call><name>iwatof</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>vptr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>numbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ikey</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><name><name>ikey</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>
      <break>break;</break>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>jbi_node_expr_matched</name><parameter_list>(<parameter><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name></decl></parameter>, <parameter><decl><type><name>JBIDX</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>IWKV_cursor</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><name>JQP_EXPR</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>skey</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>kbuf</name> <init>= <expr><name>skey</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>idx</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <operator>(</operator><name>EJDB_IDX_STR</name> <operator>|</operator> <name>EJDB_IDX_I64</name> <operator>|</operator> <name>EJDB_IDX_F64</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JQVAL</name></type> <name>lv</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rv</name> <init>= <expr><call><name>jql_unit_to_jqval</name><argument_list>(<argument><expr><name>aux</name></expr></argument>, <argument><expr><name><name>expr</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_cursor_copy_key</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>kbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>skey</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>skey</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>kbuf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>kbuf</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_cursor_copy_key</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>kbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>skey</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>idx</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>EJDB_IDX_STR</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>kbuf</name><index>[<expr><name>sz</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lv</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_STR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lv</name><operator>.</operator><name>vstr</name></name> <operator>=</operator> <name>kbuf</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>idx</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>EJDB_IDX_I64</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lv</name><operator>.</operator><name>vi64</name></name></expr></argument>, <argument><expr><name>kbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>lv</name><operator>.</operator><name>vi64</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lv</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_I64</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>idx</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>EJDB_IDX_F64</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>kbuf</name><index>[<expr><name>sz</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lv</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>JQVAL_F64</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lv</name><operator>.</operator><name>vf64</name></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <call><name>iwatof</name><argument_list>(<argument><expr><name>kbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>jql_match_jqval_pair</name><argument_list>(<argument><expr><name>aux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><name><name>expr</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>kbuf</name> <operator>!=</operator> <name>skey</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>kbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
