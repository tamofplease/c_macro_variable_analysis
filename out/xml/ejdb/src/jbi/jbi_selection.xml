<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/src/jbi/jbi_selection.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ejdb2_internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JB_SOLID_EXPRNUM</name></cpp:macro> <cpp:value>127</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_jbi_print_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_JBIDX</name></name> <modifier>*</modifier></type><name>idx</name></decl></parameter>, <parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ejdb_idx_mode_t</name></type> <name>m</name> <init>= <expr><name><name>idx</name><operator>-&gt;</operator><name>mode</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>EJDB_IDX_UNIQUE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"UNIQUE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>EJDB_IDX_STR</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>cnt</name><operator>++</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"STR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>EJDB_IDX_I64</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>cnt</name><operator>++</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"I64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;</operator> <name>EJDB_IDX_F64</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>cnt</name><operator>++</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"F64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>cnt</name><operator>++</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>iwxstr_printf</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name> <literal type="string">" "</literal></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>rnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>jbl_ptr_serialize</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_jbi_log_cursor_op</name><parameter_list>(<parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl></parameter>, <parameter><decl><type><name>IWKV_cursor_op</name></type> <name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>IWKV_CURSOR_EQ</name></expr>:</case>
      <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"IWKV_CURSOR_EQ"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>IWKV_CURSOR_GE</name></expr>:</case>
      <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"IWKV_CURSOR_GE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>IWKV_CURSOR_NEXT</name></expr>:</case>
      <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"IWKV_CURSOR_NEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>IWKV_CURSOR_PREV</name></expr>:</case>
      <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"IWKV_CURSOR_PREV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>IWKV_CURSOR_BEFORE_FIRST</name></expr>:</case>
      <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"IWKV_CURSOR_BEFORE_FIRST"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>IWKV_CURSOR_AFTER_LAST</name></expr>:</case>
      <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"IWKV_CURSOR_AFTER_LAST"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_jbi_log_index_rules</name><parameter_list>(<parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_JBMIDX</name></name> <modifier>*</modifier></type><name>mctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>_jbi_print_index</name><argument_list>(<argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>mctx</name><operator>-&gt;</operator><name>expr1</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">" EXPR1: \'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>jqp_print_filter_node_expr</name><argument_list>(<argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>expr1</name></name></expr></argument>, <argument><expr><name>jbl_xstr_json_printer</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"\'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>mctx</name><operator>-&gt;</operator><name>expr2</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">" EXPR2: \'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>jqp_print_filter_node_expr</name><argument_list>(<argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>expr2</name></name></expr></argument>, <argument><expr><name>jbl_xstr_json_printer</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"\'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>mctx</name><operator>-&gt;</operator><name>cursor_init</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">" INIT: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_jbi_log_cursor_op</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>cursor_init</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>mctx</name><operator>-&gt;</operator><name>cursor_step</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">" STEP: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_jbi_log_cursor_op</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>cursor_step</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>mctx</name><operator>-&gt;</operator><name>orderby_support</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">" ORDERBY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>int</name></type> <name>_jbi_idx_expr_op_weight</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_JBMIDX</name></name> <modifier>*</modifier></type><name>midx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>jqp_op_t</name></type> <name>op</name> <init>= <expr><name><name>midx</name><operator>-&gt;</operator><name>expr1</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>JQP_OP_EQ</name></expr>:</case>
      <return>return <expr><literal type="number">10</literal></expr>;</return>
    <case>case <expr><name>JQP_OP_IN</name></expr>:</case>
      <comment type="line">//case JQP_OP_NI: todo</comment>
      <return>return <expr><literal type="number">9</literal></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <if_stmt><if>if <condition>(<expr><name><name>midx</name><operator>-&gt;</operator><name>orderby_support</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">8</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>JQP_OP_GT</name></expr>:</case>
    <case>case <expr><name>JQP_OP_GTE</name></expr>:</case>
      <return>return <expr><literal type="number">7</literal></expr>;</return>
    <case>case <expr><name>JQP_OP_PREFIX</name></expr>:</case>
      <return>return <expr><literal type="number">6</literal></expr>;</return>
    <case>case <expr><name>JQP_OP_LT</name></expr>:</case>
    <case>case <expr><name>JQP_OP_LTE</name></expr>:</case>
      <return>return <expr><literal type="number">5</literal></expr>;</return>
    <default>default:</default>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_jbi_is_solid_node_expression</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JQP_NODE</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><name><name>n</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><specifier>const</specifier> <name>JQP_EXPR</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><operator>&amp;</operator><name><name>unit</name><operator>-&gt;</operator><name>expr</name></name></expr></init></decl>;</init> <condition><expr><name>expr</name></expr>;</condition> <incr><expr><name>expr</name> <operator>=</operator> <name><name>expr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(  <expr><name><name>expr</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>negate</name></name>
       <operator>||</operator> <operator>(</operator><name><name>expr</name><operator>-&gt;</operator><name>join</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>expr</name><operator>-&gt;</operator><name>join</name><operator>-&gt;</operator><name>negate</name></name> <operator>||</operator> <operator>(</operator><name><name>expr</name><operator>-&gt;</operator><name>join</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>JQP_JOIN_OR</name><operator>)</operator><operator>)</operator><operator>)</operator>
       <operator>||</operator> <operator>(</operator><name><name>expr</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>JQP_OP_RE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <comment type="line">// No negate conditions, No OR, No regexp</comment>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><name><name>expr</name><operator>-&gt;</operator><name>left</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(  <expr><operator>(</operator><name><name>left</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_EXPR_TYPE</name><operator>)</operator>
       <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>left</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_STRING_TYPE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>left</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_STAR</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jbi_compute_index_rules</name><parameter_list>(<parameter><decl><type><name>JBEXEC</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_JBMIDX</name></name> <modifier>*</modifier></type><name>mctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JQP_EXPR</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><name><name>mctx</name><operator>-&gt;</operator><name>nexpr</name></name></expr></init></decl>;</decl_stmt> <comment type="line">// Node expression</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>expr</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JQP_AUX</name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>-&gt;</operator><name>q</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>

  <for>for <control>( <init>;</init> <condition><expr><name>expr</name></expr>;</condition> <incr><expr><name>expr</name> <operator>=</operator> <name><name>expr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jqp_op_t</name></type> <name>op</name> <init>= <expr><name><name>expr</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><call><name>jql_unit_to_jqval</name><argument_list>(<argument><expr><name>aux</name></expr></argument>, <argument><expr><name><name>expr</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JQP_STRING_TYPE</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <switch>switch <condition>(<expr><name><name>rv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>JQVAL_NULL</name></expr>:</case>
      <case>case <expr><name>JQVAL_RE</name></expr>:</case>
      <case>case <expr><name>JQVAL_BINN</name></expr>:</case>
        <continue>continue;</continue>
      <case>case <expr><name>JQVAL_JBLNODE</name></expr>:</case> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>op</name> <operator>!=</operator> <name>JQP_OP_IN</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>rv</name><operator>-&gt;</operator><name>vnode</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JBV_ARRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>vcnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>JBL_NODE</name></type> <name>n</name> <init>= <expr><name><name>rv</name><operator>-&gt;</operator><name>vnode</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</init> <condition><expr><name>n</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><operator>++</operator><name>vcnt</name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
        <if_stmt><if>if <condition>(  <expr><operator>(</operator><name>vcnt</name> <operator>&gt;</operator> <name>JB_IDX_EMPIRIC_MIN_INOP_ARRAY_SIZE</name><operator>)</operator>
           <operator>&amp;&amp;</operator> <operator>(</operator>  <operator>(</operator><name>vcnt</name> <operator>&gt;</operator> <name>JB_IDX_EMPIRIC_MAX_INOP_ARRAY_SIZE</name><operator>)</operator>
              <operator>||</operator> <operator>(</operator><name><name>mctx</name><operator>-&gt;</operator><name>idx</name><operator>-&gt;</operator><name>rnum</name></name> <operator>&lt;</operator> <name><name>rv</name><operator>-&gt;</operator><name>vbinn</name><operator>-&gt;</operator><name>count</name></name> <operator>*</operator> <name>JB_IDX_EMPIRIC_MAX_INOP_ARRAY_RATIO</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
          <comment type="line">// No index for large IN array | small collection size</comment>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
    <switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>JQP_OP_EQ</name></expr>:</case>
        <expr_stmt><expr><name><name>mctx</name><operator>-&gt;</operator><name>cursor_init</name></name> <operator>=</operator> <name>IWKV_CURSOR_EQ</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mctx</name><operator>-&gt;</operator><name>expr1</name></name> <operator>=</operator> <name>expr</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mctx</name><operator>-&gt;</operator><name>expr2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      <case>case <expr><name>JQP_OP_PREFIX</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>mctx</name><operator>-&gt;</operator><name>idx</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>EJDB_IDX_STR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>mctx</name><operator>-&gt;</operator><name>expr1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>rv</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQVAL_STR</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name><name>rv</name><operator>-&gt;</operator><name>vstr</name></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
      <case>case <expr><name>JQP_OP_GT</name></expr>:</case>
      <case>case <expr><name>JQP_OP_GTE</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name><name>mctx</name><operator>-&gt;</operator><name>cursor_init</name></name> <operator>!=</operator> <name>IWKV_CURSOR_EQ</name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>mctx</name><operator>-&gt;</operator><name>expr1</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>mctx</name><operator>-&gt;</operator><name>cursor_init</name></name> <operator>==</operator> <name>IWKV_CURSOR_GE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>op</name> <operator>!=</operator> <name>JQP_OP_PREFIX</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>pval</name> <init>= <expr><call><name>jql_unit_to_jqval</name><argument_list>(<argument><expr><name>aux</name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>expr1</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>cv</name> <init>= <expr><call><name>jql_cmp_jqval_pair</name><argument_list>(<argument><expr><name>pval</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>cv</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
              <break>break;</break>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name><name>mctx</name><operator>-&gt;</operator><name>expr1</name></name> <operator>=</operator> <name>expr</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>mctx</name><operator>-&gt;</operator><name>cursor_init</name></name> <operator>=</operator> <name>IWKV_CURSOR_GE</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>mctx</name><operator>-&gt;</operator><name>cursor_step</name></name> <operator>=</operator> <name>IWKV_CURSOR_PREV</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      <case>case <expr><name>JQP_OP_LT</name></expr>:</case>
      <case>case <expr><name>JQP_OP_LTE</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name><name>mctx</name><operator>-&gt;</operator><name>expr2</name></name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>JQVAL</name> <modifier>*</modifier></type><name>pval</name> <init>= <expr><call><name>jql_unit_to_jqval</name><argument_list>(<argument><expr><name>aux</name></expr></argument>, <argument><expr><name><name>mctx</name><operator>-&gt;</operator><name>expr2</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>cv</name> <init>= <expr><call><name>jql_cmp_jqval_pair</name><argument_list>(<argument><expr><name>pval</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>cv</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>mctx</name><operator>-&gt;</operator><name>expr2</name></name> <operator>=</operator> <name>expr</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>JQP_OP_IN</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mctx</name><operator>-&gt;</operator><name>cursor_init</name></name> <operator>!=</operator> <name>IWKV_CURSOR_EQ</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>rv</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;=</operator> <name>JQVAL_JBLNODE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>mctx</name><operator>-&gt;</operator><name>expr1</name></name> <operator>=</operator> <name>expr</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>mctx</name><operator>-&gt;</operator><name>expr2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>mctx</name><operator>-&gt;</operator><name>cursor_init</name></name> <operator>=</operator> <name>IWKV_CURSOR_EQ</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      <default>default:</default>
        <continue>continue;</continue>
    </block_content>}</block></switch>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name><name>mctx</name><operator>-&gt;</operator><name>expr2</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mctx</name><operator>-&gt;</operator><name>expr1</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>mctx</name><operator>-&gt;</operator><name>expr1</name></name> <operator>=</operator> <name><name>mctx</name><operator>-&gt;</operator><name>expr2</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>mctx</name><operator>-&gt;</operator><name>expr2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>mctx</name><operator>-&gt;</operator><name>cursor_init</name></name> <operator>=</operator> <name>IWKV_CURSOR_GE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>mctx</name><operator>-&gt;</operator><name>cursor_step</name></name> <operator>=</operator> <name>IWKV_CURSOR_NEXT</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Orderby compatibility</comment>
  <if_stmt><if>if <condition>(<expr><name><name>mctx</name><operator>-&gt;</operator><name>orderby_support</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>aux</name><operator>-&gt;</operator><name>orderby_num</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>mctx</name><operator>-&gt;</operator><name>cursor_init</name></name> <operator>!=</operator> <name>IWKV_CURSOR_EQ</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>bool</name></type> <name>desc</name> <init>= <expr><operator>(</operator><name><name>aux</name><operator>-&gt;</operator><name>orderby_ptrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>op</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="line">// Desc sort</comment>
      <if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>mctx</name><operator>-&gt;</operator><name>cursor_step</name></name> <operator>!=</operator> <name>IWKV_CURSOR_NEXT</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>mctx</name><operator>-&gt;</operator><name>orderby_support</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>mctx</name><operator>-&gt;</operator><name>cursor_step</name></name> <operator>!=</operator> <name>IWKV_CURSOR_PREV</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>mctx</name><operator>-&gt;</operator><name>orderby_support</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mctx</name><operator>-&gt;</operator><name>orderby_support</name></name> <operator>&amp;&amp;</operator> <name><name>mctx</name><operator>-&gt;</operator><name>expr2</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>JQP_EXPR</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>mctx</name><operator>-&gt;</operator><name>expr1</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>mctx</name><operator>-&gt;</operator><name>expr1</name></name> <operator>=</operator> <name><name>mctx</name><operator>-&gt;</operator><name>expr2</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mctx</name><operator>-&gt;</operator><name>expr2</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mctx</name><operator>-&gt;</operator><name>orderby_support</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>mctx</name><operator>-&gt;</operator><name>cursor_step</name></name> <operator>=</operator> <name>IWKV_CURSOR_NEXT</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>mctx</name><operator>-&gt;</operator><name>cursor_step</name></name> <operator>=</operator> <name>IWKV_CURSOR_PREV</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>mctx</name><operator>-&gt;</operator><name>orderby_support</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jbi_collect_indexes</name><parameter_list>(
  <parameter><decl><type><name>JBEXEC</name>                     <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>JQP_EXPR_NODE</name></name> <modifier>*</modifier></type><name>en</name></decl></parameter>,
  <parameter><decl><type><name><name>struct</name> <name>_JBMIDX</name></name></type>              <name><name>marr</name><index>[<expr><specifier>static</specifier> <name>JB_SOLID_EXPRNUM</name></expr>]</index></name></decl></parameter>,
  <parameter><decl><type><name>size_t</name>                     <modifier>*</modifier></type><name>snp</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>snp</name> <operator>&gt;=</operator> <name>JB_SOLID_EXPRNUM</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>en</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_EXPR_NODE_TYPE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>JQP_EXPR_NODE</name></name> <modifier>*</modifier></type><name>cn</name> <init>= <expr><name><name>en</name><operator>-&gt;</operator><name>chain</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>( <init>;</init> <condition><expr><name>cn</name></expr>;</condition> <incr><expr><name>cn</name> <operator>=</operator> <name><name>cn</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>cn</name><operator>-&gt;</operator><name>join</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cn</name><operator>-&gt;</operator><name>join</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>JQP_JOIN_OR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><expr><name>cn</name> <operator>=</operator> <name><name>en</name><operator>-&gt;</operator><name>chain</name></name></expr>;</init> <condition><expr><name>cn</name></expr>;</condition> <incr><expr><name>cn</name> <operator>=</operator> <name><name>cn</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cn</name><operator>-&gt;</operator><name>join</name></name> <operator>||</operator> <operator>!</operator><name><name>cn</name><operator>-&gt;</operator><name>join</name><operator>-&gt;</operator><name>negate</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbi_collect_indexes</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cn</name></expr></argument>, <argument><expr><name>marr</name></expr></argument>, <argument><expr><name>snp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>en</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_FILTER_TYPE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>fnc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JQP_FILTER</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><operator>(</operator><name>JQP_FILTER</name><operator>*</operator><operator>)</operator> <name>en</name></expr></init></decl>;</decl_stmt>  <comment type="line">// -V1027</comment>
    <for>for <control>(<init><decl><type><name>JQP_NODE</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></init></decl>;</init> <condition><expr><name>n</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><operator>++</operator><name>fnc</name></expr></incr>)</control> <block>{<block_content>
      <switch>switch <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>ntype</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>JQP_NODE_ANY</name></expr>:</case>
        <case>case <expr><name>JQP_NODE_ANYS</name></expr>:</case>
          <return>return <expr><literal type="number">0</literal></expr>;</return>
        <case>case <expr><name>JQP_NODE_FIELD</name></expr>:</case>
          <break>break;</break>
        <case>case <expr><name>JQP_NODE_EXPR</name></expr>:</case>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_jbi_is_solid_node_expression</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name><name>struct</name> <name>JQP_AUX</name></name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>-&gt;</operator><name>q</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>_JBL_PTR</name></name> <modifier>*</modifier></type><name>obp</name> <init>= <expr><ternary><condition><expr><name><name>aux</name><operator>-&gt;</operator><name>orderby_num</name></name></expr> ?</condition><then> <expr><name><name>aux</name><operator>-&gt;</operator><name>orderby_ptrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name><name>struct</name> <name>_JBIDX</name></name> <modifier>*</modifier><name>idx</name></type> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>jbc</name><operator>-&gt;</operator><name>idx</name></name></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>snp</name> <operator>&lt;</operator> <name>JB_SOLID_EXPRNUM</name></expr>;</condition> <incr><expr><name>idx</name> <operator>=</operator> <name><name>idx</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>_JBMIDX</name></name></type> <name>mctx</name> <init>= <expr><block>{ <expr><operator>.</operator><name>filter</name> <operator>=</operator> <name>f</name></expr> }</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>struct</name> <name>_JBL_PTR</name></name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>idx</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>cnt</name></name> <operator>&gt;</operator> <name>fnc</name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>JQP_EXPR</name> <modifier>*</modifier></type><name>nexpr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>JQP_NODE</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>node</name></name></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>ptr</name><operator>-&gt;</operator><name>cnt</name></name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>nexpr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>ntype</name></name> <operator>==</operator> <name>JQP_NODE_FIELD</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>field</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>ntype</name></name> <operator>==</operator> <name>JQP_NODE_EXPR</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>nexpr</name> <operator>=</operator> <operator>&amp;</operator><name><name>n</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>expr</name></name></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><name><name>nexpr</name><operator>-&gt;</operator><name>left</name></name></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>left</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_STRING_TYPE</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>field</name> <operator>=</operator> <name><name>left</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>field</name> <operator>||</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>obp</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>==</operator> <name>j</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <name><name>obp</name><operator>-&gt;</operator><name>cnt</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>obp</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// Check for the last iteration and the special `**` case</comment>
        <if_stmt><if>if <condition>(  <expr><operator>(</operator><name>i</name> <operator>==</operator> <name><name>ptr</name><operator>-&gt;</operator><name>cnt</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>
           <operator>&amp;&amp;</operator> <operator>(</operator><name><name>idx</name><operator>-&gt;</operator><name>idbf</name></name> <operator>&amp;</operator> <name>IWDB_COMPOUND_KEYS</name><operator>)</operator>
           <operator>&amp;&amp;</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>n</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>n</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>ntype</name></name> <operator>==</operator> <name>JQP_NODE_EXPR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>JQPUNIT</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><name><name>n</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>expr</name><operator>.</operator><name>left</name></name></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>left</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JQP_STRING_TYPE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>left</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>flavour</name></name> <operator>&amp;</operator> <name>JQP_STR_DBL_STAR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>nexpr</name> <operator>=</operator> <operator>&amp;</operator><name><name>n</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>value</name><operator>-&gt;</operator><name>expr</name></name></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>==</operator> <name><name>ptr</name><operator>-&gt;</operator><name>cnt</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name>nexpr</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>mctx</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mctx</name><operator>.</operator><name>nexpr</name></name> <operator>=</operator> <name>nexpr</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mctx</name><operator>.</operator><name>orderby_support</name></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>==</operator> <name>j</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbi_compute_index_rules</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mctx</name><operator>.</operator><name>expr1</name></name></expr>)</condition> <block>{<block_content> <comment type="line">// Cannot find matching expressions</comment>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>-&gt;</operator><name>log</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>-&gt;</operator><name>log</name></name></expr></argument>, <argument><expr><literal type="string">"[INDEX] MATCHED  "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>_jbi_log_index_rules</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>-&gt;</operator><name>log</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>marr</name><index>[<expr><operator>*</operator><name>snp</name></expr>]</index></name> <operator>=</operator> <name>mctx</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>snp</name> <operator>=</operator> <operator>*</operator><name>snp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_jbi_idx_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>o1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>o2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JBMIDX</name></name> <modifier>*</modifier></type><name>d1</name> <init>= <expr><operator>(</operator>struct <name>_JBMIDX</name><operator>*</operator><operator>)</operator> <name>o1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JBMIDX</name></name> <modifier>*</modifier></type><name>d2</name> <init>= <expr><operator>(</operator>struct <name>_JBMIDX</name><operator>*</operator><operator>)</operator> <name>o2</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>d1</name> <operator>&amp;&amp;</operator> <name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>w1</name> <init>= <expr><call><name>_jbi_idx_expr_op_weight</name><argument_list>(<argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>w2</name> <init>= <expr><call><name>_jbi_idx_expr_op_weight</name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>w2</name> <operator>!=</operator> <name>w1</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>w2</name> <operator>-</operator> <name>w1</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>w1</name> <operator>=</operator> <name><name>d1</name><operator>-&gt;</operator><name>expr2</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>w2</name> <operator>=</operator> <name><name>d2</name><operator>-&gt;</operator><name>expr2</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>w2</name> <operator>!=</operator> <name>w1</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>w2</name> <operator>-</operator> <name>w1</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>d1</name><operator>-&gt;</operator><name>idx</name><operator>-&gt;</operator><name>rnum</name></name> <operator>!=</operator> <name><name>d2</name><operator>-&gt;</operator><name>idx</name><operator>-&gt;</operator><name>rnum</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>d1</name><operator>-&gt;</operator><name>idx</name><operator>-&gt;</operator><name>rnum</name></name> <operator>-</operator> <name><name>d2</name><operator>-&gt;</operator><name>idx</name><operator>-&gt;</operator><name>rnum</name></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><name><name>d1</name><operator>-&gt;</operator><name>idx</name><operator>-&gt;</operator><name>ptr</name><operator>-&gt;</operator><name>cnt</name></name> <operator>-</operator> <name><name>d2</name><operator>-&gt;</operator><name>idx</name><operator>-&gt;</operator><name>ptr</name><operator>-&gt;</operator><name>cnt</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>_JBIDX</name></name><modifier>*</modifier></type> <name>_jbi_select_index_for_orderby</name><parameter_list>(<parameter><decl><type><name>JBEXEC</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>JQP_AUX</name></name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>-&gt;</operator><name>q</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JBL_PTR</name></name> <modifier>*</modifier></type><name>obp</name> <init>= <expr><name><name>aux</name><operator>-&gt;</operator><name>orderby_ptrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>obp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name><name>struct</name> <name>_JBIDX</name></name> <modifier>*</modifier><name>idx</name></type> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>jbc</name><operator>-&gt;</operator><name>idx</name></name></expr></init></decl>;</init> <condition><expr><name>idx</name></expr>;</condition> <incr><expr><name>idx</name> <operator>=</operator> <name><name>idx</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>_JBL_PTR</name></name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>idx</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>obp</name><operator>-&gt;</operator><name>cnt</name></name> <operator>!=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>cnt</name></name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>obp</name><operator>-&gt;</operator><name>cnt</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>obp</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>obp</name><operator>-&gt;</operator><name>cnt</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>midx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>midx</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>obp</name><operator>-&gt;</operator><name>op</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <comment type="line">// Asc sort</comment>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_init</name></name> <operator>=</operator> <name>IWKV_CURSOR_AFTER_LAST</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_step</name></name> <operator>=</operator> <name>IWKV_CURSOR_PREV</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>midx</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>midx</name><operator>.</operator><name>orderby_support</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>midx</name><operator>.</operator><name>cursor_init</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cursor_init</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>midx</name><operator>.</operator><name>cursor_step</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cursor_step</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sorting</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <return>return <expr><name>idx</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbi_selection</name><parameter_list>(<parameter><decl><type><name>JBEXEC</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>snp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>JQP_AUX</name></name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>-&gt;</operator><name>q</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JBMIDX</name></name></type> <name><name>fctx</name><index>[<expr><name>JB_SOLID_EXPRNUM</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_init</name></name> <operator>=</operator> <name>IWKV_CURSOR_BEFORE_FIRST</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_step</name></name> <operator>=</operator> <name>IWKV_CURSOR_NEXT</name></expr>;</expr_stmt>

  <comment type="line">// Index not found:</comment>
  <if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>orderby_num</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sorting</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>qmode</name></name> <operator>&amp;</operator> <name>JQP_QRY_INVERSE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_init</name></name> <operator>=</operator> <name>IWKV_CURSOR_AFTER_LAST</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cursor_step</name></name> <operator>=</operator> <name>IWKV_CURSOR_PREV</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>aux</name><operator>-&gt;</operator><name>qmode</name></name> <operator>&amp;</operator> <name>JQP_QRY_NOIDX</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>jbc</name><operator>-&gt;</operator><name>idx</name></name></expr>)</condition> <block>{<block_content> <comment type="line">// we have indexes associated with collection</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbi_collect_indexes</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>aux</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>, <argument><expr><name>fctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>snp</name></expr>)</condition> <block>{<block_content> <comment type="line">// Index selected</comment>
      <expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>, <argument><expr><name>snp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>fctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>_jbi_idx_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>midx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>midx</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name><name>struct</name> <name>_JBMIDX</name></name> <modifier>*</modifier></type><name>midx</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>midx</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>jqp_op_t</name></type> <name>op</name> <init>= <expr><name><name>midx</name><operator>-&gt;</operator><name>expr1</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>op</name> <operator>==</operator> <name>JQP_OP_EQ</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>op</name> <operator>==</operator> <name>JQP_OP_IN</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>op</name> <operator>==</operator> <name>JQP_OP_GTE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>cursor_init</name></name> <operator>==</operator> <name>IWKV_CURSOR_GE</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>midx</name><operator>-&gt;</operator><name>expr1</name><operator>-&gt;</operator><name>prematched</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>-&gt;</operator><name>log</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>-&gt;</operator><name>log</name></name></expr></argument>, <argument><expr><literal type="string">"[INDEX] SELECTED "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>_jbi_log_index_rules</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>-&gt;</operator><name>log</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>midx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>midx</name><operator>-&gt;</operator><name>orderby_support</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>aux</name><operator>-&gt;</operator><name>orderby_num</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <comment type="line">// Turn off final sorting since it supported by natural index scan order</comment>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sorting</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>orderby_num</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sorting</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>sorting</name></name></expr>)</condition> <block>{<block_content> <comment type="line">// Last chance to use index and avoid sorting</comment>
      <if_stmt><if>if <condition>(<expr><call><name>_jbi_select_index_for_orderby</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>-&gt;</operator><name>log</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>-&gt;</operator><name>log</name></name></expr></argument>, <argument><expr><literal type="string">"[INDEX] SELECTED "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>_jbi_log_index_rules</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>-&gt;</operator><name>log</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>midx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
</unit>
