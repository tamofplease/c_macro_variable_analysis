<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/ejdb/src/jbi/jbi_sorter_consumer.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ejdb2_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sort_r.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_jbi_scan_sorter_release</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_JBEXEC</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JBSSC</name></name> <modifier>*</modifier></type><name>ssc</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ssc</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ssc</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ssc</name><operator>-&gt;</operator><name>sof_active</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>ssc</name><operator>-&gt;</operator><name>sof</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ssc</name><operator>-&gt;</operator><name>sof</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ssc</name><operator>-&gt;</operator><name>docs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ssc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ssc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_jbi_scan_sorter_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>o1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>o2</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>r1</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JBL</name></name></type> <name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JBEXEC</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>op</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JBSSC</name></name> <modifier>*</modifier></type><name>ssc</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ssc</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>JQP_AUX</name></name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>-&gt;</operator><name>q</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>orderby_num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r1</name></expr></argument>, <argument><expr><name>o1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>r1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r2</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>p1</name> <operator>=</operator> <name><name>ssc</name><operator>-&gt;</operator><name>docs</name></name> <operator>+</operator> <name>r1</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr> <comment type="block">/*id*/</comment>;</expr_stmt>
  <expr_stmt><expr><name>p2</name> <operator>=</operator> <name><name>ssc</name><operator>-&gt;</operator><name>docs</name></name> <operator>+</operator> <name>r2</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr> <comment type="block">/*id*/</comment>;</expr_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_from_buf_keep_onstack2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d1</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_from_buf_keep_onstack2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d2</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>aux</name><operator>-&gt;</operator><name>orderby_num</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>_JBL</name></name></type> <name>v1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>_JBL</name></name></type> <name>v2</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JBL_PTR</name></type> <name>ptr</name> <init>= <expr><name><name>aux</name><operator>-&gt;</operator><name>orderby_ptrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>desc</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>ptr</name><operator>-&gt;</operator><name>op</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt> <comment type="line">// If `-1` do desc sorting</comment>
    <expr_stmt><expr><call><name>_jbl_at</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d1</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_jbl_at</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d2</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>_jbl_cmp_atomic_values</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v2</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>desc</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rv</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ssc</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>ssc</name><operator>-&gt;</operator><name>fatal_jmp</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jbi_scan_sorter_apply</name><parameter_list>(<parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_JBEXEC</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>JQL</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_EJDB_DOC</name></name> <modifier>*</modifier></type><name>doc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name> <init>= <expr><name><name>doc</name><operator>-&gt;</operator><name>raw</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>JQP_AUX</name></name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jbl_to_node</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>root</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>doc</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>qmode</name></name> <operator>&amp;</operator> <name>JQP_QRY_APPLY_DEL</name></expr>)</condition> <block>{<block_content>  
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jb_del</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jbc</name></name></expr></argument>, <argument><expr><name>jbl</name></expr></argument>, <argument><expr><name><name>doc</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>apply</name></name> <operator>||</operator> <name><name>aux</name><operator>-&gt;</operator><name>apply_placeholder</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>_JBL</name></name></type> <name>sn</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_apply</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_from_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sn</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jb_put</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jbc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sn</name></expr></argument>, <argument><expr><name><name>doc</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sn</name><operator>.</operator><name>bn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>projection</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_project</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jbi_scan_sorter_do</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_JBEXEC</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>step</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JBL</name></name></type> <name>jbl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB_EXEC</name> <modifier>*</modifier></type><name>ux</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JBSSC</name></name> <modifier>*</modifier></type><name>ssc</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ssc</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>rnum</name> <init>= <expr><name><name>ssc</name><operator>-&gt;</operator><name>refs_num</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>JQP_AUX</name></name> <modifier>*</modifier></type><name>aux</name> <init>= <expr><name><name>ux</name><operator>-&gt;</operator><name>q</name><operator>-&gt;</operator><name>aux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><name><name>ux</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>rnum</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>setjmp</name><argument_list>(<argument><expr><name><name>ssc</name><operator>-&gt;</operator><name>fatal_jmp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <comment type="line">// Init error jump</comment>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name><name>ssc</name><operator>-&gt;</operator><name>rc</name></name></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ssc</name><operator>-&gt;</operator><name>docs</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>sp</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name><name>ssc</name><operator>-&gt;</operator><name>sof</name><operator>.</operator><name>probe_mmap</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ssc</name><operator>-&gt;</operator><name>sof</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssc</name><operator>-&gt;</operator><name>docs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>sort_r</name><argument_list>(<argument><expr><name><name>ssc</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>, <argument><expr><name>rnum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ssc</name><operator>-&gt;</operator><name>refs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>_jbi_scan_sorter_cmp</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>ux</name><operator>-&gt;</operator><name>skip</name></name></expr></init></decl>;</init> <condition><expr><name>step</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>rnum</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rp</name> <init>= <expr><name><name>ssc</name><operator>-&gt;</operator><name>docs</name></name> <operator>+</operator> <name><name>ssc</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_from_buf_keep_onstack2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>_EJDB_DOC</name></name></type> <name>doc</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>id</name>  <operator>=</operator> <name>id</name></expr>,
      <expr><operator>.</operator><name>raw</name> <operator>=</operator> <operator>&amp;</operator><name>jbl</name></expr>
    }</block></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>apply</name></name> <operator>||</operator> <name><name>aux</name><operator>-&gt;</operator><name>projection</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name>iwpool_create</name><argument_list>(<argument><expr><name><name>jbl</name><operator>.</operator><name>bn</name><operator>.</operator><name>size</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>finish</name>;</goto>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_jbi_scan_sorter_apply</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ux</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>doc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>aux</name><operator>-&gt;</operator><name>qmode</name></name> <operator>&amp;</operator> <name>JQP_QRY_APPLY_DEL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jb_del</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jbc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>aux</name><operator>-&gt;</operator><name>qmode</name></name> <operator>&amp;</operator> <name>JQP_QRY_AGGREGATE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <do>do <block>{<block_content>
        <expr_stmt><expr><name>step</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name><name>ux</name><operator>-&gt;</operator><name>visitor</name></name><argument_list>(<argument><expr><name>ux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>doc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>step</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> while <condition>(<expr><name>step</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>;</do>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>++</operator><name><name>ux</name><operator>-&gt;</operator><name>cnt</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pool</name> <operator>!=</operator> <name><name>ux</name><operator>-&gt;</operator><name>pool</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pool</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>ux</name><operator>-&gt;</operator><name>limit</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>pool</name> <operator>!=</operator> <name><name>ux</name><operator>-&gt;</operator><name>pool</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>_jbi_scan_sorter_release</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jbi_scan_sorter_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_JBSSC</name></name> <modifier>*</modifier></type><name>ssc</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>initial_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWFS_EXT_OPTS</name></type> <name>opts</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>initial_size</name> <operator>=</operator> <name>initial_size</name></expr>,
    <expr><operator>.</operator><name>rspolicy</name>     <operator>=</operator> <name>iw_exfile_szpolicy_fibo</name></expr>,
    <expr><operator>.</operator><name>file</name>         <operator>=</operator> <block>{
      <expr><operator>.</operator><name>path</name>       <operator>=</operator> <literal type="string">"jb-"</literal></expr>,
      <expr><operator>.</operator><name>omode</name>      <operator>=</operator> <name>IWFS_OTMP</name> <operator>|</operator> <name>IWFS_OUNLINK</name></expr>
    }</block></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwfs_exfile_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ssc</name><operator>-&gt;</operator><name>sof</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>ssc</name><operator>-&gt;</operator><name>sof</name><operator>.</operator><name>add_mmap</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ssc</name><operator>-&gt;</operator><name>sof</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIZE_T_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>ssc</name><operator>-&gt;</operator><name>sof</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ssc</name><operator>-&gt;</operator><name>sof</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbi_sorter_consumer</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>_JBEXEC</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>IWKV_cursor</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>,
  <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>step</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>matched</name></decl></parameter>, <parameter><decl><type><name>iwrc</name></type> <name>err</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>id</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// End of scan</comment>
    <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// In the case of error do not perform sorting just release resources</comment>
      <expr_stmt><expr><call><name>_jbi_scan_sorter_release</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>err</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><call><name>_jbi_scan_sorter_do</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>vsz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JBL</name></name></type> <name>jbl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JBSSC</name></name> <modifier>*</modifier></type><name>ssc</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ssc</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EJDB</name></type> <name>db</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>jbc</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_EXT</name> <modifier>*</modifier></type><name>sof</name> <init>= <expr><operator>&amp;</operator><name><name>ssc</name><operator>-&gt;</operator><name>sof</name></name></expr></init></decl>;</decl_stmt>

<label><name>start</name>:</label>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>cur</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_cursor_copy_val</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jblbuf</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jblbufsz</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>IWKV_val</name></type> <name>key</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>id</name></expr>,
        <expr><operator>.</operator><name>size</name> <operator>=</operator> sizeof<operator>(</operator><name>id</name><operator>)</operator></expr>
      }</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_get_copy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jbc</name><operator>-&gt;</operator><name>cdb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jblbuf</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jblbufsz</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>IWKV_ERROR_NOTFOUND</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>vsz</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>jblbufsz</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>nsize</name> <init>= <expr><call><name>MAX</name><argument_list>(<argument><expr><name>vsz</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jblbufsz</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>nbuf</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jblbuf</name></name></expr></argument>, <argument><expr><name>nsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nbuf</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>jblbuf</name></name> <operator>=</operator> <name>nbuf</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>jblbufsz</name></name> <operator>=</operator> <name>nsize</name></expr>;</expr_stmt>
      <goto>goto <name>start</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_from_buf_keep_onstack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jblbuf</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>vsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jql_matched</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ux</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>, <argument><expr><name>matched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>matched</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ssc</name><operator>-&gt;</operator><name>refs</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ssc</name><operator>-&gt;</operator><name>refs_asz</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>document_buffer_sz</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssc</name><operator>-&gt;</operator><name>refs</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>document_buffer_sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ssc</name><operator>-&gt;</operator><name>refs</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>ssc</name><operator>-&gt;</operator><name>docs_asz</name></name> <operator>=</operator> <literal type="number">128</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt> <comment type="line">// 128K</comment>
    <expr_stmt><expr><name><name>ssc</name><operator>-&gt;</operator><name>docs</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>ssc</name><operator>-&gt;</operator><name>docs_asz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ssc</name><operator>-&gt;</operator><name>docs</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ssc</name><operator>-&gt;</operator><name>refs_asz</name></name> <operator>&lt;=</operator> <operator>(</operator><name><name>ssc</name><operator>-&gt;</operator><name>refs_num</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ssc</name><operator>-&gt;</operator><name>refs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ssc</name><operator>-&gt;</operator><name>refs_asz</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>nrefs</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>ssc</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>, <argument><expr><name><name>ssc</name><operator>-&gt;</operator><name>refs_asz</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nrefs</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>ssc</name><operator>-&gt;</operator><name>refs</name></name> <operator>=</operator> <name>nrefs</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>vsz</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jblbuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>start2</name>:</label>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ssc</name><operator>-&gt;</operator><name>docs</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>rsize</name> <init>= <expr><name><name>ssc</name><operator>-&gt;</operator><name>docs_npos</name></name> <operator>+</operator> <name>vsz</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>rsize</name> <operator>&gt;</operator> <name><name>ssc</name><operator>-&gt;</operator><name>docs_asz</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ssc</name><operator>-&gt;</operator><name>docs_asz</name></name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>rsize</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>sort_buffer_sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>rsize</name> <operator>&gt;</operator> <name><name>ssc</name><operator>-&gt;</operator><name>docs_asz</name></name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbi_scan_sorter_init</name><argument_list>(<argument><expr><name>ssc</name></expr></argument>, <argument><expr><operator>(</operator><name><name>ssc</name><operator>-&gt;</operator><name>docs_npos</name></name> <operator>+</operator> <name>vsz</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>sof</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name>sof</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ssc</name><operator>-&gt;</operator><name>docs</name></name></expr></argument>, <argument><expr><name><name>ssc</name><operator>-&gt;</operator><name>docs_npos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ssc</name><operator>-&gt;</operator><name>docs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>ssc</name><operator>-&gt;</operator><name>docs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>ssc</name><operator>-&gt;</operator><name>sof_active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
          <goto>goto <name>start2</name>;</goto>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>nbuf</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>ssc</name><operator>-&gt;</operator><name>docs</name></name></expr></argument>, <argument><expr><name><name>ssc</name><operator>-&gt;</operator><name>docs_asz</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nbuf</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name><name>ssc</name><operator>-&gt;</operator><name>docs</name></name> <operator>=</operator> <name>nbuf</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ssc</name><operator>-&gt;</operator><name>docs</name></name> <operator>+</operator> <name><name>ssc</name><operator>-&gt;</operator><name>docs_npos</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jblbuf</name></name></expr></argument>, <argument><expr><name>vsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>sof</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name>sof</name></expr></argument>, <argument><expr><name><name>ssc</name><operator>-&gt;</operator><name>docs_npos</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>jblbuf</name></name></expr></argument>, <argument><expr><name>vsz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>ssc</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name><name>ssc</name><operator>-&gt;</operator><name>refs_num</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>ssc</name><operator>-&gt;</operator><name>docs_npos</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssc</name><operator>-&gt;</operator><name>docs_npos</name></name> <operator>+=</operator> <name>vsz</name></expr>;</expr_stmt>
  </block_content>}</block>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
</unit>
