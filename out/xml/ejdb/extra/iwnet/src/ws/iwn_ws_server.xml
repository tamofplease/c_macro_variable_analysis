<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/ws/iwn_ws_server.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_ws_server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_http_server_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_base64.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wslay/wslay.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bearssl/bearssl_hash.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwlog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwxstr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/tcp.h&gt;</cpp:file></cpp:include>

<struct>struct <name>msg</name> <block>{
  <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>      <name>buf_len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>     <name>opcode</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ctx</name> <block>{
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_ws_sess</name></name></type>   <name>sess</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>hreq</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_ws_handler_spec</name></name> <modifier>*</modifier></type><name>spec</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>msgs</name></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>on_request_dispose</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>wslay_event_context_ptr</name></type> <name>wc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mtx</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_ctx_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier><name>m</name></type> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>msgs</name></name></expr></init></decl>;</init> <condition><expr><name>m</name></expr>;</condition> <incr/>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>m</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>spec</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>spec</name><operator>-&gt;</operator><name>on_session_dispose</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>spec</name><operator>-&gt;</operator><name>on_session_dispose</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sess</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>wslay_event_context_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>wc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_route_handler_dispose</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_ws_handler_spec</name></name> <modifier>*</modifier></type><name>spec</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>spec</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>on_handler_dispose</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>spec</name><operator>-&gt;</operator><name>on_handler_dispose</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>spec</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_on_request_dispose</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>hreq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>iwn_http_request_ws_data</name><argument_list>(<argument><expr><name>hreq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>on_request_dispose</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>on_request_dispose</name></name></expr></init>;</function_decl>
  <if_stmt><if>if <condition>(<expr><name>on_request_dispose</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>on_request_dispose</name><argument_list>(<argument><expr><name>hreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>_ctx_destroy</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>_wslay_recv_callback</name><parameter_list>(
  <parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>wctx</name></decl></parameter>,
  <parameter><decl><type><name>uint8_t</name>                <modifier>*</modifier></type><name>buf</name></decl></parameter>,
  <parameter><decl><type><name>size_t</name></type>                  <name>len</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type>                     <name>flags</name></decl></parameter>,
  <parameter><decl><type><name>void</name>                   <modifier>*</modifier></type><name>user_data</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>rci</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_poller_adapter</name></name> <modifier>*</modifier></type><name>pa</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hreq</name><operator>-&gt;</operator><name>poller_adapter</name></name></expr></init></decl>;</decl_stmt>

<label><name>again</name>:</label>
  <expr_stmt><expr><name>rci</name> <operator>=</operator> <call><name><name>pa</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>again</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EAGAIN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>wslay_event_set_error</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>wc</name></name></expr></argument>, <argument><expr><name>WSLAY_ERR_WOULDBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>wslay_event_set_error</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>wc</name></name></expr></argument>, <argument><expr><name>WSLAY_ERR_CALLBACK_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rci</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wslay_event_shutdown_read</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>wc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rci</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rci</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>_wslay_send_callback</name><parameter_list>(
  <parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>wctx</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name>          <modifier>*</modifier></type><name>buf</name></decl></parameter>,
  <parameter><decl><type><name>size_t</name></type>                  <name>len</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type>                     <name>flags</name></decl></parameter>,
  <parameter><decl><type><name>void</name>                   <modifier>*</modifier></type><name>user_data</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>rci</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_poller_adapter</name></name> <modifier>*</modifier></type><name>pa</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hreq</name><operator>-&gt;</operator><name>poller_adapter</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>again</name>:</label>
  <expr_stmt><expr><name>rci</name> <operator>=</operator> <call><name><name>pa</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>again</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EAGAIN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>wslay_event_set_error</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>wc</name></name></expr></argument>, <argument><expr><name>WSLAY_ERR_WOULDBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>wslay_event_set_error</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>wc</name></name></expr></argument>, <argument><expr><name>WSLAY_ERR_CALLBACK_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rci</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wslay_event_shutdown_write</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>wc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rci</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rci</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>_on_poller_adapter_event</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller_adapter</name></name> <modifier>*</modifier></type><name>pa</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>events</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>hreq</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>iwn_http_request_ws_data</name><argument_list>(<argument><expr><name>hreq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>wslay_event_want_write</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>wc</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>wslay_event_send</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>wc</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>wslay_event_want_read</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>wc</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>wslay_event_recv</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>wc</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>wslay_event_want_read</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>wc</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>|=</operator> <name>IWN_POLLIN</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>wslay_event_want_write</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>wc</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>|=</operator> <name>IWN_POLLOUT</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>msgs</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>msgs</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>msgs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="line">// Transfer ownership</comment>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// In order to avoid deadlocks process message handlers out of `ctx-&gt;mtx`</comment>
  <while>while <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>ctx</name><operator>-&gt;</operator><name>spec</name><operator>-&gt;</operator><name>handler</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sess</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>buf_len</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>opcode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>m</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><ternary><condition><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>ret</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_wslay_msg_recv_callback</name><parameter_list>(
  <parameter><decl><type><name>wslay_event_context_ptr</name></type>                   <name>wctx</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>wslay_event_on_msg_recv_arg</name></name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
  <parameter><decl><type><name>void</name>                                     <modifier>*</modifier></type><name>user_data</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(  <expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>spec</name><operator>-&gt;</operator><name>handler</name></name>
     <operator>||</operator> <operator>!</operator><operator>(</operator>  <operator>(</operator>  <name><name>arg</name><operator>-&gt;</operator><name>msg_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
            <operator>&amp;&amp;</operator> <operator>(</operator><name><name>arg</name><operator>-&gt;</operator><name>opcode</name></name> <operator>==</operator> <name>WSLAY_TEXT_FRAME</name> <operator>||</operator> <name><name>arg</name><operator>-&gt;</operator><name>opcode</name></name> <operator>==</operator> <name>WSLAY_BINARY_FRAME</name><operator>)</operator><operator>)</operator>
         <operator>||</operator> <operator>(</operator>  <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>spec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WS_HANDLE_PING_PONG</name><operator>)</operator>
            <operator>&amp;&amp;</operator> <operator>(</operator><name><name>arg</name><operator>-&gt;</operator><name>opcode</name></name> <operator>==</operator> <name>WSLAY_PING</name> <operator>||</operator> <name><name>arg</name><operator>-&gt;</operator><name>opcode</name></name> <operator>==</operator> <name>WSLAY_PONG</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>m</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>error</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <name><name>arg</name><operator>-&gt;</operator><name>opcode</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>buf_len</name></name> <operator>=</operator> <name><name>arg</name><operator>-&gt;</operator><name>msg_length</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>buf_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>error</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>buf_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>buf_len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>msg</name></name> <modifier>*</modifier></type><name>mm</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>msgs</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>mm</name></expr>)</condition> <block>{<block_content>
    <while>while <condition>(<expr><name><name>mm</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mm</name> <operator>=</operator> <name><name>mm</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
    <expr_stmt><expr><name><name>mm</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>msgs</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return;</return>

<label><name>error</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_on_response_completed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>hreq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>lv</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>iwn_http_request_ws_data</name><argument_list>(<argument><expr><name>hreq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><macro><name>wslay_event_context_server_init</name><argument_list>(<argument>&amp;ctx-&gt;wc</argument>, <argument>&amp;(struct wslay_event_callbacks) {
    .recv_callback = _wslay_recv_callback</argument>,
    <argument>.send_callback = _wslay_send_callback</argument>,
    <argument>.on_msg_recv_callback = _wslay_msg_recv_callback
  }</argument>, <argument>ctx</argument>)</argument_list></macro></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>hreq</name><operator>-&gt;</operator><name>poller_adapter</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_NODELAY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>iwn_poller_set_timeout</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hreq</name><operator>-&gt;</operator><name>poller_adapter</name><operator>-&gt;</operator><name>poller</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hreq</name><operator>-&gt;</operator><name>poller_adapter</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwn_http_inject_poller_events_handler</name><argument_list>(<argument><expr><name>hreq</name></expr></argument>, <argument><expr><name>_on_poller_adapter_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>spec</name><operator>-&gt;</operator><name>on_session_init</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name><name>ctx</name><operator>-&gt;</operator><name>spec</name><operator>-&gt;</operator><name>on_session_init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sess</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_route_handler</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>hreq</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_ws_handler_spec</name></name> <modifier>*</modifier></type><name>spec</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>on_http_init</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><call><name><name>spec</name><operator>-&gt;</operator><name>on_http_init</name></name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>rv</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>val</name> <init>= <expr><call><name>iwn_http_request_header_get</name><argument_list>(<argument><expr><name>hreq</name></expr></argument>, <argument><expr><literal type="string">"upgrade"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"upgrade"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>val</name><operator>.</operator><name>len</name></name> <operator>!=</operator> <call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"websocket"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"websocket"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return> <comment type="line">// Unhandled</comment>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>iwn_http_request_header_get</name><argument_list>(<argument><expr><name>hreq</name></expr></argument>, <argument><expr><literal type="string">"sec-websocket-version"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"sec-websocket-version"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>val</name><operator>.</operator><name>len</name></name> <operator>!=</operator> <call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"13"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"13"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>ws_key</name> <init>= <expr><call><name>iwn_http_request_header_get</name><argument_list>(<argument><expr><name>hreq</name></expr></argument>, <argument><expr><literal type="string">"sec-websocket-key"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"sec-websocket-key"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ws_key</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_http_response_header_set</name><argument_list>(<argument><expr><name>hreq</name></expr></argument>, <argument><expr><literal type="string">"upgrade"</literal></expr></argument>, <argument><expr><literal type="string">"websocket"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"websocket"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>iwn_http_request_header_get</name><argument_list>(<argument><expr><name>hreq</name></expr></argument>, <argument><expr><literal type="string">"sec-websocket-protocol"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"sec-websocket-protocol"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>val</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_http_response_header_set</name><argument_list>(<argument><expr><name>hreq</name></expr></argument>, <argument><expr><literal type="string">"sec-websocket-protocol"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name><name>ws_key</name><operator>.</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name>len</name> <operator>+</operator> <call><name>IW_LLEN</name><argument_list>(<argument><expr><name>WS_MAGIC13</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hbuf</name><index>[<expr><name>br_sha1_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>vbuf</name><index>[<expr><name>br_sha1_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>ws_key</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>WS_MAGIC13</name></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><name>WS_MAGIC13</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>br_sha1_context</name></type> <name>sha1</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>br_sha1_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>br_sha1_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>br_sha1_out</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument>, <argument><expr><name>hbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>iwn_base64_encode</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>hbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>base64_VARIANT_ORIGINAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_http_response_header_set</name><argument_list>(<argument><expr><name>hreq</name></expr></argument>, <argument><expr><literal type="string">"sec-websocket-accept"</literal></expr></argument>, <argument><expr><name>vbuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name>ctx</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hreq</name></name> <operator>=</operator> <name>hreq</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sess</name><operator>.</operator><name>req</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>spec</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sess</name><operator>.</operator><name>spec</name></name> <operator>=</operator> <name>spec</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>iwn_http_request_ws_set</name><argument_list>(<argument><expr><name>hreq</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>on_request_dispose</name></name> <operator>=</operator> <name><name>hreq</name><operator>-&gt;</operator><name>on_request_dispose</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hreq</name><operator>-&gt;</operator><name>on_request_dispose</name></name> <operator>=</operator> <name>_on_request_dispose</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hreq</name><operator>-&gt;</operator><name>on_response_completed</name></name> <operator>=</operator> <name>_on_response_completed</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>iwn_http_connection_set_upgrade</name><argument_list>(<argument><expr><name>hreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>iwn_http_response_write</name><argument_list>(<argument><expr><name>hreq</name></expr></argument>, <argument><expr><literal type="number">101</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rv</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_ctx_destroy</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>iwn_wf_route</name></name><modifier>*</modifier></type> <name>iwn_ws_server_route_attach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_route</name></name> <modifier>*</modifier></type><name>route</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_ws_handler_spec</name></name> <modifier>*</modifier></type><name>spec_</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>route</name> <operator>||</operator> <operator>!</operator><name>spec_</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_ws_handler_spec</name></name> <modifier>*</modifier></type><name>spec</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>spec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>spec</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>spec</name></expr></argument>, <argument><expr><name>spec_</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>spec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>route</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>_route_handler</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>route</name><operator>-&gt;</operator><name>handler_dispose</name></name> <operator>=</operator> <name>_route_handler_dispose</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>route</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>spec</name></expr>;</expr_stmt>
  <return>return <expr><name>route</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_ws_server_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_sess</name></name> <modifier>*</modifier></type><name>sess</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>buf_len</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>wslay_opcode</name></name></type> <name>opc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>sess</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>buf_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>buf_len</name> <operator>=</operator> <ternary><condition><expr><name>buf</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>opc</name> <operator>==</operator> <name>WSLAY_CONNECTION_CLOSE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wslay_event_shutdown_read</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>wc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><macro><name>wslay_event_queue_msg</name><argument_list>(<argument>ctx-&gt;wc</argument>, <argument>&amp;(struct wslay_event_msg) {
    .opcode = opc</argument>,
    <argument>.msg = (void*) buf</argument>,
    <argument>.msg_length = buf_len
  }</argument>)</argument_list></macro></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal> <operator>==</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>hreq</name><operator>-&gt;</operator><name>poller_adapter</name><operator>-&gt;</operator><name>arm</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hreq</name><operator>-&gt;</operator><name>poller_adapter</name></name></expr></argument>, <argument><expr><name>IWN_POLLOUT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>write_fd_ctx</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>      <name>buf_len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>enum</name> <name>wslay_opcode</name></name></type> <name>opc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_write_fd_probe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>slot_user_data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fn_user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_poller_adapter</name></name> <modifier>*</modifier></type><name>pa</name> <init>= <expr><name>slot_user_data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>request</name> <init>= <expr><name><name>pa</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_ws_sess</name></name> <modifier>*</modifier></type><name>sess</name> <init>= <expr><call><name>iwn_http_request_ws_data</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>write_fd_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>fn_user_data</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ret</name></name> <operator>=</operator> <call><name>_ws_server_write</name><argument_list>(<argument><expr><name>sess</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf_len</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>opc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_ws_server_fd_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>buf_len</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>wslay_opcode</name></name></type> <name>opc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>write_fd_ctx</name></name></type> <name>ctx</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>buf</name>     <operator>=</operator> <name>buf</name></expr>,
    <expr><operator>.</operator><name>buf_len</name> <operator>=</operator> <name>buf_len</name></expr>,
    <expr><operator>.</operator><name>opc</name>     <operator>=</operator> <name>opc</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>iwn_poller_probe</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>_write_fd_probe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>ctx</name><operator>.</operator><name>ret</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_ws_server_ping</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_sess</name></name> <modifier>*</modifier></type><name>sess</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>buf_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_ws_server_write</name><argument_list>(<argument><expr><name>sess</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>WSLAY_PING</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_ws_server_ping_fd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>buf_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_ws_server_fd_write</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>WSLAY_PING</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_ws_server_write_binary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_sess</name></name> <modifier>*</modifier></type><name>sess</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>buf_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_ws_server_write</name><argument_list>(<argument><expr><name>sess</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>WSLAY_BINARY_FRAME</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_ws_server_write_binary_fd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>buf_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_ws_server_fd_write</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>WSLAY_BINARY_FRAME</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_ws_server_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_sess</name></name> <modifier>*</modifier></type><name>sess</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>buf_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_ws_server_write</name><argument_list>(<argument><expr><name>sess</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>WSLAY_TEXT_FRAME</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_ws_server_write_fd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>buf_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_ws_server_fd_write</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>WSLAY_TEXT_FRAME</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_ws_server_printf_va</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_sess</name></name> <modifier>*</modifier></type><name>sess</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>va</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>va_list</name></type> <name>cva</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>cva</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_FAIL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name>wp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>cva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_FAIL</name></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iwn_ws_server_write</name><argument_list>(<argument><expr><name>sess</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>cva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>buf</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name> <operator>&amp;&amp;</operator> <name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwn_ws_server_printf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_sess</name></name> <modifier>*</modifier></type><name>sess</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>iwn_ws_server_printf_va</name><argument_list>(<argument><expr><name>sess</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwn_ws_server_session_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_ws_sess</name></name> <modifier>*</modifier></type><name>sess</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>sess</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_ws_server_write</name><argument_list>(<argument><expr><name>sess</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WSLAY_CONNECTION_CLOSE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// Fallback mode</comment>
      <expr_stmt><expr><call><name>iwn_poller_remove</name><argument_list>(<argument><expr><name><name>sess</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name><operator>-&gt;</operator><name>poller_adapter</name><operator>-&gt;</operator><name>poller</name></name></expr></argument>, <argument><expr><name><name>sess</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name><operator>-&gt;</operator><name>poller_adapter</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
