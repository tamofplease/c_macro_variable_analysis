<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/http/tests/wf_test1.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_tests.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_wf_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_codec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>iwn_wf_ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_root_handler</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_route_handler</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>request</name></name><modifier>*</modifier></type> <name>_request_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>method</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>iwpool_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>req</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT_FATAL</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name></name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>path_len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path_unmatched</name></name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>method</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
  <return>return <expr><name>req</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>route</name></name><modifier>*</modifier></type> <name>_request_first_matched</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>methods</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>route_iter</name></name> <modifier>*</modifier></type><name>oit</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>iwpool_create_empty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT_FATAL</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>_request_create</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>methods</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>route_iter</name></name></type> <name>it</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>dbg_route_iter_init</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>route</name></name> <modifier>*</modifier></type><name>route</name> <init>= <expr><call><name>dbg_route_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>oit</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>oit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>oit</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>dbg_request_destroy</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>route</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>test_regexp_matching</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>route_iter</name></name></type> <name>it</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>route</name></name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_wf_route</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_create(&amp;(struct iwn_wf_route) {
    .handler = _root_handler,
    .tag = <literal type="string">"root"</literal>
  }, &amp;ctx)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_route(&amp;(struct iwn_wf_route) {
    .ctx = ctx,
    .pattern = <literal type="string">"^/fo([^/]+)"</literal>,
    .handler = _route_handler,
  }, &amp;p)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_route(&amp;(struct iwn_wf_route) {
    .ctx = ctx,
    .pattern = <literal type="string">"^/b(a)(rr?)"</literal>,
    .handler = _route_handler,
    .tag = <literal type="string">"bar0"</literal>,
  }, <literal type="number">0</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>_request_first_matched</name><argument_list>(<argument><expr><literal type="string">"/foo"</literal></expr></argument>, <argument><expr><name>IWN_WF_GET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dbg_request_destroy</name><argument_list>(<argument><expr><name><name>it</name><operator>.</operator><name>req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>iwn_wf_destroy</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ctx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>test_header_parsing</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rp</name> <init>= <expr><literal type="string">"_ga=GA1.2.258852180.1582174090; sessionid=AJyF7R984Ezziz7nYgmezxtxmMbT1Cyr\r\nU"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT_FATAL</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_pair</name></name></type> <name>pv</name> <init>= <expr><call><name>iwn_wf_header_val_part_find</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><literal type="string">"sessionid"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>test_simple_matching</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>route_iter</name></name></type> <name>it</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>route</name></name> <modifier>*</modifier></type><name>r</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>r2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_wf_route</name></name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>

  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_create(&amp;(struct iwn_wf_route) {
    .handler = _root_handler,
    .tag = <literal type="string">"root"</literal>
  }, &amp;ctx)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_route(&amp;(struct iwn_wf_route) {
    .ctx = ctx,
    .pattern = <literal type="string">"/foo"</literal>,
    .handler = _route_handler,
  }, &amp;p)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_route(&amp;(struct iwn_wf_route) {
    .ctx = ctx,
    .pattern = <literal type="string">"/bar"</literal>,
    .flags = IWN_WF_GET | IWN_WF_PUT,
    .handler = _route_handler,
    .tag = <literal type="string">"bar0"</literal>,
  }, <literal type="number">0</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_route(&amp;(struct iwn_wf_route) {
    .parent = p,
    .pattern = <literal type="string">"/zaz"</literal>,
    .handler = _route_handler,
  }, <literal type="number">0</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_route(&amp;(struct iwn_wf_route) {
    .parent = p,
    .pattern = <literal type="string">"/bar"</literal>,
    .handler = _route_handler,
    .tag = <literal type="string">"bar2"</literal>
  }, &amp;p2)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_route(&amp;(struct iwn_wf_route) {
    .parent = p2,
    .handler = _route_handler,
    .tag = <literal type="string">"bar2_nested"</literal>
  }, <literal type="number">0</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>_request_first_matched</name><argument_list>(<argument><expr><literal type="string">"/bar"</literal></expr></argument>, <argument><expr><name>IWN_WF_PUT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><literal type="string">"/bar"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>dbg_request_destroy</name><argument_list>(<argument><expr><name><name>it</name><operator>.</operator><name>req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>_request_first_matched</name><argument_list>(<argument><expr><literal type="string">"/bar"</literal></expr></argument>, <argument><expr><name>IWN_WF_POST</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dbg_request_destroy</name><argument_list>(<argument><expr><name><name>it</name><operator>.</operator><name>req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>_request_first_matched</name><argument_list>(<argument><expr><literal type="string">"/foo"</literal></expr></argument>, <argument><expr><name>IWN_WF_GET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><literal type="string">"/foo"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>dbg_route_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dbg_request_destroy</name><argument_list>(<argument><expr><name><name>it</name><operator>.</operator><name>req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>_request_first_matched</name><argument_list>(<argument><expr><literal type="string">"/foo/bar"</literal></expr></argument>, <argument><expr><name>IWN_WF_GET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT_FATAL</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT_FATAL</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><literal type="string">"/foo"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name>dbg_route_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT_FATAL</name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name><name>r2</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT_FATAL</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>r2</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><literal type="string">"/bar"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>dbg_route_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT_FATAL</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>tag</name></name></expr></argument>, <argument><expr><literal type="string">"bar2_nested"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dbg_request_destroy</name><argument_list>(<argument><expr><name><name>it</name><operator>.</operator><name>req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>iwn_wf_destroy</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ctx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_ensure_multipart</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>iwn_pairs</name></name> <modifier>*</modifier></type><name>parts</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>       <modifier>*</modifier></type><name>name</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>       <modifier>*</modifier></type><name>file</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>       <modifier>*</modifier></type><name>ctype</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>       <modifier>*</modifier></type><name>data</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>IWN_ASSERT_FATAL</name><argument_list>(<argument><expr><name>parts</name> <operator>&amp;&amp;</operator> <name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_pair</name></name> <modifier>*</modifier></type><name>part</name> <init>= <expr><call><name>iwn_pair_find</name><argument_list>(<argument><expr><name>parts</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>part</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>iwn_pair_find</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="string">"filename"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"filename"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name> <operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>val_len</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>ctype</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>iwn_pair_find</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="string">"content-type"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"content-type"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name> <operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>val_len</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>file</name> <operator>||</operator> <name>ctype</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>part</name><operator>-&gt;</operator><name>val_len</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_multipart_parsing3</name><parameter_list>(<parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rp</name>
    <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"--x\r\n"</literal>
             <literal type="string">"Content-Disposition: inline; name=\"zz\"\r\n"</literal>
             <literal type="string">"\r\nz\r\n"</literal>
             <literal type="string">"--x--\r\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>eof</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_pairs</name></name></type> <name>parts</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><name>rp</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>dbg_multipart_parse_next</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eof</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>parts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rp</name>
    <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"--x\r\n"</literal>
             <literal type="string">"Content-Disposition: form-data; name=\"zz\"\r\n"</literal>
             <literal type="string">"\r\nz\r\n"</literal>
             <literal type="string">"--x--\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ep</name> <operator>=</operator> <name>rp</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>dbg_multipart_parse_next</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>parts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rp</name>
    <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"--x\r\n"</literal>
             <literal type="string">"Content-Disposition: form-data; name=\"zz\"; filename=\"f\\oo.html\"\r\n"</literal>
             <literal type="string">"\r\nz\r\n"</literal>
             <literal type="string">"--x--\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ep</name> <operator>=</operator> <name>rp</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>dbg_multipart_parse_next</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><call><name>_ensure_multipart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parts</name></expr></argument>, <argument><expr><literal type="string">"zz"</literal></expr></argument>, <argument><expr><literal type="string">"foo.html"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>parts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rp</name>
    <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"--x\r\n"</literal>
             <literal type="string">"Content-Disposition: form-data; name=z,z\r\n"</literal>
             <literal type="string">"\r\nz\r\n"</literal>
             <literal type="string">"--x--\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ep</name> <operator>=</operator> <name>rp</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>dbg_multipart_parse_next</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// TODO: should be cp == 0</comment>
  <comment type="line">// http://test.greenbytes.de/tech/tc2231/#attwithtokfncommanq</comment>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>parts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rp</name>
    <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"--x\r\n"</literal>
             <literal type="string">"Content-Disposition: form-data; name=z"</literal>
             <literal type="string">"\r\nz\r\n"</literal>
             <literal type="string">"--x--\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ep</name> <operator>=</operator> <name>rp</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>dbg_multipart_parse_next</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>parts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rp</name>
    <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"--x\r\n"</literal>
             <literal type="string">"Content-Disposition: form-data; name=\"zz\"\r\n"</literal>
             <literal type="string">"\r\nz\r\n"</literal>
             <literal type="string">"--xx--\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ep</name> <operator>=</operator> <name>rp</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>dbg_multipart_parse_next</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>parts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rp</name>
    <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"--x\r\n"</literal>
             <literal type="string">"Content-Disposition: form-data; name=\"zz\";\r\n"</literal>
             <literal type="string">"\r\nz\r\n"</literal>
             <literal type="string">"--x--\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ep</name> <operator>=</operator> <name>rp</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>dbg_multipart_parse_next</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>parts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rp</name>
    <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"--x\r\n"</literal>
             <literal type="string">"Content-Disposition: form-data; name=\"a\"; filename=foo[1](2).html\r\n"</literal>
             <literal type="string">"\r\nz\r\n"</literal>
             <literal type="string">"--x--\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ep</name> <operator>=</operator> <name>rp</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>dbg_multipart_parse_next</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>parts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rp</name>
    <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"--x\r\n"</literal>
             <literal type="string">"Content-Disposition: form-data; filename=\"zz\"\r\n"</literal>
             <literal type="string">"\r\nz\r\n"</literal>
             <literal type="string">"--x--\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ep</name> <operator>=</operator> <name>rp</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>dbg_multipart_parse_next</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>parts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rp</name>
    <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"--x\r\n"</literal>
             <literal type="string">"Content-Disposition: \"kk\"; name=\"zz\"\r\n"</literal>
             <literal type="string">"\r\nz\r\n"</literal>
             <literal type="string">"--x--\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ep</name> <operator>=</operator> <name>rp</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>dbg_multipart_parse_next</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_multipart_parsing2</name><parameter_list>(<parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rp</name>
    <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"--\r\n"</literal>
             <literal type="string">"Content-Disposition: form-data; name=\"\"\r\n"</literal>
             <literal type="string">"Content-Type: \r\n"</literal>
             <literal type="string">"\r\n[DATA]\r\n"</literal>
             <literal type="string">"----\r\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>eof</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_pairs</name></name></type> <name>parts</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><name>rp</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>dbg_multipart_parse_next</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eof</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT_FATAL</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><call><name>_ensure_multipart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parts</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>dbg_multipart_parse_next</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_multipart_parsing1</name><parameter_list>(<parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rp</name>
    <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"--xyz\r\n"</literal>
             <literal type="string">"Content-Disposition: form-data; name=\"name\"\r\n"</literal>
             <literal type="string">"Content-Type: text/plain;charset=UTF-8\r\n"</literal>
             <literal type="string">"\r\nJohn\r\n"</literal>
             <literal type="string">"--xyz\r\n"</literal>
             <literal type="string">"Content-Disposition:form-data; name=\"age\"\r\n"</literal>
             <literal type="string">"\r\n23\r\n"</literal>
             <literal type="string">"--xyz\r\n"</literal>
             <literal type="string">"Content-Disposition: form-data; name=\"photo\"; filename=\"photo.jpeg\"\r\n"</literal>
             <literal type="string">"Content-TYPE: image/jpeg\r\n"</literal>
             <literal type="string">"\r\nxxJPGxx\r\n"</literal>
             <literal type="string">"--xyz--\r\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>eof</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_pairs</name></name></type> <name>parts</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><name>rp</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>dbg_multipart_parse_next</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="string">"xyz"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"xyz"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eof</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT_FATAL</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><call><name>_ensure_multipart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parts</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"text/plain;charset=UTF-8"</literal></expr></argument>, <argument><expr><literal type="string">"John"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>dbg_multipart_parse_next</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="string">"xyz"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"xyz"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT_FATAL</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><call><name>_ensure_multipart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parts</name></expr></argument>, <argument><expr><literal type="string">"age"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"23"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>dbg_multipart_parse_next</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="string">"xyz"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"xyz"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT_FATAL</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><call><name>_ensure_multipart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parts</name></expr></argument>, <argument><expr><literal type="string">"photo"</literal></expr></argument>, <argument><expr><literal type="string">"photo.jpeg"</literal></expr></argument>, <argument><expr><literal type="string">"image/jpeg"</literal></expr></argument>, <argument><expr><literal type="string">"xxJPGxx"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>dbg_multipart_parse_next</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="string">"xyz"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"xyz"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name>eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>test_multipart_parsing</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>iwpool_create_empty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT_FATAL</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_multipart_parsing1</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_multipart_parsing2</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_multipart_parsing3</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <comment type="line">//RCC(rc, finish, test_header_parsing());</comment>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>test_simple_matching</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>test_regexp_matching</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>test_multipart_parsing</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><name>iwn_assertions_failed</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
