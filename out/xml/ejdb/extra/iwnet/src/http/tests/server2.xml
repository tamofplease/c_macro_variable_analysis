<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/http/tests/server2.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_tests.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_wf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_wf_files.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwconv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ROOT_DISPOSED</name></cpp:macro> <cpp:value>0x01U</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_handle_get_empty_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_handle_root_cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>uint32_t</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>poller</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>iwn_wf_ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_on_signal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>poller</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwn_poller_shutdown_request</name><argument_list>(<argument><expr><name>poller</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_on_root_dispose</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>state</name> <operator>|=</operator> <name>S_ROOT_DISPOSED</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_handle_root</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>++</operator><name>_handle_root_cnt</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>iwn_http_response_write</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="number">404</literal></expr></argument>, <argument><expr><literal type="string">"text/plain"</literal></expr></argument>, <argument><expr><literal type="string">"Not found from root"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>IWN_WF_RES_PROCESSED</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_handle_echo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>val</name> <init>= <expr><call><name>iwn_http_request_header_get</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="string">"Forwarded"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"Forwarded"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>val</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwn_http_response_header_add</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="string">"Forwarded"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IWN_WF_GET</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwn_http_response_write</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="string">"text/plain"</literal></expr></argument>, <argument><expr><literal type="string">"/echo"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"/echo"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>iwn_http_response_printf</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="string">"text/plain"</literal></expr></argument>, <argument><expr><literal type="string">"%.*s\n%s\n"</literal></expr></argument>,
                             <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>req</name><operator>-&gt;</operator><name>body_len</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>body</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>user_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>IWN_WF_RES_PROCESSED</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_handle_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_handle_get_empty</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>++</operator><name>_handle_get_empty_cnt</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator> <name>user_data</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">200</literal></expr>;</return> <comment type="line">// Empty reponse with ok status</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_handle_get_query</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>foo</name> <init>= <expr><call><name>iwn_pair_find_val</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>query_params</name></name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name><name>foo</name><operator>.</operator><name>len</name></name> <operator>&amp;&amp;</operator> <name><name>foo</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>baz</name> <init>= <expr><call><name>iwn_pair_find_val</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>query_params</name></name></expr></argument>, <argument><expr><literal type="string">"baz"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name><name>baz</name><operator>.</operator><name>len</name></name> <operator>&amp;&amp;</operator> <name><name>baz</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>baz</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"a@z"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>foo</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>iwn_http_response_printf</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="string">"text/plain;"</literal></expr></argument>, <argument><expr><literal type="string">"foo=%s&amp;baz=%s"</literal></expr></argument>, <argument><expr><name><name>foo</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>baz</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_handle_fail</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_handle_post_urlencoded</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>foo</name> <init>= <expr><call><name>iwn_pair_find_val</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>form_params</name></name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name><name>foo</name><operator>.</operator><name>len</name></name> <operator>&amp;&amp;</operator> <name><name>foo</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>baz</name> <init>= <expr><call><name>iwn_pair_find_val</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>form_params</name></name></expr></argument>, <argument><expr><literal type="string">"baz"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name><name>baz</name><operator>.</operator><name>len</name></name> <operator>&amp;&amp;</operator> <name><name>baz</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>baz</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"a@z"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>foo</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>iwn_http_response_printf</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="string">"text/plain;"</literal></expr></argument>, <argument><expr><literal type="string">"foo=%s&amp;baz=%s"</literal></expr></argument>, <argument><expr><name><name>foo</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>baz</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_handle_put_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>body</name></name> <operator>&amp;&amp;</operator> <name><name>req</name><operator>-&gt;</operator><name>body_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>iwn_http_response_write</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="string">"text/plan"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>body</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>body_len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_handle_post_bigparam</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>bigparam</name> <init>= <expr><call><name>iwn_pair_find_val</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>form_params</name></name></expr></argument>, <argument><expr><literal type="string">"bigparam"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name><name>bigparam</name><operator>.</operator><name>len</name></name> <operator>&amp;&amp;</operator> <name><name>bigparam</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>iwn_http_response_write</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="string">"text/plain"</literal></expr></argument>, <argument><expr><name><name>bigparam</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>bigparam</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <macro><name>IWN_ASSERT</name><argument_list>(<argument>ret</argument>)</argument_list></macro>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_handle_post_multipart</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>atomic_int</name></type> <name>af</name> <init>= <expr><name>iwn_assertions_failed</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_pair</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>iwn_pair_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>form_params</name></name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>val_len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>iwn_pair_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>form_params</name></name></expr></argument>, <argument><expr><literal type="string">"baz"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><literal type="string">"a%40z"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>val_len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>iwn_pair_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>form_params</name></name></expr></argument>, <argument><expr><literal type="string">"bigparam"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>val_len</name></name> <operator>==</operator> <literal type="number">15165824</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>af</name> <operator>==</operator> <name>iwn_assertions_failed</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">200</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">500</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_handle_session_put</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><call><name>iwn_wf_session_put</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="string">"mykey"</literal></expr></argument>, <argument><expr><literal type="string">"70b2a86f-025b-4805-b267-871f3e1bc170"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">200</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_handle_session_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>iwn_wf_session_get</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="string">"mykey"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>iwn_http_response_write</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="string">"text/plan"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">500</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_handle_file_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>path_unmatched</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>*</operator><name>path</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>path</name></expr>;</expr_stmt></block_content></block></while>
  <return>return <expr><call><name>iwn_wf_file_serve</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_handle_file_get2_completed</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>d</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT_FATAL</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_handle_file_get2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>path_unmatched</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>*</operator><name>path</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>path</name></expr>;</expr_stmt></block_content></block></while>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT_FATAL</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>iwn_wf_fileobj_serve</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>_handle_file_get2_completed</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_handle_regex1_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>iwlog_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGUSR1</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGUSR2</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>_on_signal</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SIG_ERR</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>_on_signal</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SIG_ERR</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>ssl</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><literal type="number">9292</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>oneshot</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--ssl"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ssl</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--port"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>iwatoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--poll-threads"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>nthreads</name> <operator>=</operator> <call><name>iwatoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--poll-oneshot-events"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>oneshot</name> <operator>=</operator> <call><name>iwatoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="line">// Create WF context</comment>

  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_create(&amp;(struct iwn_wf_route) {
    .handler = _handle_root,
    .handler_dispose = _on_root_dispose,
    .tag = <literal type="string">"root"</literal>
  }, &amp;ctx)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <comment type="line">// Configure routes</comment>

  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_wf_route</name></name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_route(&amp;(struct iwn_wf_route) {
    .ctx = ctx,
    .pattern = <literal type="string">"/echo"</literal>,
    .handler = _handle_echo,
  }, &amp;r)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_route(&amp;(struct iwn_wf_route) {
    .ctx = ctx,
    .pattern = <literal type="string">"/get"</literal>,
    .handler = _handle_get,
  }, &amp;r)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_route(&amp;(struct iwn_wf_route) {
    .parent = r,
    .pattern = <literal type="string">"/empty"</literal>,
    .handler = _handle_get_empty,
    .user_data = (void*) <literal type="number">1</literal>
  }, <literal type="number">0</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_route(&amp;(struct iwn_wf_route) {
    .parent = r,
    .pattern = <literal type="string">"/query"</literal>,
    .handler = _handle_get_query
  }, <literal type="number">0</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_route(&amp;(struct iwn_wf_route) {
    .ctx = ctx,
    .pattern = <literal type="string">"^/fa.l"</literal>,
    .handler = _handle_fail,
  }, <literal type="number">0</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_route(&amp;(struct iwn_wf_route) {
    .ctx = ctx,
    .pattern = <literal type="string">"/post"</literal>,
    .flags = IWN_WF_POST | IWN_WF_PUT
  }, &amp;r)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_route(&amp;(struct iwn_wf_route) {
    .parent = r,
    .pattern = <literal type="string">"/urlencoded"</literal>,
    .handler = _handle_post_urlencoded,
    .flags = IWN_WF_POST
  }, <literal type="number">0</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_route(&amp;(struct iwn_wf_route) {
    .parent = r,
    .pattern = <literal type="string">"/putdata"</literal>,
    .handler = _handle_put_data,
    .flags = IWN_WF_PUT
  }, <literal type="number">0</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_route(&amp;(struct iwn_wf_route) {
    .parent = r,
    .pattern = <literal type="string">"/bigparam"</literal>,
    .handler = _handle_post_bigparam,
    .flags = IWN_WF_POST
  }, <literal type="number">0</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_route(&amp;(struct iwn_wf_route) {
    .parent = r,
    .pattern = <literal type="string">"/multipart"</literal>,
    .handler = _handle_post_multipart,
    .flags = IWN_WF_POST
  }, <literal type="number">0</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_route(&amp;(struct iwn_wf_route) {
    .ctx = ctx,
    .pattern = <literal type="string">"/session/put"</literal>,
    .handler = _handle_session_put,
  }, <literal type="number">0</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_route(&amp;(struct iwn_wf_route) {
    .ctx = ctx,
    .pattern = <literal type="string">"/session/get"</literal>,
    .handler = _handle_session_get,
  }, <literal type="number">0</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_route(&amp;(struct iwn_wf_route) {
    .ctx = ctx,
    .pattern = <literal type="string">"/file"</literal>,
    .handler = _handle_file_get,
    .flags = IWN_WF_MATCH_PREFIX | IWN_WF_GET | IWN_WF_HEAD,
  }, <literal type="number">0</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_route(&amp;(struct iwn_wf_route) {
    .ctx = ctx,
    .pattern = <literal type="string">"/file2"</literal>,
    .handler = _handle_file_get2,
    .flags = IWN_WF_MATCH_PREFIX | IWN_WF_GET | IWN_WF_HEAD,
  }, <literal type="number">0</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <macro><name>RCC</name><argument_list>(<argument>rc</argument>, <argument>finish</argument>, <argument>iwn_wf_route(iwn_wf_route_dir_attach(&amp;(struct iwn_wf_route) {
    .ctx = ctx,
    .pattern = <literal type="string">"/dir"</literal>,
    .flags = IWN_WF_MATCH_PREFIX | IWN_WF_HEAD | IWN_WF_GET
  }, <literal type="string">"./foo"</literal>), <literal type="number">0</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


  <comment type="line">// Start the server:</comment>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_poller_create</name><argument_list>(<argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>oneshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>poller</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_wf_server_spec</name></name></type> <name>spec</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>listen</name>                        <operator>=</operator> <literal type="string">"localhost"</literal></expr>,
    <expr><operator>.</operator><name>port</name>                          <operator>=</operator> <name>port</name></expr>,
    <expr><operator>.</operator><name>poller</name>                        <operator>=</operator> <name>poller</name></expr>,
    <expr><operator>.</operator><name>request_timeout_sec</name>           <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>request_timeout_keepalive_sec</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>ssl</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>spec</name><operator>.</operator><name>ssl</name><operator>.</operator><name>private_key</name></name> <operator>=</operator> <literal type="string">"./server-eckey.pem"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>spec</name><operator>.</operator><name>ssl</name><operator>.</operator><name>private_key_len</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>spec</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certs</name></name> <operator>=</operator> <literal type="string">"./server-ecdsacert.pem"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>spec</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certs_len</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>iwn_wf_route_print</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_wf_server</name><argument_list>(<argument><expr><operator>&amp;</operator><name>spec</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"a4913a63-2330-47ae-9329-b59910f05052\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwn_poller_poll</name><argument_list>(<argument><expr><name>poller</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>iwn_poller_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>poller</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name>state</name> <operator>&amp;</operator> <name>S_ROOT_DISPOSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><name>iwn_assertions_failed</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
