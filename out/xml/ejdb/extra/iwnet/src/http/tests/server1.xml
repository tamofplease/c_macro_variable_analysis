<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/http/tests/server1.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_tests.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_http_server.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwxstr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwconv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>iwn_poller</name></name> <modifier>*</modifier></type><name>poller</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATE_SERVER_DISPOSED</name></cpp:macro>  <cpp:value>0x01U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATE_CLOSED_ON_SIGNAL</name></cpp:macro> <cpp:value>0x02U</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>state</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_on_signal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>state</name> <operator>|=</operator> <name>STATE_CLOSED_ON_SIGNAL</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>poller</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwn_poller_shutdown_request</name><argument_list>(<argument><expr><name>poller</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_server_on_dispose</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_http_server</name></name> <modifier>*</modifier></type><name>srv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>state</name> <operator>|=</operator> <name>STATE_SERVER_DISPOSED</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_chunk_req_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>again</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT_FATAL</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>val</name> <init>= <expr><call><name>iwn_http_request_chunk_get</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>val</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwxstr_cat</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>IWN_ASSERT_FATAL</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwn_http_request_chunk_next</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>_chunk_req_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>body</name> <init>= <expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>body_len</name> <init>= <expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>iwn_http_response_body_set</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>body_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwn_http_response_end</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_chunk_resp_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>again</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>chunk_count</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator> <name><name>req</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>++</operator><name>chunk_count</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator> <name>chunk_count</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cdata</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>chunk_count</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
      <expr_stmt><expr><name>cdata</name> <operator>=</operator> <literal type="string">"\ne6276e6e-573c-4edb-b840-ae00680a5578"</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">2</literal></expr>:</case>
      <expr_stmt><expr><name>cdata</name> <operator>=</operator> <literal type="string">"\n097a5dd6-8df3-4d43-b3f1-0a01ea1d9943"</literal></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
  <if_stmt><if>if <condition>(<expr><name>cdata</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwn_http_response_chunk_write</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>cdata</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>_chunk_resp_cb</name></expr></argument>, <argument><expr><name>again</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwn_http_response_chunk_end</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_on_chunk_req_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>xstr</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_request_handler</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>iwn_http_request_target_is</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="string">"/empty"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <empty_stmt>;</empty_stmt> <comment type="line">// No body</comment>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>iwn_http_request_target_is</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="string">"/echo"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>val</name> <init>= <expr><call><name>iwn_http_request_body</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_http_response_header_set</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="string">"content-type"</literal></expr></argument>, <argument><expr><literal type="string">"text/plain"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwn_http_response_body_set</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>iwn_http_request_target_is</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="string">"/header"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>val</name> <init>= <expr><call><name>iwn_http_request_header_get</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="string">"X-Foo"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>iwn_http_response_body_set</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>iwn_http_request_target_is</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="string">"/large"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><call><name>iwn_http_request_is_streamed</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name>xstr</name> <operator>=</operator> <call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>xstr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>on_request_dispose</name></name> <operator>=</operator> <name>_on_chunk_req_destroy</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwn_http_request_chunk_next</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>_chunk_req_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>iwn_http_request_target_is</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="string">"/chunked"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_http_response_header_set</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="string">"content-type"</literal></expr></argument>, <argument><expr><literal type="string">"text/plain"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_http_response_chunk_write</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="string">"\n4cd009fb-dceb-4907-a6be-dd05c3f052b3"</literal></expr></argument>,
                                                  <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>_chunk_resp_cb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_http_response_header_set</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="string">"content-type"</literal></expr></argument>, <argument><expr><literal type="string">"text/plain"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwn_http_response_body_set</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="string">"4afb7857-6b21-4a25-ae47-0852ebc47014"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwn_http_response_end</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>iwlog_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGUSR1</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGUSR2</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>_on_signal</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SIG_ERR</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>_on_signal</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SIG_ERR</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>ssl</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><literal type="number">9292</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>oneshot</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--ssl"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ssl</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--port"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>iwatoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--poll-threads"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>nthreads</name> <operator>=</operator> <call><name>iwatoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--poll-oneshot-events"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>oneshot</name> <operator>=</operator> <call><name>iwatoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_poller_create</name><argument_list>(<argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>oneshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>poller</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_http_server_spec</name></name></type> <name>spec</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>listen</name>                        <operator>=</operator> <literal type="string">"localhost"</literal></expr>,
    <expr><operator>.</operator><name>port</name>                          <operator>=</operator> <name>port</name></expr>,
    <expr><operator>.</operator><name>poller</name>                        <operator>=</operator> <name>poller</name></expr>,
    <expr><operator>.</operator><name>user_data</name>                     <operator>=</operator> <name>poller</name></expr>,
    <expr><operator>.</operator><name>request_handler</name>               <operator>=</operator> <name>_request_handler</name></expr>,
    <expr><operator>.</operator><name>on_server_dispose</name>             <operator>=</operator> <name>_server_on_dispose</name></expr>,
    <expr><operator>.</operator><name>request_timeout_sec</name>           <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>request_timeout_keepalive_sec</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>ssl</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>spec</name><operator>.</operator><name>ssl</name><operator>.</operator><name>private_key</name></name> <operator>=</operator> <literal type="string">"./server-eckey.pem"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>spec</name><operator>.</operator><name>ssl</name><operator>.</operator><name>private_key_len</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>spec</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certs</name></name> <operator>=</operator> <literal type="string">"./server-ecdsacert.pem"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>spec</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certs_len</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_http_server_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>spec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>iwn_poller_poll</name><argument_list>(<argument><expr><name>poller</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name>state</name> <operator>&amp;</operator> <name>STATE_SERVER_DISPOSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWN_ASSERT</name><argument_list>(<argument><expr><name>state</name> <operator>&amp;</operator> <name>STATE_CLOSED_ON_SIGNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwn_poller_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>poller</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><name>iwn_assertions_failed</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
