<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/http/iwn_wf.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_wf_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_wf_sst_inmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_codec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iowow.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwxstr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwre.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_aunit</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_ecodefn</name><parameter_list>(<parameter><decl><type><name>locale_t</name></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_response_headers_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>hreq</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>IW_INLINE</name> <name>iwrc</name></type> <name>_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>_initialized</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_initialized</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCR</name><argument_list>(<argument><expr><call><name>iw_init</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCR</name><argument_list>(<argument><expr><call><name>iwlog_register_ecodefn</name><argument_list>(<argument><expr><name>_ecodefn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>_aunit</name> <operator>=</operator> <call><name>iwp_alloc_unit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_route_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>route</name></name> <modifier>*</modifier></type><name>route</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_wf_route</name></name> <modifier>*</modifier></type><name>base</name> <init>= <expr><operator>&amp;</operator><name><name>route</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwn_wf_handler_dispose</name></type> <name>handler_dispose</name> <init>= <expr><name><name>base</name><operator>-&gt;</operator><name>handler_dispose</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>handler_dispose</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>handler_dispose</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>handler_dispose</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>route</name><operator>-&gt;</operator><name>pattern</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>route</name><operator>-&gt;</operator><name>pattern_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>route</name><operator>-&gt;</operator><name>pattern_re</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwre_destroy</name><argument_list>(<argument><expr><name><name>route</name><operator>-&gt;</operator><name>pattern_re</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>route</name><operator>-&gt;</operator><name>pattern_re</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>route</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_route_destroy_deep</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>route</name></name> <modifier>*</modifier></type><name>route</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name><name>struct</name> <name>route</name></name> <modifier>*</modifier><name>r</name></type> <init>= <expr><name><name>route</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>r</name></expr>;</condition> <incr><expr><name>r</name> <operator>=</operator> <name>n</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_route_destroy_deep</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>_route_destroy</name><argument_list>(<argument><expr><name>route</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_ctx_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>sst</name><operator>.</operator><name>dispose</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>sst</name><operator>.</operator><name>dispose</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_route_destroy_deep</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_server_on_dispose</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_http_server</name></name> <modifier>*</modifier></type><name>server</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>server</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_ctx_destroy</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_route_attach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>route</name></name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>route</name></name> <modifier>*</modifier></type><name>route</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>route</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>route</name><operator>-&gt;</operator><name>child</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>route</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>route</name></name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>parent</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
    <do>do <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>route</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block> while <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>)</condition>;</do>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>child</name></name> <operator>=</operator> <name>route</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_route_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>route</name></name> <modifier>*</modifier></type><name>route</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pattern</name> <init>= <expr><name><name>route</name><operator>-&gt;</operator><name>pattern</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><ternary><condition><expr><name>pattern</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>route</name><operator>-&gt;</operator><name>pattern_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pattern</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition> <block>{<block_content> <comment type="line">// We use regexp</comment>
      <expr_stmt><expr><name><name>route</name><operator>-&gt;</operator><name>pattern</name></name><operator>++</operator></expr>;</expr_stmt>    <comment type="line">// skip `^`</comment>
      <expr_stmt><expr><name><name>route</name><operator>-&gt;</operator><name>pattern_re</name></name> <operator>=</operator> <call><name>iwre_create</name><argument_list>(<argument><expr><name><name>route</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>route</name><operator>-&gt;</operator><name>pattern_re</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>WF_ERROR_REGEXP_INVALID</name></expr>;</expr_stmt>
        <goto>goto <name>finish</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>route</name><operator>-&gt;</operator><name>pattern</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_route_import</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_wf_route</name></name> <modifier>*</modifier></type><name>spec</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>route</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>route</name></name> <modifier>*</modifier></type><name>route</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_wf_route</name></name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name><name>struct</name> <name>route</name></name> <modifier>*</modifier><name>r</name></type> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>spec</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</init> <condition><expr><name>r</name></expr>;</condition> <incr><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>parent</name></name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <name>ROUTE_MATCHING_STACK_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>WF_ERROR_MAX_NESTED_ROUTES</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>parent</name></name> <operator>&amp;&amp;</operator> <name><name>spec</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>ctx</name></name> <operator>!=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>base</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>WF_ERROR_PARENT_ROUTE_FROM_DIFFERENT_CONTEXT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name>route</name> <operator>=</operator> <call><name>iwpool_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>route</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>route</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>route</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>route</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name> <operator>=</operator> <operator>&amp;</operator><name><name>route</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>base</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IWN_WF_METHODS_ALL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>IWN_WF_GET</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>base</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>route</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>route</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>parent</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>pattern</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>pattern</name></name> <operator>=</operator> <call><name>iwpool_strdup2</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>spec</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>route</name><operator>-&gt;</operator><name>pattern</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>base</name><operator>-&gt;</operator><name>pattern</name></name></expr>;</expr_stmt> <comment type="line">// Discarding `const` here</comment>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>tag</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name><name>base</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <call><name>iwpool_strdup2</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>spec</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCR</name><argument_list>(<argument><expr><call><name>_route_init</name><argument_list>(<argument><expr><name>route</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>route</name><operator>-&gt;</operator><name>parent</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>base</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>route</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>route</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_route_attach</name><argument_list>(<argument><expr><name><name>route</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>route</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>route</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>route</name></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>route</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_route_destroy</name><argument_list>(<argument><expr><name>route</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_request_parse_query_inplace</name><parameter_list>(<parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iwn_pairs</name></name> <modifier>*</modifier></type><name>pairs</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name> <operator>||</operator> <operator>!</operator><name>len</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>p</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name> <init>= <expr><name>p</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>ep</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>val</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>iwn_url_decode_inplace</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_pair_add_pool</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>pairs</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>key</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>iwn_url_decode_inplace</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>iwn_url_decode_inplace</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_pair_add_pool</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>pairs</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>key</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwn_url_decode_inplace</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_pair_add_pool</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>pairs</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>iwn_url_decode_inplace</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwn_url_decode_inplace</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_pair_add_pool</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>pairs</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_wf_parse_query_inplace</name><parameter_list>(<parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iwn_pairs</name></name> <modifier>*</modifier></type><name>pairs</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>query_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_request_parse_query_inplace</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>pairs</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>query_len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_request_stream_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>stream_file</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REQUEST_STREAM_FILE_MMAPED</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>REQUEST_STREAM_FILE_MMAPED</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>body</name></name></expr></argument>, <argument><expr><call><name>IW_ROUNDUP</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>body_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>_aunit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>stream_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>stream_file_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>stream_file</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>stream_file_path</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_request_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>req</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_request_stream_destroy</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>sess_map_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>sess_map</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwhmap_destroy</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>sess_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>sess_map</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>pool</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_request_on_dispose</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>hreq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>iwn_http_request_wf_data</name><argument_list>(<argument><expr><name>hreq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>req</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_request_destroy</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_request_target_parse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>val</name> <init>= <expr><call><name>iwn_http_request_target</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>http</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>val</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_ASSERTION</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>val</name><operator>.</operator><name>len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>val</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name>p</name> <operator>=</operator> <call><name>iwpool_strndup2</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwn_url_decode_inplace</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path_unmatched</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>path_len</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>&lt;</operator> <name><name>val</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name>q</name> <operator>=</operator> <call><name>iwpool_strndup2</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>len</name></name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_request_parse_query_inplace</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>query_params</name></name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>len</name></name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_request_method_parse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>val</name> <init>= <expr><call><name>iwn_http_request_method</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>http</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>val</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_ASSERTION</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <switch>switch <condition>(<expr><name><name>val</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">3</literal></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"GET"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>IWN_WF_GET</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"PUT"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>IWN_WF_PUT</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">4</literal></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"POST"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>IWN_WF_POST</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>IWN_WF_HEAD</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <default>default:</default>
      <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"DELETE"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>IWN_WF_DELETE</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"OPTIONS"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>IWN_WF_OPTIONS</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"PATCH"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>IWN_WF_PATCH</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>WF_ERROR_UNSUPPORTED_HTTP_METHOD</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
  </block_content>}</block></switch>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>bool</name></type> <name>_c_is_ctl</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">31</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_c_is_tspecial</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="char">';'</literal></expr>:</case>
    <case>case <expr><literal type="char">','</literal></expr>:</case>
    <case>case <expr><literal type="char">':'</literal></expr>:</case>
    <case>case <expr><literal type="char">'='</literal></expr>:</case>
    <case>case <expr><literal type="char">'?'</literal></expr>:</case>
    <case>case <expr><literal type="char">'/'</literal></expr>:</case>
    <case>case <expr><literal type="char">'\\'</literal></expr>:</case>
    <case>case <expr><literal type="char">'"'</literal></expr>:</case>
    <case>case <expr><literal type="char">'@'</literal></expr>:</case>
    <case>case <expr><literal type="char">'('</literal></expr>:</case>
    <case>case <expr><literal type="char">')'</literal></expr>:</case>
    <case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>
    <case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>
    <case>case <expr><literal type="char">'['</literal></expr>:</case>
    <case>case <expr><literal type="char">']'</literal></expr>:</case>
      <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></switch>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>bool</name></type> <name>_c_is_space</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_c_is_token</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>is_value</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>_c_is_space</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">','</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>!</operator><operator>(</operator><call><name>_c_is_ctl</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>_c_is_tspecial</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>bool</name></type> <name>_c_is_lsep</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>c</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_header_parse_skip_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><name>rp</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>rp</name> <operator>&lt;</operator> <name>ep</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>rp</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>rp</name> <operator>&gt;</operator> <name>sp</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>rp</name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>_c_is_token</name><argument_list>(<argument><expr><operator>*</operator><name>rp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>++</operator><name>rp</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>rp</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_header_parse_next_parameter2</name><parameter_list>(
  <parameter><decl><type><name>bool</name></type> <name>header_value</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>,
  <parameter><decl><type><name><name>struct</name> <name>iwn_pair</name></name> <modifier>*</modifier></type><name>kv</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>rp</name> <operator>&gt;=</operator> <name>ep</name> <operator>||</operator> <call><name>_c_is_lsep</name><argument_list>(<argument><expr><operator>*</operator><name>rp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>in_quote</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>in_key</name> <init>= <expr><name>true</name></expr></init></decl>, <decl><type ref="prev"/><name>expect_eq</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>val_escaped</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ks</name> <init>= <expr><name>rp</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ke</name> <init>= <expr><name>ks</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ve</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>rp</name> <operator>&lt;</operator> <name>ep</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>in_key</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>header_value</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>rp</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>in_key</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>vs</name> <operator>=</operator> <operator>++</operator><name>rp</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>_c_is_space</name><argument_list>(<argument><expr><operator>*</operator><name>rp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>ke</name> <operator>==</operator> <name>ks</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ke</name> <operator>=</operator> <operator>++</operator><name>ks</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><operator>++</operator><name>rp</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>rp</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>vs</name> <operator>=</operator> <name>ve</name> <operator>=</operator> <name>rp</name></expr>;</expr_stmt>
          <expr_stmt><expr><operator>++</operator><name>rp</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>_c_is_lsep</name><argument_list>(<argument><expr><operator>*</operator><name>rp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>vs</name> <operator>=</operator> <name>ve</name> <operator>=</operator> <name>rp</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>rp</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name>ke</name> <operator>!=</operator> <name>ks</name><operator>)</operator> <operator>||</operator> <call><name>_c_is_token</name><argument_list>(<argument><expr><operator>*</operator><name>rp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <comment type="line">// Allow '/' in header value</comment>
          <expr_stmt><expr><operator>++</operator><name>rp</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>ke</name> <operator>=</operator> <name>rp</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>rp</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>in_key</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>vs</name> <operator>=</operator> <operator>++</operator><name>rp</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>_c_is_space</name><argument_list>(<argument><expr><operator>*</operator><name>rp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>ke</name> <operator>==</operator> <name>ks</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>++</operator><name>ks</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ke</name> <operator>=</operator> <name>ks</name></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>expect_eq</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <expr_stmt><expr><operator>++</operator><name>rp</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>expect_eq</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>rp</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>vs</name> <operator>=</operator> <name>ve</name> <operator>=</operator> <name>rp</name></expr>;</expr_stmt>
          <expr_stmt><expr><operator>++</operator><name>rp</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>expect_eq</name> <operator>&amp;&amp;</operator> <call><name>_c_is_token</name><argument_list>(<argument><expr><operator>*</operator><name>rp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>++</operator><name>rp</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>ke</name> <operator>=</operator> <name>rp</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>IW_UNLIKELY</name><argument_list>(<argument><expr><name>in_quote</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>rp</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>val_escaped</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>rp</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>ve</name> <operator>=</operator> <name>rp</name></expr>;</expr_stmt>
          <expr_stmt><expr><operator>++</operator><name>rp</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>_c_is_lsep</name><argument_list>(<argument><expr><operator>*</operator><name>rp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>++</operator><name>rp</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>rp</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>&amp;&amp;</operator> <name>vs</name> <operator>==</operator> <name>rp</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>in_quote</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>vs</name> <operator>=</operator> <operator>++</operator><name>rp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ve</name> <operator>=</operator> <name>vs</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>rp</name> <operator>==</operator> <literal type="char">';'</literal> <operator>||</operator> <call><name>_c_is_space</name><argument_list>(<argument><expr><operator>*</operator><name>rp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ve</name> <operator>=</operator> <name>rp</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name>rp</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>_c_is_lsep</name><argument_list>(<argument><expr><operator>*</operator><name>rp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ve</name> <operator>=</operator> <name>rp</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>_c_is_token</name><argument_list>(<argument><expr><operator>*</operator><name>rp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>++</operator><name>rp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ve</name> <operator>=</operator> <name>rp</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>ve</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>ks</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>key_len</name></name> <operator>=</operator> <name>ke</name> <operator>-</operator> <name>ks</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>vs</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>val_len</name></name> <operator>=</operator> <name>ve</name> <operator>-</operator> <name>vs</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>val_escaped</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>val_len</name></name> <operator>=</operator> <call><name>iwn_unescape_backslashes_inplace</name><argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>val_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>rp</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_header_parse_next_parameter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iwn_pair</name></name> <modifier>*</modifier></type><name>kv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>kv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>kv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>header_value</name> <init>= <expr><operator>*</operator><name>rp</name> <operator>==</operator> <literal type="char">':'</literal></expr></init></decl>;</decl_stmt> <comment type="line">// Start if header value</comment>
  <if_stmt><if>if <condition>(<expr><name>header_value</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>++</operator><name>rp</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>_header_parse_next_parameter2</name><argument_list>(<argument><expr><name>header_value</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>iwn_wf_header_val_part_next</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header_val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
  <parameter><decl><type><name><name>struct</name> <name>iwn_pair</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_header_parse_next_parameter2</name><argument_list>(<argument><expr><name>ptr</name> <operator>==</operator> <name>header_val</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>iwn_pair</name></name></type> <name>iwn_wf_header_val_part_find</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_pair</name></name></type> <name>kv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>nlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header_val</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>_header_parse_next_parameter2</name><argument_list>(<argument><expr><name>ptr</name> <operator>==</operator> <name>header_val</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <name><name>kv</name><operator>.</operator><name>key_len</name></name> <operator>==</operator> <name>nlen</name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>kv</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>kv</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><operator>(</operator>struct <name>iwn_pair</name><operator>)</operator> <block>{}</block></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>iwn_pair</name></name></type> <name>iwn_wf_header_part_find</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>part_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>val</name> <init>= <expr><call><name>iwn_http_request_header_get</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><name>header_name</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>val</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator>struct <name>iwn_pair</name><operator>)</operator> <block>{}</block></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>iwn_wf_header_val_part_find</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name><name>val</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name>part_name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>_request_headers_cookie_parse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_pair</name></name></type> <name>pair</name> <init>= <expr><call><name>iwn_wf_header_part_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="string">"cookie"</literal></expr></argument>, <argument><expr><name>IWN_WF_SESSION_COOKIE_KEY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pair</name><operator>.</operator><name>val</name></name> <operator>&amp;&amp;</operator> <name><name>pair</name><operator>.</operator><name>val_len</name></name> <operator>==</operator> <name>IWN_WF_SESSION_ID_LEN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>sid</name></name></expr></argument>, <argument><expr><name><name>pair</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name>IWN_WF_SESSION_ID_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_request_headers_parse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HN_UEC</name></cpp:macro> <cpp:value>"application/x-www-form-urlencoded"</cpp:value></cpp:define>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HN_MFD</name></cpp:macro> <cpp:value>"multipart/form-data"</cpp:value></cpp:define>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>val</name> <init>= <expr><call><name>iwn_http_request_header_get</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="string">"content-type"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"content-type"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>val</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>val</name><operator>.</operator><name>len</name></name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_HN_UEC</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>_HN_UEC</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_HN_UEC</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>IWN_WF_FORM_URL_ENCODED</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(  <expr><name><name>val</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_HN_MFD</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal>
              <operator>&amp;&amp;</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>_HN_MFD</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_HN_MFD</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><name><name>val</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name><name>val</name><operator>.</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rp</name> <init>= <expr><name><name>val</name><operator>.</operator><name>buf</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_HN_MFD</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>struct</name> <name>iwn_pair</name></name></type> <name>p</name></decl>;</decl_stmt>
      <while>while <condition>(<expr><operator>(</operator><name>rp</name> <operator>=</operator> <call><name>_header_parse_next_parameter</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="string">"boundary"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"boundary"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>boundary_len</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>val_len</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>boundary</name></name> <operator>=</operator> <call><name>iwpool_strndup2</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>val_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>req</name><operator>-&gt;</operator><name>boundary</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>WF_ERROR_INVALID_FORM_DATA</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>IWN_WF_FORM_MULTIPART</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>_request_headers_cookie_parse</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>

  <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_HN_UEC</name></cpp:undef>
  <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_HN_MFD</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_route_do_match_next</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>route_iter</name></name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>route</name></name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>stack</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>req</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>wreq</name> <init>= <expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path_unmatched</name> <init>= <expr><name><name>wreq</name><operator>-&gt;</operator><name>path_unmatched</name></name> <operator>-</operator> <name><name>it</name><operator>-&gt;</operator><name>prev_sibling_mlen</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>wreq</name><operator>-&gt;</operator><name>path_matched</name></name> <operator>=</operator> <name>path_unmatched</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>wreq</name><operator>-&gt;</operator><name>path_unmatched</name></name> <operator>=</operator> <name>path_unmatched</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>prev_sibling_mlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>mlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>unmatched_len</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>path_len</name></name> <operator>-</operator> <operator>(</operator><name>path_unmatched</name> <operator>-</operator> <name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>wreq</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name></expr>)</condition> <block>{<block_content> <comment type="line">// Request method matched</comment>
    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>pattern_re</name></name></expr>)</condition> <block>{<block_content>             <comment type="line">// RE</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>mpairs</name><index>[<expr><name>IWRE_MAX_MATCHES</name></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>mret</name> <init>= <expr><call><name>iwre_match</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>pattern_re</name></name></expr></argument>, <argument><expr><name>path_unmatched</name></expr></argument>, <argument><expr><name>mpairs</name></expr></argument>, <argument><expr><name>IWRE_MAX_MATCHES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>mret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>intptr_t</name><operator>)</operator> <operator>(</operator><name><name>mpairs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>mpairs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>IWN_WF_MATCH_PREFIX</name><operator>)</operator> <operator>||</operator> <name>unmatched_len</name> <operator>==</operator> <name>len</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>mlen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
          <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>mret</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name><name>struct</name> <name>iwn_wf_route_submatch</name></name> <modifier>*</modifier></type><name>sm</name> <init>= <expr><call><name>iwpool_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sm</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>sm</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>sm</name><operator>-&gt;</operator><name>route</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>sm</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <name>path_unmatched</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>sm</name><operator>-&gt;</operator><name>sp</name></name> <operator>=</operator> <name><name>mpairs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>sm</name><operator>-&gt;</operator><name>ep</name></name> <operator>=</operator> <name><name>mpairs</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
              <if_stmt><if>if <condition>(<expr><name><name>wreq</name><operator>-&gt;</operator><name>last</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>wreq</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>sm</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>wreq</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>sm</name></expr>;</expr_stmt>
              </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>wreq</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name><name>wreq</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>sm</name></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>pattern</name></name></expr>)</condition> <block>{<block_content> <comment type="line">// Simple path subpart match</comment>
      <if_stmt><if>if <condition>(  <expr><operator>(</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>IWN_WF_MATCH_PREFIX</name><operator>)</operator> <operator>||</operator> <name>unmatched_len</name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>pattern_len</name></name><operator>)</operator>
         <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>path_unmatched</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>pattern_len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>mlen</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>pattern_len</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// Matched the empty route</comment>
      <expr_stmt><expr><name>mlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>mlen</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>mlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>path_unmatched</name> <operator>+=</operator> <name>mlen</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>wreq</name><operator>-&gt;</operator><name>path_unmatched</name></name> <operator>=</operator> <name>path_unmatched</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>prev_sibling_mlen</name></name> <operator>=</operator> <ternary><condition><expr><name>mlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>mlen</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>mlen</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>mlen</name></expr>;</expr_stmt>
  <return>return <expr><name>mlen</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_route_iter_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>route_iter</name></name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path_unmatched</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path_matched</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>path</name></name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>it</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>ctx</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>mlen</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>mlen</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>stack</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>mlen</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// matched</comment>
  <expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>prev_sibling_mlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>cnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>route</name></name><modifier>*</modifier></type> <name>_route_iter_pop_then_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>route_iter</name></name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>it</name><operator>-&gt;</operator><name>cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>route</name></name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>stack</name><index>[<expr><name><name>it</name><operator>-&gt;</operator><name>cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>prev_sibling_mlen</name></name> <operator>=</operator> <ternary><condition><expr><name><name>it</name><operator>-&gt;</operator><name>mlen</name><index>[<expr><name><name>it</name><operator>-&gt;</operator><name>cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>it</name><operator>-&gt;</operator><name>mlen</name><index>[<expr><name><name>it</name><operator>-&gt;</operator><name>cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>stack</name><index>[<expr><name><name>it</name><operator>-&gt;</operator><name>cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_route_do_match_next</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>r</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>prev_sibling_mlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>route</name></name><modifier>*</modifier></type> <name>_route_iter_current</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>route_iter</name></name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>it</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>ctx</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>route</name></name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>stack</name><index>[<expr><name><name>it</name><operator>-&gt;</operator><name>cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>root</name></name> <operator>&amp;&amp;</operator> <name><name>it</name><operator>-&gt;</operator><name>mlen</name><index>[<expr><name><name>it</name><operator>-&gt;</operator><name>cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>r</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>route</name></name><modifier>*</modifier></type> <name>_route_iter_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>route_iter</name></name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>req</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>m</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>route</name></name> <modifier>*</modifier></type><name>r</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>stack</name><index>[<expr><name><name>it</name><operator>-&gt;</operator><name>cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>_route_iter_pop_then_next</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>m</name> <operator>=</operator> <name>r</name> <operator>&amp;&amp;</operator> <name><name>it</name><operator>-&gt;</operator><name>mlen</name><index>[<expr><name><name>it</name><operator>-&gt;</operator><name>cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>child</name></name> <operator>&amp;&amp;</operator> <name><name>it</name><operator>-&gt;</operator><name>mlen</name><index>[<expr><name><name>it</name><operator>-&gt;</operator><name>cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>prev_sibling_mlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>stack</name><index>[<expr><name><name>it</name><operator>-&gt;</operator><name>cnt</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>child</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>_route_do_match_next</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>stack</name><index>[<expr><name><name>it</name><operator>-&gt;</operator><name>cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>_route_do_match_next</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>handler</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>r</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_request_create</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>hreq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>hreq</name><operator>-&gt;</operator><name>server_user_data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>iwpool_create_empty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name>req</name> <operator>=</operator> <call><name>iwpool_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>req</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>ctx</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>http</name></name> <operator>=</operator> <name>hreq</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>sess_map_mtx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_request_target_parse</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_request_method_parse</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_request_headers_parse</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Scroll to the first matched route</comment>
  <expr_stmt><expr><call><name>_route_iter_init</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>it</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_route_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>it</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>iwn_http_request_wf_set</name><argument_list>(<argument><expr><name>hreq</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>_request_on_dispose</name></expr></argument>, <argument><expr><name>_response_headers_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>req</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_request_destroy</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_multipart_parse_next</name><parameter_list>(
  <parameter><decl><type><name>IWPOOL</name>           <modifier>*</modifier></type><name>pool</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>       <modifier>*</modifier></type><name>boundary</name></decl></parameter>,
  <parameter><decl><type><name>size_t</name></type>            <name>boundary_len</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>       <modifier>*</modifier></type><name>rp</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>ep</name></decl></parameter>,
  <parameter><decl><type><name><name>struct</name> <name>iwn_pairs</name></name> <modifier>*</modifier></type><name>parts</name></decl></parameter>,
  <parameter><decl><type><name>bool</name>             <modifier>*</modifier></type><name>eof</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HL_CDIS</name></cpp:macro>  <cpp:value>IW_LLEN("content-disposition")</cpp:value></cpp:define>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HL_CTYPE</name></cpp:macro> <cpp:value>IW_LLEN("content-type")</cpp:value></cpp:define>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>eof</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rp</name> <operator>&gt;=</operator> <name>ep</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>eof</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>be</name> <init>= <expr><name>rp</name> <operator>+</operator> <call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>boundary_len</name> <operator>+</operator> <call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument> <comment type="block">/* or -- */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>be</name> <operator>&gt;</operator> <name>ep</name> <operator>||</operator> <name><name>rp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>||</operator> <name><name>rp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rp</name> <operator>+=</operator> <call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>boundary_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>boundary</name></expr></argument>, <argument><expr><name>boundary_len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rp</name> <operator>+=</operator> <name>boundary_len</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>rp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>rp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>eof</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return> <comment type="line">// EOF</comment>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_pair</name></name></type> <name>kv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>name</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>file_name</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>,
                 <decl><type ref="prev"/><name>disposition</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>ctype</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>data</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>ep</name> <operator>-</operator> <name>rp</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>rp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name><name>rp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hs</name> <init>= <expr><name>rp</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>he</name> <init>= <expr><call><name>_header_parse_skip_name</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>he</name></expr>)</condition> <block>{<block_content>
      <break>break;</break> <comment type="line">// No more headers</comment>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rp</name> <operator>=</operator> <name>he</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>he</name> <operator>-</operator> <name>hs</name> <operator>==</operator> <name>_HL_CDIS</name> <operator>&amp;&amp;</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><literal type="string">"content-disposition"</literal></expr></argument>, <argument><expr><name>_HL_CDIS</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><call><name>_header_parse_next_parameter</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kv</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>pp</name></expr>;</condition>
           <incr><expr><name>rp</name> <operator>=</operator> <name>pp</name></expr><operator>,</operator>
           <expr><name>pp</name> <operator>=</operator> <call><name>_header_parse_next_parameter</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kv</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
           <expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>disposition</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>kv</name><operator>.</operator><name>key_len</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>disposition</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>kv</name><operator>.</operator><name>key</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>kv</name><operator>.</operator><name>val</name></name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>kv</name><operator>.</operator><name>key_len</name></name> <operator>==</operator> <call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>kv</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>name</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>kv</name><operator>.</operator><name>val_len</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>name</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name><name>kv</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>kv</name><operator>.</operator><name>key_len</name></name> <operator>==</operator> <call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"filename"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>kv</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="string">"filename"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"filename"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>file_name</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>kv</name><operator>.</operator><name>val_len</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>file_name</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name><name>kv</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>he</name> <operator>-</operator> <name>hs</name> <operator>==</operator> <name>_HL_CTYPE</name> <operator>&amp;&amp;</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><literal type="string">"content-type"</literal></expr></argument>, <argument><expr><name>_HL_CTYPE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><call><name>_header_parse_next_parameter</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kv</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>pp</name></expr>;</condition>
           <incr><expr><name>rp</name> <operator>=</operator> <name>pp</name></expr><operator>,</operator>
           <expr><name>pp</name> <operator>=</operator> <call><name>_header_parse_next_parameter</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kv</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
           <expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>ctype</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>kv</name><operator>.</operator><name>key_len</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>ctype</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>kv</name><operator>.</operator><name>key</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ctype</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>rp</name> <operator>-</operator> <name><name>ctype</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>disposition</name><operator>.</operator><name>len</name></name> <operator>||</operator> <operator>!</operator><name><name>name</name><operator>.</operator><name>buf</name></name> <operator>||</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>disposition</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"form-data"</literal></expr></argument>, <argument><expr><name><name>disposition</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>ep</name> <operator>-</operator> <name>rp</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>rp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name><name>rp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>be</name> <operator>=</operator> <name>rp</name></expr>;</expr_stmt>

  <while>while <condition>(<expr><name>ep</name> <operator>-</operator> <name>rp</name> <operator>&gt;=</operator> <name>boundary_len</name> <operator>+</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(  <expr><name><name>rp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name><name>rp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal>
       <operator>&amp;&amp;</operator> <name><name>rp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>rp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal>
       <operator>&amp;&amp;</operator> <operator>(</operator><name>boundary_len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>rp</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>boundary</name></expr></argument>, <argument><expr><name>boundary_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rp</name> <operator>+=</operator> <name>boundary_len</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>rp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name><name>rp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>rp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>rp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>data</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>be</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>rp</name> <operator>-=</operator> <operator>(</operator><name>boundary_len</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt> <comment type="line">// Position at start of \r\n--&lt;boundary&gt;</comment>
        <expr_stmt><expr><name><name>data</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>rp</name> <operator>-</operator> <name>be</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>rp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <comment type="line">// Position at start of --&lt;boundary&gt;</comment>

        <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_pair_add_pool</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>parts</name></expr></argument>, <argument><expr><name><name>name</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>name</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>struct</name> <name>iwn_pair</name></name> <modifier>*</modifier></type><name>np</name> <init>= <expr><name><name>parts</name><operator>-&gt;</operator><name>last</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name><name>np</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <call><name>iwpool_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>np</name><operator>-&gt;</operator><name>extra</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>np</name><operator>-&gt;</operator><name>val_len</name></name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>file_name</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>,
              <argument><expr><call><name>iwn_pair_add_pool</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="string">"filename"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"filename"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>file_name</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>file_name</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ctype</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_pair_add_pool</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>np</name><operator>-&gt;</operator><name>extra</name></name></expr></argument>,
                                            <argument><expr><literal type="string">"content-type"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"content-type"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ctype</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>ctype</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>rp</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>++</operator><name>rp</name></expr>;</expr_stmt>
  </block_content>}</block></while>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_HL_CDIS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_HL_CTYPE</name></cpp:undef>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>IW_TESTS</name></cpp:ifdef>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dbg_multipart_parse_next</name><parameter_list>(
  <parameter><decl><type><name>IWPOOL</name>           <modifier>*</modifier></type><name>pool</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>       <modifier>*</modifier></type><name>boundary</name></decl></parameter>,
  <parameter><decl><type><name>size_t</name></type>            <name>boundary_len</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>       <modifier>*</modifier></type><name>rp</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>ep</name></decl></parameter>,
  <parameter><decl><type><name><name>struct</name> <name>iwn_pairs</name></name> <modifier>*</modifier></type><name>parts</name></decl></parameter>,
  <parameter><decl><type><name>bool</name>             <modifier>*</modifier></type><name>eof</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_multipart_parse_next</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>boundary</name></expr></argument>, <argument><expr><name>boundary_len</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><name>parts</name></expr></argument>, <argument><expr><name>eof</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_request_form_multipart_parse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>eof</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>body</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><name>cp</name> <operator>+</operator> <name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>body_len</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>cp</name> <operator>=</operator> <call><name>_multipart_parse_next</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>,
                                     <argument><expr><name><name>req</name><operator>-&gt;</operator><name>boundary</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>boundary_len</name></name></expr></argument>,
                                     <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>form_params</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eof</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
  <return>return <expr><name>eof</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>bool</name></type> <name>_request_form_url_encoded_parse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="number">0</literal> <operator>==</operator> <call><name>_request_parse_query_inplace</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>form_params</name></name></expr></argument>,
                                           <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>body</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>body_len</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>bool</name></type> <name>_request_form_parse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>IWN_WF_FORM_URL_ENCODED</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>_request_form_url_encoded_parse</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>IWN_WF_FORM_MULTIPART</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>_request_form_multipart_parse</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_request_routes_process</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_request_form_parse</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>route</name></name> <modifier>*</modifier></type><name>pr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name><name>struct</name> <name>route</name></name> <modifier>*</modifier><name>r</name></type> <init>= <expr><call><name>_route_iter_current</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>it</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>r</name></expr>;</condition> <incr><expr><name>r</name> <operator>=</operator> <call><name>_route_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>it</name></name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>handler</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>IW_UNLIKELY</name><argument_list>(<argument><expr><name>pr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name>pr</name></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>pr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>route</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>r</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>handler</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>rv</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>rv</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>iwn_http_response_by_code</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>http</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rv</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>rv</name> <operator>==</operator> <name>IWN_WF_RES_SKIP_CHILD_ROUTES</name></expr>)</condition> <block>{<block_content> <comment type="line">// Stop further processing of child routes</comment>
          <expr_stmt><expr><name>pr</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>ok</name> <operator>&amp;&amp;</operator> <name>rv</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <comment type="line">// Delegate all unhandled requests to the root route</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>ctx</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>handler</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>route</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>handler</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>rv</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>iwn_http_response_by_code</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>http</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rv</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ok</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>rv</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// Respond with not found at least</comment>
      <expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>iwn_http_response_by_code</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="number">404</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ok</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_request_process</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>val</name> <init>= <expr><call><name>iwn_http_request_body</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>http</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>body_len</name></name> <operator>=</operator> <name><name>val</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>body</name></name> <operator>=</operator> <ternary><condition><expr><name><name>val</name><operator>.</operator><name>len</name></name></expr> ?</condition><then> <expr><name><name>val</name><operator>.</operator><name>buf</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <return>return <expr><call><name>_request_routes_process</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_request_stream_chunk_process</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>again</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>hreq</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>http</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>ctx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>val</name> <init>= <expr><call><name>iwn_http_request_chunk_get</name><argument_list>(<argument><expr><name>hreq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>val</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>streamed_bytes</name></name> <operator>+</operator> <name><name>val</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>request_file_max_size</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_request_stream_destroy</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>iwlog_warn</name><argument_list>(<argument><expr><literal type="string">"HTTP streamed data size: %zu exceeds the maximum allowed size: %d"</literal></expr></argument>,
                 <argument><expr><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>streamed_bytes</name></name> <operator>+</operator> <name><name>val</name><operator>.</operator><name>len</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>request_file_max_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>req</name><operator>-&gt;</operator><name>stream_file</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name>fname</name> <operator>=</operator> <call><name>iwp_allocate_tmpfile_path</name><argument_list>(<argument><expr><literal type="string">"iwn-wf-stream-"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>stream_file_path</name></name> <operator>=</operator> <call><name>iwpool_strdup2</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>stream_file</name></name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>stream_file_path</name></name></expr></argument>, <argument><expr><literal type="string">"w+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>req</name><operator>-&gt;</operator><name>stream_file</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>finish</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>stream_file</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>streamed_bytes</name></name> <operator>+=</operator> <name><name>val</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>again</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>streamed_bytes</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>stream_file</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> <comment type="line">// Write trailing `\0`</comment>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>finish</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>RCN</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>fflush</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>stream_file</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCN</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name>fd</name> <operator>=</operator> <call><name>fileno</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>stream_file</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>mm</name> <init>= <expr><call><name>mmap</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>IW_ROUNDUP</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>streamed_bytes</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>_aunit</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PROT_READ</name> <operator>|</operator> <name>PROT_WRITE</name></expr></argument>, <argument><expr><name>MAP_PRIVATE</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>mm</name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>finish</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>body</name></name> <operator>=</operator> <name>mm</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>body_len</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>streamed_bytes</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>_request_routes_process</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_request_stream_chunk_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>hreq</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>again</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>iwn_http_request_wf_data</name><argument_list>(<argument><expr><name>hreq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>req</name> <operator>&amp;&amp;</operator> <call><name>_request_stream_chunk_process</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>again</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_request_handler</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>hreq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>hreq</name><operator>-&gt;</operator><name>server_user_data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>iwn_http_request_wf_data</name><argument_list>(<argument><expr><name>hreq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>req</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_request_create</name><argument_list>(<argument><expr><name>hreq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>iwn_http_request_wf_data</name><argument_list>(<argument><expr><name>hreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_route_iter_current</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>it</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">// No routes found.</comment>
    <comment type="line">// Do not parse request body.</comment>
    <comment type="line">// Call the root handler or respond 404</comment>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>IWN_WF_FORM_ALL</name></expr>;</expr_stmt>
    <return>return <expr><call><name>_request_routes_process</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>iwn_http_request_is_streamed</name><argument_list>(<argument><expr><name>hreq</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>request_file_max_size</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_warn</name><argument_list>(<argument><expr><literal type="string">"HTTP large/chunked requests are not allowed by server settings (request_file_max_size)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>iwn_http_request_chunk_next</name><argument_list>(<argument><expr><name>hreq</name></expr></argument>, <argument><expr><name>_request_stream_chunk_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><call><name>_request_process</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_request_sid_fill</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name><name>fout</name><index>[<expr><name>IWN_WF_SESSION_ID_LEN</name></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>cset</name><index>[]</index></name> <init>= <expr><literal type="string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"/dev/urandom"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name>fout</name></expr></argument>, <argument><expr><name>IWN_WF_SESSION_ID_LEN</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>IWN_WF_SESSION_ID_LEN</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>fout</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>cset</name><index>[<expr><name><name>fout</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>cset</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>bool</name></type> <name>_request_sid_exists</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>req</name> <operator>&amp;&amp;</operator> <name><name>req</name><operator>-&gt;</operator><name>sid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>iwn_wf_session_id</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req_</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>req_</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>_request_sid_exists</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>req</name><operator>-&gt;</operator><name>sid</name></name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_request_sid_ensure</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>_request_sid_exists</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>IWN_WF_SESSION_ID_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_request_sid_fill</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>sid</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>sid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_response_headers_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>hreq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>iwn_http_connection_is_upgrade</name><argument_list>(<argument><expr><name>hreq</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">// Do not write any extra headers on upgrade</comment>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>iwn_http_request_wf_data</name><argument_list>(<argument><expr><name>hreq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>_request_sid_exists</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <macro><name>iwn_wf_cookie_add</name><argument_list>(<argument>&amp;req-&gt;base</argument>, <argument>IWN_WF_SESSION_COOKIE_KEY</argument>, <argument>req-&gt;sid</argument>, <argument>(struct iwn_wf_cookie_opts) {
      .path = <literal type="string">"/"</literal></argument>,
      <argument>.httponly = true</argument>,
      <argument>.max_age_sec = hreq-&gt;session_cookie_max_age_sec</argument>,
      <argument>.extra = hreq-&gt;session_cookie_params ? hreq-&gt;session_cookie_params : <literal type="string">"; samesite=lax"</literal>
    }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_wf_route</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_wf_route</name></name> <modifier>*</modifier></type><name>spec</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iwn_wf_route</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>out_route</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>spec</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>route</name></name> <modifier>*</modifier></type><name>route</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>out_route</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>out_route</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>spec</name><operator>-&gt;</operator><name>ctx</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>iwn_wf_route</name><operator>*</operator><operator>)</operator> <name><name>spec</name><operator>-&gt;</operator><name>parent</name></name><operator>)</operator><operator>-&gt;</operator><name>flags</name> <operator>|=</operator> <name>IWN_WF_MATCH_PREFIX</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_wf_route</name></name> <modifier>*</modifier><name>p</name></type> <init>= <expr><name><name>spec</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</init> <condition><expr><operator>!</operator><name>ctx</name> <operator>&amp;&amp;</operator> <name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>parent</name></name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>p</name><operator>-&gt;</operator><name>ctx</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_route_import</name><argument_list>(<argument><expr><name>spec</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>route</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name> <operator>&amp;&amp;</operator> <name>out_route</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>out_route</name> <operator>=</operator> <operator>&amp;</operator><name><name>route</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_wf_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_wf_route</name></name> <modifier>*</modifier></type><name>root_route_spec</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iwn_wf_ctx</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>out_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>RCR</name><argument_list>(<argument><expr><call><name>_init</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>out_ctx</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_wf_route</name></name></type> <name>default_root_route</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>tag</name> <operator>=</operator> <literal type="string">"root"</literal></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>out_ctx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>root_route_spec</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>root_route_spec</name> <operator>=</operator> <operator>&amp;</operator><name>default_root_route</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>iwpool_create_empty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name>ctx</name> <operator>=</operator> <call><name>iwpool_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>server_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_route_import</name><argument_list>(<argument><expr><name>root_route_spec</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>root</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_ctx_destroy</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>out_ctx</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>iwn_poller</name></name><modifier>*</modifier></type> <name>iwn_wf_poller_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><operator>(</operator>struct <name>ctx</name><operator>*</operator><operator>)</operator> <name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>poller</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>iwn_wf_server_fd_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><operator>(</operator>struct <name>ctx</name><operator>*</operator><operator>)</operator> <name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>server_fd</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_wf_session_id_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req_</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>sid</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>sid</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>IWN_WF_SESSION_ID_LEN</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>req_</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>sess_map_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>sid</name></name></expr></argument>, <argument><expr><name>sid</name></expr></argument>, <argument><expr><name>IWN_WF_SESSION_ID_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>sess_map</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwhmap_clear</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>sess_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>sess_map_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>iwn_wf_session_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req_</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>req_</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>ctx</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>_request_sid_exists</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>sess_map_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><ternary><condition><expr><name><name>req</name><operator>-&gt;</operator><name>sess_map</name></name></expr> ?</condition><then> <expr><call><name>iwhmap_get</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>sess_map</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>sst</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sst</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>sid</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>req</name><operator>-&gt;</operator><name>sess_map</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>sess_map</name></name> <operator>=</operator> <call><name>iwhmap_create_str</name><argument_list>(<argument><expr><name>iwhmap_kv_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>req</name><operator>-&gt;</operator><name>sess_map</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>sess_map_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>k</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>k</name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>iwhmap_put</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>sess_map</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>sess_map_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>val</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_wf_session_put</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req_</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwn_wf_session_del</name><argument_list>(<argument><expr><name>req_</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>req_</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>ctx</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>sess_map_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCR</name><argument_list>(<argument><expr><call><name>_request_sid_ensure</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>sess_map</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwhmap_remove</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>sess_map</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name><name>ctx</name><operator>-&gt;</operator><name>sst</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sst</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>sid</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>sess_map_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_wf_session_printf_va</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>va</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>va_list</name></type> <name>cva</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>cva</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_FAIL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name>wp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>cva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_FAIL</name></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwn_wf_session_put</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>cva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>buf</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_wf_session_printf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwn_wf_session_printf_va</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwn_wf_session_del</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req_</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>req_</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>ctx</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>_request_sid_exists</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>sess_map_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>sess_map</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwhmap_remove</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>sess_map</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>sst</name><operator>.</operator><name>del</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sst</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>sid</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>sess_map_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwn_wf_session_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req_</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>req_</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>req</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>ctx</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>_request_sid_exists</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>sst</name><operator>.</operator><name>clear</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sst</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>sid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>sess_map_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>sid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwhmap_clear</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>sess_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>sess_map_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_wf_cookie_add</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name>              <modifier>*</modifier></type><name>req</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>                     <modifier>*</modifier></type><name>name</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>                     <modifier>*</modifier></type><name>value</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_wf_cookie_opts</name></name></type> <name>opts</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name>xstr</name> <operator>=</operator> <call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_printf</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"%s=\"%s\""</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>.</operator><name>max_age_sec</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_cat</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"; Max-Age=0"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"; Max-Age=0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>opts</name><operator>.</operator><name>max_age_sec</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_printf</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"; Max-Age=%d"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>.</operator><name>max_age_sec</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>.</operator><name>path</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_printf</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"; Path=%s"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>.</operator><name>domain</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_printf</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"; Domain=%s"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>.</operator><name>domain</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>.</operator><name>httponly</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_cat</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"; Httponly"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"; Httponly"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>.</operator><name>secure</name></name> <operator>||</operator> <call><name>iwn_http_request_is_secure</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_cat</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"; Secure"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"; Secure"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>.</operator><name>extra</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><name><name>opts</name><operator>.</operator><name>extra</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwn_http_response_header_add</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="string">"Set-Cookie"</literal></expr></argument>, <argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>iwxstr_size</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>iwn_wf_route_submatch</name></name><modifier>*</modifier></type> <name>iwn_wf_request_submatch_first</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_wf_route</name></name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>route</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name><name>struct</name> <name>iwn_wf_route_submatch</name></name> <modifier>*</modifier><name>s</name></type> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</init> <condition><expr><name>s</name></expr>;</condition> <incr><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>route</name></name> <operator>==</operator> <name>r</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>s</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>iwn_wf_route_submatch</name></name><modifier>*</modifier></type> <name>iwn_wf_request_submatch_last</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_wf_route</name></name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>route</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>route</name></name> <operator>==</operator> <name>r</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>req</name><operator>-&gt;</operator><name>last</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_wf_route_submatch</name></name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name><name>struct</name> <name>iwn_wf_route_submatch</name></name> <modifier>*</modifier><name>s</name></type> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</init> <condition><expr><name>s</name></expr>;</condition> <incr><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>route</name></name> <operator>==</operator> <name>r</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ss</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>ss</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_wf_server</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_wf_server_spec</name></name> <modifier>*</modifier></type><name>spec_</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iwn_wf_ctx</name></name> <modifier>*</modifier></type><name>ctx_</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ctx_</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_wf_server_spec</name></name></type> <name>spec</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_http_server_spec</name></name></type> <name>http</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>spec</name></expr></argument>, <argument><expr><name>spec_</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>.</operator><name>request_file_max_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>spec</name><operator>.</operator><name>request_file_max_size</name></name> <operator>=</operator> <literal type="number">50</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>poller</name></name> <operator>=</operator> <name><name>spec</name><operator>.</operator><name>poller</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>request_file_max_size</name></name> <operator>=</operator> <name><name>spec</name><operator>.</operator><name>request_file_max_size</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>http</name><operator>.</operator><name>on_server_dispose</name></name> <operator>=</operator> <name>_server_on_dispose</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>http</name><operator>.</operator><name>request_handler</name></name> <operator>=</operator> <name>_request_handler</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>http</name><operator>.</operator><name>user_data</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>http</name><operator>.</operator><name>poller</name></name> <operator>=</operator> <name><name>spec</name><operator>.</operator><name>poller</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>http</name><operator>.</operator><name>listen</name></name> <operator>=</operator> <name><name>spec</name><operator>.</operator><name>listen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>http</name><operator>.</operator><name>port</name></name> <operator>=</operator> <name><name>spec</name><operator>.</operator><name>port</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>.</operator><name>ssl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spec</name><operator>.</operator><name>ssl</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>http</name><operator>.</operator><name>ssl</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>http</name><operator>.</operator><name>socket_queue_size</name></name> <operator>=</operator> <name><name>spec</name><operator>.</operator><name>socket_queue_size</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>http</name><operator>.</operator><name>request_buf_max_size</name></name> <operator>=</operator> <name><name>spec</name><operator>.</operator><name>request_buf_max_size</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>http</name><operator>.</operator><name>request_buf_size</name></name> <operator>=</operator> <name><name>spec</name><operator>.</operator><name>request_buf_size</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>http</name><operator>.</operator><name>request_timeout_keepalive_sec</name></name> <operator>=</operator> <name><name>spec</name><operator>.</operator><name>request_timeout_keepalive_sec</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>http</name><operator>.</operator><name>request_timeout_sec</name></name> <operator>=</operator> <name><name>spec</name><operator>.</operator><name>request_timeout_sec</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>http</name><operator>.</operator><name>request_token_max_len</name></name> <operator>=</operator> <name><name>spec</name><operator>.</operator><name>request_token_max_len</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>http</name><operator>.</operator><name>request_max_headers_count</name></name> <operator>=</operator> <name><name>spec</name><operator>.</operator><name>request_max_headers_count</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>http</name><operator>.</operator><name>proxy_handler</name></name> <operator>=</operator> <name><name>spec</name><operator>.</operator><name>proxy_handler</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_wf_session_store</name></name> <modifier>*</modifier></type><name>sst</name> <init>= <expr><operator>&amp;</operator><name><name>spec</name><operator>.</operator><name>session_store</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><macro><name>memcmp</name><argument_list>(<argument>sst</argument>, <argument>&amp;(struct iwn_wf_session_store) {}</argument>, <argument>sizeof(*sst)</argument>)</argument_list></macro> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sst_inmem_create</name><argument_list>(<argument><expr><name>sst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(  <expr><operator>!</operator><name><name>sst</name><operator>-&gt;</operator><name>clear</name></name>
     <operator>||</operator> <operator>!</operator><name><name>sst</name><operator>-&gt;</operator><name>del</name></name>
     <operator>||</operator> <operator>!</operator><name><name>sst</name><operator>-&gt;</operator><name>get</name></name>
     <operator>||</operator> <operator>!</operator><name><name>sst</name><operator>-&gt;</operator><name>put</name></name>
     <operator>||</operator> <operator>!</operator><name><name>sst</name><operator>-&gt;</operator><name>dispose</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error2</name><argument_list>(<argument><expr><name>IW_ERROR_INVALID_ARGS</name></expr></argument>, <argument><expr><literal type="string">"(struct iwn_wf_server_spec).session_store is not initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sst</name></name> <operator>=</operator> <operator>*</operator><name>sst</name></expr>;</expr_stmt>

  <return>return <expr><call><name>iwn_http_server_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>http</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>server_fd</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwn_wf_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_ctx</name></name> <modifier>*</modifier></type><name>ctx_</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ctx_</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>poller</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>server_fd</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwn_poller_remove</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>poller</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>server_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>_ctx_destroy</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_ecodefn</name><parameter_list>(<parameter><decl><type><name>locale_t</name></type> <name>locale</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ecode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ecode</name> <operator>&lt;=</operator> <name>_WF_ERROR_START</name> <operator>||</operator> <name>ecode</name> <operator>&gt;=</operator> <name>_WF_ERROR_END</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <switch>switch <condition>(<expr><name>ecode</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>WF_ERROR_INVALID_FORM_DATA</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid (unparseable) form data (WF_ERROR_INVALID_FORM_DATA)"</literal></expr>;</return>
    <case>case <expr><name>WF_ERROR_PARENT_ROUTE_FROM_DIFFERENT_CONTEXT</name></expr>:</case>
      <return>return <expr><literal type="string">"Parent router from different context (WF_ERROR_PARENT_ROUTER_FROM_DIFFERENT_CONTEXT)"</literal></expr>;</return>
    <case>case <expr><name>WF_ERROR_REGEXP_INVALID</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid regular expression (WF_ERROR_REGEXP_INVALID)"</literal></expr>;</return>
    <case>case <expr><name>WF_ERROR_UNSUPPORTED_HTTP_METHOD</name></expr>:</case>
      <return>return <expr><literal type="string">"Unsupported HTTP method (WF_ERROR_UNSUPPORTED_HTTP_METHOD)"</literal></expr>;</return>
    <case>case <expr><name>WF_ERROR_MAX_NESTED_ROUTES</name></expr>:</case>
      <return>return <expr><literal type="string">"Reached the maximum number of nested routes: 127 (WF_ERROR_MAX_NESTED_ROUTES)"</literal></expr>;</return>
    <case>case <expr><name>WF_ERROR_CURL_API</name></expr>:</case>
      <return>return <expr><literal type="string">"CUrl API call error (WF_ERROR_CURL_API)"</literal></expr>;</return>
  </block_content>}</block></switch>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>_pctx</name> <block>{
  <decl_stmt><decl><type><name>int</name></type>   <name>indent</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name>  <modifier>*</modifier></type><name>num</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_route_print_flags</name><parameter_list>(<parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>&amp;</operator> <name>IWN_WF_METHODS_ALL</name><operator>)</operator> <operator>==</operator> <name>IWN_WF_METHODS_ALL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"ALL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>f</name> <operator>&amp;</operator> <name>IWN_WF_GET</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>c</name><operator>++</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"GET"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>f</name> <operator>&amp;</operator> <name>IWN_WF_POST</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>c</name><operator>++</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"POST"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>f</name> <operator>&amp;</operator> <name>IWN_WF_PUT</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>c</name><operator>++</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"PUT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>f</name> <operator>&amp;</operator> <name>IWN_WF_DELETE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>c</name><operator>++</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"DELETE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>f</name> <operator>&amp;</operator> <name>IWN_WF_PATCH</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>c</name><operator>++</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"PATCH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>f</name> <operator>&amp;</operator> <name>IWN_WF_HEAD</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>c</name><operator>++</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"HEAD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>f</name> <operator>&amp;</operator> <name>IWN_WF_OPTIONS</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>c</name><operator>++</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"OPTIONS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_route_print</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_pctx</name></name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>route</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name><name>ctx</name><operator>.</operator><name>num</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><literal type="string">"%04d "</literal></expr></argument>, <argument><expr><operator>*</operator><name><name>ctx</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>.</operator><name>indent</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><literal type="string">"  "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>xstr</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>r</name><operator>-&gt;</operator><name>pattern_re</name></name></expr> ?</condition><then> <expr><literal type="string">"{"</literal></expr> </then><else>: <expr><literal type="string">"["</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>tag</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>pattern</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>iwxstr_cat2</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>IWN_WF_MATCH_PREFIX</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"&gt; "</literal></expr> </then><else>: <expr><literal type="string">"] "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_route_print_flags</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name><name>struct</name> <name>route</name></name> <modifier>*</modifier><name>n</name></type> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</init> <condition><expr><name>n</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <macro><name>_route_print</name><argument_list>(<argument>(struct _pctx) {
      .out = ctx.out</argument>,
      <argument>.indent = ctx.indent + <literal type="number">1</literal></argument>,
      <argument>.num = ctx.num
    }</argument>, <argument>n</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwn_wf_route_print</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_wf_route</name></name> <modifier>*</modifier></type><name>route</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>route</name></name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>route</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
    <macro><name>_route_print</name><argument_list>(<argument>(struct _pctx) {
      .out = out</argument>,
      <argument>.num = &amp;num</argument>,
    <argument>}</argument>, <argument>r</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>IW_TESTS</name></cpp:ifdef>

<function><type><name>void</name></type> <name>dbg_route_iter_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>route_iter</name></name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>_route_iter_init</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>route</name></name><modifier>*</modifier></type> <name>dbg_route_iter_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>route_iter</name></name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_route_iter_next</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dbg_request_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>_request_destroy</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
