<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/http/iwn_wf_files.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_wf_files.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_mimetypes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwlog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwxstr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOUNDARY_MAX</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTYPE_MAX</name></cpp:macro>    <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ETAG_MAX</name></cpp:macro>     <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_MAX</name></cpp:macro>      <cpp:value>4096</cpp:value></cpp:define>

<struct>struct <name>range</name> <block>{
  <decl_stmt><decl><type><name>int64_t</name></type>       <name>start</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>       <name>end</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>       <name>to_read</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>range</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ctx</name> <block>{
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>range</name></name> <modifier>*</modifier></type><name>ranges</name></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type>  (<modifier>*</modifier><name>on_completed</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>on_completed_data</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWP_FILE_STAT</name></type> <name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>range_processed</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>boundary</name><index>[<expr><name>BOUNDARY_MAX</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>ctype</name><index>[<expr><name>CTYPE_MAX</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BUF_MAX</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_ctx_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name><operator>-&gt;</operator><name>on_request_dispose</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>on_completed</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>on_completed</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>on_completed_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <for>for <control>(<init><decl><type><name><name>struct</name> <name>range</name></name> <modifier>*</modifier><name>r</name></type> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>ranges</name></name></expr></init></decl>;</init> <condition><expr><name>r</name></expr>;</condition> <incr/>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>range</name></name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>r</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_on_request_dispose</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>_ctx_destroy</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_ranges_parse_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>range</name></name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>to_read</name></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>range</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><operator>&amp;</operator><name><name>range</name><operator>-&gt;</operator><name>start</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>rp</name> <operator>&lt;</operator> <name>ep</name></expr>)</condition> <block>{<block_content>
    <switch>switch <condition>(<expr><operator>*</operator><name>rp</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="char">' '</literal></expr>:</case>
        <expr_stmt><expr><operator>++</operator><name>rp</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>rv</name> <operator>!=</operator> <name>INT64_MAX</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>range</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt> <comment type="line">// invalid</comment>
          <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      <case>case <expr><literal type="char">','</literal></expr>:</case>
        <expr_stmt><expr><operator>++</operator><name>rp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>rp</name></expr>;</expr_stmt>
        <goto>goto <name>finish</name>;</goto>
      <case>case <expr><literal type="char">'-'</literal></expr>:</case>
        <expr_stmt><expr><operator>++</operator><name>rp</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>rv</name> <operator>==</operator> <operator>&amp;</operator><name><name>range</name><operator>-&gt;</operator><name>start</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>rv</name> <operator>=</operator> <operator>&amp;</operator><name><name>range</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>range</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt> <comment type="line">// invalid</comment>
          <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
      <case>case <expr><literal type="char">'0'</literal></expr>:</case>
      <case>case <expr><literal type="char">'1'</literal></expr>:</case>
      <case>case <expr><literal type="char">'2'</literal></expr>:</case>
      <case>case <expr><literal type="char">'3'</literal></expr>:</case>
      <case>case <expr><literal type="char">'4'</literal></expr>:</case>
      <case>case <expr><literal type="char">'5'</literal></expr>:</case>
      <case>case <expr><literal type="char">'6'</literal></expr>:</case>
      <case>case <expr><literal type="char">'7'</literal></expr>:</case>
      <case>case <expr><literal type="char">'8'</literal></expr>:</case>
      <case>case <expr><literal type="char">'9'</literal></expr>:</case>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>rv</name> <operator>==</operator> <name>INT64_MAX</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>rv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>rv</name> <operator>=</operator> <operator>*</operator><name>rv</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>*</operator><name>rp</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name>rp</name></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>range</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt> <comment type="line">// invalid</comment>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></switch>
  </block_content>}</block></while>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rv</name> <operator>==</operator> <operator>&amp;</operator><name><name>range</name><operator>-&gt;</operator><name>start</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>range</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_ranges_parse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// TODO: Check overlapping of ranges</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>range</name></name></type> <name>range</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>rp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rp</name> <operator>=</operator> <call><name>_ranges_parse_next</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(  <expr><operator>(</operator><name><name>range</name><operator>.</operator><name>start</name></name> <operator>==</operator> <name>INT64_MIN</name> <operator>||</operator> <name><name>range</name><operator>.</operator><name>end</name></name> <operator>==</operator> <name>INT64_MIN</name><operator>)</operator>
       <operator>||</operator> <operator>(</operator><name><name>range</name><operator>.</operator><name>start</name></name> <operator>==</operator> <name>INT64_MAX</name> <operator>&amp;&amp;</operator> <name><name>range</name><operator>.</operator><name>end</name></name> <operator>==</operator> <name>INT64_MAX</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(  <expr><name><name>range</name><operator>.</operator><name>start</name></name> <operator>!=</operator> <name>INT64_MAX</name> <operator>&amp;&amp;</operator> <name><name>range</name><operator>.</operator><name>end</name></name> <operator>!=</operator> <name>INT64_MAX</name>
       <operator>&amp;&amp;</operator> <operator>(</operator><name><name>range</name><operator>.</operator><name>start</name></name> <operator>&gt;</operator> <name><name>range</name><operator>.</operator><name>end</name></name> <operator>||</operator> <name><name>range</name><operator>.</operator><name>start</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>range</name><operator>.</operator><name>end</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>range</name><operator>.</operator><name>start</name></name> <operator>==</operator> <name>INT64_MAX</name> <operator>&amp;&amp;</operator> <name><name>range</name><operator>.</operator><name>end</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>range</name></name> <modifier>*</modifier></type><name>nr</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>nr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nr</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>nr</name> <operator>=</operator> <name>range</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>range</name></name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>ranges</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>r</name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>nr</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ranges</name></name> <operator>=</operator> <name>nr</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_boundary_fill</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name><name>fout</name><index>[<expr><name>BOUNDARY_MAX</name></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>cset</name><index>[]</index></name> <init>= <expr><literal type="string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"/dev/urandom"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name>fout</name></expr></argument>, <argument><expr><name>BOUNDARY_MAX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BOUNDARY_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>fout</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>cset</name><index>[<expr><name><name>fout</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>cset</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>fout</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>size_t</name></type> <name>_etag_fill</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>fout</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="string">"%04X-%04X"</literal></expr></argument>,
                  <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>mtime</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>_file_serve_ranges_multiple_part</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>again</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_file_serve_ranges_multiple_part_body</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>again</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>range</name></name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>ranges</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>range_processed</name></name> <operator>=</operator> <name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>to_read</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>to_read</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>fread</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>to_read</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>stop</name> <init>= <expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>!=</operator> <name>to_read</name> <operator>||</operator> <name>len</name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>to_read</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>to_read</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>stop</name></expr>)</condition> <block>{<block_content>
    <comment type="line">//  Move to the next part</comment>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ranges</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>iwn_http_response_stream_write</name><argument_list>(
    <argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
    <argument><expr><ternary><condition><expr><name>stop</name></expr> ?</condition><then> <expr><name>_file_serve_ranges_multiple_part</name></expr> </then><else>: <expr><name>_file_serve_ranges_multiple_part_body</name></expr></else></ternary></expr></argument>,
    <argument><expr><name>again</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_file_server_accept_range</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>start_</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>end_</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>range</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>start</name></name> <operator>==</operator> <name>INT64_MAX</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCN</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>fseek</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><operator>-</operator><name><name>r</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>size</name></name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>to_read</name></name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>start</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCN</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>fseek</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name>IWP_SEEK_SET</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>end</name></name> <operator>!=</operator> <name>INT64_MAX</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>to_read</name></name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>start</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>to_read</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>size</name></name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>end</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>start</name></expr></argument> &gt;</argument_list></name> <name>end</name> <operator>||</operator> <name><name>r</name><operator>-&gt;</operator><name>to_read</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>start_</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>end_</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_file_serve_ranges_multiple_part</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>again</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>range</name></name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>ranges</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>buf_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwn_http_server_chunk_handler</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>xstr</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>range_processed</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_printf</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_file_server_accept_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_FAIL</name></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_printf</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"--%s\r\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>boundary</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_printf</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"content-type: %s\r\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctype</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_printf</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"content-range: "</literal>
                                  <literal type="string">"bytes %"</literal> <name>PRId64</name> <literal type="string">"-%"</literal> <name>PRId64</name> <literal type="string">"/%"</literal> <name>PRId64</name> <literal type="string">"\r\n\r\n"</literal></expr></argument>,
                                  <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ch</name> <operator>=</operator> <name>_file_serve_ranges_multiple_part_body</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwxstr_printf</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"--%s--\r\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>boundary</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>buf_len</name> <operator>=</operator> <call><name>iwxstr_size</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>iwxstr_destroy_keep_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>xstr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>iwn_http_response_stream_write</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>free</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>again</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_file_serve_ranges_multiple</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_boundary_fill</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>boundary</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_http_response_code_set</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="number">206</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwn_http_connection_set_keep_alive</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_http_response_header_printf</name><argument_list>(
        <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="string">"content-type"</literal></expr></argument>, <argument><expr><literal type="string">"multipart/byteranges; boundary=\"%s\""</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>boundary</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IW_UNLIKELY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IWN_WF_HEAD</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwn_http_response_write</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="number">206</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwn_http_response_stream_start</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><name>_file_serve_ranges_multiple_part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_file_serve_range_single_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>again</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>range</name></name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>ranges</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>to_read</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>to_read</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>fread</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>to_read</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>stop</name> <init>= <expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>!=</operator> <name>to_read</name> <operator>||</operator> <name>len</name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>to_read</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>to_read</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>iwn_http_response_stream_write</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>stop</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>_file_serve_range_single_cb</name></expr></else></ternary></expr></argument>, <argument><expr><name>again</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_file_serve_range_single</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>range</name></name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>ranges</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_file_server_accept_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwn_http_response_by_code</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="number">416</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_http_response_header_set</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="string">"content-type"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctype</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_http_response_header_i64_set</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="string">"content-length"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>to_read</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_http_response_code_set</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="number">206</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Partial content</comment>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_http_response_header_printf</name><argument_list>(
        <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="string">"content-range"</literal></expr></argument>,
        <argument><expr><literal type="string">"bytes %"</literal> <name>PRId64</name> <literal type="string">"-%"</literal> <name>PRId64</name> <literal type="string">"/%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IW_UNLIKELY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IWN_WF_HEAD</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwn_http_response_write</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="number">206</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwn_http_response_stream_start</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><name>_file_serve_range_single_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_file_serve_norange_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_http_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>again</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>user_data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>fread</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>iwn_http_response_stream_write</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                 <argument><expr><ternary><condition><expr><name>len</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>_file_serve_norange_cb</name></expr></else></ternary></expr></argument>,
                                 <argument><expr><name>again</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_file_serve_norange</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_http_response_header_set</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="string">"content-type"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctype</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_http_response_header_i64_set</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="string">"content-length"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IW_UNLIKELY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IWN_WF_HEAD</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwn_http_response_write</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwn_http_response_stream_start</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><name>_file_serve_norange_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_file_serve</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>http</name><operator>-&gt;</operator><name>on_request_dispose</name></name> <operator>=</operator> <name>_on_request_dispose</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IW_UNLIKELY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ranges</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>IW_UNLIKELY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ranges</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>_file_serve_ranges_multiple</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><call><name>_file_serve_range_single</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><call><name>_file_serve_norange</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_wf_file_serve</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>        <modifier>*</modifier></type><name>ctype</name></decl></parameter>,
  <parameter><decl><type><name>void</name>              <modifier>*</modifier></type><name>file_or_path</name></decl></parameter>,
  <parameter><function_decl><type><name>void</name></type> (            <modifier>*</modifier><name>on_completed</name> )<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
  <parameter><decl><type><name>void</name>              <modifier>*</modifier></type><name>on_completed_data</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name>ctx</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>on_completed</name></name> <operator>=</operator> <name>on_completed</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>on_completed_data</name></name> <operator>=</operator> <name>on_completed_data</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>on_completed</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_fstat</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name>file_or_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>ftype</name></name> <operator>!=</operator> <name>IWP_TYPE_FILE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>off_t</name></type> <name>off</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name>file_or_path</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCN</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>fseeko</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCN</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name>off</name> <operator>=</operator> <call><name>ftello</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCN</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>fseeko</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>ftype</name></name> <operator>=</operator> <name>IWP_TYPE_FILE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>ctype</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ctype</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctype</name></name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctype</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctype</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctype</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctype</name></name></expr></argument>, <argument><expr><literal type="string">"application/octet-stream"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"application/octet-stream"</literal></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_pair</name></name></type> <name>pv</name> <init>= <expr><call><name>iwn_wf_header_part_find</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="string">"range"</literal></expr></argument>, <argument><expr><literal type="string">"bytes"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pv</name><operator>.</operator><name>val_len</name></name></expr>)</condition> <block>{<block_content> <comment type="line">// Use ranges only for non-empty files</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_ranges_parse</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>pv</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>pv</name><operator>.</operator><name>val</name></name> <operator>+</operator> <name><name>pv</name><operator>.</operator><name>val_len</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">416</literal></expr>;</expr_stmt> <comment type="line">// Bad ranges</comment>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>etag</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>etag_len</name> <init>= <expr><call><name>_etag_fill</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>etag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_http_response_header_set</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="string">"etag"</literal></expr></argument>, <argument><expr><name>etag</name></expr></argument>, <argument><expr><name>etag_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>val</name> <init>= <expr><call><name>iwn_http_request_header_get</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="string">"if-none-match"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"if-none-match"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>val</name><operator>.</operator><name>len</name></name> <operator>==</operator> <name>etag_len</name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>etag</name></expr></argument>, <argument><expr><name>etag_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">304</literal></expr>;</expr_stmt> <comment type="line">// Not modified</comment>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwn_http_response_header_set</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>http</name></name></expr></argument>, <argument><expr><literal type="string">"accept-ranges"</literal></expr></argument>, <argument><expr><literal type="string">"bytes"</literal></expr></argument>, <argument><expr><call><name>IW_LLEN</name><argument_list>(<argument><expr><literal type="string">"bytes"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>file</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name>file_or_path</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>file</name></name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_file_serve</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// We handled this request</comment>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_ctx_destroy</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>iwn_wf_file_serve</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ctype</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_wf_file_serve</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_fileobj_serve_oncomplete_noop</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>iwn_wf_fileobj_serve</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ctype</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,
  <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>on_completed</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>on_completed_data</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>on_completed</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>on_completed</name> <operator>=</operator> <name>_fileobj_serve_oncomplete_noop</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>_wf_file_serve</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>on_completed</name></expr></argument>, <argument><expr><name>on_completed_data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>route_dir_spec</name> <block>{
  <decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>dir_len</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_handler_dir_attach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_req</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>route_dir_spec</name></name> <modifier>*</modifier></type><name>spec</name> <init>= <expr><name>d</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>req</name><operator>-&gt;</operator><name>path_unmatched</name></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IWN_WF_GET</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>path_unmatched</name></name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>fpath</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>ulen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>path_unmatched</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>dir_len</name></name> <operator>+</operator> <name>ulen</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fpath</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>fpath</name></expr></argument>, <argument><expr><name><name>spec</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><name><name>spec</name><operator>-&gt;</operator><name>dir_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>fpath</name> <operator>+</operator> <name><name>spec</name><operator>-&gt;</operator><name>dir_len</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>path_unmatched</name></name></expr></argument>, <argument><expr><name>ulen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fpath</name><index>[<expr><name><name>spec</name><operator>-&gt;</operator><name>dir_len</name></name> <operator>+</operator> <name>ulen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>fpath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ctype</name> <init>= <expr><call><name>iwn_mimetype_find_by_path</name><argument_list>(<argument><expr><name>fpath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>iwn_wf_file_serve</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>fpath</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_handler_dir_attach_dispose</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>route_dir_spec</name></name> <modifier>*</modifier></type><name>spec</name> <init>= <expr><name>d</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>spec</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>spec</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>iwn_wf_route</name></name><modifier>*</modifier></type> <name>iwn_wf_route_dir_attach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_wf_route</name></name> <modifier>*</modifier></type><name>route</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>route</name> <operator>||</operator> <operator>!</operator><name>dir</name> <operator>||</operator> <operator>*</operator><name>dir</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>route_dir_spec</name></name> <modifier>*</modifier></type><name>spec</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>spec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>spec</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>spec</name><operator>-&gt;</operator><name>dir</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>spec</name><operator>-&gt;</operator><name>dir</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>spec</name><operator>-&gt;</operator><name>dir_len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>spec</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>route</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>_handler_dir_attach</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>route</name><operator>-&gt;</operator><name>handler_dispose</name></name> <operator>=</operator> <name>_handler_dir_attach_dispose</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>route</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>spec</name></expr>;</expr_stmt>
  <return>return <expr><name>route</name></expr>;</return>
</block_content>}</block></function>
</unit>
