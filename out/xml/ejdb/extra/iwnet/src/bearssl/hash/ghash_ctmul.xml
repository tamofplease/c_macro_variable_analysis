<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/hash/ghash_ctmul.c"><comment type="block">/*
 * Copyright (c) 2016 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/*
 * We compute "carryless multiplications" through normal integer
 * multiplications, masking out enough bits to create "holes" in which
 * carries may expand without altering our bits; we really use 8 data
 * bits per 32-bit word, spaced every fourth bit. Accumulated carries
 * may not exceed 8 in total, which fits in 4 bits.
 *
 * It would be possible to use a 3-bit spacing, allowing two operands,
 * one with 7 non-zero data bits, the other one with 10 or 11 non-zero
 * data bits; this asymmetric splitting makes the overall code more
 * complex with thresholds and exceptions, and does not appear to be
 * worth the effort.
 */</comment>

<comment type="block">/*
 * We cannot really autodetect whether multiplications are "slow" or
 * not. A typical example is the ARM Cortex M0+, which exists in two
 * versions: one with a 1-cycle multiplication opcode, the other with
 * a 32-cycle multiplication opcode. They both use exactly the same
 * architecture and ABI, and cannot be distinguished from each other
 * at compile-time.
 *
 * Since most modern CPU (even embedded CPU) still have fast
 * multiplications, we use the "fast mul" code by default.
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_SLOW_MUL</name></expr></cpp:if>

<comment type="block">/*
 * This implementation uses Karatsuba-like reduction to make fewer
 * integer multiplications (9 instead of 16), at the expense of extra
 * logical operations (XOR, shifts...). On modern x86 CPU that offer
 * fast, pipelined multiplications, this code is about twice slower than
 * the simpler code with 16 multiplications. This tendency may be
 * reversed on low-end platforms with expensive multiplications.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL32</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>do { \
		uint64_t mul32tmp = MUL(x, y); \
		(h) = (uint32_t)(mul32tmp &gt;&gt; 32); \
		(l) = (uint32_t)mul32tmp; \
	} while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>bmul</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>hi</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>lo</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>x0</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>, <decl><type ref="prev"/><name>x3</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>y0</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>, <decl><type ref="prev"/><name>y2</name></decl>, <decl><type ref="prev"/><name>y3</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>a0</name></decl>, <decl><type ref="prev"/><name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>, <decl><type ref="prev"/><name>a3</name></decl>, <decl><type ref="prev"/><name>a4</name></decl>, <decl><type ref="prev"/><name>a5</name></decl>, <decl><type ref="prev"/><name>a6</name></decl>, <decl><type ref="prev"/><name>a7</name></decl>, <decl><type ref="prev"/><name>a8</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>b0</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>, <decl><type ref="prev"/><name>b3</name></decl>, <decl><type ref="prev"/><name>b4</name></decl>, <decl><type ref="prev"/><name>b5</name></decl>, <decl><type ref="prev"/><name>b6</name></decl>, <decl><type ref="prev"/><name>b7</name></decl>, <decl><type ref="prev"/><name>b8</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>x0</name> <operator>=</operator> <name>x</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x11111111</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x1</name> <operator>=</operator> <name>x</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x22222222</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x2</name> <operator>=</operator> <name>x</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x44444444</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x3</name> <operator>=</operator> <name>x</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x88888888</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>y0</name> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x11111111</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>y1</name> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x22222222</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>y2</name> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x44444444</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>y3</name> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x88888888</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * (x0+W*x1)*(y0+W*y1) -&gt; a0:b0
	 * (x2+W*x3)*(y2+W*y3) -&gt; a3:b3
	 * ((x0+x2)+W*(x1+x3))*((y0+y2)+W*(y1+y3)) -&gt; a6:b6
	 */</comment>
	<expr_stmt><expr><name>a0</name> <operator>=</operator> <name>x0</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>b0</name> <operator>=</operator> <name>y0</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>a1</name> <operator>=</operator> <name>x1</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>b1</name> <operator>=</operator> <name>y1</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>a2</name> <operator>=</operator> <name>a0</name> <operator>^</operator> <name>a1</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>b2</name> <operator>=</operator> <name>b0</name> <operator>^</operator> <name>b1</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>a3</name> <operator>=</operator> <name>x2</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>b3</name> <operator>=</operator> <name>y2</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>a4</name> <operator>=</operator> <name>x3</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>b4</name> <operator>=</operator> <name>y3</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>a5</name> <operator>=</operator> <name>a3</name> <operator>^</operator> <name>a4</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>b5</name> <operator>=</operator> <name>b3</name> <operator>^</operator> <name>b4</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>a6</name> <operator>=</operator> <name>a0</name> <operator>^</operator> <name>a3</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>b6</name> <operator>=</operator> <name>b0</name> <operator>^</operator> <name>b3</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>a7</name> <operator>=</operator> <name>a1</name> <operator>^</operator> <name>a4</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>b7</name> <operator>=</operator> <name>b1</name> <operator>^</operator> <name>b4</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>a8</name> <operator>=</operator> <name>a6</name> <operator>^</operator> <name>a7</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>b8</name> <operator>=</operator> <name>b6</name> <operator>^</operator> <name>b7</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MUL32</name><argument_list>(<argument><expr><name>b0</name></expr></argument>, <argument><expr><name>a0</name></expr></argument>, <argument><expr><name>b0</name></expr></argument>, <argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MUL32</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MUL32</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MUL32</name><argument_list>(<argument><expr><name>b3</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MUL32</name><argument_list>(<argument><expr><name>b4</name></expr></argument>, <argument><expr><name>a4</name></expr></argument>, <argument><expr><name>b4</name></expr></argument>, <argument><expr><name>a4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MUL32</name><argument_list>(<argument><expr><name>b5</name></expr></argument>, <argument><expr><name>a5</name></expr></argument>, <argument><expr><name>b5</name></expr></argument>, <argument><expr><name>a5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MUL32</name><argument_list>(<argument><expr><name>b6</name></expr></argument>, <argument><expr><name>a6</name></expr></argument>, <argument><expr><name>b6</name></expr></argument>, <argument><expr><name>a6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MUL32</name><argument_list>(<argument><expr><name>b7</name></expr></argument>, <argument><expr><name>a7</name></expr></argument>, <argument><expr><name>b7</name></expr></argument>, <argument><expr><name>a7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MUL32</name><argument_list>(<argument><expr><name>b8</name></expr></argument>, <argument><expr><name>a8</name></expr></argument>, <argument><expr><name>b8</name></expr></argument>, <argument><expr><name>a8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>a0</name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x11111111</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>a1</name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x11111111</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>a2</name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x11111111</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>a3</name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x11111111</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>a4</name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x11111111</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>a5</name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x11111111</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>a6</name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x11111111</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>a7</name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x11111111</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>a8</name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x11111111</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>b0</name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x11111111</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>b1</name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x11111111</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>b2</name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x11111111</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>b3</name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x11111111</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>b4</name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x11111111</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>b5</name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x11111111</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>b6</name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x11111111</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>b7</name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x11111111</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>b8</name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x11111111</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>a2</name> <operator>^=</operator> <name>a0</name> <operator>^</operator> <name>a1</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>b2</name> <operator>^=</operator> <name>b0</name> <operator>^</operator> <name>b1</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>a0</name> <operator>^=</operator> <operator>(</operator><name>a2</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>a1</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>b0</name> <operator>^=</operator> <operator>(</operator><name>b2</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>b1</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>a5</name> <operator>^=</operator> <name>a3</name> <operator>^</operator> <name>a4</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>b5</name> <operator>^=</operator> <name>b3</name> <operator>^</operator> <name>b4</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>a3</name> <operator>^=</operator> <operator>(</operator><name>a5</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>a4</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>b3</name> <operator>^=</operator> <operator>(</operator><name>b5</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>b4</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>a8</name> <operator>^=</operator> <name>a6</name> <operator>^</operator> <name>a7</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>b8</name> <operator>^=</operator> <name>b6</name> <operator>^</operator> <name>b7</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>a6</name> <operator>^=</operator> <operator>(</operator><name>a8</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>a7</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>b6</name> <operator>^=</operator> <operator>(</operator><name>b8</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>b7</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>a6</name> <operator>^=</operator> <name>a0</name> <operator>^</operator> <name>a3</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>b6</name> <operator>^=</operator> <name>b0</name> <operator>^</operator> <name>b3</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>lo</name> <operator>=</operator> <name>a0</name> <operator>^</operator> <operator>(</operator><name>a6</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>a3</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>hi</name> <operator>=</operator> <name>b0</name> <operator>^</operator> <operator>(</operator><name>b6</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>b3</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>a6</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>a3</name> <operator>&gt;&gt;</operator> <literal type="number">28</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<comment type="block">/*
 * Simple multiplication in GF(2)[X], using 16 integer multiplications.
 */</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>bmul</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>hi</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>lo</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>x0</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>, <decl><type ref="prev"/><name>x3</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>y0</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>, <decl><type ref="prev"/><name>y2</name></decl>, <decl><type ref="prev"/><name>y3</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>z0</name></decl>, <decl><type ref="prev"/><name>z1</name></decl>, <decl><type ref="prev"/><name>z2</name></decl>, <decl><type ref="prev"/><name>z3</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>z</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>x0</name> <operator>=</operator> <name>x</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x11111111</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x1</name> <operator>=</operator> <name>x</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x22222222</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x2</name> <operator>=</operator> <name>x</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x44444444</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x3</name> <operator>=</operator> <name>x</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x88888888</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>y0</name> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x11111111</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>y1</name> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x22222222</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>y2</name> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x44444444</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>y3</name> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x88888888</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>z0</name> <operator>=</operator> <call><name>MUL</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call> <operator>^</operator> <call><name>MUL</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y3</name></expr></argument>)</argument_list></call> <operator>^</operator> <call><name>MUL</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call> <operator>^</operator> <call><name>MUL</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MUL</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call> <operator>^</operator> <call><name>MUL</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call> <operator>^</operator> <call><name>MUL</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y3</name></expr></argument>)</argument_list></call> <operator>^</operator> <call><name>MUL</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>z2</name> <operator>=</operator> <call><name>MUL</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call> <operator>^</operator> <call><name>MUL</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call> <operator>^</operator> <call><name>MUL</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call> <operator>^</operator> <call><name>MUL</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>y3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>z3</name> <operator>=</operator> <call><name>MUL</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y3</name></expr></argument>)</argument_list></call> <operator>^</operator> <call><name>MUL</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call> <operator>^</operator> <call><name>MUL</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call> <operator>^</operator> <call><name>MUL</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>z0</name> <operator>&amp;=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x1111111111111111</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>z1</name> <operator>&amp;=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x2222222222222222</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>z2</name> <operator>&amp;=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x4444444444444444</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>z3</name> <operator>&amp;=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x8888888888888888</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>z</name> <operator>=</operator> <name>z0</name> <operator>|</operator> <name>z1</name> <operator>|</operator> <name>z2</name> <operator>|</operator> <name>z3</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>lo</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>hi</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>z</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* see bearssl_hash.h */</comment>
<function><type><name>void</name></type>
<name>br_ghash_ctmul</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>yb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>yw</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>hw</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Throughout the loop we handle the y and h values as arrays
	 * of 32-bit words.
	 */</comment>
	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>yb</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>hb</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>yw</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>br_dec32be</name><argument_list>(<argument><expr><name>yb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>yw</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>br_dec32be</name><argument_list>(<argument><expr><name>yb</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>yw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>br_dec32be</name><argument_list>(<argument><expr><name>yb</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>yw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>br_dec32be</name><argument_list>(<argument><expr><name>yb</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hw</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>br_dec32be</name><argument_list>(<argument><expr><name>hb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hw</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>br_dec32be</name><argument_list>(<argument><expr><name>hb</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>br_dec32be</name><argument_list>(<argument><expr><name>hb</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>br_dec32be</name><argument_list>(<argument><expr><name>hb</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>a</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>b</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>zw</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>c0</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>c3</name></decl>, <decl><type ref="prev"/><name>d0</name></decl>, <decl><type ref="prev"/><name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>, <decl><type ref="prev"/><name>d3</name></decl>, <decl><type ref="prev"/><name>e0</name></decl>, <decl><type ref="prev"/><name>e1</name></decl>, <decl><type ref="prev"/><name>e2</name></decl>, <decl><type ref="prev"/><name>e3</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Get the next 16-byte block (using zero-padding if
		 * necessary).
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>src</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><sizeof>sizeof <name>tmp</name></sizeof><operator>)</operator> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>src</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/*
		 * Decode the block. The GHASH standard mandates
		 * big-endian encoding.
		 */</comment>
		<expr_stmt><expr><name><name>yw</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^=</operator> <call><name>br_dec32be</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>yw</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^=</operator> <call><name>br_dec32be</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>yw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <call><name>br_dec32be</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>yw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <call><name>br_dec32be</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * We multiply two 128-bit field elements. We use
		 * Karatsuba to turn that into three 64-bit
		 * multiplications, which are themselves done with a
		 * total of nine 32-bit multiplications.
		 */</comment>

		<comment type="block">/*
		 * y[0,1]*h[0,1] -&gt; 0..2
		 * y[2,3]*h[2,3] -&gt; 3..5
		 * (y[0,1]+y[2,3])*(h[0,1]+h[2,3]) -&gt; 6..8
		 */</comment>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>yw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>hw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>yw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>hw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>yw</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>hw</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>yw</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>hw</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>bmul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><name>c0</name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>c3</name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>d0</name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>d1</name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>d2</name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>d3</name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>e0</name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>e1</name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>e2</name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>^</operator> <name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>e3</name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>e0</name> <operator>^=</operator> <name>c0</name> <operator>^</operator> <name>d0</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>e1</name> <operator>^=</operator> <name>c1</name> <operator>^</operator> <name>d1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>e2</name> <operator>^=</operator> <name>c2</name> <operator>^</operator> <name>d2</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>e3</name> <operator>^=</operator> <name>c3</name> <operator>^</operator> <name>d3</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>c2</name> <operator>^=</operator> <name>e0</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>c3</name> <operator>^=</operator> <name>e1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>d0</name> <operator>^=</operator> <name>e2</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>d1</name> <operator>^=</operator> <name>e3</name></expr>;</expr_stmt>

		<comment type="block">/*
		 * GHASH specification has the bits "reversed" (most
		 * significant is in fact least significant), which does
		 * not matter for a carryless multiplication, except that
		 * the 255-bit result must be shifted by 1 bit.
		 */</comment>
		<expr_stmt><expr><name><name>zw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c0</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>zw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>c1</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>c0</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>zw</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>c2</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>c1</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>zw</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>c3</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>c2</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>zw</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>d0</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>c3</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>zw</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>d1</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>d0</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>zw</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>d2</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>d1</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>zw</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>d3</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>d2</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

		<comment type="block">/*
		 * We now do the reduction modulo the field polynomial
		 * to get back to 128 bits.
		 */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>uint32_t</name></type> <name>lw</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>lw</name> <operator>=</operator> <name><name>zw</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>zw</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>^=</operator> <name>lw</name> <operator>^</operator> <operator>(</operator><name>lw</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>lw</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>lw</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>zw</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>^=</operator> <operator>(</operator><name>lw</name> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>lw</name> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>lw</name> <operator>&lt;&lt;</operator> <literal type="number">25</literal><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>yw</name></expr></argument>, <argument><expr><name>zw</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>yw</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * Encode back the result.
	 */</comment>
	<expr_stmt><expr><call><name>br_enc32be</name><argument_list>(<argument><expr><name>yb</name></expr></argument>, <argument><expr><name><name>yw</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc32be</name><argument_list>(<argument><expr><name>yb</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>yw</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc32be</name><argument_list>(<argument><expr><name>yb</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>yw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc32be</name><argument_list>(<argument><expr><name>yb</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name><name>yw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
